*** Limitations ***

- Some parameters in functions are not correctly handled yet
(e.g. void *), as ctypes is somehow rigid and a free cast
on-the-fly equivalent to C's is not so viable. So, concerning
userdata (of C pointer to void type) some functions here use
a multi-types approach, instead, when possible: None, long, float,
str, ptr_flobjects, ptr_flform, ptr_flpopup: you may use a list
or a dict to achieve same purpose, retrieving a complex type
e.g. FL_OBJECT(), etc..
- To compare two FL-objects you can use fl_is_same_object(..),
instead of using 'if obj == someobj'
- For some functions who use some parameters as an address
value (e.g. in C: &a) that is modified by the function
itself, there has been a change in API so these arguments
represent multiple return values here.
- in functions who can have variable params (e.g special sequence
additional args in fl_*_entries), as I cannot manage variable
types and positions params here (as ctype requires to know
beforehand  what kind of param type you pass to), you need to
respect a precise order in special sequence params of these
functions (passing as keyword args), otherwise unpredictable
results can happen (more likely, Segfaults).
- public functions are not guaranteed to remain stable and
consistent, until version 1.0.0 will be released. So library
name and directory layout might change in order to achieve
a better reorganization.
- some ported-to-python XForms C functions are for internal
use or low level work in XForms: as maybe they are not useful
in python, they will be commented/disabled or just removed,
when I find all of them.
- this software is mainly focused on GNU/Linux operating
systems. Apple MacOS and MS Windows are not supported, yet.
Other unix-like operating systems may or may not be working.
- not all public functions are working, for now. I am quite
sure public functions used by examples in related directory
are working well. Other ones are being tested on case-by-case
basis (as type conversion from python to C are somehow
problematic, in some critical cases).
- testing is much appreciated, but be warned this software
is in *BETA* development state, presently.



*** Ideas for further development ***

- polish wrapper to remove unnecessary comments {DONE}

- verify all c macro conversion's correctness (if needed) {DONE}.

- Adopting RestructuredText format (rst) in functions' docstrings,
replacing epytext format {DONE}.

- Module deprecated.py will be removed (as I do not see a reason to
support it, as it contains functions and variables already deprecated
by XForms developers). Before removing it is necessary to get rid
of examples that are based on that module's functions and port them
to alternative functions {DONE}.

- reduce chance to incur in Segmentation Fault/Illegal Instruction
(it needs a deeper testing) (the highest priority).

- for each acquired C function I need to improve the python
wrapping function, in order to check if a parameter of correct type
has been passed and convert it if feasible (high priority) {WIP}.

- convert XForms C examples to be used as python scripts
(they can be used as working tests as well) (high priority) {WIP}.

- verify external functions/data from Xlib and C stdlib
to be resolved and correct related shared library loaded
by ctypes, remove external functions not directy referenced
by XForms library. It depends on edge cases of XForms demos remaining
to be ported as examples to xforms-python.

- do a detailed and meaningful docstring for every public function;
this is absolutely annoying as I have to manually copy functions'
description and parameters' lists from XForms documentation, so it
may take several months. But, meantime, I plan to rename functions'
parameters, where possible, in order to improve usability. {DONE}

- have a minimal but complete function reference guide; I do not
intend to do a real developer/user manual as upstream's xforms.pdf
(present in XForms) is absolutely great and function calls in
xforms-python are only slightly modified. BTW I'm using pydoc,
building .html reference guide from docstrings. It needs docstrings'
completeness (for Structure classes, functions, constants and other
variables) {WIP}

- find some way to get rid of all direct X11/Xlib functions,
depending only on XForms library functions (hopefully).

- Porting code from Python 2.x to 3.x (while keeping 2.x
compatibility). Main problem, I guess, is Unicode strings
that are not supported yet in XForms (this should not be a problem
for most of strings used in functions, but it *is* surely a problem
in 1 byte-characters used for keys, shortcut etc...) {DONE, WIP}

- Covering all (public) functions with a proper unit-test for functions
(or a sort of). My intention is to have at least 2 use cases for each:
1st for a surely working solution (i.e. parameters of correct type and
values range), 2nd for a failing/not working but error-checked and managed
solution (xforms-python catches incorrect types and/or values). It
would be ideal if I could have a known failing solution who is not
checked/not managed solution (it should display original XForms error
messages and so relies on XForms upstream library error handling).
I do not think a real traditional unit-test can be of any use here, as
for a library toolkit wrapper, it is not enough using assertions etc...
{WIP}

- Creating a python tool to parse/convert .fd (XForms's fdesign files)
to python. As XForms fdesign is too complex to be utterly duplicated
in python, a parser and converter of fdesign's results file is much more
reasonable. It needs xforms-python's API to be stable and toolbox results
to be corresponding to well-documented and working functions. {DONE}

- Figuring out which values in xfdata.py can be used as single values
or bitwise OR-ed with each other, so checking for allowed value in list
function does not forbid such a resulting value incorrectly. (low priority:
if a value exceeds a prefixed range, it should be caught in upstream XForms)
{WIP}

- Porting xforms-python to object-oriented/classes: No Way! (it is
not worth the effort).

