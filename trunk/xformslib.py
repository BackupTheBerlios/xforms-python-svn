#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python
    Python wrapper for XForms (X11) GUI C toolkit library using ctypes

    Copyright (C) 2009  Luca Lazzaroni "LukenShiro"  <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read XForms, ctypes and other acknowledgements
    and thanks.
"""

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

###############################################
# Interface to XForms shared object libraries #
###############################################

import ctypes as cty
import ctypes.util as ctyutil
import sys
import warnings
import random
import signal


# xforms-python version
__mainversion__ = "0.1.0"               # real version
__vers_against_xforms__ = "1.0.92sp2"   # xforms version to be built against
__version__ = __mainversion__+"_"+__vers_against_xforms__


header_filename = "/usr/include/forms.h"

def get_xforms_version():
    """ Return version string of installed XForms library/header
    """

    complete_xf_version = ""
    try:
        formsh = open(header_filename, "r")
    except IOError:
        raise XFormsLoadError("XForms library toolkit is not installed" \
                              "properly")
    else:
        try:
            # a reasonable size to catch version values
            fconten = formsh.read(2500)
        except IOError:
            raise XFormsLoadError("XForms library toolkit is not installed" \
                                  "properly")
        else:
            formsh.close()
            listconten = fconten.split("\n")
            for singline in listconten:
                idx_ver = singline.find("FL_VERSION")
                if idx_ver != -1:
                    strg_ver1 = singline[idx_ver:len(singline)]
                    strg_ver = strg_ver1.replace("FL_VERSION", "").strip(" ")
                    break
            for singline in listconten:
                idx_rev = singline.find("FL_REVISION")
                if idx_rev != -1:
                    strg_rev1 = singline[idx_rev:len(singline)]
                    strg_rev = strg_rev1.replace("FL_REVISION", "").strip(" ")
                    break
            for singline in listconten:
                idx_fix = singline.find("FL_FIXLEVEL")
                if idx_fix != -1:
                    strg_fix1 = singline[idx_fix:len(singline)]
                    strg_fix = strg_fix1.replace("FL_FIXLEVEL", "").strip(" ").strip('"')
                    break
            complete_xf_version = strg_ver+"."+strg_rev+"."+strg_fix

    return complete_xf_version


def verify_version_compatibility():
    """ verify compatibility between xforms-python version and XForms version
    """

    xforms_vers = get_xforms_version()
    if __vers_against_xforms__ != xforms_vers:      # no match
        warnings.warn("xforms-python is implemented against XForms version " \
                    +__vers_against_xforms__+" and does not match XForms " \
                    "installed version ("+xforms_vers+"). Some compatibility" \
                    " problems may arise if XForms public interface has been" \
                    " modified.")


class XFormsLoadError(Exception):
    """ Error in loading shared object library """
    pass


class XFormsTypeError(Exception):
    """ Generic error for checking types """
    pass



def func_do_nothing_placeholder(cfunction):
    """ Print a warning if called function doesn't exist
    """

    warnings.warn("C function %s does NOT exist, hence its call is ignored," \
                 " hence it is not wrappable and callable in python, as " \
                 "well. Maybe removed or disabled?" % cfunction)
    return None


# placeholders to keep reference to c functions
# keep global to avoid garbage collector's' unpredictable behaviour
_cfunc_refs = {}

def get_rand_dictkey():
    """ Get a randomic string between '1' and '1000' for _cfunc_refs dict keys
    """

    akey = str(random.randrange(1, 1000))
    while akey in _cfunc_refs:
        akey = str(random.randrange(1, 1000))
    return akey


libfbase = ctyutil.find_library("forms")
if libfbase:
    so_libforms = cty.cdll.LoadLibrary(libfbase)              # libforms.so.1
else:
    raise XFormsLoadError("XForms library toolkit is not installed properly")

libfimg = ctyutil.find_library("flimage")
if libfimg:
    so_libflimage = cty.cdll.LoadLibrary(libfimg)             # libflimage.so.1
else:
    raise XFormsLoadError("XForms library toolkit is not installed properly")

libfgl = ctyutil.find_library("formsGL")
if libfgl:
    so_libformsgl = cty.cdll.LoadLibrary(libfgl)            # libformsGL.so.1
else:
    raise XFormsLoadError("XForms library toolkit is not installed properly")

libX11 = ctyutil.find_library("X11")
if libX11:
    so_libX11 = cty.cdll.LoadLibrary(libX11)                # libX11.so
else:
    raise XFormsLoadError("XForms library toolkit is not installed properly")


def cfuncproto(library, cfuncname, retval, arglist=None, doc=""):
    """ Prototype for C function to be wrapped in python
    """

    loadedfunc = None
    try:
        loadedfunc = getattr(library, cfuncname)
    except AttributeError:
        # function doesn't exist
        loadedfunc = func_do_nothing_placeholder(cfuncname)
    else:
        loadedfunc.restype = retval
        loadedfunc.argtypes = arglist
        loadedfunc.__doc__ = doc

    return loadedfunc


def convert_py_to_c_type(objparam, typedestconv):
    """ Convert py to c type conversion in order to prevent segmentation fault
        or other unpredictable behaviour - INACTIVE
    """

    if isinstance(objparam, typedestconv):
        pass




FL_VERSION = 1
FL_REVISION = 0
FL_FIXLEVEL = "92sp2"
FL_INCLUDE_VERSION = (FL_VERSION * 1000 + FL_REVISION)


########################################
# forms.h (Basic.h)
#  Basic definitions and limits.
#  Window system independent prototypes
#  Modify with care
########################################

# Some general constants
FL_ON = 1
FL_OK = 1
FL_VALID = 1
FL_PREEMPT = 1
FL_AUTO = 2
FL_WHEN_NEEDED = FL_AUTO        #2
FL_OFF = 0
FL_CANCEL = 0
FL_INVALID = 0
FL_NONE = 0     # defined elsewhere
# WM_DELETE_WINDOW callback return
FL_IGNORE = -1
FL_CLOSE = -2
# miscty. return types
FL_ARGUMENT = -3
FL_ALLOC = -4
FL_BAD_OBJECT = -5

# max directory length
# FL_PATH_MAX / PATH_MAX
FL_PATH_MAX = 1024

# The screen coordinate unit, FL_Coord, must be of signed type.
# If FL_Coord is float, FL_CoordIsFloat must be defined to be 1 so that
# round-off error can be checked. **TODO Float not tested
FL_Coord = cty.c_int
Fl_CoordIsFloat = 0     # make it 1 if FL_Coord is of type float of type float

FL_COLOR = cty.c_ulong

# Coordinates can be in pixels, milli-meters or points (1/72inch)
# values for enumeration 'FL_COORD_UNIT'
FL_COORD_UNIT = cty.c_int  # enum
FL_COORD_PIXEL = 0          # default, Pixel
FL_COORD_MM = 1             # milli-meter
FL_COORD_POINT = 2          # point
FL_COORD_centiMM = 3        # one hundredth of a mm
FL_COORD_centiPOINT = 4     # one hundredth of a point

# All object classes.
# values for enumeration 'FL_CLASS'
FL_CLASS = cty.c_int  # enum
FL_INVALID_CLASS = 0
FL_BUTTON = 1
FL_LIGHTBUTTON = 2
FL_ROUNDBUTTON = 3
FL_ROUND3DBUTTON = 4
FL_CHECKBUTTON = 5
FL_BITMAPBUTTON = 6
FL_PIXMAPBUTTON = 7
FL_BITMAP = 8
FL_PIXMAP = 9
FL_BOX = 10
FL_TEXT = 11
FL_MENU = 12
FL_CHART = 13
FL_CHOICE = 14
FL_COUNTER = 15
FL_SLIDER = 16
FL_VALSLIDER = 17
FL_INPUT = 18
FL_BROWSER = 19
FL_DIAL = 20
FL_TIMER = 21
FL_CLOCK = 22
FL_POSITIONER = 23
FL_FREE = 24
FL_XYPLOT = 25
FL_FRAME = 26
FL_LABELFRAME = 27
FL_CANVAS = 28
FL_GLCANVAS = 29
FL_TABFOLDER = 30
FL_SCROLLBAR = 31
FL_SCROLLBUTTON = 32
FL_MENUBAR = 33
FL_TEXTBOX = 34             # internal use
FL_LABELBUTTON = 35
FL_COMBOBOX = 36
FL_IMAGECANVAS = 37
FL_THUMBWHEEL = 38
FL_COLORWHEEL = 39
FL_FORMBROWSER = 40
FL_SELECT = 41
FL_NMENU = 42
FL_SPINNER = 43
FL_TBOX = 44
FL_CLASS_END = 45           # sentinel

FL_BEGIN_GROUP = 10000
FL_END_GROUP = 20000

FL_USER_CLASS_START = 1001      # min. user class value
FL_USER_CLASS_END = 9999        # max. user class value

# maximum border width (in pixel)
FL_MAX_BW = 10

# how to display a form onto screen
# values for enumeration 'FL_PLACE'
FL_PLACE = cty.c_int # enum
FL_PLACE_FREE = 0             # size remain resizable
FL_PLACE_MOUSE = 1            # mouse centered on form
FL_PLACE_CENTER = 2           # center of the screen
FL_PLACE_POSITION = 4         # specific size
FL_PLACE_SIZE = 8             # specific size
FL_PLACE_GEOMETRY = 16        # specific position
FL_PLACE_ASPECT =  32         # keep aspect ratio
FL_PLACE_FULLSCREEN = 64      # scale to fit screen
FL_PLACE_HOTSPOT = 128        # so mouse fall on (x,y)
FL_PLACE_ICONIC = 256
# modifiers
FL_FREE_SIZE = 16384          #(1<<14)
FL_FIX_SIZE = 32768           #(1<<15)

FL_PLACE_FREE_CENTER = (FL_PLACE_CENTER|FL_FREE_SIZE)
FL_PLACE_CENTERFREE = (FL_PLACE_CENTER|FL_FREE_SIZE)

# Window manager decoration request and forms attributes
# values for unnamed enumeration
FL_FULLBORDER = 1       # normal
FL_TRANSIENT = 2        # set TRANSIENT_FOR property
FL_NOBORDER = 3         # use override_redirect to supress decor.
FL_MODAL = 256          #1<<8  not implemented yet

# All box types
# values for enumeration 'FL_BOX_TYPE'
FL_BOX_TYPE = cty.c_int  # enum
FL_NO_BOX = 0
FL_UP_BOX = 1
FL_DOWN_BOX = 2
FL_BORDER_BOX = 3
FL_SHADOW_BOX = 4
FL_FRAME_BOX = 5
FL_ROUNDED_BOX = 6
FL_EMBOSSED_BOX = 7
FL_FLAT_BOX = 8
FL_RFLAT_BOX = 9
FL_RSHADOW_BOX = 10
FL_OVAL_BOX = 11
FL_ROUNDED3D_UPBOX = 12
FL_ROUNDED3D_DOWNBOX = 13
FL_OVAL3D_UPBOX = 14
FL_OVAL3D_DOWNBOX = 15
FL_OVAL3D_FRAMEBOX = 16
FL_OVAL3D_EMBOSSEDBOX = 17
# for internal use only
FL_TOPTAB_UPBOX = 18
FL_SELECTED_TOPTAB_UPBOX = 19
FL_BOTTOMTAB_UPBOX = 20
FL_SELECTED_BOTTOMTAB_UPBOX = 21
FL_OSHADOW_BOX = 22                   # not used
FL_MAX_BOX_STYLES = 23                # sentinel


def FL_IS_UPBOX(t):
    if (t == FL_UP_BOX) or \
        (t == FL_OVAL3D_UPBOX) or \
        (t == FL_ROUNDED3D_UPBOX):
        return True
    else:
        return False

def FL_IS_DOWNBOX(t):
    if (t == FL_DOWN_BOX) or \
        (t == FL_OVAL3D_DOWNBOX) or \
        (t == FL_ROUNDED3D_DOWNBOX):
        return True
    else:
        return False

def FL_TO_DOWNBOX(t):
    if t == FL_UP_BOX:
        t1 = FL_DOWN_BOX
    elif t == FL_ROUNDED3D_UPBOX:
        t1 = FL_ROUNDED3D_DOWNBOX
    elif t == FL_OVAL3D_UPBOX:
        t1 = FL_OVAL3D_DOWNBOX
    else:
        t1 = t
    return t1


# How to place text relative to a box
# values for enumeration 'FL_ALIGN'
FL_ALIGN = cty.c_int  # enum
FL_ALIGN_CENTER = 0
FL_ALIGN_TOP = 1
FL_ALIGN_BOTTOM = 2
FL_ALIGN_LEFT = 4
FL_ALIGN_RIGHT = 8
FL_ALIGN_LEFT_TOP = (FL_ALIGN_TOP|FL_ALIGN_LEFT)
FL_ALIGN_RIGHT_TOP = (FL_ALIGN_TOP|FL_ALIGN_RIGHT)
FL_ALIGN_LEFT_BOTTOM = (FL_ALIGN_BOTTOM|FL_ALIGN_LEFT)
FL_ALIGN_RIGHT_BOTTOM = (FL_ALIGN_BOTTOM|FL_ALIGN_RIGHT)
FL_ALIGN_INSIDE = 8192      # (1<<13)
FL_ALIGN_VERT = 16384       # (1<<14)  not functional yet
# the rest is for backward compatibility only, don't use!
FL_ALIGN_TOP_LEFT     = FL_ALIGN_LEFT_TOP
FL_ALIGN_TOP_RIGHT    = FL_ALIGN_RIGHT_TOP
FL_ALIGN_BOTTOM_LEFT  = FL_ALIGN_LEFT_BOTTOM
FL_ALIGN_BOTTOM_RIGHT = FL_ALIGN_RIGHT_BOTTOM

# Mouse buttons. Don't have to be consecutive
# values for unnamed enumeration
FL_MBUTTON1 = 1
FL_MBUTTON2 = 2
FL_MBUTTON3 = 3
FL_MBUTTON4 = 4
FL_MBUTTON5 = 5

FL_LEFT_MOUSE = FL_MBUTTON1
FL_MIDDLE_MOUSE = FL_MBUTTON2
FL_RIGHT_MOUSE = FL_MBUTTON3
FL_SCROLLUP_MOUSE = FL_MBUTTON4
FL_SCROLLDOWN_MOUSE = FL_MBUTTON5

FL_LEFTMOUSE = FL_LEFT_MOUSE
FL_MIDDLEMOUSE = FL_MIDDLE_MOUSE
FL_RIGHTMOUSE = FL_RIGHT_MOUSE
FL_SCROLLUPMOUSE = FL_SCROLLUP_MOUSE
FL_SCROLLDOWNMOUSE = FL_SCROLLDOWN_MOUSE

# control when to return input, slider and dial etc. object.
# values for unnamed enumeration
FL_RETURN_NONE = 0
FL_RETURN_CHANGED = 1
FL_RETURN_END = 2
FL_RETURN_END_CHANGED = 4
FL_RETURN_SELECTION = 8
FL_RETURN_DESELECTION = 16
FL_RETURN_TRIGGERED = 1024
FL_RETURN_ALWAYS = ~ FL_RETURN_END_CHANGED

# Some special color indices for FL private colormap.
# It does not matter  what the value of each enum is,
# but it must start from 0 and be consecutive.
# values for enumeration 'FL_PD_COL'
FL_PD_COL = cty.c_int  # enum
FL_BLACK = 0
FL_RED = 1
FL_GREEN = 2
FL_YELLOW = 3
FL_BLUE = 4
FL_MAGENTA = 5
FL_CYAN = 6
FL_WHITE = 7
FL_TOMATO = 8
FL_INDIANRED = 9
FL_SLATEBLUE = 10
FL_COL1 = 11
FL_RIGHT_BCOL = 12
FL_BOTTOM_BCOL = 13
FL_TOP_BCOL = 14
FL_LEFT_BCOL = 15
FL_MCOL = 16
FL_INACTIVE = 17
FL_PALEGREEN = 18
FL_DARKGOLD = 19
FL_ORCHID = 20
FL_DARKCYAN = 21
FL_DARKTOMATO = 22
FL_WHEAT = 23
FL_DARKORANGE = 24
FL_DEEPPINK = 25
FL_CHARTREUSE = 26
FL_DARKVIOLET = 27
FL_SPRINGGREEN = 28
FL_DODGERBLUE = 29
FL_LIGHTER_COL1 = 30
FL_DARKER_COL1 = 31
FL_ALICEBLUE = 32
FL_ANTIQUEWHITE = 33
FL_AQUA = 34
FL_AQUAMARINE = 35
FL_AZURE = 36
FL_BEIGE = 37
FL_BISQUE = 38
FL_BLANCHEDALMOND = 39
FL_BLUEVIOLET = 40
FL_BROWN = 41
FL_BURLYWOOD = 42
FL_CADETBLUE = 43
FL_CHOCOLATE = 44
FL_CORAL = 45
FL_CORNFLOWERBLUE = 46
FL_CORNSILK = 47
FL_CRIMSON = 48
FL_DARKBLUE = 49
FL_DARKGOLDENROD = 50
FL_DARKGRAY = 51
FL_DARKGREEN = 52
FL_DARKGREY = 53
FL_DARKKHAKI = 54
FL_DARKMAGENTA = 55
FL_DARKOLIVEGREEN = 56
FL_DARKORCHID = 57
FL_DARKRED = 58
FL_DARKSALMON = 59
FL_DARKSEAGREEN = 60
FL_DARKSLATEBLUE = 61
FL_DARKSLATEGRAY = 62
FL_DARKSLATEGREY = 63
FL_DARKTURQUOISE = 64
FL_DEEPSKYBLUE = 65
FL_DIMGRAY = 66
FL_DIMGREY = 67
FL_FIREBRICK = 68
FL_FLORALWHITE = 69
FL_FORESTGREEN = 70
FL_FUCHSIA = 71
FL_GAINSBORO = 72
FL_GHOSTWHITE = 73
FL_GOLD = 74
FL_GOLDENROD = 75
FL_GRAY = 76
FL_GREENYELLOW = 77
FL_GREY = 78
FL_HONEYDEW = 79
FL_HOTPINK = 80
FL_INDIGO = 81
FL_IVORY = 82
FL_KHAKI = 83
FL_LAVENDER = 84
FL_LAVENDERBLUSH = 85
FL_LAWNGREEN = 86
FL_LEMONCHIFFON = 87
FL_LIGHTBLUE = 88
FL_LIGHTCORAL = 89
FL_LIGHTCYAN = 90
FL_LIGHTGOLDENRODYELLOW = 91
FL_LIGHTGRAY = 92
FL_LIGHTGREEN = 93
FL_LIGHTGREY = 94
FL_LIGHTPINK = 95
FL_LIGHTSALMON = 96
FL_LIGHTSEAGREEN = 97
FL_LIGHTSKYBLUE = 98
FL_LIGHTSLATEGRAY = 99
FL_LIGHTSLATEGREY = 100
FL_LIGHTSTEELBLUE = 101
FL_LIGHTYELLOW = 102
FL_LIME = 103
FL_LIMEGREEN = 104
FL_LINEN = 105
FL_MAROON = 106
FL_MEDIUMAQUAMARINE = 107
FL_MEDIUMBLUE = 108
FL_MEDIUMORCHID = 109
FL_MEDIUMPURPLE = 110
FL_MEDIUMSEAGREEN = 111
FL_MEDIUMSLATEBLUE = 112
FL_MEDIUMSPRINGGREEN = 113
FL_MEDIUMTURQUOISE = 114
FL_MEDIUMVIOLETRED = 115
FL_MIDNIGHTBLUE = 116
FL_MINTCREAM = 117
FL_MISTYROSE = 118
FL_MOCCASIN = 119
FL_NAVAJOWHITE = 120
FL_NAVY = 121
FL_OLDLACE = 122
FL_OLIVE = 123
FL_OLIVEDRAB = 124
FL_ORANGE = 125
FL_ORANGERED = 126
FL_PALEGOLDENROD = 127
FL_PALETURQUOISE = 128
FL_PALEVIOLETRED = 129
FL_PAPAYAWHIP = 130
FL_PEACHPUFF = 131
FL_PERU = 132
FL_PINK = 133
FL_PLUM = 134
FL_POWDERBLUE = 135
FL_PURPLE = 136
FL_ROSYBROWN = 137
FL_ROYALBLUE = 138
FL_SADDLEBROWN = 139
FL_SALMON = 140
FL_SANDYBROWN = 141
FL_SEAGREEN = 142
FL_SEASHELL = 143
FL_SIENNA = 144
FL_SILVER = 145
FL_SKYBLUE = 146
FL_SLATEGRAY = 147
FL_SLATEGREY = 148
FL_SNOW = 149
FL_STEELBLUE = 150
FL_TAN = 151
FL_TEAL = 152
FL_THISTLE = 153
FL_TURQUOISE = 154
FL_VIOLET = 155
FL_WHITESMOKE = 156
FL_YELLOWGREEN = 157
FL_FREE_COL1 = 256
FL_FREE_COL2 = 257
FL_FREE_COL3 = 258
FL_FREE_COL4 = 259
FL_FREE_COL5 = 260
FL_FREE_COL6 = 261
FL_FREE_COL7 = 262
FL_FREE_COL8 = 263
FL_FREE_COL9 = 264
FL_FREE_COL10 = 265
FL_FREE_COL11 = 266
FL_FREE_COL12 = 267
FL_FREE_COL13 = 268
FL_FREE_COL14 = 269
FL_FREE_COL15 = 270
FL_FREE_COL16 = 271
FL_NOCOLOR = 2147483647           #INT_MAX

FL_BUILT_IN_COLS = FL_YELLOWGREEN + 1
FL_INACTIVE_COL = FL_INACTIVE

# Some aliases for the color. This is actually backwards ...
FL_GRAY16 = FL_RIGHT_BCOL
FL_GRAY35 = FL_BOTTOM_BCOL
FL_GRAY80 = FL_TOP_BCOL
FL_GRAY90 = FL_LEFT_BCOL
FL_GRAY63 = FL_COL1
FL_GRAY75 = FL_MCOL
FL_LCOL = FL_BLACK
FL_NoColor = FL_NOCOLOR

# An alias probably for an earlier typo
FL_DOGERBLUE = FL_DODGERBLUE

# Events that a form reacts to.
# values for enumeration 'FL_EVENTS'
FL_EVENTS = cty.c_int # enum
FL_NOEVENT = 0
FL_DRAW = 1
FL_PUSH = 2
FL_RELEASE = 3
FL_ENTER = 4
FL_LEAVE = 5
FL_MOTION = 6
FL_FOCUS = 7
FL_UNFOCUS = 8
FL_KEYBOARD = 9
FL_KEYPRESS = FL_KEYBOARD
FL_UPDATE = 10      # for objects that need to update something from time to
                    # time
FL_MOUSE = FL_UPDATE
FL_STEP = 11
FL_SHORTCUT = 12
FL_FREEMEM = 13
FL_OTHER = 14       # property, selection etc
FL_DRAWLABEL = 15
FL_DBLCLICK = 16    # double click
FL_TRPLCLICK = 17   # triple click
FL_ATTRIB = 18      # attribute change
FL_KEYRELEASE = 19
FL_PS = 20          # dump a form into EPS
FL_MOVEORIGIN = 21  # dragging the form across the screen changes its
                    # absolute x,y coords. Objects that themselves
                    # contain forms should ensure that they are up to
                    # date.
FL_RESIZED = 22     # the object has been resized by scale_form
                    # Tell it that this has happened so that
                    # it can resize any FL_FORMs that it contains.

FL_MOVE = FL_MOTION    # for compatibility

# Resize policies
# values for enumeration 'FL_RESIZE_T'
FL_RESIZE_T = cty.c_int  # enum
FL_RESIZE_NONE = 0
FL_RESIZE_X = 1
FL_RESIZE_Y = 2
FL_RESIZE_ALL = (FL_RESIZE_X|FL_RESIZE_Y)

# Keyboard focus control
# values for enumeration 'FL_KEY'
FL_KEY = cty.c_int  # enum
FL_KEY_NORMAL  = 1     # normal keys(0-255) - tab +left/right
FL_KEY_TAB     = 2     # normal keys + 4 direction cursor
FL_KEY_SPECIAL = 4     # only needs special keys(>255)
FL_KEY_ALL     = 7     # all keys

FL_ALT_MASK = (1L<<25)      # alt + Key --> FL_ALT_MASK + key
FL_CONTROL_MASK = (1L<<26)
FL_SHIFT_MASK = (1L<<27)
FL_ALT_VAL = FL_ALT_MASK    # Don't use!

MAX_SHORTCUTS = 8

# Pop-up menu item attributes. NOTE if more than 8, need to change
# choice and menu class where mode is kept by a single byte
# values for unnamed enumeration
FL_PUP_NONE = 0
FL_PUP_GREY = 1
FL_PUP_BOX = 2
FL_PUP_CHECK = 4
FL_PUP_RADIO = 8

FL_PUP_GRAY = FL_PUP_GREY
FL_PUP_TOGGLE = FL_PUP_BOX          # not used anymore
FL_PUP_INACTIVE = FL_PUP_GREY

# Popup and menu entries

FL_PUP_CB = cty.CFUNCTYPE(cty.c_int, cty.c_int)   # callback prototype

STRING = cty.c_char_p
WSTRING = cty.c_wchar_p

class FL_PUP_ENTRY(cty.Structure):
    pass
FL_PUP_ENTRY._fields_ = [
    ('text', STRING),               # label of a popup/menu item
    ('callback', FL_PUP_CB),        # the callback function
    ('shortcut', STRING),           # hotkeys
    ('mode', cty.c_int),            # FL_PUP_GRAY, FL_PUP_CHECK, etcty.
    ('reserved', cty.c_long * 2),   # left in for backward compatibility
]

FL_MENU_ENTRY = FL_PUP_ENTRY

# ***** FONTS *****

FL_MAXFONTS = 48        # max number of fonts

# values for enumeration 'FL_TEXT_STYLE'
FL_TEXT_STYLE = cty.c_int # enum
FL_INVALID_STYLE = -1
FL_NORMAL_STYLE = 0
FL_BOLD_STYLE = 1
FL_ITALIC_STYLE = 2
FL_BOLDITALIC_STYLE = 3
FL_FIXED_STYLE = 4
FL_FIXEDBOLD_STYLE = 5
FL_FIXEDITALIC_STYLE = 6
FL_FIXEDBOLDITALIC_STYLE = 7
FL_TIMES_STYLE = 8
FL_TIMESBOLD_STYLE = 9
FL_TIMESITALIC_STYLE = 10
FL_TIMESBOLDITALIC_STYLE = 11
FL_MISC_STYLE = 12
FL_MISCBOLD_STYLE = 13
FL_MISCITALIC_STYLE = 14
FL_SYMBOL_STYLE = 15
# modifier masks. Need to fit a short
FL_SHADOW_STYLE = 512           #(1<<9)
FL_ENGRAVED_STYLE = 1024        #(1<<10)
FL_EMBOSSED_STYLE = 2048        #(1<<11)

FL_FONT_STYLE = FL_TEXT_STYLE


def special_style(a):
    if (a >= FL_SHADOW_STYLE) and (a <= ( FL_EMBOSSED_STYLE + \
     FL_MAXFONTS)):
        return True
    else:
        return False


# Standard sizes in XForms
FL_TINY_SIZE = 8
FL_SMALL_SIZE = 10
FL_NORMAL_SIZE = 12
FL_MEDIUM_SIZE = 14
FL_LARGE_SIZE = 18
FL_HUGE_SIZE = 24
FL_DEFAULT_SIZE = FL_SMALL_SIZE

# Defines for compatibility
FL_TINY_FONT = FL_TINY_SIZE
FL_SMALL_FONT = FL_SMALL_SIZE
FL_NORMAL_FONT = FL_NORMAL_SIZE
FL_MEDIUM_FONT = FL_MEDIUM_SIZE
FL_LARGE_FONT = FL_LARGE_SIZE
FL_HUGE_FONT = FL_HUGE_SIZE
FL_NORMAL_FONT1 = FL_SMALL_FONT
FL_NORMAL_FONT2 = FL_NORMAL_FONT
FL_DEFAULT_FONT = FL_SMALL_FONT

#FL_BOUND_WIDTH = FL_Coord(1)     # Border width of boxes
FL_BOUND_WIDTH = 1     # Border width of boxes

# Definition of basic struct that holds an object

FL_CLICK_TIMEOUT = 400      # double click interval

XPointer = STRING    # cty.c_char_p

# /usr/include/X11/Xlib.h 159
class _XExtData(cty.Structure):
    pass
_XExtData._fields_ = [
    ('number', cty.c_int),
    ('next', cty.POINTER(_XExtData)),
    ('free_private', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XExtData))),
    ('private_data', XPointer),
]
XExtData = _XExtData

VisualID = cty.c_ulong

# /usr/include/X11/Xlib.h 249
class Visual(cty.Structure):
    pass
Visual._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('visualid', VisualID),
    ('c_class', cty.c_int),
    ('red_mask', cty.c_ulong),
    ('green_mask', cty.c_ulong),
    ('blue_mask', cty.c_ulong),
    ('bits_per_rgb', cty.c_int),
    ('map_entries', cty.c_int),
]

# /usr/include/X11/Xutil.h 296
class XVisualInfo(cty.Structure):
    pass
XVisualInfo._fields_ = [
    ('visual', cty.POINTER(Visual)),
    ('visualid', VisualID),
    ('screen', cty.c_int),
    ('depth', cty.c_int),
    ('c_class', cty.c_int),
    ('red_mask', cty.c_ulong),
    ('green_mask', cty.c_ulong),
    ('blue_mask', cty.c_ulong),
    ('colormap_size', cty.c_int),
    ('bits_per_rgb', cty.c_int),
]

XID = cty.c_ulong
Window = XID    # cty.c_ulong
Pixmap = XID    # cty.c_ulong

class FL_FORM_(cty.Structure):
    pass
FL_FORM = FL_FORM_

class FL_OBJECT_(cty.Structure):
    pass
FL_OBJECT = FL_OBJECT_

# my add --LK
FL_OBJECT_ptr = cty.POINTER(FL_OBJECT)
FL_FORM_ptr = cty.POINTER(FL_FORM)
LONG = cty.c_long

class FL_pixmap_(cty.Structure):
    pass
FL_pixmap = FL_pixmap_

# All pixmaps used by FL_OBJECT to simulate double buffering have the
# following entries in the structure. FL_Coord x,y are used to shift
# the origin of the drawing routines
FL_pixmap_._fields_ = [
    ('pixmap', Pixmap),
    ('win', Window),
    ('visual', cty.POINTER(Visual)),
    ('x', FL_Coord),
    ('y', FL_Coord),
    ('w', FL_Coord),
    ('h', FL_Coord),
    ('depth', cty.c_int),
    ('dbl_background', FL_COLOR),
    ('pixel', FL_COLOR),
]

# callback function for an entire form
FL_FORMCALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_void_p)

# object callback function
FL_CALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_long)

# preemptive callback function
FL_RAW_CALLBACK = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_FORM), cty.c_void_p)

# at close (WM menu delete/close etcty.)
FL_FORM_ATCLOSE = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_FORM), cty.c_void_p)

# deactivate/activate callback
FL_FORM_ATDEACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(FL_FORM), cty.c_void_p)
FL_FORM_ATACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(FL_FORM), cty.c_void_p)
FL_HANDLEPTR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), cty.c_int, \
                FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)

FL_FORM_._pack_ = 4
FL_FORM_._fields_ = [
    ('fdui', cty.c_void_p),               # for fdesign
    ('u_vdata', cty.c_void_p),            # for application
    ('u_cdata', STRING),                # for application
    ('u_ldata', cty.c_long),              # for application
    ('label', STRING),                  # window title
    ('window', Window),                 # X resource ID for window
    ('x', FL_Coord),                    # current geometry info
    ('y', FL_Coord),
    ('w', FL_Coord),
    ('h', FL_Coord),
    ('in_redraw', cty.c_int),             # set while form is drawn
    ('handle_dec_x', cty.c_int),
    ('handle_dec_y', cty.c_int),
    ('hotx', FL_Coord),                 # hot-spot of the form
    ('hoty', FL_Coord),
    ('w_hr', cty.c_double),               # high resolution width and height
    ('h_hr', cty.c_double),               # (needed for precise scaling)
    ('first', cty.POINTER(FL_OBJECT)),
    ('last', cty.POINTER(FL_OBJECT)),
    ('focusobj', cty.POINTER(FL_OBJECT)),
    ('form_callback', FL_FORMCALLBACKPTR),
    ('activate_callback', FL_FORM_ATACTIVATE),
    ('deactivate_callback', FL_FORM_ATDEACTIVATE),
    ('form_cb_data', cty.c_void_p),
    ('activate_data', cty.c_void_p),
    ('deactivate_data', cty.c_void_p),
    ('key_callback', FL_RAW_CALLBACK),
    ('push_callback', FL_RAW_CALLBACK),
    ('crossing_callback', FL_RAW_CALLBACK),
    ('motion_callback', FL_RAW_CALLBACK),
    ('all_callback', FL_RAW_CALLBACK),
    ('compress_mask', cty.c_ulong),
    ('evmask', cty.c_ulong),
    # WM_DELETE_WINDOW message handler
    ('close_callback', FL_FORM_ATCLOSE),
    ('close_data', cty.c_void_p),
    ('flpixmap', cty.POINTER(FL_pixmap)),     # back buffer
    ('icon_pixmap', Pixmap),
    ('icon_mask', Pixmap),
    # interaction and other flags
    ('vmode', cty.c_int),                     # current X visual class
    ('deactivated', cty.c_int),               # true if sensitive
    ('use_pixmap', cty.c_int),                # true if dbl buffering
    ('frozen', cty.c_int),                    # true if sync change
    ('visible', cty.c_int),                   # true if mapped
    ('wm_border', cty.c_int),                 # window manager info
    ('prop', cty.c_uint),                     # other attributes
    ('has_auto_objects', cty.c_int),
    ('top', cty.c_int),
    ('sort_of_modal', cty.c_int),             # internal use
    ('parent', cty.POINTER(FL_FORM)),
    ('child', cty.POINTER(FL_FORM)),
    ('parent_obj', cty.POINTER(FL_OBJECT)),
    ('attached', cty.c_int),                  # not independent anymore
    ('pre_attach', cty.CFUNCTYPE(None, cty.POINTER(FL_FORM))),
    ('attach_data', cty.c_void_p),
    ('no_tooltip', cty.c_int),
]

FL_OBJECT_._pack_ = 4
FL_OBJECT_._fields_ = [
    ('form', cty.POINTER(FL_FORM)),       # the form this object belongs to
    ('u_vdata', cty.c_void_p),            # anything the user likes
    ('u_cdata', STRING),                # anything the user likes
    ('u_ldata', cty.c_long),              # anything the user likes
    ('objclass', cty.c_int),              # class of object, button, slider etc
    ('type', cty.c_int),                  # type within the class
    ('boxtype', cty.c_int),               # what kind of box type
    ('x', FL_Coord),                    # current obj. location and size
    ('y', FL_Coord),
    ('w', FL_Coord),
    ('h', FL_Coord),
    ('fl1', cty.c_double),                # distances of upper left hand (1) and
    ('fr1', cty.c_double),                # lower right hand corner (2) to left,
    ('ft1', cty.c_double),                # right, top and bottom of enclosing
    ('fb1', cty.c_double),                # form
    ('fl2', cty.c_double),
    ('fr2', cty.c_double),
    ('ft2', cty.c_double),
    ('fb2', cty.c_double),
    ('bw', FL_Coord),
    ('col1', FL_COLOR),                 # colors of obj
    ('col2', FL_COLOR),
    ('label', STRING),                  # object label
    ('lcol', FL_COLOR),                 # label color
    ('align', cty.c_int),
    ('lsize', cty.c_int),                 # label size and style
    ('lstyle', cty.c_int),
    ('shortcut', cty.POINTER(cty.c_long)),
    ('handle', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), cty.c_int, \
    FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)),
    ('object_callback', cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), \
    cty.c_long)),
    ('argument', cty.c_long),
    ('spec', cty.c_void_p),               # instantiation
    ('prehandle', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
    cty.c_int, FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)),
    ('posthandle', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
    cty.c_int, FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)),
    ('set_return', cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_int)),
    # re-configure preference
    ('resize', cty.c_uint),               # what to do if WM resizes the FORM
    ('nwgravity', cty.c_uint),            # how to re-position top-left corner
    ('segravity', cty.c_uint),         # how to re-position lower-right corner
    ('prev', cty.POINTER(FL_OBJECT)),     # prev. obj in form
    ('next', cty.POINTER(FL_OBJECT)),     # next obj in form
    ('parent', cty.POINTER(FL_OBJECT)),
    ('child', cty.POINTER(FL_OBJECT)),
    ('nc', cty.POINTER(FL_OBJECT)),
    ('returned', cty.c_int),
    ('flpixmap', cty.POINTER(FL_pixmap)), # pixmap double buffering stateinfo
    ('use_pixmap', cty.c_int),          # true to use pixmap double buffering
    # some interaction flags
    ('double_buffer', cty.c_int),         # only used by mesa/gl canvas
    ('pushed', cty.c_int),
    ('focus', cty.c_int),
    ('belowmouse', cty.c_int),
    ('active', cty.c_int),                # if accept event
    ('input', cty.c_int),
    ('wantkey', cty.c_int),
    ('radio', cty.c_int),
    ('automatic', cty.c_int),
    ('redraw', cty.c_int),
    ('visible', cty.c_int),
    ('is_under', cty.c_int),          # if (partially) hidden by other object
    ('clip', cty.c_int),
    ('click_timeout', cty.c_ulong),
    ('c_vdata', cty.c_void_p),            # for class use
    ('c_cdata', STRING),                # for class use
    ('c_ldata', cty.c_long),              # for class use
    ('aux_col1', FL_COLOR),             # aux colors
    ('aux_col2', FL_COLOR),
    ('dbl_background', FL_COLOR),       # double buffer background
    ('how_return', cty.c_int),
    ('tooltip', STRING),
    ('tipID', cty.c_int),
    ('group_id', cty.c_int),
    ('want_motion', cty.c_int),
    ('want_update', cty.c_int),
]


# Macro for getting at the object handlers return value

def fl_object_returned(o):
    return o.returned


# error callback
FL_ERROR_FUNC = cty.CFUNCTYPE(None, STRING, STRING)

FL_EVENT = (cty.POINTER(FL_OBJECT)).in_dll(so_libforms, 'FL_EVENT')

# form visibility state: form->visible
# values for unnamed enumeration
FL_BEING_HIDDEN = -1
FL_HIDDEN = 0
FL_INVISIBLE = FL_HIDDEN
FL_VISIBLE = 1

# All FD_xxx structure emitted by fdesign contains at least the
# following
class FD_Any(cty.Structure):
    pass
FD_Any._fields_ = [
    ('form', cty.POINTER(FL_FORM)),
    ('vdata', cty.c_void_p),
    ('cdata', STRING),
    ('ldata', cty.c_long),
]

# Async IO stuff
FL_READ   = 1
FL_WRITE  = 2
FL_EXCEPT = 4


# IO other than XEvent Q

FL_IO_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)

_fl_add_io_callback = cfuncproto(
        so_libforms, "fl_add_io_callback", \
        None, [cty.c_int, cty.c_uint, FL_IO_CALLBACK, cty.c_void_p], \
        """void _fl_add_io_callback(int fd, unsigned int mask,
           FL_IO_CALLBACK callback, void * data)
        """)
def fl_add_io_callback(fd, mask, py_callback, data):
    """ fl_add_io_callback(fd, mask, py_callback, data)
        Registers an input callback function when input is available from fd.
        <fd> : a valid file descriptor in a unix system
        <mask> : under what circumstance the input callback should be invoked
                 (FL_READ, FL_WRITE or FL_EXCEPT)
        <py_callback> : python function to be invoked under mask condition
        <data> : argument to be passed to function
    """

    c_callback = FL_IO_CALLBACK(py_callback)
    _cfunc_refs[get_rand_dictkey()] = c_callback
    _fl_add_io_callback(fd, mask, c_callback, data)


_fl_remove_io_callback = cfuncproto(
        so_libforms, "fl_remove_io_callback", \
        None, [cty.c_int, cty.c_uint, FL_IO_CALLBACK], \
        """void _fl_remove_io_callback(int fd, unsigned int mask,
           FL_IO_CALLBACK cb)
        """)
def fl_remove_io_callback(fd, mask, py_cb):
    """ fl_remove_io_callback(fd, mask, py_cb)
        Removes the registered callback function when input is available from fd.
        <fd> : a valid file descriptor in a unix system
        <mask> : under what circumstance the input callback should be removed
                 (FL_READ, FL_WRITE, FL_EXCEPT)
        <py_cb> : python function to be invoked under mask condition
    """

    c_cb = FL_IO_CALLBACK(py_cb)
    _cfunc_refs[get_rand_dictkey()] = c_cb
    _fl_remove_io_callback(fd, mask, c_cb)


# signals

FL_SIGNAL_HANDLER = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)


_fl_add_signal_callback = cfuncproto(
        so_libforms, "fl_add_signal_callback", \
        None, [cty.c_int, FL_SIGNAL_HANDLER, cty.c_void_p], \
        """void _fl_add_signal_callback(int s, FL_SIGNAL_HANDLER cb,
           void * data)
        """)
def fl_add_signal_callback(sglnum, py_cb, data):
    """ fl_add_signal_callback(sglnum, py_cb, data)
        Handles the receipt of a signal by registering a callback function
         that gets called when a signal is caught (only 1 function per signal)
        <sglnum> : signal number (e.g. signal.SIGALRM, signal.SIGINT, etc.)
        <py_cb> : python function to be invoked after catching the signal
        <data> : argument to be passed to function
    """

    c_cb = FL_SIGNAL_HANDLER(py_cb)
    _cfunc_refs[get_rand_dictkey()] = c_cb
    _fl_add_signal_callback(sglnum, c_cb, data)


_fl_remove_signal_callback = cfuncproto(
        so_libforms, "fl_remove_signal_callback", \
        None, [cty.c_int], \
        """void _fl_remove_signal_callback(int s)
        """)
def fl_remove_signal_callback(sglnum):
    """ fl_remove_signal_callback(sglnum)
        Removes a previously registered callback function related to a signal
        <sglnum> : signal number (e.g. signal.SIGALRM, signal.SIGINT, etc.)
    """

    _fl_remove_signal_callback(sglnum)


_fl_signal_caught = cfuncproto(
        so_libforms, "fl_signal_caught", \
        None, [cty.c_int], \
        """void _fl_signal_caught(int s)
        """)
def fl_signal_caught(sglnum):
    """ fl_signal_caught(sglnum)
        Informs the main loop of the delivery of the signal signum, the signal
         is received by the application program
        <sglnum> : signal number (e.g. signal.SIGALRM, signal.SIGINT, etc.)
    """

    _fl_signal_caught(sglnum)


_fl_app_signal_direct = cfuncproto(
        so_libforms, "fl_app_signal_direct", \
        None, [cty.c_int], \
        """void _fl_app_signal_direct(int y)
        """)
def fl_app_signal_direct(y):
    """ fl_app_signal_direct(y)
        Changes the default behavior of the built-in signal facilities (to be
         called with a true value for flag prior to any use of
         fl_add_signal_callback()
        <y> : flag (e.g. True, False)
    """

    _fl_app_signal_direct(y)


#timeouts

FL_TIMEOUT_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)


_fl_add_timeout = cfuncproto(
        so_libforms, "fl_add_timeout", \
        cty.c_int, [cty.c_long, FL_TIMEOUT_CALLBACK, cty.c_void_p], \
        """int _fl_add_timeout(long int msec,
           FL_TIMEOUT_CALLBACK callback, void * data)
        """)
def fl_add_timeout(msec, py_callback, data):
    """ fl_add_timeout(msec, py_callback, data) -> timer ID
        Adds a timeout callback after a specified elapsed time
        <msec> : time elapsed in milliseconds
        <py_callback> : python function to be invoked after time
        <data> : argument to be passed to function
    """

    c_callback = FL_TIMEOUT_CALLBACK(py_callback)
    retval = _fl_add_timeout(msec, c_callback, data)
    _cfunc_refs[get_rand_dictkey()] = c_callback
    return retval


_fl_remove_timeout = cfuncproto(
        so_libforms, "fl_remove_timeout", \
        None, [cty.c_int], \
        """void fl_remove_timeout(int id)
        """)
def fl_remove_timeout(idnum):
    """ fl_remove_timeout(idnum)
        Removes a timeout callback function (created with fl_add_timeout)
        <idnum> : ID timeout number
    """

    _fl_remove_timeout(idnum)


# Basic public routine prototypes

_fl_library_version = cfuncproto(
        so_libforms, "fl_library_version", \
        cty.c_int, [cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)], \
        """int _fl_library_version(int * ver, int * rev)
        """)
def fl_library_version(ver, rev):
    """ fl_library_version(ver, rev) -> version_rev ID
        Returns a consolidated version information, computed as 1000 * version
         + revision.
        <ver> : version (e.g. 1 in 1.x.yy)
        <rev> : revision (e.g. 0 in x.0.yy)
    """

    retval = _fl_library_version(ver, rev)
    return retval


# Generic routines that deal with FORMS

_fl_bgn_form = cfuncproto(
        so_libforms, "fl_bgn_form", \
        cty.POINTER(FL_FORM), [cty.c_int, FL_Coord, FL_Coord], \
        """FL_FORM * _fl_bgn_form(int type, FL_Coord w, FL_Coord h)
        """)
def fl_bgn_form(formtype, w, h):
    """ fl_bgn_form(formtype, w, h) -> pForm
        Starts the definition of a form call
        <formtype> : the type of the box that is used as a background
                     (e.g. FL_DOWN_BOX, FL_BORDER_BOX, FL_SHADOW_BOX, etc.)      
        <w> : width of the new form
        <h> : height of the new form
    """

    retval = _fl_bgn_form(formtype, w, h)
    return retval


_fl_end_form = cfuncproto(
        so_libforms, "fl_end_form", \
        None, [], \
        """void _fl_end_form()
        """)
def fl_end_form():
    """ fl_end_form()
        Ends the definition for a form call, to be used once all required
         objects required have been added to a form call
    """

    _fl_end_form()


_fl_do_forms = cfuncproto(
        so_libforms, "fl_do_forms", \
        cty.POINTER(FL_OBJECT), [], \
        """FL_OBJECT * _fl_do_forms()
        """)
def fl_do_forms():
    """ fl_do_forms() -> pObject
        Starts the main loop of the program and returns only when the state of
         an object changes that has no callback bound to it.
    """

    retval = _fl_do_forms()
    return retval


_fl_check_forms = cfuncproto(
        so_libforms, "fl_check_forms", \
        cty.POINTER(FL_OBJECT), [], \
        """FL_OBJECT * _fl_check_forms()
        """)
def fl_check_forms():
    """ fl_check_forms() -> pObject
        Returns None immediately unless the state of one of the object
         (without a callback bound to it) changed.
    """

    retval = _fl_check_forms()
    return retval


_fl_do_only_forms = cfuncproto(
        so_libforms, "fl_do_only_forms", \
        cty.POINTER(FL_OBJECT), [], \
        """FL_OBJECT * _fl_do_only_forms()
        """)
def fl_do_only_forms():
    """ fl_do_only_forms() -> pObject
        Starts the main loop of the program and returns only when the state of
         an object changes that has no callback bound to it. It does not
         handle user events generated by application windows opened via
         fl_winopen() or similar routines.
    """

    retval = _fl_do_only_forms()
    return retval


_fl_check_only_forms = cfuncproto(
        so_libforms, "fl_check_only_forms", \
        cty.POINTER(FL_OBJECT), [], \
        """FL_OBJECT * _fl_check_only_forms()
        """)
def fl_check_only_forms():
    """ fl_check_only_forms() -> pObject
        Returns None immediately unless the state of one of the object
         (without a callback bound to it) changed. It does not handle user
         events generated by application windows opened via fl_winopen() or
         similar routines.
    """

    retval = _fl_check_only_forms()
    return retval


_fl_freeze_form = cfuncproto(
        so_libforms, "fl_freeze_form", \
        None, [cty.POINTER(FL_FORM)], \
        """void fl_freeze_form(FL_FORM * form)
        """)
def fl_freeze_form(pForm):
    """ fl_freeze_form(pForm)
        It does not temporarily redraw a form while changes are being made, so
         all changes made are instead buffered internally.
        <pForm> : form not to be re-drawn temporarly
    """

    _fl_freeze_form(pForm)


_fl_set_focus_object = cfuncproto(
        so_libforms, "fl_set_focus_object", \
        None, [cty.POINTER(FL_FORM), cty.POINTER(FL_OBJECT)], \
        """void fl_set_focus_object(FL_FORM * form, FL_OBJECT * obj)
        """)
def fl_set_focus_object(pForm, pObject):
    """ fl_set_focus_object(pForm, pObject)
        Sets the input focus in form to object pObject.
        <pForm> : form whose object has to be focused
        <pObject> : object to be focused
    """

    _fl_set_focus_object(pForm, pObject)


_fl_get_focus_object = cfuncproto(
        so_libforms, "fl_get_focus_object", \
        cty.POINTER(FL_OBJECT), [cty.POINTER(FL_FORM)], \
        """FL_OBJECT * fl_get_focus_object(FL_FORM * form)
        """)
def fl_get_focus_object(pForm):
    """ fl_get_focus_object(pForm) -> pObject
        Obtains the object that has the focus on a form
        <pForm> : form that has a focused object
    """

    retval = _fl_get_focus_object(pForm)
    return retval


_fl_reset_focus_object = cfuncproto(
        so_libforms, "fl_reset_focus_object", \
        None, [cty.POINTER(FL_OBJECT)], \
        """void fl_reset_focus_object(FL_OBJECT * ob)
        """)
def fl_reset_focus_object(pObject):
    """ fl_reset_focus_object(pObject)
        Override the FL_UNFOCUS event
        <pObject> : object towards applying event
    """

    _fl_reset_focus_object(pObject)


fl_set_object_focus = fl_set_focus_object


_fl_set_form_atclose = cfuncproto(
        so_libforms, "fl_set_form_atclose", \
        FL_FORM_ATCLOSE, [cty.POINTER(FL_FORM), FL_FORM_ATCLOSE,
        cty.c_void_p], \
        """FL_FORM_ATCLOSE fl_set_form_atclose(FL_FORM * form,
           FL_FORM_ATCLOSE fmclose, void * data)
        """)
def fl_set_form_atclose(pForm, py_fmclose, data):
    """ fl_set_form_atclose(pForm, py_fmclose, data) -> form atclose reference
        Calls a callback function before closing the form.
        <pForm> : form the receive the message
        <py_fmclose> : python callback function to be called
        <data> : argument to be passed to function
    """

    c_fmclose = FL_FORM_ATCLOSE(py_fmclose)
    _cfunc_refs[get_rand_dictkey()] = c_fmclose
    retval = _fl_set_form_atclose(pForm, c_fmclose, data)
    return retval


_fl_set_atclose = cfuncproto(
        so_libforms, "fl_set_atclose", \
        FL_FORM_ATCLOSE, [FL_FORM_ATCLOSE, cty.c_void_p], \
        """FL_FORM_ATCLOSE fl_set_atclose(FL_FORM_ATCLOSE fmclose,
           void * data)
        """)
def fl_set_atclose(py_fmclose, data):
    """ fl_set_atclose(py_fmclose, data) -> atclose reference
        Calls a callback function before terminating the application.
        <py_fmclose> : callback function to be called
        <data> : argument to be passed to function
    """

    c_fmclose = FL_FORM_ATCLOSE(py_fmclose)
    _cfunc_refs[get_rand_dictkey()] = c_fmclose
    retval = _fl_set_atclose(c_fmclose, data)
    return retval


_fl_set_form_atactivate = cfuncproto(
        so_libforms, "fl_set_form_atactivate", \
        FL_FORM_ATACTIVATE, [cty.POINTER(FL_FORM), FL_FORM_ATACTIVATE,
        cty.c_void_p], \
        """FL_FORM_ATACTIVATE fl_set_form_atactivate(FL_FORM * form,
           FL_FORM_ATACTIVATE cb, void * data)
        """)
def fl_set_form_atactivate(pForm, py_cb, data):
    """ fl_set_form_atactivate(pForm, py_cb, data) -> form atactivate
        Register a callback that is called when activation status of a forms
         is enabled
        <pForm> : form activated
        <py_cb> : python callback function called
        <data> : argument to be passed to function 
    """

    c_cb = FL_FORM_ATACTIVATE(py_cb)
    _cfunc_refs[get_rand_dictkey()] = c_cb
    retval = _fl_set_form_atactivate(pForm, c_cb, data)
    return retval


_fl_set_form_atdeactivate = cfuncproto(
        so_libforms, "fl_set_form_atdeactivate", \
        FL_FORM_ATDEACTIVATE, [cty.POINTER(FL_FORM),
        FL_FORM_ATDEACTIVATE, cty.c_void_p], \
        """FL_FORM_ATDEACTIVATE fl_set_form_atdeactivate(FL_FORM * form,
           FL_FORM_ATDEACTIVATE cb, void * data)
        """)
def fl_set_form_atdeactivate(pForm, py_cb, data):
    """ fl_set_form_atdeactivate(pForm, py_cb, data) -> form atdeactivate
        Register a callback that is called when activation status of a forms
         is disabled
        <pForm> : form de-activated
        <py_cb> : python callback function called
        <data> : argument to be passed to function 
    """

    c_cb = FL_FORM_ATACTIVATE(py_cb)
    _cfunc_refs[get_rand_dictkey()] = c_cb
    retval = _fl_set_form_atdeactivate(pForm, c_cb, data)
    return retval


_fl_unfreeze_form = cfuncproto(
        so_libforms, "fl_unfreeze_form", \
        None, [cty.POINTER(FL_FORM)], \
        """void fl_unfreeze_form(FL_FORM * form)
        """)
def fl_unfreeze_form(pForm):
    """ fl_unfreeze_form(pForm)
        All changes made in the meantime in a form are drawn at once,
         reverting previous freeze
        <pForm> : form to be re-drawn after freezing
    """

    _fl_unfreeze_form(pForm)


_fl_deactivate_form = cfuncproto(
        so_libforms, "fl_deactivate_form", \
        None, [cty.POINTER(FL_FORM)], \
        """void fl_deactivate_form(FL_FORM * form)
        """)
def fl_deactivate_form(pForm):
    """ fl_deactivate_form(pForm)
        Deactivates form temporarily, without hiding it, but not allowing the
         user to interact with elements contained in form (buttons, etc.)
        <pForm> : form to be de-activated
    """

    _fl_deactivate_form(pForm)


_fl_activate_form = cfuncproto(
        so_libforms, "fl_activate_form", \
        None, [cty.POINTER(FL_FORM)], \
        """void fl_activate_form(FL_FORM * form)
        """)
def fl_activate_form(pForm):
    """ fl_activate_form(pForm)
        Re-activates form, allowing the user to interact again with elements
         contained in form (buttons, etc.)
        <pForm> : form to be re-activated
    """

    _fl_activate_form(pForm)


_fl_deactivate_all_forms = cfuncproto(
        so_libforms, "fl_deactivate_all_forms", \
        None, [], \
        """void fl_deactivate_all_forms()
        """)
def fl_deactivate_all_forms():
    """ fl_deactivate_all_forms()
        De-activates all current forms
    """

    _fl_deactivate_all_forms()


_fl_activate_all_forms = cfuncproto(
        so_libforms, "fl_activate_all_forms", \
        None, [], \
        """void fl_activate_all_forms()
        """)
def fl_activate_all_forms():
    """ fl_activate_all_forms()
        Re-activates all current forms
    """

    _fl_activate_all_forms()


_fl_freeze_all_forms = cfuncproto(
        so_libforms, "fl_freeze_all_forms", \
        None, [], \
        """void fl_freeze_all_forms()
        """)
def fl_freeze_all_forms():
    """ fl_freeze_all_forms()
        It does not temporarily redraw all current forms while changes are
         being made, so all changes made are instead buffered internally.
    """

    _fl_freeze_all_forms()


_fl_unfreeze_all_forms = cfuncproto(
        so_libforms, "fl_unfreeze_all_forms", \
        None, [], \
        """void fl_unfreeze_all_forms()
        """)
def fl_unfreeze_all_forms():
    """ fl_unfreeze_all_forms()
        All changes made in the meantime in all current forms are drawn at
         once, reverting previous freeze
    """

    _fl_unfreeze_all_forms()


_fl_scale_form = cfuncproto(
        so_libforms, "fl_scale_form", \
        None, [cty.POINTER(FL_FORM), cty.c_double, cty.c_double], \
        """void fl_scale_form(FL_FORM * form, double xsc, double ysc)
        """)
def fl_scale_form(pForm, xsc, ysc):
    """ fl_scale_form(pForm, xsc, ysc)
        Scales a form and the objects on it in size and position, indicating
         a scaling factor in x- and y-direction with respect to the current
         size
        <pForm> : form to be scaled
        <xsc> : scaling factor in horizonthal direction
        <ysc> : scaling factor in vertical direction
    """

    _fl_scale_form(pForm, xsc, ysc)


_fl_set_form_position = cfuncproto(
        so_libforms, "fl_set_form_position", \
        None, [cty.POINTER(FL_FORM), FL_Coord, FL_Coord], \
        """void fl_set_form_position(FL_FORM * form, FL_Coord x,
           FL_Coord y)
        """)
def fl_set_form_position(pForm, x, y):
    """ fl_set_form_position(pForm, x, y)
        Sets position of form, when placing a form on the screen with
         FL_PLACE_GEOMETRY as place argument
        <pForm> : form whose position is to be set
        <x> : horizonthal position
        <y> : vertical position
    """

    _fl_set_form_position(pForm, x, y)


_fl_set_form_title = cfuncproto(
        so_libforms, "fl_set_form_title", \
        None, [cty.POINTER(FL_FORM), STRING], \
        """void fl_set_form_title(FL_FORM * form, const char * name)
        """)
def fl_set_form_title(pForm, name):
    """ fl_set_form_title(pForm, name)
        Changes the form title (and the icon name) after it is shown.
        <pForm> : form whose title has to be changed
        <name> : new name for the form
    """

    _fl_set_form_title(pForm, name)


_fl_set_app_mainform = cfuncproto(
        so_libforms, "fl_set_app_mainform",
        None, [cty.POINTER(FL_FORM)], \
        """void fl_set_app_mainform(FL_FORM * form)
        """)
def fl_set_app_mainform(pForm):
    """ fl_set_app_mainform(pForm)
    """

    _fl_set_app_mainform(pForm)


_fl_get_app_mainform = cfuncproto(
        so_libforms, "fl_get_app_mainform",
        cty.POINTER(FL_FORM), [], \
        """FL_FORM * fl_get_app_mainform()
        """)
def fl_get_app_mainform():
    """ fl_get_app_mainform() -> pForm reference
    """

    retval = _fl_get_app_mainform()
    return retval


_fl_set_app_nomainform = cfuncproto(
        so_libforms, "fl_set_app_nomainform",
        None, [cty.c_int], \
        """void fl_set_app_nomainform(int flag)
        """)
def fl_set_app_nomainform(flag):
    """ fl_set_app_nomainform(flag)
    """

    _fl_set_app_nomainform(flag)


_fl_set_form_callback = cfuncproto(
        so_libforms, "fl_set_form_callback", \
        None, [cty.POINTER(FL_FORM), FL_FORMCALLBACKPTR, cty.c_void_p], \
        """void fl_set_form_callback(FL_FORM * form,
           FL_FORMCALLBACKPTR callback, void * d)
        """)
def fl_set_form_callback(pForm, pycallback, d):
    """ fl_set_form_callback(pForm, pycallback, d)
    """

    c_callback = FL_FORMCALLBACKPTR(pycallback)
    _fl_set_form_callback(pForm, c_callback, d)


fl_set_form_call_back = fl_set_form_callback


_fl_set_form_size = cfuncproto(
        so_libforms, "fl_set_form_size", \
        None, [cty.POINTER(FL_FORM), FL_Coord, FL_Coord], \
        """void fl_set_form_size(FL_FORM * form, FL_Coord w, FL_Coord h)
        """)
def fl_set_form_size(pForm, w, h):
    """ fl_set_form_size(pForm, w, h)
    """

    _fl_set_form_size(pForm, w, h)


_fl_set_form_hotspot = cfuncproto(
        so_libforms, "fl_set_form_hotspot", \
        None, [cty.POINTER(FL_FORM), FL_Coord, FL_Coord], \
        """void fl_set_form_hotspot(FL_FORM * form, FL_Coord x, FL_Coord y)
        """)
def fl_set_form_hotspot(pForm, x, y):
    """ fl_set_form_hotspot(pForm, x, y)
    """

    _fl_set_form_hotspot(pForm, x, y)


_fl_set_form_hotobject = cfuncproto(
        so_libforms, "fl_set_form_hotobject", \
        None, [cty.POINTER(FL_FORM), cty.POINTER(FL_OBJECT)], \
        """void fl_set_form_hotobject(FL_FORM * form, FL_OBJECT * ob)
        """)
def fl_set_form_hotobject(pForm, pObject):
    """ fl_set_form_hotobject(pForm, pObject)
    """

    _fl_set_form_hotobject(pForm, pObject)


_fl_set_form_minsize = cfuncproto(
        so_libforms, "fl_set_form_minsize", \
        None, [cty.POINTER(FL_FORM), FL_Coord, FL_Coord], \
        """void fl_set_form_minsize(FL_FORM * form, FL_Coord w, FL_Coord h)
        """)
def fl_set_form_minsize(pForm, w, h):
    """ fl_set_form_minsize(pForm, w, h)
    """

    _fl_set_form_minsize(pForm, w, h)


_fl_set_form_maxsize = cfuncproto(
        so_libforms, "fl_set_form_maxsize", \
        None, [cty.POINTER(FL_FORM), FL_Coord, FL_Coord], \
        """void fl_set_form_maxsize(FL_FORM * form, FL_Coord w, FL_Coord h)
        """)
def fl_set_form_maxsize(pForm, w, h):
    """ fl_set_form_maxsize(pForm, w, h)
    """

    _fl_set_form_maxsize(pForm, w, h)


_fl_set_form_event_cmask = cfuncproto(
        so_libforms, "fl_set_form_event_cmask", \
        None, [cty.POINTER(FL_FORM), cty.c_ulong], \
        """void fl_set_form_event_cmask(FL_FORM * form,
           long unsigned int cmask)
        """)
def fl_set_form_event_cmask(pForm, cmask):
    """ fl_set_form_event_cmask(pForm, cmask)
    """

    _fl_set_form_event_cmask(pForm, cmask)


_fl_get_form_event_cmask = cfuncproto(
        so_libforms, "fl_get_form_event_cmask", \
        cty.c_ulong, [cty.POINTER(FL_FORM)], \
        """long unsigned int fl_get_form_event_cmask(FL_FORM * form)
        """)
def fl_get_form_event_cmask(pForm):
    """ fl_get_form_event_cmask(pForm) -> cmask ID
    """

    retval = _fl_get_form_event_cmask(pForm)
    return retval


_fl_set_form_geometry = cfuncproto(
        so_libforms, "fl_set_form_geometry", \
        None, [cty.POINTER(FL_FORM), FL_Coord, FL_Coord,
        FL_Coord, FL_Coord], \
        """void fl_set_form_geometry(FL_FORM * form, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h)
        """)
def fl_set_form_geometry(pForm, x, y, w, h):
    """ fl_set_form_geometry(pForm, x, y, w, h)
    """

    _fl_set_form_geometry(pForm, x, y, w, h)


fl_set_initial_placement = fl_set_form_geometry


_fl_show_form = cfuncproto(
        so_libforms, "fl_show_form",
        Window, [cty.POINTER(FL_FORM), cty.c_int, cty.c_int, STRING], \
        """Window fl_show_form(FL_FORM * form, int place, int border,
           const char * name)
        """)
def fl_show_form(pForm, place, border, name):
    """ fl_show_form(pForm, place, border, name) -> window reference
    """

    retval = _fl_show_form(pForm, place, border, name)
    return retval


_fl_hide_form = cfuncproto(
        so_libforms, "fl_hide_form",
        None, [cty.POINTER(FL_FORM)], \
        """void fl_hide_form(FL_FORM * form)
        """)
def fl_hide_form(pForm):
    """ fl_hide_form(pForm)
    """

    _fl_hide_form(pForm)


_fl_free_form = cfuncproto(
        so_libforms, "fl_free_form",
        None, [cty.POINTER(FL_FORM)], \
        """void fl_free_form(FL_FORM * form)
        """)
def fl_free_form(pForm):
    """ fl_free_form(pForm)
    """

    _fl_free_form(pForm)


_fl_redraw_form = cfuncproto(
        so_libforms, "fl_redraw_form",
        None, [cty.POINTER(FL_FORM)], \
        """void fl_redraw_form(FL_FORM * form)
        """)
def fl_redraw_form(pForm):
    """ fl_redraw_form(pForm)
    """

    _fl_redraw_form(pForm)


_fl_set_form_dblbuffer = cfuncproto(
        so_libforms, "fl_set_form_dblbuffer", \
        None, [cty.POINTER(FL_FORM), cty.c_int], \
        """void fl_set_form_dblbuffer(FL_FORM * form, int y)
        """)
def fl_set_form_dblbuffer(pForm, y):
    """ fl_set_form_dblbuffer(pForm, y)
    """

    _fl_set_form_dblbuffer(pForm, y)


_fl_prepare_form_window = cfuncproto(
        so_libforms, "fl_prepare_form_window", \
        Window, [cty.POINTER(FL_FORM), cty.c_int, cty.c_int, STRING], \
        """Window fl_prepare_form_window(FL_FORM * form, int place,
           int border, const char * name)
        """)
def fl_prepare_form_window(pForm, place, border, name):
    """ fl_prepare_form_window(pForm, place, border, name) -> window reference
    """

    retval = _fl_prepare_form_window(pForm, place, border, name)
    return retval


_fl_show_form_window = cfuncproto(
        so_libforms, "fl_show_form_window", \
        Window, [cty.POINTER(FL_FORM)], \
        """Window fl_show_form_window(FL_FORM * form)
        """)
def fl_show_form_window(pForm):
    """ fl_show_form_window(pForm) -> window reference
    """

    retval = _fl_show_form_window(pForm)
    return retval


_fl_adjust_form_size = cfuncproto(
        so_libforms, "fl_adjust_form_size", \
        cty.c_double, [cty.POINTER(FL_FORM)], \
        """double fl_adjust_form_size(FL_FORM * form)
        """)
def fl_adjust_form_size(pForm):
    """ fl_adjust_form_size(pForm) -> ID
    """

    retval = _fl_adjust_form_size(pForm)
    return retval


_fl_form_is_visible = cfuncproto(
        so_libforms, "fl_form_is_visible", \
        cty.c_int, [cty.POINTER(FL_FORM)], \
        """int fl_form_is_visible(FL_FORM * form)
        """)
def fl_form_is_visible(pForm):
    """ fl_form_is_visible(pForm) -> ID
    """

    retval = _fl_form_is_visible(pForm)
    return retval


_fl_form_is_iconified = cfuncproto(
        so_libforms, "fl_form_is_iconified", \
        cty.c_int, [cty.POINTER(FL_FORM)], \
        """int fl_form_is_iconified(FL_FORM * form)
        """)
def fl_form_is_iconified(pForm):
    """ fl_form_is_iconified(pForm) -> ID
    """

    retval = _fl_form_is_iconified(pForm)
    return retval


_fl_register_raw_callback = cfuncproto(
        so_libforms, "fl_register_raw_callback", \
        FL_RAW_CALLBACK, [cty.POINTER(FL_FORM), cty.c_ulong, FL_RAW_CALLBACK], \
        """FL_RAW_CALLBACK fl_register_raw_callback(FL_FORM * form,
           long unsigned int mask, FL_RAW_CALLBACK rcb)
        """)
def fl_register_raw_callback(pForm, mask, py_rcb):
    """ fl_register_raw_callback(pForm, mask, py_rcb) -> callback reference
    """

    c_rcb = FL_RAW_CALLBACK(py_rcb)
    _cfunc_refs[get_rand_dictkey()] = c_rcb
    retval = _fl_register_raw_callback(pForm, mask, c_rcb)
    return retval


fl_register_call_back = fl_register_raw_callback


_fl_bgn_group = cfuncproto(
        so_libforms, "fl_bgn_group", \
        cty.POINTER(FL_OBJECT), [], \
        """FL_OBJECT * fl_bgn_group()
        """)
def fl_bgn_group():
    """ fl_bgn_group() -> pObject
    """

    retval = _fl_bgn_group()
    return retval


_fl_end_group = cfuncproto(
        so_libforms, "fl_end_group", \
        None, [], \
        """void fl_end_group()
        """)
def fl_end_group():
    """ fl_end_group()
    """

    _fl_end_group()


_fl_addto_group = cfuncproto(
        so_libforms, "fl_addto_group", \
        cty.POINTER(FL_OBJECT), [cty.POINTER(FL_OBJECT)], \
        """FL_OBJECT * fl_addto_group(FL_OBJECT * group)
        """)
def fl_addto_group(group):
    """ fl_addto_group(group) -> pForm
    """

    retval = _fl_addto_group(group)
    return retval


# Routines that deal with FL_OBJECTS

_fl_set_object_boxtype = cfuncproto(
        so_libforms, "fl_set_object_boxtype", \
        None, [cty.POINTER(FL_OBJECT), cty.c_int], \
        """void fl_set_object_boxtype(FL_OBJECT * ob, int boxtype)
        """)
def fl_set_object_boxtype(pObject, boxtype):
    """ fl_set_object_boxtype(pObject, boxtype)
    """

    _fl_set_object_boxtype(pObject, boxtype)


_fl_set_object_bw = cfuncproto(
        so_libforms, "fl_set_object_bw", \
        None, [cty.POINTER(FL_OBJECT), cty.c_int], \
        """void fl_set_object_bw(FL_OBJECT * ob, int bw)
        """)
def fl_set_object_bw(pObject, bw):
    """ fl_set_object_bw(pObject, bw)
    """

    _fl_set_object_bw(pObject, bw)


_fl_get_object_bw = cfuncproto(
        so_libforms, "fl_get_object_bw", \
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int)], \
        """void fl_get_object_bw(FL_OBJECT * ob, int * bw)
        """)
def fl_get_object_bw(pObject, bw):
    """ fl_get_object_bw(pObject, bw)
    """

    _fl_get_object_bw(pObject, bw)


_fl_set_object_resize = cfuncproto(
        so_libforms, "fl_set_object_resize", \
        None, [cty.POINTER(FL_OBJECT), cty.c_uint], \
        """void fl_set_object_resize(FL_OBJECT * ob, unsigned int what)
        """)
def fl_set_object_resize(pObject, what):
    """ fl_set_object_resize(pObject, what)
    """

    _fl_set_object_resize(pObject, what)


_fl_get_object_resize = cfuncproto(
        so_libforms, "fl_get_object_resize", \
         None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_uint)], \
        """void fl_get_object_resize(FL_OBJECT * ob, unsigned int * what)
        """)
def fl_get_object_resize(pObject, what):
    """ fl_get_object_resize(pObject, what)
    """

    _fl_get_object_resize(pObject, what)


_fl_set_object_gravity = cfuncproto(
        so_libforms, "fl_set_object_gravity", \
        None, [cty.POINTER(FL_OBJECT), cty.c_uint, cty.c_uint], \
        """void fl_set_object_gravity(FL_OBJECT * ob, unsigned int nw,
           unsigned int se)
        """)
def fl_set_object_gravity(pObject, nw, se):
    """ fl_set_object_gravity(pObject, nw, se)
    """

    _fl_set_object_gravity(pObject, nw, se)


_fl_get_object_gravity = cfuncproto(
        so_libforms, "fl_get_object_gravity", \
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_uint),
        cty.POINTER(cty.c_uint)], \
        """void fl_get_object_gravity(FL_OBJECT * ob, unsigned int * nw,
           unsigned int * se)
        """)
def fl_get_object_gravity(pObject, nw, se):
    """ fl_get_object_gravity(pObject, nw, se)
    """

    _fl_get_object_gravity(pObject, nw, se)


_fl_set_object_lsize = cfuncproto(
        so_libforms, "fl_set_object_lsize", \
        None, [cty.POINTER(FL_OBJECT), cty.c_int], \
        """void fl_set_object_lsize(FL_OBJECT * ob, int lsize)
        """)
def fl_set_object_lsize(pObject, lsize):
    """ fl_set_object_lsize(pObject, lsize)
    """

    _fl_set_object_lsize(pObject, lsize)


_fl_set_object_lstyle = cfuncproto(
        so_libforms, "fl_set_object_lstyle", \
        None, [cty.POINTER(FL_OBJECT), cty.c_int], \
        """void fl_set_object_lstyle(FL_OBJECT * ob, int lstyle)
        """)
def fl_set_object_lstyle(pObject, lstyle):
    """ fl_set_object_lstyle(pObject, lstyle)
    """

    _fl_set_object_lstyle(pObject, lstyle)


_fl_set_object_lcol = cfuncproto(
        so_libforms, "fl_set_object_lcol", \
        None, [cty.POINTER(FL_OBJECT), FL_COLOR], \
        """void fl_set_object_lcol(FL_OBJECT * ob, FL_COLOR lcol)
        """)
def fl_set_object_lcol(pObject, lcol):
    """ fl_set_object_lcol(pObject, lcol)
    """

    _fl_set_object_lcol(pObject, lcol)


_fl_set_object_return = cfuncproto(
        so_libforms, "fl_set_object_return", \
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int], \
        """int fl_set_object_return(FL_OBJECT * ob, int when)   DEPRECATED
        """)
def fl_set_object_return(pObject, when):
    """ fl_set_object_return(pObject, when) -> ID num
    """

    retval = _fl_set_object_return(pObject, when)
    return retval


_fl_notify_object = cfuncproto(
        so_libforms, "fl_notify_object", \
        None, [cty.POINTER(FL_OBJECT), cty.c_int], \
        """void fl_notify_object(FL_OBJECT * obj, int cause)
        """)
def fl_notify_object(pObject, cause):
    """ fl_notify_object(pObject, cause)
    """

    _fl_notify_object(pObject, cause)


_fl_set_object_lalign = cfuncproto(
        so_libforms, "fl_set_object_lalign", \
        None, [cty.POINTER(FL_OBJECT), cty.c_int], \
        """void fl_set_object_lalign(FL_OBJECT * ob, int align)
        """)
def fl_set_object_lalign(pObject, align):
    """ fl_set_object_lalign(pObject, align)
    """

    _fl_set_object_lalign(pObject, align)


_fl_set_object_shortcut = cfuncproto(
        so_libforms, "fl_set_object_shortcut", \
        None, [cty.POINTER(FL_OBJECT), STRING, cty.c_int], \
        """void fl_set_object_shortcut(FL_OBJECT * obj, const char * sstr,
           int showit)
        """)
def fl_set_object_shortcut(pObject, sstr, showit):
    """ fl_set_object_shortcut(pObject, sstr, showit)
    """

    _fl_set_object_shortcut(pObject, sstr, showit)


_fl_set_object_shortcutkey = cfuncproto(
        so_libforms, "fl_set_object_shortcutkey",
        None, [cty.POINTER(FL_OBJECT), cty.c_uint], \
        """void fl_set_object_shortcutkey(FL_OBJECT * obj, unsigned int keysym)
        """)
def fl_set_object_shortcutkey(pObject, keysym):
    """ fl_set_object_shortcutkey(pObject, keysym)
    """

    _fl_set_object_shortcutkey(pObject, keysym)


_fl_set_object_dblbuffer = cfuncproto(
        so_libforms, "fl_set_object_dblbuffer", \
        None, [cty.POINTER(FL_OBJECT), cty.c_int], \
        """void fl_set_object_dblbuffer(FL_OBJECT * ob, int y)
        """)

def fl_set_object_dblbuffer(pObject, y):
    """ fl_set_object_dblbuffer(pObject, y)
    """

    _fl_set_object_dblbuffer(pObject, y)


_fl_set_object_color = cfuncproto(
        so_libforms, "fl_set_object_color", \
        None, [cty.POINTER(FL_OBJECT), FL_COLOR, FL_COLOR], \
        """void fl_set_object_color(FL_OBJECT * ob, FL_COLOR col1,
           FL_COLOR col2)
        """)
def fl_set_object_color(pObject, col1, col2):
    """ fl_set_object_color(pObject, col1, col2)
    """

    _fl_set_object_color(pObject, col1, col2)


_fl_set_object_label = cfuncproto(
        so_libforms, "fl_set_object_label", \
        None, [cty.POINTER(FL_OBJECT), STRING], \
        """void fl_set_object_label(FL_OBJECT * ob, const char * label)
        """)
def fl_set_object_label(pObject, label):
    """ fl_set_object_label(pObject, label)
    """

    _fl_set_object_label(pObject, label)


_fl_set_object_helper = cfuncproto(
        so_libforms, "fl_set_object_helper", \
        None, [cty.POINTER(FL_OBJECT), STRING], \
        """void fl_set_object_helper(FL_OBJECT * ob, const char * tip)
        """)
def fl_set_object_helper(pObject, tip):
    """ fl_set_object_helper(pObject, tip)
    """

    _fl_set_object_helper(pObject, tip)


_fl_set_object_position = cfuncproto(
        so_libforms, "fl_set_object_position", \
        None, [cty.POINTER(FL_OBJECT), FL_Coord, FL_Coord], \
        """void fl_set_object_position(FL_OBJECT * obj, FL_Coord x, FL_Coord y)
        """)
def fl_set_object_position(pObject, x, y):
    """ fl_set_object_position(pObject, x, y)
    """

    _fl_set_object_position(pObject, x, y)


_fl_get_object_size = cfuncproto(
        so_libforms, "fl_get_object_size", \
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_Coord),
        cty.POINTER(FL_Coord)], \
        """void fl_get_object_size(FL_OBJECT * obj, FL_Coord * w, FL_Coord * h)
        """)
def fl_get_object_size(pObject, w, h):
    """ fl_get_object_size(pObject, w, h)
    """

    _fl_get_object_size(pObject, w, h)


_fl_set_object_size = cfuncproto(
        so_libforms, "fl_set_object_size", \
        None, [cty.POINTER(FL_OBJECT), FL_Coord, FL_Coord], \
        """void fl_set_object_size(FL_OBJECT * obj, FL_Coord w, FL_Coord h)
        """)
def fl_set_object_size(pObject, w, h):
    """ fl_set_object_size(pObject, w, h)
    """

    _fl_set_object_size(pObject, w, h)


_fl_set_object_automatic = cfuncproto(
        so_libforms, "fl_set_object_automatic",
        None, [cty.POINTER(FL_OBJECT), cty.c_int], \
        """void fl_set_object_automatic(FL_OBJECT * ob, int flag)
        """)
def fl_set_object_automatic(pObject, flag):
    """ fl_set_object_automatic(pObject, flag)
    """

    _fl_set_object_automatic(pObject, flag)


_fl_draw_object_label = cfuncproto(
        so_libforms, "fl_draw_object_label", \
        None, [cty.POINTER(FL_OBJECT)], \
        """void fl_draw_object_label(FL_OBJECT * ob)
        """)
def fl_draw_object_label(pObject):
    """ fl_draw_object_label(pObject)
    """

    _fl_draw_object_label(pObject)


_fl_draw_object_label_outside = cfuncproto(
        so_libforms, "fl_draw_object_label_outside",
        None, [cty.POINTER(FL_OBJECT)], \
        """void fl_draw_object_label_outside(FL_OBJECT * ob)
        """)
def fl_draw_object_label_outside(pObject):
    """ fl_draw_object_label_outside(pObject)
    """

    _fl_draw_object_label_outside(pObject)


_fl_get_object_component = cfuncproto(
        so_libforms, "fl_get_object_component",
        cty.POINTER(FL_OBJECT), [cty.POINTER(FL_OBJECT), cty.c_int,
        cty.c_int, cty.c_int], \
        """FL_OBJECT * fl_get_object_component(FL_OBJECT * composite,
           int objclass, int type, int numb)
        """)
def fl_get_object_component(pObject_composite, objclass, componenttype, numb):
    """ fl_get_object_component(pObject_composite, objclass, componenttype, numb) -> pObject
    """

    retval = _fl_get_object_component(pObject_composite, objclass, componenttype, numb)
    return retval


# function for following one
cfunc_int_pobject_pvoid = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
                                        cty.c_void_p)

_fl_for_all_objects = cfuncproto(
        so_libforms, "fl_for_all_objects", \
        None, [cty.POINTER(FL_FORM), cty.CFUNCTYPE(cty.c_int,
        cty.POINTER(FL_OBJECT), cty.c_void_p), cty.c_void_p], \
        """void fl_for_all_objects(FL_FORM * form, const char * cb, void * v)
        """)
def fl_for_all_objects(pForm, py_cb, v):
    """ fl_for_all_objects(pForm, py_cb, v)
    """

    c_cb = cfunc_int_pobject_pvoid(py_cb)
    _cfunc_refs[get_rand_dictkey()] = c_cb
    _fl_for_all_objects(pForm, c_cb, v)


fl_draw_object_outside_label = fl_draw_object_label_outside


def fl_set_object_dblclick(pObject, timeout):
    pObject.click_timeout = timeout


_fl_set_object_geometry = cfuncproto(
        so_libforms, "fl_set_object_geometry", \
        None, [cty.POINTER(FL_OBJECT), FL_Coord, FL_Coord, FL_Coord, FL_Coord], \
        """void fl_set_object_geometry(FL_OBJECT * obj, FL_Coord x, FL_Coord y, FL_Coord w, FL_Coord h)
        """)
def fl_set_object_geometry(pObject, x, y, w, h):
    """ fl_set_object_geometry(pObject, x, y, w, h)
    """

    _fl_set_object_geometry(pObject, x, y, w, h)


_fl_move_object = cfuncproto(
        so_libforms, "fl_move_object", \
        None, [cty.POINTER(FL_OBJECT), FL_Coord, FL_Coord], \
        """void fl_move_object(FL_OBJECT * obj, FL_Coord dx, FL_Coord dy)
        """)
def fl_move_object(pObject, dx, dy):
    """ fl_move_object(pObject, dx, dy)
    """

    _fl_move_object(pObject, dx, dy)


fl_set_object_lcolor = fl_set_object_lcol

_fl_fit_object_label = cfuncproto(
        so_libforms, "fl_fit_object_label", \
        None, [cty.POINTER(FL_OBJECT), FL_Coord, FL_Coord], \
        """void fl_fit_object_label(FL_OBJECT * obj, FL_Coord xmargin, FL_Coord ymargin)
        """)
def fl_fit_object_label(pObject, xmargin, ymargin):
    """ fl_fit_object_label(pObject, xmargin, ymargin)
    """

    _fl_fit_object_label(pObject, xmargin, ymargin)


_fl_get_object_geometry = cfuncproto(
        so_libforms, "fl_get_object_geometry", \
    None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_Coord), \
    cty.POINTER(FL_Coord), cty.POINTER(FL_Coord), cty.POINTER(FL_Coord)], \
    """void fl_get_object_geometry(FL_OBJECT * ob, FL_Coord * x,
       FL_Coord * y, FL_Coord * w, FL_Coord * h)
    """)
def fl_get_object_geometry(pObject, x, y, w, h):
    """ fl_get_object_geometry(pObject, x, y, w, h)
    """

    _fl_get_object_geometry(pObject, x, y, w, h)


_fl_get_object_position = cfuncproto(
        so_libforms, "fl_get_object_position", \
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_Coord), cty.POINTER(FL_Coord)], \
        """void fl_get_object_position(FL_OBJECT * ob, FL_Coord * x, FL_Coord * y)
        """)
def fl_get_object_position(pObject, x, y):
    """ fl_get_object_position(pObject, x, y)
    """

    _fl_get_object_position(pObject, x, y)


_fl_get_object_label = cfuncproto(
        so_libforms, "fl_get_object_label", \
        STRING, [cty.POINTER(FL_OBJECT)], \
        """const char * fl_get_object_label(FL_OBJECT * ob)
        """)
def fl_get_object_label(pObject):
    """ fl_get_object_label(pObject) -> labelname_string
    """

    retval = _fl_get_object_label(pObject)
    return retval


# this one takes into account the label

_fl_get_object_bbox = cfuncproto(
        so_libforms, "fl_get_object_bbox", \
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_Coord), \
        cty.POINTER(FL_Coord), cty.POINTER(FL_Coord), cty.POINTER(FL_Coord)], \
        """void fl_get_object_bbox(FL_OBJECT * obj, FL_Coord * x,
           FL_Coord * y, FL_Coord * w, FL_Coord * h)
        """)
def fl_get_object_bbox(pObject, x, y, w, h):
    """ fl_get_object_bbox(pObject, x, y, w, h)
    """

    _fl_get_object_bbox(pObject, x, y, w, h)


fl_compute_object_geometry = fl_get_object_bbox


_fl_call_object_callback = cfuncproto(
        so_libforms, "fl_call_object_callback", \
        None, [cty.POINTER(FL_OBJECT)], \
        """void fl_call_object_callback(FL_OBJECT * ob)
        """)
def fl_call_object_callback(pObject):
    """ fl_call_object_callback(pObject)
    """

    _fl_call_object_callback(pObject)


_fl_set_object_prehandler = cfuncproto(
        so_libforms, "fl_set_object_prehandler",
        FL_HANDLEPTR, [cty.POINTER(FL_OBJECT), FL_HANDLEPTR], \
        """FL_HANDLEPTR fl_set_object_prehandler(FL_OBJECT * ob,
           FL_HANDLEPTR phandler)
        """)
def fl_set_object_prehandler(pObject, py_phandler):
    """ fl_set_object_prehandler(pObject, py_phandler) -> handler_pointer
    """

    c_phandler = FL_HANDLEPTR(py_phandler)
    _cfunc_refs[get_rand_dictkey()] = c_phandler
    retval = _fl_set_object_prehandler(pObject, c_phandler)
    return retval


_fl_set_object_posthandler = cfuncproto(
        so_libforms, "fl_set_object_posthandler",
        FL_HANDLEPTR, [cty.POINTER(FL_OBJECT), FL_HANDLEPTR], \
        """FL_HANDLEPTR fl_set_object_posthandler(FL_OBJECT * ob,
           FL_HANDLEPTR post)
        """)
def fl_set_object_posthandler(pObject, py_post):
    """fl_set_object_posthandler(pObject, py_post) -> handler_pointer
    """

    c_post = FL_HANDLEPTR(py_post)
    _cfunc_refs[get_rand_dictkey()] = c_post
    retval = _fl_set_object_posthandler(pObject, c_post)
    return retval


_fl_set_object_callback = cfuncproto(
        so_libforms, "fl_set_object_callback", \
        FL_CALLBACKPTR, [cty.POINTER(FL_OBJECT), FL_CALLBACKPTR, cty.c_long], \
        """FL_CALLBACKPTR fl_set_object_callback(FL_OBJECT * obj, \
           FL_CALLBACKPTR callback, long int argument)
        """)
def fl_set_object_callback(pObject, py_callback, argument):
    """ fl_set_object_callback(pObject, py_callback, argument) -> c_callback func.
        Calls a callback function bound to an object, if a condition is met.
        <pObject>           an object reference (form, button, etc..)
        <py_callback>    a python function to use as callback
        <argument>      argument being passed to function (NOT ACTIVE)
    """

    c_callback = FL_CALLBACKPTR(py_callback)
    _cfunc_refs[get_rand_dictkey()] = c_callback
    retval = _fl_set_object_callback(pObject, c_callback, argument)
    return retval


fl_set_object_align = fl_set_object_lalign
fl_set_call_back = fl_set_object_callback


_fl_redraw_object = cfuncproto(
        so_libforms, "fl_redraw_object", \
        None, [cty.POINTER(FL_OBJECT)], \
        """void fl_redraw_object(FL_OBJECT * obj)
        """)
def fl_redraw_object(pObject):
    """ fl_redraw_object(pObject)
    """

    _fl_redraw_object(pObject)


_fl_scale_object = cfuncproto(
        so_libforms, "fl_scale_object", \
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double], \
        """void fl_scale_object(FL_OBJECT * ob, double xs, double ys)
        """)
def fl_scale_object(pObject, xs, ys):
    """ fl_scale_object(pObject, xs, ys)
    """

    _fl_scale_object(pObject, xs, ys)


_fl_show_object = cfuncproto(
        so_libforms, "fl_show_object", \
        None, [cty.POINTER(FL_OBJECT)], \
        """void fl_show_object(FL_OBJECT * ob)
        """)
def fl_show_object(pObject):
    """ fl_show_object(pObject)
    """

    _fl_show_object(pObject)


_fl_hide_object = cfuncproto(
        so_libforms, "fl_hide_object", \
        None, [cty.POINTER(FL_OBJECT)], \
        """void fl_hide_object(FL_OBJECT * ob)
        """)
def fl_hide_object(pObject):
    """ fl_hide_object(pObject)
    """

    _fl_hide_object(pObject)


_fl_free_object = cfuncproto(
        so_libforms, "fl_free_object", \
        None, [cty.POINTER(FL_OBJECT)], \
        """void fl_free_object(FL_OBJECT * obj)
        """)
def fl_free_object(pObject):
    """ fl_free_object(pObject)
    """

    _fl_free_object(pObject)


_fl_delete_object = cfuncproto(
        so_libforms, "fl_delete_object", \
        None, [cty.POINTER(FL_OBJECT)], \
        """void fl_delete_object(FL_OBJECT * obj)
        """)
def fl_delete_object(pObject):
    """ fl_delete_object(pObject)
    """

    _fl_delete_object(pObject)


_fl_get_object_return_state = cfuncproto(
        so_libforms, "fl_get_object_return_state",
        cty.c_int, [cty.POINTER(FL_OBJECT)], \
        """int fl_get_object_return_state(FL_OBJECT * obj)
        """)
def fl_get_object_return_state(pObject):
    """ fl_get_object_return_state(pObject) -> ID num
    """

    retval = _fl_get_object_return_state(pObject)
    return retval


_fl_trigger_object = cfuncproto(
        so_libforms, "fl_trigger_object", \
        None, [cty.POINTER(FL_OBJECT)], \
        """void fl_trigger_object(FL_OBJECT * obj)
        """)
def fl_trigger_object(pObject):
    """ fl_trigger_object(pObject)
    """

    _fl_trigger_object(pObject)


_fl_activate_object = cfuncproto(
        so_libforms, "fl_activate_object", \
        None, [cty.POINTER(FL_OBJECT)], \
        """void fl_activate_object(FL_OBJECT * ob)
        """)
def fl_activate_object(pObject):
    """ fl_activate_object(pObject)
    """

    _fl_activate_object(pObject)


_fl_deactivate_object = cfuncproto(
        so_libforms, "fl_deactivate_object", \
        None, [cty.POINTER(FL_OBJECT)], \
        """void fl_deactivate_object(FL_OBJECT * ob)
        """)
def fl_deactivate_object(pObject):
    """ fl_deactivate_object(pObject)
    """

    _fl_deactivate_object(pObject)


# generic cfunction for this one
cfunc_none_string = cty.CFUNCTYPE(None, STRING)

_fl_enumerate_fonts = cfuncproto(
        so_libforms, "fl_enumerate_fonts", \
        cty.c_int, [cty.CFUNCTYPE(None, STRING), cty.c_int], \
        """int fl_enumerate_fonts(const char * output, int shortform)
        """)
def fl_enumerate_fonts(py_output, shortform):
    """ fl_enumerate_fonts(py_output, shortform) -> ID num
    """

    c_output = cfunc_none_string(py_output)
    _cfunc_refs[get_rand_dictkey()] = c_output
    retval = _fl_enumerate_fonts(c_output, shortform)
    return retval


_fl_set_font_name = cfuncproto(
        so_libforms, "fl_set_font_name", \
        cty.c_int, [cty.c_int, STRING], \
        """int fl_set_font_name(int n, const char * name)
        """)
def fl_set_font_name(n, name):
    """ fl_set_font_name(n, name) -> ID num
    """

    retval = _fl_set_font_name(n, name)


_fl_set_font = cfuncproto(
        so_libforms, "fl_set_font", \
        None, [cty.c_int, cty.c_int], \
        """void fl_set_font(int numb, int size)
        """)
def fl_set_font(numb, size):
    """ fl_set_font(numb, size)
    """

    _fl_set_font(numb, size)


# routines that facilitate free object

_fl_get_char_height = cfuncproto(
        so_libforms, "fl_get_char_height", \
        cty.c_int, [cty.c_int, cty.c_int, cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)], \
        """int fl_get_char_height(int style, int size, int * asc, int * desc)
        """)
def fl_get_char_height(style, size, asc, desc):
    """ fl_get_char_height(style, size, asc, desc) -> height num.
    """

    retval = _fl_get_char_height(style, size, asc, desc)
    return retval


_fl_get_char_width = cfuncproto(
        so_libforms, "fl_get_char_width", \
        cty.c_int, [cty.c_int, cty.c_int], \
        """int fl_get_char_width(int style, int size)
        """)
def fl_get_char_width(style, size):
    """ fl_get_char_width(style, size) -> width num.
    """

    retval = _fl_get_char_width(style, size)
    return retval


_fl_get_string_height = cfuncproto(
        so_libforms, "fl_get_string_height", \
        cty.c_int, [cty.c_int, cty.c_int, STRING, cty.c_int,
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)], \
        """int fl_get_string_height(int style, int size, const char * s,
           int len, int * asc, int * desc)
        """)
def fl_get_string_height(style, size, s, len, asc, desc):
    """ fl_get_string_height(style, size, s, len, asc, desc) -> height num.
    """

    retval = _fl_get_string_height(style, size, s, len, asc, desc)
    return retval


_fl_get_string_width = cfuncproto(
        so_libforms, "fl_get_string_width", \
        cty.c_int, [cty.c_int, cty.c_int, STRING, cty.c_int], \
        """int fl_get_string_width(int style, int size, const char * s,
           int len)
        """)
def fl_get_string_width(style, size, s, len):
    """ fl_get_string_width(style, size, s, len) -> width num.
    """

    retval = _fl_get_string_width(style, size, s, len)
    return retval


_fl_get_string_widthTAB = cfuncproto(
        so_libforms, "fl_get_string_widthTAB", \
        cty.c_int, [cty.c_int, cty.c_int, STRING, cty.c_int], \
        """int fl_get_string_widthTAB(int style, int size, const char * s,
           int len)
        """)
def fl_get_string_widthTAB(style, size, s, len):
    """ fl_get_string_widthTAB(style, size, s, len) -> width num.
    """

    retval = _fl_get_string_widthTAB(style, size, s, len)
    return retval


_fl_get_string_dimension = cfuncproto(
        so_libforms, "fl_get_string_dimension", \
        None, [cty.c_int, cty.c_int, STRING, cty.c_int,
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)], \
        """void fl_get_string_dimension(int fntstyle, int fntsize,
           const char * s, int len, int * width, int * height)
        """)
def fl_get_string_dimension(fntstyle, fntsize, s, len, width, height):
    """ fl_get_string_dimension(fntstyle, fntsize, s, len, width, height) -> dimension num.
    """

    retval = _fl_get_string_dimension(fntstyle, fntsize, s, len, width, height)
    return retval


fl_get_string_size = fl_get_string_dimension


_fl_get_align_xy = cfuncproto(
        so_libforms, "fl_get_align_xy", \
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int, \
        cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.POINTER(cty.c_int), \
        cty.POINTER(cty.c_int)], \
        """void fl_get_align_xy(int align, int x, int y, int w, int h,
        int xsize, int ysize, int xoff, int yoff, int * xx, int * yy)
        """)
def fl_get_align_xy(align, x, y, w, h, xsize, ysize, xoff, yoff, xx, yy):
    """ fl_get_align_xy(align, x, y, w, h, xsize, ysize, xoff, yoff, xx, yy)
    """

    _fl_get_align_xy(align, x, y, w, h, xsize, ysize, xoff, yoff, xx, yy)


_fl_drw_text = cfuncproto(
        so_libforms, "fl_drw_text", \
        None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR,
        cty.c_int, cty.c_int, STRING], \
        """void fl_drw_text(int align, FL_Coord x, FL_Coord y, FL_Coord w,
           FL_Coord h, FL_COLOR c, int style, int size, const char * istr)
        """)
def fl_drw_text(align, x, y, w, h, c, style, size, textstring):
    """ fl_drw_text(align, x, y, w, h, c, style, size, textstring)
    """

    _fl_drw_text(align, x, y, w, h, c, style, size, textstring)


_fl_drw_text_beside = cfuncproto(
        so_libforms, "fl_drw_text_beside", \
        None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR,
        cty.c_int, cty.c_int, STRING], \
        """void fl_drw_text_beside(int align, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, FL_COLOR c, int style, int size,
           const char * str)
        """)
def fl_drw_text_beside(align, x, y, w, h, c, style, size, textstring):
    """ fl_drw_text_beside(align, x, y, w, h, c, style, size, textstring)
    """

    _fl_drw_text_beside(align, x, y, w, h, c, style, size, textstring)


_fl_drw_text_cursor = cfuncproto(
        so_libforms, "fl_drw_text_cursor", \
        None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord, \
        FL_COLOR, cty.c_int, cty.c_int, STRING, cty.c_int, cty.c_int], \
        """void fl_drw_text_cursor(int align, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, FL_COLOR c, int style, int size,
           const char * str, int cc, int pos)
        """)
def fl_drw_text_cursor(align, x, y, w, h, c, style, size, textstring, cc, pos):
    """ fl_drw_text_cursor(align, x, y, w, h, c, style, size, textstring, cc, pos)
    """

    _fl_drw_text_cursor(align, x, y, w, h, c, style, size, textstring, cc, pos)


_fl_drw_box = cfuncproto(
        so_libforms, "fl_drw_box", \
        None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR,
        cty.c_int], \
        """void fl_drw_box(int style, FL_Coord x, FL_Coord y, FL_Coord w,
           FL_Coord h, FL_COLOR c, int bw_in)
        """)
def fl_drw_box(style, x, y, w, h, c, bw_in):
    """ fl_drw_box(style, x, y, w, h, c, bw_in)
    """

    _fl_drw_box(style, x, y, w, h, c, bw_in)


FL_DRAWPTR = cty.CFUNCTYPE(None, FL_Coord, FL_Coord, FL_Coord, FL_Coord,
            cty.c_int, FL_COLOR)


_fl_add_symbol = cfuncproto(
        so_libforms, "fl_add_symbol", \
        cty.c_int,  [STRING, FL_DRAWPTR, cty.c_int], \
        """int fl_add_symbol(const char * name, FL_DRAWPTR drawit, int scalable)
        """)
def fl_add_symbol(name, py_drawit, scalable):
    """ fl_add_symbol(name, py_drawit, scalable) -> num.
    """

    c_drawit = FL_DRAWPTR(py_drawit)
    _cfunc_refs[get_rand_dictkey()] = c_drawit
    retval = _fl_add_symbol(name, c_drawit, scalable)
    return retval


_fl_draw_symbol = cfuncproto(
        so_libforms, "fl_draw_symbol", \
        cty.c_int, [STRING, FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR], \
        """int fl_draw_symbol(const char * label, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, FL_COLOR col)
        """)
def fl_draw_symbol(label, x, y, w, h, col):
    """ fl_draw_symbol(label, x, y, w, h, col) -> num.
    """

    retval = _fl_draw_symbol(label, x, y, w, h, col)
    return retval


_fl_mapcolor = cfuncproto(
        so_libforms, "fl_mapcolor", \
        cty.c_ulong, [FL_COLOR, cty.c_int, cty.c_int, cty.c_int], \
        """long unsigned int fl_mapcolor(FL_COLOR col, int r, int g, int b)
        """)
def fl_mapcolor(col, r, g, b):
    """ fl_mapcolor(col, r, g, b) -> num.
    """

    retval = _fl_mapcolor(col, r, g, b)
    return retval


_fl_mapcolorname = cfuncproto(
        so_libforms, "fl_mapcolorname", \
        cty.c_long, [FL_COLOR, STRING], \
        """long int fl_mapcolorname(FL_COLOR col, const char * name)
        """)
def fl_mapcolorname(col, name):
    """ fl_mapcolorname(col, name) -> num.
    """

    retval = _fl_mapcolorname(col, name)
    return retval


fl_mapcolor_name = fl_mapcolorname


_fl_free_colors = cfuncproto(
        so_libforms, "fl_free_colors", \
        None, [cty.POINTER(FL_COLOR), cty.c_int], \
        """void fl_free_colors(FL_COLOR * c, int n)
        """)
def fl_free_colors(c, n):
    """ fl_free_colors(c, n)
    """

    _fl_free_colors(c, n)


_fl_free_pixels = cfuncproto(
        so_libforms, "fl_free_pixels", \
        None, [cty.POINTER(cty.c_ulong), cty.c_int], \
        """void fl_free_pixels(long unsigned int * pix, int n)
        """)
def fl_free_pixels(pix, n):
    """ fl_free_pixels(pix, n)
    """

    _fl_free_pixels(pix, n)


_fl_set_color_leak = cfuncproto(
        so_libforms, "fl_set_color_leak", \
        None, [cty.c_int], \
        """void fl_set_color_leak(int y)
        """)
def fl_set_color_leak(y):
    """ fl_set_color_leak(y)
    """

    _fl_set_color_leak(y)


_fl_getmcolor = cfuncproto(
        so_libforms, "fl_getmcolor", \
        cty.c_ulong, [FL_COLOR, cty.POINTER(cty.c_int), \
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)], \
        """)long unsigned int fl_getmcolor(FL_COLOR i, int * r, int * g, int * b)
        """)
def fl_getmcolor(i, r, g, b):
    """ fl_getmcolor(i, r, g, b) -> num
    """

    retval = _fl_getmcolor(i, r, g, b)
    return retval


_fl_get_pixel = cfuncproto(
        so_libforms, "fl_get_pixel", \
        cty.c_ulong, [FL_COLOR], \
        """)long unsigned int fl_get_pixel(FL_COLOR col)
        """)
def fl_get_pixel(col):
    """ fl_get_pixel(col) -> pixel num.
    """

    retval = _fl_get_pixel(col)
    return retval


_fl_get_icm_color = cfuncproto(
        so_libforms, "fl_get_icm_color", \
        None, [FL_COLOR, cty.POINTER(cty.c_int), cty.POINTER(cty.c_int), \
        cty.POINTER(cty.c_int)], \
        """void fl_get_icm_color(FL_COLOR col, int * r, int * g, int * b)
        """)
def fl_get_icm_color(col, r, g, b):
    """ fl_get_icm_color(col, r, g, b)
    """

    _fl_get_icm_color(col, r, g, b)


_fl_set_icm_color = cfuncproto(
        so_libforms, "fl_set_icm_color", \
        None, [FL_COLOR, cty.c_int, cty.c_int, cty.c_int], \
        """void fl_set_icm_color(FL_COLOR col, int r, int g, int b)
        """)
def fl_set_icm_color(col, r, g, b):
    """ fl_set_icm_color(col, r, g, b)
    """

    _fl_set_icm_color(col, r, g, b)


_fl_color = cfuncproto(
        so_libforms, "fl_color", \
        None, [FL_COLOR], \
        """void fl_color(FL_COLOR col)
        """)
def fl_color(col):
    """ fl_color(col)
    """

    _fl_color(col)


_fl_bk_color = cfuncproto(
        so_libforms, "fl_bk_color", \
        None, [FL_COLOR], \
        """void fl_bk_color(FL_COLOR col)
        """)
def fl_bk_color(col):
    """ fl_bk_color(col)
    """

    _fl_bk_color(col)


_fl_textcolor = cfuncproto(
        so_libforms, "fl_textcolor", \
        None, [FL_COLOR], \
        """void fl_textcolor(FL_COLOR col)
        """)
def fl_textcolor(col):
    """ fl_textcolor(col)
    """

    _fl_textcolor(col)


_fl_bk_textcolor = cfuncproto(
        so_libforms, "fl_bk_textcolor", \
        None, [FL_COLOR], \
        """void fl_bk_textcolor(FL_COLOR col)
        """)
def fl_bk_textcolor(col):
    """ fl_bk_textcolor(col)
    """

    _fl_bk_textcolor(col)


_fl_set_gamma = cfuncproto(
        so_libforms, "fl_set_gamma", \
        None, [cty.c_double, cty.c_double, cty.c_double], \
        """void fl_set_gamma(double r, double g, double b)
        """)
def fl_set_gamma(r, g, b):
    """ fl_set_gamma(r, g, b)
    """

    _fl_set_gamma(r, g, b)


_fl_show_errors = cfuncproto(
        so_libforms, "fl_show_errors", \
        None, [cty.c_int], \
        """void fl_show_errors(int y)
        """)
def fl_show_errors(y):
    """ fl_show_errors(y)
    """

    _fl_show_errors(y)


# Some macros

def FL_max(a, b):
    if (a > b):
        return a
    else:
        return b

def FL_min(a, b):
    if (a < b):
        return a
    else:
        return b

def FL_abs(a):
    if (a > 0):
        return a
    else:
        return (-a)

def FL_nint(a):
    if int(a) > 0:
        return (a + 0.5)
    else:
        return (a - 0.5)

def FL_clamp(a, amin, amax):
    if (a < amin):
        return amin
    elif (a > amax):
        return amax
    else:
        return a

def FL_crnd(a):
    if FL_Coord(a) > 0:
        return (a + 0.5)
    else:
        return (a - 0.5)


FL_FSCB = cty.CFUNCTYPE(cty.c_int, STRING, cty.c_void_p)


# utilities for new objects

fl_current_form = (cty.POINTER(FL_FORM)).in_dll(so_libforms, 'fl_current_form')

_fl_add_object = cfuncproto(
        so_libforms, "fl_add_object", \
        None, [cty.POINTER(FL_FORM), cty.POINTER(FL_OBJECT)], \
        """void fl_add_object(FL_FORM * form, FL_OBJECT * obj)
        """)
def fl_add_object(pForm, pObject):
    """ fl_add_object(pForm, pObject)
    """

    _fl_add_object(pForm, pObject)


_fl_addto_form = cfuncproto(
        so_libforms, "fl_addto_form",
        cty.POINTER(FL_FORM), [cty.POINTER(FL_FORM)], \
        """FL_FORM * fl_addto_form(FL_FORM * form)
        """)
def fl_addto_form(pForm):
    """ fl_addto_form(pForm) -> pForm
    """

    retval = _fl_addto_form(pForm)
    return retval


_fl_make_object = cfuncproto(
        so_libforms, "fl_make_object", \
        cty.POINTER(FL_OBJECT), [cty.c_int, cty.c_int, FL_Coord, \
        FL_Coord, FL_Coord, FL_Coord, STRING, FL_HANDLEPTR], \
        """FL_OBJECT * fl_make_object(int objclass, int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label, FL_HANDLEPTR handle)
        """)
def fl_make_object(objclass, objecttype, x, y, w, h, label, py_handle):
    """ fl_make_object(objclass, objecttype, x, y, w, h, label, py_handle) -> pObject
    """

    c_handle = FL_HANDLEPTR(py_handle)
    _cfunc_refs[get_rand_dictkey()] = c_handle
    retval = _fl_make_object(objclass, objecttype, x, y, w, h, label, c_handle)
    return retval


_fl_add_child = cfuncproto(
        so_libforms, "fl_add_child", \
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_OBJECT)], \
        """void fl_add_child(FL_OBJECT * p1, FL_OBJECT * p2)
        """)
def fl_add_child(p1, p2):
    """ fl_add_child(p1, p2)
    """

    _fl_add_child(p1, p2)


_fl_set_coordunit = cfuncproto(
        so_libforms, "fl_set_coordunit", \
        None, [cty.c_int], \
        """void fl_set_coordunit(int u)
        """)
def fl_set_coordunit(u):
    """ fl_set_coordunit(u)
    """

    _fl_set_coordunit(u)


_fl_set_border_width = cfuncproto(
        so_libforms, "fl_set_border_width", \
        None, [cty.c_int], \
        """void fl_set_border_width(int bw)
        """)
def fl_set_border_width(bw):
    """ fl_set_border_width(bw)
    """

    _fl_set_border_width(bw)


_fl_set_scrollbar_type = cfuncproto(
        so_libforms, "fl_set_scrollbar_type", \
        None, [cty.c_int], \
        """void fl_set_scrollbar_type(int t)
        """)
def fl_set_scrollbar_type(t):
    """ fl_set_scrollbar_type(t)
    """

    _fl_set_scrollbar_type(t)


def fl_set_thinscrollbar(t):
    if t:
        t_type = FL_THIN_SCROLLBAR
    else:
        t_type = FL_NORMAL_SCROLLBAR
    _fl_set_scrollbar_type(t_type)


_fl_flip_yorigin = cfuncproto(
        so_libforms, "fl_flip_yorigin", \
        None, [], \
        """void fl_flip_yorigin()
        """)
def fl_flip_yorigin():
    """ fl_flip_yorigin()
    """

    _fl_flip_yorigin()


_fl_get_coordunit = cfuncproto(
        so_libforms, "fl_get_coordunit", \
        cty.c_int, [], \
        """int fl_get_coordunit()
        """)
def fl_get_coordunit():
    """ fl_get_coordunit() -> coord_unit num.
    """

    retval = _fl_get_coordunit()
    return retval


_fl_get_border_width = cfuncproto(
        so_libforms, "fl_get_border_width", \
        cty.c_int, [], \
        """int fl_get_border_width()
        """)
def fl_get_border_width():
    """ fl_get_border_width() -> width num.
    """

    retval = _fl_get_border_width()
    return retval


# miscty. routines

_fl_ringbell = cfuncproto(
        so_libforms, "fl_ringbell", \
        None, [cty.c_int], \
        """void fl_ringbell(int percent)
        """)
def fl_ringbell(percent):
    """ fl_ringbell(percent)
    """

    _fl_ringbell(percent)


_fl_gettime = cfuncproto(
        so_libforms, "fl_gettime", \
        None, [cty.POINTER(cty.c_long), cty.POINTER(cty.c_long)], \
        """void fl_gettime(long int * sec, long int * usec)
        """)
def fl_gettime(sec, usec):
    """ fl_gettime(sec, usec)
    """

    _fl_gettime(sec, usec)


_fl_now = cfuncproto(
        so_libforms, "fl_now", \
        STRING, [], \
        """const char * fl_now()
        """)
def fl_now():
    """ fl_now() -> string
    """

    retval = _fl_now()
    return retval


_fl_whoami = cfuncproto(
        so_libforms, "fl_whoami", \
        STRING, [], \
        """const char * fl_whoami()
        """)
def fl_whoami():
    """ fl_whoami() -> string
    """

    retval = _fl_whoami()
    return retval


_fl_mouse_button = cfuncproto(
        so_libforms, "fl_mouse_button", \
        cty.c_long, [], \
        """)long int fl_mouse_button()
        """)
def fl_mouse_button():
    """ fl_mouse_button() -> num.
    """

    retval = _fl_mouse_button()
    return retval


_fl_strdup = cfuncproto(
        so_libforms, "fl_strdup", \
        STRING, [STRING], \
        """)char * fl_strdup(const char * s)
        """)
def fl_strdup(s):
    """ fl_strdup(s) -> string
    """

    retval = _fl_strdup(s)
    return retval


class _IO_FILE(cty.Structure):
    pass
FILE = _IO_FILE


_fl_set_err_logfp = cfuncproto(
        so_libforms, "fl_set_err_logfp", \
        None, [cty.POINTER(FILE)], \
        """void fl_set_err_logfp(FILE * fp)
        """)
def fl_set_err_logfp(fp):
    """ fl_set_err_logfp(fp)
    """

    _fl_set_err_logfp(fp)


_fl_set_error_handler = cfuncproto(
        so_libforms, "fl_set_error_handler", \
        None, [FL_ERROR_FUNC], \
        """void fl_set_error_handler(FL_ERROR_FUNC user_func)
        """)
def fl_set_error_handler(py_user_func):
    """ fl_set_error_handler(py_user_func)
    """

    c_user_func = FL_ERROR_FUNC(py_user_func)
    _cfunc_refs[get_rand_dictkey()] = c_user_func
    retval = _fl_set_error_handler(c_user_func)
    return retval


_fl_get_cmdline_args = cfuncproto(
        so_libforms, "fl_get_cmdline_args", \
        cty.POINTER(STRING), [cty.POINTER(cty.c_int)], \
        """)char * * fl_get_cmdline_args(int * p1)
        """)
def fl_get_cmdline_args(p1):
    """ fl_get_cmdline_args(p1) -> string
    """

    retval = _fl_get_cmdline_args(p1)
    return retval

# This function was called 'fl_set_error_logfp/' in XForms 0.89.
fl_set_error_logfp = fl_set_err_logfp


fl_mousebutton = fl_mouse_button


# these give more flexibility for future changes. Also application
# can re-assign these pointers to whatever function it wants, e.g.,
# to a shared memory pool allocator.

#fl_free = (cty.CFUNCTYPE(None, cty.c_void_p)).in_dll(so_libforms, 'fl_free')
_fl_free = cfuncproto(
        so_libforms, "fl_free", \
        None, [cty.c_void_p],
        """void ( * fl_free )( void * )
        """)
def fl_free(p1):
    """ fl_free(p1)
    """

    _fl_free(p1)


size_t = cty.c_uint
#fl_malloc = (cty.CFUNCTYPE(cty.c_void_p, size_t)).in_dll(so_libforms, 'fl_malloc')
_fl_malloc = cfuncproto(
        so_libforms, "fl_malloc", \
        cty.c_void_p, [size_t],
        """void * ( * fl_malloc )( size_t )
        """)
def fl_malloc():
    """ fl_malloc() -> pointer
    """

    retval = _fl_malloc()
    return retval


#fl_calloc = (cty.CFUNCTYPE(cty.c_void_p, size_t, size_t)).in_dll(so_libforms, 'fl_calloc')
_fl_calloc = cfuncproto(
        so_libforms, "fl_malloc", \
        cty.c_void_p, [size_t, size_t],
        """void * ( * fl_calloc )( size_t)
        """)
def fl_calloc():
    """ fl_calloc() -> pointer
    """

    retval = _fl_calloc()
    return retval


#fl_realloc = (cty.CFUNCTYPE(cty.c_void_p, cty.c_void_p, size_t)).in_dll(so_libforms, 'fl_realloc')
_fl_realloc = cfuncproto(
        so_libforms, "fl_realloc", \
        cty.c_void_p, [cty.c_void_p, size_t],
        """void * ( * fl_realloc )( void *
        """)
def fl_realloc():
    """ fl_realloc() -> pointer
    """

    retval = _fl_realloc()
    return retval


_fl_msleep = cfuncproto(
        so_libforms, "fl_msleep", \
        cty.c_int, [cty.c_ulong], \
        """int fl_msleep(long unsigned int msec)
        """)
def fl_msleep(msec):
    """ fl_msleep(msec) -> num.
    """

    retval = _fl_msleep(msec)
    return retval


FL_MAX_MENU_CHOICE_ITEMS = 128

FL_VAL_FILTER = cty.CFUNCTYPE(STRING, cty.POINTER(FL_OBJECT), cty.c_double, cty.c_int)

# Draw mode
# values for unnamed enumeration
FL_XOR = 6              # GXxor
FL_COPY = 3             # GXcopy
FL_AND = 1              # GXand

FL_MINDEPTH = 1

# FL_xxx does not do anything anymore, but kept for compatibility
# values for unnamed enumeration
FL_IllegalVisual = -1
FL_StaticGray = 0           # StaticGray
FL_GrayScale = 1            # GrayScale
FL_StaticColor = 2          # StaticColor
FL_PseudoColor = 3          # PseudoColor
FL_TrueColor = 4            # TrueColor
FL_DirectColor = 5          # DirectColor
FL_DefaultVisual = 10       # special request

# my add
TrueColor = FL_TrueColor
DirectColor = FL_DirectColor

# values for unnamed enumeration
FL_North = 2                            #NorthGravity
FL_NorthEast = 3                        #NorthEastGravity
FL_NorthWest = 1                        #NorthWestGravity
FL_South = 8                            #SouthGravity
FL_SouthEast = 9                        #SouthEastGravity
FL_SouthWest = 7                        #SouthWestGravity
FL_East = 6                             #EastGravity
FL_West = 4                             #WestGravity
FL_NoGravity = 0                        #ForgetGravity
FL_ForgetGravity = FL_NoGravity         #ForgetGravity

GreyScale = GrayScale = 1           #GrayScale
StaticGrey = StaticGray = 0         #StaticGray

def FL_is_gray(v):
    if (v == GrayScale) or (v == StaticGray):
        return True
    else:
        return False

def FL_is_rgb(v):
    if (v == TrueColor) or (v == DirectColor):
        return True
    else:
        return False

# Internal colormap size. Not really very meaningful as fl_mapcolor
# and company allow color "leakage", that is, although only FL_MAX_COLS
# are kept in the internal colormap, the server might have substantially
# more colors allocated
FL_MAX_COLORS = 1024
FL_MAX_COLS = FL_MAX_COLORS

# FL graphics state information. Some are redundant.

Font = XID    # cty.c_ulong
Atom = cty.c_ulong

# /usr/include/X11/Xlib.h 1044
class XFontProp(cty.Structure):
    pass
XFontProp._fields_ = [
    ('name', Atom),
    ('card32', cty.c_ulong),
]

class XCharStruct(cty.Structure):
    pass
XCharStruct._fields_ = [
    # /usr/include/X11/Xlib.h 1035
    ('lbearing', cty.c_short),
    ('rbearing', cty.c_short),
    ('width', cty.c_short),
    ('ascent', cty.c_short),
    ('descent', cty.c_short),
    ('attributes',  cty.c_ushort),
]

# /usr/include/X11/Xlib.h 1050
class XFontStruct(cty.Structure):
    pass
XFontStruct._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('fid', Font),
    ('direction', cty.c_uint),
    ('min_char_or_byte2', cty.c_uint),
    ('max_char_or_byte2', cty.c_uint),
    ('min_byte1', cty.c_uint),
    ('max_byte1', cty.c_uint),
    ('all_chars_exist', cty.c_int),
    ('default_char', cty.c_uint),
    ('n_properties', cty.c_int),
    ('properties', cty.POINTER(XFontProp)),
    ('min_bounds', XCharStruct),
    ('max_bounds', XCharStruct),
    ('per_char', cty.POINTER(XCharStruct)),
    ('ascent', cty.c_int),
    ('descent', cty.c_int),
]

Colormap = XID    # cty.c_ulong

# /usr/include/X11/Xlib.h 225
class _XGC(cty.Structure):
    pass
GC = cty.POINTER(_XGC)

class FL_State(cty.Structure):
    pass
FL_State._fields_ = [
    ('xvinfo', cty.POINTER(XVisualInfo)),
    ('cur_fnt', cty.POINTER(XFontStruct)),
    ('colormap', Colormap),
    ('trailblazer', Window),
    ('vclass', cty.c_int),
    ('depth', cty.c_int),
    ('rgb_bits', cty.c_int),
    ('dithered', cty.c_int),
    ('pcm', cty.c_int),
    ('gc', GC * 16),
    ('textgc', GC * 16),
    ('dimmedGC', GC),
    ('lut', cty.c_ulong * 1024),
    ('rshift', cty.c_uint),
    ('rmask', cty.c_uint),
    ('rbits', cty.c_uint),
    ('gshift', cty.c_uint),
    ('gmask', cty.c_uint),
    ('gbits', cty.c_uint),
    ('bshift', cty.c_uint),
    ('bmask', cty.c_uint),
    ('bbits', cty.c_uint),
]

FL_STATE = FL_State     # for compatibility

# Global variables
# /usr/include/X11/Xlib.h 266
class _XDisplay(cty.Structure):
    pass
_XDisplay._fields_ = []

Display = _XDisplay
#Display = _XDisplay.in_dll(so_libforms, "_XDisplay") # NOTWORKING

fl_state = (cty.POINTER(FL_State)).in_dll(so_libforms, 'fl_state')
fl_display = (cty.POINTER(Display)).in_dll(so_libforms, 'fl_display')
#fl_screen = (cty.c_int).in_dll(so_libforms, 'fl_screen')
fl_screen = cty.c_int
#fl_root = (Window).in_dll(so_libforms, 'fl_root')       # root window
fl_root = Window    # cty.c_ulong
#fl_vroot = (Window).in_dll(so_libforms, 'fl_vroot')     # virtual root window
fl_vroot = Window    # cty.c_ulong
#fl_scrh = (cty.c_int).in_dll(so_libforms, 'fl_scrh')      # screen dimension in pixels
fl_scrh = cty.c_int
#fl_scrw = (cty.c_int).in_dll(so_libforms, 'fl_scrw')
fl_scrw = cty.c_int
#fl_vmode = (cty.c_int).in_dll(so_libforms, 'fl_vmode')
fl_vmode = cty.c_int


# Current version only runs in single visual mode
def fl_get_vclass():
    return fl_vmode

def fl_get_form_vclass(a):
    return fl_vmode

def fl_get_gc():
    return fl_state[fl_vmode].gc[0],


_fl_mode_capable = cfuncproto(
        so_libforms, "fl_mode_capable", \
        cty.c_int, [cty.c_int, cty.c_int], \
        """int fl_mode_capable(int mode, int warn)
        """)
def fl_mode_capable(mode, warn):
    """ fl_mode_capable(mode, warn) -> mode num.
    """

    retval = _fl_mode_capable(mode, warn)
    return retval


def fl_default_win():
    return fl_state[fl_vmode].trailblazer

def fl_default_window():
    return fl_state[fl_vmode].trailblazer


# Fonts related

FL_MAX_FONTSIZES = 10

class FL_FONT(cty.Structure):
    pass
FL_FONT._fields_ = [
    ('fs', cty.POINTER(XFontStruct) * FL_MAX_FONTSIZES),
    ('size', cty.c_short * FL_MAX_FONTSIZES),
    ('nsize', cty.c_short),
    ('fname', cty.c_char * 80),
]

# Some basic drawing routines

# /usr/include/X11/Xlib.h 439
class XPoint(cty.Structure):
    pass
FL_POINT = XPoint

# /usr/include/X11/Xlib.h 444
class XRectangle(cty.Structure):
    pass
FL_RECT = XRectangle


# Rectangles

_fl_rectangle = cfuncproto(
        so_libforms, "fl_rectangle", \
        None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR], \
        """void fl_rectangle(int fill, FL_Coord x, FL_Coord y, FL_Coord w,
           FL_Coord h, FL_COLOR col)
        """)
def fl_rectangle(fill, x, y, w, h, col):
    """ fl_rectangle(fill, x, y, w, h, col)
    """

    _fl_rectangle(fill, x, y, w, h, col)


_fl_rectbound = cfuncproto(
        so_libforms, "fl_rectbound", \
        None, [FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR], \
        """void fl_rectbound(FL_Coord x, FL_Coord y, FL_Coord w, FL_Coord h, \
           FL_COLOR col)
        """)
def fl_rectbound(x, y, w, h, col):
    """ fl_rectbound(x, y, w, h, col)
    """

    _fl_rectbound(x, y, w, h, col)


def fl_rectf(x, y, w, h, c):
    _fl_rectangle(1, x, y, w, h, c)

def fl_rect(x, y, w, h, c):
    _fl_rectangle(0, x, y, w, h, c)


# Rectangle with rounded-corners

_fl_roundrectangle = cfuncproto(
        so_libforms, "fl_roundrectangle", \
        None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR], \
        """void fl_roundrectangle(int fill, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, FL_COLOR col)
        """)
def fl_roundrectangle(fill, x, y, w, h, col):
    """ fl_roundrectangle(fill, x, y, w, h, col)
    """

    _fl_roundrectangle(fill, x, y, w, h, col)


def fl_roundrectf(x, y, w, h, c):
    _fl_roundrectangle(1, x, y, w, h, c)

def fl_roundrect(x, y, w, h, c):
    _fl_roundrectangle(0, x, y, w, h, c)


# General polygon and polylines

_fl_polygon = cfuncproto(
        so_libforms, "fl_polygon", \
        None, [cty.c_int, cty.POINTER(FL_POINT), cty.c_int, FL_COLOR], \
        """void fl_polygon(int fill, FL_POINT * xp, int n, FL_COLOR col)
        """)
def fl_polygon(fill, xp, n, col):
    """ fl_polygon(fill, xp, n, col)
    """

    _fl_polygon(fill, xp, n, col)


def fl_polyf(p, n, c):
    _fl_polygon(1, p, n, c)

def fl_polyl(p, n, c):
    _fl_polygon(0, p, n, c)

def fl_polybound(p, n, c):
    _fl_polygon(1, p, n, c)
    _fl_polygon(0, p, n, FL_BLACK)


_fl_lines = cfuncproto(
        so_libforms, "fl_lines", \
        None, [cty.POINTER(FL_POINT), cty.c_int, FL_COLOR], \
        """void fl_lines(FL_POINT * xp, int n, FL_COLOR col)
        """)
def fl_lines(xp, n, col):
    """ fl_lines(xp, n, col)
    """

    _fl_lines(xp, n, col)


_fl_line = cfuncproto(
        so_libforms, "fl_line", \
        None, [FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR], \
        """void fl_line(FL_Coord xi, FL_Coord yi, FL_Coord xf, FL_Coord yf, \
           FL_COLOR c)
        """)
def fl_line(xi, yi, xf, yf, c):
    """ fl_line(xi, yi, xf, yf, c)
    """

    _fl_line(xi, yi, xf, yf, c)


_fl_point = cfuncproto(
        so_libforms, "fl_point", \
        None, [FL_Coord, FL_Coord, FL_COLOR], \
        """void fl_point(FL_Coord x, FL_Coord y, FL_COLOR c)
        """)
def fl_point(x, y, c):
    """ fl_point(x, y, c)
    """

    _fl_point(x, y, c)


_fl_points = cfuncproto(
        so_libforms, "fl_points", \
        None, [cty.POINTER(FL_POINT), cty.c_int, FL_COLOR], \
        """void fl_points(FL_POINT * p, int np, FL_COLOR c)
        """)
def fl_points(p, np, c):
    """ fl_points(p, np, c)
    """

    _fl_points(p, np, c)


fl_simple_line = fl_line


_fl_dashedlinestyle = cfuncproto(
        so_libforms, "fl_dashedlinestyle", \
        None, [STRING, cty.c_int], \
        """void fl_dashedlinestyle(const char * dash, int ndash)
        """)
def fl_dashedlinestyle(dash, ndash):
    """ fl_dashedlinestyle(dash, ndash)
    """

    _fl_dashedlinestyle(dash, ndash)


_fl_update_display = cfuncproto(
        so_libforms, "fl_update_display", \
        None, [cty.c_int], \
        """void fl_update_display(int block)
        """)
def fl_update_display(block):
    """ fl_update_display(block)
    """

    _fl_update_display(block)


def fl_diagline(x, y, w, h, c):
    _fl_line(x, y, (x) + (w) - 1, (y) + (h) - 1, c)


# Line attributes

# values for unnamed enumeration
FL_SOLID = 0                 #LineSolid
FL_USERDASH = 1               #LineOnOffDash
FL_USERDOUBLEDASH = 2        #LineDoubleDash
FL_DOT = 3
FL_DOTDASH = 4
FL_DASH = 5
FL_LONGDASH = 6


_fl_linewidth = cfuncproto(
        so_libforms, "fl_linewidth", \
        None, [cty.c_int], \
        """void fl_linewidth(int n)
        """)
def fl_linewidth(n):
    """ fl_linewidth(n)
    """

    _fl_linewidth(n)


_fl_linestyle = cfuncproto(
        so_libforms, "fl_linestyle", \
        None, [cty.c_int], \
        """void fl_linestyle(int n)
        """)
def fl_linestyle(n):
    """ fl_linestyle(n)
    """

    _fl_linestyle(n)


_fl_drawmode = cfuncproto(
        so_libforms, "fl_drawmode", \
        None, [cty.c_int], \
        """void fl_drawmode(int request)
        """)
def fl_drawmode(request):
    """ fl_drawmode(request)
    """

    _fl_drawmode(request)


_fl_get_linewidth = cfuncproto(
        so_libforms, "fl_get_linewidth", \
        cty.c_int, [], \
        """int fl_get_linewidth()
        """)
def fl_get_linewidth():
    """ fl_get_linewidth() -> width num.
    """

    retval = _fl_get_linewidth()
    return retval


_fl_get_linestyle = cfuncproto(
        so_libforms, "fl_get_linestyle", \
        cty.c_int, [], \
        """int fl_get_linestyle()
        """)
def fl_get_linestyle():
    """ fl_get_linestyle() -> style num.
    """

    retval = _fl_get_linestyle()
    return retval


_fl_get_drawmode = cfuncproto(
        so_libforms, "fl_get_drawmode", \
        cty.c_int, [], \
        """int fl_get_drawmode()
        """)
def fl_get_drawmode():
    """ fl_get_drawmode() -> mode num.
    """

    retval = _fl_get_drawmode()
    return retval


fl_set_linewidth = fl_linewidth
fl_set_linestyle = fl_linestyle
fl_set_drawmode = fl_drawmode


# Ellipses

_fl_oval = cfuncproto(
        so_libforms, "fl_oval", \
        None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR], \
        """void fl_oval(int fill, FL_Coord x, FL_Coord y, FL_Coord w,
           FL_Coord h, FL_COLOR col)
        """)
def fl_oval(fill, x, y, w, h, col):
    """ fl_oval(fill, x, y, w, h, col)
    """

    _fl_oval(fill, x, y, w, h, col)


_fl_ovalbound = cfuncproto(
        so_libforms, "fl_ovalbound", \
        None, [FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR], \
        """void fl_ovalbound(FL_Coord x, FL_Coord y, FL_Coord w, FL_Coord h,
           FL_COLOR col)
        """)
def fl_ovalbound(x, y, w, h, col):
    """ fl_ovalbound(x, y, w, h, col)
    """

    _fl_ovalbound(x, y, w, h, col)


_fl_ovalarc = cfuncproto(
        so_libforms, "fl_ovalarc", \
        None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord, cty.c_int, \
        cty.c_int, FL_COLOR], \
        """void fl_ovalarc(int fill, FL_Coord x, FL_Coord y, FL_Coord w,
           FL_Coord h, int t0, int dt, FL_COLOR col)
        """)
def fl_ovalarc(fill, x, y, w, h, t0, dt, col):
    """ fl_ovalarc(fill, x, y, w, h, t0, dt, col)
    """

    _fl_ovalarc(fill, x, y, w, h, t0, dt, col)


def fl_ovalf(x, y, w, h, c):
    _fl_oval(1, x, y, w, h, c)

def fl_ovall(x, y, w, h, c):
    _fl_oval(0, x, y, w, h, c)


fl_oval_bound = fl_ovalbound


def fl_circf(x, y, r, col):
    _fl_oval(1, (x) - (r), (y) - (r), 2 * (r), 2 * (r), col)

def fl_circ( x, y, r, col ):
    _fl_oval(0, (x) - (r), (y) - (r), 2 * (r), 2 * (r), col)


# Arcs

_fl_pieslice = cfuncproto(
        so_libforms, "fl_pieslice", \
        None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord, \
        cty.c_int, cty.c_int, FL_COLOR], \
        """void fl_pieslice(int fill, FL_Coord x, FL_Coord y, FL_Coord w,
           FL_Coord h, int a1, int a2, FL_COLOR col)
        """)
def fl_pieslice(fill, x, y, w, h, a1, a2, col):
    """ fl_pieslice(fill, x, y, w, h, a1, a2, col)
    """

    _fl_pieslice(fill, x, y, w, h, a1, a2, col)


def fl_arcf(x, y, r, a1, a2, c):
    _fl_pieslice(1, (x - r), (y - r), \
                 (2 * r), (2 * r), a1, a2, c)

def fl_arc(x, y, r, a1, a2, c):
    _fl_pieslice(0, (x - r), (y - r), \
                 (2 * r), (2 * r), a1, a2, c)


# High level drawing routines

_fl_drw_frame = cfuncproto(
        so_libforms, "fl_drw_frame", \
        None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord, \
        FL_COLOR, cty.c_int], \
        """void fl_drw_frame(int style, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, FL_COLOR c, int bw)
        """)
def fl_drw_frame(style, x, y, w, h, c, bw):
    """ fl_drw_frame(style, x, y, w, h, c, bw)
    """

    _fl_drw_frame(style, x, y, w, h, c, bw)


_fl_drw_checkbox = cfuncproto(
        so_libforms, "fl_drw_checkbox", \
        None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord, \
        FL_COLOR, cty.c_int], \
        """void fl_drw_checkbox(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, FL_COLOR col, int bw)
        """)
def fl_drw_checkbox(boxtype, x, y, w, h, col, bw):
    """ fl_drw_checkbox(boxtype, x, y, w, h, col, bw)
    """

    _fl_drw_checkbox(boxtype, x, y, w, h, col, bw)


# Interfaces

_fl_get_fontstruct = cfuncproto(
        so_libforms, "fl_get_fontstruct", \
        cty.POINTER(XFontStruct), [cty.c_int, cty.c_int], \
        """)XFontStruct * fl_get_fontstruct(int style, int size)
        """)
def fl_get_fontstruct(style, size):
    """ fl_get_fontstruct(style, size) -> XfontStruct class
    """

    retval = _fl_get_fontstruct(style, size)
    return retval


fl_get_font_struct = fl_get_fontstruct
fl_get_fntstruct = fl_get_font_struct


_fl_get_mouse = cfuncproto(
        so_libforms, "fl_get_mouse", \
        Window, [cty.POINTER(FL_Coord), cty.POINTER(FL_Coord), \
        cty.POINTER(cty.c_uint)], \
        """Window fl_get_mouse(FL_Coord * x, FL_Coord * y,
          unsigned int * keymask)
        """)
def fl_get_mouse(x, y, keymask):
    """ fl_get_mouse(x, y, keymask) -> window
    """

    retval = _fl_get_mouse(x, y, keymask)
    return retval


_fl_set_mouse = cfuncproto(
        so_libforms, "fl_set_mouse", \
        None, [FL_Coord, FL_Coord], \
        """void fl_set_mouse(FL_Coord mx, FL_Coord my)
        """)
def fl_set_mouse(mx, my):
    """ fl_set_mouse(mx, my)
    """

    _fl_set_mouse(mx, my)


_fl_get_win_mouse = cfuncproto(
        so_libforms, "fl_get_win_mouse", \
        Window, [Window, cty.POINTER(FL_Coord), cty.POINTER(FL_Coord), \
        cty.POINTER(cty.c_uint)], \
        """Window fl_get_win_mouse(Window win, FL_Coord * x, FL_Coord * y,
        unsigned int * keymask)
        """)
def fl_get_win_mouse(win, x, y, keymask):
    """ fl_get_win_mouse(win, x, y, keymask) -> window
    """

    retval = _fl_get_win_mouse(win, x, y, keymask)
    return retval


_fl_get_form_mouse = cfuncproto(
        so_libforms, "fl_get_form_mouse", \
        Window, [cty.POINTER(FL_FORM), cty.POINTER(FL_Coord), \
        cty.POINTER(FL_Coord), cty.POINTER(cty.c_uint)], \
        """Window fl_get_form_mouse(FL_FORM * fm, FL_Coord * x,
           FL_Coord * y, unsigned int * keymask)
        """)
def fl_get_form_mouse(fm, x, y, keymask):
    """ fl_get_form_mouse(fm, x, y, keymask)
    """

    _fl_get_form_mouse(fm, x, y, keymask)


_fl_win_to_form = cfuncproto(
        so_libforms, "fl_win_to_form",
        cty.POINTER(FL_FORM), [Window], \
        """FL_FORM * fl_win_to_form(Window win)
        """)
def fl_win_to_form(win):
    """ fl_win_to_form(win) -> pForm
    """

    retval = _fl_win_to_form(win)
    return retval


_fl_set_form_icon = cfuncproto(
        so_libforms, "fl_set_form_icon", \
        None, [cty.POINTER(FL_FORM), Pixmap, Pixmap], \
        """void fl_set_form_icon(FL_FORM * form, Pixmap p, Pixmap m)
        """)
def fl_set_form_icon(pForm, p, m):
    """ fl_set_form_icon(pForm, p, m)
    """

    _fl_set_form_icon(pForm, p, m)


_fl_get_decoration_sizes = cfuncproto(
        so_libforms, "fl_get_decoration_sizes",
        cty.c_int, [cty.POINTER(FL_FORM), cty.POINTER(cty.c_int), \
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)], \
        """int fl_get_decoration_sizes(FL_FORM * form, int * top,
           int * right, int * bottom, int * left)
        """)
def fl_get_decoration_sizes(pForm, top, right, bottom, left):
    """ fl_get_decoration_sizes(pForm, top, right, bottom, left) -> size num.
    """

    retval = _fl_get_decoration_sizes(pForm, top, right, bottom, left)
    return retval


# /usr/include/X11/Xlib.h 3026
_XRaiseWindow = cfuncproto(
        so_libX11, "XRaiseWindow", \
        cty.c_int, [cty.POINTER(Display), Window], \
        """int XRaiseWindow(Display * p1, Window p2)
        """)
def XRaiseWindow(p1, p2):
    """ XRaiseWindow(p1, p2) -> num.
    """

    retval = _XRaiseWindow(p1, p2)
    return retval


def fl_raise_form(f):
    if (f.window):
        XRaiseWindow(fl_display, f.window)


# /usr/include/X11/Xlib.h 2791
_XLowerWindow = cfuncproto(
        so_libX11, "XLowerWindow", \
        cty.c_int, [cty.POINTER(Display), Window], \
        """int XLowerWindow(Display * p1, Window p2)
        """)
def XLowerWindow(p1, p2):
    """ XLowerWindow(p1, p2) -> num.
    """

    retval = _XLowerWindow(p1, p2)
    return retval


def fl_lower_form(f):
    if (f.window):
        XLowerWindow(fl_display, f.window)


# /usr/include/X11/Xlib.h 3241
_XSetForeground = cfuncproto(
        so_libX11, "XSetForeground", \
        cty.c_int, [cty.POINTER(Display), GC, cty.c_ulong], \
        """int XSetForeground(Display * p1, GC p2, long unsigned int p3)
        """)
def XSetForeground(p1, p2, p3):
    """ XSetForeground(p1, p2, p3) -> num.
    """

    retval = _XSetForeground(p1, p2, p3)
    return retval


def fl_set_foreground(gc, c):
    XSetForeground(fl_display, gc, fl_get_pixel(c))


# /usr/include/X11/Xlib.h 3168
_XSetBackground = cfuncproto(
        so_libforms, "XSetBackground", \
        cty.c_int, [cty.POINTER(Display), GC, cty.c_ulong], \
        """int XSetBackground(Display * p1, GC p2, long unsigned int p3)
        """)
def XSetBackground(p1, p2, p3):
    """ XSetBackground(p1, p2, p3) -> num.
    """

    retval = _XSetBackground(p1, p2, p3)
    return retval


def fl_set_background(gc, c):
    XSetBackground(fl_display, gc, fl_get_pixel(c))


# General windowing support

_fl_wincreate = cfuncproto(
        so_libforms, "fl_wincreate", \
        Window, [STRING], \
        """Window fl_wincreate(const char * label)
        """)
def fl_wincreate(label):
    """ fl_wincreate(label) -> window
    """

    retval = _fl_wincreate(label)
    return retval


_fl_winshow = cfuncproto(
        so_libforms, "fl_winshow", \
        Window, [Window], \
        """Window fl_winshow(Window win)
        """)
def fl_winshow(win):
    """ fl_winshow(win) -> window
    """

    retval = _fl_winshow(win)
    return retval


_fl_winopen = cfuncproto(
        so_libforms, "fl_winopen", \
        Window, [STRING], \
        """Window fl_winopen(const char * label)
        """)
def fl_winopen(label):
    """ fl_winopen(label) -> window
    """

    retval = _fl_winopen(label)
    return retval


_fl_winhide = cfuncproto(
        so_libforms, "fl_winhide", \
        None, [Window], \
        """void fl_winhide(Window win)
        """)
def fl_winhide(win):
    """ fl_winhide(win)
    """

    _fl_winhide(win)


_fl_winclose = cfuncproto(
        so_libforms, "fl_winclose", \
        None, [Window], \
        """void fl_winclose(Window win)
        """)
def fl_winclose(win):
    """ fl_winclose(win)
    """

    _fl_winclose(win)


_fl_winset = cfuncproto(
        so_libforms, "fl_winset", \
        None, [Window], \
        """void fl_winset(Window win)
        """)
def fl_winset(win):
    """ fl_winset(win)
    """

    _fl_winset(win)


_fl_winreparent = cfuncproto(
        so_libforms, "fl_winreparent", \
        cty.c_int, [Window, Window], \
        """int fl_winreparent(Window win, Window new_parent)
        """)
def fl_winreparent(win, new_parent):
    """ fl_winreparent(win, new_parent) -> num.
    """

    retval = _fl_winreparent(win, new_parent)
    return retval


_fl_winfocus = cfuncproto(
        so_libforms, "fl_winfocus", \
        None, [Window], \
        """void fl_winfocus(Window win)
        """)
def fl_winfocus(win):
    """ fl_winfocus(win)
    """

    _fl_winfocus(win)


_fl_winget = cfuncproto(
        so_libforms, "fl_winget", \
        Window, [], \
        """Window fl_winget()
        """)
def fl_winget():
    """ fl_winget() -> window
    """

    retval = _fl_winget()
    return retval


_fl_iconify = cfuncproto(
        so_libforms, "fl_iconify", \
        cty.c_int, [Window], \
        """int fl_iconify(Window win)
        """)
def fl_iconify(win):
    """ fl_iconify(win) -> num.
    """

    retval = _fl_iconify(win)
    return retval


_fl_winresize = cfuncproto(
        so_libforms, "fl_winresize", \
        None, [Window, FL_Coord, FL_Coord], \
        """void fl_winresize(Window win, FL_Coord neww, FL_Coord newh)
        """)
def fl_winresize(win, neww, newh):
    """ fl_winresize(win, neww, newh)
    """

    _fl_winresize(win, neww, newh)


_fl_winmove = cfuncproto(
        so_libforms, "fl_winmove", \
        None, [Window, FL_Coord, FL_Coord], \
        """void fl_winmove(Window win, FL_Coord dx, FL_Coord dy)
        """)
def fl_winmove(win, dx, dy):
    """ fl_winmove(win, dx, dy)
    """

    _fl_winmove(win, dx, dy)


_fl_winreshape = cfuncproto(
        so_libforms, "fl_winreshape", \
        None, [Window, FL_Coord, FL_Coord, FL_Coord, FL_Coord], \
        """void fl_winreshape(Window win, FL_Coord dx, FL_Coord dy,
           FL_Coord w, FL_Coord h)
        """)
def fl_winreshape(win, dx, dy, w, h):
    """ fl_winreshape(win, dx, dy, w, h)
    """

    _fl_winreshape(win, dx, dy, w, h)


_fl_winicon = cfuncproto(
        so_libforms, "fl_winicon", \
        None, [Window, Pixmap, Pixmap], \
        """void fl_winicon(Window win, Pixmap p, Pixmap m)
        """)
def fl_winicon(win, p, m):
    """ fl_winicon(win, p, m)
    """

    _fl_winicon(win, p, m)


_fl_winbackground = cfuncproto(
        so_libforms, "fl_winbackground", \
        None, [Window, FL_COLOR], \
        """void fl_winbackground(Window win, FL_COLOR bk)
        """)
def fl_winbackground(win, bk):
    """ fl_winbackground(win, bk)
    """

    _fl_winbackground(win, bk)


_fl_winstepunit = cfuncproto(
        so_libforms, "fl_winstepunit", \
        None, [Window, FL_Coord, FL_Coord], \
        """void fl_winstepunit(Window win, FL_Coord dx, FL_Coord dy)
        """)
def fl_winstepunit(win, dx, dy):
    """ fl_winstepunit(win, dx, dy)
    """

    _fl_winstepunit(win, dx, dy)


_fl_winisvalid = cfuncproto(
        so_libforms, "fl_winisvalid", \
        cty.c_int, [Window], \
        """int fl_winisvalid(Window win)
        """)
def fl_winisvalid(win):
    """ fl_winisvalid(win) -> num.
    """

    retval = _fl_winisvalid(win)
    return retval


_fl_wintitle = cfuncproto(
        so_libforms, "fl_wintitle", \
        None, [Window, STRING], \
        """void fl_wintitle(Window win, const char * title)
        """)
def fl_wintitle(win, title):
    """ fl_wintitle(win, title)
    """

    _fl_wintitle(win, title)


_fl_winicontitle = cfuncproto(
        so_libforms, "fl_winicontitle", \
        None, [Window, STRING], \
        """void fl_winicontitle(Window win, const char * title)
        """)
def fl_winicontitle(win, title):
    """ fl_winicontitle(win, title)
    """

    _fl_winicontitle(win, title)


_fl_winposition = cfuncproto(
        so_libforms, "fl_winposition",
        None, [FL_Coord, FL_Coord],
        """void fl_winposition(FL_Coord x, FL_Coord y)
        """)
def fl_winposition(x, y):
    """ fl_winposition(x, y)
    """

    _fl_winposition(x, y)


fl_pref_winposition = fl_winposition
fl_win_background = fl_winbackground
fl_set_winstepunit = fl_winstepunit


_fl_winminsize = cfuncproto(
        so_libforms, "fl_winminsize",
        None, [Window, FL_Coord, FL_Coord],
        """void fl_winminsize(Window win, FL_Coord w, FL_Coord h)
        """)
def fl_winminsize(win, w, h):
    """ fl_winminsize(win, w, h)
    """

    _fl_winminsize(win, w, h)


_fl_winmaxsize = cfuncproto(
        so_libforms, "fl_winmaxsize",
        None, [Window, FL_Coord, FL_Coord],
        """void fl_winmaxsize(Window win, FL_Coord w, FL_Coord h)
        """)
def fl_winmaxsize(win, w, h):
    """ fl_winmaxsize(win, w, h)
    """

    _fl_winmaxsize(win, w, h)


_fl_winaspect = cfuncproto(
        so_libforms, "fl_winaspect",
        None, [Window, FL_Coord, FL_Coord],
        """void fl_winaspect(Window win, FL_Coord x, FL_Coord y)
        """)
def fl_winaspect(win, x, y):
    """ fl_winaspect(win, x, y)
    """

    _fl_winaspect(win, x, y)


_fl_reset_winconstraints = cfuncproto(
        so_libforms, "fl_reset_winconstraints",
        None, [Window],
        """void fl_reset_winconstraints(Window win)
        """)
def fl_reset_winconstraints(win):
    """ fl_reset_winconstraints(win)
    """

    _fl_reset_winconstraints(win)


_fl_winsize = cfuncproto(
        so_libforms, "fl_winsize",
        None, [FL_Coord, FL_Coord],
        """void fl_winsize(FL_Coord w, FL_Coord h)
        """)
def fl_winsize(w, h):
    """ fl_winsize(w, h)
    """

    _fl_winsize(w, h)


_fl_initial_winsize = cfuncproto(
        so_libforms, "fl_initial_winsize",
        None, [FL_Coord, FL_Coord],
        """void fl_initial_winsize(FL_Coord w, FL_Coord h)
        """)
def fl_initial_winsize(w, h):
    """ fl_initial_winsize(w, h)
    """

    _fl_initial_winsize(w, h)


fl_pref_winsize = fl_winsize


_fl_initial_winstate = cfuncproto(
        so_libforms, "fl_initial_winstate",
        None, [cty.c_int],
        """void fl_initial_winstate(int state)
        """)
def fl_initial_winstate(state):
    """ fl_initial_winstate(state)
    """

    _fl_initial_winstate(state)


_fl_create_colormap = cfuncproto(
        so_libforms, "fl_create_colormap",
        Colormap, [cty.POINTER(XVisualInfo), cty.c_int],
        """)Colormap fl_create_colormap(XVisualInfo * xv, int nfill)
        """)
def fl_create_colormap(xv, nfill):
    """ fl_create_colormap(xv, nfill) -> colormap
    """

    retval = _fl_create_colormap(xv, nfill)
    return retval


_fl_wingeometry = cfuncproto(
        so_libforms, "fl_wingeometry",
        None, [FL_Coord, FL_Coord, FL_Coord, FL_Coord],
        """void fl_wingeometry(FL_Coord x, FL_Coord y, FL_Coord w, FL_Coord h)
        """)
def fl_wingeometry(x, y, w, h):
    """ fl_wingeometry(x, y, w, h)
    """

    _fl_wingeometry(x, y, w, h)


fl_pref_wingeometry = fl_wingeometry


_fl_initial_wingeometry = cfuncproto(
        so_libforms, "fl_initial_wingeometry",
        None, [FL_Coord, FL_Coord, FL_Coord, FL_Coord],
        """void fl_initial_wingeometry(FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h)
        """)
def fl_initial_wingeometry(x, y, w, h):
    """ fl_initial_wingeometry(x, y, w, h)
    """

    _fl_initial_wingeometry(x, y, w, h)


_fl_noborder = cfuncproto(
        so_libforms, "fl_noborder",
        None, [],
        """void fl_noborder()
        """)
def fl_noborder():
    """ fl_noborder()
    """

    _fl_noborder()


_fl_transient = cfuncproto(
        so_libforms, "fl_transient",
        None, [], \
        """void fl_transient()
        """)
def fl_transient():
    """ fl_transient()
    """

    _fl_transient()


_fl_get_winsize = cfuncproto(
        so_libforms, "fl_get_winsize",
        None, [Window, cty.POINTER(FL_Coord), cty.POINTER(FL_Coord)],
        """void fl_get_winsize(Window win, FL_Coord * w, FL_Coord * h)
        """)
def fl_get_winsize(win, w, h):
    """ fl_get_winsize(win, w, h)
    """

    _fl_get_winsize(win, w, h)


_fl_get_winorigin = cfuncproto(
        so_libforms, "fl_get_winorigin",
        None, [Window, cty.POINTER(FL_Coord), cty.POINTER(FL_Coord)],
        """void fl_get_winorigin(Window win, FL_Coord * x, FL_Coord * y)
        """)
def fl_get_winorigin(win, x, y):
    """ fl_get_winorigin(win, x, y)
    """

    _fl_get_winorigin(win, x, y)


_fl_get_wingeometry = cfuncproto(
        so_libforms, "fl_get_wingeometry",
        None, [Window, cty.POINTER(FL_Coord), cty.POINTER(FL_Coord),
        cty.POINTER(FL_Coord), cty.POINTER(FL_Coord)],
        """void fl_get_wingeometry(Window win, FL_Coord * x, FL_Coord * y,
           FL_Coord * w, FL_Coord * h)
        """)
def fl_get_wingeometry(win, x, y, w, h):
    """ fl_get_wingeometry(win, x, y, w, h)
    """

    _fl_get_wingeometry(win, x, y, w, h)


# For compatibility
fl_get_win_size = fl_get_winsize
fl_get_win_origin = fl_get_winorigin
fl_get_win_geometry = fl_get_wingeometry
fl_initial_winposition = fl_pref_winposition


def fl_get_display():       # NOT SURE
    return fl_display

def FL_FormDisplay(pForm):   # NOT SURE
    return fl_display

def FL_ObjectDisplay(object):   # NOT SURE
    return fl_display

def FL_IS_CANVAS(o):
    if (o.objclass == FL_CANVAS) or (o.objclass == FL_GLCANVAS):
        return True
    else:
        return False


# The window an object belongs to - for drawing
def FL_ObjWin(o):
    if FL_IS_CANVAS(o):
        return fl_get_canvas_id(o)
    else:
        return o.form.window


_fl_get_real_object_window = cfuncproto(
        so_libforms, "fl_get_real_object_window",
        Window, [cty.POINTER(FL_OBJECT)],
        """Window fl_get_real_object_window(FL_OBJECT * ob)
        """)
def fl_get_real_object_window(pObject):
    """ fl_get_real_object_window(pObject) -> window
    """

    retval = _fl_get_real_object_window(pObject)
    return retval


FL_OBJECT_WID = FL_ObjWin

# *** start - from /usr/include/X11/X.h ***
# Input Event Masks. Used as event-mask window attribute and as arguments
# to Grab requests.  Not to be confused with event names.
NoEventMask = 0L
KeyPressMask = (1L<<0)
KeyReleaseMask = (1L<<1)
ButtonPressMask = (1L<<2)
ButtonReleaseMask = (1L<<3)
EnterWindowMask = (1L<<4)
LeaveWindowMask = (1L<<5)
PointerMotionMask = (1L<<6)
PointerMotionHintMask = (1L<<7)
Button1MotionMask = (1L<<8)
Button2MotionMask = (1L<<9)
Button3MotionMask = (1L<<10)
Button4MotionMask = (1L<<11)
Button5MotionMask = (1L<<12)
ButtonMotionMask = (1L<<13)
KeymapStateMask = (1L<<14)
ExposureMask = (1L<<15)
VisibilityChangeMask = (1L<<16)
StructureNotifyMask = (1L<<17)
ResizeRedirectMask = (1L<<18)
SubstructureNotifyMask = (1L<<19)
SubstructureRedirectMask = (1L<<20)
FocusChangeMask = (1L<<21)
ColormapChangeMask = (1L<<23)
OwnerGrabButtonMask = (1L<<24)
# Key masks. Used as modifiers to GrabButton and GrabKey, results of QueryPointer,
# state in various key-, mouse-, and button-related events.
ShiftMask = (1<<0)
LockMask = (1<<1)
ControlMask = (1<<2)
Mod1Mask = (1<<3)
Mod2Mask = (1<<4)
Mod3Mask = (1<<5)
Mod4Mask = (1<<6)
Mod5Mask = (1<<7)
# button masks.  Used in same manner as Key masks above. Not to be confused
# with button names below.
Button1Mask = (1<<8)
Button2Mask = (1<<9)
Button3Mask = (1<<10)
Button4Mask = (1<<11)
Button5Mask = (1<<12)
AnyModifier = (1<<15)       # used in GrabButton, GrabKey
# *** end - from /usr/include/X11/X.h ***

# All registerable events, including Client Message
FL_ALL_EVENT = (KeyPressMask | KeyReleaseMask \
                    | ButtonPressMask | ButtonReleaseMask \
                    | EnterWindowMask | LeaveWindowMask \
                    | ButtonMotionMask | PointerMotionMask )

# my add
class XEvent(cty.Union):
    pass
XEvent.__fields = []


# Replacements for X functions that access the event queue

_fl_XNextEvent = cfuncproto(
        so_libforms, "fl_XNextEvent",
        cty.c_int, [cty.POINTER(XEvent)],
        """int fl_XNextEvent(XEvent * xev)
        """)
def fl_XNextEvent(xev):
    """ fl_XNextEvent(xev) -> event num.
    """

    retval = _fl_XNextEvent(xev)
    return retval


_fl_XPeekEvent = cfuncproto(
        so_libforms, "fl_XPeekEvent",
        cty.c_int, [cty.POINTER(XEvent)],
        """int fl_XPeekEvent(XEvent * xev)
        """)
def fl_XPeekEvent(xev):
    """ fl_XPeekEvent(xev) -> event num.
    """

    retval = _fl_XPeekEvent(xev)
    return retval


_fl_XEventsQueued = cfuncproto(
        so_libforms, "fl_XEventsQueued",
        cty.c_int, [cty.c_int],
        """int fl_XEventsQueued(int mode)
        """)
def fl_XEventsQueued(mode):
    """ fl_XEventsQueued(mode) -> event num.
    """

    retval = _fl_XEventsQueued(mode)
    return retval


_fl_XPutBackEvent = cfuncproto(
        so_libforms, "fl_XPutBackEvent",
        None, [cty.POINTER(XEvent)],
        """void fl_XPutBackEvent(XEvent * xev)
        """)
def fl_XPutBackEvent(xev):
    """ fl_XPutBackEvent(xev)
    """

    _fl_XPutBackEvent(xev)


_fl_last_event = cfuncproto(
        so_libforms, "fl_last_event",
        cty.POINTER(XEvent), [],
        """const char * fl_last_event()
        """)
def fl_last_event():
    """ fl_last_event() -> event
    """

    retval = _fl_last_event()
    return retval


FL_APPEVENT_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(XEvent), cty.c_void_p)


_fl_set_event_callback = cfuncproto(
        so_libforms, "fl_set_event_callback",
        FL_APPEVENT_CB, [FL_APPEVENT_CB, cty.c_void_p],
        """FL_APPEVENT_CB fl_set_event_callback(FL_APPEVENT_CB callback,
           void * user_data)
        """)
def fl_set_event_callback(py_callback, user_data):
    """ fl_set_event_callback(py_callback, user_data) -> event callback
    """

    c_callback = FL_APPEVENT_CB(py_callback)
    _cfunc_refs[get_rand_dictkey()] = c_callback
    retval = _fl_set_event_callback(c_callback, user_data)
    return retval


_fl_set_idle_callback = cfuncproto(
        so_libforms, "fl_set_idle_callback",
        FL_APPEVENT_CB, [FL_APPEVENT_CB, cty.c_void_p],
        """FL_APPEVENT_CB fl_set_idle_callback(FL_APPEVENT_CB callback,
           void * user_data)
        """)
def fl_set_idle_callback(py_callback, user_data):
    """ fl_set_idle_callback(py_callback, user_data) -> event callback
    """

    c_callback = FL_APPEVENT_CB(py_callback)
    _cfunc_refs[get_rand_dictkey()] = c_callback
    retval = _fl_set_idle_callback(c_callback, user_data)
    return retval


_fl_addto_selected_xevent = cfuncproto(
        so_libforms, "fl_addto_selected_xevent",
        cty.c_long, [Window, cty.c_long],
        """long int fl_addto_selected_xevent(Window win, long int mask)
        """)
def fl_addto_selected_xevent(win, mask):
    """ fl_addto_selected_xevent(win, mask) -> num.
    """

    retval = _fl_addto_selected_xevent(win, mask)
    return retval


_fl_remove_selected_xevent = cfuncproto(
        so_libforms, "fl_remove_selected_xevent",
        cty.c_long, [Window, cty.c_long],
        """)long int fl_remove_selected_xevent(Window win, long int mask)
        """)
def fl_remove_selected_xevent(win, mask):
    """ fl_remove_selected_xevent(win, mask) -> num.
    """

    retval = _fl_remove_selected_xevent(win, mask)
    return retval


fl_add_selected_xevent = fl_addto_selected_xevent


_fl_set_idle_delta = cfuncproto(
        so_libforms, "fl_set_idle_delta",
        None, [cty.c_long],
        """void fl_set_idle_delta(long int delta)
        """)
def fl_set_idle_delta(delta):
    """ fl_set_idle_delta(delta)
    """

    _fl_set_idle_delta(delta)


_fl_add_event_callback = cfuncproto(
        so_libforms, "fl_add_event_callback",
        FL_APPEVENT_CB, [Window, cty.c_int, FL_APPEVENT_CB, cty.c_void_p],
        """FL_APPEVENT_CB fl_add_event_callback(Window win, int ev,
           FL_APPEVENT_CB wincb, void * user_data)
        """)
def fl_add_event_callback(win, ev, py_wincb, user_data):
    """ fl_add_event_callback(win, ev, py_wincb, user_data) -> event callback
    """

    c_wincb = FL_APPEVENT_CB(py_wincb)
    _cfunc_refs[get_rand_dictkey()] = c_wincb
    retval = _fl_add_event_callback(win, ev, c_wincb, user_data)
    return retval


_fl_remove_event_callback = cfuncproto(
        so_libforms, "fl_remove_event_callback",
        None, [Window, cty.c_int],
        """void fl_remove_event_callback(Window win, int ev)
        """)
def fl_remove_event_callback(win, ev):
    """ fl_remove_event_callback(win, ev)
    """

    _fl_remove_event_callback(win, ev)


_fl_activate_event_callbacks = cfuncproto(
        so_libforms, "fl_activate_event_callbacks",
        None, [Window],
        """void fl_activate_event_callbacks(Window win)
        """)
def fl_activate_event_callbacks(win):
    """ fl_activate_event_callbacks(win)
    """

    _fl_activate_event_callbacks(win)


_fl_print_xevent_name = cfuncproto(
        so_libforms, "fl_print_xevent_name",
        cty.POINTER(XEvent), [STRING, cty.POINTER(XEvent)],
        """XEvent * fl_print_xevent_name(const char * where, const char * xev)
        """)
def fl_print_xevent_name(where, xev):
    """ fl_print_xevent_name(where, xev) -> event
    """

    retval = _fl_print_xevent_name(where, xev)
    return retval


def metakey_down(mask):
    return (mask & Mod1Mask)

def shiftkey_down(mask):
    return (mask & ShiftMask)

def controlkey_down(mask):
    return (mask & ControlMask)

def button_down(mask):
    if (mask & Button1Mask) or (mask & Button2Mask) or \
     (mask & Button3Mask) or (mask & Button4Mask) or \
     (mask & Button5Mask):
        return True
    else:
        return False


# Resources

# values for enumeration 'FL_RTYPE'
FL_RTYPE = cty.c_int  # enum
FL_NONE = 0
FL_SHORT = 10
FL_BOOL = 11
FL_INT = 12
FL_LONG = 13
FL_FLOAT = 14
FL_STRING = 15

class FL_RESOURCE(cty.Structure):
    pass
FL_RESOURCE._fields_ = [
    ('res_name', STRING),           # resource name
    ('res_class', STRING),          # resource class
    ('type', FL_RTYPE),             # FL_INT, FL_FLOAT, FL_BOOL, FL_STRING
    ('var', cty.c_void_p),            # address for the variable
    ('defval', STRING),             # default setting in string form
    ('nbytes', cty.c_int),            # used only for strings
]

# values for enumeration 'XrmOptionKind'
XrmOptionKind = cty.c_int # enum
XrmoptionNoArg = 0      # Value is specified in OptionDescRec.value
XrmoptionIsArg = 1      # Value is the option string itself
XrmoptionStickyArg = 2  # Value is characters immediately following option
XrmoptionSepArg = 3     # Value is next argument in argv
XrmoptionResArg = 4     # Resource and value in next argument in argv
XrmoptionSkipArg = 5    # Ignore this option and the next argument in argv
XrmoptionSkipLine = 6   # Ignore this option and the rest of argv
XrmoptionSkipNArgs = 7  # Ignore this option and the next
                        # OptionDescRes.value arguments in argv


# /usr/include/X11/Xresource.h 345
class XrmOptionDescRec(cty.Structure):
    pass
XrmOptionDescRec._fields_ = [
    ('option', STRING),
    ('specifier', STRING),
    ('argKind', XrmOptionKind),
    ('value', XPointer),
]
XrmOptionDescList = cty.POINTER(XrmOptionDescRec)

FL_CMD_OPT = XrmOptionDescRec

FL_resource = FL_RESOURCE


_fl_initialize = cfuncproto(
        so_libforms, "fl_initialize",
        cty.POINTER(Display), [cty.POINTER(cty.c_int),
        cty.POINTER(STRING), STRING, cty.POINTER(XrmOptionDescRec), cty.c_int],
        """Display * fl_initialize(int * na, char * * arg,
           const char * appclass, FL_CMD_OPT * appopt, int nappopt)
        """)
def fl_initialize(lsysargv, sysargv, appclass, appopt, nappopt):
    """ fl_initialize(num_args, args, appl_class, appl_options, num_appl_opts) -> pDisplay
    """

    # to verify if installed XForms is compatible
    verify_version_compatibility()
    lsysargv = 1
    argum = "".join(sysargv)
    cli_args_nr = cty.c_int(lsysargv)                   #1
    cli_args_nr_p = cty.byref(cli_args_nr)
    cli_args = cty.c_char_p(argum)                      # " "
    structopts = cty.POINTER(FL_CMD_OPT)()
    retval = _fl_initialize(cli_args_nr_p, cli_args, appclass, structopts, nappopt)
    return retval


_fl_finish = cfuncproto(
        so_libforms, "fl_finish",
        None, [],
        """void fl_finish()
        """)
def fl_finish():
    """ fl_finish()
    """

    _fl_finish()


_fl_get_resource = cfuncproto(
        so_libforms, "fl_get_resource",
        STRING, [STRING, STRING, FL_RTYPE, STRING, cty.c_void_p, cty.c_int],
        """const char * fl_get_resource(const char * rname,
           const char * cname, FL_RTYPE dtype, const char * defval,
           void * val, int size)
        """)
def fl_get_resource(rname, cname, dtype, defval, val, size):
    """ fl_get_resource(rname, cname, dtype, defval, val, size) -> string
    """

    retval = _fl_get_resource(rname, cname, dtype, defval, val, size)
    return retval


_fl_set_resource = cfuncproto(
        so_libforms, "fl_set_resource",
        None, [STRING, STRING],
        """void fl_set_resource(const char * str, const char * val)
        """)
def fl_set_resource(resstring, val):
    """ fl_set_resource(resstring, val)
    """

    _fl_set_resource(resstring, val)


_fl_get_app_resources = cfuncproto(
        so_libforms, "fl_get_app_resources",
        None, [cty.POINTER(FL_RESOURCE), cty.c_int],
        """void fl_get_app_resources(FL_RESOURCE * appresource, int n)
        """)
def fl_get_app_resources(appresource, n):
    """ fl_get_app_resources(appresource, n)
    """

    _fl_get_app_resources(appresource, n)


_fl_set_graphics_mode = cfuncproto(
        so_libforms, "fl_set_graphics_mode",
        None, [cty.c_int, cty.c_int],
        """void fl_set_graphics_mode(int mode, int doublebuf)
        """)
def fl_set_graphics_mode(mode, doublebuf):
    """ fl_set_graphics_mode(mode, doublebuf)
    """

    _fl_set_graphics_mode(mode, doublebuf)


_fl_set_visualID = cfuncproto(
        so_libforms, "fl_set_visualID",
        None, [cty.c_long],
        """void fl_set_visualID(long int id)
        """)
def fl_set_visualID(idnum):
    """ fl_set_visualID(idnum)
    """

    _fl_set_visualID(idnum)


KeySym = XID    # cty.c_ulong


_fl_keysym_pressed = cfuncproto(
        so_libforms, "fl_keysym_pressed",
        cty.c_int, [KeySym],
        """int fl_keysym_pressed(KeySym k)
        """)
def fl_keysym_pressed(k):
    """ fl_keysym_pressed(k) -> num.
    """

    retval = _fl_keysym_pressed(k)
    return retval


fl_keypressed = fl_keysym_pressed


# All Form control variables. Named closely as its resource name

class FL_IOPT(cty.Structure):
    pass
FL_IOPT._fields_ = [
    ('rgamma', cty.c_float),
    ('ggamma', cty.c_float),
    ('bgamma', cty.c_float),
    ('debug', cty.c_int),
    ('sync', cty.c_int),
    ('depth', cty.c_int),
    ('vclass', cty.c_int),
    ('doubleBuffer', cty.c_int),
    ('ulPropWidth', cty.c_int),           # underline stuff
    ('ulThickness', cty.c_int),
    ('buttonFontSize', cty.c_int),
    ('sliderFontSize', cty.c_int),
    ('inputFontSize', cty.c_int),
    ('browserFontSize', cty.c_int),
    ('menuFontSize', cty.c_int),
    ('choiceFontSize', cty.c_int),
    ('labelFontSize', cty.c_int),         # all other labels fonts
    ('pupFontSize', cty.c_int),           # font for pop-up menus
    ('pupFontStyle', cty.c_int),
    ('privateColormap', cty.c_int),
    ('sharedColormap', cty.c_int),
    ('standardColormap', cty.c_int),
    ('scrollbarType', cty.c_int),
    ('backingStore', cty.c_int),
    ('coordUnit', cty.c_int),
    ('borderWidth', cty.c_int),
    ('safe', cty.c_int),
    ('rgbfile', STRING),                # where RGB file is
    ('vname', cty.c_char * 24),
]

# my add --LK
my_fl_iopt = FL_IOPT()

buttonLabelSize = my_fl_iopt.buttonFontSize
sliderLabelSize = my_fl_iopt.sliderFontSize
inputLabelSize = my_fl_iopt.inputFontSize


# Program default masks

# values for unnamed enumeration
FL_PDDepth = 2                      #(1<<1)
FL_PDClass = 4                      #(1<<2)
FL_PDDouble = 8                     #(1<<3)
FL_PDSync = 16                      #(1<<4)
FL_PDPrivateMap = 32                #(1<<5)
FL_PDScrollbarType = 64             #(1<<6)
FL_PDPupFontSize = 128              #(1<<7)
FL_PDButtonFontSize = 256           #(1<<8)
FL_PDInputFontSize = 512            #(1<<9)
FL_PDSliderFontSize  = 1024         #(1<<10)
FL_PDVisual = 2048                  #(1<<11)
FL_PDULThickness = 4096             #(1<<12)
FL_PDULPropWidth = 8192             #(1<<13)
FL_PDBS = 16384                     #(1<<14)
FL_PDCoordUnit = 32768              #(1<<15)
FL_PDDebug = 65536                  #(1<<16)
FL_PDSharedMap = 131072             #(1<<17)
FL_PDStandardMap = 262144           #(1<<18)
FL_PDBorderWidth = 524288           #(1<<19)
FL_PDSafe = 1048576                 #(1<<20)
FL_PDMenuFontSize = 2097152         #(1<<21)
FL_PDBrowserFontSize = 4194304      #(1<<22)
FL_PDChoiceFontSize = 8388608       #(1<<23)
FL_PDLabelFontSize = 16777216       #(1<<24)

FL_PDButtonLabelSize = FL_PDButtonFontSize
FL_PDSliderLabelSize = FL_PDSliderFontSize
FL_PDInputLabelSize = FL_PDInputFontSize
FL_PDButtonLabel = FL_PDButtonLabelSize


_fl_set_defaults = cfuncproto(
        so_libforms, "fl_set_defaults",
        None, [cty.c_ulong, cty.POINTER(FL_IOPT)],
        """void fl_set_defaults(long unsigned int mask, FL_IOPT * cntl):
        """)
def fl_set_defaults(mask, cntl):
    """ fl_set_defaults(mask, cntl)
    """

    _fl_set_defaults(mask, cntl)


_fl_set_tabstop = cfuncproto(
        so_libforms, "fl_set_tabstop",
        None, [STRING],
        """void fl_set_tabstop(const char * s)
        """)
def fl_set_tabstop(s):
    """ fl_set_tabstop(s)
    """

    _fl_set_tabstop(s)


_fl_get_defaults = cfuncproto(
        so_libforms, "fl_get_defaults",
        None, [cty.POINTER(FL_IOPT)],
        """void fl_get_defaults(FL_IOPT * cntl)
        """)
def fl_get_defaults(cntl):
    """ fl_get_defaults(cntl)
    """

    _fl_get_defaults(cntl)


_fl_get_visual_depth = cfuncproto(
        so_libforms, "fl_get_visual_depth",
        cty.c_int, [],
        """int fl_get_visual_depth()
        """)
def fl_get_visual_depth():
    """ fl_get_visual_depth() -> depth num.
    """

    retval = _fl_get_visual_depth()
    return retval


_fl_vclass_name = cfuncproto(
        so_libforms, "fl_vclass_name",
        STRING, [cty.c_int],
        """const char * fl_vclass_name(int n)
        """)
def fl_vclass_name(n):
    """ fl_vclass_name(n) -> name string
    """

    _fl_vclass_name(n)


_fl_vclass_val = cfuncproto(
        so_libforms, "fl_vclass_val",
        cty.c_int, [STRING],
        """int fl_vclass_val(const char * v)
        """)
def fl_vclass_val(v):
    """ fl_vclass_val(v) -> num.
    """

    retval = _fl_vclass_val(v)
    return retval


_fl_set_ul_property = cfuncproto(
        so_libforms, "fl_set_ul_property",
        None, [cty.c_int, cty.c_int],
        """void fl_set_ul_property(int prop, int thickness)
        """)
def fl_set_ul_property(prop, thickness):
    """ fl_set_ul_property(prop, thickness)
    """

    _fl_set_ul_property(prop, thickness)


_fl_set_clipping = cfuncproto(
        so_libforms, "fl_set_clipping",
        None, [FL_Coord, FL_Coord, FL_Coord, FL_Coord],
        """void fl_set_clipping(FL_Coord x, FL_Coord y, FL_Coord w, FL_Coord h)
        """)
def fl_set_clipping(x, y, w, h):
    """ fl_set_clipping(x, y, w, h)
    """

    _fl_set_clipping(x, y, w, h)


_fl_set_gc_clipping = cfuncproto(
        so_libforms, "fl_set_gc_clipping",
        None, [GC, FL_Coord, FL_Coord, FL_Coord, FL_Coord],
        """void fl_set_gc_clipping(GC gc, FL_Coord x, FL_Coord y, FL_Coord w,
           FL_Coord h)
        """)
def fl_set_gc_clipping(gc, x, y, w, h):
    """ fl_set_gc_clipping(gc, x, y, w, h)
    """

    _fl_set_gc_clipping(gc, x, y, w, h)


_fl_unset_gc_clipping = cfuncproto(
        so_libforms, "fl_unset_gc_clipping",
        None, [GC],
        """void fl_unset_gc_clipping(GC gc)
        """)
def fl_unset_gc_clipping(gc):
    """ fl_unset_gc_clipping(gc)
    """

    _fl_unset_gc_clipping(gc)


_fl_set_clippings = cfuncproto(
        so_libforms, "fl_set_clippings",
        None, [cty.POINTER(FL_RECT), cty.c_int],
        """void fl_set_clippings(FL_RECT * xrect, int n)
        """)
def fl_set_clippings(xrect, n):
    """ fl_set_clippings(xrect, n)
    """

    _fl_set_clippings(xrect, n)


_fl_unset_clipping = cfuncproto(
        so_libforms, "fl_unset_clipping",
        None, [],
        """void fl_unset_clipping()
        """)
def fl_unset_clipping():
    """ fl_unset_clipping()
    """

    _fl_unset_clipping()


_fl_set_text_clipping = cfuncproto(
        so_libforms, "fl_set_text_clipping",
        None, [FL_Coord, FL_Coord, FL_Coord, FL_Coord],
        """void fl_set_text_clipping(FL_Coord x, FL_Coord y, FL_Coord w,
           FL_Coord h)
        """)
def fl_set_text_clipping(x, y, w, h):
    """ fl_set_text_clipping(x, y, w, h)
    """

    _fl_set_text_clipping(x, y, w, h)


_fl_unset_text_clipping = cfuncproto(
        so_libforms, "fl_unset_text_clipping",
        None, [],
        """void fl_unset_text_clipping()
        """)
def fl_unset_text_clipping():
    """ fl_unset_text_clipping()
    """

    _fl_unset_text_clipping()


# How we pack and unpack colors

FL_PCTYPE = cty.c_ubyte
FL_PCBITS = 8
FL_PCMAX = (1<<FL_PCBITS) - 1

def FL_PCCLAMP(a):
    if (a > FL_PCMAX):
        return FL_PCMAX
    elif (a < 0):
        return 0
    else:
        return a

FL_PACKED4 = cty.c_uint
FL_PACKED = FL_PACKED4

FL_RMASK = 0x000000ff
FL_RSHIFT = 0
FL_GMASK = 0x0000ff00
FL_GSHIFT = 8
FL_BMASK = 0x00ff0000
FL_BSHIFT = 16
FL_AMASK = 0xff000000
FL_ASHIFT = 24

# If PCBITS is not 8, we need to apply the RGBmask

# maybe unused in python?
#def FL_GETG(packed):
#    return ((packed) >> FL_GSHIFT) & FL_PCMAX

# maybe unused in python?
#def FL_GETB(packed):
#    return ((packed) >> FL_BSHIFT) & FL_PCMAX

# maybe unused in python?
#def FL_GETA(packed):
#    return ((packed) >> FL_ASHIFT) & FL_PCMAX

# maybe unused in python?
#def FL_PACK3(r, g, b ):
#    return (r<<FL_RSHIFT) | (g<<FL_GSHIFT) | (b<<FL_BSHIFT)

# maybe unused in python?
#FL_PACK = FL_PACK3

# maybe unused in python?
#def FL_PACK4(r, g, b, a):
#    return (FL_PACK3(r, g, b) | (a<<FL_ASHIFT))

# maybe unused in python?
#def FL_UNPACK(p, r, g, b):
#    r = FL_GETR(p)
#    g = FL_GETG(p)
#    b = FL_GETB(p)

# maybe unused in python?
#FL_UNPACK3 = FL_UNPACK

# maybe unused in python?
#def FL_UNPACK4(p, r, g, b, a):
#    FL_UNPACK3(p, r, g, b)
#    a = FL_GETA(p)

class FL_RGB2PIXEL_(cty.Structure):
    pass
FL_RGB2PIXEL_._fields_ = [
    ('rshift', cty.c_uint),
    ('rmask', cty.c_uint),
    ('rbits', cty.c_uint),
    ('gshift', cty.c_uint),
    ('gmask', cty.c_uint),
    ('gbits', cty.c_uint),
    ('bshift', cty.c_uint),
    ('bmask', cty.c_uint),
    ('bbits', cty.c_uint),
    ('bits_per_rgb', cty.c_int),
    ('colormap_size', cty.c_int),
]

FL_RGB2PIXEL = FL_RGB2PIXEL_

class FL_POPUP_(cty.Structure):
    pass
FL_POPUP = FL_POPUP_

class FL_POPUP_ENTRY_(cty.Structure):
    pass
FL_POPUP_ENTRY = FL_POPUP_ENTRY_

class FL_POPUP_RETURN_(cty.Structure):
    pass
FL_POPUP_RETURN = FL_POPUP_RETURN_

FL_POPUP_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_POPUP_RETURN))

FL_POPUP_RETURN_._fields_ = [
    ('val', cty.c_long),              # value assigned to popup entry
    ('user_data', cty.c_void_p),      # pointer to user data
    ('text', STRING),               # text of the selected popup entry
    ('label', STRING),              # left-flushed label part
    ('accel', STRING),              # right-flushed label part
    ('entry', cty.POINTER(FL_POPUP_ENTRY)),   # pointer to selected popup entry
    ('popup', cty.POINTER(FL_POPUP)),         # popup we're called for
]

Cursor = XID    # cty.c_ulong

FL_POPUP_._fields_ = [
    ('next', cty.POINTER(FL_POPUP)),      # next in linked list
    ('prev', cty.POINTER(FL_POPUP)),      # previous in linked list
    ('parent', cty.POINTER(FL_POPUP)),        # for sub-popups: direct parent
    ('top_parent', cty.POINTER(FL_POPUP)),    # and top-most parent
    ('entries', cty.POINTER(FL_POPUP_ENTRY)),     # pointer to list of entries
    ('title', STRING),
    ('win', Window),                    # popup window
    ('parent_win', Window),             # parent window of popup window
    ('cursor', Cursor),                 # cursor for the popup
    ('callback', FL_POPUP_CB),
    ('use_req_pos', cty.c_int),           # if set use req_x, req_y
    ('req_x', cty.c_int),
    ('req_y', cty.c_int),
    ('x', cty.c_int),                     # position of popup window
    ('y', cty.c_int),
    ('w', cty.c_uint),                    # dimensions of popup window
    ('h', cty.c_uint),
    ('min_width', cty.c_int),             # minimum width of popup
    ('title_box_x', cty.c_int),           # position of title box
    ('title_box_y', cty.c_int),
    ('title_box_w', cty.c_uint),          # dimensions of title box
    ('title_box_h', cty.c_uint),
    ('has_subs', cty.c_int),
    ('has_boxes', cty.c_int),
    ('counter', cty.c_int),
    ('title_font_style', cty.c_int),
    ('title_font_size', cty.c_int),
    ('entry_font_style', cty.c_int),
    ('entry_font_size', cty.c_int),
    ('event_mask', cty.c_ulong),
    ('bw', cty.c_int),                    # border width
    ('bg_color', FL_COLOR),             # background color of popup
    ('on_color', FL_COLOR),             # color of entry under mouse
    ('title_color', FL_COLOR),          # color of title text
    ('text_color', FL_COLOR),           # normal text color of entry
    ('text_on_color', FL_COLOR),        # text color when mouse on entry
    ('text_off_color', FL_COLOR),       # text color of disabled entry
    ('radio_color', FL_COLOR),          # color of radio buttons
    ('policy', cty.c_int),
    ('need_recalc', cty.c_int),           # do we need to recalc position?
    ('ret', FL_POPUP_RETURN),     # structure passed to callbacks and returned
                                  # on selection
]

FL_POPUP_ENTRY_._fields_ = [
    ('prev', cty.POINTER(FL_POPUP_ENTRY)),    # next in linked list
    ('next', cty.POINTER(FL_POPUP_ENTRY)),    # previous in linked list
    ('popup', cty.POINTER(FL_POPUP)),         # popup it belongs to
    ('is_act', cty.c_int),                    # set while mouse is over it
    ('text', STRING),                       # complete text of entry
    ('label', STRING),                      # cleaned-up label text
    ('accel', STRING),                      # cleaned-up accelerator key text
    ('val', cty.c_long),                      # value associated with entry
    ('user_data', cty.c_void_p),              # pointer to user data
    ('type', cty.c_int),                      # normal, toggle, radio, sub-popup
    ('state', cty.c_uint),                    # disabled, hidden, checked
    ('group', cty.c_int),                     # group (for radio entries only)
    ('sub', cty.POINTER(FL_POPUP)),           # sub-popup bound to entry
    ('shortcut', cty.POINTER(cty.c_long)),      # keyboard shortcuts
    ('ulpos', cty.c_int),                     # underline position in text
    ('callback', FL_POPUP_CB),              # callback for entry
    ('enter_callback', FL_POPUP_CB),        # callback for entering entry
    ('leave_callback', FL_POPUP_CB),        # callback for leaving entry
    ('x', cty.c_int),                         # position of entry text
    ('y', cty.c_int),
    ('w', cty.c_uint),
    ('h', cty.c_uint),                        # height of entry text
    ('box_x', cty.c_int),
    ('box_y', cty.c_int),
    ('box_w', cty.c_uint),
    ('box_h', cty.c_uint),
    ('sl_h', cty.c_uint),
    ('ul_x', cty.c_int),
    ('ul_y', cty.c_int),
    ('ul_w', cty.c_uint),
    ('ul_h', cty.c_uint),
]

class FL_POPUP_ITEM(cty.Structure):
    pass
FL_POPUP_ITEM._fields_ = [
    ('text', STRING),               # text of entry
    ('callback', FL_POPUP_CB),      # (selection) callback
    ('shortcut', STRING),           # keyboard shortcut description
    ('type', cty.c_int),              # type of entry
    ('state', cty.c_int),             # disabled, hidden, checked
]

# Popup policies
# values for unnamed enumeration
FL_POPUP_NORMAL_SELECT = 0
FL_POPUP_DRAG_SELECT = 1

# Popup states
# values for unnamed enumeration
FL_POPUP_NONE = 0
FL_POPUP_DISABLED = 1       # entry is disabled
FL_POPUP_HIDDEN   = 2       # entry is temporarily hidden
FL_POPUP_CHECKED  = 4       # toggle/radio item is in on state

# Popup entry types
# values for unnamed enumeration
FL_POPUP_NORMAL = 0         # normal popup entry
FL_POPUP_TOGGLE = 1         # toggle ("binary") popup entry
FL_POPUP_RADIO = 2          # radio popup entry
FL_POPUP_SUB = 3            # sub-popup popup entry
FL_POPUP_LINE = 4           # line popup entry

# Popup color types
# values for unnamed enumeration
FL_POPUP_BACKGROUND_COLOR = 0
FL_POPUP_HIGHLIGHT_COLOR = 1
FL_POPUP_TITLE_COLOR = 2
FL_POPUP_TEXT_COLOR = 3
FL_POPUP_HIGHLIGHT_TEXT_COLOR = 4
FL_POPUP_DISABLED_TEXT_COLOR = 5
FL_POPUP_RADIO_COLOR = 6


_fl_popup_add = cfuncproto(
        so_libforms, "fl_popup_add",
        cty.POINTER(FL_POPUP), [Window, STRING],
        """FL_POPUP * fl_popup_add(Window p1, const char * p2)
        """)
def fl_popup_add(win, p2):
    """ fl_popup_add(win, p2) -> popup
    """

    retval = _fl_popup_add(win, p2)
    return retval


_fl_popup_add_entries = cfuncproto(
        so_libforms, "fl_popup_add_entries",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_POPUP), STRING],
        """FL_POPUP_ENTRY * fl_popup_add_entries(FL_POPUP * p1,
           const char * p2)
        """)
def fl_popup_add_entries(p1, p2):
    """ fl_popup_add_entries(p1, p2) -> popup_entry
    """

    retval = _fl_popup_add_entries(p1, p2)
    return retval


_fl_popup_insert_entries = cfuncproto(
        so_libforms, "fl_popup_insert_entries",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_POPUP),
        cty.POINTER(FL_POPUP_ENTRY), STRING],
        """FL_POPUP_ENTRY * fl_popup_insert_entries(FL_POPUP * p1,
           FL_POPUP_ENTRY * p2, const char * p3)
        """)
def fl_popup_insert_entries(p1, p2, p3):
    """ fl_popup_insert_entries(p1, p2, p3) -> popup_entry
    """

    retval = _fl_popup_insert_entries(p1, p2, p3)
    return retval


_fl_popup_create = cfuncproto(
        so_libforms, "fl_popup_create",
            cty.POINTER(FL_POPUP), [Window, STRING, cty.POINTER(FL_POPUP_ITEM)],
        """FL_POPUP * fl_popup_create(Window p1, const char * p2,
           FL_POPUP_ITEM * p3)
        """)
def fl_popup_create(win, p2, p3):
    """ fl_popup_create(win, p2, p3) -> popup
    """

    retval = _fl_popup_create(p1, p2, p3)
    return retval


_fl_popup_delete = cfuncproto(
        so_libforms, "fl_popup_delete",
        cty.c_int, [cty.POINTER(FL_POPUP)],
        """int fl_popup_delete(FL_POPUP * p1)
        """)
def fl_popup_delete(p1):
    """ fl_popup_delete(p1) -> num.
    """

    retval = _fl_popup_delete(p1)
    return retval


_fl_popup_entry_delete = cfuncproto(
        so_libforms, "fl_popup_entry_delete",
        cty.c_int, [cty.POINTER(FL_POPUP_ENTRY)],
        """int fl_popup_entry_delete(FL_POPUP_ENTRY * p1)
        """)
def fl_popup_entry_delete(p1):
    """ fl_popup_entry_delete(p1) -> num.
    """

    retval = _fl_popup_entry_delete(p1)
    return retval


_fl_popup_do = cfuncproto(
        so_libforms, "fl_popup_do",
        cty.POINTER(FL_POPUP_RETURN), [cty.POINTER(FL_POPUP)],
        """FL_POPUP_RETURN * fl_popup_do(FL_POPUP * p1)
        """)
def fl_popup_do(p1):
    """ fl_popup_do(p1) -> popup_return
    """

    retval = _fl_popup_do(p1)
    return retval


_fl_popup_set_position = cfuncproto(
        so_libforms, "fl_popup_set_position",
        None, [cty.POINTER(FL_POPUP), cty.c_int, cty.c_int],
        """void fl_popup_set_position(FL_POPUP * p1, int p2, int p3)
        """)
def fl_popup_set_position(p1, p2, p3):
    """ fl_popup_set_position(p1, p2, p3)
    """

    _fl_popup_set_position(p1, p2, p3)


_fl_popup_get_policy = cfuncproto(
        so_libforms, "fl_popup_get_policy",
        cty.c_int, [cty.POINTER(FL_POPUP)],
        """int fl_popup_get_policy(FL_POPUP * p1)
        """)
def fl_popup_get_policy(p1):
    """ fl_popup_get_policy(p1) -> num.
    """

    retval = _fl_popup_get_policy(p1)
    return retval


_fl_popup_set_policy = cfuncproto(
        so_libforms, "fl_popup_set_policy",
        cty.c_int, [cty.POINTER(FL_POPUP), cty.c_int],
        """int fl_popup_set_policy(FL_POPUP * p1, int p2)
        """)
def fl_popup_set_policy(p1, p2):
    """ fl_popup_set_policy(p1, p2) -> num.
    """

    retval = _fl_popup_set_policy(p1, p2)
    return retval


_fl_popup_set_callback = cfuncproto(
        so_libforms, "fl_popup_set_callback",
        FL_POPUP_CB, [cty.POINTER(FL_POPUP), FL_POPUP_CB],
        """FL_POPUP_CB fl_popup_set_callback(FL_POPUP * p1, FL_POPUP_CB p2)
        """)
def fl_popup_set_callback(p1, py_cb):
    """ fl_popup_set_callback(p1, py_cb) -> popup callback
    """

    c_cb = FL_POPUP_CB(py_cb)
    _cfunc_refs[get_rand_dictkey()] = c_cb
    retval = _fl_popup_set_callback(p1, c_cb)
    return retval


_fl_popup_get_title_font = cfuncproto(
        so_libforms, "fl_popup_get_title_font",
        None, [cty.POINTER(FL_POPUP), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """void fl_popup_get_title_font(FL_POPUP * p1, int * p2, int * p3)
        """)
def fl_popup_get_title_font(p1, p2, p3):
    """ fl_popup_get_title_font(p1, p2, p3)
    """

    _fl_popup_get_title_font(p1, p2, p3)


_fl_popup_set_title_font = cfuncproto(
        so_libforms, "fl_popup_set_title_font",
        None, [cty.POINTER(FL_POPUP), cty.c_int, cty.c_int],
        """void fl_popup_set_title_font(FL_POPUP * p1, int p2, int p3)
        """)
def fl_popup_set_title_font(p1, p2, p3):
    """ fl_popup_set_title_font(p1, p2, p3)
    """

    _fl_popup_set_title_font(p1, p2, p3)


_fl_popup_entry_get_font = cfuncproto(
        so_libforms, "fl_popup_entry_get_font",
        None, [cty.POINTER(FL_POPUP), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """void fl_popup_entry_get_font(FL_POPUP * p1, int * p2, int * p3)
        """)
def fl_popup_entry_get_font(p1, p2, p3):
    """ fl_popup_entry_get_font(p1, p2, p3)
    """

    _fl_popup_entry_get_font(p1, p2, p3)

_fl_popup_entry_set_font = cfuncproto(
        so_libforms, "fl_popup_entry_set_font",
        None, [cty.POINTER(FL_POPUP), cty.c_int, cty.c_int],
        """void fl_popup_entry_set_font(FL_POPUP * p1, int p2, int p3)
        """)
def fl_popup_entry_set_font(p1, p2, p3):
    """ fl_popup_entry_set_font(p1, p2, p3)
    """

    _fl_popup_entry_set_font(p1, p2, p3)


_fl_popup_get_bw = cfuncproto(
        so_libforms, "fl_popup_get_bw",
        cty.c_int, [cty.POINTER(FL_POPUP)],
        """int fl_popup_get_bw(FL_POPUP * p1)
        """)
def fl_popup_get_bw(p1):
    """ fl_popup_get_bw(p1) -> num.
    """

    retval = _fl_popup_get_bw(p1)
    return retval


_fl_popup_set_bw = cfuncproto(
        so_libforms, "fl_popup_set_bw",
        cty.c_int, [cty.POINTER(FL_POPUP), cty.c_int],
        """int fl_popup_set_bw(FL_POPUP * p1, int p2)
        """)
def fl_popup_set_bw(p1, p2):
    """ fl_popup_set_bw(p1, p2) -> num.
    """

    retval = _fl_popup_set_bw(p1, p2)
    return retval


_fl_popup_get_color = cfuncproto(
        so_libforms, "fl_popup_get_color",
        FL_COLOR, [cty.POINTER(FL_POPUP), cty.c_int],
        """FL_COLOR fl_popup_get_color(FL_POPUP * p1, int p2)
        """)
def fl_popup_get_color(p1, p2):
    """ fl_popup_get_color(p1, p2) -> color
    """

    retval = _fl_popup_get_color(p1, p2)
    return retval


_fl_popup_set_color = cfuncproto(
        so_libforms, "fl_popup_set_color",
        FL_COLOR, [cty.POINTER(FL_POPUP), cty.c_int, FL_COLOR],
        """FL_COLOR fl_popup_set_color(FL_POPUP * p1, int p2, FL_COLOR p3)
        """)
def fl_popup_set_color(p1, p2, p3):
    """ fl_popup_set_color(p1, p2, p3) -> color
    """

    retval = _fl_popup_set_color(p1, p2, p3)
    return retval


_fl_popup_set_cursor = cfuncproto(
        so_libforms, "fl_popup_set_cursor",
        None, [cty.POINTER(FL_POPUP), cty.c_int],
        """void fl_popup_set_cursor(FL_POPUP * p1, int p2)
        """)
def fl_popup_set_cursor(p1, p2):
    """ fl_popup_set_cursor(p1, p2)
    """

    _fl_popup_set_cursor(p1, p2)


_fl_popup_get_title = cfuncproto(
        so_libforms, "fl_popup_get_title",
        STRING, [cty.POINTER(FL_POPUP)],
        """const char * fl_popup_get_title(FL_POPUP * p1)
        """)
def fl_popup_get_title(p1):
    """ fl_popup_get_title(p1) -> title string
    """

    retval = _fl_popup_get_title(p1)
    return retval


_fl_popup_set_title = cfuncproto(
        so_libforms, "fl_popup_set_title",
        cty.POINTER(FL_POPUP), [cty.POINTER(FL_POPUP), STRING],
        """FL_POPUP * fl_popup_set_title(FL_POPUP * p1, const char * p2)
        """)
def fl_popup_set_title(p1, p2):
    """ fl_popup_set_title(p1, p2) -> popup
    """

    retval = _fl_popup_set_title(p1, p2)
    return retval


_fl_popup_entry_set_callback = cfuncproto(
        so_libforms, "fl_popup_entry_set_callback",
        FL_POPUP_CB, [cty.POINTER(FL_POPUP_ENTRY), FL_POPUP_CB],
        """FL_POPUP_CB fl_popup_entry_set_callback(FL_POPUP_ENTRY * p1, FL_POPUP_CB p2)
        """)
def fl_popup_entry_set_callback(p1, py_pucb):
    """ fl_popup_entry_set_callback(p1, py_pucb) -> popup_callback
    """

    c_pucb = FL_POPUP_CB(py_pucb)
    _cfunc_refs[get_rand_dictkey()] = c_pucb
    retval = _fl_popup_entry_set_callback(p1, c_pucb)
    return retval


_fl_popup_entry_set_enter_callback = cfuncproto(
        so_libforms, "fl_popup_entry_set_enter_callback",
        FL_POPUP_CB, [cty.POINTER(FL_POPUP_ENTRY), FL_POPUP_CB],
        """FL_POPUP_CB fl_popup_entry_set_enter_callback(FL_POPUP_ENTRY * p1, FL_POPUP_CB p2)
        """)
def fl_popup_entry_set_enter_callback(p1, py_pucb):
    """ fl_popup_entry_set_enter_callback(p1, py_pucb) -> popup_callback
    """

    c_pucb = FL_POPUP_CB(py_pucb)
    _cfunc_refs[get_rand_dictkey()] = c_pucb
    retval = _fl_popup_entry_set_enter_callback(p1, c_pucb)
    return retval


_fl_popup_entry_set_leave_callback = cfuncproto(
        so_libforms, "fl_popup_entry_set_leave_callback",
        FL_POPUP_CB, [cty.POINTER(FL_POPUP_ENTRY), FL_POPUP_CB],
        """FL_POPUP_CB fl_popup_entry_set_leave_callback(FL_POPUP_ENTRY * p1, FL_POPUP_CB p2)
        """)
def fl_popup_entry_set_leave_callback(p1, py_pucb):
    """ fl_popup_entry_set_leave_callback(p1, py_pucb) -> popup_callback
    """

    c_pucb = FL_POPUP_CB(py_pucb)
    _cfunc_refs[get_rand_dictkey()] = c_pucb
    retval = _fl_popup_entry_set_leave_callback(p1, c_pucb)
    return retval


_fl_popup_entry_get_state = cfuncproto(
        so_libforms, "fl_popup_entry_get_state",
        cty.c_uint, [cty.POINTER(FL_POPUP_ENTRY)],
        """unsigned int fl_popup_entry_get_state(FL_POPUP_ENTRY * p1)
        """)
def fl_popup_entry_get_state(p1):
    """ fl_popup_entry_get_state(p1) -> state num.
    """

    retval = _fl_popup_entry_get_state(p1)
    return retval


_fl_popup_entry_set_state = cfuncproto(
        so_libforms, "fl_popup_entry_set_state",
        cty.c_uint, [cty.POINTER(FL_POPUP_ENTRY), cty.c_uint],
        """unsigned int fl_popup_entry_set_state(FL_POPUP_ENTRY * p1, unsigned int p2)
        """)
def fl_popup_entry_set_state(p1, p2):
    """ fl_popup_entry_set_state(p1, p2) -> state num.
    """

    retval = _fl_popup_entry_set_state(p1, p2)
    return retval


_fl_popup_entry_clear_state = cfuncproto(
        so_libforms, "fl_popup_entry_clear_state",
        cty.c_uint, [cty.POINTER(FL_POPUP_ENTRY), cty.c_uint],
        """)unsigned int fl_popup_entry_clear_state(FL_POPUP_ENTRY * p1, unsigned int p2)
        """)
def fl_popup_entry_clear_state(p1, p2):
    """ fl_popup_entry_clear_state(p1, p2) -> state num.
    """

    retval = _fl_popup_entry_clear_state(p1, p2)
    return retval


_fl_popup_entry_raise_state = cfuncproto(
        so_libforms, "fl_popup_entry_raise_state",
        cty.c_uint, [cty.POINTER(FL_POPUP_ENTRY), cty.c_uint],
        """)unsigned int fl_popup_entry_raise_state(FL_POPUP_ENTRY * p1, unsigned int p2)
        """)
def fl_popup_entry_raise_state(p1, p2):
    """ fl_popup_entry_raise_state(p1, p2) -> state num.
    """

    retval = _fl_popup_entry_raise_state(p1, p2)
    return retval


_fl_popup_entry_toggle_state = cfuncproto(
        so_libforms, "fl_popup_entry_toggle_state",
        cty.c_uint, [cty.POINTER(FL_POPUP_ENTRY), cty.c_uint],
        """)unsigned int fl_popup_entry_toggle_state(FL_POPUP_ENTRY * p1, unsigned int p2)
        """)
def fl_popup_entry_toggle_state(p1, p2):
    """ fl_popup_entry_toggle_state(p1, p2) -> num.
    """

    retval = _fl_popup_entry_toggle_state(p1, p2)
    return retval


_fl_popup_entry_set_text = cfuncproto(
        so_libforms, "fl_popup_entry_set_text",
        cty.c_int, [cty.POINTER(FL_POPUP_ENTRY), STRING],
        """int fl_popup_entry_set_text(FL_POPUP_ENTRY * p1, const char * p2)
        """)
def fl_popup_entry_set_text(p1, p2):
    """ fl_popup_entry_set_text(p1, p2) -> num.
    """

    retval = _fl_popup_entry_set_text(p1, p2)
    return retval


_fl_popup_entry_set_shortcut = cfuncproto(
        so_libforms, "fl_popup_entry_set_shortcut",
        None, [cty.POINTER(FL_POPUP_ENTRY), STRING],
        """void fl_popup_entry_set_shortcut(FL_POPUP_ENTRY * p1, const char * p2)
        """)
def fl_popup_entry_set_shortcut(p1, p2):
    """ fl_popup_entry_set_shortcut(p1, p2)
    """

    _fl_popup_entry_set_shortcut(p1, p2)


_fl_popup_entry_set_value = cfuncproto(
        so_libforms, "fl_popup_entry_set_value",
        cty.c_long, [cty.POINTER(FL_POPUP_ENTRY), cty.c_long],
        """)long int fl_popup_entry_set_value(FL_POPUP_ENTRY * p1, long int p2)
        """)
def fl_popup_entry_set_value(p1, p2):
    """ fl_popup_entry_set_value(p1, p2) -> num.
    """

    retval = _fl_popup_entry_set_value(p1, p2)
    return retval


_fl_popup_entry_set_user_data = cfuncproto(
        so_libforms, "fl_popup_entry_set_user_data",
        cty.c_void_p, [cty.POINTER(FL_POPUP_ENTRY), cty.c_void_p],
        """void * fl_popup_entry_set_user_data(FL_POPUP_ENTRY * p1, void * p2)
        """)
def fl_popup_entry_set_user_data(p1, p2):
    """ fl_popup_entry_set_user_data(p1, p2) -> ?
    """

    retval = _fl_popup_entry_set_user_data(p1, p2)
    return retval


_fl_popup_entry_get_by_position = cfuncproto(
        so_libforms, "fl_popup_entry_get_by_position",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_POPUP), cty.c_int],
        """FL_POPUP_ENTRY * fl_popup_entry_get_by_position(FL_POPUP * p1, int p2)
        """)
def fl_popup_entry_get_by_position(p1, p2):
    """ fl_popup_entry_get_by_position(p1, p2) -> popup_entry
    """

    retval = _fl_popup_entry_get_by_position(p1, p2)
    return retval


_fl_popup_entry_get_by_value = cfuncproto(
        so_libforms, "fl_popup_entry_get_by_value",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_POPUP), cty.c_long],
        """FL_POPUP_ENTRY * fl_popup_entry_get_by_value(FL_POPUP * p1, long int p2)
        """)
def fl_popup_entry_get_by_value(p1, p2):
    """ fl_popup_entry_get_by_value(p1, p2) -> popup_entry
    """

    retval = _fl_popup_entry_get_by_value(p1, p2)
    return retval


_fl_popup_entry_get_by_user_data = cfuncproto(
        so_libforms, "fl_popup_entry_get_by_user_data",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_POPUP), cty.c_void_p],
        """FL_POPUP_ENTRY * fl_popup_entry_get_by_user_data(FL_POPUP * p1, void * p2)
        """)
def fl_popup_entry_get_by_user_data(p1, p2):
    """ fl_popup_entry_get_by_user_data(p1, p2) -> popup_entry
    """

    retval = _fl_popup_entry_get_by_user_data(p1, p2)
    return retval


_fl_popup_entry_get_by_text = cfuncproto(
        so_libforms, "fl_popup_entry_get_by_text",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_POPUP), STRING],
        """FL_POPUP_ENTRY * fl_popup_entry_get_by_text(FL_POPUP * p1, const char * p2)
        """)
def fl_popup_entry_get_by_text(p1, p2):
    """ fl_popup_entry_get_by_text(p1, p2) -> popup_entry
    """

    retval = _fl_popup_entry_get_by_text(p1, p2)
    return retval


_fl_popup_entry_get_by_label = cfuncproto(
        so_libforms, "fl_popup_entry_get_by_label",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_POPUP), STRING],
        """FL_POPUP_ENTRY * fl_popup_entry_get_by_label(FL_POPUP * p1, const char * p2)
        """)
def fl_popup_entry_get_by_label(p1, p2):
    """ fl_popup_entry_get_by_label(p1, p2) -> popup_entry
    """

    retval = _fl_popup_entry_get_by_label(p1, p2)
    return retval


_fl_popup_entry_get_group = cfuncproto(
        so_libforms, "fl_popup_entry_get_group",
        cty.c_int, [cty.POINTER(FL_POPUP_ENTRY)],
        """int fl_popup_entry_get_group(FL_POPUP_ENTRY * p1)
        """)
def fl_popup_entry_get_group(p1):
    """ fl_popup_entry_get_group(p1) -> num.
    """

    retval = _fl_popup_entry_get_group(p1)
    return retval


_fl_popup_entry_set_group = cfuncproto(
        so_libforms, "fl_popup_entry_set_group",
        cty.c_int, [cty.POINTER(FL_POPUP_ENTRY), cty.c_int],
        """int fl_popup_entry_set_group(FL_POPUP_ENTRY * p1, int p2)
        """)
def fl_popup_entry_set_group(p1, p2):
    """ fl_popup_entry_set_group(p1, p2) -> num.
    """

    retval = _fl_popup_entry_set_group(p1, p2)
    return retval


_fl_popup_entry_get_subpopup = cfuncproto(
        so_libforms, "fl_popup_entry_get_subpopup",
        cty.POINTER(FL_POPUP), [cty.POINTER(FL_POPUP_ENTRY)],
        """FL_POPUP * fl_popup_entry_get_subpopup(FL_POPUP_ENTRY * p1)
        """)
def fl_popup_entry_get_subpopup(p1):
    """ fl_popup_entry_get_subpopup(p1) -> popup
    """

    retval = _fl_popup_entry_get_subpopup(p1)
    return retval


_fl_popup_entry_set_subpopup = cfuncproto(
        so_libforms, "fl_popup_entry_set_subpopup",
        cty.POINTER(FL_POPUP), [cty.POINTER(FL_POPUP_ENTRY), cty.POINTER(FL_POPUP)],
        """FL_POPUP * fl_popup_entry_set_subpopup(FL_POPUP_ENTRY * p1, FL_POPUP * p2)
        """)
def fl_popup_entry_set_subpopup(p1, p2):
    """ fl_popup_entry_set_subpopup(p1, p2) -> popup
    """

    retval = _fl_popup_entry_set_subpopup(p1, p2)
    return retval


_fl_popup_get_size = cfuncproto(
        so_libforms, "fl_popup_get_size",
        cty.c_int, [cty.POINTER(FL_POPUP), cty.POINTER(cty.c_uint),
        cty.POINTER(cty.c_uint)],
        """int fl_popup_get_size(FL_POPUP * p1, unsigned int * p2, unsigned int * p3)
        """)
def fl_popup_get_size(p1, p2, p3):
    """ fl_popup_get_size(p1, p2, p3) -> size num.
    """

    retval = _fl_popup_get_size(p1, p2, p3)
    return retval


_fl_popup_get_min_width = cfuncproto(
        so_libforms, "fl_popup_get_min_width",
        cty.c_int, [cty.POINTER(FL_POPUP)],
        """int fl_popup_get_min_width(FL_POPUP * p1)
        """)
def fl_popup_get_min_width(p1):
    """ fl_popup_get_min_width(p1) -> width num.
    """

    retval = _fl_popup_get_min_width(p1)
    return retval


_fl_popup_set_min_width = cfuncproto(
        so_libforms, "fl_popup_set_min_width",
        cty.c_int, [cty.POINTER(FL_POPUP), cty.c_int],
        """int fl_popup_set_min_width(FL_POPUP * p1, int p2)
        """)
def fl_popup_set_min_width(p1, p2):
    """ fl_popup_set_min_width(p1, p2) -> width num.
    """

    retval = _fl_popup_set_min_width(p1, p2)
    return retval


#######################
# forms.h (bitmap.h)
# Object Class: Bitmap
#######################

FL_NORMAL_BITMAP = 0

# Defaults
FL_BITMAP_BOXTYPE = FL_NO_BOX
FL_BITMAP_COL1 = FL_COL1            # background of bitmap
FL_BITMAP_COL2 = FL_COL1            # not used currently
FL_BITMAP_LCOL = FL_LCOL            # foreground of bitmap
FL_BITMAP_ALIGN = FL_ALIGN_BOTTOM


# Routines

_fl_create_bitmap = cfuncproto(
        so_libforms, "fl_create_bitmap",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_bitmap(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_bitmap(bitmaptype, x, y, w, h, label):
    """ fl_create_bitmap(bitmaptype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_bitmap(bitmaptype, x, y, w, h, label)
    return retval


_fl_add_bitmap = cfuncproto(
        so_libforms, "fl_add_bitmap",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_bitmap(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_bitmap(bitmaptype, x, y, w, h, label):
    """ fl_add_bitmap(bitmaptype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_bitmap(bitmaptype, x, y, w, h, label)
    return retval


_fl_set_bitmap_data = cfuncproto(
        so_libforms, "fl_set_bitmap_data",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int,
        cty.POINTER(cty.c_ubyte)],
        """void fl_set_bitmap_data(FL_OBJECT * ob, int w, int h,
           unsigned char * data)
        """)
def fl_set_bitmap_data(pObject, w, h, data):
    """ fl_set_bitmap_data(pObject, w, h, data)
    """

    _fl_set_bitmap_data(pObject, w, h, data)


_fl_set_bitmap_file = cfuncproto(
        so_libforms, "fl_set_bitmap_file",
        None, [cty.POINTER(FL_OBJECT), STRING],
        """void fl_set_bitmap_file(FL_OBJECT * ob, const char * fname)
        """)
def fl_set_bitmap_file(pObject, fname):
    """ fl_set_bitmap_file(pObject, fname)
    """

    _fl_set_bitmap_file(pObject, fname)


_fl_read_bitmapfile = cfuncproto(
        so_libforms, "fl_read_bitmapfile",
        Pixmap, [Window, STRING, cty.POINTER(cty.c_uint),
        cty.POINTER(cty.c_uint), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """Pixmap fl_read_bitmapfile(Window win, const char * file,
           unsigned int * w, unsigned int * h, int * hotx, int * hoty)
        """)
def fl_read_bitmapfile(win, file, w, h, hotx, hoty):
    """ fl_read_bitmapfile(win, file, w, h, hotx, hoty) -> pixmap
    """

    retval = _fl_read_bitmapfile(win, file, w, h, hotx, hoty)


Drawable = XID    # cty.c_ulong

# /usr/include/X11/Xlib.h 1621
_XCreateBitmapFromData = cfuncproto(
        so_libX11, "XCreateBitmapFromData",
        Pixmap, [cty.POINTER(Display), Drawable, STRING, cty.c_uint,
        cty.c_uint],
        """Pixmap XCreateBitmapFromData(Display * p1, Drawable p2,
           const char * p3, unsigned int p4, unsigned int p5)
        """)
def XCreateBitmapFromData(pDisplay, p2, p3, p4, p5):
    """ XCreateBitmapFromData(pDisplay, p2, p3, p4, p5) -> pixmap
    """

    retval = _XCreateBitmapFromData(pDisplay, p2, p3, p4, p5)
    return retval


def fl_create_from_bitmapdata(win, data, w, h):
    return XCreateBitmapFromData(fl_get_display(), win, data, w, h)


# for compatibility
fl_set_bitmap_datafile = fl_set_bitmap_file

# PIXMAP stuff

FL_NORMAL_PIXMAP = 0

_fl_create_pixmap = cfuncproto(
        so_libforms, "fl_create_pixmap",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_pixmap(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_pixmap(pixmaptype, x, y, w, h, label):
    """ fl_create_pixmap(pixmaptype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_pixmap(pixmaptype, x, y, w, h, label)
    return retval


_fl_add_pixmap = cfuncproto(
        so_libforms, "fl_add_pixmap",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_pixmap(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_pixmap(pixmaptype, x, y, w, h, label):
    """ fl_add_pixmap(pixmaptype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_pixmap(pixmaptype, x, y, w, h, label)
    return retval


_fl_set_pixmap_data = cfuncproto(
        so_libforms, "fl_set_pixmap_data",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(STRING)],
        """void fl_set_pixmap_data(FL_OBJECT * ob, char * * bits)
        """)

def fl_set_pixmap_data(pObject, bits):
    """ fl_set_pixmap_data(pObject, bits)
    """

    _fl_set_pixmap_data(pObject, bits)


_fl_set_pixmap_file = cfuncproto(
        so_libforms, "fl_set_pixmap_file",
        None, [cty.POINTER(FL_OBJECT), STRING],
        """void fl_set_pixmap_file(FL_OBJECT * ob, const char * fname)
        """)
def fl_set_pixmap_file(pObject, fname):
    """ fl_set_pixmap_file(pObject, fname)
    """

    _fl_set_pixmap_file(pObject, fname)


_fl_set_pixmap_align = cfuncproto(
        so_libforms, "fl_set_pixmap_align",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int, cty.c_int],
        """void fl_set_pixmap_align(FL_OBJECT * ob, int align, int xmargin,
           int ymargin)
        """)
def fl_set_pixmap_align(pObject, align, xmargin, ymargin):
    """ fl_set_pixmap_align(pObject, align, xmargin, ymargin)
    """

    _fl_set_pixmap_align(pObject, align, xmargin, ymargin)


_fl_set_pixmap_pixmap = cfuncproto(
        so_libforms, "fl_set_pixmap_pixmap",
        None, [cty.POINTER(FL_OBJECT), Pixmap, Pixmap],
        """void fl_set_pixmap_pixmap(FL_OBJECT * ob, Pixmap id, Pixmap mask)
        """)
def fl_set_pixmap_pixmap(pObject, idnum, mask):
    """ fl_set_pixmap_pixmap(pObject, idnum, mask)
    """

    _fl_set_pixmap_pixmap(pObject, idnum, mask)


_fl_set_pixmap_colorcloseness = cfuncproto(
        so_libforms, "fl_set_pixmap_colorcloseness",
        None, [cty.c_int, cty.c_int, cty.c_int],
        """void fl_set_pixmap_colorcloseness(int red, int green, int blue)
        """)
def fl_set_pixmap_colorcloseness(red, green, blue):
    """ fl_set_pixmap_colorcloseness(red, green, blue)
    """

    _fl_set_pixmap_colorcloseness(red, green, blue)


_fl_free_pixmap_pixmap = cfuncproto(
        so_libforms, "fl_free_pixmap_pixmap",
        None, [cty.POINTER(FL_OBJECT)],
        """void fl_free_pixmap_pixmap(FL_OBJECT * ob)
        """)
def fl_free_pixmap_pixmap(pObject):
    """ fl_free_pixmap_pixmap(pObject)
    """

    _fl_free_pixmap_pixmap(pObject)


_fl_get_pixmap_pixmap = cfuncproto(
        so_libforms, "fl_get_pixmap_pixmap",
        Pixmap, [cty.POINTER(FL_OBJECT), cty.POINTER(Pixmap),
        cty.POINTER(Pixmap)],
        """Pixmap fl_get_pixmap_pixmap(FL_OBJECT * ob, Pixmap * p, Pixmap * m)
        """)
def fl_get_pixmap_pixmap(pObject, p, m):
    """ fl_get_pixmap_pixmap(pObject, p, m) -> pixmap
    """

    retval = _fl_get_pixmap_pixmap(pObject, p, m)
    return retval


_fl_read_pixmapfile = cfuncproto(
        so_libforms, "fl_read_pixmapfile",
        Pixmap, [Window, STRING, cty.POINTER(cty.c_uint),
        cty.POINTER(cty.c_uint), cty.POINTER(Pixmap),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int), FL_COLOR],
        """Pixmap fl_read_pixmapfile(Window win, const char * file,
           unsigned int * w, unsigned int * h, Pixmap * shape_mask,
           int * hotx, int * hoty, FL_COLOR tran)
        """)
def fl_read_pixmapfile(win, filename, w, h, shape_mask, hotx, hoty, tran):
    """ fl_read_pixmapfile(win, filename, w, h, shape_mask, hotx, hoty, tran) -> pixmap
    """

    retval = _fl_read_pixmapfile(win, filename, w, h, shape_mask, hotx, hoty, tran)
    return retval


_fl_create_from_pixmapdata = cfuncproto(
        so_libforms, "fl_create_from_pixmapdata",
        Pixmap, [Window, cty.POINTER(STRING), cty.POINTER(cty.c_uint),
        cty.POINTER(cty.c_uint), cty.POINTER(Pixmap),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int), FL_COLOR],
        """Pixmap fl_create_from_pixmapdata(Window win, char * * data,
        unsigned int * w, unsigned int * h, Pixmap * sm, int * hotx,
        int * hoty, FL_COLOR tran)
        """)
def fl_create_from_pixmapdata(win, data, w, h, sm, hotx, hoty, tran):
    """ fl_create_from_pixmapdata(win, data, w, h, sm, hotx, hoty, tran) -> pixmap
    """

    retval = _fl_create_from_pixmapdata(win, data, w, h, sm, hotx, hoty, tran)
    return retval


# /usr/include/X11/Xlib.h 2570
_XFreePixmap = cfuncproto(
        so_libX11, "XFreePixmap",
        cty.c_int, [cty.POINTER(Display), Pixmap],
        """int XFreePixmap(Display * p1, Pixmap p2)
        """)
def XFreePixmap(pDisplay, pixmap):
    """ XFreePixmap(pDisplay, pixmap) -> num.
    """

    retval = _XFreePixmap(pDisplay, pixmap)
    return retval


def fl_free_pixmap(idnum):
    if (idnum != None):
        return XFreePixmap(fl_display, idnum)
    else:
        return None         # UNSURE


##################
# forms.h (box.h)
##################

_fl_create_box = cfuncproto(
        so_libforms, "fl_create_box",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_box(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_box(boxtype, x, y, w, h, label):
    """ fl_create_box(boxtype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_box(boxtype, x, y, w, h, label)
    return retval


_fl_add_box = cfuncproto(
        so_libforms, "fl_add_box",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_box(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_box(boxtype, x, y, w, h, label):
    """ fl_add_box(boxtype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_box(boxtype, x, y, w, h, label)
    return retval


#######################
# forms.h (browser.h)
# Object class Browser
#######################

# values for enumeration 'FL_BROWSER_TYPE'
FL_BROWSER_TYPE = cty.c_int # enum
FL_NORMAL_BROWSER = 0
FL_SELECT_BROWSER = 1
FL_HOLD_BROWSER = 2
FL_MULTI_BROWSER = 3

# Defaults
FL_BROWSER_BOXTYPE = FL_DOWN_BOX
FL_BROWSER_COL1 = FL_COL1
FL_BROWSER_COL2 = FL_YELLOW
FL_BROWSER_LCOL = FL_LCOL
FL_BROWSER_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_BROWSER_SLCOL = FL_COL1
FL_BROWSER_FONTSIZE = FL_SMALL_FONT

# This exists only for backward compatibility and isn't used anymore!
FL_BROWSER_LINELENGTH = 2048


# Routines

_fl_create_browser = cfuncproto(
        so_libforms, "fl_create_browser",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_browser(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_browser(browsertype, x, y, w, h, label):
    """ fl_create_browser(browsertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_browser(browsertype, x, y, w, h, label)
    return retval


_fl_add_browser = cfuncproto(
        so_libforms, "fl_add_browser",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_browser(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_browser(browsertype, x, y, w, h, label):
    """ fl_add_browser(browsertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_browser(browsertype, x, y, w, h, label)
    return retval


_fl_clear_browser = cfuncproto(
        so_libforms, "fl_clear_browser",
        None, [cty.POINTER(FL_OBJECT)],
        """void fl_clear_browser(FL_OBJECT * ob)
        """)
def fl_clear_browser(pObject):
    """ fl_clear_browser(pObject)
    """

    _fl_clear_browser(pObject)


_fl_add_browser_line = cfuncproto(
        so_libforms, "fl_add_browser_line",
        None, [cty.POINTER(FL_OBJECT), STRING],
        """void fl_add_browser_line(FL_OBJECT * ob, const char * newtext)
        """)
def fl_add_browser_line(pObject, newtext):
    """ fl_add_browser_line(pObject, newtext)
    """

    _fl_add_browser_line(pObject, newtext)


_fl_addto_browser = cfuncproto(
        so_libforms, "fl_addto_browser",
        None, [cty.POINTER(FL_OBJECT), STRING],
        """void fl_addto_browser(FL_OBJECT * ob, const char * newtext)
        """)
def fl_addto_browser(pObject, newtext):
    """ fl_addto_browser(pObject, newtext)
    """

    _fl_addto_browser(pObject, newtext)


_fl_addto_browser_chars = cfuncproto(
        so_libforms, "fl_addto_browser_chars",
        None, [cty.POINTER(FL_OBJECT), STRING],
        """void fl_addto_browser_chars(FL_OBJECT * ob, const char * str)
        """)
def fl_addto_browser_chars(pObject, browsertext):
    """ fl_addto_browser_chars(pObject, browsertext)
    """

    _fl_addto_browser_chars(pObject, browsertext)


fl_append_browser = fl_addto_browser_chars


_fl_insert_browser_line = cfuncproto(
        so_libforms, "fl_insert_browser_line",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, STRING],
        """void fl_insert_browser_line(FL_OBJECT * ob, int linenumb,
           const char * newtext)
        """)
def fl_insert_browser_line(pObject, linenumb, newtext):
    """ fl_insert_browser_line(pObject, linenumb, newtext)
    """

    _fl_insert_browser_line(pObject, linenumb, newtext)


_fl_delete_browser_line = cfuncproto(
        so_libforms, "fl_delete_browser_line",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_delete_browser_line(FL_OBJECT * ob, int linenumb)
        """)
def fl_delete_browser_line(pObject, linenumb):
    """ fl_delete_browser_line(pObject, linenumb)
    """

    _fl_delete_browser_line(pObject, linenumb)


_fl_replace_browser_line = cfuncproto(
        so_libforms, "fl_replace_browser_line",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, STRING],
        """void fl_replace_browser_line(FL_OBJECT * ob, int linenumb,
           const char * newtext)
        """)
def fl_replace_browser_line(pObject, linenumb, newtext):
    """ fl_replace_browser_line(pObject, linenumb, newtext)
    """

    _fl_replace_browser_line(pObject, linenumb, newtext)


_fl_get_browser_line = cfuncproto(
        so_libforms, "fl_get_browser_line",
        STRING, [cty.POINTER(FL_OBJECT), cty.c_int],
        """const char * fl_get_browser_line(FL_OBJECT * ob, int linenumb)
        """)
def fl_get_browser_line(pObject, linenumb):
    """ fl_get_browser_line(pObject, linenumb) -> line string
    """

    retval = _fl_get_browser_line(pObject, linenumb)
    return retval


_fl_load_browser = cfuncproto(
        so_libforms, "fl_load_browser",
        cty.c_int, [cty.POINTER(FL_OBJECT), STRING],
        """int fl_load_browser(FL_OBJECT * ob, const char * filename)
        """)
def fl_load_browser(pObject, filename):
    """ fl_load_browser(pObject, filename) -> num.
    """

    retval = _fl_load_browser(pObject, filename)
    return retval


_fl_select_browser_line = cfuncproto(
        so_libforms, "fl_select_browser_line",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_select_browser_line(FL_OBJECT * ob, int line)
        """)
def fl_select_browser_line(pObject, line):
    """ fl_select_browser_line(pObject, line)
    """

    _fl_select_browser_line(pObject, line)


_fl_deselect_browser_line = cfuncproto(
        so_libforms, "fl_deselect_browser_line",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_deselect_browser_line(FL_OBJECT * ob, int line)
        """)
def fl_deselect_browser_line(pObject, line):
    """ fl_deselect_browser_line(pObject, line)
    """

    _fl_deselect_browser_line(pObject, line)


_fl_deselect_browser = cfuncproto(
        so_libforms, "fl_deselect_browser",
        None, [cty.POINTER(FL_OBJECT)],
        """void fl_deselect_browser(FL_OBJECT * ob)
        """)
def fl_deselect_browser(pObject):
    """ fl_deselect_browser(pObject)
    """

    _fl_deselect_browser(pObject)


_fl_isselected_browser_line = cfuncproto(
        so_libforms, "fl_isselected_browser_line",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_isselected_browser_line(FL_OBJECT * ob, int line)
        """)
def fl_isselected_browser_line(pObject, line):
    """ fl_isselected_browser_line(pObject, line) -> num.
    """

    retval = _fl_isselected_browser_line(pObject, line)
    return retval


_fl_get_browser_topline = cfuncproto(
        so_libforms, "fl_get_browser_topline",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_browser_topline(FL_OBJECT * ob)
        """)
def fl_get_browser_topline(pObject):
    """ fl_get_browser_topline(pObject) -> num.
    """

    retval = _fl_get_browser_topline(pObject)
    return retval


_fl_get_browser = cfuncproto(
        so_libforms, "fl_get_browser",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_browser(FL_OBJECT * ob)
        """)
def fl_get_browser(pObject):
    """ fl_get_browser(pObject) -> num.
    """

    retval = _fl_get_browser(pObject)
    return retval


_fl_get_browser_maxline = cfuncproto(
        so_libforms, "fl_get_browser_maxline",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_browser_maxline(FL_OBJECT * ob)
        """)
def fl_get_browser_maxline(pObject):
    """ fl_get_browser_maxline(pObject) -> line num.
    """

    retval = _fl_get_browser_maxline(pObject)
    return retval


_fl_get_browser_screenlines = cfuncproto(
        so_libforms, "fl_get_browser_screenlines",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_browser_screenlines(FL_OBJECT * ob)
        """)
def fl_get_browser_screenlines(pObject):
    """ fl_get_browser_screenlines(pObject) -> lines num.
    """

    retval = _fl_get_browser_screenlines(pObject)
    return retval


_fl_set_browser_topline = cfuncproto(
        so_libforms, "fl_set_browser_topline",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_browser_topline(FL_OBJECT * ob, int topline)
        """)
def fl_set_browser_topline(pObject, topline):
    """ fl_set_browser_topline(pObject, topline)
    """

    _fl_set_browser_topline(pObject, topline)


_fl_set_browser_fontsize = cfuncproto(
        so_libforms, "fl_set_browser_fontsize",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_browser_fontsize(FL_OBJECT * ob, int size)
        """)
def fl_set_browser_fontsize(pObject, size):
    """ fl_set_browser_fontsize(pObject, size)
    """

    _fl_set_browser_fontsize(pObject, size)


_fl_set_browser_fontstyle = cfuncproto(
        so_libforms, "fl_set_browser_fontstyle",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_browser_fontstyle(FL_OBJECT * ob, int style)
        """)
def fl_set_browser_fontstyle(pObject, style):
    """ fl_set_browser_fontstyle(pObject, style)
    """

    _fl_set_browser_fontstyle(pObject, style)


_fl_set_browser_specialkey = cfuncproto(
        so_libforms, "fl_set_browser_specialkey",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_browser_specialkey(FL_OBJECT * ob, int specialkey)
        """)
def fl_set_browser_specialkey(pObject, specialkey):
    """ fl_set_browser_specialkey(pObject, specialkey)
    """

    _fl_set_browser_specialkey(pObject, specialkey)


_fl_set_browser_vscrollbar = cfuncproto(
        so_libforms, "fl_set_browser_vscrollbar",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_browser_vscrollbar(FL_OBJECT * ob, int on)
        """)
def fl_set_browser_vscrollbar(pObject, on):
    """ fl_set_browser_vscrollbar(pObject, on)
    """

    _fl_set_browser_vscrollbar(pObject, on)


_fl_set_browser_hscrollbar = cfuncproto(
        so_libforms, "fl_set_browser_hscrollbar",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_browser_hscrollbar(FL_OBJECT * ob, int on)
        """)
def fl_set_browser_hscrollbar(pObject, on):
    """ fl_set_browser_hscrollbar(pObject, on)
    """

    _fl_set_browser_hscrollbar(pObject, on)


_fl_set_browser_line_selectable = cfuncproto(
        so_libforms, "fl_set_browser_line_selectable",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_browser_line_selectable(FL_OBJECT * ob, int line,
           int flag)
        """)
def fl_set_browser_line_selectable(pObject, line, flag):
    """ fl_set_browser_line_selectable(pObject, line, flag)
    """

    _fl_set_browser_line_selectable(pObject, line, flag)


_fl_get_browser_dimension = cfuncproto(
        so_libforms, "fl_get_browser_dimension",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_Coord),
        cty.POINTER(FL_Coord), cty.POINTER(FL_Coord), cty.POINTER(FL_Coord)],
        """void fl_get_browser_dimension(FL_OBJECT * ob, FL_Coord * x,
           FL_Coord * y, FL_Coord * w, FL_Coord * h)
        """)
def fl_get_browser_dimension(pObject, x, y, w, h):
    """ fl_get_browser_dimension(pObject, x, y, w, h)
    """

    _fl_get_browser_dimension(pObject, x, y, w, h)


_fl_set_browser_dblclick_callback = cfuncproto(
        so_libforms, "fl_set_browser_dblclick_callback",
        None, [cty.POINTER(FL_OBJECT), FL_CALLBACKPTR, cty.c_long],
        """void fl_set_browser_dblclick_callback(FL_OBJECT * ob,
           FL_CALLBACKPTR cb, long int a)
        """)
def fl_set_browser_dblclick_callback(pObject, py_cb, data):
    """ fl_set_browser_dblclick_callback(pObject, py_cb, data)
    """

    c_cb = FL_CALLBACKPTR(py_cb)
    _cfunc_refs[get_rand_dictkey()] = c_cb
    _fl_set_browser_dblclick_callback(pObject, c_cb, data)


_fl_get_browser_xoffset = cfuncproto(
        so_libforms, "fl_get_browser_xoffset",
        FL_Coord, [cty.POINTER(FL_OBJECT)],
        """FL_Coord fl_get_browser_xoffset(FL_OBJECT * ob)
        """)
def fl_get_browser_xoffset(pObject):
    """ fl_get_browser_xoffset(pObject) -> coord num.
    """

    retval = _fl_get_browser_xoffset(pObject)
    return retval


_fl_get_browser_rel_xoffset = cfuncproto(
        so_libforms, "fl_get_browser_rel_xoffset",
        cty.c_double, [cty.POINTER(FL_OBJECT)],
        """double fl_get_browser_rel_xoffset(FL_OBJECT * ob)
        """)
def fl_get_browser_rel_xoffset(pObject):
    """ fl_get_browser_rel_xoffset(pObject) -> num.
    """

    retval = _fl_get_browser_rel_xoffset(pObject)
    return retval


_fl_set_browser_xoffset = cfuncproto(
        so_libforms, "fl_set_browser_xoffset",
        None, [cty.POINTER(FL_OBJECT), FL_Coord],
        """void fl_set_browser_xoffset(FL_OBJECT * ob, FL_Coord npixels)
        """)
def fl_set_browser_xoffset(pObject, npixels):
    """ fl_set_browser_xoffset(pObject, npixels)
    """

    _fl_set_browser_xoffset(pObject, npixels)


_fl_set_browser_rel_xoffset = cfuncproto(
        so_libforms, "fl_set_browser_rel_xoffset",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_browser_rel_xoffset(FL_OBJECT * ob, double val)
        """)
def fl_set_browser_rel_xoffset(pObject, val):
    """ fl_set_browser_rel_xoffset(pObject, val)
    """

    _fl_set_browser_rel_xoffset(pObject, val)


_fl_get_browser_yoffset = cfuncproto(
        so_libforms, "fl_get_browser_yoffset",
        FL_Coord, [cty.POINTER(FL_OBJECT)],
        """FL_Coord fl_get_browser_yoffset(FL_OBJECT * ob)
        """)
def fl_get_browser_yoffset(pObject):
    """ fl_get_browser_yoffset(pObject) -> coord num.
    """

    retval = _fl_get_browser_yoffset(pObject)
    return retval


_fl_get_browser_rel_yoffset = cfuncproto(
        so_libforms, "fl_get_browser_rel_yoffset",
        cty.c_double, [cty.POINTER(FL_OBJECT)],
        """double fl_get_browser_rel_yoffset(FL_OBJECT * ob)
        """)
def fl_get_browser_rel_yoffset(pObject):
    """ fl_get_browser_rel_yoffset(pObject) -> num.
    """

    retval = _fl_get_browser_rel_yoffset(pObject)
    return retval


_fl_set_browser_yoffset = cfuncproto(
        so_libforms, "fl_set_browser_yoffset",
        None, [cty.POINTER(FL_OBJECT), FL_Coord],
        """void fl_set_browser_yoffset(FL_OBJECT * ob, FL_Coord npixels)
        """)
def fl_set_browser_yoffset(pObject, npixels):
    """ fl_set_browser_yoffset(pObject, npixels)
    """

    _fl_set_browser_yoffset(pObject, npixels)


_fl_set_browser_rel_yoffset = cfuncproto(
        so_libforms, "fl_set_browser_rel_yoffset",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_browser_rel_yoffset(FL_OBJECT * ob, double val)
        """)
def fl_set_browser_rel_yoffset(pObject, val):
    """ fl_set_browser_rel_yoffset(pObject, val)
    """

    _fl_set_browser_rel_yoffset(pObject, val)


_fl_set_browser_scrollbarsize = cfuncproto(
        so_libforms, "fl_set_browser_scrollbarsize",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_browser_scrollbarsize(FL_OBJECT * ob, int hh, int vw)
        """)
def fl_set_browser_scrollbarsize(pObject, hh, vw):
    """ fl_set_browser_scrollbarsize(pObject, hh, vw)
    """

    _fl_set_browser_scrollbarsize(pObject, hh, vw)


_fl_show_browser_line = cfuncproto(
        so_libforms, "fl_show_browser_line",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_show_browser_line(FL_OBJECT * ob, int j)
        """)
def fl_show_browser_line(pObject, j):
    """ fl_show_browser_line(pObject, j)
    """

    _fl_show_browser_line(pObject, j)


_fl_set_default_browser_maxlinelength = cfuncproto(
        so_libforms, "fl_set_default_browser_maxlinelength",
        cty.c_int, [cty.c_int],
        """int fl_set_default_browser_maxlinelength(int n):
        """)
def fl_set_default_browser_maxlinelength(n):
    """ fl_set_default_browser_maxlinelength(n) -> length num.
    """

    retval = _fl_set_default_browser_maxlinelength(n)
    return retval


FL_BROWSER_SCROLL_CALLBACK = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT),
                cty.c_int, cty.c_void_p)


_fl_set_browser_hscroll_callback = cfuncproto(
        so_libforms, "fl_set_browser_hscroll_callback",
        None, [cty.POINTER(FL_OBJECT), FL_BROWSER_SCROLL_CALLBACK, cty.c_void_p],
        """void fl_set_browser_hscroll_callback(FL_OBJECT * ob,
           FL_BROWSER_SCROLL_CALLBACK cb, void * data)
        """)
def fl_set_browser_hscroll_callback(pObject, py_cb, data):
    """ fl_set_browser_hscroll_callback(pObject, py_cb, data)
    """

    c_cb = FL_BROWSER_SCROLL_CALLBACK(py_cb)
    _cfunc_refs[get_rand_dictkey()] = c_cb
    _fl_set_browser_hscroll_callback(pObject, c_cb, data)


_fl_set_browser_vscroll_callback = cfuncproto(
        so_libforms, "fl_set_browser_vscroll_callback",
        None, [cty.POINTER(FL_OBJECT), FL_BROWSER_SCROLL_CALLBACK,
        cty.c_void_p],
        """void fl_set_browser_vscroll_callback(FL_OBJECT * ob,
           FL_BROWSER_SCROLL_CALLBACK cb, void * data)
        """)
def fl_set_browser_vscroll_callback(pObject, py_cb, data):
    """ fl_set_browser_vscroll_callback(pObject, py_cb, data)
    """

    c_cb = FL_BROWSER_SCROLL_CALLBACK(py_cb)
    _cfunc_refs[get_rand_dictkey()] = c_cb
    _fl_set_browser_vscroll_callback(pObject, c_cb, data)


_fl_get_browser_line_yoffset = cfuncproto(
        so_libforms, "fl_get_browser_line_yoffset",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_get_browser_line_yoffset(FL_OBJECT * obj, int line)
        """)
def fl_get_browser_line_yoffset(pObject, line):
    """ fl_get_browser_line_yoffset(pObject, line) -> num.
    """

    retval = _fl_get_browser_line_yoffset(pObject, line)
    return retval


_fl_get_browser_hscroll_callback = cfuncproto(
        so_libforms, "fl_get_browser_hscroll_callback",
        FL_BROWSER_SCROLL_CALLBACK, [cty.POINTER(FL_OBJECT)],
        """FL_BROWSER_SCROLL_CALLBACK fl_get_browser_hscroll_callback(
           FL_OBJECT * ob)
        """)
def fl_get_browser_hscroll_callback(pObject):
    """ fl_get_browser_hscroll_callback(pObject) -> callback
    """

    retval = _fl_get_browser_hscroll_callback(pObject)
    return retval


_fl_get_browser_vscroll_callback = cfuncproto(
        so_libforms, "fl_get_browser_vscroll_callback",
        FL_BROWSER_SCROLL_CALLBACK, [cty.POINTER(FL_OBJECT)],
        """FL_BROWSER_SCROLL_CALLBACK fl_get_browser_vscroll_callback(
           FL_OBJECT * ob)
        """)
def fl_get_browser_vscroll_callback(pObject):
    """ fl_get_browser_vscroll_callback(pObject) -> callback
    """

    retval = _fl_get_browser_vscroll_callback(pObject)
    return retval


#############################################################
# forms.h (button.h)
# All Buttons: regular button, light button and round button
#############################################################

# values for enumeration 'FL_BUTTON_TYPE'
FL_BUTTON_TYPE = cty.c_int # enum
FL_NORMAL_BUTTON = 0
FL_PUSH_BUTTON = 1
FL_RADIO_BUTTON = 2
FL_HIDDEN_BUTTON = 3
FL_TOUCH_BUTTON = 4
FL_INOUT_BUTTON = 5
FL_RETURN_BUTTON = 6
FL_HIDDEN_RET_BUTTON = 7
FL_MENU_BUTTON = 8

FL_TOGGLE_BUTTON = FL_PUSH_BUTTON

class FL_BUTTON_SPEC(cty.Structure):
    pass
FL_BUTTON_SPEC._fields_ = [
    ('pixmap', Pixmap),
    ('mask', Pixmap),
    ('bits_w', cty.c_uint),
    ('bits_h', cty.c_uint),
    ('val', cty.c_int),               # whether on
    ('mousebut', cty.c_int),          # mouse button that caused the push
    ('timdel', cty.c_int),            # time since last touch (TOUCH buttons)
    ('event', cty.c_int),             # what event triggers redraw
    ('is_pushed', cty.c_int),         # set while drawn as pushed down
    ('react_to', cty.c_int * 5),      # mouse buttons button reacts to
    ('cspecl', cty.c_long),           # reserved for class specfic stuff
    ('cspecv', cty.c_void_p),         # miscty. things
    ('filename', STRING),
    ('focus_pixmap', Pixmap),
    ('focus_mask', Pixmap),
    ('focus_filename', STRING),
]

FL_BUTTON_STRUCT = FL_BUTTON_SPEC

FL_DrawButton = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT))
FL_CleanupButton = cty.CFUNCTYPE(None, cty.POINTER(FL_BUTTON_SPEC))

FL_DRAWBUTTON = FL_DrawButton
FL_CLEANUPBUTTON = FL_CleanupButton

# normal button default
FL_BUTTON_BOXTYPE = FL_UP_BOX
FL_BUTTON_COL1 = FL_COL1
FL_BUTTON_COL2 = FL_COL1
FL_BUTTON_LCOL = FL_LCOL
FL_BUTTON_ALIGN = FL_ALIGN_CENTER
FL_BUTTON_MCOL1 = FL_MCOL
FL_BUTTON_MCOL2 = FL_MCOL
FL_BUTTON_BW = FL_BOUND_WIDTH

# light button defaults
FL_LIGHTBUTTON_BOXTYPE = FL_UP_BOX
FL_LIGHTBUTTON_COL1 = FL_COL1
FL_LIGHTBUTTON_COL2 = FL_YELLOW
FL_LIGHTBUTTON_LCOL = FL_LCOL
FL_LIGHTBUTTON_ALIGN = FL_ALIGN_CENTER
FL_LIGHTBUTTON_TOPCOL = FL_COL1
FL_LIGHTBUTTON_MCOL = FL_MCOL
FL_LIGHTBUTTON_MINSIZE = FL_Coord(12)

# round button defaults
FL_ROUNDBUTTON_BOXTYPE = FL_NO_BOX
FL_ROUNDBUTTON_COL1 = FL_MCOL
FL_ROUNDBUTTON_COL2 = FL_YELLOW
FL_ROUNDBUTTON_LCOL = FL_LCOL
FL_ROUNDBUTTON_ALIGN = FL_ALIGN_CENTER
FL_ROUNDBUTTON_TOPCOL = FL_COL1
FL_ROUNDBUTTON_MCOL = FL_MCOL

# round3d button defaults
FL_ROUND3DBUTTON_BOXTYPE = FL_NO_BOX
FL_ROUND3DBUTTON_COL1 = FL_COL1
FL_ROUND3DBUTTON_COL2 = FL_BLACK
FL_ROUND3DBUTTON_LCOL = FL_LCOL
FL_ROUND3DBUTTON_ALIGN = FL_ALIGN_CENTER
FL_ROUND3DBUTTON_TOPCOL = FL_COL1
FL_ROUND3DBUTTON_MCOL = FL_MCOL

# check button defaults
FL_CHECKBUTTON_BOXTYPE = FL_NO_BOX
FL_CHECKBUTTON_COL1 = FL_COL1
FL_CHECKBUTTON_COL2 = FL_YELLOW
FL_CHECKBUTTON_LCOL = FL_LCOL
FL_CHECKBUTTON_ALIGN = FL_ALIGN_CENTER

FL_CHECKBUTTON_TOPCOL = FL_COL1
FL_CHECKBUTTON_MCOL = FL_MCOL

# bitmap button defaults
FL_BITMAPBUTTON_BOXTYPE = FL_UP_BOX
FL_BITMAPBUTTON_COL1 = FL_COL1         # bitmap background
FL_BITMAPBUTTON_COL2 = FL_BLUE         # "focus" color
FL_BITMAPBUTTON_LCOL = FL_LCOL         # bitmap foreground
FL_BITMAPBUTTON_ALIGN = FL_ALIGN_BOTTOM

# bitmap button defaults
FL_PIXMAPBUTTON_BOXTYPE = FL_UP_BOX
FL_PIXMAPBUTTON_COL1 = FL_BUTTON_COL1
FL_PIXMAPBUTTON_COL2 = FL_BUTTON_COL2
FL_PIXMAPBUTTON_LCOL = FL_BUTTON_LCOL
FL_PIXMAPBUTTON_MCOL1 = FL_BUTTON_MCOL1
FL_PIXMAPBUTTON_MCOL2 = FL_BUTTON_MCOL2
FL_PIXMAPBUTTON_ALIGN = FL_ALIGN_BOTTOM


# Routines

_fl_create_button = cfuncproto(
        so_libforms, "fl_create_button",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_button(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_button(buttontype, x, y, w, h, label):
    """ fl_create_button(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_button(buttontype, x, y, w, h, label)
    return retval


_fl_create_roundbutton = cfuncproto(
        so_libforms, "fl_create_roundbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_roundbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_roundbutton(buttontype, x, y, w, h, label):
    """ fl_create_roundbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_roundbutton(buttontype, x, y, w, h, label)
    return retval


_fl_create_round3dbutton = cfuncproto(
        so_libforms, "fl_create_round3dbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_round3dbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_round3dbutton(buttontype, x, y, w, h, label):
    """ fl_create_round3dbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_round3dbutton(buttontype, x, y, w, h, label)
    return retval


_fl_create_lightbutton = cfuncproto(
        so_libforms, "fl_create_lightbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_lightbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_lightbutton(buttontype, x, y, w, h, label):
    """ fl_create_lightbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_lightbutton(buttontype, x, y, w, h, label)
    return retval


_fl_create_checkbutton = cfuncproto(
        so_libforms, "fl_create_checkbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_checkbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_checkbutton(buttontype, x, y, w, h, label):
    """ fl_create_checkbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_checkbutton(buttontype, x, y, w, h, label)
    return retval


_fl_create_bitmapbutton = cfuncproto(
        so_libforms, "fl_create_bitmapbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_bitmapbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_bitmapbutton(buttontype, x, y, w, h, label):
    """ fl_create_bitmapbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_bitmapbutton(buttontype, x, y, w, h, label)
    return retval


_fl_create_pixmapbutton = cfuncproto(
        so_libforms, "fl_create_pixmapbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_pixmapbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_pixmapbutton(buttontype, x, y, w, h, label):
    """ fl_create_pixmapbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_pixmapbutton(buttontype, x, y, w, h, label)
    return retval


_fl_create_scrollbutton = cfuncproto(
        so_libforms, "fl_create_scrollbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_scrollbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_scrollbutton(buttontype, x, y, w, h, label):
    """ fl_create_scrollbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_scrollbutton(buttontype, x, y, w, h, label)
    return retval


_fl_create_labelbutton = cfuncproto(
        so_libforms, "fl_create_labelbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_labelbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_labelbutton(buttontype, x, y, w, h, label):
    """ fl_create_labelbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_labelbutton(buttontype, x, y, w, h, label)
    return retval


_fl_add_roundbutton = cfuncproto(
        so_libforms, "fl_add_roundbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_roundbutton(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_roundbutton(buttontype, x, y, w, h, label):
    """ fl_add_roundbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_roundbutton(buttontype, x, y, w, h, label)
    return retval


_fl_add_round3dbutton = cfuncproto(
        so_libforms, "fl_add_round3dbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_round3dbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_round3dbutton(buttontype, x, y, w, h, label):
    """ fl_add_round3dbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_round3dbutton(buttontype, x, y, w, h, label)
    return retval


_fl_add_lightbutton = cfuncproto(
        so_libforms, "fl_add_lightbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_lightbutton(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_lightbutton(buttontype, x, y, w, h, label):
    """ fl_add_lightbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_lightbutton(buttontype, x, y, w, h, label)
    return retval


_fl_add_checkbutton = cfuncproto(
        so_libforms, "fl_add_checkbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_checkbutton(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_checkbutton(buttontype, x, y, w, h, label):
    """ fl_add_checkbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_checkbutton(buttontype, x, y, w, h, label)
    return retval


_fl_add_button = cfuncproto(
        so_libforms, "fl_add_button",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_button(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_button(buttontype, x, y, w, h, label):
    """ fl_add_button(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_button(buttontype, x, y, w, h, label)
    return retval


_fl_add_bitmapbutton = cfuncproto(
        so_libforms, "fl_add_bitmapbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_bitmapbutton(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_bitmapbutton(buttontype, x, y, w, h, label):
    """ fl_add_bitmapbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_bitmapbutton(buttontype, x, y, w, h, label)
    return retval


_fl_add_scrollbutton = cfuncproto(
        so_libforms, "fl_add_scrollbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_scrollbutton(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_scrollbutton(buttontype, x, y, w, h, label):
    """ fl_add_scrollbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_scrollbutton(buttontype, x, y, w, h, label)
    return retval


_fl_add_labelbutton = cfuncproto(
        so_libforms, "fl_add_labelbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_labelbutton(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_labelbutton(buttontype, x, y, w, h, label):
    """ fl_add_labelbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_labelbutton(buttontype, x, y, w, h, label)
    return retval


fl_set_bitmapbutton_file = fl_set_bitmap_file


_fl_set_bitmapbutton_data = cfuncproto(
        so_libforms, "fl_set_bitmapbutton_data",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int,
        cty.POINTER(cty.c_ubyte)],
        """void fl_set_bitmapbutton_data(FL_OBJECT * ob, int w, int h,
           unsigned char * bits)
        """)
def fl_set_bitmapbutton_data(pObject, w, h, bits):
    """ fl_set_bitmapbutton_data(pObject, w, h, bits)
    """

    _fl_set_bitmapbutton_data(pObject, w, h, bits)


fl_set_bitmapbutton_datafile = fl_set_bitmapbutton_file


_fl_add_pixmapbutton = cfuncproto(
        so_libforms, "fl_add_pixmapbutton",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_pixmapbutton(int type, FL_Coord x, FL_Coord y,
        FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_pixmapbutton(buttontype, x, y, w, h, label):
    """ fl_add_pixmapbutton(buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_pixmapbutton(buttontype, x, y, w, h, label)
    return retval


_fl_set_pixmapbutton_focus_outline = cfuncproto(
        so_libforms, "fl_set_pixmapbutton_focus_outline",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_pixmapbutton_focus_outline(FL_OBJECT * ob, int yes)
        """)
def fl_set_pixmapbutton_focus_outline(pObject, yes):
    """ fl_set_pixmapbutton_focus_outline(pObject, yes)
    """

    _fl_set_pixmapbutton_focus_outline(pObject, yes)


fl_set_pixmapbutton_data = fl_set_pixmap_data
fl_set_pixmapbutton_file = fl_set_pixmap_file
fl_set_pixmapbutton_pixmap = fl_set_pixmap_pixmap
fl_get_pixmapbutton_pixmap = fl_get_pixmap_pixmap
fl_set_pixmapbutton_align = fl_set_pixmap_align
fl_free_pixmapbutton_pixmap = fl_free_pixmap_pixmap
fl_set_pixmapbutton_datafile = fl_set_pixmapbutton_file
fl_set_pixmapbutton_show_focus = fl_set_pixmapbutton_focus_outline


_fl_set_pixmapbutton_focus_data = cfuncproto(
        so_libforms, "fl_set_pixmapbutton_focus_data",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(STRING)],
        """void fl_set_pixmapbutton_focus_data(FL_OBJECT * ob, char * * bits)
        """)
def fl_set_pixmapbutton_focus_data(pObject, bits):
    """ fl_set_pixmapbutton_focus_data(pObject, bits)
    """

    _fl_set_pixmapbutton_focus_data(pObject, bits)


_fl_set_pixmapbutton_focus_file = cfuncproto(
        so_libforms, "fl_set_pixmapbutton_focus_file",
        None, [cty.POINTER(FL_OBJECT), STRING],
        """void fl_set_pixmapbutton_focus_file(FL_OBJECT * ob,
           const char * fname)
        """)
def fl_set_pixmapbutton_focus_file(pObject, fname):
    """ fl_set_pixmapbutton_focus_file(pObject, fname)
    """

    _fl_set_pixmapbutton_focus_file(pObject, fname)


_fl_set_pixmapbutton_focus_pixmap = cfuncproto(
        so_libforms, "fl_set_pixmapbutton_focus_pixmap",
        None, [cty.POINTER(FL_OBJECT), Pixmap, Pixmap],
        """void fl_set_pixmapbutton_focus_pixmap(FL_OBJECT * ob, Pixmap id,
           Pixmap mask)
        """)
def fl_set_pixmapbutton_focus_pixmap(pObject, idnum, mask):
    """ fl_set_pixmapbutton_focus_pixmap(pObject, idnum, mask)
    """

    _fl_set_pixmapbutton_focus_pixmap(pObject, idnum, mask)

_fl_get_button = cfuncproto(
        so_libforms, "fl_get_button",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_button(FL_OBJECT * ob)
        """)
def fl_get_button(pObject):
    """ fl_get_button(pObject) -> num.
    """

    retval = _fl_get_button(pObject)
    return retval


_fl_set_button = cfuncproto(
        so_libforms, "fl_set_button",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_button(FL_OBJECT * ob, int pushed)
        """)
def fl_set_button(pObject, pushed):
    """ fl_set_button(pObject, pushed)
    """

    _fl_set_button(pObject, pushed)


_fl_get_button_numb = cfuncproto(
        so_libforms, "fl_get_button_numb",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_button_numb(FL_OBJECT * ob)
        """)
def fl_get_button_numb(pObject):
    """ fl_get_button_numb(pObject) -> num.
    """

    retval = _fl_get_button_numb(pObject)
    return retval


fl_set_button_shortcut = fl_set_object_shortcut


_fl_create_generic_button = cfuncproto(
        so_libforms, "fl_create_generic_button",
        cty.POINTER(FL_OBJECT), [cty.c_int, cty.c_int, FL_Coord, FL_Coord,
        FL_Coord, FL_Coord, STRING],
        """FL_OBJECT * fl_create_generic_button(int objclass, int type,
           FL_Coord x, FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_generic_button(objclass, buttontype, x, y, w, h, label):
    """ fl_create_generic_button(objclass, buttontype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_generic_button(objclass, buttontype, x, y, w, h, label)
    return retval


_fl_add_button_class = cfuncproto(
        so_libforms, "fl_add_button_class",
        None, [cty.c_int, FL_DrawButton, FL_CleanupButton],
        """void fl_add_button_class(int bclass, FL_DrawButton drawit,
           FL_CleanupButton cleanup)
        """)
def fl_add_button_class(bclass, py_drawit, py_cleanup):
    """ fl_add_button_class(bclass, py_drawit, py_cleanup)
    """

    c_drawit = FL_DrawButton(py_drawit)
    c_cleanup = FL_CleanupButton(py_cleanup)
    _cfunc_refs[get_rand_dictkey()] = c_drawit
    _cfunc_refs[get_rand_dictkey()] = c_cleanup
    _fl_add_button_class(bclass, c_drawit, c_cleanup)


_fl_set_button_mouse_buttons = cfuncproto(
        so_libforms, "fl_set_button_mouse_buttons",
        None, [cty.POINTER(FL_OBJECT), cty.c_uint],
        """void fl_set_button_mouse_buttons(FL_OBJECT * ob,
           unsigned int buttons)
        """)
def fl_set_button_mouse_buttons(pObject, buttons):
    """ fl_set_button_mouse_buttons(pObject, buttons)
    """

    _fl_set_button_mouse_buttons(pObject, buttons)


_fl_get_button_mouse_buttons = cfuncproto(
        so_libforms, "fl_get_button_mouse_buttons",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_uint)],
        """void fl_get_button_mouse_buttons(FL_OBJECT * ob,
           unsigned int * buttons)
        """)
def fl_get_button_mouse_buttons(pObject, buttons):
    """ fl_get_button_mouse_buttons(pObject, buttons)
    """

    _fl_get_button_mouse_buttons(pObject, buttons)


#######################
# forms.h (canvas.h)
# Header for FL_CANVAS
#######################

# values for enumeration 'FL_CANVAS_TYPE'
FL_CANVAS_TYPE = cty.c_int # enum
FL_NORMAL_CANVAS = 0
FL_SCROLLED_CANVAS = 1

# Default
FL_CANVAS_BOXTYPE = FL_DOWN_BOX     # really the decoration frame
FL_CANVAS_ALIGN = FL_ALIGN_TOP


# Interfaces

_fl_create_generic_canvas = cfuncproto(
        so_libforms, "fl_create_generic_canvas",
        cty.POINTER(FL_OBJECT), [cty.c_int, cty.c_int, FL_Coord, FL_Coord,
        FL_Coord, FL_Coord, STRING],
        """FL_OBJECT * fl_create_generic_canvas(int canvas_class, int type,
           FL_Coord x, FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_generic_canvas(canvas_class, canvastype, x, y, w, h, label):
    """ fl_create_generic_canvas(canvas_class, canvastype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_generic_canvas(canvas_class, canvastype, x, y, w, h,
                                       label)
    return retval


_fl_add_canvas = cfuncproto(
        so_libforms, "fl_add_canvas",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_canvas(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_canvas(canvastype, x, y, w, h, label):
    """ fl_add_canvas(canvastype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_canvas(canvastype, x, y, w, h, label)
    return retval


_fl_create_canvas = cfuncproto(
        so_libforms, "fl_create_canvas",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_canvas(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_canvas(canvastype, x, y, w, h, label):
    """ fl_create_canvas(canvastype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_canvas(canvastype, x, y, w, h, label)
    return retval


# backward compatibility
fl_set_canvas_decoration = fl_set_object_boxtype


_fl_set_canvas_colormap = cfuncproto(
        so_libforms, "fl_set_canvas_colormap",
        None, [cty.POINTER(FL_OBJECT), Colormap],
        """void fl_set_canvas_colormap(FL_OBJECT * ob, Colormap colormap)
        """)
def fl_set_canvas_colormap(pObject, colormap):
    """ fl_set_canvas_colormap(pObject, colormap)
    """

    _fl_set_canvas_colormap(pObject, colormap)


_fl_set_canvas_visual = cfuncproto(
        so_libforms, "fl_set_canvas_visual",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(Visual)],
        """void fl_set_canvas_visual(FL_OBJECT * obj, Visual * vi)
        """)
def fl_set_canvas_visual(pObject, vi):
    """ fl_set_canvas_visual(pObject, vi)
    """

    _fl_set_canvas_visual(pObject, vi)


_fl_set_canvas_depth = cfuncproto(
        so_libforms, "fl_set_canvas_depth",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_canvas_depth(FL_OBJECT * obj, int depth)
        """)
def fl_set_canvas_depth(pObject, depth):
    """ fl_set_canvas_depth(pObject, depth)
    """

    _fl_set_canvas_depth(pObject, depth)


# /usr/include/X11/Xlib.h 317
class XSetWindowAttributes(cty.Structure):
    pass
XSetWindowAttributes._fields_ = [
    ('background_pixmap', Pixmap),
    ('background_pixel', cty.c_ulong),
    ('border_pixmap', Pixmap),
    ('border_pixel', cty.c_ulong),
    ('bit_gravity', cty.c_int),
    ('win_gravity', cty.c_int),
    ('backing_store', cty.c_int),
    ('backing_planes', cty.c_ulong),
    ('backing_pixel', cty.c_ulong),
    ('save_under', cty.c_int),
    ('event_mask', cty.c_long),
    ('do_not_propagate_mask', cty.c_long),
    ('override_redirect', cty.c_int),
    ('colormap', Colormap),
    ('cursor', Cursor),
]


_fl_set_canvas_attributes = cfuncproto(
        so_libforms, "fl_set_canvas_attributes",
        None, [cty.POINTER(FL_OBJECT), cty.c_uint,
        cty.POINTER(XSetWindowAttributes)],
        """void fl_set_canvas_attributes(FL_OBJECT * ob, unsigned int mask,
           XSetWindowAttributes * xswa)
        """)
def fl_set_canvas_attributes(pObject, mask, xswa):
    """ fl_set_canvas_attributes(pObject, mask, xswa)
    """

    _fl_set_canvas_attributes(pObject, mask, xswa)


FL_HANDLE_CANVAS = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), Window,
            cty.c_int, cty.c_int, cty.POINTER(XEvent), cty.c_void_p)

_fl_add_canvas_handler = cfuncproto(
        so_libforms, "fl_add_canvas_handler",
        FL_HANDLE_CANVAS, [cty.POINTER(FL_OBJECT), cty.c_int,
        FL_HANDLE_CANVAS, cty.c_void_p],
        """FL_HANDLE_CANVAS fl_add_canvas_handler(FL_OBJECT * ob, int ev,
           FL_HANDLE_CANVAS h, void * udata)
        """)
def fl_add_canvas_handler(pObject, ev, py_h, udata):
    """ fl_add_canvas_handler(pObject, ev, py_h, udata) -> canvas handler
    """

    c_h = FL_HANDLE_CANVAS(py_h)
    _cfunc_refs[get_rand_dictkey()] = c_h
    retval = _fl_add_canvas_handler(pObject, ev, c_h, udata)
    return retval


_fl_get_canvas_id = cfuncproto(
        so_libforms, "fl_get_canvas_id",
        Window, [cty.POINTER(FL_OBJECT)],
        """Window fl_get_canvas_id(FL_OBJECT * ob)
        """)
def fl_get_canvas_id(pObject):
    """ fl_get_canvas_id(pObject) -> window
    """

    retval = _fl_get_canvas_id(pObject)
    return retval


_fl_get_canvas_colormap = cfuncproto(
        so_libforms, "fl_get_canvas_colormap",
        Colormap, [cty.POINTER(FL_OBJECT)],
        """)Colormap fl_get_canvas_colormap(FL_OBJECT * ob)
        """)
def fl_get_canvas_colormap(pObject):
    """ fl_get_canvas_colormap(pObject) -> colormap
    """

    retval = _fl_get_canvas_colormap(pObject)
    return retval


_fl_get_canvas_depth = cfuncproto(
        so_libforms, "fl_get_canvas_depth",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_canvas_depth(FL_OBJECT * obj)
        """)
def fl_get_canvas_depth(pObject):
    """ fl_get_canvas_depth(pObject) -> depth num.
    """

    retval = _fl_get_canvas_depth(pObject)
    return retval


_fl_remove_canvas_handler = cfuncproto(
        so_libforms, "fl_remove_canvas_handler",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, FL_HANDLE_CANVAS],
        """void fl_remove_canvas_handler(FL_OBJECT * ob, int ev,
           FL_HANDLE_CANVAS h)
        """)
def fl_remove_canvas_handler(pObject, ev, py_h):
    """ fl_remove_canvas_handler(pObject, ev, py_h)
    """

    c_h = FL_HANDLE_CANVAS(py_h)
    _cfunc_refs[get_rand_dictkey()] = c_h
    _fl_remove_canvas_handler(pObject, ev, c_h)


_fl_hide_canvas = cfuncproto(
        so_libforms, "fl_hide_canvas",
        None, [cty.POINTER(FL_OBJECT)],
        """void fl_hide_canvas(FL_OBJECT * ob)
        """)
def fl_hide_canvas(pObject):
    """ fl_hide_canvas(pObject)
    """

    _fl_hide_canvas(pObject)


_fl_share_canvas_colormap = cfuncproto(
        so_libforms, "fl_share_canvas_colormap",
        None, [cty.POINTER(FL_OBJECT), Colormap],
        """void fl_share_canvas_colormap(FL_OBJECT * ob, Colormap colormap)
        """)
def fl_share_canvas_colormap(pObject, colormap):
    """ fl_share_canvas_colormap(pObject, colormap)
    """

    _fl_share_canvas_colormap(pObject, colormap)


_fl_clear_canvas = cfuncproto(
        so_libforms, "fl_clear_canvas",
        None, [cty.POINTER(FL_OBJECT)],
        """void fl_clear_canvas(FL_OBJECT * ob)
        """)
def fl_clear_canvas(pObject):
    """ fl_clear_canvas(pObject)
    """

    _fl_clear_canvas(pObject)


FL_MODIFY_CANVAS_PROP = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT))

_fl_modify_canvas_prop = cfuncproto(
        so_libforms, "fl_modify_canvas_prop",
        None, [cty.POINTER(FL_OBJECT), FL_MODIFY_CANVAS_PROP,
        FL_MODIFY_CANVAS_PROP, FL_MODIFY_CANVAS_PROP],
        """void fl_modify_canvas_prop(FL_OBJECT * obj,
           FL_MODIFY_CANVAS_PROP init, FL_MODIFY_CANVAS_PROP activate,
           FL_MODIFY_CANVAS_PROP cleanup)
        """)
def fl_modify_canvas_prop(pObject, py_init, py_activate, py_cleanup):
    """ fl_modify_canvas_prop(pObject, py_init, py_activate, py_cleanup)
    """

    c_init = FL_MODIFY_CANVAS_PROP(py_init)
    c_activate = FL_MODIFY_CANVAS_PROP(py_activate)
    c_cleanup = FL_MODIFY_CANVAS_PROP(py_cleanup)
    _cfunc_refs[get_rand_dictkey()] = c_init
    _cfunc_refs[get_rand_dictkey()] = c_activate
    _cfunc_refs[get_rand_dictkey()] = c_cleanup
    _fl_modify_canvas_prop(pObject, c_init, c_activate, c_cleanup)


_fl_canvas_yield_to_shortcut = cfuncproto(
        so_libforms, "fl_canvas_yield_to_shortcut",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_canvas_yield_to_shortcut(FL_OBJECT * ob, int yes)
        """)
def fl_canvas_yield_to_shortcut(pObject, yes):
    """ fl_canvas_yield_to_shortcut(pObject, yes)
    """

    _fl_canvas_yield_to_shortcut(pObject, yes)


#############
# glcanvas.h
#############

# This is an attempt to maintain some sort of backwards compatibility
# with old code whilst also getting rid of the old, system-specific
# hack.


# OpenGL canvases

_fl_create_glcanvas = cfuncproto(
        so_libformsgl, "fl_create_glcanvas",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_glcanvas(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_glcanvas(canvastype, x, y, w, h, label):
    """ fl_create_glcanvas(canvastype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_glcanvas(canvastype, x, y, w, h, label)
    return retval


_fl_add_glcanvas = cfuncproto(
        so_libformsgl, "fl_add_glcanvas",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_glcanvas(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_glcanvas(canvastype, x, y, w, h, label):
    """ fl_add_glcanvas(canvastype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_glcanvas(canvastype, x, y, w, h, label)
    return retval


_fl_set_glcanvas_defaults = cfuncproto(
        so_libformsgl, "fl_set_glcanvas_defaults",
        None, [cty.POINTER(cty.c_int)],
        """void fl_set_glcanvas_defaults(const int * config):
        """)
def fl_set_glcanvas_defaults(config):
    """ fl_set_glcanvas_defaults(config):
    """

    _fl_set_glcanvas_defaults(config)


_fl_get_glcanvas_defaults = cfuncproto(
        so_libformsgl, "fl_get_glcanvas_defaults",
        None, [cty.c_int],
        """void fl_get_glcanvas_defaults(int config[ ]):
        """)
def fl_get_glcanvas_defaults(config):
    """ fl_get_glcanvas_defaults(config):
    """

    _fl_get_glcanvas_defaults(config)


_fl_set_glcanvas_attributes = cfuncproto(
        so_libformsgl, "fl_set_glcanvas_attributes",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int)],
        """void fl_set_glcanvas_attributes(FL_OBJECT * ob, const int * config)
        """)
def fl_set_glcanvas_attributes(pObject, config):
    """ fl_set_glcanvas_attributes(pObject, config)
    """

    _fl_set_glcanvas_attributes(pObject, config)


_fl_get_glcanvas_attributes = cfuncproto(
        so_libformsgl, "fl_get_glcanvas_attributes",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int)],
        """void fl_get_glcanvas_attributes(FL_OBJECT * ob, int * attributes)
        """)
def fl_get_glcanvas_attributes(pObject, attributes):
    """ fl_get_glcanvas_attributes(pObject, attributes)
    """

    _fl_get_glcanvas_attributes(pObject, attributes)


_fl_set_glcanvas_direct = cfuncproto(
        so_libformsgl, "fl_set_glcanvas_direct",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_glcanvas_direct(FL_OBJECT * ob, int direct)
        """)
def fl_set_glcanvas_direct(pObject, direct):
    """ fl_set_glcanvas_direct(pObject, direct)
    """

    _fl_set_glcanvas_direct(pObject, direct)


_fl_activate_glcanvas = cfuncproto(
        so_libformsgl, "fl_activate_glcanvas",
        None, [cty.POINTER(FL_OBJECT)],
        """void fl_activate_glcanvas(FL_OBJECT * ob)
        """)
def fl_activate_glcanvas(pObject):
    """ fl_activate_glcanvas(pObject)
    """

    _fl_activate_glcanvas(pObject)


_fl_get_glcanvas_xvisualinfo = cfuncproto(
        so_libformsgl, "fl_get_glcanvas_xvisualinfo",
        cty.POINTER(XVisualInfo), [cty.POINTER(FL_OBJECT)],
        """)XVisualInfo * fl_get_glcanvas_xvisualinfo(FL_OBJECT * ob)
        """)
def fl_get_glcanvas_xvisualinfo(pObject):
    """ fl_get_glcanvas_xvisualinfo(pObject) -> xvisualinfo class
    """

    retval = _fl_get_glcanvas_xvisualinfo(pObject)
    return retval


# my add
class GLXContext (cty.Structure):
    pass
GLXContext._fields_ = []


_fl_get_glcanvas_context = cfuncproto(
        so_libformsgl, "fl_get_glcanvas_context",
        GLXContext, [cty.POINTER(FL_OBJECT)],
        """)GLXContext fl_get_glcanvas_context(FL_OBJECT * ob)
        """)
def fl_get_glcanvas_context(pObject):
    """ fl_get_glcanvas_context(pObject) -> glxcontext class
    """

    retval = _fl_get_glcanvas_context(pObject)
    return retval


_fl_glwincreate = cfuncproto(
        so_libformsgl, "fl_glwincreate",
        Window, [cty.POINTER(cty.c_int), cty.POINTER(GLXContext),
        cty.c_int, cty.c_int],
        """Window fl_glwincreate(int * config, GLXContext * context,
           int wint h)
        """)
def fl_glwincreate(config, context, w, h):
    """ fl_glwincreate(config, context, w, h) -> window
    """

    retval = _fl_glwincreate(config, context, w, h)
    return retval


_fl_glwinopen = cfuncproto(
        so_libformsgl, "fl_glwinopen",
        Window, [cty.POINTER(cty.c_int), cty.POINTER(GLXContext),
        cty.c_int, cty.c_int],
        """Window fl_glwinopen(int * config, GLXContext * context,
           int w, int h
        """)
def fl_glwinopen(config, context, w, h):
    """ fl_glwinopen(config, context, w, h) -> window
    """

    retval = _fl_glwinopen(config, context, w, h)
    return retval


#############################
# forms.h (chart.h)
# Object Class: Chart
#############################

# values for enumeration 'FL_CHART_TYPE'
FL_CHART_TYPE = cty.c_int # enum
FL_BAR_CHART = 0
FL_HORBAR_CHART = 1
FL_LINE_CHART = 2
FL_FILL_CHART = 3
FL_SPIKE_CHART = 4
FL_PIE_CHART = 5
FL_SPECIALPIE_CHART = 6

FL_FILLED_CHART = FL_FILL_CHART     # compatibility

# Defaults
FL_CHART_BOXTYPE = FL_BORDER_BOX
FL_CHART_COL1 = FL_COL1
FL_CHART_LCOL = FL_LCOL
FL_CHART_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_CHART_MAX = 2048


# Routines

_fl_create_chart = cfuncproto(
        so_libforms, "fl_create_chart",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_chart(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_chart(charttype, x, y, w, h, label):
    """ fl_create_chart(charttype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_chart(charttype, x, y, w, h, label)
    return retval


_fl_add_chart = cfuncproto(
        so_libforms, "fl_add_chart",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_chart(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_chart(charttype, x, y, w, h, label):
    """ fl_add_chart(charttype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_chart(charttype, x, y, w, h, label)
    return retval


_fl_clear_chart = cfuncproto(
        so_libforms, "fl_clear_chart",
        None, [cty.POINTER(FL_OBJECT)],
        """void fl_clear_chart(FL_OBJECT * ob)
        """)
def fl_clear_chart(pObject):
    """ fl_clear_chart(pObject)
    """

    _fl_clear_chart(pObject)


_fl_add_chart_value = cfuncproto(
        so_libforms, "fl_add_chart_value",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, STRING, cty.c_int],
        """void fl_add_chart_value(FL_OBJECT * ob, double val,
           const char * str, int col)
        """)
def fl_add_chart_value(pObject, val, labeltext, col):
    """ fl_add_chart_value(pObject, val, labeltext, col)
    """

    _fl_add_chart_value(pObject, val, labeltext, col)


_fl_insert_chart_value = cfuncproto(
        so_libforms, "fl_insert_chart_value",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_double, STRING,
        cty.c_int],
        """void fl_insert_chart_value(FL_OBJECT * ob, int indx, double val,
           const char * str, int col)
        """)
def fl_insert_chart_value(pObject, indx, val, labeltext, col):
    """ fl_insert_chart_value(pObject, indx, val, labeltext, col)
    """

    _fl_insert_chart_value(pObject, indx, val, labeltext, col)


_fl_replace_chart_value = cfuncproto(
        so_libforms, "fl_replace_chart_value",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_double, STRING,
        cty.c_int],
        """void fl_replace_chart_value(FL_OBJECT * ob, int indx, double val,
           const char * str, int col)
        """)
def fl_replace_chart_value(pObject, indx, val, labeltext, col):
    """ fl_replace_chart_value(pObject, indx, val, labeltext, col)
    """

    _fl_replace_chart_value(pObject, indx, val, labeltext, col)


_fl_set_chart_bounds = cfuncproto(
        so_libforms, "fl_set_chart_bounds",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_chart_bounds(FL_OBJECT * ob, double min, double max)
        """)
def fl_set_chart_bounds(pObject, min_bound, max_bound):
    """ fl_set_chart_bounds(pObject, min_bound, max_bound)
    """

    _fl_set_chart_bounds(pObject, min_bound, max_bound)


_fl_get_chart_bounds = cfuncproto(
        so_libforms, "fl_get_chart_bounds",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_chart_bounds(FL_OBJECT * ob, double * min, double * max)
        """)
def fl_get_chart_bounds(pObject, min_bound, max_bound):
    """ fl_get_chart_bounds(pObject, min_bound, max_bound)
    """

    _fl_get_chart_bounds(pObject, min_bound, max_bound)


_fl_set_chart_maxnumb = cfuncproto(
        so_libforms, "fl_set_chart_maxnumb",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_chart_maxnumb(FL_OBJECT * ob, int maxnumb)
        """)
def fl_set_chart_maxnumb(pObject, maxnumb):
    """ fl_set_chart_maxnumb(pObject, maxnumb) -> num.
    """

    retval = _fl_set_chart_maxnumb(pObject, maxnumb)


_fl_set_chart_autosize = cfuncproto(
        so_libforms, "fl_set_chart_autosize",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_chart_autosize(FL_OBJECT * ob, int autosize)
        """)
def fl_set_chart_autosize(pObject, autosize):
    """ fl_set_chart_autosize(pObject, autosize)
    """

    _fl_set_chart_autosize(pObject, autosize)


_fl_set_chart_lstyle = cfuncproto(
        so_libforms, "fl_set_chart_lstyle",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_chart_lstyle(FL_OBJECT * ob, int lstyle)
        """)
def fl_set_chart_lstyle(pObject, lstyle):
    """ fl_set_chart_lstyle(pObject, lstyle)
    """

    _fl_set_chart_lstyle(pObject, lstyle)


_fl_set_chart_lsize = cfuncproto(
        so_libforms, "fl_set_chart_lsize",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_chart_lsize(FL_OBJECT * ob, int lsize)
        """)
def fl_set_chart_lsize(pObject, lsize):
    """ fl_set_chart_lsize(pObject, lsize)
    """

    _fl_set_chart_lsize(pObject, lsize)


_fl_set_chart_lcolor = cfuncproto(
        so_libforms, "fl_set_chart_lcolor",
        None, [cty.POINTER(FL_OBJECT), FL_COLOR],
        """void fl_set_chart_lcolor(FL_OBJECT * ob, FL_COLOR lcol)
        """)
def fl_set_chart_lcolor(pObject, lcol):
    """ fl_set_chart_lcolor(pObject, lcol)
    """

    _fl_set_chart_lcolor(pObject, lcol)


_fl_set_chart_baseline = cfuncproto(
        so_libforms, "fl_set_chart_baseline",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_chart_baseline(FL_OBJECT * ob, int iYesNo)
        """)
def fl_set_chart_baseline(pObject, iYesNo):
    """ fl_set_chart_baseline(pObject, iYesNo)
    """

    _fl_set_chart_baseline(pObject, iYesNo)


fl_set_chart_lcol = fl_set_chart_lcolor


#####################
# forms.h (choice.h)
#####################

# values for enumeration 'FL_CHOICE_TYPE'
FL_CHOICE_TYPE = cty.c_int # enum
FL_NORMAL_CHOICE = 0
FL_NORMAL_CHOICE2 = 1
FL_DROPLIST_CHOICE = 2
FL_BROWSER_CHOICE = 3

FL_SIMPLE_CHOICE = FL_NORMAL_CHOICE

# Defaults
FL_CHOICE_BOXTYPE = FL_ROUNDED_BOX
FL_CHOICE_COL1 = FL_COL1
FL_CHOICE_COL2 = FL_LCOL
FL_CHOICE_LCOL = FL_LCOL
FL_CHOICE_ALIGN = FL_ALIGN_LEFT

# Others
FL_CHOICE_MCOL = FL_MCOL
FL_CHOICE_MAXITEMS = 128


# Routines

_fl_create_choice = cfuncproto(
        so_libforms, "fl_create_choice",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_choice(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_choice(choicetype, x, y, w, h, label):
    """ fl_create_choice(choicetype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_choice(choicetype, x, y, w, h, label)
    return retval


_fl_add_choice = cfuncproto(
        so_libforms, "fl_add_choice",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_choice(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)  DEPRECATED
        """)
def fl_add_choice(choicetype, x, y, w, h, label):
    """ fl_add_choice(choicetype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_choice(choicetype, x, y, w, h, label)
    return retval


_fl_clear_choice = cfuncproto(
        so_libforms, "fl_clear_choice",
        None, [cty.POINTER(FL_OBJECT)],
        """void fl_clear_choice(FL_OBJECT * ob)    DEPRECATED
        """)
def fl_clear_choice(pObject):
    """ fl_clear_choice(pObject)
    """

    _fl_clear_choice(pObject)


_fl_addto_choice = cfuncproto(
        so_libforms, "fl_addto_choice",
        cty.c_int, [cty.POINTER(FL_OBJECT), STRING],
        """int fl_addto_choice(FL_OBJECT * ob, const char * str)    DEPRECATED
        """)
def fl_addto_choice(pObject, choicetext):
    """ fl_addto_choice(pObject, choicetext) -> num.
    """

    retval = _fl_addto_choice(pObject, choicetext)
    return retval


_fl_replace_choice = cfuncproto(
        so_libforms, "fl_replace_choice",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, STRING],
        """void fl_replace_choice(FL_OBJECT * ob, int numb, const char * str)    DEPRECATED
        """)
def fl_replace_choice(pObject, numb, choicetext):
    """ fl_replace_choice(pObject, numb, choicetext)
    """

    _fl_replace_choice(pObject, numb, choicetext)


_fl_delete_choice = cfuncproto(
        so_libforms, "fl_delete_choice",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_delete_choice(FL_OBJECT * ob, int numb)    DEPRECATED
        """)
def fl_delete_choice(pObject, numb):
    """ fl_delete_choice(pObject, numb)
    """

    _fl_delete_choice(pObject, numb)


_fl_set_choice = cfuncproto(
        so_libforms, "fl_set_choice",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_choice(FL_OBJECT * ob, int choice)    DEPRECATED
        """)
def fl_set_choice(pObject, choice):
    """ fl_set_choice(pObject, choice)
    """

    _fl_set_choice(pObject, choice)


_fl_set_choice_text = cfuncproto(
        so_libforms, "fl_set_choice_text",
        None, [cty.POINTER(FL_OBJECT), STRING],
        """void fl_set_choice_text(FL_OBJECT * ob, const char * txt)    DEPRECATED
        """)
def fl_set_choice_text(pObject, txt):
    """ fl_set_choice_text(pObject, txt)
    """

    _fl_set_choice_text(pObject, txt)


_fl_get_choice = cfuncproto(
        so_libforms, "fl_get_choice",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_choice(FL_OBJECT * ob)    DEPRECATED
        """)
def fl_get_choice(pObject):
    """ fl_get_choice(pObject) -> num.
    """

    retval = _fl_get_choice(pObject)
    return retval


_fl_get_choice_item_text = cfuncproto(
        so_libforms, "fl_get_choice_item_text",
        STRING, [cty.POINTER(FL_OBJECT), cty.c_int],
        """const char * fl_get_choice_item_text(FL_OBJECT * ob, int n)    DEPRECATED
        """)
def fl_get_choice_item_text(pObject, n):
    """ fl_get_choice_item_text(pObject, n) -> text string
    """

    retval = _fl_get_choice_item_text(pObject, n)
    return retval


_fl_get_choice_maxitems = cfuncproto(
        so_libforms, "fl_get_choice_maxitems",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_choice_maxitems(FL_OBJECT * ob)    DEPRECATED
        """)
def fl_get_choice_maxitems(pObject):
    """ fl_get_choice_maxitems(pObject) -> items num.
    """

    retval = _fl_get_choice_maxitems(pObject)
    return retval


_fl_get_choice_text = cfuncproto(
        so_libforms, "fl_get_choice_text",
        STRING, [cty.POINTER(FL_OBJECT)],
        """const char * fl_get_choice_text(FL_OBJECT * ob)    DEPRECATED
        """)
def fl_get_choice_text(pObject):
    """ fl_get_choice_text(pObject) -> text string
    """

    retval = _fl_get_choice_text(pObject)
    return retval


_fl_set_choice_fontsize = cfuncproto(
        so_libforms, "fl_set_choice_fontsize",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_choice_fontsize(FL_OBJECT * ob, int size)
        """)
def fl_set_choice_fontsize(pObject, size):
    """ fl_set_choice_fontsize(pObject, size)
    """

    _fl_set_choice_fontsize(pObject, size)


_fl_set_choice_fontstyle = cfuncproto(
        so_libforms, "fl_set_choice_fontstyle",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_choice_fontstyle(FL_OBJECT * ob, int style)
        """)
def fl_set_choice_fontstyle(pObject, style):
    """ fl_set_choice_fontstyle(pObject, style)
    """

    _fl_set_choice_fontstyle(pObject, style)


_fl_set_choice_align = cfuncproto(
        so_libforms, "fl_set_choice_align",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_choice_align(FL_OBJECT * ob, int align)
        """)
def fl_set_choice_align(pObject, align):
    """ fl_set_choice_align(pObject, align)
    """

    _fl_set_choice_align(pObject, align)


_fl_get_choice_item_mode = cfuncproto(
        so_libforms, "fl_get_choice_item_mode",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_get_choice_item_mode(FL_OBJECT * ob, int item)    DEPRECATED
        """)
def fl_get_choice_item_mode(pObject, item):
    """ fl_get_choice_item_mode(pObject, item) -> mode num.
    """

    retval = _fl_get_choice_item_mode(pObject, item)
    return retval


_fl_set_choice_item_mode = cfuncproto(
        so_libforms, "fl_set_choice_item_mode",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_uint],
        """void fl_set_choice_item_mode(FL_OBJECT * ob, int item,
           unsigned int mode)
        """)
def fl_set_choice_item_mode(pObject, item, mode):
    """ fl_set_choice_item_mode(pObject, item, mode)
    """

    _fl_set_choice_item_mode(pObject, item, mode)


_fl_set_choice_item_shortcut = cfuncproto(
        so_libforms, "fl_set_choice_item_shortcut",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, STRING],
        """void fl_set_choice_item_shortcut(FL_OBJECT * ob, int item,
           const char * sc)
        """)
def fl_set_choice_item_shortcut(pObject, item, sc):
    """ fl_set_choice_item_shortcut(pObject, item, sc)
    """

    _fl_set_choice_item_shortcut(pObject, item, sc)


_fl_set_choice_entries = cfuncproto(
        so_libforms, "fl_set_choice_entries",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_PUP_ENTRY)],
        """int fl_set_choice_entries(FL_OBJECT * ob, FL_PUP_ENTRY * ent)    DEPRECATED
        """)
def fl_set_choice_entries(pObject, ent):
    """ fl_set_choice_entries(pObject, ent) -> num.
    """

    retval = _fl_set_choice_entries(pObject, ent)
    return retval


_fl_set_choice_notitle = cfuncproto(
        so_libforms, "fl_set_choice_notitle",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_choice_notitle(FL_OBJECT * ob, int n)
        """)
def fl_set_choice_notitle(pObject, n):
    """ fl_set_choice_notitle(pObject, n) -> num.
    """

    retval = _fl_set_choice_notitle(pObject, n)
    return retval


#################################
# forms.h (clipbd.h)
# prototypes for clipboard stuff
#################################

FL_CPTYPE = Atom
FL_LOSE_SELECTION_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
                     cty.c_long)
FL_SELECTION_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
                    cty.c_long, cty.c_void_p, cty.c_long)

FL_SELECTION_CALLBACK = FL_SELECTION_CB
FL_LOSE_SELECTION_CALLBACK = FL_LOSE_SELECTION_CB


_fl_stuff_clipboard = cfuncproto(
        so_libforms, "fl_stuff_clipboard",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_long, cty.c_void_p,
        cty.c_long, FL_LOSE_SELECTION_CB],
        """int fl_stuff_clipboard(FL_OBJECT * ob, long int type,
           const char * data, long int size,
           FL_LOSE_SELECTION_CB lose_callback)
        """)
def fl_stuff_clipboard(pObject, clipbdtype, data, size, py_lose_callback):
    """ fl_stuff_clipboard(pObject, clipbdtype, data, size, py_lose_callback) -> num.
    """

    c_lose_callback = FL_LOSE_SELECTION_CB(py_lose_callback)
    _cfunc_refs[get_rand_dictkey()] = c_lose_callback
    retval = _fl_stuff_clipboard(pObject, clipbdtype, data, size,
                                 c_lose_callback)
    return retval


_fl_request_clipboard = cfuncproto(
        so_libforms, "fl_request_clipboard",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_long, FL_SELECTION_CB],
        """int fl_request_clipboard(FL_OBJECT * ob, long int type,
           FL_SELECTION_CB got_it_callback)
        """)
def fl_request_clipboard(pObject, clipbdtype, py_got_it_callback):
    """ fl_request_clipboard(pObject, clipbdtype, py_got_it_callback) -> num.
    """

    c_got_it_callback = FL_SELECTION_CB(py_got_it_callback)
    _cfunc_refs[get_rand_dictkey()] = c_got_it_callback
    retval = _fl_request_clipboard(pObject, clipbdtype, c_got_it_callback)
    return retval


#################################
# forms.h (clock.h)
#################################

# values for unnamed enumeration
FL_ANALOG_CLOCK = 0
FL_DIGITAL_CLOCK = 1

FL_CLOCK_BOXTYPE = FL_UP_BOX
FL_CLOCK_COL1 = FL_INACTIVE_COL
FL_CLOCK_COL2 = FL_BOTTOM_BCOL
FL_CLOCK_LCOL = FL_BLACK
FL_CLOCK_ALIGN = FL_ALIGN_BOTTOM

FL_CLOCK_TOPCOL = FL_COL1


_fl_create_clock = cfuncproto(
        so_libforms, "fl_create_clock",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_clock(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * s)
        """)
def fl_create_clock(clocktype, x, y, w, h, s):
    """ fl_create_clock(clocktype, x, y, w, h, s) -> pObject
    """

    retval = _fl_create_clock(clocktype, x, y, w, h, s)
    return retval


_fl_add_clock = cfuncproto(
        so_libforms, "fl_add_clock",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_clock(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * s)
        """)
def fl_add_clock(clocktype, x, y, w, h, s):
    """ fl_add_clock(clocktype, x, y, w, h, s) -> pObject
    """

    retval = _fl_add_clock(clocktype, x, y, w, h, s)
    return retval


_fl_get_clock = cfuncproto(
        so_libforms, "fl_get_clock",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
        """void fl_get_clock(FL_OBJECT * ob, int * h, int * m, int * s)
        """)
def fl_get_clock(pObject, h, m, s):
    """ fl_get_clock(pObject, h, m, s)
    """

    _fl_get_clock(pObject, h, m, s)


_fl_set_clock_adjustment = cfuncproto(
        so_libforms, "fl_set_clock_adjustment",
        cty.c_long, [cty.POINTER(FL_OBJECT), cty.c_long],
        """)long int fl_set_clock_adjustment(FL_OBJECT * ob, long int offset)
        """)
def fl_set_clock_adjustment(pObject, offset):
    """ fl_set_clock_adjustment(pObject, offset) -> num.
    """

    retval = _fl_set_clock_adjustment(pObject, offset)
    return retval


_fl_set_clock_ampm = cfuncproto(
        so_libforms, "fl_set_clock_ampm",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_clock_ampm(FL_OBJECT * ob, int y)
        """)
def fl_set_clock_ampm(pObject, y):
    """ fl_set_clock_ampm(pObject, y)
    """

    _fl_set_clock_ampm(pObject, y)


######################
# forms.h (counter.h)
######################

# values for enumeration 'FL_COUNTER_TYPE'
FL_COUNTER_TYPE = cty.c_int # enum
FL_NORMAL_COUNTER = 0
FL_SIMPLE_COUNTER = 1

# Defaults
FL_COUNTER_BOXTYPE = FL_UP_BOX
FL_COUNTER_COL1 = FL_COL1
FL_COUNTER_COL2 = FL_BLUE           # ct label
FL_COUNTER_LCOL = FL_LCOL           # ct reporting
FL_COUNTER_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_COUNTER_BW = (FL_BOUND_WIDTH - 1)


# Routines

_fl_create_counter = cfuncproto(
        so_libforms, "fl_create_counter",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_counter(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_counter(countertype, x, y, w, h, label):
    """ fl_create_counter(countertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_counter(countertype, x, y, w, h, label)
    return retval


_fl_add_counter = cfuncproto(
        so_libforms, "fl_add_counter",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_counter(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_counter(countertype, x, y, w, h, label):
    """ fl_add_counter(countertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_counter(countertype, x, y, w, h, label)
    return retval


_fl_set_counter_value = cfuncproto(
        so_libforms, "fl_set_counter_value",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_counter_value(FL_OBJECT * ob, double val)
        """)
def fl_set_counter_value(pObject, val):
    """ fl_set_counter_value(pObject, val)
    """

    _fl_set_counter_value(pObject, val)


_fl_set_counter_bounds = cfuncproto(
        so_libforms, "fl_set_counter_bounds",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_counter_bounds(FL_OBJECT * ob, double min, double max)
        """)
def fl_set_counter_bounds(pObject, min_bound, max_bound):
    """ fl_set_counter_bounds(pObject, min_bound, max_bound)
    """

    _fl_set_counter_bounds(pObject, min_bound, max_bound)


_fl_set_counter_step = cfuncproto(
        so_libforms, "fl_set_counter_step",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_counter_step(FL_OBJECT * ob, double s, double l)
        """)
def fl_set_counter_step(pObject, s, l):
    """ fl_set_counter_step(pObject, s, l)
    """

    _fl_set_counter_step(pObject, s, l)


_fl_set_counter_precision = cfuncproto(
        so_libforms, "fl_set_counter_precision",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_counter_precision(FL_OBJECT * ob, int prec)
        """)
def fl_set_counter_precision(pObject, prec):
    """ fl_set_counter_precision(pObject, prec)
    """

    _fl_set_counter_precision(pObject, prec)


_fl_get_counter_precision = cfuncproto(
        so_libforms, "fl_get_counter_precision",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_counter_precision(FL_OBJECT * ob)
        """)
def fl_get_counter_precision(pObject):
    """ fl_get_counter_precision(pObject) -> num.
    """

    retval = _fl_get_counter_precision(pObject)
    return retval


_fl_set_counter_return = cfuncproto(
        so_libforms, "fl_set_counter_return",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_counter_return(FL_OBJECT * ob, int how)
        """)
def fl_set_counter_return(pObject, how):
    """ fl_set_counter_return(pObject, how)
    """

    _fl_set_counter_return(pObject, how)


_fl_get_counter_value = cfuncproto(
        so_libforms, "fl_get_counter_value",
        cty.c_double, [cty.POINTER(FL_OBJECT)],
        """double fl_get_counter_value(FL_OBJECT * ob)
        """)
def fl_get_counter_value(pObject):
    """ fl_get_counter_value(pObject) -> num.
    """

    retval = _fl_get_counter_value(pObject)
    return retval


_fl_get_counter_bounds = cfuncproto(
        so_libforms, "fl_get_counter_bounds",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_counter_bounds(FL_OBJECT * ob, double * min, double * max)
        """)
def fl_get_counter_bounds(pObject, min_bound, max_bound):
    """ fl_get_counter_bounds(pObject, min_bound, max_bound)
    """

    _fl_get_counter_bounds(pObject, min_bound, max_bound)


_fl_get_counter_step = cfuncproto(
        so_libforms, "fl_get_counter_step",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_counter_step(FL_OBJECT * ob, double * s, double * l)
        """)
def fl_get_counter_step(pObject, s, l):
    """ fl_get_counter_step(pObject, s, l)
    """

    _fl_get_counter_step(pObject, s, l)


_fl_set_counter_filter = cfuncproto(
        so_libforms, "fl_set_counter_filter",
        None, [cty.POINTER(FL_OBJECT), FL_VAL_FILTER],
        """void fl_set_counter_filter(FL_OBJECT * ob, FL_VAL_FILTER filter)
        """)
def fl_set_counter_filter(pObject, py_filter):
    """ fl_set_counter_filter(pObject, filter)
    """

    c_filter = FL_VAL_FILTER(py_filter)
    _cfunc_refs[get_rand_dictkey()] = c_filter
    _fl_set_counter_filter(pObject, c_filter)


# Functions to set and get the timeout value used by the
# counter code to control modification of the counter value.

_fl_get_counter_repeat = cfuncproto(
        so_libforms, "fl_get_counter_repeat",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_counter_repeat(FL_OBJECT * ob)
        """)
def fl_get_counter_repeat(pObject):
    """ fl_get_counter_repeat(pObject) -> num.
    """

    retval = _fl_get_counter_repeat(pObject)
    return retval


_fl_set_counter_repeat = cfuncproto(
        so_libforms, "fl_set_counter_repeat",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_counter_repeat(FL_OBJECT * ob, int millisec)
        """)
def fl_set_counter_repeat(pObject, millisec):
    """ fl_set_counter_repeat(pObject, millisec)
    """

    _fl_set_counter_repeat(pObject, millisec)


_fl_get_counter_min_repeat = cfuncproto(
        so_libforms, "fl_get_counter_min_repeat",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_counter_min_repeat(FL_OBJECT * ob)
        """)
def fl_get_counter_min_repeat(pObject):
    """ fl_get_counter_min_repeat(pObject) -> num.
    """

    retval = _fl_get_counter_min_repeat(pObject)
    return retval


_fl_set_counter_min_repeat = cfuncproto(
        so_libforms, "fl_set_counter_min_repeat",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_counter_min_repeat(FL_OBJECT * ob, int millisec)
        """)
def fl_set_counter_min_repeat(pObject, millisec):
    """ fl_set_counter_min_repeat(pObject, millisec)
    """

    _fl_set_counter_min_repeat(pObject, millisec)


_fl_get_counter_speedjump = cfuncproto(
        so_libforms, "fl_get_counter_speedjump",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_counter_speedjump(FL_OBJECT * ob)
        """)
def fl_get_counter_speedjump(pObject):
    """ fl_get_counter_speedjump(pObject) -> num.
    """

    retval = _fl_get_counter_speedjump(pObject)
    return retval


_fl_set_counter_speedjump = cfuncproto(
        so_libforms, "fl_set_counter_speedjump",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_counter_speedjump(FL_OBJECT * ob, int yes_no)
        """)
def fl_set_counter_speedjump(pObject, yes_no):
    """ fl_set_counter_speedjump(pObject, yes_no)
    """

    _fl_set_counter_speedjump(pObject, yes_no)


#############################
# forms.h (cursor.h)
# Cursor defs and prototypes
#############################

# *** start - from /usr/include/cursorfont.h ***
XC_num_glyphs = 154
XC_X_cursor = 0
XC_arrow = 2
XC_based_arrow_down = 4
XC_based_arrow_up = 6
XC_boat = 8
XC_bogosity = 10
XC_bottom_left_corner = 12
XC_bottom_right_corner = 14
XC_bottom_side = 16
XC_bottom_tee = 18
XC_box_spiral = 20
XC_center_ptr = 22
XC_circle = 24
XC_clock = 26
XC_coffee_mug = 28
XC_cross = 30
XC_cross_reverse = 32
XC_crosshair = 34
XC_diamond_cross = 36
XC_dot = 38
XC_dotbox = 40
XC_double_arrow = 42
XC_draft_large = 44
XC_draft_small = 46
XC_draped_box = 48
XC_fleur = 52
XC_gobbler = 54
XC_gumby = 56
XC_hand1 = 58
XC_hand2 = 60
XC_heart = 62
XC_icon = 64
XC_iron_cross = 66
XC_left_ptr = 68
XC_left_side = 70
XC_left_tee = 72
XC_leftbutton = 74
XC_ll_angle = 76
XC_lr_angle = 78
XC_man = 80
XC_middlebutton = 82
XC_mouse = 84
XC_pencil = 86
XC_pirate = 88
XC_plus = 90
XC_question_arrow = 92
XC_right_ptr = 94
XC_right_side = 96
XC_right_tee = 98
XC_rightbutton = 100
XC_rtl_logo = 102
XC_sailboat = 104
XC_sb_down_arrow = 106
XC_sb_h_double_arrow = 108
XC_sb_left_arrow = 110
XC_sb_right_arrow = 112
XC_sb_up_arrow = 114
XC_sb_v_double_arrow = 116
XC_shuttle = 118
XC_sizing = 120
XC_spider = 122
XC_spraycan = 124
XC_star = 126
XC_target = 128
XC_tcross = 130
XC_top_left_arrow = 132
XC_top_left_corner = 134
XC_top_right_corner = 136
XC_top_side = 138
XC_top_tee = 140
XC_trek = 142
XC_ul_angle = 144
XC_umbrella = 146
XC_ur_angle = 148
XC_watch = 150
XC_xterm = 152
# *** end - from /usr/include/cursorfont.h ***

# values for unnamed enumeration
FL_INVISIBLE_CURSOR = -2
FL_DEFAULT_CURSOR = -1
FL_BUSY_CURSOR = XC_watch
FL_CROSSHAIR_CURSOR = XC_tcross
FL_KILL_CURSOR = XC_pirate
FL_NWARROW_CURSOR = XC_top_left_arrow
FL_NEARROW_CURSOR = XC_arrow

XC_invisible = FL_INVISIBLE_CURSOR


_fl_set_cursor = cfuncproto(
        so_libforms, "fl_set_cursor",
        None, [Window, cty.c_int],
        """void fl_set_cursor(Window win, int name)
        """)
def fl_set_cursor(win, name):
    """ fl_set_cursor(win, name)
    """

    _fl_set_cursor(win, name)


_fl_set_cursor_color = cfuncproto(
        so_libforms, "fl_set_cursor_color",
        None, [cty.c_int, FL_COLOR, FL_COLOR],
        """void fl_set_cursor_color(int name, FL_COLOR fg, FL_COLOR bg)
        """)
def fl_set_cursor_color(name, fg, bg):
    """ fl_set_cursor_color(name, fg, bg)
    """

    _fl_set_cursor_color(name, fg, bg)


_fl_create_bitmap_cursor = cfuncproto(
        so_libforms, "fl_create_bitmap_cursor",
        cty.c_int, [STRING, STRING, cty.c_int, cty.c_int, cty.c_int,
        cty.c_int],
        """int fl_create_bitmap_cursor(const char * source,
           const char * mask, int w, int h, int hotx, int hoty)
        """)
def fl_create_bitmap_cursor(source, mask, w, h, hotx, hoty):
    """ fl_create_bitmap_cursor(source, mask, w, h, hotx, hoty) -> num.
    """

    retval = _fl_create_bitmap_cursor(source, mask, w, h, hotx, hoty)
    return retval


_fl_create_animated_cursor = cfuncproto(
        so_libforms, "fl_create_animated_cursor",
        cty.c_int, [cty.POINTER(cty.c_int), cty.c_int],
        """int fl_create_animated_cursor(int * cur_names, int timeout)
        """)
def fl_create_animated_cursor(cur_names, timeout):
    """ fl_create_animated_cursor(cur_names, timeout) -> num.
    """

    retval = _fl_create_animated_cursor(cur_names, timeout)
    return retval


_fl_get_cursor_byname = cfuncproto(
        so_libforms, "fl_get_cursor_byname",
        Cursor, [cty.c_int],
        """)Cursor fl_get_cursor_byname(int name)
        """)
def fl_get_cursor_byname(name):
    """ fl_get_cursor_byname(name) -> cursor
    """

    retval = _fl_get_cursor_byname(name)
    return retval


###################
# forms.h (dial.h)
###################

# values for enumeration 'FL_DIAL_TYPE'
FL_DIAL_TYPE = cty.c_int # enum
FL_NORMAL_DIAL = 0
FL_LINE_DIAL = 1
FL_FILL_DIAL = 2

# values for unnamed enumeration
FL_DIAL_CW = 0
FL_DIAL_CCW = 1

# Defaults
FL_DIAL_BOXTYPE = FL_FLAT_BOX
FL_DIAL_COL1 = FL_COL1
FL_DIAL_COL2 = FL_RIGHT_BCOL
FL_DIAL_LCOL = FL_LCOL
FL_DIAL_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_DIAL_TOPCOL = FL_COL1

# Routines

_fl_create_dial = cfuncproto(
        so_libforms, "fl_create_dial",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_dial(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_dial(dialtype, x, y, w, h, label):
    """ fl_create_dial(dialtype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_dial(dialtype, x, y, w, h, label)
    return retval


_fl_add_dial = cfuncproto(
        so_libforms, "fl_add_dial",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_dial(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_dial(dialtype, x, y, w, h, label):
    """ fl_add_dial(dialtype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_dial(dialtype, x, y, w, h, label)
    return retval


_fl_set_dial_value = cfuncproto(
        so_libforms, "fl_set_dial_value",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_dial_value(FL_OBJECT * ob, double val)
        """)
def fl_set_dial_value(pObject, val):
    """ fl_set_dial_value(pObject, val)
    """

    _fl_set_dial_value(pObject, val)


_fl_get_dial_value = cfuncproto(
        so_libforms, "fl_get_dial_value",
        cty.c_double, [cty.POINTER(FL_OBJECT)],
        """double fl_get_dial_value(FL_OBJECT * ob)
        """)
def fl_get_dial_value(pObject):
    """ fl_get_dial_value(pObject) -> num.
    """

    retval = _fl_get_dial_value(pObject)
    return retval


_fl_set_dial_bounds = cfuncproto(
        so_libforms, "fl_set_dial_bounds",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_dial_bounds(FL_OBJECT * ob, double min, double max)
        """)
def fl_set_dial_bounds(pObject, min, max):
    """ fl_set_dial_bounds(pObject, min, max)
    """

    _fl_set_dial_bounds(pObject, min, max)


_fl_get_dial_bounds = cfuncproto(
        so_libforms, "fl_get_dial_bounds",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_dial_bounds(FL_OBJECT * ob, double * min, double * max)
        """)
def fl_get_dial_bounds(pObject, min, max):
    """ fl_get_dial_bounds(pObject, min, max)
    """

    _fl_get_dial_bounds(pObject, min, max)


_fl_set_dial_step = cfuncproto(
        so_libforms, "fl_set_dial_step",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_dial_step(FL_OBJECT * ob, double value)
        """)
def fl_set_dial_step(pObject, value):
    """ fl_set_dial_step(pObject, value)
    """

    _fl_set_dial_step(pObject, value)


_fl_set_dial_return = cfuncproto(
        so_libforms, "fl_set_dial_return",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_dial_return(FL_OBJECT * ob, int value)
        """)
def fl_set_dial_return(pObject, value):
    """ fl_set_dial_return(pObject, value)
    """

    _fl_set_dial_return(pObject, value)


_fl_set_dial_angles = cfuncproto(
        so_libforms, "fl_set_dial_angles",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_dial_angles(FL_OBJECT * ob, double amin, double amax)
        """)
def fl_set_dial_angles(pObject, amin, amax):
    """ fl_set_dial_angles(pObject, amin, amax)
    """

    _fl_set_dial_angles(pObject, amin, amax)


_fl_set_dial_cross = cfuncproto(
        so_libforms, "fl_set_dial_cross",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_dial_cross(FL_OBJECT * ob, int flag)
        """)
def fl_set_dial_cross(pObject, flag):
    """ fl_set_dial_cross(pObject, flag)
    """

    _fl_set_dial_cross(pObject, flag)


fl_set_dial_crossover = fl_set_dial_cross


_fl_set_dial_direction = cfuncproto(
        so_libforms, "fl_set_dial_direction",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_dial_direction(FL_OBJECT * ob, int dir)
        """)
def fl_set_dial_direction(pObject, dir):
    """ fl_set_dial_direction(pObject, dir)
    """

    _fl_set_dial_direction(pObject, dir)


############################################
# forms.h (filesys.h)
# Convenience functions to read a directory
############################################

# File types
# values for unnamed enumeration
FT_FILE = 0
FT_DIR = 1
FT_LINK = 2
FT_SOCK = 3
FT_FIFO = 4
FT_BLK = 5
FT_CHR = 6
FT_OTHER = 7

class FL_Dirlist(cty.Structure):
    pass
FL_Dirlist._fields_ = [
    ('name', STRING),               # entry name
    ('type', cty.c_int),              # FILE_TYPE
    ('dl_mtime', cty.c_long),         # file modification time
    ('dl_size', cty.c_ulong),         # file size in bytes
]

# values for unnamed enumeration
FL_ALPHASORT = 1            # sort in alphabetic order
FL_RALPHASORT = 2           # sort in reverse alphabetic order
FL_MTIMESORT = 3            # sort according to modifcation time
FL_RMTIMESORT = 4           # sort in reverse modificaiton time
FL_SIZESORT = 5             # sort in increasing size order
FL_RSIZESORT = 6            # sort in decreasing size order
FL_CASEALPHASORT = 7        # sort case insensitive
FL_RCASEALPHASORT = 8       # sort case insensitive

FL_DIRLIST_FILTER = cty.CFUNCTYPE(cty.c_int, STRING, cty.c_int)

# read dir with pattern filtering. All dirs read might be cached.
# must not change dirlist in anyway.

_fl_get_dirlist = cfuncproto(
        so_libforms, "fl_get_dirlist",
        cty.POINTER(FL_Dirlist), [STRING, STRING, cty.POINTER(cty.c_int),
        cty.c_int],
        """const char * fl_get_dirlist(const char * dir,
           const char * pattern, int * n, int rescan)
        """)
def fl_get_dirlist(dir, pattern, n, rescan):
    """ fl_get_dirlist(dir, pattern, n, rescan) -> dirlist class
    """

    retval = _fl_get_dirlist(dir, pattern, n, rescan)
    return retval


_fl_set_dirlist_filter = cfuncproto(
        so_libforms, "fl_set_dirlist_filter",
        FL_DIRLIST_FILTER, [FL_DIRLIST_FILTER],
        """FL_DIRLIST_FILTER fl_set_dirlist_filter(FL_DIRLIST_FILTER filter)
        """)
def fl_set_dirlist_filter(py_filter):
    """ fl_set_dirlist_filter(py_filter) -> dirlist_filter func.
    """

    c_filter = FL_DIRLIST_FILTER(py_filter)
    _cfunc_refs[get_rand_dictkey()] = c_filter
    retval = _fl_set_dirlist_filter(c_filter)
    return retval


_fl_set_dirlist_sort = cfuncproto(
        so_libforms, "fl_set_dirlist_sort",
        cty.c_int, [cty.c_int],
        """int fl_set_dirlist_sort(int method)
        """)
def fl_set_dirlist_sort(method):
    """ fl_set_dirlist_sort(method) -> num.
    """

    retval = _fl_set_dirlist_sort(method)
    return retval


_fl_set_dirlist_filterdir = cfuncproto(
        so_libforms, "fl_set_dirlist_filterdir",
        cty.c_int, [cty.c_int],
        """int fl_set_dirlist_filterdir(int yes)
        """)
def fl_set_dirlist_filterdir(yes):
    """ fl_set_dirlist_filterdir(yes) -> num.
    """

    retval = _fl_set_dirlist_filterdir(yes)
    return retval


_fl_free_dirlist = cfuncproto(
        so_libforms, "fl_free_dirlist",
        None, [cty.POINTER(FL_Dirlist)],
        """void fl_free_dirlist(FL_Dirlist * dl)
        """)
def fl_free_dirlist(dl):
    """ fl_free_dirlist(dl)
    """

    _fl_free_dirlist(dl)


# Free all directory caches

_fl_free_all_dirlist = cfuncproto(
        so_libforms, "fl_free_all_dirlist",
        None, [],
        """void fl_free_all_dirlist()
        """)
def fl_free_all_dirlist():
    """ fl_free_all_dirlist()
    """

    _fl_free_all_dirlist()


_fl_is_valid_dir = cfuncproto(
        so_libforms, "fl_is_valid_dir",
        cty.c_int, [STRING],
        """int fl_is_valid_dir(const char * name)
        """)
def fl_is_valid_dir(name):
    """ fl_is_valid_dir(name) -> num.
    """

    retval = _fl_is_valid_dir(name)
    return retval


_fl_fmtime = cfuncproto(
        so_libforms, "fl_fmtime",
        cty.c_ulong, [STRING],
        """long unsigned int fl_fmtime(const char * s)
        """)
def fl_fmtime(s):
    """ fl_fmtime(s) -> num.
    """

    retval = _fl_fmtime(s)
    return retval


_fl_fix_dirname = cfuncproto(
        so_libforms, "fl_fix_dirname",
        STRING, [STRING],
        """char * fl_fix_dirname(char * dir)
        """)
def fl_fix_dirname(dir):
    """ fl_fix_dirname(dir) -> dirname string
    """

    retval = _fl_fix_dirname(dir)
    return retval


###################
# forms.h (flps.h)
###################

# postscript stuff
# values for unnamed enumeration
FLPS_AUTO = 0              # switch to landscale if does not fit
FLPS_LANDSCAPE = 1         # landscape always
FLPS_PORTRAIT = 2          # portrait always
FLPS_BESTFIT = 3           # even margins/best fit

# values for unnamed enumeration
FLPS_BW = -1
FLPS_GRAYSCALE = 0
FLPS_COLOR = 1

class FLPS_CONTROL(cty.Structure):
    pass
FLPS_CONTROL._fields_ = [
    ('ps_color', cty.c_int),
    ('orientation', cty.c_int),
    ('auto_fit', cty.c_int),
    ('drawbox', cty.c_int),
    ('eps', cty.c_int),
    ('xdpi', cty.c_float),
    ('ydpi', cty.c_float),
    ('paper_w', cty.c_float),
    ('paper_h', cty.c_float),
    ('gamma', cty.c_float),
    ('tmpdir', STRING),
    ('printer_dpi', cty.c_int),
    ('hm', cty.c_float),
    ('vm', cty.c_float),
    ('xscale', cty.c_float),
    ('yscale', cty.c_float),
    ('scale_text', cty.c_int),
    ('first_page_only', cty.c_int),
    ('clip', cty.c_int),
]

_flps_init = cfuncproto(
        so_libflimage, "flps_init",
        cty.POINTER(FLPS_CONTROL), [],
        """)FLPS_CONTROL * flps_init()
        """)
def flps_init():
    """ flps_init() -> flps_control class
    """

    retval = _flps_init()
    return retval


_fl_object_ps_dump = cfuncproto(
        so_libflimage, "fl_object_ps_dump",
        cty.c_int, [cty.POINTER(FL_OBJECT), STRING],
        """int fl_object_ps_dump(FL_OBJECT * ob, const char * fname)
        """)
def fl_object_ps_dump(pObject, fname):
    """ fl_object_ps_dump(pObject, fname) -> num.
    """

    retval = _fl_object_ps_dump(pObject, fname)
    return retval


#########################
# forms. (formbrowser.h)
#########################

# values for unnamed enumeration
FL_NORMAL_FORMBROWSER = 0

# values for unnamed enumeration
FL_SMOOTH_SCROLL = 0
FL_JUMP_SCROLL = 1

FL_FORMBROWSER_BOXTYPE = FL_DOWN_BOX
FL_FORMBROWSER_COL1 = FL_COL1
FL_FORMBROWSER_ALIGN = FL_ALIGN_TOP


_fl_addto_formbrowser = cfuncproto(
        so_libforms, "fl_addto_formbrowser",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_FORM)],
        """int fl_addto_formbrowser(FL_OBJECT * ob, FL_FORM * form)
        """)
def fl_addto_formbrowser(pObject, pForm):
    """ fl_addto_formbrowser(pObject, pForm) -> num.
    """

    retval = _fl_addto_formbrowser(pObject, pForm)
    return retval


_fl_delete_formbrowser_bynumber = cfuncproto(
        so_libforms, "fl_delete_formbrowser_bynumber",
        cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT), cty.c_int],
        """FL_FORM * fl_delete_formbrowser_bynumber(FL_OBJECT * ob, int num)
        """)
def fl_delete_formbrowser_bynumber(pObject, num):
    """ fl_delete_formbrowser_bynumber(pObject, num) -> pForm
    """

    retval = _fl_delete_formbrowser_bynumber(pObject, num)
    return retval


_fl_delete_formbrowser = cfuncproto(
        so_libforms, "fl_delete_formbrowser",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_FORM)],
        """int fl_delete_formbrowser(FL_OBJECT * ob, FL_FORM * candidate_form)
        """)
def fl_delete_formbrowser(pObject, candidate_form):
    """ fl_delete_formbrowser(pObject, candidate_form) -> num.
    """

    retval = _fl_delete_formbrowser(pObject, candidate_form)
    return retval


_fl_replace_formbrowser = cfuncproto(
        so_libforms, "fl_replace_formbrowser",
        cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT), cty.c_int,
        cty.POINTER(FL_FORM)],
        """FL_FORM * fl_replace_formbrowser(FL_OBJECT * ob, int num,
           FL_FORM * form)
        """)
def fl_replace_formbrowser(pObject, num, pForm):
    """ fl_replace_formbrowser(pObject, num, pForm)
    """

    retval = _fl_replace_formbrowser(pObject, num, pForm)
    return retval


_fl_insert_formbrowser = cfuncproto(
        so_libforms, "fl_insert_formbrowser",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int, cty.POINTER(FL_FORM)],
        """int fl_insert_formbrowser(FL_OBJECT * ob, int line,
           FL_FORM * new_form)
        """)
def fl_insert_formbrowser(pObject, line, new_form):
    """ fl_insert_formbrowser(pObject, line, new_form) -> num.
    """

    retval = _fl_insert_formbrowser(pObject, line, new_form)
    return retval


_fl_get_formbrowser_area = cfuncproto(
        so_libforms, "fl_get_formbrowser_area",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
        """int fl_get_formbrowser_area(FL_OBJECT * ob, int * x, int * y,
           int * w, int * h)
        """)
def fl_get_formbrowser_area(pObject, x, y, w, h):
    """ fl_get_formbrowser_area(pObject, x, y, w, h) -> num.
    """

    retval = _fl_get_formbrowser_area(pObject, x, y, w, h)
    return retval


_fl_set_formbrowser_scroll = cfuncproto(
        so_libforms, "fl_set_formbrowser_scroll",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_formbrowser_scroll(FL_OBJECT * ob, int how)
        """)
def fl_set_formbrowser_scroll(pObject, how):
    """ fl_set_formbrowser_scroll(pObject, how)
    """

    _fl_set_formbrowser_scroll(pObject, how)


_fl_set_formbrowser_hscrollbar = cfuncproto(
        so_libforms, "fl_set_formbrowser_hscrollbar",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_formbrowser_hscrollbar(FL_OBJECT * ob, int how)
        """)
def fl_set_formbrowser_hscrollbar(pObject, how):
    """ fl_set_formbrowser_hscrollbar(pObject, how)
    """

    _fl_set_formbrowser_hscrollbar(pObject, how)


_fl_set_formbrowser_vscrollbar = cfuncproto(
        so_libforms, "fl_set_formbrowser_vscrollbar",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_formbrowser_vscrollbar(FL_OBJECT * ob, int how)
        """)
def fl_set_formbrowser_vscrollbar(pObject, how):
    """ fl_set_formbrowser_vscrollbar(pObject, how)
    """

    _fl_set_formbrowser_vscrollbar(pObject, how)


_fl_get_formbrowser_topform = cfuncproto(
        so_libforms, "fl_get_formbrowser_topform",
        cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT)],
        """FL_FORM * fl_get_formbrowser_topform(FL_OBJECT * ob)
        """)
def fl_get_formbrowser_topform(pObject):
    """ fl_get_formbrowser_topform(pObject) -> pForm
    """

    retval = _fl_get_formbrowser_topform(pObject)
    return retval


_fl_set_formbrowser_topform = cfuncproto(
        so_libforms, "fl_set_formbrowser_topform",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_FORM)],
        """int fl_set_formbrowser_topform(FL_OBJECT * ob, FL_FORM * form)
        """)
def fl_set_formbrowser_topform(pObject, pForm):
    """ fl_set_formbrowser_topform(pObject, pForm) -> num.
    """

    retval = _fl_set_formbrowser_topform(pObject, pForm)
    return retval


_fl_set_formbrowser_topform_bynumber = cfuncproto(
        so_libforms, "fl_set_formbrowser_topform_bynumber",
        cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT), cty.c_int],
        """FL_FORM * fl_set_formbrowser_topform_bynumber(FL_OBJECT * ob, int n)
        """)
def fl_set_formbrowser_topform_bynumber(pObject, n):
    """ fl_set_formbrowser_topform_bynumber(pObject, n) -> pForm
    """

    retval = _fl_set_formbrowser_topform_bynumber(pObject, n)
    return retval


_fl_set_formbrowser_xoffset = cfuncproto(
        so_libforms, "fl_set_formbrowser_xoffset",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_formbrowser_xoffset(FL_OBJECT * ob, int offset)
        """)
def fl_set_formbrowser_xoffset(pObject, offset):
    """ fl_set_formbrowser_xoffset(pObject, offset) -> num.
    """

    retval = _fl_set_formbrowser_xoffset(pObject, offset)
    return retval


_fl_set_formbrowser_yoffset = cfuncproto(
        so_libforms, "fl_set_formbrowser_yoffset",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_formbrowser_yoffset(FL_OBJECT * ob, int offset)
        """)
def fl_set_formbrowser_yoffset(pObject, offset):
    """ fl_set_formbrowser_yoffset(pObject, offset) -> num.
    """

    retval = _fl_set_formbrowser_yoffset(pObject, offset)
    return retval


_fl_get_formbrowser_xoffset = cfuncproto(
        so_libforms, "fl_get_formbrowser_xoffset",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_formbrowser_xoffset(FL_OBJECT * ob)
        """)
def fl_get_formbrowser_xoffset(pObject):
    """ fl_get_formbrowser_xoffset(pObject) -> num.
    """

    retval = _fl_get_formbrowser_xoffset(pObject)
    return retval


_fl_get_formbrowser_yoffset = cfuncproto(
        so_libforms, "fl_get_formbrowser_yoffset",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_formbrowser_yoffset(FL_OBJECT * ob)
        """)
def fl_get_formbrowser_yoffset(pObject):
    """ fl_get_formbrowser_yoffset(pObject) -> num.
    """

    retval = _fl_get_formbrowser_yoffset(pObject)
    return retval


_fl_find_formbrowser_form_number = cfuncproto(
        so_libforms, "fl_find_formbrowser_form_number",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_FORM)],
        """int fl_find_formbrowser_form_number(FL_OBJECT * ob, FL_FORM * candidate_form)
        """)
def fl_find_formbrowser_form_number(pObject, pForm_candidate):
    """ fl_find_formbrowser_form_number(pObject, pForm_candidate) -> num.
    """

    retval = _fl_find_formbrowser_form_number(pObject, pForm_candidate)
    return retval


_fl_add_formbrowser = cfuncproto(
        so_libforms, "fl_add_formbrowser",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_formbrowser(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_formbrowser(browsertype, x, y, w, h, label):
    """ fl_add_formbrowser(browsertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_formbrowser(browsertype, x, y, w, h, label)
    return retval


_fl_create_formbrowser = cfuncproto(
        so_libforms, "fl_create_formbrowser",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_formbrowser(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_formbrowser(browsertype, x, y, w, h, label):
    """ fl_create_formbrowser(browsertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_formbrowser(browsertype, x, y, w, h, label)
    return retval


_fl_get_formbrowser_numforms = cfuncproto(
        so_libforms, "fl_get_formbrowser_numforms",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_formbrowser_numforms(FL_OBJECT * ob)
        """)
def fl_get_formbrowser_numforms(pObject):
    """ fl_get_formbrowser_numforms(pObject) -> forms num.
    """

    retval = _fl_get_formbrowser_numforms(pObject)
    return retval


_fl_get_formbrowser_form = cfuncproto(
        so_libforms, "fl_get_formbrowser_form",
        cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT), cty.c_int],
        """FL_FORM * fl_get_formbrowser_form(FL_OBJECT * ob, int n)
        """)
def fl_get_formbrowser_form(pObject, n):
    """ fl_get_formbrowser_form(pObject, n) -> pForm
    """

    retval = _fl_get_formbrowser_form(pObject, n)
    return retval


####################
# forms.h (frame.h)
####################

# types of frames
# values for unnamed enumeration
FL_NO_FRAME = 0
FL_UP_FRAME = 1
FL_DOWN_FRAME = 2
FL_BORDER_FRAME = 3
FL_SHADOW_FRAME = 4
FL_ENGRAVED_FRAME = 5
FL_ROUNDED_FRAME = 6
FL_EMBOSSED_FRAME = 7
FL_OVAL_FRAME = 8

FL_FRAME_COL1 = FL_BLACK        # border color
FL_FRAME_COL2 = FL_COL1         # label background
FL_FRAME_LCOL = FL_BLACK        # label color

_fl_create_frame = cfuncproto(
        so_libforms, "fl_create_frame",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_frame(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_frame(frametype, x, y, w, h, label):
    """ fl_create_frame(frametype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_frame(frametype, x, y, w, h, label)
    return retval


_fl_add_frame = cfuncproto(
        so_libforms, "fl_add_frame",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_frame(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_frame(frametype, x, y, w, h, label):
    """ fl_add_frame(frametype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_frame(frametype, x, y, w, h, label)
    return retval


# labeld frame

_fl_create_labelframe = cfuncproto(
        so_libforms, "fl_create_labelframe",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_labelframe(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_labelframe(frametype, x, y, w, h, label):
    """ fl_create_labelframe(frametype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_labelframe(frametype, x, y, w, h, label)
    return retval


_fl_add_labelframe = cfuncproto(
        so_libforms, "fl_add_labelframe",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_labelframe(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_labelframe(frametype, x, y, w, h, label):
    """ fl_add_labelframe(frametype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_labelframe(frametype, x, y, w, h, label)
    return retval


#####################
# forms.h (free.h)
# Object Class: Free
#####################

# values for enumeration 'FL_FREE_TYPE'
FL_FREE_TYPE = cty.c_int # enum
FL_NORMAL_FREE = 0
FL_INACTIVE_FREE = 1
FL_INPUT_FREE = 2
FL_CONTINUOUS_FREE = 3
FL_ALL_FREE = 4

FL_SLEEPING_FREE = FL_INACTIVE_FREE


_fl_create_free = cfuncproto(
        so_libforms, "fl_create_free",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING, FL_HANDLEPTR],
        """FL_OBJECT * fl_create_free(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label, FL_HANDLEPTR handle)
        """)
def fl_create_free(freetype, x, y, w, h, label, py_handle):
    """ fl_create_free(freetype, x, y, w, h, label, py_handle) -> pObject
    """

    c_handle = FL_HANDLEPTR(py_handle)
    _cfunc_refs[get_rand_dictkey()] = c_handle
    retval = _fl_create_free(freetype, x, y, w, h, label, c_handle)
    return retval


_fl_add_free = cfuncproto(
        so_libforms, "fl_add_free",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING, FL_HANDLEPTR],
        """FL_OBJECT * fl_add_free(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label, FL_HANDLEPTR handle)
        """)
def fl_add_free(freetype, x, y, w, h, label, py_handle):
    """ fl_add_free(freetype, x, y, w, h, label, py_handle) -> pObject
    """

    c_handle = FL_HANDLEPTR(py_handle)
    _cfunc_refs[get_rand_dictkey()] = c_handle
    retval = _fl_add_free(freetype, x, y, w, h, label, c_handle)
    return retval


######################
# forms.h (goodies.h)
######################

# Resources and misc. goodie routines

FLAlertDismissLabel = "flAlert.dismiss.label"
FLAlertTitle = "flAlert.title"

FLQuestionYesLabel = "flQuestion.yes.label"
FLQuestionNoLabel = "flQuestion.no.label"
FLQuestionTitle = "flQuestion.title"

FLOKLabel = "flInput.ok.label"
FLInputClearLabel = "flInput.clear.label"
FLInputCancelLabel = "flInput.cancel.label"
FLInputTitle = "flInput.title"

FLChoiceTitle = "flChoice.title"


_fl_set_goodies_font = cfuncproto(
        so_libforms, "fl_set_goodies_font",
        None, [cty.c_int, cty.c_int],
        """void fl_set_goodies_font(int style, int size)
        """)
def fl_set_goodies_font(style, size):
    """ fl_set_goodies_font(style, size)
    """

    _fl_set_goodies_font(style, size)


# messages and questions

_fl_show_message = cfuncproto(
        so_libforms, "fl_show_message",
        None, [STRING, STRING, STRING],
        """void fl_show_message(const char * p1, const char * p2,
           const char * p3)
        """)
def fl_show_message(p1, p2, p3):
    """ fl_show_message(p1, p2, p3)
    """

    _fl_show_message(p1, p2, p3)


_fl_show_messages = cfuncproto(
        so_libforms, "fl_show_messages",
        None, [STRING],
        """void fl_show_messages(const char * p1)
        """)
def fl_show_messages(p1):
    """ fl_show_messages(p1)
    """

    _fl_show_messages(p1)


_fl_show_msg = cfuncproto(
        so_libforms, "fl_show_msg",
        None, [STRING],
        """void fl_show_msg(const char * p1)
        """)
def fl_show_msg(p1):
    """ fl_show_msg(p1)
    """

    _fl_show_msg(p1)


_fl_hide_message = cfuncproto(
        so_libforms, "fl_hide_message",
        None, [],
        """void fl_hide_message()
        """)
def fl_hide_message():
    """ fl_hide_message()
    """

    _fl_hide_message()


fl_hide_msg = fl_hide_message
fl_hide_messages = fl_hide_message


_fl_show_question = cfuncproto(
        so_libforms, "fl_show_question",
        cty.c_int, [STRING, cty.c_int],
        """int fl_show_question(const char * p1, int p2)
        """)
def fl_show_question(p1, p2):
    """ fl_show_question(p1, p2) -> num.
    """

    retval = _fl_show_question(p1, p2)
    return retval


_fl_hide_question = cfuncproto(
        so_libforms, "fl_hide_question",
        None, [],
        """void fl_hide_question()
        """)
def fl_hide_question():
    """ fl_hide_question()
    """

    _fl_hide_question()


_fl_show_alert = cfuncproto(
        so_libforms, "fl_show_alert",
        None, [STRING, STRING, STRING, cty.c_int],
        """void fl_show_alert(const char * p1, const char * p2,
           const char * p3, int p4)
        """)
def fl_show_alert(p1, p2, p3, p4):
    """ fl_show_alert(p1, p2, p3, p4)
    """

    _fl_show_alert(p1, p2, p3, p4)


_fl_show_alert2 = cfuncproto(
        so_libforms, "fl_show_alert2",
        None, [cty.c_int, STRING],
        """void fl_show_alert2(int c, const char * fmt)
        """)
def fl_show_alert2(c, fmt):
    """ fl_show_alert2(c, fmt)
    """

    _fl_show_alert2(c, fmt)


_fl_hide_alert = cfuncproto(
        so_libforms, "fl_hide_alert",
        None, [],
        """void fl_hide_alert()
        """)
def fl_hide_alert():
    """ fl_hide_alert()
    """

    _fl_hide_alert()


_fl_show_input = cfuncproto(
        so_libforms, "fl_show_input",
        STRING, [STRING, STRING],
        """const char * fl_show_input(const char * p1, const char * p2)
        """)
def fl_show_input(p1, p2):
    """ fl_show_input(p1, p2) -> input string
    """

    retval = _fl_show_input(p1, p2)
    return retval


_fl_hide_input = cfuncproto(
        so_libforms, "fl_hide_input",
        None, [],
        """void fl_hide_input()
        """)
def fl_hide_input():
    """ fl_hide_input()
    """

    _fl_hide_input()


_fl_show_simple_input = cfuncproto(
        so_libforms, "fl_show_simple_input",
        STRING, [STRING, STRING],
        """const char * fl_show_simple_input(const char * p1, const char * p2)
        """)
def fl_show_simple_input(p1, p2):
    """ fl_show_simple_input(p1, p2) -> input string
    """

    retval = _fl_show_simple_input(p1, p2)
    return retval


_fl_show_colormap = cfuncproto(
        so_libforms, "fl_show_colormap",
        cty.c_int, [cty.c_int],
        """int fl_show_colormap(int p1)
        """)
def fl_show_colormap(p1):
    """ fl_show_colormap(p1) -> colormap num.
    """

    retval = _fl_show_colormap(p1)
    return retval


# choices

_fl_show_choices = cfuncproto(
        so_libforms, "fl_show_choices",
        cty.c_int, [STRING, cty.c_int, STRING, STRING, STRING, cty.c_int],
        """int fl_show_choices(const char * p1, int p2, const char * p3, \
           const char * p4, const char * p5, int p6)
        """)
def fl_show_choices(p1, p2, p3, p4, p5, p6):
    """ fl_show_choices(p1, p2, p3, p4, p5, p6)
    """

    _fl_show_choices(p1, p2, p3, p4, p5, p6)


_fl_show_choice = cfuncproto(
        so_libforms, "fl_show_choice",
        cty.c_int, [STRING, STRING, STRING, cty.c_int, STRING, STRING,
        STRING, cty.c_int],
        """int fl_show_choice(const char * p1, const char * p2,
           const char * p3, int p4, const char * p5, const char * p6,
           const char * p7, int p8)
        """)
def fl_show_choice(p1, p2, p3, p4, p5, p6, p7, p8):
    """ fl_show_choice(p1, p2, p3, p4, p5, p6, p7, p8) -> num.
    """

    retval = _fl_show_choice(p1, p2, p3, p4, p5, p6, p7, p8)
    return retval


_fl_hide_choice = cfuncproto(
        so_libforms, "fl_hide_choice",
        None, [],
        """void fl_hide_choice()
        """)
def fl_hide_choice():
    """ fl_hide_choice()
    """

    _fl_hide_choice()


_fl_set_choice_shortcut = cfuncproto(
        so_libforms, "fl_set_choice_shortcut",
        None, [STRING, STRING, STRING],
        """void fl_set_choice_shortcut(const char * p1, const char * p2,
           const char * p3)
        """)
def fl_set_choice_shortcut(p1, p2, p3):
    """ fl_set_choice_shortcut(p1, p2, p3)
    """

    _fl_set_choice_shortcut(p1, p2, p3)


fl_set_choices_shortcut = fl_set_choice_shortcut


# one liner

_fl_show_oneliner = cfuncproto(
        so_libforms, "fl_show_oneliner",
        None, [STRING, FL_Coord, FL_Coord],
        """void fl_show_oneliner(const char * p1, FL_Coord p2, FL_Coord p3)
        """)
def fl_show_oneliner(p1, p2, p3):
    """ fl_show_oneliner(p1, p2, p3)
    """

    _fl_show_oneliner(p1, p2, p3)


_fl_hide_oneliner = cfuncproto(
        so_libforms, "fl_hide_oneliner",
        None, [],
        """void fl_hide_oneliner()
        """)

def fl_hide_oneliner():
    """ fl_hide_oneliner()
    """

    _fl_hide_oneliner()


_fl_set_oneliner_font = cfuncproto(
        so_libforms, "fl_set_oneliner_font",
        None, [cty.c_int, cty.c_int],
        """void fl_set_oneliner_font(int p1, int p2)
        """)
def fl_set_oneliner_font(p1, p2):
    """ fl_set_oneliner_font(p1, p2)
    """

    _fl_set_oneliner_font(p1, p2)


_fl_set_oneliner_color = cfuncproto(
        so_libforms, "fl_set_oneliner_color",
        None, [FL_COLOR, FL_COLOR],
        """void fl_set_oneliner_color(FL_COLOR p1, FL_COLOR p2)
        """)
def fl_set_oneliner_color(p1, p2):
    """ fl_set_oneliner_color(p1, p2)
    """

    _fl_set_oneliner_color(p1, p2)


_fl_set_tooltip_font = cfuncproto(
        so_libforms, "fl_set_tooltip_font",
        None, [cty.c_int, cty.c_int],
        """void fl_set_tooltip_font(int p1, int p2)
        """)
def fl_set_tooltip_font(p1, p2):
    """ fl_set_tooltip_font(p1, p2)
    """

    _fl_set_tooltip_font(p1, p2)


_fl_set_tooltip_color = cfuncproto(
        so_libforms, "fl_set_tooltip_color",
        None, [FL_COLOR, FL_COLOR],
        """void fl_set_tooltip_color(FL_COLOR p1, FL_COLOR p2)
        """)
def fl_set_tooltip_color(p1, p2):
    """ fl_set_tooltip_color(p1, p2)
    """

    _fl_set_tooltip_color(p1, p2)


_fl_set_tooltip_boxtype = cfuncproto(
        so_libforms, "fl_set_tooltip_boxtype",
        None, [cty.c_int],
        """void fl_set_tooltip_boxtype(int p1)
        """)
def fl_set_tooltip_boxtype(p1):
    """ fl_set_tooltip_boxtype(p1)
    """

    _fl_set_tooltip_boxtype(p1)


_fl_set_tooltip_lalign = cfuncproto(
        so_libforms, "fl_set_tooltip_lalign",
        None, [cty.c_int],
        """void fl_set_tooltip_lalign(int p1)
        """)
def fl_set_tooltip_lalign(p1):
    """ fl_set_tooltip_lalign(p1)
    """

    _fl_set_tooltip_lalign(p1)


# command log

class FD_CMDLOG(cty.Structure):
    pass
FD_CMDLOG._fields_ = [
    ('form', cty.POINTER(FL_FORM)),
    ('vdata', cty.c_void_p),
    ('cdata', STRING),
    ('ldata', cty.c_long),
    ('browser', cty.POINTER(FL_OBJECT)),
    ('close_browser', cty.POINTER(FL_OBJECT)),
    ('clear_browser', cty.POINTER(FL_OBJECT)),
]

_fl_exe_command = cfuncproto(
        so_libforms, "fl_exe_command",
        cty.c_long, [STRING, cty.c_int],
        """long int fl_exe_command(const char * p1, int p2)
        """)
def fl_exe_command(p1, p2):
    """ fl_exe_command(p1, p2) -> num.
    """

    retval = _fl_exe_command(p1, p2)
    return retval


_fl_end_command = cfuncproto(
        so_libforms, "fl_end_command",
        cty.c_int, [cty.c_long],
        """int fl_end_command(long int p1)
        """)
def fl_end_command(p1):
    """ fl_end_command(p1) -> num.
    """

    retval = _fl_end_command(p1)
    return retval


_fl_check_command = cfuncproto(
        so_libforms, "fl_check_command",
        cty.c_int, [cty.c_long],
        """int fl_check_command(long int p1)
        """)
def fl_check_command(p1):
    """ fl_check_command(p1) -> num.
    """

    retval = _fl_check_command(p1)


_fl_popen = cfuncproto(
        so_libforms, "fl_popen",
        cty.POINTER(FILE), [STRING, STRING],
        """)FILE * fl_popen(const char * p1, const char * p2)
        """)
def fl_popen(p1, p2):
    """ fl_popen(p1, p2) -> FILE ptr.
    """

    retval = _fl_popen(p1, p2)


_fl_pclose = cfuncproto(
        so_libforms, "fl_pclose",
        cty.c_int, [cty.POINTER(FILE)],
        """int fl_pclose(FILE * p1)
        """)
def fl_pclose(p1):
    """ fl_pclose(p1) -> num.
    """

    retval = _fl_pclose(p1)


_fl_end_all_command = cfuncproto(
        so_libforms, "fl_end_all_command",
        cty.c_int, [],
        """int fl_end_all_command()
        """)
def fl_end_all_command():
    """ fl_end_all_command() -> num.
    """

    retval = _fl_end_all_command()


_fl_show_command_log = cfuncproto(
        so_libforms, "fl_show_command_log",
        None, [cty.c_int],
        """void fl_show_command_log(int p1)
        """)
def fl_show_command_log(p1):
    """ fl_show_command_log(p1)
    """

    _fl_show_command_log(p1)


_fl_hide_command_log = cfuncproto(
        so_libforms, "fl_hide_command_log",
        None, [],
        """void fl_hide_command_log()
        """)
def fl_hide_command_log():
    """ fl_hide_command_log()
    """

    _fl_hide_command_log()


_fl_clear_command_log = cfuncproto(
        so_libforms, "fl_clear_command_log",
        None, [],
        """void fl_clear_command_log()
        """)
def fl_clear_command_log():
    """ fl_clear_command_log()
    """

    _fl_clear_command_log()


_fl_addto_command_log = cfuncproto(
        so_libforms, "fl_addto_command_log",
        None, [STRING],
        """void fl_addto_command_log(const char * p1)
        """)
def fl_addto_command_log(p1):
    """ fl_addto_command_log(p1)
    """

    _fl_addto_command_log(p1)


_fl_set_command_log_position = cfuncproto(
        so_libforms, "fl_set_command_log_position",
        None, [cty.c_int, cty.c_int],
        """void fl_set_command_log_position(int p1, int p2)
        """)
def fl_set_command_log_position(p1, p2):
    """ fl_set_command_log_position(p1, p2)
    """

    _fl_set_command_log_position(p1, p2)


_fl_get_command_log_fdstruct = cfuncproto(
        so_libforms, "fl_get_command_log_fdstruct",
        cty.POINTER(FD_CMDLOG), [],
        """)FD_CMDLOG * fl_get_command_log_fdstruct()
        """)
def fl_get_command_log_fdstruct():
    """ fl_get_command_log_fdstruct() -> cmdlog class
    """

    retval = _fl_get_command_log_fdstruct()


# aliases
fl_open_command = fl_exe_command
fl_close_command = fl_end_command


# file selector

FL_MAX_FSELECTOR = 6

class FD_FSELECTOR(cty.Structure):
    pass
FD_FSELECTOR._fields_ = [
    ('fselect', cty.POINTER(FL_FORM)),
    ('vdata', cty.c_void_p),
    ('cdata', cty.c_void_p),
    ('ldata', cty.c_long),
    ('browser', cty.POINTER(FL_OBJECT)),
    ('input', cty.POINTER(FL_OBJECT)),
    ('prompt', cty.POINTER(FL_OBJECT)),
    ('resbutt', cty.POINTER(FL_OBJECT)),
    ('patbutt', cty.POINTER(FL_OBJECT)),
    ('dirbutt', cty.POINTER(FL_OBJECT)),
    ('cancel', cty.POINTER(FL_OBJECT)),
    ('ready', cty.POINTER(FL_OBJECT)),
    ('dirlabel', cty.POINTER(FL_OBJECT)),
    ('patlabel', cty.POINTER(FL_OBJECT)),
    ('appbutt', cty.POINTER(FL_OBJECT) * 3),
]

_fl_use_fselector = cfuncproto(
        so_libforms, "fl_use_fselector",
        cty.c_int, [cty.c_int],
        """int fl_use_fselector(int p1)
        """)
def fl_use_fselector(p1):
    """ fl_use_fselector(p1) -> num.
    """

    retval = _fl_use_fselector(p1)
    return retval


_fl_show_fselector = cfuncproto(
        so_libforms, "fl_show_fselector",
        STRING, [STRING, STRING, STRING, STRING],
        """const char * fl_show_fselector(const char * p1,
           const char * p2, const char * p3, const char * p4)
        """)
def fl_show_fselector(p1, p2, p3, p4):
    """ fl_show_fselector(p1, p2, p3, p4) -> fselector string
    """

    retval = _fl_show_fselector(p1, p2, p3, p4)
    return retval


_fl_set_fselector_fontsize = cfuncproto(
        so_libforms, "fl_set_fselector_fontsize",
        None, [cty.c_int],
        """void fl_set_fselector_fontsize(int p1)
        """)
def fl_set_fselector_fontsize(p1):
    """ fl_set_fselector_fontsize(p1)
    """

    _fl_set_fselector_fontsize(p1)


_fl_set_fselector_fontstyle = cfuncproto(
        so_libforms, "fl_set_fselector_fontstyle",
        None, [cty.c_int],
        """void fl_set_fselector_fontstyle(int p1)
        """)
def fl_set_fselector_fontstyle(p1):
    """ fl_set_fselector_fontstyle(p1)
    """

    _fl_set_fselector_fontstyle(p1)


_fl_set_fselector_placement = cfuncproto(
        so_libforms, "fl_set_fselector_placement",
        None, [cty.c_int],
        """void fl_set_fselector_placement(int p1)
        """)
def fl_set_fselector_placement(p1):
    """ fl_set_fselector_placement(p1)
    """

    _fl_set_fselector_placement(p1)


_fl_set_fselector_border = cfuncproto(
        so_libforms, "fl_set_fselector_border",
        None, [cty.c_int],
        """void fl_set_fselector_border(int p1)
        """)
def fl_set_fselector_border(p1):
    """ fl_set_fselector_border(p1)
    """

    _fl_set_fselector_border(p1)


def fl_set_fselector_transient(b):
    if b:
        retval = FL_TRANSIENT
    else:
        retval = FL_FULLBORDER
    _fl_set_fselector_border(retval)


_fl_set_fselector_callback = cfuncproto(
        so_libforms, "fl_set_fselector_callback",
        None, [FL_FSCB, cty.c_void_p],
        """void fl_set_fselector_callback(FL_FSCB p1, void * p2)
        """)
def fl_set_fselector_callback(py_cb, p2):
    """ fl_set_fselector_callback(py_cb, p2)
    """

    c_cb = FL_FSCB(py_cb)
    _cfunc_refs[get_rand_dictkey()] = c_cb
    _fl_set_fselector_callback(c_cb, p2)


_fl_get_filename = cfuncproto(
        so_libforms, "fl_get_filename",
        STRING, [],
        """const char * fl_get_filename()
        """)
def fl_get_filename():
    """ fl_get_filename() -> filename string
    """

    retval = _fl_get_filename()
    return retval


_fl_get_directory = cfuncproto(
        so_libforms, "fl_get_directory",
        STRING, [],
        """const char * fl_get_directory()
        """)
def fl_get_directory():
    """ fl_get_directory() -> directory string
    """

    retval = _fl_get_directory()
    return retval


_fl_get_pattern = cfuncproto(
        so_libforms, "fl_get_pattern",
        STRING, [],
        """const char * fl_get_pattern()
        """)
def fl_get_pattern():
    """ fl_get_pattern() -> pattern string
    """

    retval = _fl_get_pattern()
    return retval


_fl_set_directory = cfuncproto(
        so_libforms, "fl_set_directory",
        cty.c_int, [STRING],
        """int fl_set_directory(const char * p1)
        """)
def fl_set_directory(p1):
    """ fl_set_directory(p1) -> num.
    """

    retval = _fl_set_directory(p1)
    return retval


_fl_set_pattern = cfuncproto(
        so_libforms, "fl_set_pattern",
        None, [STRING],
        """void fl_set_pattern(const char * p1)
        """)
def fl_set_pattern(p1):
    """ fl_set_pattern(p1)
    """

    _fl_set_pattern(p1)


_fl_refresh_fselector = cfuncproto(
        so_libforms, "fl_refresh_fselector",
        None, [],
        """void fl_refresh_fselector()
        """)
def fl_refresh_fselector():
    """ fl_refresh_fselector()
    """

    _fl_refresh_fselector()


cfunc_none_voidp = cty.CFUNCTYPE(None, cty.c_void_p)

_fl_add_fselector_appbutton = cfuncproto(
        so_libforms, "fl_add_fselector_appbutton",
        None, [STRING, cty.CFUNCTYPE(None, cty.c_void_p), cty.c_void_p],
        """void fl_add_fselector_appbutton(const char * p1, const char * p2, void * p3)
        """)
def fl_add_fselector_appbutton(p1, py_fn, p3):
    """ fl_add_fselector_appbutton(p1, py_fn, p3)
    """

    c_fn = cfunc_none_voidp(py_fn)
    _cfunc_refs[get_rand_dictkey()] = c_fn
    _fl_add_fselector_appbutton(p1, c_fn, p3)


_fl_remove_fselector_appbutton = cfuncproto(
        so_libforms, "fl_remove_fselector_appbutton",
        None, [STRING],
        """void fl_remove_fselector_appbutton(const char * p1)
        """)
def fl_remove_fselector_appbutton(p1):
    """ fl_remove_fselector_appbutton(p1)
    """

    _fl_remove_fselector_appbutton(p1)


_fl_disable_fselector_cache = cfuncproto(
        so_libforms, "fl_disable_fselector_cache",
        None, [cty.c_int],
        """void fl_disable_fselector_cache(int p1)
        """)
def fl_disable_fselector_cache(p1):
    """ fl_disable_fselector_cache(p1)
    """

    _fl_disable_fselector_cache(p1)


_fl_invalidate_fselector_cache = cfuncproto(
        so_libforms, "fl_invalidate_fselector_cache",
        None, [],
        """void fl_invalidate_fselector_cache()
        """)

def fl_invalidate_fselector_cache():
    """ fl_invalidate_fselector_cache()
    """

    _fl_invalidate_fselector_cache()


_fl_get_fselector_form = cfuncproto(
        so_libforms, "fl_get_fselector_form",
        cty.POINTER(FL_FORM), [],
        """FL_FORM * fl_get_fselector_form()
        """)
def fl_get_fselector_form():
    """ fl_get_fselector_form() -> pForm
    """

    retval = _fl_get_fselector_form()
    return retval


_fl_get_fselector_fdstruct = cfuncproto(
        so_libforms, "fl_get_fselector_fdstruct",
        cty.POINTER(FD_FSELECTOR), [],
        """)FD_FSELECTOR * fl_get_fselector_fdstruct()
        """)
def fl_get_fselector_fdstruct():
    """ fl_get_fselector_fdstruct() -> fselector class
    """

    retval = _fl_get_fselector_fdstruct()
    return retval


_fl_hide_fselector = cfuncproto(
        so_libforms, "fl_hide_fselector",
        None, [],
        """void fl_hide_fselector()
        """)
def fl_hide_fselector():
    """ fl_hide_fselector()
    """

    _fl_hide_fselector()


_fl_set_fselector_filetype_marker = cfuncproto(
        so_libforms, "fl_set_fselector_filetype_marker",
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int],
        """void fl_set_fselector_filetype_marker(int p1, int p2, int p3,
           int p4, int p5)
        """)
def fl_set_fselector_filetype_marker(p1, p2, p3, p4, p5):
    """ fl_set_fselector_filetype_marker(p1, p2, p3, p4, p5)
    """

    _fl_set_fselector_filetype_marker(p1, p2, p3, p4, p5)


fl_show_file_selector = fl_show_fselector
fl_set_fselector_cb = fl_set_fselector_callback


def fl_set_fselector_title(s):
    _fl_set_form_title(fl_get_fselector_form(), s)


_fl_goodies_atclose = cfuncproto(
        so_libforms, "fl_goodies_atclose",
        cty.c_int, [cty.POINTER(FL_FORM), cty.c_void_p],
        """int fl_goodies_atclose(FL_FORM * p1, void * p2)
        """)
def fl_goodies_atclose(p1, p2):
    """ fl_goodies_atclose(p1, p2) -> num.
    """

    retval = _fl_goodies_atclose(p1, p2)
    return retval


####################
# forms.h (input.h)
####################

# Types
# values for enumeration 'FL_INPUT_TYPE'
FL_INPUT_TYPE = cty.c_int # enum
FL_NORMAL_INPUT = 0
FL_FLOAT_INPUT = 1
FL_INT_INPUT = 2
FL_DATE_INPUT = 3
FL_MULTILINE_INPUT = 4
FL_HIDDEN_INPUT = 5
FL_SECRET_INPUT = 6

# for date input
# values for unnamed enumeration
FL_INPUT_MMDD = 0
FL_INPUT_DDMM = 1

# Defaults
FL_INPUT_BOXTYPE = FL_DOWN_BOX
FL_INPUT_COL1 = FL_COL1
FL_INPUT_COL2 = FL_MCOL
FL_INPUT_LCOL = FL_LCOL
FL_INPUT_ALIGN = FL_ALIGN_LEFT

# Others
FL_INPUT_TCOL = FL_LCOL
FL_INPUT_CCOL = FL_BLUE

FL_RINGBELL = (1<<4)

# Routines

_fl_create_input = cfuncproto(
        so_libforms, "fl_create_input",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_input(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_input(inputtype, x, y, w, h, label):
    """ fl_create_input(inputtype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_input(inputtype, x, y, w, h, label)
    return retval


_fl_add_input = cfuncproto(
        so_libforms, "fl_add_input",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_input(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_input(inputtype, x, y, w, h, label):
    """ fl_add_input(inputtype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_input(inputtype, x, y, w, h, label)
    return retval


_fl_set_input = cfuncproto(
        so_libforms, "fl_set_input",
        None, [cty.POINTER(FL_OBJECT), STRING],
        """void fl_set_input(FL_OBJECT * ob, const char * str)
        """)
def fl_set_input(pObject, input_string):
    """ fl_set_input(pObject, input_string)
    """

    _fl_set_input(pObject, input_string)


_fl_set_input_return = cfuncproto(
        so_libforms, "fl_set_input_return",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_input_return(FL_OBJECT * ob, int value)
        """)
def fl_set_input_return(pObject, value):
    """ fl_set_input_return(pObject, value)
    """

    _fl_set_input_return(pObject, value)


_fl_set_input_color = cfuncproto(
        so_libforms, "fl_set_input_color",
        None, [cty.POINTER(FL_OBJECT), FL_COLOR, FL_COLOR],
        """void fl_set_input_color(FL_OBJECT * ob, FL_COLOR textcol,
           FL_COLOR curscol)
        """)
def fl_set_input_color(pObject, textcol, curscol):
    """ fl_set_input_color(pObject, textcol, curscol)
    """

    _fl_set_input_color(pObject, textcol, curscol)


_fl_get_input_color = cfuncproto(
        so_libforms, "fl_get_input_color",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_COLOR),
        cty.POINTER(FL_COLOR)],
        """void fl_get_input_color(FL_OBJECT * ob, FL_COLOR * textcol,
           FL_COLOR * curscol)
        """)
def fl_get_input_color(pObject, textcol, curscol):
    """ fl_get_input_color(pObject, textcol, curscol)
    """

    _fl_get_input_color(pObject, textcol, curscol)


_fl_set_input_scroll = cfuncproto(
        so_libforms, "fl_set_input_scroll",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_input_scroll(FL_OBJECT * ob, int yes)
        """)
def fl_set_input_scroll(pObject, yes):
    """ fl_set_input_scroll(pObject, yes)
    """

    _fl_set_input_scroll(pObject, yes)


_fl_set_input_cursorpos = cfuncproto(
        so_libforms, "fl_set_input_cursorpos",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_input_cursorpos(FL_OBJECT * ob, int xpos, int ypos)
        """)
def fl_set_input_cursorpos(pObject, xpos, ypos):
    """ fl_set_input_cursorpos(pObject, xpos, ypos)
    """

    _fl_set_input_cursorpos(pObject, xpos, ypos)


_fl_set_input_selected = cfuncproto(
        so_libforms, "fl_set_input_selected",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_input_selected(FL_OBJECT * ob, int yes)
        """)
def fl_set_input_selected(pObject, yes):
    """ fl_set_input_selected(pObject, yes)
    """

    _fl_set_input_selected(pObject, yes)


_fl_set_input_selected_range = cfuncproto(
        so_libforms, "fl_set_input_selected_range",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_input_selected_range(FL_OBJECT * ob, int begin, int end)
        """)
def fl_set_input_selected_range(pObject, begin, end):
    """ fl_set_input_selected_range(pObject, begin, end)
    """

    _fl_set_input_selected_range(pObject, begin, end)


_fl_get_input_selected_range = cfuncproto(
        so_libforms, "fl_get_input_selected_range",
        STRING, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """const char * fl_get_input_selected_range(FL_OBJECT * ob,
           int * begin, int * end)
        """)
def fl_get_input_selected_range(pObject, begin, end):
    """ fl_get_input_selected_range(pObject, begin, end) -> string
    """

    retval = _fl_get_input_selected_range(pObject, begin, end)
    return retval


_fl_set_input_maxchars = cfuncproto(
        so_libforms, "fl_set_input_maxchars",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_input_maxchars(FL_OBJECT * ob, int maxchars)
        """)
def fl_set_input_maxchars(pObject, maxchars):
    """ fl_set_input_maxchars(pObject, maxchars)
    """

    _fl_set_input_maxchars(pObject, maxchars)


_fl_set_input_format = cfuncproto(
        so_libforms, "fl_set_input_format",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_input_format(FL_OBJECT * ob, int fmt, int sep)
        """)
def fl_set_input_format(pObject, fmt, sep):
    """ fl_set_input_format(pObject, fmt, sep)
    """

    _fl_set_input_format(pObject, fmt, sep)


_fl_set_input_hscrollbar = cfuncproto(
        so_libforms, "fl_set_input_hscrollbar",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_input_hscrollbar(FL_OBJECT * ob, int pref)
        """)
def fl_set_input_hscrollbar(pObject, pref):
    """ fl_set_input_hscrollbar(pObject, pref)
    """

    _fl_set_input_hscrollbar(pObject, pref)


_fl_set_input_vscrollbar = cfuncproto(
        so_libforms, "fl_set_input_vscrollbar",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_input_vscrollbar(FL_OBJECT * ob, int pref)
        """)
def fl_set_input_vscrollbar(pObject, pref):
    """ fl_set_input_vscrollbar(pObject, pref)
    """

    _fl_set_input_vscrollbar(pObject, pref)


_fl_set_input_topline = cfuncproto(
        so_libforms, "fl_set_input_topline",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_input_topline(FL_OBJECT * ob, int top)
        """)
def fl_set_input_topline(pObject, top):
    """ fl_set_input_topline(pObject, top)
    """

    _fl_set_input_topline(pObject, top)


_fl_set_input_scrollbarsize = cfuncproto(
        so_libforms, "fl_set_input_scrollbarsize",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_input_scrollbarsize(FL_OBJECT * ob, int hh, int vw)
        """)
def fl_set_input_scrollbarsize(pObject, hh, vw):
    """ fl_set_input_scrollbarsize(pObject, hh, vw)
    """

    _fl_set_input_scrollbarsize(pObject, hh, vw)


_fl_get_input_scrollbarsize = cfuncproto(
        so_libforms, "fl_get_input_scrollbarsize",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """void fl_get_input_scrollbarsize(FL_OBJECT * ob, int * hh, int * vw)
        """)
def fl_get_input_scrollbarsize(pObject, hh, vw):
    """ fl_get_input_scrollbarsize(pObject, hh, vw)
    """

    _fl_get_input_scrollbarsize(pObject, hh, vw)


_fl_set_input_xoffset = cfuncproto(
        so_libforms, "fl_set_input_xoffset",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_input_xoffset(FL_OBJECT * ob, int xoff)
        """)
def fl_set_input_xoffset(pObject, xoff):
    """ fl_set_input_xoffset(pObject, xoff)
    """

    _fl_set_input_xoffset(pObject, xoff)


_fl_get_input_xoffset = cfuncproto(
        so_libforms, "fl_get_input_xoffset",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_input_xoffset(FL_OBJECT * ob)
        """)
def fl_get_input_xoffset(pObject):
    """ fl_get_input_xoffset(pObject) -> num.
    """

    retval = _fl_get_input_xoffset(pObject)
    return retval


_fl_set_input_fieldchar = cfuncproto(
        so_libforms, "fl_set_input_fieldchar",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_input_fieldchar(FL_OBJECT * ob, int fchar)
        """)
def fl_set_input_fieldchar(pObject, fchar):
    """ fl_set_input_fieldchar(pObject, fchar) -> num.
    """

    retval = _fl_set_input_fieldchar(pObject, fchar)
    return retval


_fl_get_input_topline = cfuncproto(
        so_libforms, "fl_get_input_topline",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_input_topline(FL_OBJECT * ob)
        """)
def fl_get_input_topline(pObject):
    """ fl_get_input_topline(pObject) -> num.
    """

    retval = _fl_get_input_topline(pObject)
    return retval


_fl_get_input_screenlines = cfuncproto(
        so_libforms, "fl_get_input_screenlines",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_input_screenlines(FL_OBJECT * ob)
        """)
def fl_get_input_screenlines(pObject):
    """ fl_get_input_screenlines(pObject) -> num.
    """

    retval = _fl_get_input_screenlines(pObject)
    return retval


_fl_get_input_cursorpos = cfuncproto(
        so_libforms, "fl_get_input_cursorpos",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """int fl_get_input_cursorpos(FL_OBJECT * ob, int * x, int * y)
        """)
def fl_get_input_cursorpos(pObject, x, y):
    """ fl_get_input_cursorpos(pObject, x, y) -> num.
    """

    retval = _fl_get_input_cursorpos(pObject, x, y)
    return retval


_fl_set_input_cursor_visible = cfuncproto(
        so_libforms, "fl_set_input_cursor_visible",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_input_cursor_visible(FL_OBJECT * ob, int visible)
        """)
def fl_set_input_cursor_visible(pObject, visible):
    """ fl_set_input_cursor_visible(pObject, visible)
    """

    _fl_set_input_cursor_visible(pObject, visible)


_fl_get_input_numberoflines = cfuncproto(
        so_libforms, "fl_get_input_numberoflines",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_input_numberoflines(FL_OBJECT * ob)
        """)
def fl_get_input_numberoflines(pObject):
    """ fl_get_input_numberoflines(pObject) -> lines num.
    """

    retval = _fl_get_input_numberoflines(pObject)
    return retval


_fl_get_input_format = cfuncproto(
        so_libforms, "fl_get_input_format",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """void fl_get_input_format(FL_OBJECT * ob, int * fmt, int * sep)
        """)
def fl_get_input_format(pObject, fmt, sep):
    """ fl_get_input_format(pObject, fmt, sep)
    """

    _fl_get_input_format(pObject, fmt, sep)


_fl_get_input = cfuncproto(
        so_libforms, "fl_get_input",
        STRING, [cty.POINTER(FL_OBJECT)],
        """const char * fl_get_input(FL_OBJECT * ob)
        """)
def fl_get_input(pObject):
    """ fl_get_input(pObject) -> input string
    """

    retval = _fl_get_input(pObject)
    return retval


FL_INPUTVALIDATOR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), STRING,
            STRING, cty.c_int)


_fl_set_input_filter = cfuncproto(
        so_libforms, "fl_set_input_filter",
        FL_INPUTVALIDATOR, [cty.POINTER(FL_OBJECT), FL_INPUTVALIDATOR],
        """FL_INPUTVALIDATOR fl_set_input_filter(FL_OBJECT * ob,
           FL_INPUTVALIDATOR validate)
        """)
def fl_set_input_filter(pObject, py_validate):
    """ fl_set_input_filter(pObject, py_validate) -> input_filter func.
    """

    c_validate = FL_INPUTVALIDATOR(py_validate)
    _cfunc_refs[get_rand_dictkey()] = c_validate
    retval = _fl_set_input_filter(pObject, c_validate)
    return retval


_fl_validate_input = cfuncproto(
        so_libforms, "fl_validate_input",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_validate_input(FL_OBJECT * obj)
        """)
def fl_validate_input(pObject):
    """ fl_validate_input(pObject)
    """

    _fl_validate_input(pObject)


fl_set_input_shortcut = fl_set_object_shortcut


# edit keys

class FL_EditKeymap(cty.Structure):
    pass
FL_EditKeymap._fields_ = [
    ('del_prev_char', cty.c_long),        # delete previous char
    ('del_next_char', cty.c_long),        # delete next char
    ('del_prev_word', cty.c_long),        # delete previous word
    ('del_next_word', cty.c_long),        # delete next word
    # movement
    ('moveto_prev_line', cty.c_long),     # one line up
    ('moveto_next_line', cty.c_long),     # one line down
    ('moveto_prev_char', cty.c_long),     # one char left
    ('moveto_next_char', cty.c_long),     # one char right
    ('moveto_prev_word', cty.c_long),     # one word left
    ('moveto_next_word', cty.c_long),     # one word right
    ('moveto_prev_page', cty.c_long),     # one page up
    ('moveto_next_page', cty.c_long),     # one page down
    ('moveto_bol', cty.c_long),           # move to begining of line
    ('moveto_eol', cty.c_long),           # move to end of line
    ('moveto_bof', cty.c_long),           # move to begin of file
    ('moveto_eof', cty.c_long),           # move to end of file
    # miscty. stuff
    ('transpose', cty.c_long),            # switch two char positions
    ('paste', cty.c_long),                # paste the edit buffer
    ('backspace', cty.c_long),            # another  del_prev_char
    ('del_to_bol', cty.c_long),           # cut to begining of line
    ('del_to_eol', cty.c_long),           # cut to end of line
    ('clear_field', cty.c_long),          # delete everything
    ('del_to_eos', cty.c_long),           # not implemented
]


_fl_set_input_editkeymap = cfuncproto(
        so_libforms, "fl_set_input_editkeymap",
        None, [cty.POINTER(FL_EditKeymap)],
        """void fl_set_input_editkeymap(const char * keymap)
        """)
def fl_set_input_editkeymap(keymap):
    """ fl_set_input_editkeymap(keymap)
    """

    _fl_set_input_editkeymap(keymap)


#####################
# forms.h (menu.h)
# Object Class: Menu
#####################

# values for enumeration 'FL_MENU_TYPE'
FL_MENU_TYPE = cty.c_int # enum
FL_TOUCH_MENU = 0
FL_PUSH_MENU = 1
FL_PULLDOWN_MENU = 2

# Defaults
FL_MENU_BOXTYPE = FL_BORDER_BOX
FL_MENU_COL1 = FL_COL1
FL_MENU_COL2 = FL_MCOL
FL_MENU_LCOL = FL_LCOL
FL_MENU_ALIGN = FL_ALIGN_CENTER

# Others
FL_MENU_MAXITEMS = 128
FL_MENU_MAXSTR = 64        # not used anymore! JTT


# Routines

_fl_create_menu = cfuncproto(
        so_libforms, "fl_create_menu",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_menu(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_menu(menutype, x, y, w, h, label):
    """ fl_create_menu(menutype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_menu(menutype, x, y, w, h, label)
    return retval


_fl_add_menu = cfuncproto(
        so_libforms, "fl_add_menu",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_menu(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)    DEPRECATED
        """)
def fl_add_menu(menutype, x, y, w, h, label):
    """ fl_add_menu(menutype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_menu(menutype, x, y, w, h, label)
    return retval


_fl_clear_menu = cfuncproto(
        so_libforms, "fl_clear_menu",
        None, [cty.POINTER(FL_OBJECT)],
        """void fl_clear_menu(FL_OBJECT * ob)    DEPRECATED
        """)
def fl_clear_menu(pObject):
    """ fl_clear_menu(pObject)
    """

    _fl_clear_menu(pObject)


_fl_set_menu = cfuncproto(
        so_libforms, "fl_set_menu",
        None, [cty.POINTER(FL_OBJECT), STRING],
        """void fl_set_menu(FL_OBJECT * ob, const char * menustr)    DEPRECATED
        """)
def fl_set_menu(pObject, menustr):
    """ fl_set_menu(pObject, menustr)
    """

    _fl_set_menu(pObject, menustr)


_fl_addto_menu = cfuncproto(
        so_libforms, "fl_addto_menu",
        cty.c_int, [cty.POINTER(FL_OBJECT), STRING],
        """int fl_addto_menu(FL_OBJECT * ob, const char * menustr)    DEPRECATED
        """)
def fl_addto_menu(pObject, menustr):
    """ fl_addto_menu(pObject, menustr) -> num.
    """

    retval = _fl_addto_menu(pObject, menustr)
    return retval


_fl_replace_menu_item = cfuncproto(
        so_libforms, "fl_replace_menu_item",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, STRING],
        """void fl_replace_menu_item(FL_OBJECT * ob, int numb,
           const char * str)    DEPRECATED
        """)
def fl_replace_menu_item(pObject, numb, item_string):
    """ fl_replace_menu_item(pObject, numb, item_string)
    """

    _fl_replace_menu_item(pObject, numb, item_string)


_fl_delete_menu_item = cfuncproto(
        so_libforms, "fl_delete_menu_item",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_delete_menu_item(FL_OBJECT * ob, int numb)    DEPRECATED
        """)
def fl_delete_menu_item(pObject, numb):
    """ fl_delete_menu_item(pObject, numb)
    """

    _fl_delete_menu_item(pObject, numb)


_fl_set_menu_item_callback = cfuncproto(
        so_libforms, "fl_set_menu_item_callback",
        FL_PUP_CB, [cty.POINTER(FL_OBJECT), cty.c_int, FL_PUP_CB],
        """FL_PUP_CB fl_set_menu_item_callback(FL_OBJECT * ob, int numb,
           FL_PUP_CB cb)
        """)
def fl_set_menu_item_callback(pObject, numb, py_cb):
    """ fl_set_menu_item_callback(pObject, numb, py_cb) -> callback
    """

    c_cb = FL_PUP_CB(py_cb)
    _cfunc_refs[get_rand_dictkey()] = c_cb
    retval = _fl_set_menu_item_callback(pObject, numb, c_cb)
    return retval


_fl_set_menu_item_shortcut = cfuncproto(
        so_libforms, "fl_set_menu_item_shortcut",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, STRING],
        """void fl_set_menu_item_shortcut(FL_OBJECT * ob, int numb,
           const char * str)   DEPRECATED
        """)
def fl_set_menu_item_shortcut(pObject, numb, str):
    """ fl_set_menu_item_shortcut(pObject, numb, str)
    """

    _fl_set_menu_item_shortcut(pObject, numb, str)


_fl_set_menu_item_mode = cfuncproto(
        so_libforms, "fl_set_menu_item_mode",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_uint],
        """void fl_set_menu_item_mode(FL_OBJECT * ob, int numb,
           unsigned int mode)   DEPRECATED
        """)
def fl_set_menu_item_mode(pObject, numb, mode):
    """ fl_set_menu_item_mode(pObject, numb, mode)
    """

    _fl_set_menu_item_mode(pObject, numb, mode)


_fl_show_menu_symbol = cfuncproto(
        so_libforms, "fl_show_menu_symbol",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_show_menu_symbol(FL_OBJECT * ob, int show)   DEPRECATED
        """)
def fl_show_menu_symbol(pObject, show):
    """ fl_show_menu_symbol(pObject, show)
    """

    _fl_show_menu_symbol(pObject, show)


_fl_set_menu_popup = cfuncproto(
        so_libforms, "fl_set_menu_popup",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_menu_popup(FL_OBJECT * ob, int pup)   DEPRECATED
        """)
def fl_set_menu_popup(pObject, pup):
    """ fl_set_menu_popup(pObject, pup)
    """

    _fl_set_menu_popup(pObject, pup)


_fl_get_menu_popup = cfuncproto(
        so_libforms, "fl_get_menu_popup",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_menu_popup(FL_OBJECT * ob)   DEPRECATED
        """)
def fl_get_menu_popup(pObject):
    """ fl_get_menu_popup(pObject) -> num.
    """

    retval = _fl_get_menu_popup(pObject)
    return retval


_fl_get_menu = cfuncproto(
        so_libforms, "fl_get_menu",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_menu(FL_OBJECT * ob)    DEPRECATED
        """)
def fl_get_menu(pObject):
    """ fl_get_menu(pObject) -> num.
    """

    retval = _fl_get_menu(pObject)
    return retval


_fl_get_menu_item_text = cfuncproto(
        so_libforms, "fl_get_menu_item_text",
        STRING, [cty.POINTER(FL_OBJECT), cty.c_int],
        """const char * fl_get_menu_item_text(FL_OBJECT * ob, int numb)    DEPRECATED
        """)
def fl_get_menu_item_text(pObject, numb):
    """ fl_get_menu_item_text(pObject, numb) -> text string
    """

    retval = _fl_get_menu_item_text(pObject, numb)
    return retval


_fl_get_menu_maxitems = cfuncproto(
        so_libforms, "fl_get_menu_maxitems",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_menu_maxitems(FL_OBJECT * ob)    DEPRECATED
        """)
def fl_get_menu_maxitems(pObject):
    """ fl_get_menu_maxitems(pObject) -> items num.
    """

    retval = _fl_get_menu_maxitems(pObject)
    return retval


_fl_get_menu_item_mode = cfuncproto(
        so_libforms, "fl_get_menu_item_mode",
        cty.c_uint, [cty.POINTER(FL_OBJECT), cty.c_int],
        """)unsigned int fl_get_menu_item_mode(FL_OBJECT * ob, int numb)   DEPRECATED
        """)
def fl_get_menu_item_mode(pObject, numb):
    """ fl_get_menu_item_mode(pObject, numb) -> mode num.
    """

    retval = _fl_get_menu_item_mode(pObject, numb)
    return retval


_fl_get_menu_text = cfuncproto(
        so_libforms, "fl_get_menu_text",
        STRING, [cty.POINTER(FL_OBJECT)],
        """const char * fl_get_menu_text(FL_OBJECT * ob)    DEPRECATED
        """)
def fl_get_menu_text(pObject):
    """ fl_get_menu_text(pObject) -> text string
    """

    retval = _fl_get_menu_text(pObject)
    return retval


_fl_set_menu_entries = cfuncproto(
        so_libforms, "fl_set_menu_entries",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_PUP_ENTRY)],
        """int fl_set_menu_entries(FL_OBJECT * ob, FL_PUP_ENTRY * ent)    DEPRECATED
        """)
def fl_set_menu_entries(pObject, ent):
    """ fl_set_menu_entries(pObject, ent) -> num.
    """

    retval = _fl_set_menu_entries(pObject, ent)
    return retval


_fl_set_menu_notitle = cfuncproto(
        so_libforms, "fl_set_menu_notitle",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_menu_notitle(FL_OBJECT * ob, int off)   DEPRECATED?
        """)
def fl_set_menu_notitle(pObject, off):
    """ fl_set_menu_notitle(pObject, off) -> num.
    """

    retval = _fl_set_menu_notitle(pObject, off)
    return retval


_fl_set_menu_item_id = cfuncproto(
        so_libforms, "fl_set_menu_item_id",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
        """int fl_set_menu_item_id(FL_OBJECT * ob, int item, int id)
        """)
def fl_set_menu_item_id(pObject, item, idnum):
    """ fl_set_menu_item_id(pObject, item, idnum) -> num.
    """

    retval = _fl_set_menu_item_id(pObject, item, idnum)
    return retval


##############################################
# forms.h (menubar.h)
# Object Class: MenuBar
# THIS FILE SEEMS NOT TO BE NEEDED AT ALL JTT
##############################################

# values for unnamed enumeration
FL_NORMAL_MENUBAR = 0

# Defaults
FL_MENUBAR_BOXTYPE = FL_UP_BOX
FL_MENUBAR_COL1 = FL_COL1
FL_MENUBAR_COL2 = FL_MCOL
FL_MENUBAR_LCOL = FL_LCOL

# Routines not active anymore:

#fl_create_menubar = cfuncproto(
#        so_libforms, "fl_create_menubar",
#       cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
#       FL_Coord, STRING],
#       """FL_OBJECT * fl_create_menubar(int type, FL_Coord x, FL_Coord y,
#          FL_Coord w, FL_Coord h, char * label)    REMOVED
#       """)
#def fl_create_menubar(bartype, x, y, w, h, label):
#   """ fl_create_menubar(bartype, x, y, w, h, label) -> pObject
#   """
#
#   retval fl_create_menubar(bartype, x, y, w, h, label)
#   return retval


#fl_add_menubar = cfuncproto(
#        so_libforms, "fl_add_menubar",
#       cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
#       FL_Coord, STRING],
#       """FL_OBJECT * fl_add_menubar(int type, FL_Coord x, FL_Coord y,
#          FL_Coord w, FL_Coord h, char * label)    REMOVED
#       """)
#def fl_add_menubar(bartype, x, y, w, h, label):
#   """ fl_add_menubar(bartype, x, y, w, h, label) -> pObject
#   """
#
#   retval fl_add_menubar(bartype, x, y, w, h, label)
#   return retval


#fl_clear_menubar = cfuncproto(
#        so_libforms, "fl_clear_menubar",
#       None, [cty.POINTER(FL_OBJECT)],
#       """void fl_clear_menubar(FL_OBJECT * ob)    REMOVED
#       """)
#def fl_clear_menubar(pObject):
#   """ fl_clear_menubar(pObject)
#   """
#
#   fl_clear_menubar(pObject)


#fl_set_menubar = cfuncproto(
#        so_libforms, "fl_set_menubar",
#       None, [cty.POINTER(FL_OBJECT), STRING],
#       """void fl_set_menubar(FL_OBJECT * ob, char * label)    REMOVED
#       """)
#def fl_set_menubar(pObject, label):
#   """ fl_set_menubar(pObject, label)
#   """
#
#   fl_set_menubar(pObject, label)


#fl_set_menubar_entries = cfuncproto(
#        so_libforms, "fl_set_menubar_entries",
#       None, [cty.POINTER(FL_OBJECT), STRING, cty.POINTER(FL_PUP_ENTRY)],
#       """void fl_set_menubar_entries(FL_OBJECT * ob, char * label,
#          FL_PUP_ENTRY * label)    REMOVED
#       """)
#def fl_set_menubar_entries(pObject, label, pup):
#   """ fl_set_menubar_entries(pObject, label, pup)
#   """
#
#   fl_set_menubar_entries(pObject, label, pup)


# Nmenu object types
# values for unnamed enumeration
FL_NORMAL_NMENU = 0
FL_NORMAL_TOUCH_NMENU = 1
FL_BUTTON_NMENU = 2
FL_BUTTON_TOUCH_NMENU = 3


_fl_create_nmenu = cfuncproto(
        so_libforms, "fl_create_nmenu",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_nmenu(int p1, FL_Coord p2, FL_Coord p3,
           FL_Coord p4, FL_Coord p5, const char * p6)
        """)
def fl_create_nmenu(p1, p2, p3, p4, p5, p6):
    """ fl_create_nmenu(p1, p2, p3, p4, p5, p6) -> pObject
    """

    retval = _fl_create_nmenu(p1, p2, p3, p4, p5, p6)
    return retval


_fl_add_nmenu = cfuncproto(
        so_libforms, "fl_add_nmenu",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_nmenu(int p1, FL_Coord p2, FL_Coord p3,
           FL_Coord p4, FL_Coord p5, const char * p6)
        """)
def fl_add_nmenu(p1, p2, p3, p4, p5, p6):
    """ fl_add_nmenu(p1, p2, p3, p4, p5, p6) -> pObject
    """

    retval = _fl_add_nmenu(p1, p2, p3, p4, p5, p6)
    return retval


_fl_clear_nmenu = cfuncproto(
        so_libforms, "fl_clear_nmenu",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_clear_nmenu(FL_OBJECT * p1)
        """)
def fl_clear_nmenu(pObject):
    """ fl_clear_nmenu(pObject) -> num.
    """

    retval = _fl_clear_nmenu(pObject)
    return retval


_fl_add_nmenu_items = cfuncproto(
        so_libforms, "fl_add_nmenu_items",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), STRING],
        """FL_POPUP_ENTRY * fl_add_nmenu_items(FL_OBJECT * p1, const char * p2)
        """)
def fl_add_nmenu_items(pObject, p2):
    """ fl_add_nmenu_items(pObject, p2) -> popup_entry
    """

    retval = _fl_add_nmenu_items(pObject, p2)
    return retval


_fl_insert_nmenu_items = cfuncproto(
        so_libforms, "fl_insert_nmenu_items",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT),
        cty.POINTER(FL_POPUP_ENTRY), STRING],
        """FL_POPUP_ENTRY * fl_insert_nmenu_items(FL_OBJECT * p1,
           FL_POPUP_ENTRY * p2, const char * p3)
        """)
def fl_insert_nmenu_items(pObject, p2, p3):
    """ fl_insert_nmenu_items(pObject, p2, p3) -> popup_entry
    """

    retval = _fl_insert_nmenu_items(pObject, p2, p3)
    return retval


_fl_replace_nmenu_item = cfuncproto(
        so_libforms, "fl_replace_nmenu_item",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT),
        cty.POINTER(FL_POPUP_ENTRY), STRING],
        """FL_POPUP_ENTRY * fl_replace_nmenu_item(FL_OBJECT * p1,
           FL_POPUP_ENTRY * p2, const char * p3)
        """)
def fl_replace_nmenu_item(pObject, p2, p3):
    """ fl_replace_nmenu_item(pObject, p2, p3) -> popup_entry
    """

    retval = _fl_replace_nmenu_item(pObject, p2, p3)
    return retval


_fl_delete_nmenu_item = cfuncproto(
        so_libforms, "fl_delete_nmenu_item",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_POPUP_ENTRY)],
        """int fl_delete_nmenu_item(FL_OBJECT * p1, FL_POPUP_ENTRY * p2)
        """)
def fl_delete_nmenu_item(pObject, p2):
    """ fl_delete_nmenu_item(pObject, p2) -> num.
    """

    retval = _fl_delete_nmenu_item(pObject, p2)
    return retval


_fl_set_nmenu_items = cfuncproto(
        so_libforms, "fl_set_nmenu_items",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT),
        cty.POINTER(FL_POPUP_ITEM)],
        """FL_POPUP_ENTRY * fl_set_nmenu_items(FL_OBJECT * p1,
           FL_POPUP_ITEM * p2)
        """)
def fl_set_nmenu_items(pObject, p2):
    """ fl_set_nmenu_items(pObject, p2) -> popup_entry
    """

    retval = _fl_set_nmenu_items(pObject, p2)
    return retval


_fl_get_nmenu_popup = cfuncproto(
        so_libforms, "fl_get_nmenu_popup",
        cty.POINTER(FL_POPUP), [cty.POINTER(FL_OBJECT)],
        """FL_POPUP * fl_get_nmenu_popup(FL_OBJECT * p1)
        """)
def fl_get_nmenu_popup(pObject):
    """ fl_get_nmenu_popup(pObject) -> popup
    """

    retval = _fl_get_nmenu_popup(pObject)
    return retval


_fl_set_nmenu_popup = cfuncproto(
        so_libforms, "fl_set_nmenu_popup",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_POPUP)],
        """int fl_set_nmenu_popup(FL_OBJECT * p1, FL_POPUP * p2)
        """)
def fl_set_nmenu_popup(pObject, p2):
    """ fl_set_nmenu_popup(pObject, p2) -> num.
    """

    retval = _fl_set_nmenu_popup(pObject, p2)
    return retval


_fl_get_nmenu_item = cfuncproto(
        so_libforms, "fl_get_nmenu_item",
        cty.POINTER(FL_POPUP_RETURN), [cty.POINTER(FL_OBJECT)],
        """FL_POPUP_RETURN * fl_get_nmenu_item(FL_OBJECT * p1)
        """)
def fl_get_nmenu_item(pObject):
    """ fl_get_nmenu_item(pObject) -> popup_return
    """

    retval = _fl_get_nmenu_item(pObject)
    return retval


_fl_get_nmenu_item_by_value = cfuncproto(
        so_libforms, "fl_get_nmenu_item_by_value",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), cty.c_long],
        """FL_POPUP_ENTRY * fl_get_nmenu_item_by_value(FL_OBJECT * p1,
           long int p2)
        """)
def fl_get_nmenu_item_by_value(pObject, p2):
    """ fl_get_nmenu_item_by_value(pObject, p2) -> popup_entry
    """

    retval = _fl_get_nmenu_item_by_value(pObject, p2)
    return retval


_fl_get_nmenu_item_by_label = cfuncproto(
        so_libforms, "fl_get_nmenu_item_by_label",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), STRING],
        """FL_POPUP_ENTRY * fl_get_nmenu_item_by_label(FL_OBJECT * p1,
           const char * p2)
        """)
def fl_get_nmenu_item_by_label(pObject, p2):
    """ fl_get_nmenu_item_by_label(pObject, p2) -> popup_entry
    """

    retval = _fl_get_nmenu_item_by_label(pObject, p2)
    return retval


_fl_get_nmenu_item_by_text = cfuncproto(
        so_libforms, "fl_get_nmenu_item_by_text",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), STRING],
        """FL_POPUP_ENTRY * fl_get_nmenu_item_by_text(FL_OBJECT * p1,
           const char * p2)
        """)
def fl_get_nmenu_item_by_text(pObject, p2):
    """ fl_get_nmenu_item_by_text(pObject, p2) -> popup_entry
    """

    retval = _fl_get_nmenu_item_by_text(pObject, p2)
    return retval


_fl_set_nmenu_policy = cfuncproto(
        so_libforms, "fl_set_nmenu_policy",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_nmenu_policy(FL_OBJECT * p1, int p2)
        """)
def fl_set_nmenu_policy(pObject, p2):
    """ fl_set_nmenu_policy(pObject, p2) -> num.
    """

    retval = _fl_set_nmenu_policy(pObject, p2)
    return retval


_fl_set_nmenu_hl_text_color = cfuncproto(
        so_libforms, "fl_set_nmenu_hl_text_color",
        FL_COLOR, [cty.POINTER(FL_OBJECT), FL_COLOR],
        """FL_COLOR fl_set_nmenu_hl_text_color(FL_OBJECT * p1, FL_COLOR p2)
        """)
def fl_set_nmenu_hl_text_color(pObject, p2):
    """ fl_set_nmenu_hl_text_color(pObject, p2) -> color
    """

    retval = _fl_set_nmenu_hl_text_color(pObject, p2)
    return retval


#########################
# forms.h (positioner.h)
#########################

FL_NORMAL_POSITIONER = 0
FL_OVERLAY_POSITIONER = 1

# Defaults
FL_POSITIONER_BOXTYPE = FL_DOWN_BOX
FL_POSITIONER_COL1 = FL_COL1
FL_POSITIONER_COL2 = FL_RED
FL_POSITIONER_LCOL = FL_LCOL
FL_POSITIONER_ALIGN = FL_ALIGN_BOTTOM


# Routines

_fl_create_positioner = cfuncproto(
        so_libforms, "fl_create_positioner",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_positioner(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_positioner(postype, x, y, w, h, label):
    """ fl_create_positioner(postype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_positioner(postype, x, y, w, h, label)
    return retval


_fl_add_positioner = cfuncproto(
        so_libforms, "fl_add_positioner",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_positioner(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_positioner(postype, x, y, w, h, label):
    """ fl_add_positioner(postype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_positioner(postype, x, y, w, h, label)
    return retval


_fl_set_positioner_xvalue = cfuncproto(
        so_libforms, "fl_set_positioner_xvalue",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_positioner_xvalue(FL_OBJECT * ob, double val)
        """)
def fl_set_positioner_xvalue(pObject, val):
    """ fl_set_positioner_xvalue(pObject, val)
    """

    _fl_set_positioner_xvalue(pObject, val)


_fl_get_positioner_xvalue = cfuncproto(
        so_libforms, "fl_get_positioner_xvalue",
        cty.c_double, [cty.POINTER(FL_OBJECT)],
        """double fl_get_positioner_xvalue(FL_OBJECT * ob)
        """)
def fl_get_positioner_xvalue(pObject):
    """ fl_get_positioner_xvalue(pObject) -> num.
    """

    retval = _fl_get_positioner_xvalue(pObject)
    return retval


_fl_set_positioner_xbounds = cfuncproto(
        so_libforms, "fl_set_positioner_xbounds",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_positioner_xbounds(FL_OBJECT * ob, double min,
           double max)
        """)
def fl_set_positioner_xbounds(pObject, min_bound, max_bound):
    """ fl_set_positioner_xbounds(pObject, min_bound, max_bound)
    """

    _fl_set_positioner_xbounds(pObject, min_bound, max_bound)


_fl_get_positioner_xbounds = cfuncproto(
        so_libforms, "fl_get_positioner_xbounds",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_positioner_xbounds(FL_OBJECT * ob, double * min,
        double * max)
        """)
def fl_get_positioner_xbounds(pObject, min_bound, max_bound):
    """ fl_get_positioner_xbounds(pObject, min_bound, max_bound)
    """

    _fl_get_positioner_xbounds(pObject, min_bound, max_bound)


_fl_set_positioner_yvalue = cfuncproto(
        so_libforms, "fl_set_positioner_yvalue",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_positioner_yvalue(FL_OBJECT * ob, double val)
        """)
def fl_set_positioner_yvalue(pObject, val):
    """ fl_set_positioner_yvalue(pObject, val)
    """

    _fl_set_positioner_yvalue(pObject, val)


_fl_get_positioner_yvalue = cfuncproto(
        so_libforms, "fl_get_positioner_yvalue",
        cty.c_double, [cty.POINTER(FL_OBJECT)],
        """double fl_get_positioner_yvalue(FL_OBJECT * ob)
        """)
def fl_get_positioner_yvalue(pObject):
    """ fl_get_positioner_yvalue(pObject) -> num.
    """

    retval = _fl_get_positioner_yvalue(pObject)
    return retval


_fl_set_positioner_ybounds = cfuncproto(
        so_libforms, "fl_set_positioner_ybounds",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_positioner_ybounds(FL_OBJECT * ob, double min,
           double max)
        """)
def fl_set_positioner_ybounds(pObject, min_bound, max_bound):
    """ fl_set_positioner_ybounds(pObject, min_bound, max_bound)
    """

    _fl_set_positioner_ybounds(pObject, min_bound, max_bound)


_fl_get_positioner_ybounds = cfuncproto(
        so_libforms, "fl_get_positioner_ybounds",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_positioner_ybounds(FL_OBJECT * ob, double * min,
           double * max)
        """)
def fl_get_positioner_ybounds(pObject, min_bound, max_bound):
    """ fl_get_positioner_ybounds(pObject, min_bound, max_bound)
    """

    _fl_get_positioner_ybounds(pObject, min_bound, max_bound)


_fl_set_positioner_xstep = cfuncproto(
        so_libforms, "fl_set_positioner_xstep",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_positioner_xstep(FL_OBJECT * ob, double value)
        """)
def fl_set_positioner_xstep(pObject, value):
    """ fl_set_positioner_xstep(pObject, value)
    """

    _fl_set_positioner_xstep(pObject, value)


_fl_set_positioner_ystep = cfuncproto(
        so_libforms, "fl_set_positioner_ystep",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_positioner_ystep(FL_OBJECT * ob, double value)
        """)
def fl_set_positioner_ystep(pObject, value):
    """ fl_set_positioner_ystep(pObject, value)
    """

    _fl_set_positioner_ystep(pObject, value)


_fl_set_positioner_return = cfuncproto(
        so_libforms, "fl_set_positioner_return",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_positioner_return(FL_OBJECT * ob, int value)
        """)
def fl_set_positioner_return(pObject, value):
    """ fl_set_positioner_return(pObject, value)
    """

    _fl_set_positioner_return(pObject, value)


# values for unnamed enumeration
FL_VERT_SCROLLBAR = 0
FL_HOR_SCROLLBAR = 1
FL_VERT_THIN_SCROLLBAR = 2
FL_HOR_THIN_SCROLLBAR = 3
FL_VERT_NICE_SCROLLBAR = 4
FL_HOR_NICE_SCROLLBAR = 5
FL_VERT_PLAIN_SCROLLBAR = 6
FL_HOR_PLAIN_SCROLLBAR = 7
FL_HOR_BASIC_SCROLLBAR = FL_HOR_PLAIN_SCROLLBAR
FL_VERT_BASIC_SCROLLBAR = FL_VERT_PLAIN_SCROLLBAR

# values for unnamed enumeration
FL_NORMAL_SCROLLBAR = 0
FL_THIN_SCROLLBAR = 1
FL_NICE_SCROLLBAR = 2
FL_PLAIN_SCROLLBAR = 3


_fl_create_scrollbar = cfuncproto(
        so_libforms, "fl_create_scrollbar",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_scrollbar(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_scrollbar(scrolltype, x, y, w, h, label):
    """ fl_create_scrollbar(scrolltype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_scrollbar(scrolltype, x, y, w, h, label)
    return retval


_fl_add_scrollbar = cfuncproto(
        so_libforms, "fl_add_scrollbar",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_scrollbar(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_scrollbar(scrolltype, x, y, w, h, label):
    """ fl_add_scrollbar(scrolltype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_scrollbar(scrolltype, x, y, w, h, label)
    return retval


_fl_get_scrollbar_value = cfuncproto(
        so_libforms, "fl_get_scrollbar_value",
        cty.c_double, [cty.POINTER(FL_OBJECT)],
        """double fl_get_scrollbar_value(FL_OBJECT * ob)
        """)
def fl_get_scrollbar_value(pObject):
    """ fl_get_scrollbar_value(pObject) -> num.
    """

    retval = _fl_get_scrollbar_value(pObject)
    return retval


_fl_set_scrollbar_value = cfuncproto(
        so_libforms, "fl_set_scrollbar_value",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_scrollbar_value(FL_OBJECT * ob, double val)
        """)
def fl_set_scrollbar_value(pObject, val):
    """ fl_set_scrollbar_value(pObject, val)
    """

    _fl_set_scrollbar_value(pObject, val)


_fl_set_scrollbar_size = cfuncproto(
        so_libforms, "fl_set_scrollbar_size",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_scrollbar_size(FL_OBJECT * ob, double val)
        """)
def fl_set_scrollbar_size(pObject, val):
    """ fl_set_scrollbar_size(pObject, val)
    """

    _fl_set_scrollbar_size(pObject, val)


_fl_set_scrollbar_increment = cfuncproto(
        so_libforms, "fl_set_scrollbar_increment",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_scrollbar_increment(FL_OBJECT * ob, double l, double r)
        """)
def fl_set_scrollbar_increment(pObject, l, r):
    """ fl_set_scrollbar_increment(pObject, l, r)
    """

    _fl_set_scrollbar_increment(pObject, l, r)


_fl_get_scrollbar_increment = cfuncproto(
        so_libforms, "fl_get_scrollbar_increment",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double), cty.POINTER(cty.c_double)],
        """void fl_get_scrollbar_increment(FL_OBJECT * ob, double * a, double * b)
        """)
def fl_get_scrollbar_increment(pObject, a, b):
    """ fl_get_scrollbar_increment(pObject, a, b)
    """

    _fl_get_scrollbar_increment(pObject, a, b)


_fl_set_scrollbar_bounds = cfuncproto(
        so_libforms, "fl_set_scrollbar_bounds",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_scrollbar_bounds(FL_OBJECT * ob, double b1, double b2)
        """)
def fl_set_scrollbar_bounds(pObject, b1, b2):
    """ fl_set_scrollbar_bounds(pObject, b1, b2)
    """

    _fl_set_scrollbar_bounds(pObject, b1, b2)


_fl_get_scrollbar_bounds = cfuncproto(
        so_libforms, "fl_get_scrollbar_bounds",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double), cty.POINTER(cty.c_double)],
        """void fl_get_scrollbar_bounds(FL_OBJECT * ob, double * b1, double * b2)
        """)
def fl_get_scrollbar_bounds(pObject, b1, b2):
    """ fl_get_scrollbar_bounds(pObject, b1, b2)
    """

    _fl_get_scrollbar_bounds(pObject, b1, b2)


_fl_set_scrollbar_return = cfuncproto(
        so_libforms, "fl_set_scrollbar_return",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_scrollbar_return(FL_OBJECT * ob, int ret)
        """)
def fl_set_scrollbar_return(pObject, ret):
    """ fl_set_scrollbar_return(pObject, ret)
    """

    _fl_set_scrollbar_return(pObject, ret)


_fl_set_scrollbar_step = cfuncproto(
        so_libforms, "fl_set_scrollbar_step",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_scrollbar_step(FL_OBJECT * ob, double step)
        """)
def fl_set_scrollbar_step(pObject, step):
    """ fl_set_scrollbar_step(pObject, step)
    """

    _fl_set_scrollbar_step(pObject, step)


#####################
# forms.h (select.h)
#####################

# Select object types
# values for unnamed enumeration
FL_NORMAL_SELECT = 0
FL_MENU_SELECT = 1
FL_DROPLIST_SELECT = 2

# Defaults
FL_SELECT_COL1 = FL_COL1
FL_SELECT_COL2 = FL_MCOL
FL_SELECT_LCOL = FL_LCOL
FL_SELECT_ALIGN = FL_ALIGN_LEFT


_fl_create_select = cfuncproto(
        so_libforms, "fl_create_select",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_select(int p1, FL_Coord p2, FL_Coord p3,
           FL_Coord p4, FL_Coord p5, const char * p6)
        """)
def fl_create_select(p1, p2, p3, p4, p5, p6):
    """ fl_create_select(p1, p2, p3, p4, p5, p6) -> pObject
    """

    retval = _fl_create_select(p1, p2, p3, p4, p5, p6)
    return retval


_fl_add_select = cfuncproto(
        so_libforms, "fl_add_select",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_select(int p1, FL_Coord p2, FL_Coord p3,
           FL_Coord p4, FL_Coord p5, const char * p6)
        """)
def fl_add_select(p1, p2, p3, p4, p5, p6):
    """ fl_add_select(p1, p2, p3, p4, p5, p6) -> pObject
    """

    retval = _fl_add_select(p1, p2, p3, p4, p5, p6)
    return retval


_fl_clear_select = cfuncproto(
        so_libforms, "fl_clear_select",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_clear_select(FL_OBJECT * p1)
        """)
def fl_clear_select(pObject):
    """ fl_clear_select(pObject)
    """

    _fl_clear_select(pObject)


_fl_add_select_items = cfuncproto(
        so_libforms, "fl_add_select_items",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), STRING],
        """FL_POPUP_ENTRY * fl_add_select_items(FL_OBJECT * p1, const char * p2)
        """)
def fl_add_select_items(pObject, item_string):
    """ fl_add_select_items(pObject, item_string) -> popup_entry
    """

    retval = _fl_add_select_items(pObject, item_string)
    return retval


_fl_insert_select_items = cfuncproto(
        so_libforms, "fl_insert_select_items",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT),
        cty.POINTER(FL_POPUP_ENTRY), STRING],
        """FL_POPUP_ENTRY * fl_insert_select_items(FL_OBJECT * p1,
           FL_POPUP_ENTRY * p2, const char * p3)
        """)
def fl_insert_select_items(pObject, p2, item_string):
    """ fl_insert_select_items(pObject, p2, item_string) -> popup_entry
    """

    retval = _fl_insert_select_items(pObject, p2, item_string)
    return retval


_fl_replace_select_item = cfuncproto(
        so_libforms, "fl_replace_select_item",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT),
        cty.POINTER(FL_POPUP_ENTRY), STRING],
        """FL_POPUP_ENTRY * fl_replace_select_item(FL_OBJECT * p1,
           FL_POPUP_ENTRY * p2, const char * p3)
        """)
def fl_replace_select_item(p1, p2, p3):
    """ fl_replace_select_item(p1, p2, p3) -> popup_entry
    """

    retval = _fl_replace_select_item(p1, p2, p3)
    return retval


_fl_delete_select_item = cfuncproto(
        so_libforms, "fl_delete_select_item",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_POPUP_ENTRY)],
        """int fl_delete_select_item(FL_OBJECT * p1, FL_POPUP_ENTRY * p2)
        """)
def fl_delete_select_item(p1, p2):
    """ fl_delete_select_item(p1, p2) -> num.
    """

    retval = _fl_delete_select_item(p1, p2)
    return retval


_fl_set_select_items = cfuncproto(
        so_libforms, "fl_set_select_items",
        cty.c_long, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_POPUP_ITEM)],
        """)long int fl_set_select_items(FL_OBJECT * p1, FL_POPUP_ITEM * p2)
        """)
def fl_set_select_items(p1, p2):
    """ fl_set_select_items(p1, p2) -> num.
    """

    retval = _fl_set_select_items(p1, p2)
    return retval


_fl_get_select_popup = cfuncproto(
        so_libforms, "fl_get_select_popup",
        cty.POINTER(FL_POPUP), [cty.POINTER(FL_OBJECT)],
        """FL_POPUP * fl_get_select_popup(FL_OBJECT * p1)
        """)
def fl_get_select_popup(p1):
    """ fl_get_select_popup(p1) -> popup
    """

    retval = _fl_get_select_popup(p1)
    return retval


_fl_set_select_popup = cfuncproto(
        so_libforms, "fl_set_select_popup",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_POPUP)],
        """int fl_set_select_popup(FL_OBJECT * p1, FL_POPUP * p2)
        """)
def fl_set_select_popup(p1, p2):
    """ fl_set_select_popup(p1, p2) -> num.
    """

    retval = _fl_set_select_popup(p1, p2)
    return retval


_fl_get_select_item = cfuncproto(
        so_libforms, "fl_get_select_item",
        cty.POINTER(FL_POPUP_RETURN), [cty.POINTER(FL_OBJECT)],
        """FL_POPUP_RETURN * fl_get_select_item(FL_OBJECT * p1)
        """)
def fl_get_select_item(pObject):
    """ fl_get_select_item(pObject) -> popup_return
    """

    retval = _fl_get_select_item(pObject)
    return retval


_fl_set_select_item = cfuncproto(
        so_libforms, "fl_set_select_item",
        cty.POINTER(FL_POPUP_RETURN), [cty.POINTER(FL_OBJECT),
        cty.POINTER(FL_POPUP_ENTRY)],
        """FL_POPUP_RETURN * fl_set_select_item(FL_OBJECT * p1,
           FL_POPUP_ENTRY * p2)
        """)
def fl_set_select_item(pObject, p2):
    """ fl_set_select_item(pObject, p2) -> popup_return
    """

    retval = _fl_set_select_item(pObject, p2)
    return retval


_fl_get_select_item_by_value = cfuncproto(
        so_libforms, "fl_get_select_item_by_value",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), cty.c_long],
        """FL_POPUP_ENTRY * fl_get_select_item_by_value(FL_OBJECT * p1,
           long int p2)
        """)
def fl_get_select_item_by_value(pObject, p2):
    """ fl_get_select_item_by_value(pObject, p2) -> popup_entry
    """

    retval = _fl_get_select_item_by_value(pObject, p2)
    return retval


_fl_get_select_item_by_label = cfuncproto(
        so_libforms, "fl_get_select_item_by_label",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), STRING],
        """FL_POPUP_ENTRY * fl_get_select_item_by_label(FL_OBJECT * p1,
           const char * p2)
        """)
def fl_get_select_item_by_label(pObject, p2):
    """ fl_get_select_item_by_label(pObject, p2) -> popup_entry
    """

    retval = _fl_get_select_item_by_label(pObject, p2)
    return retval


_fl_get_select_item_by_text = cfuncproto(
        so_libforms, "fl_get_select_item_by_text",
        cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), STRING],
        """FL_POPUP_ENTRY * fl_get_select_item_by_text(FL_OBJECT * p1,
           const char * p2)
        """)
def fl_get_select_item_by_text(pObject, p2):
    """ fl_get_select_item_by_text(pObject, p2) -> popup_entry
    """

    retval = _fl_get_select_item_by_text(pObject, p2)
    return retval


_fl_get_select_text_color = cfuncproto(
        so_libforms, "fl_get_select_text_color",
        FL_COLOR, [cty.POINTER(FL_OBJECT)],
        """FL_COLOR fl_get_select_text_color(FL_OBJECT * p1)
        """)
def fl_get_select_text_color(pObject):
    """ fl_get_select_text_color(pObject) -> color
    """

    retval = _fl_get_select_text_color(pObject)
    return retval


_fl_set_select_text_color = cfuncproto(
        so_libforms, "fl_set_select_text_color",
        FL_COLOR, [cty.POINTER(FL_OBJECT), FL_COLOR],
        """FL_COLOR fl_set_select_text_color(FL_OBJECT * p1, FL_COLOR p2)
        """)
def fl_set_select_text_color(p1, p2):
    """ fl_set_select_text_color(p1, p2) -> color
    """

    retval = _fl_set_select_text_color(p1, p2)
    return retval


_fl_get_select_text_font = cfuncproto(
        so_libforms, "fl_get_select_text_font",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """int fl_get_select_text_font(FL_OBJECT * p1, int * p2, int * p3)
        """)
def fl_get_select_text_font(p1, p2, p3):
    """ fl_get_select_text_font(p1, p2, p3) -> num.
    """

    retval = _fl_get_select_text_font(p1, p2, p3)
    return retval


_fl_set_select_text_font = cfuncproto(
        so_libforms, "fl_set_select_text_font",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
        """int fl_set_select_text_font(FL_OBJECT * p1, int p2, int p3)
        """)
def fl_set_select_text_font(p1, p2, p3):
    """ fl_set_select_text_font(p1, p2, p3) -> font num.
    """

    retval = _fl_set_select_text_font(p1, p2, p3)
    return retval


_fl_get_select_text_align = cfuncproto(
        so_libforms, "fl_get_select_text_align",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_select_text_align(FL_OBJECT * p1)
        """)
def fl_get_select_text_align(p1):
    """ fl_get_select_text_align(p1) -> num.
    """

    retval = _fl_get_select_text_align(p1)
    return retval


_fl_set_select_text_align = cfuncproto(
        so_libforms, "fl_set_select_text_align",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_select_text_align(FL_OBJECT * p1, int p2)
        """)
def fl_set_select_text_align(p1, p2):
    """ fl_set_select_text_align(p1, p2) -> num.
    """

    retval = _fl_set_select_text_align(p1, p2)
    return retval


_fl_set_select_policy = cfuncproto(
        so_libforms, "fl_set_select_policy",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_select_policy(FL_OBJECT * p1, int p2)
        """)
def fl_set_select_policy(p1, p2):
    """ fl_set_select_policy(p1, p2) -> num.
    """

    retval = _fl_set_select_policy(p1, p2)
    return retval


#######################
# forms.h (slider.h)
# Object Class: Slider
#######################

FL_HOR_FLAG = 1
FL_SCROLL_FLAG = 8

# values for enumeration 'FL_SLIDER_TYPE'
FL_SLIDER_TYPE = cty.c_int # enum
FL_VERT_SLIDER = 0
FL_HOR_SLIDER = FL_VERT_SLIDER | FL_HOR_FLAG
FL_VERT_FILL_SLIDER = 2
FL_HOR_FILL_SLIDER = FL_VERT_FILL_SLIDER | FL_HOR_FLAG
FL_VERT_NICE_SLIDER = 4
FL_HOR_NICE_SLIDER = FL_VERT_NICE_SLIDER | FL_HOR_FLAG
FL_VERT_BROWSER_SLIDER = 6
FL_HOR_BROWSER_SLIDER = FL_VERT_BROWSER_SLIDER | FL_HOR_FLAG
# The following are for use with scrollbars only!
# for FL_VERT_SCROLLBAR and FL_HOR_SCROLLBAR
FL_VERT_BROWSER_SLIDER2 = FL_VERT_SLIDER | FL_SCROLL_FLAG
FL_HOR_BROWSER_SLIDER2 = FL_HOR_SLIDER | FL_SCROLL_FLAG
# for FL_VERT_THIN_SCROLLBAR and FL_VERT_THIN_SCROLLBAR
FL_VERT_THIN_SLIDER = FL_VERT_FILL_SLIDER | FL_SCROLL_FLAG
FL_HOR_THIN_SLIDER = FL_HOR_FILL_SLIDER | FL_SCROLL_FLAG
# for FL_VERT_NICE_SCROLLBAR and FL_HOR_NICE_SCROLLBAR
FL_VERT_THIN_SLIDER = FL_VERT_FILL_SLIDER | FL_SCROLL_FLAG
FL_HOR_THIN_SLIDER = FL_HOR_FILL_SLIDER | FL_SCROLL_FLAG
# for FL_VERT_NICE_SCROLLBAR and FL_HOR_NICE_SCROLLBAR
FL_VERT_NICE_SLIDER2 = FL_VERT_NICE_SLIDER | FL_SCROLL_FLAG
FL_HOR_NICE_SLIDER2 = FL_HOR_NICE_SLIDER | FL_SCROLL_FLAG
# for use as FL_VERT_PLAIN_SCROLLBAR and FL_VERT_PLAIN_SCROLLBAR
FL_VERT_BASIC_SLIDER = FL_VERT_BROWSER_SLIDER | FL_SCROLL_FLAG
FL_HOR_BASIC_SLIDER = FL_HOR_BROWSER_SLIDER | FL_SCROLL_FLAG

# Defaults
FL_SLIDER_BW1 = FL_BOUND_WIDTH
FL_SLIDER_BW2 = FL_abs(FL_BOUND_WIDTH) - 1
FL_SLIDER_BOXTYPE = FL_DOWN_BOX
FL_SLIDER_COL1 = FL_COL1
FL_SLIDER_COL2 = FL_COL1
FL_SLIDER_LCOL = FL_LCOL
FL_SLIDER_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_SLIDER_FINE = 0.25
FL_SLIDER_WIDTH = 0.10


# Routines

_fl_create_slider = cfuncproto(
        so_libforms, "fl_create_slider",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_slider(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_slider(slidertype, x, y, w, h, label):
    """ fl_create_slider(slidertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_slider(slidertype, x, y, w, h, label)
    return retval


_fl_add_slider = cfuncproto(
        so_libforms, "fl_add_slider",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_slider(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_slider(slidertype, x, y, w, h, label):
    """ fl_add_slider(slidertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_slider(slidertype, x, y, w, h, label)
    return retval


_fl_create_valslider = cfuncproto(
        so_libforms, "fl_create_valslider",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_valslider(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_valslider(slidertype, x, y, w, h, label):
    """ fl_create_valslider(slidertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_valslider(slidertype, x, y, w, h, label)
    return retval


_fl_add_valslider = cfuncproto(
        so_libforms, "fl_add_valslider",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_valslider(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_valslider(slidertype, x, y, w, h, label):
    """ fl_add_valslider(slidertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_valslider(slidertype, x, y, w, h, label)
    return retval


_fl_set_slider_value = cfuncproto(
        so_libforms, "fl_set_slider_value",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_slider_value(FL_OBJECT * ob, double val)
        """)
def fl_set_slider_value(pObject, val):
    """ fl_set_slider_value(pObject, val)
    """

    _fl_set_slider_value(pObject, val)


_fl_get_slider_value = cfuncproto(
        so_libforms, "fl_get_slider_value",
        cty.c_double, [cty.POINTER(FL_OBJECT)],
        """double fl_get_slider_value(FL_OBJECT * ob)
        """)
def fl_get_slider_value(pObject):
    """ fl_get_slider_value(pObject) -> num.
    """

    retval = _fl_get_slider_value(pObject)
    return retval


_fl_set_slider_bounds = cfuncproto(
        so_libforms, "fl_set_slider_bounds",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_slider_bounds(FL_OBJECT * ob, double min, double max)
        """)
def fl_set_slider_bounds(pObject, min_bound, max_bound):
    """ fl_set_slider_bounds(pObject, min_bound, max_bound)
    """

    _fl_set_slider_bounds(pObject, min_bound, max_bound)


_fl_get_slider_bounds = cfuncproto(
        so_libforms, "fl_get_slider_bounds",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_slider_bounds(FL_OBJECT * ob, double * min,
           double * max)
        """)
def fl_get_slider_bounds(pObject, min_bound, max_bound):
    """ fl_get_slider_bounds(pObject, min_bound, max_bound)
    """

    _fl_get_slider_bounds(pObject, min_bound, max_bound)


_fl_set_slider_return = cfuncproto(
        so_libforms, "fl_set_slider_return",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_slider_return(FL_OBJECT * ob, int value)
        """)
def fl_set_slider_return(pObject, value):
    """ fl_set_slider_return(pObject, value)
    """

    _fl_set_slider_return(pObject, value)


_fl_set_slider_step = cfuncproto(
        so_libforms, "fl_set_slider_step",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_slider_step(FL_OBJECT * ob, double value)
        """)
def fl_set_slider_step(pObject, value):
    """ fl_set_slider_step(pObject, value)
    """

    _fl_set_slider_step(pObject, value)


_fl_set_slider_increment = cfuncproto(
        so_libforms, "fl_set_slider_increment",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_slider_increment(FL_OBJECT * ob, double l, double r)
        """)
def fl_set_slider_increment(pObject, l, r):
    """ fl_set_slider_increment(pObject, l, r)
    """

    _fl_set_slider_increment(pObject, l, r)


_fl_get_slider_increment = cfuncproto(
        so_libforms, "fl_get_slider_increment",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)], \
        """void fl_get_slider_increment(FL_OBJECT * ob, double * l, double * r)
        """)
def fl_get_slider_increment(pObject, l, r):
    """ fl_get_slider_increment(pObject, l, r)
    """

    _fl_get_slider_increment(pObject, l, r)


_fl_set_slider_size = cfuncproto(
        so_libforms, "fl_set_slider_size",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_slider_size(FL_OBJECT * ob, double size)
        """)
def fl_set_slider_size(pObject, size):
    """ fl_set_slider_size(pObject, size)
    """

    _fl_set_slider_size(pObject, size)


_fl_set_slider_precision = cfuncproto(
        so_libforms, "fl_set_slider_precision",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_slider_precision(FL_OBJECT * ob, int prec)
        """)
def fl_set_slider_precision(pObject, prec):
    """ fl_set_slider_precision(pObject, prec)
    """

    _fl_set_slider_precision(pObject, prec)


_fl_set_slider_filter = cfuncproto(
        so_libforms, "fl_set_slider_filter",
        None, [cty.POINTER(FL_OBJECT), FL_VAL_FILTER],
        """void fl_set_slider_filter(FL_OBJECT * ob, FL_VAL_FILTER filter)
        """)
def fl_set_slider_filter(pObject, py_filter):
    """ fl_set_slider_filter(pObject, py_filter)
    """

    c_filter = FL_VAL_FILTER(py_filter)
    _cfunc_refs[get_rand_dictkey()] = c_filter
    _fl_set_slider_filter(pObject, c_filter)


# values for enumeration 'FL_SPINNER_TYPE'
FL_SPINNER_TYPE = cty.c_int # enum
FL_INT_SPINNER = 0
FL_FLOAT_SPINNER = 1


_fl_create_spinner = cfuncproto(
        so_libforms, "fl_create_spinner",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_spinner(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_spinner(spinnertype, x, y, w, h, label):
    """ fl_create_spinner(spinnertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_spinner(spinnertype, x, y, w, h, label)
    return retval


_fl_add_spinner = cfuncproto(
        so_libforms, "fl_add_spinner",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_spinner(int type, FL_Coord x, FL_Coord y,
        FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_spinner(spinnertype, x, y, w, h, label):
    """ fl_add_spinner(spinnertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_spinner(spinnertype, x, y, w, h, label)
    return retval


_fl_get_spinner_value = cfuncproto(
        so_libforms, "fl_get_spinner_value",
        cty.c_double, [cty.POINTER(FL_OBJECT)],
        """double fl_get_spinner_value(FL_OBJECT * obj)
        """)
def fl_get_spinner_value(pObject):
    """ fl_get_spinner_value(pObject)
    """

    _fl_get_spinner_value(pObject)


_fl_set_spinner_value = cfuncproto(
        so_libforms, "fl_set_spinner_value",
        cty.c_double, [cty.POINTER(FL_OBJECT), cty.c_double],
        """double fl_set_spinner_value(FL_OBJECT * obj, double val)
        """)
def fl_set_spinner_value(pObject, val):
    """ fl_set_spinner_value(pObject, val) -> num.
    """

    _fl_set_spinner_value(pObject, val)


_fl_set_spinner_bounds = cfuncproto(
        so_libforms, "fl_set_spinner_bounds",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_spinner_bounds(FL_OBJECT * obj, double min, double max)
        """)
def fl_set_spinner_bounds(pObject, min_bound, max_bound):
    """ fl_set_spinner_bounds(pObject, min_bound, max_bound)
    """

    _fl_set_spinner_bounds(pObject, min_bound, max_bound)


_fl_get_spinner_bounds = cfuncproto(
        so_libforms, "fl_get_spinner_bounds",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)], \
        """void fl_get_spinner_bounds(FL_OBJECT * obj, double * min,
           double * max)
        """)
def fl_get_spinner_bounds(pObject, min_bound, max_bound):
    """ fl_get_spinner_bounds(pObject, min_bound, max_bound)
    """

    _fl_get_spinner_bounds(pObject, min_bound, max_bound)


_fl_set_spinner_step = cfuncproto(
        so_libforms, "fl_set_spinner_step",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_spinner_step(FL_OBJECT * obj, double step)
        """)

def fl_set_spinner_step(pObject, step):
    """ fl_set_spinner_step(pObject, step)
    """

    _fl_set_spinner_step(pObject, step)


_fl_get_spinner_step = cfuncproto(
        so_libforms, "fl_get_spinner_step",
        cty.c_double, [cty.POINTER(FL_OBJECT)],
        """double fl_get_spinner_step(FL_OBJECT * obj)
        """)

def fl_get_spinner_step(pObject):
    """ fl_get_spinner_step(pObject) -> num.
    """

    retval = _fl_get_spinner_step(pObject)
    return retval


_fl_set_spinner_precision = cfuncproto(
        so_libforms, "fl_set_spinner_precision",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_spinner_precision(FL_OBJECT * obj, int prec)
        """)
def fl_set_spinner_precision(pObject, prec):
    """ fl_set_spinner_precision(pObject, prec)
    """

    _fl_set_spinner_precision(pObject, prec)


_fl_get_spinner_precision = cfuncproto(
        so_libforms, "fl_get_spinner_precision",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_spinner_precision(FL_OBJECT * obj)
        """)

def fl_get_spinner_precision(pObject):
    """ fl_get_spinner_precision(pObject)
    """

    _fl_get_spinner_precision(pObject)


_fl_get_spinner_input = cfuncproto(
        so_libforms, "fl_get_spinner_input",
        cty.POINTER(FL_OBJECT), [cty.POINTER(FL_OBJECT)],
        """FL_OBJECT * fl_get_spinner_input(FL_OBJECT * obj)
        """)

def fl_get_spinner_input(pObject):
    """ fl_get_spinner_input(pObject) -> pObject
    """

    retval = _fl_get_spinner_input(pObject)
    return retval


_fl_get_spinner_up_button = cfuncproto(
        so_libforms, "fl_get_spinner_up_button",
        cty.POINTER(FL_OBJECT), [cty.POINTER(FL_OBJECT)],
        """FL_OBJECT * fl_get_spinner_up_button(FL_OBJECT * obj)
        """)

def fl_get_spinner_up_button(pObject):
    """ fl_get_spinner_up_button(pObject) -> pObject
    """

    retval = _fl_get_spinner_up_button(pObject)
    return retval


_fl_get_spinner_down_button = cfuncproto(
        so_libforms, "fl_get_spinner_down_button",
        cty.POINTER(FL_OBJECT), [cty.POINTER(FL_OBJECT)],
        """FL_OBJECT * fl_get_spinner_down_button(FL_OBJECT * obj)
        """)

def fl_get_spinner_down_button(pObject):
    """ fl_get_spinner_down_button(pObject) -> pObject
    """

    retval = _fl_get_spinner_down_button(pObject)
    return retval


########################
# forms.h (tabfolder.h)
########################

# values for unnamed enumeration
FL_TOP_TABFOLDER = 0        # tab on top
FL_BOTTOM_TABFOLDER = 1
FL_LEFT_TABFOLDER = 2
FL_RIGHT_TABFOLDER = 3
FL_NORMAL_TABFOLDER = FL_TOP_TABFOLDER

# values for unnamed enumeration
FL_NO = 0
FL_FIT = 1
FL_ENLARGE_ONLY = 2


_fl_create_tabfolder = cfuncproto(
        so_libforms, "fl_create_tabfolder",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_tabfolder(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_tabfolder(foldertype, x, y, w, h, label):
    """ fl_create_tabfolder(foldertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_tabfolder(foldertype, x, y, w, h, label)
    return retval


_fl_add_tabfolder = cfuncproto(
        so_libforms, "fl_add_tabfolder",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_tabfolder(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_tabfolder(foldertype, x, y, w, h, label):
    """ fl_add_tabfolder(foldertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_tabfolder(foldertype, x, y, w, h, label)
    return retval


_fl_addto_tabfolder = cfuncproto(
        so_libforms, "fl_addto_tabfolder",
        cty.POINTER(FL_OBJECT), [cty.POINTER(FL_OBJECT), STRING,
        cty.POINTER(FL_FORM)],
        """FL_OBJECT * fl_addto_tabfolder(FL_OBJECT * ob, const char * title,
           FL_FORM * form)
        """)
def fl_addto_tabfolder(pObject, title, pForm):
    """ fl_addto_tabfolder(pObject, title, pForm) -> pObject
    """

    retval = _fl_addto_tabfolder(pObject, title, pForm)
    return retval


_fl_get_tabfolder_folder_bynumber = cfuncproto(
        so_libforms, "fl_get_tabfolder_folder_bynumber",
        cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT), cty.c_int],
        """FL_FORM * fl_get_tabfolder_folder_bynumber(FL_OBJECT * ob, int num)
        """)
def fl_get_tabfolder_folder_bynumber(pObject, num):
    """ fl_get_tabfolder_folder_bynumber(pObject, num) -> pForm
    """

    retval = _fl_get_tabfolder_folder_bynumber(pObject, num)
    return retval


_fl_get_tabfolder_folder_byname = cfuncproto(
        so_libforms, "fl_get_tabfolder_folder_byname",
        cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT), STRING],
        """FL_FORM * fl_get_tabfolder_folder_byname(FL_OBJECT * ob, const char * name)
        """)
def fl_get_tabfolder_folder_byname(pObject, name):
    """ fl_get_tabfolder_folder_byname(pObject, name) -> pForm
    """

    retval = _fl_get_tabfolder_folder_byname(pObject, name)
    return retval


_fl_delete_folder = cfuncproto(
        so_libforms, "fl_delete_folder",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_FORM)],
        """void fl_delete_folder(FL_OBJECT * ob, FL_FORM * form)
        """)
def fl_delete_folder(pObject, pForm):
    """ fl_delete_folder(pObject, pForm)
    """

    _fl_delete_folder(pObject, pForm)


_fl_delete_folder_bynumber = cfuncproto(
        so_libforms, "fl_delete_folder_bynumber",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_delete_folder_bynumber(FL_OBJECT * ob, int num)
        """)
def fl_delete_folder_bynumber(pObject, num):
    """ fl_delete_folder_bynumber(pObject, num)
    """

    _fl_delete_folder_bynumber(pObject, num)


_fl_delete_folder_byname = cfuncproto(
        so_libforms, "fl_delete_folder_byname",
        None, [cty.POINTER(FL_OBJECT), STRING],
        """void fl_delete_folder_byname(FL_OBJECT * ob, const char * name)
        """)
def fl_delete_folder_byname(pObject, name):
    """ fl_delete_folder_byname(pObject, name)
    """

    _fl_delete_folder_byname(pObject, name)


_fl_set_folder = cfuncproto(
        so_libforms, "fl_set_folder",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_FORM)],
        """void fl_set_folder(FL_OBJECT * ob, FL_FORM * form)
        """)
def fl_set_folder(pObject, pForm):
    """ fl_set_folder(pObject, pForm)
    """

    _fl_set_folder(pObject, pForm)


_fl_set_folder_byname = cfuncproto(
        so_libforms, "fl_set_folder_byname",
        None, [cty.POINTER(FL_OBJECT), STRING],
        """void fl_set_folder_byname(FL_OBJECT * ob, const char * name)
        """)
def fl_set_folder_byname(pObject, name):
    """ fl_set_folder_byname(pObject, name)
    """

    _fl_set_folder_byname(pObject, name)


_fl_set_folder_bynumber = cfuncproto(
        so_libforms, "fl_set_folder_bynumber",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_folder_bynumber(FL_OBJECT * ob, int num)
        """)
def fl_set_folder_bynumber(pObject, num):
    """ fl_set_folder_bynumber(pObject, num)
    """

    _fl_set_folder_bynumber(pObject, num)


_fl_get_folder = cfuncproto(
        so_libforms, "fl_get_folder",
        cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT)],
        """FL_FORM * fl_get_folder(FL_OBJECT * ob)
        """)
def fl_get_folder(pObject):
    """ fl_get_folder(pObject) -> pForm
    """

    retval = _fl_get_folder(pObject)
    return retval


_fl_get_folder_number = cfuncproto(
        so_libforms, "fl_get_folder_number",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_folder_number(FL_OBJECT * ob)
        """)
def fl_get_folder_number(pObject):
    """ fl_get_folder_number(pObject) -> folder num.
    """

    retval = _fl_get_folder_number(pObject)
    return retval


_fl_get_folder_name = cfuncproto(
        so_libforms, "fl_get_folder_name",
        STRING, [cty.POINTER(FL_OBJECT)],
        """const char * fl_get_folder_name(FL_OBJECT * ob)
        """)
def fl_get_folder_name(pObject):
    """ fl_get_folder_name(pObject) -> name string
    """

    retval = _fl_get_folder_name(pObject)
    return retval


_fl_get_tabfolder_numfolders = cfuncproto(
        so_libforms, "fl_get_tabfolder_numfolders",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_tabfolder_numfolders(FL_OBJECT * ob)
        """)
def fl_get_tabfolder_numfolders(pObject):
    """ fl_get_tabfolder_numfolders(pObject) -> num.
    """

    retval = _fl_get_tabfolder_numfolders(pObject)
    return retval


_fl_get_active_folder = cfuncproto(
        so_libforms, "fl_get_active_folder",
        cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT)],
        """FL_FORM * fl_get_active_folder(FL_OBJECT * ob)
        """)
def fl_get_active_folder(pObject):
    """ fl_get_active_folder(pObject) -> pForm
    """

    retval = _fl_get_active_folder(pObject)
    return retval


_fl_get_active_folder_number = cfuncproto(
        so_libforms, "fl_get_active_folder_number",
        cty.c_int, [cty.POINTER(FL_OBJECT)],
        """int fl_get_active_folder_number(FL_OBJECT * ob)
        """)
def fl_get_active_folder_number(pObject):
    """ fl_get_active_folder_number(pObject) -> num.
    """

    retval = _fl_get_active_folder_number(pObject)
    return retval


_fl_get_active_folder_name = cfuncproto(
        so_libforms, "fl_get_active_folder_name",
        STRING, [cty.POINTER(FL_OBJECT)],
        """const char * fl_get_active_folder_name(FL_OBJECT * ob)
        """)
def fl_get_active_folder_name(pObject):
    """ fl_get_active_folder_name(pObject) -> name string
    """

    retval = _fl_get_active_folder_name(pObject)
    return retval


_fl_get_folder_area = cfuncproto(
        so_libforms, "fl_get_folder_area",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_Coord),
        cty.POINTER(FL_Coord), cty.POINTER(FL_Coord), cty.POINTER(FL_Coord)],
        """void fl_get_folder_area(FL_OBJECT * ob, FL_Coord * x,
           FL_Coord * y, FL_Coord * w, FL_Coord * h)
        """)
def fl_get_folder_area(pObject, x, y, w, h):
    """ fl_get_folder_area(pObject, x, y, w, h)
    """

    _fl_get_folder_area(pObject, x, y, w, h)


_fl_replace_folder_bynumber = cfuncproto(
        so_libforms, "fl_replace_folder_bynumber",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.POINTER(FL_FORM)],
        """void fl_replace_folder_bynumber(FL_OBJECT * ob, int num,
           FL_FORM * form)
        """)
def fl_replace_folder_bynumber(pObject, num, pForm):
    """ fl_replace_folder_bynumber(pObject, num, pForm)
    """

    _fl_replace_folder_bynumber(pObject, num, pForm)


_fl_set_tabfolder_autofit = cfuncproto(
        so_libforms, "fl_set_tabfolder_autofit",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_tabfolder_autofit(FL_OBJECT * ob, int y)
        """)
def fl_set_tabfolder_autofit(pObject, y):
    """ fl_set_tabfolder_autofit(pObject, y) -> num.
    """

    retval = _fl_set_tabfolder_autofit(pObject, y)
    return retval


_fl_set_default_tabfolder_corner = cfuncproto(
        so_libforms, "fl_set_default_tabfolder_corner",
        cty.c_int, [cty.c_int],
        """int fl_set_default_tabfolder_corner(int n):
        """)
def fl_set_default_tabfolder_corner(n):
    """ fl_set_default_tabfolder_corner(n) -> num.
    """

    retval = _fl_set_default_tabfolder_corner(n)
    return retval


_fl_set_tabfolder_offset = cfuncproto(
        so_libforms, "fl_set_tabfolder_offset",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_tabfolder_offset(FL_OBJECT * ob, int offset)
        """)

def fl_set_tabfolder_offset(pObject, offset):
    """ fl_set_tabfolder_offset(pObject, offset) -> num.
    """

    retval = _fl_set_tabfolder_offset(pObject, offset)
    return retval


###################
# forms.h (text.h)
###################

# values for unnamed enumeration
FL_NORMAL_TEXT = 0

FL_TEXT_BOXTYPE = FL_FLAT_BOX
FL_TEXT_COL1 = FL_COL1
FL_TEXT_COL2 = FL_MCOL
FL_TEXT_LCOL = FL_LCOL
FL_TEXT_ALIGN = FL_ALIGN_LEFT


_fl_create_text = cfuncproto(
        so_libforms, "fl_create_text",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_text(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_text(texttype, x, y, w, h, label):
    """ fl_create_text(texttype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_text(texttype, x, y, w, h, label)
    return retval


_fl_add_text = cfuncproto(
        so_libforms, "fl_add_text",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_text(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_text(texttype, x, y, w, h, label):
    """ fl_add_text(texttype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_text(texttype, x, y, w, h, label)
    return retval


#########################
# forms.h (thumbwheel.h)
#########################

# values for unnamed enumeration
FL_VERT_THUMBWHEEL = 0
FL_HOR_THUMBWHEEL = 1

# defaults
FL_THUMBWHEEL_COL1 = FL_COL1
FL_THUMBWHEEL_COL2 = FL_COL1
FL_THUMBWHEEL_LCOL = FL_BLACK
FL_THUMBWHEEL_BOXTYPE = FL_BORDER_BOX
FL_THUMBWHEEL_ALIGN = FL_ALIGN_BOTTOM


_fl_get_thumbwheel_value = cfuncproto(
        so_libforms, "fl_get_thumbwheel_value",
        cty.c_double, [cty.POINTER(FL_OBJECT)],
        """double fl_get_thumbwheel_value(FL_OBJECT * ob)
        """)
def fl_get_thumbwheel_value(pObject):
    """ fl_get_thumbwheel_value(pObject) -> num.
    """

    retval = _fl_get_thumbwheel_value(pObject)
    return retval


_fl_set_thumbwheel_value = cfuncproto(
        so_libforms, "fl_set_thumbwheel_value",
        cty.c_double, [cty.POINTER(FL_OBJECT), cty.c_double],
        """double fl_set_thumbwheel_value(FL_OBJECT * ob, double value)
        """)
def fl_set_thumbwheel_value(pObject, value):
    """ fl_set_thumbwheel_value(pObject, value)
    """

    retval = _fl_set_thumbwheel_value(pObject, value)
    return retval


_fl_get_thumbwheel_step = cfuncproto(
        so_libforms, "fl_get_thumbwheel_step",
        cty.c_double, [cty.POINTER(FL_OBJECT)],
        """double fl_get_thumbwheel_step(FL_OBJECT * ob)
        """)
def fl_get_thumbwheel_step(pObject):
    """ fl_get_thumbwheel_step(pObject) -> num.
    """

    retval = _fl_get_thumbwheel_step(pObject)
    return retval


_fl_set_thumbwheel_step = cfuncproto(
        so_libforms, "fl_set_thumbwheel_step",
        cty.c_double, [cty.POINTER(FL_OBJECT), cty.c_double],
        """double fl_set_thumbwheel_step(FL_OBJECT * ob, double step)
        """)
def fl_set_thumbwheel_step(pObject, step):
    """ fl_set_thumbwheel_step(pObject, step) -> num.
    """

    retval = _fl_set_thumbwheel_step(pObject, step)
    return retval


_fl_set_thumbwheel_return = cfuncproto(
        so_libforms, "fl_set_thumbwheel_return",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_thumbwheel_return(FL_OBJECT * ob, int how)
        """)
def fl_set_thumbwheel_return(pObject, how):
    """ fl_set_thumbwheel_return(pObject, how) -> num.
    """

    retval = _fl_set_thumbwheel_return(pObject, how)
    return retval


_fl_set_thumbwheel_crossover = cfuncproto(
        so_libforms, "fl_set_thumbwheel_crossover",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_thumbwheel_crossover(FL_OBJECT * ob, int flag)
        """)
def fl_set_thumbwheel_crossover(pObject, flag):
    """ fl_set_thumbwheel_crossover(pObject, flag) -> num.
    """

    retval = _fl_set_thumbwheel_crossover(pObject, flag)
    return retval


_fl_set_thumbwheel_bounds = cfuncproto(
        so_libforms, "fl_set_thumbwheel_bounds",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_thumbwheel_bounds(FL_OBJECT * ob, double min, double max)
        """)
def fl_set_thumbwheel_bounds(pObject, min_bound, max_bound):
    """ fl_set_thumbwheel_bounds(pObject, min_bound, max_bound)
    """

    _fl_set_thumbwheel_bounds(pObject, min_bound, max_bound)


_fl_get_thumbwheel_bounds = cfuncproto(
        so_libforms, "fl_get_thumbwheel_bounds",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_thumbwheel_bounds(FL_OBJECT * ob, double * min,
           double * max)
        """)
def fl_get_thumbwheel_bounds(pObject, min_bound, max_bound):
    """ fl_get_thumbwheel_bounds(pObject, min_bound, max_bound)
    """

    _fl_get_thumbwheel_bounds(pObject, min_bound, max_bound)


_fl_create_thumbwheel = cfuncproto(
        so_libforms, "fl_create_thumbwheel",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_thumbwheel(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_thumbwheel(wheeltype, x, y, w, h, label):
    """ fl_create_thumbwheel(wheeltype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_thumbwheel(wheeltype, x, y, w, h, label)
    return retval


_fl_add_thumbwheel = cfuncproto(
        so_libforms, "fl_add_thumbwheel",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_thumbwheel(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_thumbwheel(wheeltype, x, y, w, h, label):
    """ fl_add_thumbwheel(wheeltype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_thumbwheel(wheeltype, x, y, w, h, label)
    return retval


######################
# forms.h (timer.h)
# Object Class: Timer
######################

# values for enumeration 'FL_TIMER_TYPE'
FL_TIMER_TYPE = cty.c_int # enum
FL_NORMAL_TIMER = 0
FL_VALUE_TIMER = 1
FL_HIDDEN_TIMER = 2

# Defaults
FL_TIMER_BOXTYPE = FL_DOWN_BOX
FL_TIMER_COL1 = FL_COL1
FL_TIMER_COL2 = FL_RED
FL_TIMER_LCOL = FL_LCOL
FL_TIMER_ALIGN = FL_ALIGN_CENTER

# Others
FL_TIMER_BLINKRATE = 0.2


# Routines

FL_TIMER_FILTER = cty.CFUNCTYPE(STRING, cty.POINTER(FL_OBJECT), cty.c_double)


_fl_create_timer = cfuncproto(
        so_libforms, "fl_create_timer",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_timer(int type, FL_Coord x, FL_Coord y,
        FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_timer(timertype, x, y, w, h, label):
    """ fl_create_timer(timertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_timer(timertype, x, y, w, h, label)
    return retval


_fl_add_timer = cfuncproto(
        so_libforms, "fl_add_timer",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_timer(int type, FL_Coord x, FL_Coord y,
        FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_timer(timertype, x, y, w, h, label):
    """ fl_add_timer(timertype, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_timer(timertype, x, y, w, h, label)
    return retval


_fl_set_timer = cfuncproto(
        so_libforms, "fl_set_timer",
        None, [cty.POINTER(FL_OBJECT), cty.c_double],
        """void fl_set_timer(FL_OBJECT * ob, double total)
        """)
def fl_set_timer(pObject, total):
    """ fl_set_timer(pObject, total)
    """

    _fl_set_timer(pObject, total)


_fl_get_timer = cfuncproto(
        so_libforms, "fl_get_timer",
        cty.c_double, [cty.POINTER(FL_OBJECT)],
        """double fl_get_timer(FL_OBJECT * ob)
        """)
def fl_get_timer(pObject):
    """ fl_get_timer(pObject) -> num.
    """

    retval = _fl_get_timer(pObject)
    return retval


_fl_set_timer_countup = cfuncproto(
        so_libforms, "fl_set_timer_countup",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_timer_countup(FL_OBJECT * ob, int yes)
        """)
def fl_set_timer_countup(pObject, yes):
    """ fl_set_timer_countup(pObject, yes)
    """

    _fl_set_timer_countup(pObject, yes)


_fl_set_timer_filter = cfuncproto(
        so_libforms, "fl_set_timer_filter",
        FL_TIMER_FILTER, [cty.POINTER(FL_OBJECT), FL_TIMER_FILTER],
        """FL_TIMER_FILTER fl_set_timer_filter(FL_OBJECT * ob,
           FL_TIMER_FILTER filter)
        """)
def fl_set_timer_filter(pObject, py_filter):
    """ fl_set_timer_filter(pObject, py_filter) -> timer_filter func.
    """

    c_filter = FL_TIMER_FILTER(py_filter)
    _cfunc_refs[get_rand_dictkey()] = c_filter
    retval = _fl_set_timer_filter(pObject, c_filter)
    return retval


_fl_suspend_timer = cfuncproto(
        so_libforms, "fl_suspend_timer",
        None, [cty.POINTER(FL_OBJECT)],
        """void fl_suspend_timer(FL_OBJECT * ob)
        """)
def fl_suspend_timer(pObject):
    """ fl_suspend_timer(pObject)
    """

    _fl_suspend_timer(pObject)


_fl_resume_timer = cfuncproto(
        so_libforms, "fl_resume_timer",
        None, [cty.POINTER(FL_OBJECT)],
        """void fl_resume_timer(FL_OBJECT * ob)
        """)
def fl_resume_timer(pObject):
    """ fl_resume_timer(pObject)
    """

    _fl_resume_timer(pObject)


###############################
# forms.h (xpopup.h)
# Prototypes for xpop-up menus
###############################

FL_MAXPUPI = 128    # max item each pup
FL_PUP_PADH = 4     # space between each items

FL_PUP_ENTERCB = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
FL_PUP_LEAVECB = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)


_fl_setpup_entries = cfuncproto(
        so_libforms, "fl_setpup_entries",
        cty.c_int, [cty.c_int, cty.POINTER(FL_PUP_ENTRY)],
        """int fl_setpup_entries(int nm, FL_PUP_ENTRY * entries)
        """)
def fl_setpup_entries(nm, entries):
    """ fl_setpup_entries(nm, entries) -> num.
    """

    retval = _fl_setpup_entries(nm, entries)
    return retval


_fl_newpup = cfuncproto(
        so_libforms, "fl_newpup",
        cty.c_int, [Window],
        """int fl_newpup(Window win)
        """)
def fl_newpup(win):
    """ fl_newpup(win) -> num.
    """

    retval = _fl_newpup(win)
    return retval


_fl_defpup = cfuncproto(
        so_libforms, "fl_defpup",
        cty.c_int, [Window, STRING],
        """int fl_defpup(Window win, const char * str):
        """)
def fl_defpup(win, pup_string):
    """ fl_defpup(win, pup_string) -> num.
    """

    retval = _fl_defpup(win, pup_string)
    return retval


_fl_addtopup = cfuncproto(
        so_libforms, "fl_addtopup",
        cty.c_int, [cty.c_int, STRING],
        """int fl_addtopup(int n, const char * str)
        """)
def fl_addtopup(n, pup_string):
    """ fl_addtopup(n, pup_string) -> num.
    """

    retval = _fl_addtopup(n, pup_string)
    return retval


_fl_setpup_mode = cfuncproto(
        so_libforms, "fl_setpup_mode",
        cty.c_int, [cty.c_int, cty.c_int, cty.c_uint],
        """int fl_setpup_mode(int nm, int ni, unsigned int mode)
        """)
def fl_setpup_mode(nm, ni, mode):
    """ fl_setpup_mode(nm, ni, mode) -> num.
    """

    retval = _fl_setpup_mode(nm, ni, mode)
    return retval


_fl_freepup = cfuncproto(
        so_libforms, "fl_freepup",
        None, [cty.c_int],
        """void fl_freepup(int n)
        """)
def fl_freepup(n):
    """ fl_freepup(n)
    """

    _fl_freepup(n)


_fl_dopup = cfuncproto(
        so_libforms, "fl_dopup",
        cty.c_int, [cty.c_int],
        """int fl_dopup(int n)
        """)
def fl_dopup(n):
    """ fl_dopup(n) -> num.
    """

    retval = _fl_dopup(n)
    return retval


_fl_setpup_default_cursor = cfuncproto(
        so_libforms, "fl_setpup_default_cursor",
        Cursor, [cty.c_int],
        """Cursor fl_setpup_default_cursor(int cursor):
        """)
def fl_setpup_default_cursor(cursor):
    """ fl_setpup_default_cursor(cursor) -> cursor
    """

    retval = _fl_setpup_default_cursor(cursor)
    return retval


_fl_setpup_color = cfuncproto(
        so_libforms, "fl_setpup_color",
        None, [FL_COLOR, FL_COLOR],
        """void fl_setpup_color(FL_COLOR fg, FL_COLOR bg)
        """)
def fl_setpup_color(fg, bg):
    """ fl_setpup_color(fg, bg)
    """

    _fl_setpup_color(fg, bg)


_fl_setpup_default_pup_checked_color = cfuncproto(
        so_libforms, "fl_setpup_default_pup_checked_color",
        None, [FL_COLOR],
        """void fl_setpup_default_pup_checked_color(FL_COLOR col)
        """)
def fl_setpup_default_pup_checked_color(col):
    """ fl_setpup_default_pup_checked_color(col):
    """

    _fl_setpup_default_pup_checked_color(col)


_fl_setpup_fontsize = cfuncproto(
        so_libforms, "fl_setpup_fontsize",
        cty.c_int, [cty.c_int],
        """int fl_setpup_fontsize(int size)    DEPRECATED?
        """)
def fl_setpup_fontsize(size):
    """ fl_setpup_fontsize(size) -> num.
    """

    retval = _fl_setpup_fontsize(size)
    return retval


_fl_setpup_fontstyle = cfuncproto(
        so_libforms, "fl_setpup_fontstyle",
        cty.c_int, [cty.c_int],
        """int fl_setpup_fontstyle(int style)
        """)
def fl_setpup_fontstyle(style):
    """ fl_setpup_fontstyle(style) -> num.
    """

    retval = _fl_setpup_fontstyle(style)
    return retval


fl_setpup_default_fontsize = fl_setpup_fontsize
fl_setpup_default_fontstyle = fl_setpup_fontstyle
fl_setpup_default_color = fl_setpup_color
fl_setpup_default_checkcolor = fl_setpup_default_pup_checked_color
fl_setpup_checkcolor = fl_setpup_default_pup_checked_color


_fl_setpup_default_bw = cfuncproto(
        so_libforms, "fl_setpup_default_bw",
        cty.c_int, [cty.c_int],
        """int fl_setpup_default_bw(int bw):
        """)
def fl_setpup_default_bw(bw):
    """ fl_setpup_default_bw(bw) -> num.
    """

    retval = _fl_setpup_default_bw(bw)
    return retval


_fl_setpup_shortcut = cfuncproto(
        so_libforms, "fl_setpup_shortcut",
        None, [cty.c_int, cty.c_int, STRING],
        """void fl_setpup_shortcut(int nm, int ni, const char * sc)
        """)
def fl_setpup_shortcut(nm, ni, sc):
    """ fl_setpup_shortcut(nm, ni, sc)
    """

    _fl_setpup_shortcut(nm, ni, sc)


_fl_setpup_position = cfuncproto(
        so_libforms, "fl_setpup_position",
        None, [cty.c_int, cty.c_int],
        """void fl_setpup_position(int x, int y)
        """)
def fl_setpup_position(x, y):
    """ fl_setpup_position(x, y)
    """

    _fl_setpup_position(x, y)


_fl_setpup_selection = cfuncproto(
        so_libforms, "fl_setpup_selection",
        None, [cty.c_int, cty.c_int],
        """void fl_setpup_selection(int nm, int ni)
        """)
def fl_setpup_selection(nm, ni):
    """ fl_setpup_selection(nm, ni)
    """

    _fl_setpup_selection(nm, ni)


_fl_setpup_shadow = cfuncproto(
        so_libforms, "fl_setpup_shadow",
        None, [cty.c_int, cty.c_int],
        """void fl_setpup_shadow(int n, int y)
        """)
def fl_setpup_shadow(n, y):
    """ fl_setpup_shadow(n, y)
    """

    _fl_setpup_shadow(n, y)


_fl_setpup_softedge = cfuncproto(
        so_libforms, "fl_setpup_softedge",
        None, [cty.c_int, cty.c_int],
        """void fl_setpup_softedge(int n, int y)
        """)
def fl_setpup_softedge(n, y):
    """ fl_setpup_softedge(n, y)
    """

    _fl_setpup_softedge(n, y)


_fl_setpup_bw = cfuncproto(
        so_libforms, "fl_setpup_bw",
        None, [cty.c_int, cty.c_int],
        """void fl_setpup_bw(int n, int bw)
        """)
def fl_setpup_bw(n, bw):
    """ fl_setpup_bw(n, bw)
    """

    _fl_setpup_bw(n, bw)


_fl_setpup_title = cfuncproto(
        so_libforms, "fl_setpup_title",
        None, [cty.c_int, STRING],
        """void fl_setpup_title(int nm, const char * title)
        """)
def fl_setpup_title(nm, title):
    """ fl_setpup_title(nm, title)
    """

    _fl_setpup_title(nm, title)


_fl_setpup_entercb = cfuncproto(
        so_libforms, "fl_setpup_entercb",
        FL_PUP_ENTERCB, [cty.c_int, FL_PUP_ENTERCB, cty.c_void_p],
        """FL_PUP_ENTERCB fl_setpup_entercb(int nm, FL_PUP_ENTERCB cb,
           void * data)
        """)
def fl_setpup_entercb(nm, py_cb, data):
    """ fl_setpup_entercb(nm, py_cb, data) -> pup_entercb
    """

    c_cb = FL_PUP_ENTERCB(py_cb)
    _cfunc_refs[get_rand_dictkey()] = c_cb
    retval = _fl_setpup_entercb(nm, c_cb, data)
    return retval


_fl_setpup_leavecb = cfuncproto(
        so_libforms, "fl_setpup_leavecb",
        FL_PUP_LEAVECB, [cty.c_int, FL_PUP_LEAVECB, cty.c_void_p],
        """FL_PUP_LEAVECB fl_setpup_leavecb(int nm, FL_PUP_LEAVECB cb,
           void * data)
        """)
def fl_setpup_leavecb(nm, py_cb, data):
    """ fl_setpup_leavecb(nm, py_cb, data) -> pup_leavecb
    """

    c_cb = FL_PUP_LEAVECB(py_cb)
    _cfunc_refs[get_rand_dictkey()] = c_cb
    retval = _fl_setpup_leavecb(nm, c_cb, data)
    return retval


_fl_setpup_pad = cfuncproto(
        so_libforms, "fl_setpup_pad",
        None, [cty.c_int, cty.c_int, cty.c_int],
        """void fl_setpup_pad(int n, int padw, int padh)
        """)
def fl_setpup_pad(n, padw, padh):
    """ fl_setpup_pad(n, padw, padh)
    """

    _fl_setpup_pad(n, padw, padh)


_fl_setpup_cursor = cfuncproto(
        so_libforms, "fl_setpup_cursor",
        Cursor, [cty.c_int, cty.c_int],
        """Cursor fl_setpup_cursor(int nm, int cursor)
        """)
def fl_setpup_cursor(nm, cursor):
    """ fl_setpup_cursor(nm, cursor) -> cursor
    """

    retval = _fl_setpup_cursor(nm, cursor)
    return retval


_fl_setpup_maxpup = cfuncproto(
        so_libforms, "fl_setpup_maxpup",
        cty.c_int, [cty.c_int],
        """int fl_setpup_maxpup(int n)
        """)
def fl_setpup_maxpup(n):
    """ fl_setpup_maxpup(n) -> num.
    """

    retval = _fl_setpup_maxpup(n)
    return retval


_fl_getpup_mode = cfuncproto(
        so_libforms, "fl_getpup_mode",
        cty.c_uint, [cty.c_int, cty.c_int],
        """)unsigned int fl_getpup_mode(int nm, int ni)
        """)
def fl_getpup_mode(nm, ni):
    """ fl_getpup_mode(nm, ni) -> num.
    """

    retval = _fl_getpup_mode(nm, ni)
    return retval


_fl_getpup_text = cfuncproto(
        so_libforms, "fl_getpup_text",
        STRING, [cty.c_int, cty.c_int],
        """const char * fl_getpup_text(int nm, int ni)
        """)
def fl_getpup_text(nm, ni):
    """ fl_getpup_text(nm, ni) -> text string
    """

    retval = _fl_getpup_text(nm, ni)
    return retval


_fl_showpup = cfuncproto(
        so_libforms, "fl_showpup",
        None, [cty.c_int],
        """void fl_showpup(int n)
        """)
def fl_showpup(n):
    """ fl_showpup(n)
    """

    _fl_showpup(n)


_fl_hidepup = cfuncproto(
        so_libforms, "fl_hidepup",
        None, [cty.c_int],
        """void fl_hidepup(int n)
        """)
def fl_hidepup(n):
    """ fl_hidepup(n)
    """

    _fl_hidepup(n)


_fl_getpup_items = cfuncproto(
        so_libforms, "fl_getpup_items",
        cty.c_int, [cty.c_int],
        """int fl_getpup_items(int n)
        """)
def fl_getpup_items(n):
    """ fl_getpup_items(n) -> num.
    """

    retval = _fl_getpup_items(n)
    return retval


_fl_current_pup = cfuncproto(
        so_libforms, "fl_current_pup",
        cty.c_int, [],
        """int fl_current_pup()
        """)
def fl_current_pup():
    """ fl_current_pup() -> num.
    """

    retval = _fl_current_pup()
    return retval


_fl_setpup_itemcb = cfuncproto(
        so_libforms, "fl_setpup_itemcb",
        FL_PUP_CB, [cty.c_int, cty.c_int, FL_PUP_CB],
        """FL_PUP_CB fl_setpup_itemcb(int nm, int ni, FL_PUP_CB cb)
        """)
def fl_setpup_itemcb(nm, ni, py_cb):
    """ fl_setpup_itemcb(nm, ni, py_cb) -> pup_cb
    """

    c_cb = FL_PUP_CB(py_cb)
    _cfunc_refs[get_rand_dictkey()] = c_cb
    retval = _fl_setpup_itemcb(nm, ni, c_cb)
    return retval


_fl_setpup_menucb = cfuncproto(
        so_libforms, "fl_setpup_menucb",
        FL_PUP_CB, [cty.c_int, FL_PUP_CB],
        """FL_PUP_CB fl_setpup_menucb(int nm, FL_PUP_CB cb)
        """)
def fl_setpup_menucb(nm, py_cb):
    """ fl_setpup_menucb(nm, py_cb) -> pup_cb func.
    """

    c_cb = FL_PUP_CB(py_cb)
    _cfunc_refs[get_rand_dictkey()] = c_cb
    retval = _fl_setpup_menucb(nm, c_cb)
    return retval


_fl_setpup_submenu = cfuncproto(
        so_libforms, "fl_setpup_submenu",
        None, [cty.c_int, cty.c_int, cty.c_int],
        """void fl_setpup_submenu(int m, int i, int subm)
        """)
def fl_setpup_submenu(m, i, subm):
    """ fl_setpup_submenu(m, i, subm)
    """

    _fl_setpup_submenu(m, i, subm)


fl_setpup = fl_setpup_mode


# Class FL_XYPLOT
# values for enumeration 'FL_XYPLOT_TYPE'
FL_XYPLOT_TYPE = cty.c_int # enum
FL_NORMAL_XYPLOT = 0    # solid line
FL_SQUARE_XYPLOT = 1    # with added square
FL_CIRCLE_XYPLOT = 2    # with added circle
FL_FILL_XYPLOT = 3      # fill completely
FL_POINTS_XYPLOT = 4    # only data points
FL_DASHED_XYPLOT = 5    # dashed line
FL_IMPULSE_XYPLOT = 6
FL_ACTIVE_XYPLOT = 7    # accepts interactive manipulations
FL_EMPTY_XYPLOT = 8
FL_DOTTED_XYPLOT = 9
FL_DOTDASHED_XYPLOT = 10
FL_LONGDASHED_XYPLOT = 11
FL_LINEPOINTS_XYPLOT = 12   # line & points

# values for unnamed enumeration
FL_LINEAR = 0
FL_LOG = 1

# values for unnamed enumeration
FL_GRID_NONE  = 0
FL_GRID_MAJOR = 1
FL_GRID_MINOR = 2

# Defaults
FL_XYPLOT_BOXTYPE = FL_FLAT_BOX
FL_XYPLOT_COL1 = FL_COL1
FL_XYPLOT_LCOL = FL_LCOL
FL_XYPLOT_ALIGN = FL_ALIGN_BOTTOM
FL_MAX_XYPLOTOVERLAY = 32


# Others

_fl_create_xyplot = cfuncproto(
        so_libforms, "fl_create_xyplot",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_create_xyplot(int t, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_create_xyplot(t, x, y, w, h, label):
    """ fl_create_xyplot(t, x, y, w, h, label) -> pObject
    """

    retval = _fl_create_xyplot(t, x, y, w, h, label)
    return retval


_fl_add_xyplot = cfuncproto(
        so_libforms, "fl_add_xyplot",
        cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
        FL_Coord, STRING],
        """FL_OBJECT * fl_add_xyplot(int t, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)
        """)
def fl_add_xyplot(t, x, y, w, h, label):
    """ fl_add_xyplot(t, x, y, w, h, label) -> pObject
    """

    retval = _fl_add_xyplot(t, x, y, w, h, label)
    return retval


_fl_set_xyplot_data = cfuncproto(
        so_libforms, "fl_set_xyplot_data",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float), cty.c_int, STRING, STRING, STRING],
        """int fl_set_xyplot_data(FL_OBJECT * ob, float * x, float * y,
           int n, const char * title, const char * xlabel, const char * ylabel)
        """)
def fl_set_xyplot_data(pObject, x, y, n, title, xlabel, ylabel):
    """ fl_set_xyplot_data(pObject, x, y, n, title, xlabel, ylabel) -> num.
    """

    retval = _fl_set_xyplot_data(pObject, x, y, n, title, xlabel, ylabel)
    return retval


_fl_set_xyplot_data_double = cfuncproto(
        so_libforms, "fl_set_xyplot_data_double",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double), cty.c_int, STRING, STRING, STRING],
        """int fl_set_xyplot_data_double(FL_OBJECT * ob, double * x,
           double * y, int n, const char * title, const char * xlabel,
           const char * ylabel)
        """)
def fl_set_xyplot_data_double(pObject, x, y, n, title, xlabel, ylabel):
    """ fl_set_xyplot_data_double(pObject, x, y, n, title, xlabel, ylabel) -> num.
    """

    retval = _fl_set_xyplot_data_double(pObject, x, y, n, title, xlabel, ylabel)
    return retval


_fl_set_xyplot_file = cfuncproto(
        so_libforms, "fl_set_xyplot_file",
        cty.c_int, [cty.POINTER(FL_OBJECT), STRING, STRING, STRING, STRING],
        """int fl_set_xyplot_file(FL_OBJECT * ob, const char * f,
           const char * title, const char * xl, const char * yl)
        """)
def fl_set_xyplot_file(pObject, f, title, xl, yl):
    """ fl_set_xyplot_file(pObject, f, title, xl, yl) -> num.
    """

    retval = _fl_set_xyplot_file(pObject, f, title, xl, yl)
    return retval


_fl_insert_xyplot_data = cfuncproto(
        so_libforms, "fl_insert_xyplot_data",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int, cty.c_double,
        cty.c_double],
        """void fl_insert_xyplot_data(FL_OBJECT * ob, int id, int n,
           double x, double y)
        """)
def fl_insert_xyplot_data(pObject, idnum, n, x, y):
    """ fl_insert_xyplot_data(pObject, idnum, n, x, y)
    """

    _fl_insert_xyplot_data(pObject, idnum, n, x, y)


_fl_add_xyplot_text = cfuncproto(
        so_libforms, "fl_add_xyplot_text",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double, STRING,
        cty.c_int, FL_COLOR],
        """void fl_add_xyplot_text(FL_OBJECT * ob, double x, double y,
           const char * text, int al, FL_COLOR col)
        """)
def fl_add_xyplot_text(pObject, x, y, text, al, col):
    """ fl_add_xyplot_text(pObject, x, y, text, al, col)
    """

    _fl_add_xyplot_text(pObject, x, y, text, al, col)


_fl_delete_xyplot_text = cfuncproto(
        so_libforms, "fl_delete_xyplot_text",
        None, [cty.POINTER(FL_OBJECT), STRING],
        """void fl_delete_xyplot_text(FL_OBJECT * ob, const char * text)
        """)
def fl_delete_xyplot_text(pObject, text):
    """ fl_delete_xyplot_text(pObject, text)
    """

    _fl_delete_xyplot_text(pObject, text)


_fl_set_xyplot_maxoverlays = cfuncproto(
        so_libforms, "fl_set_xyplot_maxoverlays",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_xyplot_maxoverlays(FL_OBJECT * ob, int maxover)
        """)
def fl_set_xyplot_maxoverlays(pObject, maxover):
    """ fl_set_xyplot_maxoverlays(pObject, maxover) -> num.
    """

    retval = _fl_set_xyplot_maxoverlays(pObject, maxover)
    return retval


_fl_add_xyplot_overlay = cfuncproto(
        so_libforms, "fl_add_xyplot_overlay",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float), cty.c_int, FL_COLOR],
        """void fl_add_xyplot_overlay(FL_OBJECT * ob, int id, float * x,
           float * y, int n, FL_COLOR col)
        """)
def fl_add_xyplot_overlay(pObject, idnum, x, y, n, col):
    """ fl_add_xyplot_overlay(pObject, idnum, x, y, n, col)
    """

    _fl_add_xyplot_overlay(pObject, idnum, x, y, n, col)


_fl_add_xyplot_overlay_file = cfuncproto(
        so_libforms, "fl_add_xyplot_overlay_file",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int, STRING, FL_COLOR],
        """int fl_add_xyplot_overlay_file(FL_OBJECT * ob, int id, const char * f, FL_COLOR c)
        """)
def fl_add_xyplot_overlay_file(pObject, idnum, f, c):
    """ fl_add_xyplot_overlay_file(pObject, idnum, f, c) -> num.
    """

    retval = _fl_add_xyplot_overlay_file(pObject, idnum, f, c)
    return retval


_fl_set_xyplot_return = cfuncproto(
        so_libforms, "fl_set_xyplot_return",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_return(FL_OBJECT * ob, int when)
        """)
def fl_set_xyplot_return(pObject, when):
    """ fl_set_xyplot_return(pObject, when)
    """

    _fl_set_xyplot_return(pObject, when)


_fl_set_xyplot_xtics = cfuncproto(
        so_libforms, "fl_set_xyplot_xtics",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_xtics(FL_OBJECT * ob, int major, int minor)
        """)
def fl_set_xyplot_xtics(pObject, major, minor):
    """ fl_set_xyplot_xtics(pObject, major, minor)
    """

    _fl_set_xyplot_xtics(pObject, major, minor)


_fl_set_xyplot_ytics = cfuncproto(
        so_libforms, "fl_set_xyplot_ytics",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_ytics(FL_OBJECT * ob, int major, int minor)
        """)
def fl_set_xyplot_ytics(pObject, major, minor):
    """ fl_set_xyplot_ytics(pObject, major, minor)
    """

    _fl_set_xyplot_ytics(pObject, major, minor)


_fl_set_xyplot_xbounds = cfuncproto(
        so_libforms, "fl_set_xyplot_xbounds",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_xyplot_xbounds(FL_OBJECT * ob, double xmin, double xmax)
        """)
def fl_set_xyplot_xbounds(pObject, min_bound, max_bound):
    """ fl_set_xyplot_xbounds(pObject, min_bound, max_bound)
    """

    _fl_set_xyplot_xbounds(pObject, min_bound, max_bound)


_fl_set_xyplot_ybounds = cfuncproto(
        so_libforms, "fl_set_xyplot_ybounds",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_xyplot_ybounds(FL_OBJECT * ob, double ymin, double ymax)
        """)
def fl_set_xyplot_ybounds(pObject, min_bound, max_bound):
    """ fl_set_xyplot_ybounds(pObject, min_bound, max_bound)
    """

    _fl_set_xyplot_ybounds(pObject, min_bound, max_bound)


_fl_get_xyplot_xbounds = cfuncproto(
        so_libforms, "fl_get_xyplot_xbounds",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_xbounds(FL_OBJECT * ob, float * xmin,
           float * xmax)
        """)
def fl_get_xyplot_xbounds(pObject, min_bound, max_bound):
    """ fl_get_xyplot_xbounds(pObject, min_bound, max_bound)
    """

    _fl_get_xyplot_xbounds(pObject, min_bound, max_bound)


_fl_get_xyplot_ybounds = cfuncproto(
        so_libforms, "fl_get_xyplot_ybounds",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_ybounds(FL_OBJECT * ob, float * ymin,
           float * ymax)
        """)
def fl_get_xyplot_ybounds(pObject, min_bound, max_bound):
    """ fl_get_xyplot_ybounds(pObject, min_bound, max_bound)
    """

    _fl_get_xyplot_ybounds(pObject, min_bound, max_bound)


_fl_get_xyplot = cfuncproto(
        so_libforms, "fl_get_xyplot",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
        """void fl_get_xyplot(FL_OBJECT * ob, float * x, float * y, int * i)
        """)
def fl_get_xyplot(pObject, x, y, i):
    """ fl_get_xyplot(pObject, x, y, i)
    """

    _fl_get_xyplot(pObject, x, y, i)


_fl_get_xyplot_data = cfuncproto(
        so_libforms, "fl_get_xyplot_data",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
        """void fl_get_xyplot_data(FL_OBJECT * ob, float * x, float * y,
           int * n)
        """)
def fl_get_xyplot_data(pObject, x, y, n):
    """ fl_get_xyplot_data(pObject, x, y, n)
    """

    _fl_get_xyplot_data(pObject, x, y, n)


_fl_get_xyplot_data_pointer = cfuncproto(
        so_libforms, "fl_get_xyplot_data_pointer",
        None, [cty.POINTER(FL_OBJECT), cty.c_int,
        cty.POINTER(cty.POINTER(cty.c_float)),
        cty.POINTER(cty.POINTER(cty.c_float)), cty.POINTER(cty.c_int)],
        """void fl_get_xyplot_data_cty.POINTER(FL_OBJECT * ob, int id,
           float * * x, float * * y, int * n)
        """)
def fl_get_xyplot_data_pointer(pObject, idnum, x, y, n):
    """ fl_get_xyplot_data_pointer(pObject, idnum, x, y, n)
    """

    _fl_get_xyplot_data_pointer(pObject, idnum, x, y, n)


_fl_get_xyplot_overlay_data = cfuncproto(
        so_libforms, "fl_get_xyplot_overlay_data",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
        """void fl_get_xyplot_overlay_data(FL_OBJECT * ob, int id, float * x,
           float * y, int * n)
        """)
def fl_get_xyplot_overlay_data(pObject, idnum, x, y, n):
    """ fl_get_xyplot_overlay_data(pObject, idnum, x, y, n)
    """

    _fl_get_xyplot_overlay_data(pObject, idnum, x, y, n)


_fl_set_xyplot_overlay_type = cfuncproto(
        so_libforms, "fl_set_xyplot_overlay_type",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_overlay_type(FL_OBJECT * ob, int id, int type)
        """)
def fl_set_xyplot_overlay_type(pObject, idnum, plot_type):
    """ fl_set_xyplot_overlay_type(pObject, idnum, plot_type)
    """

    _fl_set_xyplot_overlay_type(pObject, idnum, plot_type)


_fl_delete_xyplot_overlay = cfuncproto(
        so_libforms, "fl_delete_xyplot_overlay",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_delete_xyplot_overlay(FL_OBJECT * ob, int id)
        """)
def fl_delete_xyplot_overlay(pObject, idnum):
    """ fl_delete_xyplot_overlay(pObject, idnum)
    """

    _fl_delete_xyplot_overlay(pObject, idnum)


_fl_set_xyplot_interpolate = cfuncproto(
        so_libforms, "fl_set_xyplot_interpolate",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int, cty.c_double],
        """void fl_set_xyplot_interpolate(FL_OBJECT * ob, int id, int deg,
           double grid)
        """)
def fl_set_xyplot_interpolate(pObject, idnum, deg, grid):
    """ fl_set_xyplot_interpolate(pObject, idnum, deg, grid)
    """

    _fl_set_xyplot_interpolate(pObject, idnum, deg, grid)


_fl_set_xyplot_inspect = cfuncproto(
        so_libforms, "fl_set_xyplot_inspect",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_inspect(FL_OBJECT * ob, int yes)
        """)

def fl_set_xyplot_inspect(pObject, yes):
    """ fl_set_xyplot_inspect(pObject, yes)
    """

    _fl_set_xyplot_inspect(pObject, yes)


_fl_set_xyplot_symbolsize = cfuncproto(
        so_libforms, "fl_set_xyplot_symbolsize",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_symbolsize(FL_OBJECT * ob, int n)
        """)
def fl_set_xyplot_symbolsize(pObject, n):
    """ fl_set_xyplot_symbolsize(pObject, n)
    """

    _fl_set_xyplot_symbolsize(pObject, n)


_fl_replace_xyplot_point = cfuncproto(
        so_libforms, "fl_replace_xyplot_point",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_double, cty.c_double],
        """void fl_replace_xyplot_point(FL_OBJECT * ob, int i, double x,
           double y)
        """)
def fl_replace_xyplot_point(pObject, i, x, y):
    """ fl_replace_xyplot_point(pObject, i, x, y)
    """

    _fl_replace_xyplot_point(pObject, i, x, y)


# Replace the value of a particular point in dataset setID,
# where setID=0 is the first data set.
# This routine is an extension of fl_replace_xyplot_point
# which acts on the first dataset only.

_fl_replace_xyplot_point_in_overlay = cfuncproto(
        so_libforms, "fl_replace_xyplot_point_in_overlay",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int, cty.c_double,
        cty.c_double],
        """void fl_replace_xyplot_point_in_overlay(FL_OBJECT * ob, int i,
           int setID, double x, double y)
        """)
def fl_replace_xyplot_point_in_overlay(pObject, i, setID, x, y):
    """ fl_replace_xyplot_point_in_overlay(pObject, i, setID, x, y)
    """

    _fl_replace_xyplot_point_in_overlay(pObject, i, setID, x, y)


_fl_get_xyplot_xmapping = cfuncproto(
        so_libforms, "fl_get_xyplot_xmapping",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_xmapping(FL_OBJECT * ob, float * a, float * b)
        """)

def fl_get_xyplot_xmapping(pObject, a, b):
    """ fl_get_xyplot_xmapping(pObject, a, b)
    """

    _fl_get_xyplot_xmapping(pObject, a, b)


_fl_get_xyplot_ymapping = cfuncproto(
        so_libforms, "fl_get_xyplot_ymapping",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_ymapping(FL_OBJECT * ob, float * a, float * b)
        """)
def fl_get_xyplot_ymapping(pObject, a, b):
    """ fl_get_xyplot_ymapping(pObject, a, b)
    """

    _fl_get_xyplot_ymapping(pObject, a, b)


_fl_set_xyplot_keys = cfuncproto(
        so_libforms, "fl_set_xyplot_keys",
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(STRING), cty.c_float,
        cty.c_float, cty.c_int],
        """void fl_set_xyplot_keys(FL_OBJECT * ob, char * * keys, float x,
           float y, int align)
        """)
def fl_set_xyplot_keys(pObject, keys, x, y, align):
    """ fl_set_xyplot_keys(pObject, keys, x, y, align)
    """

    _fl_set_xyplot_keys(pObject, keys, x, y, align)


_fl_set_xyplot_key = cfuncproto(
        so_libforms, "fl_set_xyplot_key",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, STRING],
        """void fl_set_xyplot_key(FL_OBJECT * ob, int id, const char * key)
        """)
def fl_set_xyplot_key(pObject, idnum, key):
    """ fl_set_xyplot_key(pObject, idnum, key)
    """

    _fl_set_xyplot_key(pObject, idnum, key)


_fl_set_xyplot_key_position = cfuncproto(
        so_libforms, "fl_set_xyplot_key_position",
        None, [cty.POINTER(FL_OBJECT), cty.c_float, cty.c_float, cty.c_int],
        """void fl_set_xyplot_key_position(FL_OBJECT * ob, float x, float y,
           int align)
        """)
def fl_set_xyplot_key_position(pObject, x, y, align):
    """ fl_set_xyplot_key_position(pObject, x, y, align)
    """

    _fl_set_xyplot_key_position(pObject, x, y, align)


_fl_set_xyplot_key_font = cfuncproto(
        so_libforms, "fl_set_xyplot_key_font",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_key_font(FL_OBJECT * ob, int style, int size)
        """)
def fl_set_xyplot_key_font(pObject, style, size):
    """ fl_set_xyplot_key_font(pObject, style, size)
    """

    _fl_set_xyplot_key_font(pObject, style, size)


_fl_get_xyplot_numdata = cfuncproto(
        so_libforms, "fl_get_xyplot_numdata",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_get_xyplot_numdata(FL_OBJECT * ob, int id)
        """)
def fl_get_xyplot_numdata(pObject, idnum):
    """ fl_get_xyplot_numdata(pObject, idnum) -> num.
    """

    retval = _fl_get_xyplot_numdata(pObject, idnum)
    return retval


# The following two functions will be removed.
# Use fl_set_object_l[size|style] for the functionalities

_fl_set_xyplot_fontsize = cfuncproto(
        so_libforms, "fl_set_xyplot_fontsize",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_fontsize(FL_OBJECT * ob, int size) DEPRECATED
        """)
def fl_set_xyplot_fontsize(pObject, size):
    """ fl_set_xyplot_fontsize(pObject, size)
    """

    _fl_set_xyplot_fontsize(pObject, size)


_fl_set_xyplot_fontstyle = cfuncproto(
        so_libforms, "fl_set_xyplot_fontstyle",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_fontstyle(FL_OBJECT * ob, int style) DEPRECATED
        """)
def fl_set_xyplot_fontstyle(pObject, style):
    """ fl_set_xyplot_fontstyle(pObject, style)
    """

    _fl_set_xyplot_fontstyle(pObject, style)


_fl_xyplot_s2w = cfuncproto(
        so_libforms, "fl_xyplot_s2w",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double,
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_float)],
        """void fl_xyplot_s2w(FL_OBJECT * ob, double sx, double sy,
           float * wx, float * wy)
        """)
def fl_xyplot_s2w(pObject, sx, sy, wx, wy):
    """ fl_xyplot_s2w(pObject, sx, sy, wx, wy)
    """

    _fl_xyplot_s2w(pObject, sx, sy, wx, wy)


_fl_xyplot_w2s = cfuncproto(
        so_libforms, "fl_xyplot_w2s",
        None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double,
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_float)],
        """void fl_xyplot_w2s(FL_OBJECT * ob, double wx, double wy,
           float * sx, float * sy)
        """)
def fl_xyplot_w2s(pObject, wx, wy, sx, sy):
    """ fl_xyplot_w2s(pObject, wx, wy, sx, sy)
    """

    _fl_xyplot_w2s(pObject, wx, wy, sx, sy)


_fl_set_xyplot_xscale = cfuncproto(
        so_libforms, "fl_set_xyplot_xscale",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_double],
        """void fl_set_xyplot_xscale(FL_OBJECT * ob, int scale, double base)
        """)
def fl_set_xyplot_xscale(pObject, scale, base):
    """ fl_set_xyplot_xscale(pObject, scale, base)
    """

    _fl_set_xyplot_xscale(pObject, scale, base)


_fl_set_xyplot_yscale = cfuncproto(
        so_libforms, "fl_set_xyplot_yscale",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_double],
        """void fl_set_xyplot_yscale(FL_OBJECT * ob, int scale, double base)
        """)
def fl_set_xyplot_yscale(pObject, scale, base):
    """ fl_set_xyplot_yscale(pObject, scale, base)
    """

    _fl_set_xyplot_yscale(pObject, scale, base)


_fl_clear_xyplot = cfuncproto(
        so_libforms, "fl_clear_xyplot",
        None, [cty.POINTER(FL_OBJECT)],
        """void fl_clear_xyplot(FL_OBJECT * ob)
        """)
def fl_clear_xyplot(pObject):
    """ fl_clear_xyplot(pObject)
    """

    _fl_clear_xyplot(pObject)


_fl_set_xyplot_linewidth = cfuncproto(
        so_libforms, "fl_set_xyplot_linewidth",
        None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_linewidth(FL_OBJECT * ob, int id, int lw)
        """)
def fl_set_xyplot_linewidth(pObject, idnum, lw):
    """ fl_set_xyplot_linewidth(pObject, idnum, lw)
    """

    _fl_set_xyplot_linewidth(pObject, idnum, lw)


_fl_set_xyplot_xgrid = cfuncproto(
        so_libforms, "fl_set_xyplot_xgrid",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_xgrid(FL_OBJECT * ob, int xgrid)
        """)
def fl_set_xyplot_xgrid(pObject, xgrid):
    """ fl_set_xyplot_xgrid(pObject, xgrid)
    """

    _fl_set_xyplot_xgrid(pObject, xgrid)


_fl_set_xyplot_ygrid = cfuncproto(
        so_libforms, "fl_set_xyplot_ygrid",
        None, [cty.POINTER(FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_ygrid(FL_OBJECT * ob, int ygrid)
        """)
def fl_set_xyplot_ygrid(pObject, ygrid):
    """ fl_set_xyplot_ygrid(pObject, ygrid)
    """

    _fl_set_xyplot_ygrid(pObject, ygrid)


_fl_set_xyplot_grid_linestyle = cfuncproto(
        so_libforms, "fl_set_xyplot_grid_linestyle",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_xyplot_grid_linestyle(FL_OBJECT * ob, int style)
        """)
def fl_set_xyplot_grid_linestyle(pObject, style):
    """ fl_set_xyplot_grid_linestyle(pObject, style) -> num.
    """

    retval = _fl_set_xyplot_grid_linestyle(pObject, style)
    return retval


_fl_set_xyplot_alphaxtics = cfuncproto(
        so_libforms, "fl_set_xyplot_alphaxtics",
        None, [cty.POINTER(FL_OBJECT), STRING, STRING],
        """void fl_set_xyplot_alphaxtics(FL_OBJECT * ob, const char * m,
           const char * s)
        """)
def fl_set_xyplot_alphaxtics(pObject, m, s):
    """ fl_set_xyplot_alphaxtics(pObject, m, s)
    """

    _fl_set_xyplot_alphaxtics(pObject, m, s)


_fl_set_xyplot_alphaytics = cfuncproto(
        so_libforms, "fl_set_xyplot_alphaytics",
        None, [cty.POINTER(FL_OBJECT), STRING, STRING],
        """void fl_set_xyplot_alphaytics(FL_OBJECT * ob, const char * m,
           const char * s)
        """)
def fl_set_xyplot_alphaytics(pObject, m, s):
    """ fl_set_xyplot_alphaytics(pObject, m, s)
    """

    _fl_set_xyplot_alphaytics(pObject, m, s)


_fl_set_xyplot_fixed_xaxis = cfuncproto(
        so_libforms, "fl_set_xyplot_fixed_xaxis",
        None, [cty.POINTER(FL_OBJECT), STRING, STRING],
        """void fl_set_xyplot_fixed_xaxis(FL_OBJECT * ob, const char * lm,
           const char * rm)
        """)
def fl_set_xyplot_fixed_xaxis(pObject, lm, rm):
    """ fl_set_xyplot_fixed_xaxis(pObject, lm, rm)
    """

    _fl_set_xyplot_fixed_xaxis(pObject, lm, rm)


_fl_set_xyplot_fixed_yaxis = cfuncproto(
        so_libforms, "fl_set_xyplot_fixed_yaxis",
        None, [cty.POINTER(FL_OBJECT), STRING, STRING],
        """void fl_set_xyplot_fixed_yaxis(FL_OBJECT * ob, const char * bm,
           const char * tm)
        """)
def fl_set_xyplot_fixed_yaxis(pObject, bm, tm):
    """ fl_set_xyplot_fixed_yaxis(pObject, bm, tm)
    """

    _fl_set_xyplot_fixed_yaxis(pObject, bm, tm)


_fl_interpolate = cfuncproto(
        so_libforms, "fl_interpolate",
        cty.c_int, [cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_int, cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_double, cty.c_int],
        """int fl_interpolate(const char * wx, const char * wy, int nin,
           float * x, float * y, double grid, int ndeg)
        """)
def fl_interpolate(wx, wy, nin, x, y, grid, ndeg):
    """ fl_interpolate(wx, wy, nin, x, y, grid, ndeg) -> num.
    """

    retval = _fl_interpolate(wx, wy, nin, x, y, grid, ndeg)
    return retval


_fl_spline_interpolate = cfuncproto(
        so_libforms, "fl_spline_interpolate",
        cty.c_int, [cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_int, cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_double],
        """int fl_spline_interpolate(const char * wx, const char * wy,
           int nin, float * x, float * y, double grid)
        """)
def fl_spline_interpolate(wx, wy, nin, x, y, grid):
    """ fl_spline_interpolate(wx, wy, nin, x, y, grid) -> num.
    """

    retval = _fl_spline_interpolate(wx, wy, nin, x, y, grid)
    return retval


FL_XYPLOT_SYMBOL = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_int,
            cty.POINTER(FL_POINT), cty.c_int, cty.c_int, cty.c_int)


_fl_set_xyplot_symbol = cfuncproto(
        so_libforms, "fl_set_xyplot_symbol",
        FL_XYPLOT_SYMBOL, [cty.POINTER(FL_OBJECT), cty.c_int,
        FL_XYPLOT_SYMBOL],
        """FL_XYPLOT_SYMBOL fl_set_xyplot_symbol(FL_OBJECT * ob, int id,
           FL_XYPLOT_SYMBOL symbol)
        """)
def fl_set_xyplot_symbol(pObject, idnum, symbol):
    """ fl_set_xyplot_symbol(pObject, idnum, symbol) -> xyplot_symbol func.
    """

    retval = _fl_set_xyplot_symbol(pObject, idnum, symbol)
    return retval


_fl_set_xyplot_mark_active = cfuncproto(
        so_libforms, "fl_set_xyplot_mark_active",
        cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
        """int fl_set_xyplot_mark_active(FL_OBJECT * ob, int y)
        """)
def fl_set_xyplot_mark_active(pObject, y):
    """ fl_set_xyplot_mark_active(pObject, y) -> num.
    """

    retval = _fl_set_xyplot_mark_active(pObject, y)
    return retval


# the following (fl_fheight) etcty. were never documented and were
# removed from V0.89, but apparently this broke some applications that
# were using them. Put them back in 10/22/00

_fl_gc_ = cfuncproto(
        so_libforms, "fl_gc_",
        GC, [],
        """GC fl_gc_()
        """)
def fl_gc_():
    """ fl_gc_() -> gc
    """

    retval = _fl_gc_()
    return retval


_fl_textgc_ = cfuncproto(
        so_libforms, "fl_textgc_",
        GC, [],
        """)GC fl_textgc_()
        """)
def fl_textgc_():
    """ fl_textgc_() -> gc
    """

    retval = _fl_textgc_()
    return retval


_fl_fheight_ = cfuncproto(
        so_libforms, "fl_fheight_",
        cty.c_int, [],
        """int fl_fheight_()
        """)
def fl_fheight_():
    """ fl_fheight_() -> num.
    """

    retval = _fl_fheight_()
    return retval


_fl_fdesc_ = cfuncproto(
        so_libforms, "fl_fdesc_",
        cty.c_int, [],
        """int fl_fdesc_()
        """)
def fl_fdesc_():
    """ fl_fdesc_() -> num.
    """

    retval = _fl_fdesc_()
    return retval


_fl_cur_win_ = cfuncproto(
        so_libforms, "fl_cur_win_",
        Window, [],
        """Window fl_cur_win_()
        """)
def fl_cur_win_():
    """ fl_cur_win_() -> window
    """

    retval = _fl_cur_win_()
    return retval


_fl_cur_fs_ = cfuncproto(
        so_libforms, "fl_cur_fs_",
        cty.POINTER(XFontStruct), [],
        """XFontStruct * fl_cur_fs_()
        """)
def fl_cur_fs_():
    """ fl_cur_fs_() -> XFontStruct class
    """

    retval = _fl_cur_fs_()
    return retval


# TODO: Verify; commented to prevent a SegmentationFault --LK
#fl_textgc = fl_textgc_()
fl_textgc = fl_textgc_
#fl_gc = fl_gc_()
fl_gc = fl_gc_
#fl_cur_win = fl_cur_win_()
fl_cur_win = fl_cur_win_
#fl_fheight = fl_fheight_()
fl_fheight = fl_fheight_
#fl_fdesc = fl_fdesc_()
fl_fdesc = fl_fdesc_
#fl_cur_fs = fl_cur_fs_()
fl_cur_fs = fl_cur_fs_


_fl_display_ = cfuncproto(
        so_libforms, "fl_display_",
        cty.POINTER(Display), [],
        """Display * fl_display_()
        """)
def fl_display_():
    """ fl_display_() -> display
    """

    retval = _fl_display_()
    return retval


FL_FALSE = 0
FL_TRUE = (not FL_FALSE)

Mask = cty.c_ulong
Time = cty.c_ulong
GContext = XID    # cty.c_ulong
KeyCode = cty.c_ubyte


#########################
# flimage.h
# Image related routines
#########################

def fl_safe_free(p):
    if p:
        fl_free(p)
        p = None

def FL_RGB2GRAY(r, g, b):
    return cty.c_uint((78 * (r) + 150 * (g) + 28 * (b)) >> 8)

# values for unnamed enumeration
FL_IMAGE_NONE = 0
FL_IMAGE_MONO = 1           # b&w. 1bit. 0=white 1=black
FL_IMAGE_GRAY = 2           # 8 bit gray image
FL_IMAGE_CI = 4             # colormmaped image
FL_IMAGE_RGB = 8            # RGBA image. 8bit each
FL_IMAGE_PACKED = 16        # RGBA packed into an int
FL_IMAGE_GRAY16 = 32        # 12bit gray scale image
FL_IMAGE_RGB16 = 64         # 36bits color image
FL_IMAGE_FLEX = 1023        # all formats
# aliases
FLIMAGE_NONE = FL_IMAGE_NONE
FLIMAGE_MONO = FL_IMAGE_MONO
FLIMAGE_GRAY = FL_IMAGE_GRAY
FLIMAGE_CI = FL_IMAGE_CI
FLIMAGE_RGB = FL_IMAGE_RGB
FLIMAGE_PACKED = FL_IMAGE_PACKED
FLIMAGE_GRAY16 = FL_IMAGE_GRAY16
FLIMAGE_RGB16 = FL_IMAGE_RGB16
FLIMAGE_FLEX = FL_IMAGE_FLEX

FL_PCTYPE = cty.c_uint        # primary color type
FL_PCBITS = 8               # primary color bits
FL_PCMAX = (1 << FL_PCBITS) - 1

FL_RMASK = 0x000000ff
FL_RSHIFT = 0
FL_GMASK = 0x0000ff00
FL_GSHIFT = 8
FL_BMASK = 0x00ff0000
FL_BSHIFT = 16
FL_AMASK = 0xff000000
FL_ASHIFT = 24

# if PCBITS is not 8, we need to apply the RGBmask

def FL_GETR(packed):
    return (packed & FL_RMASK)

FL_LUTBITS = 12         # max colormap bits. 4096 entries

def FL_IsRGB(im):
    return (im.type == FL_IMAGE_RGB)

def FL_IsPacked(im):
    return (im.type == FL_IMAGE_PACKED)

# values for unnamed enumeration
FLIMAGE_AUTOCOLOR = 0x7fffffff
FLIMAGE_BADCOLOR = FLIMAGE_AUTOCOLOR

FL_WINDOW = Window    # cty.c_ulong

class flimage_text_(cty.Structure):
    pass
flimage_text_._fields_ = [
    ('str', STRING),            # the string itself
    ('len', cty.c_int),             # string length
    ('x', cty.c_int),               # starting location of text (wrt image)
    ('y', cty.c_int),
    ('color', cty.c_uint),          # color of the text
    ('bcolor', cty.c_uint),         # background color of the text
    ('nobk', cty.c_int),            # no background
    ('size', cty.c_int),            # font size & style
    ('style', cty.c_int),
    ('angle', cty.c_int),           # in 1/10th of a degrees
    ('align', cty.c_int),           # alignment wrt to (x,y)
    ('reserved', cty.c_int * 6),
]
FLIMAGE_TEXT = flimage_text_

class flimage_marker_(cty.Structure):
    pass
flimage_marker_._fields_ = [
    ('name', STRING),           # marker name
    ('w', cty.c_int),               # size
    ('h', cty.c_int),
    ('x', cty.c_int),               # location
    ('y', cty.c_int),
    ('color', cty.c_uint),          # color of the marker
    ('bcolor', cty.c_uint),         # aux. color of the marker
    ('angle', cty.c_int),           # in 1/10th of a degree
    ('fill', cty.c_int),
    ('thickness', cty.c_int),       # line thickness
    ('style', cty.c_int),           # line style
    # the following is filled by the library
    ('display', cty.c_void_p),
    ('gc', cty.c_void_p),
    ('win', FL_WINDOW),
    ('psdraw', STRING),
    ('reserved', cty.c_int * 6),
]
FLIMAGE_MARKER = flimage_marker_

FLIMAGE_REPFREQ = 0x1f   # report every 32 lines

class flimage_setup_(cty.Structure):
    pass

FLIMAGESETUP = cty.POINTER(flimage_setup_)

class flimage_(cty.Structure):
    pass
flimage_._fields_ = [
    ('type', cty.c_int),            # image type
    ('w', cty.c_int),
    ('h', cty.c_int),               # image size
    ('app_data', cty.c_void_p),     #for application at setup time
    ('u_vdata', cty.c_void_p),      # for application
    ('u_ldata', cty.c_long),        # for application
    ('red', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('green', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('blue', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('alpha', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('rgba', cty.POINTER(cty.POINTER(cty.c_ubyte)) * 4),    # alias
    ('ci', cty.POINTER(cty.POINTER(cty.c_ushort))),
    ('gray', cty.POINTER(cty.POINTER(cty.c_ushort))),
    ('packed', cty.POINTER(cty.POINTER(FL_PACKED4))),
    ('red16', cty.POINTER(cty.POINTER(cty.c_ushort))),  # not currently supported
    ('green16', cty.POINTER(cty.POINTER(cty.c_ushort))),  #not currently supported
    ('blue16', cty.POINTER(cty.POINTER(cty.c_ushort))),  # not currently supported
    ('alpha16', cty.POINTER(cty.POINTER(cty.c_ushort))),  # not currently supported
    ('ci8', cty.POINTER(cty.POINTER(cty.c_ubyte))), # not currently supported
    ('red_lut', cty.POINTER(cty.c_int)),        # red lookup tables
    ('green_lut', cty.POINTER(cty.c_int)),      # green lookup tables
    ('blue_lut', cty.POINTER(cty.c_int)),       # blue lookup tables
    ('alpha_lut', cty.POINTER(cty.c_int)),      # alpha lookup tables
    ('lut', cty.POINTER(cty.c_int) * 4),        # alias
    ('map_len', cty.c_int),                 # lut length
    ('colors', cty.c_int),                  # actual colors used in displaying
    ('gray_maxval', cty.c_int),             # indicate the range of gray16
    ('ci_maxval', cty.c_int),               # max value of ci. not used, use map_len
    ('rgb_maxval', cty.c_int),              # max value for rgb16 image
    ('level', cty.c_int),
    ('wwidth', cty.c_int),
    ('wlut', cty.POINTER(cty.c_ushort)),        # lut for window levelling
    ('wlut_len', cty.c_int),
    ('app_background', cty.c_int),          # transparent color: in RGB
    ('comments', STRING),
    ('comments_len', cty.c_int),
    ('available_type', cty.c_int),
    ('next', cty.POINTER(flimage_)),
    ('sx', cty.c_int),                      # display subimage origin
    ('sy', cty.c_int),
    ('sw', cty.c_int),                      # display subimage width
    ('sh', cty.c_int),
    ('wx', cty.c_int),              # display location relative to win
    ('wy', cty.c_int),
    ('modified', cty.c_int),
    ('display', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_), FL_WINDOW)),
    ('double_buffer', cty.c_int),
    ('sxd', cty.c_int),
    ('syd', cty.c_int),
    ('swd', cty.c_int),
    ('shd', cty.c_int),
    ('wxd', cty.c_int),
    ('wyd', cty.c_int),
    ('fmt_name', STRING),       # format name (ppm,jpg etc)
    ('bi_reserved', cty.c_int * 8),
    # annotation stuff
    ('text', cty.POINTER(FLIMAGE_TEXT)),
    ('ntext', cty.c_int),
    ('max_text', cty.c_int),
    ('dont_display_text', cty.c_int),
    ('display_text', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('free_text', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('marker', cty.POINTER(FLIMAGE_MARKER)),
    ('nmarkers', cty.c_int),
    ('max_markers', cty.c_int),
    ('dont_display_marker', cty.c_int),
    ('display_markers', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('free_markers', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('an_reserved', cty.c_int * 8),
    # physicalValue = poffset + pixelValue * pscale
    ('pmin', cty.c_double),         # physical data range
    ('pmax', cty.c_double),
    ('poffset', cty.c_double),
    ('pscale', cty.c_double),
    #  pixel grid distance
    ('xdist_offset', cty.c_double),
    ('xdist_scale', cty.c_double),
    ('ydist_offset', cty.c_double),
    ('ydist_scale', cty.c_double),
    ('px_reserved', cty.c_int * 8),
    ('infile', STRING),
    ('outfile', STRING),
    ('foffset', cty.c_long),
    ('original_type', cty.c_int),
    # hooks for application to have a chance to set some options.
    # if pre_write returns -1, the output will be canceled
    ('pre_write', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('post_write', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('f_reserved', cty.c_int * 16),
    # image processing stuff
    ('subx', cty.c_int),        # subimage origin
    ('suby', cty.c_int),
    ('subw', cty.c_int),        # subimage size
    ('subh', cty.c_int),
    ('sub_shape', cty.c_int),   # shape of the subimage
    ('fill_color', cty.c_uint),     # fill color
    ('force_convert', cty.c_int),
    ('llut', cty.POINTER(cty.c_int) * 3),   # linear lut
    ('llut_len', cty.c_int),
    ('hist', cty.POINTER(cty.c_uint) * 4),
    ('ip_reserved', cty.c_int * 16),
    # application handlers
    ('total', cty.c_int),
    ('completed', cty.c_int),
    ('visual_cue', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_), STRING)),
    ('error_message', cty.CFUNCTYPE(None, cty.POINTER(flimage_), STRING)),
    ('error_code', cty.c_int),      # not currently used
    ('display_type', cty.c_int),    # just before handing it to X
    ('pixels', cty.POINTER(cty.POINTER( cty.c_ushort))),
    ('image_spec', cty.c_void_p),   # additional image info
    ('xdisplay', cty.c_void_p),     # the X connection
    ('tran_rgb', cty.c_int),        # RGB color that should be transparent
    ('tran_index', cty.c_int),      # index that should be transparent
    ('matr', cty.c_int),
    ('matc', cty.c_int),
    # multi-frame images
    ('more', cty.c_int),
    ('current_frame', cty.c_int),
    ('total_frames', cty.c_int),
    ('next_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('prev_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('random_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_), cty.c_int)),
    ('rewind_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('cleanup', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('stop_looping', cty.c_int),
    ('mi_reserved', cty.c_int * 16),
    # the following are for internal use
    ('fpin', cty.POINTER(FILE)),
    ('fpout', cty.POINTER(FILE)),
    ('image_io', cty.c_void_p),
    ('io_spec', cty.c_void_p),      # io operation helper
    ('spec_size', cty.c_int),
    ('depth', cty.c_int),           # the depth we actually use
    ('vclass', cty.c_int),
    ('visual', cty.c_void_p),
    ('xcolormap', cty.c_ulong),
    ('rgb2p', FL_RGB2PIXEL_),
    ('ximage', cty.c_void_p),
    ('win', FL_WINDOW),
    ('gc', cty.c_void_p),
    ('sdepth', cty.c_int),          # depth the server says
    ('textgc', cty.c_void_p),
    ('markergc', cty.c_void_p),
    ('extra_io_info', cty.c_void_p),
    ('pixmap', cty.c_ulong),
    ('pixmap_w', cty.c_int),
    ('pixmap_h', cty.c_int),
    ('pixmap_depth', cty.c_int),
    ('isPixmap', cty.c_int),
    ('setup', FLIMAGESETUP),
    ('info', STRING),
    ('internal_reserved', cty.c_int * 14),
]
FL_IMAGE = flimage_

# some configuration stuff

flimage_setup_._fields_ = [
    ('app_data', cty.c_void_p),
    ('visual_cue', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE), STRING)),
    ('error_message', cty.CFUNCTYPE(None, cty.POINTER(FL_IMAGE), STRING)),
    ('display', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE), cty.c_ulong)),
    ('rgbfile', STRING),
    ('do_not_clear', cty.c_int),
    ('xdisplay', cty.c_void_p),
    ('max_frames', cty.c_int),
    ('delay', cty.c_int),
    ('no_auto_extension', cty.c_int),
    ('report_frequency', cty.c_int),
    ('double_buffer', cty.c_int),
    # internal use
    ('trailblazer', cty.c_ulong),
    ('header_info', cty.c_int),
    ('reserved', cty.c_int * 8),
]

FLIMAGE_SETUP = flimage_setup_


_flimage_setup = cfuncproto(
        so_libflimage, "flimage_setup",
        None, [cty.POINTER(FLIMAGE_SETUP)],
        """void flimage_setup(FLIMAGE_SETUP * setup)
        """)
def flimage_setup(setup):
    """ flimage_setup(setup)
    """

    _flimage_setup(setup)


# possible errors from the library. Not currently (v0.89) used
# values for unnamed enumeration
FLIMAGE_ERR_NONE = 0
FLIMAGE_ERR_ALLOC = -50         # allocation error
FLIMAGE_ERR_INVALID = -49       # invalid image
FLIMAGE_ERR_ARGUMENT = -48      # bad argument/request
FLIMAGE_ERR_FILE = -47          # io error
FLIMAGE_ERR_INTERNAL = -46      # bugs
FLIMAGE_ERR_UNKNOWN = -45

FLIMAGE_Identify = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FILE))
FLIMAGE_Description = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))
FLIMAGE_Read_Pixels = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))
FLIMAGE_Write_Image = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))


# basic IO routines

_flimage_load = cfuncproto(
        so_libflimage, "flimage_load",
        cty.POINTER(FL_IMAGE), [STRING],
        """FL_IMAGE * flimage_load(const char * file)
        """)
def flimage_load(filename):
    """ flimage_load(filename) -> pImage
    """

    retval = _flimage_load(filename)
    return retval


_flimage_read = cfuncproto(
        so_libflimage, "flimage_read",
        cty.POINTER(FL_IMAGE), [cty.POINTER(FL_IMAGE)],
        """FL_IMAGE * flimage_read(FL_IMAGE * im)
        """)
def flimage_read(pImage):
    """ flimage_read(pImage) -> pImage
    """

    retval = _flimage_read(pImage)
    return retval


_flimage_dump = cfuncproto(
        so_libflimage, "flimage_dump",
        cty.c_int, [cty.POINTER(FL_IMAGE), STRING, STRING],
        """int flimage_dump(FL_IMAGE * p1, const char * p2, const char * p3)
        """)
def flimage_dump(pImage, p2, p3):
    """ flimage_dump(pImage, p2, p3) -> num.
    """

    retval = _flimage_dump(pImage, p2, p3)
    return retval


_flimage_close = cfuncproto(
        so_libflimage, "flimage_close",
        cty.c_int, [cty.POINTER(FL_IMAGE)],
        """int flimage_close(FL_IMAGE * p1)
        """)
def flimage_close(pImage):
    """ flimage_close(pImage) -> num.
    """

    retval = _flimage_close(pImage)
    return retval


_flimage_alloc = cfuncproto(
        so_libflimage, "flimage_alloc",
        cty.POINTER(FL_IMAGE), [],
        """FL_IMAGE * flimage_alloc()
        """)
def flimage_alloc():
    """ flimage_alloc() -> pImage
    """

    retval = _flimage_alloc()
    return retval


_flimage_getmem = cfuncproto(
        so_libflimage, "flimage_getmem",
        cty.c_int, [cty.POINTER(FL_IMAGE)],
        """int flimage_getmem(FL_IMAGE * p1)
        """)
def flimage_getmem(pImage):
    """ flimage_getmem(pImage) -> num.
    """

    retval = _flimage_getmem(pImage)
    return retval


_flimage_is_supported = cfuncproto(
        so_libflimage, "flimage_is_supported",
        cty.c_int, [STRING],
        """int flimage_is_supported(const char * p1)
        """)
def flimage_is_supported(p1):
    """ flimage_is_supported(p1) -> num.
    """

    retval = _flimage_is_supported(p1)
    return retval


_flimage_description_via_filter = cfuncproto(
        so_libflimage, "flimage_description_via_filter",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.POINTER(STRING), STRING,
        cty.c_int],
        """int flimage_description_via_filter(FL_IMAGE * p1, const char * p2,
           const char * p3, int p4)
        """)
def flimage_description_via_filter(pImage, p2, p3, p4):
    """ flimage_description_via_filter(pImage, p2, p3, p4) -> num.
    """

    retval = _flimage_description_via_filter(pImage, p2, p3, p4)
    return retval


_flimage_write_via_filter = cfuncproto(
        so_libflimage, "flimage_write_via_filter",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.POINTER(STRING),
        cty.POINTER(STRING), cty.c_int],
        """int flimage_write_via_filter(FL_IMAGE * p1, const char * p2,
           const char * p3, int p4)
        """)
def flimage_write_via_filter(pImage, p2, p3, p4):
    """ flimage_write_via_filter(pImage, p2, p3, p4) -> num.
    """

    retval = _flimage_write_via_filter(pImage, p2, p3, p4)
    return retval


_flimage_free = cfuncproto(
        so_libflimage, "flimage_free",
        cty.c_int, [cty.POINTER(FL_IMAGE)],
        """int flimage_free(FL_IMAGE * p1)
        """)
def flimage_free(pImage):
    """ flimage_free(pImage) -> num.
    """

    retval = _flimage_free(pImage)
    return retval


_flimage_display = cfuncproto(
        so_libflimage, "flimage_display",
        cty.c_int, [cty.POINTER(FL_IMAGE), Window],
        """int flimage_display(FL_IMAGE * p1, Window p2)
        """)
def flimage_display(pImage, window):
    """ flimage_display(pImage, window) -> num.
    """

    retval = _flimage_display(pImage, window)
    return retval


_flimage_sdisplay = cfuncproto(
        so_libflimage, "flimage_sdisplay",
        cty.c_int, [cty.POINTER(FL_IMAGE), Window],
        """int flimage_sdisplay(FL_IMAGE * p1, Window p2)
        """)
def flimage_sdisplay(pImage, p2):
    """ flimage_sdisplay(pImage, p2) -> num.
    """

    retval = _flimage_sdisplay(pImage, p2)
    return retval


_flimage_convert = cfuncproto(
        so_libflimage, "flimage_convert",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_int, cty.c_int],
        """int flimage_convert(FL_IMAGE * p1, int p2, int p3)
        """)
def flimage_convert(pImage, p2, p3):
    """ flimage_convert(pImage, p2, p3) -> num.
    """

    retval = _flimage_convert(pImage, p2, p3)
    return retval


_flimage_type_name = cfuncproto(
        so_libflimage, "flimage_type_name",
        STRING, [cty.c_int],
        """const char * flimage_type_name(int type)
        """)
def flimage_type_name(flimage_type):
    """ flimage_type_name(flimage_type) -> name string
    """

    retval = _flimage_type_name(flimage_type)
    return retval


_flimage_add_text = cfuncproto(
        so_libflimage, "flimage_add_text",
        cty.c_int, [cty.POINTER(FL_IMAGE), STRING, cty.c_int, cty.c_int,
        cty.c_int, cty.c_uint, cty.c_uint, cty.c_int, cty.c_double,
        cty.c_double, cty.c_int],
        """int flimage_add_text(FL_IMAGE * p1, const char * p2, int p3,
           int p4, int p5, unsigned int p6, unsigned int p7, int p8,
           double p9, double p10, int p11)
        """)
def flimage_add_text(pImage, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11):
    """ flimage_add_text(pImage, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) -> num.
    """

    retval = _flimage_add_text(pImage, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
    return retval


_flimage_add_text_struct = cfuncproto(
        so_libflimage, "flimage_add_text_struct",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.POINTER(FLIMAGE_TEXT)],
        """int flimage_add_text_struct(FL_IMAGE * p1, const char * p2)
        """)
def flimage_add_text_struct(pImage, p2):
    """ flimage_add_text_struct(pImage, p2) -> num.
    """

    retval = _flimage_add_text_struct(pImage, p2)
    return retval


_flimage_delete_all_text = cfuncproto(
        so_libflimage, "flimage_delete_all_text",
        None, [cty.POINTER(FL_IMAGE)],
        """void flimage_delete_all_text(FL_IMAGE * p1)
        """)
def flimage_delete_all_text(pImage):
    """ flimage_delete_all_text(pImage)
    """

    _flimage_delete_all_text(pImage)


_flimage_add_marker = cfuncproto(
        so_libflimage, "flimage_add_marker",
        cty.c_int, [cty.POINTER(FL_IMAGE), STRING, cty.c_double, cty.c_double,
        cty.c_double, cty.c_double, cty.c_int, cty.c_int, cty.c_int,
        cty.c_uint, cty.c_uint],
        """int flimage_add_marker(FL_IMAGE * p1, const char * p2, double p3,
           double p4, double p5, double p6, int p7, int p8, int p9,
           unsigned int p10, unsigned int p11)
        """)
def flimage_add_marker(pImage, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11):
    """ flimage_add_marker(pImage, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11) -> num.
    """

    retval = _flimage_add_marker(pImage, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)
    return retval


_flimage_add_marker_struct = cfuncproto(
        so_libflimage, "flimage_add_marker_struct",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.POINTER(FLIMAGE_MARKER)],
        """int flimage_add_marker_struct(FL_IMAGE * p1, const char * p2)
        """)
def flimage_add_marker_struct(p1, p2):
    """ flimage_add_marker_struct(p1, p2) -> num.
    """

    retval = _flimage_add_marker_struct(p1, p2)
    return retval


_flimage_define_marker = cfuncproto(
        so_libflimage, "flimage_define_marker",
        cty.c_int, [STRING, cty.POINTER(FLIMAGE_MARKER), STRING],
        """int flimage_define_marker(const char *, void ( * )
           (FLIMAGE_MARKER *), const char *
        """)
def flimage_define_marker(p1, p2, p3):
    """ flimage_define_marker(p1, p2, p3) -> num.
    """

    retval = _flimage_define_marker(p1, p2, p3)
    return retval


_flimage_delete_all_markers = cfuncproto(
        so_libflimage, "flimage_delete_all_markers",
        None, [cty.POINTER(FL_IMAGE)],
        """void flimage_delete_all_markers(FL_IMAGE * p1)
        """)

def flimage_delete_all_markers(pImage):
    """ flimage_delete_all_markers(pImage)
    """

    _flimage_delete_all_markers(pImage)


_flimage_render_annotation = cfuncproto(
        so_libflimage, "flimage_render_annotation",
        cty.c_int, [cty.POINTER(FL_IMAGE), FL_WINDOW],
        """int flimage_render_annotation(FL_IMAGE * p1, FL_WINDOW p2)
        """)
def flimage_render_annotation(pImage, window):
    """ flimage_render_annotation(pImage, window) -> num.
    """

    retval = _flimage_render_annotation(pImage, window)
    return retval


_flimage_error = cfuncproto(
        so_libflimage, "flimage_error",
        None, [cty.POINTER(FL_IMAGE), STRING],
        """void flimage_error(FL_IMAGE * p1, const char * p2)
        """)
def flimage_error(pImage, p2):
    """ flimage_error(pImage, p2)
    """

    _flimage_error(pImage, p2)


# built-in format supports

_flimage_enable_pnm = cfuncproto(
        so_libflimage, "flimage_enable_pnm",
        None, [],
        """void flimage_enable_pnm()
        """)
def flimage_enable_pnm():
    """ flimage_enable_pnm()
    """

    _flimage_enable_pnm()


_flimage_set_fits_bits = cfuncproto(
        so_libflimage, "flimage_set_fits_bits",
        cty.c_int, [cty.c_int],
        """int flimage_set_fits_bits(int p1)
        """)
def flimage_set_fits_bits(p1):
    """ flimage_set_fits_bits(p1) -> num.
    """

    retval = _flimage_set_fits_bits(p1)
    return retval


# output options

class FLIMAGE_JPEG_OPTION(cty.Structure):
    pass
FLIMAGE_JPEG_OPTION._fields_ = [
    ('quality', cty.c_int),
    ('smoothing', cty.c_int),
    ('reserved', cty.c_int * 6),
]

_flimage_jpeg_options = cfuncproto(
        so_libflimage, "flimage_jpeg_options",
        None, [cty.POINTER(FLIMAGE_JPEG_OPTION)],
        """void flimage_jpeg_options(FLIMAGE_JPEG_OPTION * p1)
        """)
def flimage_jpeg_options(pImageJpegOption):
    """ flimage_jpeg_options(pImageJpegOption)
    """

    _flimage_jpeg_options(pImageJpegOption)


_flimage_pnm_options = cfuncproto(
        so_libflimage, "flimage_pnm_options",
        None, [cty.c_int],
        """void flimage_pnm_options(int p1)
        """)
def flimage_pnm_options(p1):
    """ flimage_pnm_options(p1)
    """

    _flimage_pnm_options(p1)


_flimage_gif_options = cfuncproto(
        so_libflimage, "flimage_gif_options",
        None, [cty.c_int],
        """void flimage_gif_options(int p1)
        """)
def flimage_gif_options(p1):
    """ flimage_gif_options(p1)
    """

    _flimage_gif_options(p1)


_flimage_ps_options = cfuncproto(
        so_libflimage, "flimage_ps_options",
        cty.POINTER(FLPS_CONTROL), [],
        """FLPS_CONTROL * flimage_ps_options()
        """)
def flimage_ps_options():
    """ flimage_ps_options() -> flps_control class
    """

    retval = _flimage_ps_options()
    return retval


flimage_jpeg_output_options = flimage_jpeg_options
flimage_pnm_output_options = flimage_pnm_options
flimage_gif_output_options = flimage_gif_options


# values for unnamed enumeration
FLIMAGE_WRITABLE = FL_WRITE
FLIMAGE_READABLE = FL_READ

class FLIMAGE_FORMAT_INFO(cty.Structure):
    pass
FLIMAGE_FORMAT_INFO._fields_ = [
    ('formal_name', STRING),
    ('short_name', STRING),
    ('extension', STRING),
    ('type', cty.c_int),
    ('read_write', cty.c_int),
    ('annotation', cty.c_int),
    ('reserved', cty.c_int * 5),
]

_flimage_get_number_of_formats = cfuncproto(
        so_libflimage, "flimage_get_number_of_formats",
        cty.c_int, [],
        """int flimage_get_number_of_formats()
        """)
def flimage_get_number_of_formats():
    """ flimage_get_number_of_formats() -> num.
    """

    retval = _flimage_get_number_of_formats()
    return retval


_flimage_get_format_info = cfuncproto(
        so_libflimage, "flimage_get_format_info",
        cty.POINTER(FLIMAGE_FORMAT_INFO), [cty.c_int],
        """const char * flimage_get_format_info(int p1)
        """)
def flimage_get_format_info(p1):
    """ flimage_get_format_info(p1) -> format_info class instance
    """

    retval = _flimage_get_format_info(p1)
    return retval


_fl_get_matrix = cfuncproto(
        so_libflimage, "fl_get_matrix",
        cty.c_void_p, [cty.c_int, cty.c_int, cty.c_uint],
        """void * fl_get_matrix(int p1, int p2, unsigned int p3)
        """)
def fl_get_matrix(p1, p2, p3):
    """ fl_get_matrix(p1, p2, p3) -> ?
    """

    retval = _fl_get_matrix(p1, p2, p3)
    return retval


_fl_make_matrix = cfuncproto(
        so_libflimage, "fl_make_matrix",
        cty.c_void_p, [cty.c_int, cty.c_int, cty.c_uint, cty.c_void_p],
        """void * fl_make_matrix(int p1, int p2, unsigned int p3, void * p4)
        """)
def fl_make_matrix(p1, p2, p3, p4):
    """ fl_make_matrix(p1, p2, p3, p4) -> ?
    """

    retval = _fl_make_matrix(p1, p2, p3, p4)
    return retval


_fl_free_matrix = cfuncproto(
        so_libflimage, "fl_free_matrix",
        None, [cty.c_void_p],
        """void fl_free_matrix(void * p1)
        """)
def fl_free_matrix(p1):
    """ fl_free_matrix(p1)
    """

    _fl_free_matrix(p1)


# it seems not to be defined --LK
#fl_basename = cfuncproto(
        so_libflimage, "fl_basename",
#       STRING, [STRING],
#       """char * void fl_basename(char * p1)
#       """)
#def fl_basename(p1):
#   """ fl_basename(p1) -> name string
#   """
#
#   retval = fl_basename(p1)
#   return retval


# This function is retained for compatibility reasons only.
# It returns 1 always.
_fl_init_RGBdatabase = cfuncproto(
        so_libflimage, "fl_init_RGBdatabase",
        cty.c_int, [STRING],
        """int fl_init_RGBdatabase(const char * p1)
        """)
def fl_init_RGBdatabase(p1):
    """ fl_init_RGBdatabase(p1) -> num.
    """

    retval = _fl_init_RGBdatabase(p1)
    return retval


_fl_lookup_RGBcolor = cfuncproto(
        so_libflimage, "fl_lookup_RGBcolor",
        cty.c_int, [STRING, cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """int fl_lookup_RGBcolor(const char * p1, int * p2, int * p3, int * p4)
        """)
def fl_lookup_RGBcolor(p1, p2, p3, p4):
    """ fl_lookup_RGBcolor(p1, p2, p3, p4) -> num.
    """

    retval = _fl_lookup_RGBcolor(p1, p2, p3, p4)
    return retval


_flimage_add_format = cfuncproto(
        so_libflimage, "flimage_add_format",
        cty.c_int, [STRING, STRING, STRING, cty.c_int, FLIMAGE_Identify,
        FLIMAGE_Description, FLIMAGE_Read_Pixels, FLIMAGE_Write_Image],
        """int flimage_add_format(const char * p1, const char * p2,
           const char * p3, int p4, FLIMAGE_Identify p5,
           FLIMAGE_Description p6, FLIMAGE_Read_Pixels p7,
           FLIMAGE_Write_Image p8)
        """)
def flimage_add_format(p1, p2, p3, p4, py_fn5, py_fn6, py_fn7, py_fn8):
    """ flimage_add_format(p1, p2, p3, p4, py_fn5, py_fn6, py_fn7, py_fn8) -> num.
    """

    c_fn5 = FLIMAGE_Identify(py_fn5)
    c_fn6 = FLIMAGE_Description(py_fn6)
    c_fn7 = FLIMAGE_Read_Pixels(py_fn7)
    c_fn8 = FLIMAGE_Write_Image(py_fn8)
    _cfunc_refs[get_rand_dictkey()] = c_fn5
    _cfunc_refs[get_rand_dictkey()] = c_fn6
    _cfunc_refs[get_rand_dictkey()] = c_fn7
    _cfunc_refs[get_rand_dictkey()] = c_fn8
    retval = _flimage_add_format(p1, p2, p3, p4, c_fn5, c_fn6, c_fn7, c_fn8)
    return retval


_flimage_set_annotation_support = cfuncproto(
        so_libflimage, "flimage_set_annotation_support",
        None, [cty.c_int, cty.c_int],
        """void flimage_set_annotation_support(int p1, int p2)
        """)
def flimage_set_annotation_support(p1, p2):
    """ flimage_set_annotation_support(p1, p2)
    """

    _flimage_set_annotation_support(p1, p2)


_flimage_getcolormap = cfuncproto(
        so_libflimage, "flimage_getcolormap",
        cty.c_int, [cty.POINTER(FL_IMAGE)],
        """int flimage_getcolormap(FL_IMAGE * p1)
        """)
def flimage_getcolormap(pImage):
    """ flimage_getcolormap(pImage) -> num.
    """

    retval = _flimage_getcolormap(pImage)
    return retval


# it seems not to be defined --LK
#_fl_select_octree_quantizer = cfuncproto(
        so_libflimage, "fl_select_octree_quantizer",
#       None, [],
#       """void fl_select_octree_quantizer()
#       """)
#def fl_select_octree_quantizer():
#   """ fl_select_octree_quantizer()
#   """
#
#   fl_select_octree_quantizer()


_fl_select_mediancut_quantizer = cfuncproto(
        so_libflimage, "fl_select_mediancut_quantizer",
        None, [],
        """void fl_select_mediancut_quantizer()
        """)
def fl_select_mediancut_quantizer():
    """ fl_select_mediancut_quantizer()
    """

    _fl_select_mediancut_quantizer()


# simple image processing routines

#FLIMAGE_SHARPEN = cty.POINTER(cty.POINTER(cty.c_int(-1)))
FLIMAGE_SHARPEN = cty.c_int(-1)
#FLIMAGE_SMOOTH = cty.POINTER(cty.POINTER(cty.c_int(-2)))
FLIMAGE_SMOOTH = cty.c_int(-2)
FL_SMOOTH = FLIMAGE_SMOOTH
FL_SHARPEN = FLIMAGE_SHARPEN

# values for unnamed enumeration
FLIMAGE_NOSUBPIXEL = 0      # scale with no subpixel sampling
FLIMAGE_SUBPIXEL = 1        # scale with  subpixel sampling
FLIMAGE_CENTER = 2          # center warped image. default
FLIMAGE_RIGHT = 8           # flush right the warped image
FLIMAGE_ASPECT = 32         # fit the size
FLIMAGE_NOCENTER = FL_ALIGN_LEFT_TOP


_flimage_convolve = cfuncproto(
        so_libflimage, "flimage_convolve",
        cty.c_int, [cty.POINTER(FL_IMAGE),
        cty.POINTER(cty.POINTER(cty.c_int)), cty.c_int, cty.c_int],
        """int flimage_convolve(FL_IMAGE * p1, int * * p2, int p3, int p4)
        """)
def flimage_convolve(pImage, p2, p3, p4):
    """ flimage_convolve(pImage, p2, p3, p4) -> num.
    """

    retval = _flimage_convolve(pImage, p2, p3, p4)
    return retval


_flimage_convolvea = cfuncproto(
        so_libflimage, "flimage_convolvea",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.POINTER(cty.c_int),
        cty.c_int, cty.c_int],
        """int flimage_convolvea(FL_IMAGE * p1, int * p2, int p3, int p4)
        """)
def flimage_convolvea(pImage, p2, p3, p4):
    """ flimage_convolvea(pImage, p2, p3, p4) -> num.
    """

    retval = _flimage_convolvea(pImage, p2, p3, p4)
    return retval


_flimage_tint = cfuncproto(
        so_libflimage, "flimage_tint",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_uint, cty.c_double],
        """int flimage_tint(FL_IMAGE * p1, unsigned int p2, double p3)
        """)
def flimage_tint(pImage, p2, p3):
    """ flimage_tint(pImage, p2, p3) -> num.
    """

    retval = _flimage_tint(pImage, p2, p3)
    return retval


_flimage_rotate = cfuncproto(
        so_libflimage, "flimage_rotate",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_int, cty.c_int],
        """int flimage_rotate(FL_IMAGE * p1, int p2, int p3)
        """)
def flimage_rotate(p1, p2, p3):
    """ flimage_rotate(p1, p2, p3) -> num.
    """

    retval = _flimage_rotate(p1, p2, p3)
    return retval


_flimage_flip = cfuncproto(
        so_libflimage, "flimage_flip",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_int],
        """int flimage_flip(FL_IMAGE * p1, int p2)
        """)
def flimage_flip(pImage, p2):
    """ flimage_flip(pImage, p2) -> num.
    """

    retval = _flimage_flip(pImage, p2)
    return retval


_flimage_scale = cfuncproto(
        so_libflimage, "flimage_scale",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_int, cty.c_int, cty.c_int],
        """int flimage_scale(FL_IMAGE * p1, int p2, int p3, int p4)
        """)
def flimage_scale(pImage, p2, p3, p4):
    """ flimage_scale(pImage, p2, p3, p4) -> num.
    """

    retval = _flimage_scale(pImage, p2, p3, p4)
    return retval


_flimage_warp = cfuncproto(
        so_libflimage, "flimage_warp",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.POINTER(cty.c_float * 2),
        cty.c_int, cty.c_int, cty.c_int],
        """int flimage_warp(FL_IMAGE * p1, const char * p2, int p3, int p4,
           int p5)
        """)
def flimage_warp(pImage, p2, p3, p4, p5):
    """ flimage_warp(pImage, p2, p3, p4, p5) -> num.
    """

    retval = _flimage_warp(pImage, p2, p3, p4, p5)
    return retval


_flimage_autocrop = cfuncproto(
        so_libflimage, "flimage_autocrop",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_uint],
        """int flimage_autocrop(FL_IMAGE * p1, unsigned int p2)
        """)
def flimage_autocrop(pImage, p2):
    """ flimage_autocrop(pImage, p2) -> num.
    """

    retval = _flimage_autocrop(pImage, p2)
    return retval


_flimage_get_autocrop = cfuncproto(
        so_libflimage, "flimage_get_autocrop",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_uint,
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
        """int flimage_get_autocrop(FL_IMAGE * p1, unsigned int p2,
           int * p3, int * p4, int * p5, int * p6)
        """)
def flimage_get_autocrop(pImage, p2, p3, p4, p5, p6):
    """ flimage_get_autocrop(pImage, p2, p3, p4, p5, p6) -> num.
    """

    retval = _flimage_get_autocrop(pImage, p2, p3, p4, p5, p6)
    return retval


_flimage_crop = cfuncproto(
        so_libflimage, "flimage_crop",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_int, cty.c_int,
        cty.c_int, cty.c_int],
        """int flimage_crop(FL_IMAGE * p1, int p2, int p3, int p4, int p5)
        """)
def flimage_crop(pImage, p2, p3, p4, p5):
    """ flimage_crop(pImage, p2, p3, p4, p5) -> num.
    """

    retval = _flimage_crop(pImage, p2, p3, p4, p5)
    return retval


_flimage_replace_pixel = cfuncproto(
        so_libflimage, "flimage_replace_pixel",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_uint, cty.c_uint],
        """int flimage_replace_pixel(FL_IMAGE * p1, unsigned int p2,
           unsigned int p3)
        """)
def flimage_replace_pixel(pImage, p2, p3):
    """ flimage_replace_pixel(pImage, p2, p3) -> num.
    """

    retval = _flimage_replace_pixel(pImage, p2, p3)
    return retval


_flimage_transform_pixels = cfuncproto(
        so_libflimage, "flimage_transform_pixels",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
        """int flimage_transform_pixels(FL_IMAGE * p1, int * p2, int * p3,
           int * p4)
        """)
def flimage_transform_pixels(pImage, p2, p3, p4):
    """ flimage_transform_pixels(pImage, p2, p3, p4) -> num.
    """

    retval = _flimage_transform_pixels(pImage, p2, p3, p4)
    return retval


_flimage_windowlevel = cfuncproto(
        so_libflimage, "flimage_windowlevel",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_int, cty.c_int],
        """int flimage_windowlevel(FL_IMAGE * p1, int p2, int p3)
        """)
def flimage_windowlevel(pImage, p2, p3):
    """ flimage_windowlevel(pImage, p2, p3) -> num.
    """

    retval = _flimage_windowlevel(pImage, p2, p3)
    return retval


_flimage_enhance = cfuncproto(
        so_libflimage, "flimage_enhance",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_int],
        """int flimage_enhance(FL_IMAGE * p1, int p2)
        """)
def flimage_enhance(pImage, p2):
    """ flimage_enhance(pImage, p2) -> num.
    """

    retval = _flimage_enhance(pImage, p2)
    return retval


Pixmap = XID    # cty.c_ulong


_flimage_from_pixmap = cfuncproto(
        so_libflimage, "flimage_from_pixmap",
        cty.c_int, [cty.POINTER(FL_IMAGE), Pixmap],
        """int flimage_from_pixmap(FL_IMAGE * p1, Pixmap p2)
        """)
def flimage_from_pixmap(pImage, pixmap):
    """ flimage_from_pixmap(pImage, pixmap) -> num.
    """

    retval = _flimage_from_pixmap(pImage, pixmap)
    return retval


_flimage_to_pixmap = cfuncproto(
        so_libflimage, "flimage_to_pixmap",
        Pixmap, [cty.POINTER(FL_IMAGE), FL_WINDOW],
        """Pixmap flimage_to_pixmap(FL_IMAGE * p1, FL_WINDOW p2)
        """)
def flimage_to_pixmap(pImage, window):
    """ flimage_to_pixmap(pImage, window) -> pixmap
    """

    retval = _flimage_to_pixmap(pImage, window)
    return retval


_flimage_dup = cfuncproto(
        so_libflimage, "flimage_dup",
        cty.POINTER(FL_IMAGE), [cty.POINTER(FL_IMAGE)],
        """FL_IMAGE * flimage_dup(FL_IMAGE * p1)
        """)
def flimage_dup(pImage):
    """ flimage_dup(pImage) -> pImage
    """

    retval = _flimage_dup(pImage)
    return retval


# Miscellaneous prototypes

_fl_get_submatrix = cfuncproto(
        so_libflimage, "fl_get_submatrix",
        cty.c_void_p, [cty.c_void_p, cty.c_int, cty.c_int, cty.c_int,
        cty.c_int, cty.c_int, cty.c_int, cty.c_uint],
        """void * fl_get_submatrix(void * p1, int p2, int p3, int p4, int p5,
           int p6, int p7, unsigned int p8)
        """)
def fl_get_submatrix(p1, p2, p3, p4, p5, p6, p7, p8):
    """ fl_get_submatrix(p1, p2, p3, p4, p5, p6, p7, p8) -> ?
    """

    retval = _fl_get_submatrix(p1, p2, p3, p4, p5, p6, p7, p8)
    return retval


_fl_j2pass_quantize_packed = cfuncproto(
        so_libflimage, "fl_j2pass_quantize_packed",
        cty.c_int, [cty.POINTER(cty.POINTER(cty.c_uint)), cty.c_int,
        cty.c_int, cty.c_int, cty.POINTER(cty.POINTER(cty.c_ushort)),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int), cty.POINTER(FL_IMAGE)],
        """int fl_j2pass_quantize_packed(unsigned int * * p1, int p2, int p3,
           int p4, short unsigned int * * p5, int * p6, int * p7, int * p8,
           int * p9, FL_IMAGE * p10)
        """)
def fl_j2pass_quantize_packed(p1, p2, p3, p4, p5, p6, p7, p8, p9, pImage):
    """ fl_j2pass_quantize_packed(p1, p2, p3, p4, p5, p6, p7, p8, p9, pImage) -> num.
    """

    retval = _fl_j2pass_quantize_packed(p1, p2, p3, p4, p5, p6, p7, p8, p9, pImage)
    return retval


_fl_j2pass_quantize_rgb = cfuncproto(
        so_libflimage, "fl_j2pass_quantize_rgb",
        cty.c_int, [cty.POINTER(cty.POINTER(cty.c_ubyte)),
        cty.POINTER(cty.POINTER(cty.c_ubyte)),
        cty.POINTER(cty.POINTER(cty.c_ubyte)), cty.c_int, cty.c_int,
        cty.c_int, cty.POINTER(cty.POINTER(cty.c_ushort)),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int), cty.POINTER(FL_IMAGE)],
        """int fl_j2pass_quantize_rgb(unsigned char * * p1,
           unsigned char * * p2, unsigned char * * p3, int p4, int p5, int p6,
           short unsigned int * * p7, int * p8, int * p9, int * p10,
           int * p11, FL_IMAGE * p12)
        """)
def fl_j2pass_quantize_rgb(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, pImage):
    """ fl_j2pass_quantize_rgb(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, pImage) -> num.
    """

    retval = _fl_j2pass_quantize_rgb(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, pImage)
    return retval


_fl_make_submatrix = cfuncproto(
        so_libflimage, "fl_make_submatrix",
        cty.c_void_p, [cty.c_void_p, cty.c_int, cty.c_int, cty.c_int,
        cty.c_int, cty.c_int, cty.c_int, cty.c_uint],
        """void * fl_make_submatrix(void * p1, int p2, int p3, int p4,
           int p5, int p6, int p7, unsigned int p8)
        """)
def fl_make_submatrix(p1, p2, p3, p4, p5, p6, p7, p8):
    """ fl_make_submatrix(p1, p2, p3, p4, p5, p6, p7, p8) -> ?
    """

    retval = _fl_make_submatrix(p1, p2, p3, p4, p5, p6, p7, p8)
    return retval


_fl_pack_bits = cfuncproto(
        so_libflimage, "fl_pack_bits",
        None, [cty.POINTER(cty.c_ubyte), cty.POINTER(cty.c_ushort), cty.c_int],
        """void fl_pack_bits(unsigned char * p1, short unsigned int * p2,
           int p3)
        """)
def fl_pack_bits(p1, p2, p3):
    """ fl_pack_bits(p1, p2, p3)
    """

    _fl_pack_bits(p1, p2, p3)


_fl_unpack_bits = cfuncproto(
        so_libflimage, "fl_unpack_bits",
        None, [cty.POINTER(cty.c_ushort), cty.POINTER(cty.c_ubyte), cty.c_int],
        """void fl_unpack_bits(short unsigned int * p1, unsigned char * p2,
           int p3)
        """)
def fl_unpack_bits(p1, p2, p3):
    """ fl_unpack_bits(p1, p2, p3)
    """

    _fl_unpack_bits(p1, p2, p3)


_fl_value_to_bits = cfuncproto(
        so_libflimage, "fl_value_to_bits",
        cty.c_uint, [cty.c_uint],
        """)unsigned int fl_value_to_bits(unsigned int p1)
        """)
def fl_value_to_bits(p1):
    """ fl_value_to_bits(p1) -> num.
    """

    retval = _fl_value_to_bits(p1)
    return retval


_flimage_add_comments = cfuncproto(
        so_libflimage, "flimage_add_comments",
        None, [cty.POINTER(FL_IMAGE), STRING, cty.c_int],
        """void flimage_add_comments(FL_IMAGE * p1, const char * p2, int p3)
        """)
def flimage_add_comments(pImage, p2, p3):
    """ flimage_add_comments(pImage, p2, p3)
    """

    _flimage_add_comments(pImage, p2, p3)


_flimage_color_to_pixel = cfuncproto(
        so_libflimage, "flimage_color_to_pixel",
        cty.c_ulong, [cty.POINTER(FL_IMAGE), cty.c_int, cty.c_int, cty.c_int,
        cty.POINTER(cty.c_int)],
        """)long unsigned int flimage_color_to_pixel(FL_IMAGE * p1, int p2,
           int p3, int p4, int * p5)
        """)
def flimage_color_to_pixel(pImage, p2, p3, p4, p5):
    """ flimage_color_to_pixel(pImage, p2, p3, p4, p5) -> num.
    """

    retval = _flimage_color_to_pixel(pImage, p2, p3, p4, p5)
    return retval


_flimage_combine = cfuncproto(
        so_libflimage, "flimage_combine",
        cty.POINTER(FL_IMAGE), [cty.POINTER(FL_IMAGE), cty.POINTER(FL_IMAGE),
        cty.c_double],
        """FL_IMAGE * flimage_combine(FL_IMAGE * p1, FL_IMAGE * p2, double p3)
        """)
def flimage_combine(pImage1, pImage2, pImage3):
    """ flimage_combine(pImage1, pImage2, pImage3) -> pImage
    """

    retval = _flimage_combine(pImage1, pImage2, pImage3)
    return retval


_flimage_display_markers = cfuncproto(
        so_libflimage, "flimage_display_markers",
        None, [cty.POINTER(FL_IMAGE)],
        """void flimage_display_markers(FL_IMAGE * p1)
        """)
def flimage_display_markers(pImage):
    """ flimage_display_markers(pImage)
    """

    _flimage_display_markers(pImage)


_flimage_dup_ = cfuncproto(
        so_libflimage, "flimage_dup_",
        cty.POINTER(FL_IMAGE), [cty.POINTER(FL_IMAGE), cty.c_int],
        """FL_IMAGE * flimage_dup_(FL_IMAGE * p1, int p2)
        """)
def flimage_dup_(pImage, p2):
    """ flimage_dup_(pImage, p2) -> pImage
    """

    retval = _flimage_dup_(pImage, p2)
    return retval


_flimage_enable_bmp = cfuncproto(
        so_libflimage, "flimage_enable_bmp",
        None, [],
        """void flimage_enable_bmp()
        """)
def flimage_enable_bmp():
    """ flimage_enable_bmp()
    """

    _flimage_enable_bmp()


_flimage_enable_fits = cfuncproto(
        so_libflimage, "flimage_enable_fits",
        None, [],
        """void flimage_enable_fits()
        """)
def flimage_enable_fits():
    """ flimage_enable_fits()
    """

    _flimage_enable_fits()


_flimage_enable_genesis = cfuncproto(
        so_libflimage, "flimage_enable_genesis",
        None, [],
        """void flimage_enable_genesis()
        """)
def flimage_enable_genesis():
    """ flimage_enable_genesis()
    """

    _flimage_enable_genesis()


_flimage_enable_gif = cfuncproto(
        so_libflimage, "flimage_enable_gif",
        None, [],
        """void flimage_enable_gif()
        """)
def flimage_enable_gif():
    """ flimage_enable_gif()
    """

    _flimage_enable_gif()


_flimage_enable_gzip = cfuncproto(
        so_libflimage, "flimage_enable_gzip",
        None, [],
        """void flimage_enable_gzip()
        """)
def flimage_enable_gzip():
    """ flimage_enable_gzip()
    """

    _flimage_enable_gzip()


_flimage_enable_jpeg = cfuncproto(
        so_libflimage, "flimage_enable_jpeg",
        None, [],
        """void flimage_enable_jpeg()
        """)
def flimage_enable_jpeg():
    """ flimage_enable_jpeg()
    """

    _flimage_enable_jpeg()


_flimage_enable_png = cfuncproto(
        so_libflimage, "flimage_enable_png",
        None, [],
        """void flimage_enable_png()
        """)
def flimage_enable_png():
    """ flimage_enable_png()
    """

    _flimage_enable_png()


_flimage_enable_ps = cfuncproto(
        so_libflimage, "flimage_enable_ps",
        None, [],
        """void flimage_enable_ps()
        """)
def flimage_enable_ps():
    """ flimage_enable_ps()
    """

    _flimage_enable_ps()


_flimage_enable_sgi = cfuncproto(
        so_libflimage, "flimage_enable_sgi",
        None, [],
        """void flimage_enable_sgi()
        """)
def flimage_enable_sgi():
    """ flimage_enable_sgi()
    """

    _flimage_enable_sgi()


_flimage_enable_tiff = cfuncproto(
        so_libflimage, "flimage_enable_tiff",
        None, [],
        """void flimage_enable_tiff()
        """)
def flimage_enable_tiff():
    """ flimage_enable_tiff()
    """

    _flimage_enable_tiff()


_flimage_enable_xbm = cfuncproto(
        so_libflimage, "flimage_enable_xbm",
        None, [],
        """void flimage_enable_xbm()
        """)
def flimage_enable_xbm():
    """ flimage_enable_xbm()
    """

    _flimage_enable_xbm()


_flimage_enable_xpm = cfuncproto(
        so_libflimage, "flimage_enable_xpm",
        None, [],
        """void flimage_enable_xpm()
        """)
def flimage_enable_xpm():
    """ flimage_enable_xpm()
    """

    _flimage_enable_xpm()


_flimage_enable_xwd = cfuncproto(
        so_libflimage, "flimage_enable_xwd",
        None, [],
        """void flimage_enable_xwd()
        """)
def flimage_enable_xwd():
    """ flimage_enable_xwd()
    """

    _flimage_enable_xwd()


_flimage_free_ci = cfuncproto(
        so_libflimage, "flimage_free_ci",
        None, [cty.POINTER(FL_IMAGE)],
        """void flimage_free_ci(FL_IMAGE * p1)
        """)
def flimage_free_ci(pImage):
    """ flimage_free_ci(pImage)
    """

    _flimage_free_ci(pImage)


_flimage_free_gray = cfuncproto(
        so_libflimage, "flimage_free_gray",
        None, [cty.POINTER(FL_IMAGE)],
        """void flimage_free_gray(FL_IMAGE * p1)
        """)
def flimage_free_gray(pImage):
    """ flimage_free_gray(pImage)
    """

    _flimage_free_gray(pImage)


_flimage_free_linearlut = cfuncproto(
        so_libflimage, "flimage_free_linearlut",
        None, [cty.POINTER(FL_IMAGE)],
        """void flimage_free_linearlut(FL_IMAGE * p1)
        """)
def flimage_free_linearlut(pImage):
    """ flimage_free_linearlut(pImage)
    """

    _flimage_free_linearlut(pImage)


_flimage_free_rgb = cfuncproto(
        so_libflimage, "flimage_free_rgb",
        None, [cty.POINTER(FL_IMAGE)],
        """void flimage_free_rgb(FL_IMAGE * p1)
        """)
def flimage_free_rgb(pImage):
    """ flimage_free_rgb(pImage)
    """

    _flimage_free_rgb(pImage)


_flimage_freemem = cfuncproto(
        so_libflimage, "flimage_freemem",
        None, [cty.POINTER(FL_IMAGE)],
        """void flimage_freemem(FL_IMAGE * p1)
        """)
def flimage_freemem(pImage):
    """ flimage_freemem(pImage)
    """

    _flimage_freemem(pImage)


_flimage_get_closest_color_from_map = cfuncproto(
        so_libflimage, "flimage_get_closest_color_from_map",
        cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_uint],
        """int flimage_get_closest_color_from_map(FL_IMAGE * p1,
           unsigned int p2)
        """)
def flimage_get_closest_color_from_map(pImage, p2):
    """ flimage_get_closest_color_from_map(pImage, p2) -> num.
    """

    retval = _flimage_get_closest_color_from_map(pImage, p2)
    return retval


_flimage_get_linearlut = cfuncproto(
        so_libflimage, "flimage_get_linearlut",
        cty.c_int, [cty.POINTER(FL_IMAGE)],
        """int flimage_get_linearlut(FL_IMAGE * p1)
        """)
def flimage_get_linearlut(pImage):
    """ flimage_get_linearlut(pImage) -> num.
    """

    retval = _flimage_get_linearlut(pImage)
    return retval


_flimage_invalidate_pixels = cfuncproto(
        so_libflimage, "flimage_invalidate_pixels",
        None, [cty.POINTER(FL_IMAGE)],
        """void flimage_invalidate_pixels(FL_IMAGE * p1)
        """)
def flimage_invalidate_pixels(pImage):
    """ flimage_invalidate_pixels(pImage)
    """

    _flimage_invalidate_pixels(pImage)


_flimage_open = cfuncproto(
        so_libflimage, "flimage_open",
        cty.POINTER(FL_IMAGE), [STRING],
        """FL_IMAGE * flimage_open(const char * p1)
        """)
def flimage_open(p1):
    """ flimage_open(p1) -> image
    """

    retval = _flimage_open(p1)
    return retval


_flimage_read_annotation = cfuncproto(
        so_libflimage, "flimage_read_annotation",
        cty.c_int, [cty.POINTER(FL_IMAGE)],
        """int flimage_read_annotation(FL_IMAGE * p1)
        """)
def flimage_read_annotation(pImage):
    """ flimage_read_annotation(pImage) -> num.
    """

    retval = _flimage_read_annotation(pImage)
    return retval


_flimage_replace_image = cfuncproto(
        so_libflimage, "flimage_replace_image",
        None, [cty.POINTER(FL_IMAGE), cty.c_int, cty.c_int, cty.c_void_p,
        cty.c_void_p, cty.c_void_p],
        """void flimage_replace_image(FL_IMAGE * p1, int p2, int p3,
           void * p4, void * p5, void * p6)
        """)
def flimage_replace_image(pImage, p2, p3, p4, p5, p6):
    """ flimage_replace_image(pImage, p2, p3, p4, p5, p6)
    """

    _flimage_replace_image(pImage, p2, p3, p4, p5, p6)


_flimage_swapbuffer = cfuncproto(
        so_libflimage, "flimage_swapbuffer",
        cty.c_int, [cty.POINTER(FL_IMAGE)],
        """int flimage_swapbuffer(FL_IMAGE * p1)
        """)
def flimage_swapbuffer(pImage):
    """ flimage_swapbuffer(pImage) -> num.
    """

    retval = _flimage_swapbuffer(pImage)
    return retval


# /usr/include/X11/Xlib.h 345
class XWindowAttributes(cty.Structure):
    pass


_flimage_to_ximage = cfuncproto(
        so_libflimage, "flimage_to_ximage",
        cty.c_int, [cty.POINTER(FL_IMAGE), FL_WINDOW,
        cty.POINTER(XWindowAttributes)],
        """int flimage_to_ximage(FL_IMAGE * p1, FL_WINDOW p2,
           XWindowAttributes * p3)
        """)
def flimage_to_ximage(pImage, window, p3):
    """ flimage_to_ximage(pImage, window, p3) -> num.
    """

    retval = _flimage_to_ximage(pImage, window, p3)
    return retval


_flimage_write_annotation = cfuncproto(
        so_libflimage, "flimage_write_annotation",
        cty.c_int, [cty.POINTER(FL_IMAGE)],
        """int flimage_write_annotation(FL_IMAGE * p1)
        """)
def flimage_write_annotation(pImage):
    """ flimage_write_annotation(pImage) -> num.
    """

    retval = _flimage_write_annotation(pImage)
    return retval


_flps_apply_gamma = cfuncproto(
        so_libflimage, "flps_apply_gamma",
        None, [cty.c_float],
        """void flps_apply_gamma(float p1)
        """)
def flps_apply_gamma(p1):
    """ flps_apply_gamma(p1)
    """

    _flps_apply_gamma(p1)


_flps_arc = cfuncproto(
        so_libflimage, "flps_arc",
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
        cty.c_int, cty.c_long],
        """void flps_arc(int p1, int p2, int p3, int p4, int p5, int p6,
           long int p7)
        """)
def flps_arc(p1, p2, p3, p4, p5, p6, p7):
    """ flps_arc(p1, p2, p3, p4, p5, p6, p7)
    """

    _flps_arc(p1, p2, p3, p4, p5, p6, p7)


_flps_circ = cfuncproto(
        so_libflimage, "flps_circ",
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_long],
        """void flps_circ(int p1, int p2, int p3, int p4, long int p5)
        """)
def flps_circ(p1, p2, p3, p4, p5):
    """ flps_circ(p1, p2, p3, p4, p5)
    """

    _flps_circ(p1, p2, p3, p4, p5)


_flps_color = cfuncproto(
        so_libflimage, "flps_color",
        None, [cty.c_long],
        """void flps_color(long int p1)
        """)
def flps_color(p1):
    """ flps_color(p1)
    """

    _flps_color(p1)


_flps_draw_box = cfuncproto(
        so_libflimage, "flps_draw_box",
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
        cty.c_long, cty.c_int],
        """void flps_draw_box(int p1, int p2, int p3, int p4, int p5,
           long int p6, int p7)
        """)
def flps_draw_box(p1, p2, p3, p4, p5, p6, p7):
    """ flps_draw_box(p1, p2, p3, p4, p5, p6, p7)
    """

    _flps_draw_box(p1, p2, p3, p4, p5, p6, p7)


_flps_draw_checkbox = cfuncproto(
        so_libflimage, "flps_draw_checkbox",
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
        cty.c_long, cty.c_int],
        """void flps_draw_checkbox(int p1, int p2, int p3, int p4, int p5,
           long int p6, int p7)
        """)
def flps_draw_checkbox(p1, p2, p3, p4, p5, p6, p7):
    """ flps_draw_checkbox(p1, p2, p3, p4, p5, p6, p7)
    """

    _flps_draw_checkbox(p1, p2, p3, p4, p5, p6, p7)


_flps_draw_frame = cfuncproto(
        so_libflimage, "flps_draw_frame",
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
        cty.c_long, cty.c_int],
        """void flps_draw_frame(int p1, int p2, int p3, int p4, int p5,
           long int p6, int p7)
        """)
def flps_draw_frame(p1, p2, p3, p4, p5, p6, p7):
    """ flps_draw_frame(p1, p2, p3, p4, p5, p6, p7)
    """

    _flps_draw_frame(p1, p2, p3, p4, p5, p6, p7)


_flps_draw_symbol = cfuncproto(
        so_libflimage, "flps_draw_symbol",
        cty.c_int, [STRING, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
        cty.c_long],
        """int flps_draw_symbol(const char * p1, int p2, int p3, int p4,
           int p5, long int p6)
        """)
def flps_draw_symbol(p1, p2, p3, p4, p5, p6):
    """ flps_draw_symbol(p1, p2, p3, p4, p5, p6) -> num.
    """

    retval = _flps_draw_symbol(p1, p2, p3, p4, p5, p6)
    return retval


_flps_draw_tbox = cfuncproto(
        so_libflimage, "flps_draw_tbox",
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
        cty.c_long, cty.c_int],
        """void flps_draw_tbox(int p1, int p2, int p3, int p4, int p5,
           long int p6, int p7)
        """)
def flps_draw_tbox(p1, p2, p3, p4, p5, p6, p7):
    """ flps_draw_tbox(p1, p2, p3, p4, p5, p6, p7)
    """

    _flps_draw_tbox(p1, p2, p3, p4, p5, p6, p7)


_flps_draw_text = cfuncproto(
        so_libflimage, "flps_draw_text",
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
        cty.c_long, cty.c_int, cty.c_int, STRING],
        """void flps_draw_text(int p1, int p2, int p3, int p4, int p5,
           long int p6, int p7, int p8, const char * p9)
        """)
def flps_draw_text(p1, p2, p3, p4, p5, p6, p7, p8, p9):
    """ flps_draw_text(p1, p2, p3, p4, p5, p6, p7, p8, p9)
    """

    _flps_draw_text(p1, p2, p3, p4, p5, p6, p7, p8, p9)


_flps_draw_text_beside = cfuncproto(
        so_libflimage, "flps_draw_text_beside",
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
        cty.c_long, cty.c_int, cty.c_int, STRING],
        """void flps_draw_text_beside(int p1, int p2, int p3, int p4, int p5,
           long int p6, int p7, int p8, const char * p9)
        """)
def flps_draw_text_beside(p1, p2, p3, p4, p5, p6, p7, p8, p9):
    """ flps_draw_text_beside(p1, p2, p3, p4, p5, p6, p7, p8, p9)
    """

    _flps_draw_text_beside(p1, p2, p3, p4, p5, p6, p7, p8, p9)


_flps_emit_header = cfuncproto(
        so_libflimage, "flps_emit_header",
        None, [STRING, cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int],
        """void flps_emit_header(const char * p1, int p2, int p3, int p4,
           int p5, int p6)
        """)
def flps_emit_header(p1, p2, p3, p4, p5, p6):
    """ flps_emit_header(p1, p2, p3, p4, p5, p6)
    """

    _flps_emit_header(p1, p2, p3, p4, p5, p6)


_flps_emit_prolog = cfuncproto(
        so_libflimage, "flps_emit_prolog",
        None, [],
        """void flps_emit_prolog()
        """)
def flps_emit_prolog():
    """ flps_emit_prolog()
    """

    _flps_emit_prolog()


_flps_get_gray255 = cfuncproto(
        so_libflimage, "flps_get_gray255",
        cty.c_int, [cty.c_long],
        """int flps_get_gray255(long int p1)
        """)
def flps_get_gray255(p1):
    """ flps_get_gray255(p1) -> num.
    """

    retval = _flps_get_gray255(p1)
    return retval


_flps_get_linestyle = cfuncproto(
        so_libflimage, "flps_get_linestyle",
        cty.c_int, [],
        """int flps_get_linestyle()
        """)
def flps_get_linestyle():
    """ flps_get_linestyle() -> num.
    """

    retval = _flps_get_linestyle()
    return retval


_flps_get_linewidth = cfuncproto(
        so_libflimage, "flps_get_linewidth",
        cty.c_int, [],
        """int flps_get_linewidth()
        """)
def flps_get_linewidth():
    """ flps_get_linewidth() -> width num.
    """

    retval = _flps_get_linewidth()
    return retval


_flps_get_namedcolor = cfuncproto(
        so_libflimage, "flps_get_namedcolor",
        cty.c_int, [STRING],
        """int flps_get_namedcolor(const char * p1)
        """)
def flps_get_namedcolor(p1):
    """ flps_get_namedcolor(p1) -> num.
    """

    retval = _flps_get_namedcolor(p1)
    return retval


_flps_invalidate_color_cache = cfuncproto(
        so_libflimage, "flps_invalidate_color_cache",
        None, [],
        """void flps_invalidate_color_cache()
        """)
def flps_invalidate_color_cache():
    """ flps_invalidate_color_cache()
    """

    _flps_invalidate_color_cache()


_flps_invalidate_font_cache = cfuncproto(
        so_libflimage, "flps_invalidate_font_cache",
        None, [],
        """void flps_invalidate_font_cache()
        """)
def flps_invalidate_font_cache():
    """ flps_invalidate_font_cache()
    """

    _flps_invalidate_font_cache()


_flps_invalidate_linewidth_cache = cfuncproto(
        so_libflimage, "flps_invalidate_linewidth_cache",
        None, [],
        """void flps_invalidate_linewidth_cache()
        """)
def flps_invalidate_linewidth_cache():
    """ flps_invalidate_linewidth_cache()
    """

    _flps_invalidate_linewidth_cache()


_flps_invalidate_symbol_cache = cfuncproto(
        so_libflimage, "flps_invalidate_symbol_cache",
        None, [],
        """void flps_invalidate_symbol_cache()
        """)
def flps_invalidate_symbol_cache():
    """ flps_invalidate_symbol_cache()
    """

    _flps_invalidate_symbol_cache()


_flps_line = cfuncproto(
        so_libflimage, "flps_line",
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_long],
        """void flps_line(int p1, int p2, int p3, int p4, long int p5)
        """)
def flps_line(p1, p2, p3, p4, p5):
    """ flps_line(p1, p2, p3, p4, p5)
    """

    _flps_line(p1, p2, p3, p4, p5)


_flps_lines = cfuncproto(
        so_libflimage, "flps_lines",
        None, [cty.POINTER(FL_POINT), cty.c_int, cty.c_long],
        """void flps_lines(FL_POINT * p1, int p2, long int p3)
        """)
def flps_lines(pPoint, p2, p3):
    """ flps_lines(pPoint, p2, p3)
    """

    _flps_lines(pPoint, p2, p3)


_flps_linestyle = cfuncproto(
        so_libflimage, "flps_linestyle",
        None, [cty.c_int],
        """void flps_linestyle(int p1)
        """)
def flps_linestyle(p1):
    """ flps_linestyle(p1)
    """

    _flps_linestyle(p1)


_flps_linewidth = cfuncproto(
        so_libflimage, "flps_linewidth",
        None, [cty.c_int],
        """void flps_linewidth(int p1)
        """)
def flps_linewidth(p1):
    """ flps_linewidth(p1)
    """

    _flps_linewidth(p1)


_flps_log = cfuncproto(
        so_libflimage, "flps_log",
        None, [STRING],
        """void flps_log(const char * p1)
        """)
def flps_log(p1):
    """ flps_log(p1)
    """

    _flps_log(p1)


_flps_output = cfuncproto(
        so_libflimage, "flps_output",
        None, [STRING],
        """void flps_output(const char * p1)
        """)
def flps_output(p1):
    """ flps_output(p1)
    """

    _flps_output(p1)


_flps_oval = cfuncproto(
        so_libflimage, "flps_oval",
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
        cty.c_long],
        """void flps_oval(int p1, int p2, int p3, int p4, int p5, long int p6)
        """)
def flps_oval(p1, p2, p3, p4, p5, p6):
    """ flps_oval(p1, p2, p3, p4, p5, p6)
    """

    _flps_oval(p1, p2, p3, p4, p5, p6)


_flps_pieslice = cfuncproto(
        so_libflimage, "flps_pieslice",
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
        cty.c_int, cty.c_int, cty.c_long],
        """void flps_pieslice(int p1, int p2, int p3, int p4, int p5, int p6,
           int p7, long int p8)
        """)
def flps_pieslice(p1, p2, p3, p4, p5, p6, p7, p8):
    """ flps_pieslice(p1, p2, p3, p4, p5, p6, p7, p8)
    """

    _flps_pieslice(p1, p2, p3, p4, p5, p6, p7, p8)


_flps_poly = cfuncproto(
        so_libflimage, "flps_poly",
        None, [cty.c_int, cty.POINTER(FL_POINT), cty.c_int, cty.c_long],
        """void flps_poly(int p1, FL_POINT * p2, int p3, long int p4)
        """)
def flps_poly(p1, pPoint, p3, p4):
    """ flps_poly(p1, pPoint, p3, p4)
    """

    _flps_poly(p1, pPoint, p3, p4)


_flps_rectangle = cfuncproto(
        so_libflimage, "flps_rectangle",
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
        cty.c_long],
        """void flps_rectangle(int p1, int p2, int p3, int p4, int p5,
           long int p6)
        """)
def flps_rectangle(p1, p2, p3, p4, p5, p6):
    """ flps_rectangle(p1, p2, p3, p4, p5, p6)
    """

    _flps_rectangle(p1, p2, p3, p4, p5, p6)


_flps_reset_cache = cfuncproto(
        so_libflimage, "flps_reset_cache",
        None, [],
        """void flps_reset_cache()
        """)
def flps_reset_cache():
    """ flps_reset_cache()
    """

    _flps_reset_cache()


_flps_reset_linewidth = cfuncproto(
        so_libflimage, "flps_reset_linewidth",
        None, [],
        """void flps_reset_linewidth()
        """)
def flps_reset_linewidth():
    """ flps_reset_linewidth()
    """

    _flps_reset_linewidth()


_flps_restore_flps = cfuncproto(
        so_libflimage, "flps_restore_flps",
        None, [],
        """void flps_restore_flps()
        """)
def flps_restore_flps():
    """ flps_restore_flps()
    """

    _flps_restore_flps()


_flps_rgbcolor = cfuncproto(
        so_libflimage, "flps_rgbcolor",
        None, [cty.c_int, cty.c_int, cty.c_int],
        """void flps_rgbcolor(int p1, int p2, int p3)
        """)
def flps_rgbcolor(p1, p2, p3):
    """ flps_rgbcolor(p1, p2, p3)
    """

    _flps_rgbcolor(p1, p2, p3)


_flps_roundrectangle = cfuncproto(
        so_libflimage, "flps_roundrectangle",
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
        cty.c_long],
        """void flps_roundrectangle(int p1, int p2, int p3, int p4, int p5,
           long int p6)
        """)
def flps_roundrectangle(p1, p2, p3, p4, p5, p6):
    """ flps_roundrectangle(p1, p2, p3, p4, p5, p6)
    """

    _flps_roundrectangle(p1, p2, p3, p4, p5, p6)


_flps_set_clipping = cfuncproto(
        so_libflimage, "flps_set_clipping",
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int],
        """void flps_set_clipping(int p1, int p2, int p3, int p4)
        """)
def flps_set_clipping(p1, p2, p3, p4):
    """ flps_set_clipping(p1, p2, p3, p4)
    """

    _flps_set_clipping(p1, p2, p3, p4)


_flps_set_font = cfuncproto(
        so_libflimage, "flps_set_font",
        None, [cty.c_int, cty.c_int],
        """void flps_set_font(int p1, int p2)
        """)
def flps_set_font(p1, p2):
    """ flps_set_font(p1, p2)
    """

    _flps_set_font(p1, p2)


_flps_unset_clipping = cfuncproto(
        so_libflimage, "flps_unset_clipping",
        None, [],
        """void flps_unset_clipping()
        """)
def flps_unset_clipping():
    """ flps_unset_clipping()
    """

    _flps_unset_clipping()


# /usr/include/X11/Xlib.h 176
class XExtCodes(cty.Structure):
    pass
XExtCodes._fields_ = [
    ('extension', cty.c_int),
    ('major_opcode', cty.c_int),
    ('first_event', cty.c_int),
    ('first_error', cty.c_int),
]

# /usr/include/X11/Xlib.h 186
class XPixmapFormatValues(cty.Structure):
    pass
XPixmapFormatValues._fields_ = [
    ('depth', cty.c_int),
    ('bits_per_pixel', cty.c_int),
    ('scanline_pad', cty.c_int),
]

# /usr/include/X11/Xlib.h 218
class XGCValues(cty.Structure):
    pass
XGCValues._fields_ = [
    ('function', cty.c_int),
    ('plane_mask', cty.c_ulong),
    ('foreground', cty.c_ulong),
    ('background', cty.c_ulong),
    ('line_width', cty.c_int),
    ('line_style', cty.c_int),
    ('cap_style', cty.c_int),
    ('join_style', cty.c_int),
    ('fill_style', cty.c_int),
    ('fill_rule', cty.c_int),
    ('arc_mode', cty.c_int),
    ('tile', Pixmap),
    ('stipple', Pixmap),
    ('ts_x_origin', cty.c_int),
    ('ts_y_origin', cty.c_int),
    ('font', Font),
    ('subwindow_mode', cty.c_int),
    ('graphics_exposures', cty.c_int),
    ('clip_x_origin', cty.c_int),
    ('clip_y_origin', cty.c_int),
    ('clip_mask', Pixmap),
    ('dash_offset', cty.c_int),
    ('dashes', cty.c_char),
]


# /usr/include/X11/Xlib.h 258
class Depth(cty.Structure):
    pass
Depth._fields_ = [
    ('depth', cty.c_int),
    ('nvisuals', cty.c_int),
    ('visuals', cty.POINTER(Visual)),
]

# /usr/include/X11/Xlib.h 286
class Screen(cty.Structure):
    pass
Screen._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('display', cty.POINTER(_XDisplay)),
    ('root', Window),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('mwidth', cty.c_int),
    ('mheight', cty.c_int),
    ('ndepths', cty.c_int),
    ('depths', cty.POINTER(Depth)),
    ('root_depth', cty.c_int),
    ('root_visual', cty.POINTER(Visual)),
    ('default_gc', GC),
    ('cmap', Colormap),
    ('white_pixel', cty.c_ulong),
    ('black_pixel', cty.c_ulong),
    ('max_maps', cty.c_int),
    ('min_maps', cty.c_int),
    ('backing_store', cty.c_int),
    ('save_unders', cty.c_int),
    ('root_input_mask', cty.c_long),
]

# /usr/include/X11/Xlib.h 296
class ScreenFormat(cty.Structure):
    pass
ScreenFormat._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('depth', cty.c_int),
    ('bits_per_pixel', cty.c_int),
    ('scanline_pad', cty.c_int),
]

XWindowAttributes._fields_ = [
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('depth', cty.c_int),
    ('visual', cty.POINTER(Visual)),
    ('root', Window),
    ('c_class', cty.c_int),
    ('bit_gravity', cty.c_int),
    ('win_gravity', cty.c_int),
    ('backing_store', cty.c_int),
    ('backing_planes', cty.c_ulong),
    ('backing_pixel', cty.c_ulong),
    ('save_under', cty.c_int),
    ('colormap', Colormap),
    ('map_installed', cty.c_int),
    ('map_state', cty.c_int),
    ('all_event_masks', cty.c_long),
    ('your_event_mask', cty.c_long),
    ('do_not_propagate_mask', cty.c_long),
    ('override_redirect', cty.c_int),
    ('screen', cty.POINTER(Screen)),
]

# /usr/include/X11/Xlib.h 356
class XHostAddress(cty.Structure):
    pass
XHostAddress._fields_ = [
    ('family', cty.c_int),
    ('length', cty.c_int),
    ('address', STRING),
]

# /usr/include/X11/Xlib.h 366
class XServerInterpretedAddress(cty.Structure):
    pass
XServerInterpretedAddress._fields_ = [
    ('typelength', cty.c_int),
    ('valuelength', cty.c_int),
    ('type', STRING),
    ('value', STRING),
]

# /usr/include/X11/Xlib.h 371
class _XImage(cty.Structure):
    pass

# /usr/include/X11/Xlib.h 387
class funcs(cty.Structure):
    pass
funcs._fields_ = [
    ('create_image', cty.CFUNCTYPE(cty.POINTER(_XImage),
    cty.POINTER(_XDisplay), cty.POINTER(Visual), cty.c_uint, cty.c_int,
    cty.c_int, STRING, cty.c_uint, cty.c_uint, cty.c_int, cty.c_int)),
    ('destroy_image', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XImage))),
    ('get_pixel', cty.CFUNCTYPE(cty.c_ulong, cty.POINTER(_XImage), cty.c_int,
     cty.c_int)),
    ('put_pixel', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XImage), cty.c_int,
    cty.c_int, cty.c_ulong)),
    ('sub_image', cty.CFUNCTYPE(cty.POINTER(_XImage), cty.POINTER(_XImage),
    cty.c_int, cty.c_int, cty.c_uint, cty.c_uint)),
    ('add_pixel', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XImage), cty.c_long)),
]

_XImage._fields_ = [
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('xoffset', cty.c_int),
    ('format', cty.c_int),
    ('data', STRING),
    ('byte_order', cty.c_int),
    ('bitmap_unit', cty.c_int),
    ('bitmap_bit_order', cty.c_int),
    ('bitmap_pad', cty.c_int),
    ('depth', cty.c_int),
    ('bytes_per_line', cty.c_int),
    ('bits_per_pixel', cty.c_int),
    ('red_mask', cty.c_ulong),
    ('green_mask', cty.c_ulong),
    ('blue_mask', cty.c_ulong),
    ('obdata', XPointer),
    ('f', funcs),
]
XImage = _XImage

# /usr/include/X11/Xlib.h 416
class XWindowChanges(cty.Structure):
    pass
XWindowChanges._fields_ = [
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('sibling', Window),
    ('stack_mode', cty.c_int),
]

# /usr/include/X11/Xlib.h 426
class XColor(cty.Structure):
    pass
XColor._fields_ = [
    ('pixel', cty.c_ulong),
    ('red',  cty.c_ushort),
    ('green',  cty.c_ushort),
    ('blue',  cty.c_ushort),
    ('flags', cty.c_char),
    ('pad', cty.c_char),
]

# /usr/include/X11/Xlib.h 435
class XSegment(cty.Structure):
    pass
XSegment._fields_ = [
    ('x1', cty.c_short),
    ('y1', cty.c_short),
    ('x2', cty.c_short),
    ('y2', cty.c_short),
]

XPoint._fields_ = [
    ('x', cty.c_short),
    ('y', cty.c_short),
]

# /usr/include/X11/Xlib.h 444
XRectangle._fields_ = [
    ('x', cty.c_short),
    ('y', cty.c_short),
    ('width',  cty.c_ushort),
    ('height',  cty.c_ushort),
]

# /usr/include/X11/Xlib.h 450
class XArc(cty.Structure):
    pass
XArc._fields_ = [
    # /usr/include/X11/Xlib.h 450
    ('x', cty.c_short),
    ('y', cty.c_short),
    ('width',  cty.c_ushort),
    ('height',  cty.c_ushort),
    ('angle1', cty.c_short),
    ('angle2', cty.c_short),
]

# /usr/include/X11/Xlib.h 464
class XKeyboardControl(cty.Structure):
    pass
XKeyboardControl._fields_ = [
    ('key_click_percent', cty.c_int),
    ('bell_percent', cty.c_int),
    ('bell_pitch', cty.c_int),
    ('bell_duration', cty.c_int),
    ('led', cty.c_int),
    ('led_mode', cty.c_int),
    ('key', cty.c_int),
    ('auto_repeat_mode', cty.c_int),
]

# /usr/include/X11/Xlib.h 475
class XKeyboardState(cty.Structure):
    pass
XKeyboardState._fields_ = [
    ('key_click_percent', cty.c_int),
    ('bell_percent', cty.c_int),
    ('bell_pitch', cty.c_uint),
    ('bell_duration', cty.c_uint),
    ('led_mask', cty.c_ulong),
    ('global_auto_repeat', cty.c_int),
    ('auto_repeats', cty.c_char * 32),
]

# /usr/include/X11/Xlib.h 482
class XTimeCoord(cty.Structure):
    pass
XTimeCoord._fields_ = [
    ('time', Time),
    ('x', cty.c_short),
    ('y', cty.c_short),
]

# /usr/include/X11/Xlib.h 489
class XModifierKeymap(cty.Structure):
    pass
XModifierKeymap._fields_ = [
    ('max_keypermod', cty.c_int),
    ('modifiermap', cty.POINTER(KeyCode)),
]

Display = _XDisplay

# /usr/include/X11/Xlib.h 501
class _XPrivate(cty.Structure):
    pass
_XPrivate._fields_ = []

# /usr/include/X11/Xlib.h 502
class _XrmHashBucketRec(cty.Structure):
    pass
_XrmHashBucketRec._fields_ = []

# /usr/include/X11/Xlib.h 582
class XKeyEvent(cty.Structure):
    pass
XKeyEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('state', cty.c_uint),
    ('keycode', cty.c_uint),
    ('same_screen', cty.c_int),
]
XKeyPressedEvent = XKeyEvent
XKeyReleasedEvent = XKeyEvent

# /usr/include/X11/Xlib.h 600
class XButtonEvent(cty.Structure):
    pass
XButtonEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('state', cty.c_uint),
    ('button', cty.c_uint),
    ('same_screen', cty.c_int),
]
XButtonPressedEvent = XButtonEvent
XButtonReleasedEvent = XButtonEvent

# /usr/include/X11/Xlib.h 618
class XMotionEvent(cty.Structure):
    pass
XMotionEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('state', cty.c_uint),
    ('is_hint', cty.c_char),
    ('same_screen', cty.c_int),
]
XPointerMovedEvent = XMotionEvent

# /usr/include/X11/Xlib.h 641
class XCrossingEvent(cty.Structure):
    pass
XCrossingEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('mode', cty.c_int),
    ('detail', cty.c_int),
    ('same_screen', cty.c_int),
    ('focus', cty.c_int),
    ('state', cty.c_uint),
]
XEnterWindowEvent = XCrossingEvent
XLeaveWindowEvent = XCrossingEvent

# /usr/include/X11/Xlib.h 659
class XFocusChangeEvent(cty.Structure):
    pass
XFocusChangeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('mode', cty.c_int),
    ('detail', cty.c_int),
]
XFocusInEvent = XFocusChangeEvent
XFocusOutEvent = XFocusChangeEvent

# /usr/include/X11/Xlib.h 671
class XKeymapEvent(cty.Structure):
    pass
XKeymapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('key_vector', cty.c_char * 32),
]

# /usr/include/X11/Xlib.h 682
class XExposeEvent(cty.Structure):
    pass
XExposeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('count', cty.c_int),
]

# /usr/include/X11/Xlib.h 695
class XGraphicsExposeEvent(cty.Structure):
    pass
XGraphicsExposeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('drawable', Drawable),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('count', cty.c_int),
    ('major_code', cty.c_int),
    ('minor_code', cty.c_int),
]

# /usr/include/X11/Xlib.h 705
class XNoExposeEvent(cty.Structure):
    pass
XNoExposeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('drawable', Drawable),
    ('major_code', cty.c_int),
    ('minor_code', cty.c_int),
]

# /usr/include/X11/Xlib.h 714
class XVisibilityEvent(cty.Structure):
    pass
XVisibilityEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('state', cty.c_int),
]

# /usr/include/X11/Xlib.h 727
class XCreateWindowEvent(cty.Structure):
    pass
XCreateWindowEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('override_redirect', cty.c_int),
]

# /usr/include/X11/Xlib.h 736
class XDestroyWindowEvent(cty.Structure):
    pass
XDestroyWindowEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
]

# /usr/include/X11/Xlib.h 746
class XUnmapEvent(cty.Structure):
    pass
XUnmapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('from_configure', cty.c_int),
]

# /usr/include/X11/Xlib.h 756
class XMapEvent(cty.Structure):
    pass
XMapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('override_redirect', cty.c_int),
]

# /usr/include/X11/Xlib.h 765
class XMapRequestEvent(cty.Structure):
    pass
XMapRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
]

# /usr/include/X11/Xlib.h 777
class XReparentEvent(cty.Structure):
    pass
XReparentEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('parent', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('override_redirect', cty.c_int),
]

# /usr/include/X11/Xlib.h 791
class XConfigureEvent(cty.Structure):
    pass
XConfigureEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('above', Window),
    ('override_redirect', cty.c_int),
]

# /usr/include/X11/Xlib.h 801
class XGravityEvent(cty.Structure):
    pass
XGravityEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
]

# /usr/include/X11/Xlib.h 810
class XResizeRequestEvent(cty.Structure):
    pass
XResizeRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('width', cty.c_int),
    ('height', cty.c_int),
]

# /usr/include/X11/Xlib.h 825
class XConfigureRequestEvent(cty.Structure):
    pass
XConfigureRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('above', Window),
    ('detail', cty.c_int),
    ('value_mask', cty.c_ulong),
]

# /usr/include/X11/Xlib.h 835
class XCirculateEvent(cty.Structure):
    pass
XCirculateEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('place', cty.c_int),
]

# /usr/include/X11/Xlib.h 845
class XCirculateRequestEvent(cty.Structure):
    pass
XCirculateRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
    ('place', cty.c_int),
]

# /usr/include/X11/Xlib.h 856
class XPropertyEvent(cty.Structure):
    pass
XPropertyEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('atom', Atom),
    ('time', Time),
    ('state', cty.c_int),
]

# /usr/include/X11/Xlib.h 866
class XSelectionClearEvent(cty.Structure):
    pass
XSelectionClearEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('selection', Atom),
    ('time', Time),
]

# /usr/include/X11/Xlib.h 879
class XSelectionRequestEvent(cty.Structure):
    pass
XSelectionRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('owner', Window),
    ('requestor', Window),
    ('selection', Atom),
    ('target', Atom),
    ('property', Atom),
    ('time', Time),
]
# /usr/include/X11/Xlib.h 891
class XSelectionEvent(cty.Structure):
    pass
XSelectionEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('requestor', Window),
    ('selection', Atom),
    ('target', Atom),
    ('property', Atom),
    ('time', Time),
]
# /usr/include/X11/Xlib.h 906
class XColormapEvent(cty.Structure):
    pass
XColormapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('colormap', Colormap),
    ('c_new', cty.c_int),
    ('state', cty.c_int),
]

# /usr/include/X11/Xlib.h 916
class N19XClientMessageEvent4DOT_71E(cty.Union):
    pass
N19XClientMessageEvent4DOT_71E._fields_ = [
    ('b', cty.c_char * 20),
    ('s', cty.c_short * 10),
    ('l', cty.c_long * 5),
]

# /usr/include/X11/Xlib.h 921
class XClientMessageEvent(cty.Structure):
    pass
XClientMessageEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('message_type', Atom),
    ('format', cty.c_int),
    ('data', N19XClientMessageEvent4DOT_71E),
]

# /usr/include/X11/Xlib.h 933
class XMappingEvent(cty.Structure):
    pass
XMappingEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('request', cty.c_int),
    ('first_keycode', cty.c_int),
    ('count', cty.c_int),
]

# /usr/include/X11/Xlib.h 943
class XErrorEvent(cty.Structure):
    pass
XErrorEvent._fields_ = [
    ('type', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('resourceid', XID),
    ('serial', cty.c_ulong),
    ('error_code', cty.c_ubyte),
    ('request_code', cty.c_ubyte),
    ('minor_code', cty.c_ubyte),
]

# /usr/include/X11/Xlib.h 951
class XAnyEvent(cty.Structure):
    pass
XAnyEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
]

# /usr/include/X11/Xlib.h 967
class XGenericEvent(cty.Structure):
    pass
XGenericEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('extension', cty.c_int),
    ('evtype', cty.c_int),
]

# /usr/include/X11/Xlib.h 978
class XGenericEventCookie(cty.Structure):
    pass
XGenericEventCookie._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('extension', cty.c_int),
    ('evtype', cty.c_int),
    ('cookie', cty.c_uint),
    ('data', cty.c_void_p),
]

# /usr/include/X11/Xlib.h 984
class _XEvent(cty.Union):
    pass
_XEvent._fields_ = [
    ('type', cty.c_int),
    ('xany', XAnyEvent),
    ('xkey', XKeyEvent),
    ('xbutton', XButtonEvent),
    ('xmotion', XMotionEvent),
    ('xcrossing', XCrossingEvent),
    ('xfocus', XFocusChangeEvent),
    ('xexpose', XExposeEvent),
    ('xgraphicsexpose', XGraphicsExposeEvent),
    ('xnoexpose', XNoExposeEvent),
    ('xvisibility', XVisibilityEvent),
    ('xcreatewindow', XCreateWindowEvent),
    ('xdestroywindow', XDestroyWindowEvent),
    ('xunmap', XUnmapEvent),
    ('xmap', XMapEvent),
    ('xmaprequest', XMapRequestEvent),
    ('xreparent', XReparentEvent),
    ('xconfigure', XConfigureEvent),
    ('xgravity', XGravityEvent),
    ('xresizerequest', XResizeRequestEvent),
    ('xconfigurerequest', XConfigureRequestEvent),
    ('xcirculate', XCirculateEvent),
    ('xcirculaterequest', XCirculateRequestEvent),
    ('xproperty', XPropertyEvent),
    ('xselectionclear', XSelectionClearEvent),
    ('xselectionrequest', XSelectionRequestEvent),
    ('xselection', XSelectionEvent),
    ('xcolormap', XColormapEvent),
    ('xclient', XClientMessageEvent),
    ('xmapping', XMappingEvent),
    ('xerror', XErrorEvent),
    ('xkeymap', XKeymapEvent),
    ('xgeneric', XGenericEvent),
    ('xcookie', XGenericEventCookie),
    ('pad', cty.c_long * 24),
]
XEvent = _XEvent

__all__ = [XVisualInfo, XEvent, _XEvent, XrmOptionKind, XPointer, XrmOptionDescRec, \
           Visual, VisualID, XExtData, XFontStruct, XSetForeground, XSetBackground, \
           XCreateBitmapFromData, XFreePixmap, GLXContext, XRaiseWindow, XLowerWindow, \
           XFreePixmap]
# XrmOptionDescList

