#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
        <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.

    *****************************************************************


    @newfield example: Example, Example
"""


__docformat__ = "epytext en"    # to be used with epydoc doc


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata




############################################
# forms.h (filesys.h)
# Convenience functions to read a directory
############################################

# read dir with pattern filtering. All dirs read might be cached.
# must not change dirlist in anyway.

def fl_get_dirlist(directory, pattern, rescan):
    """
        fl_get_dirlist(directory, pattern, rescan) -> pDirList, n

        @attention: API change from XForms - upstream was
           fl_get_dirlist(directory, pattern, n, rescan)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_dirlist = library.cfuncproto(
        library.load_so_libforms(), "fl_get_dirlist",
        cty.POINTER(xfdata.FL_Dirlist), [xfdata.STRING, xfdata.STRING,
        cty.POINTER(cty.c_int), cty.c_int],
        """const char * fl_get_dirlist(const char * dir,
           const char * pattern, int * n, int rescan)""")
    library.check_if_initialized()
    sdirectory = library.convert_to_string(directory)
    spattern = library.convert_to_string(pattern)
    n, pn = library.make_int_and_pointer()
    irescan = library.convert_to_int(rescan)
    library.keep_elem_refs(directory, pattern, n, rescan, sdirectory, spattern,
                   pn, irescan)
    retval = _fl_get_dirlist(sdirectory, spattern, pn, irescan)
    return retval, n.value


def fl_set_dirlist_filter(py_DirFilter):
    """
        fl_set_dirlist_filter(py_DirFilter) -> dirlist_filter func.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    #FL_DIRLIST_FILTER = cty.CFUNCTYPE(cty.c_int, xfdata.STRING, cty.c_int)
    _fl_set_dirlist_filter = library.cfuncproto(
            library.load_so_libforms(), "fl_set_dirlist_filter",
            xfdata.FL_DIRLIST_FILTER, [xfdata.FL_DIRLIST_FILTER],
            """FL_DIRLIST_FILTER fl_set_dirlist_filter( \
               FL_DIRLIST_FILTER filter)
""")
    library.check_if_initialized()
    c_DirFilter = xfdata.FL_DIRLIST_FILTER(py_DirFilter)
    library.keep_cfunc_refs(c_DirFilter, py_DirFilter)
    retval = _fl_set_dirlist_filter(c_DirFilter)
    return retval


def fl_set_dirlist_sort(method):
    """
        fl_set_dirlist_sort(method) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_dirlist_sort = library.cfuncproto(
            library.load_so_libforms(), "fl_set_dirlist_sort",
            cty.c_int, [cty.c_int],
            """int fl_set_dirlist_sort(int method)
""")
    library.check_if_initialized()
    imethod = library.convert_to_int(method)
    library.keep_elem_refs(method, imethod)
    retval = _fl_set_dirlist_sort(imethod)
    return retval


def fl_set_dirlist_filterdir(yes):
    """
        fl_set_dirlist_filterdir(yes) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_dirlist_filterdir = library.cfuncproto(
            library.load_so_libforms(), "fl_set_dirlist_filterdir",
            cty.c_int, [cty.c_int],
            """int fl_set_dirlist_filterdir(int yes)
""")
    library.check_if_initialized()
    iyes = library.convert_to_int(yes)
    library.keep_elem_refs(yes, iyes)
    retval = _fl_set_dirlist_filterdir(iyes)
    return retval


def fl_free_dirlist(pDirList):
    """
        fl_free_dirlist(pDirList)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_free_dirlist = library.cfuncproto(
            library.load_so_libforms(), "fl_free_dirlist",
            None, [cty.POINTER(xfdata.FL_Dirlist)],
            """void fl_free_dirlist(FL_Dirlist * dl)
""")
    library.check_if_initialized()
    library.keep_elem_refs(pDirList)
    _fl_free_dirlist(pDirList)


# Free all directory caches

def fl_free_all_dirlist():
    """
        fl_free_all_dirlist()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_free_all_dirlist = library.cfuncproto(
            library.load_so_libforms(), "fl_free_all_dirlist",
            None, [],
            """void fl_free_all_dirlist()
""")
    library.check_if_initialized()
    _fl_free_all_dirlist()


def fl_is_valid_dir(name):
    """
        fl_is_valid_dir(name) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_is_valid_dir = library.cfuncproto(
            library.load_so_libforms(), "fl_is_valid_dir",
            cty.c_int, [xfdata.STRING],
            """int fl_is_valid_dir(const char * name)
""")
    library.check_if_initialized()
    sname = library.convert_to_string(name)
    library.keep_elem_refs(name, sname)
    retval = _fl_is_valid_dir(sname)
    return retval


def fl_fmtime(timestr):
    """
        fl_fmtime(timestr) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_fmtime = library.cfuncproto(
        library.load_so_libforms(), "fl_fmtime",
        cty.c_ulong, [xfdata.STRING],
        """long unsigned int fl_fmtime(const char * s)""")
    library.check_if_initialized()
    stimestr = library.convert_to_string(timestr)
    library.keep_elem_refs(timestr, stimestr)
    retval = _fl_fmtime(stimestr)
    return retval


def fl_fix_dirname(directory):
    """
        fl_fix_dirname(directory) -> dirname string

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_fix_dirname = library.cfuncproto(
        library.load_so_libforms(), "fl_fix_dirname",
        xfdata.STRING, [xfdata.STRING],
        """char * fl_fix_dirname(char * dir)""")
    library.check_if_initialized()
    sdirectory = library.convert_to_string(directory)
    library.keep_elem_refs(directory, sdirectory)
    retval = _fl_fix_dirname(sdirectory)
    return retval


