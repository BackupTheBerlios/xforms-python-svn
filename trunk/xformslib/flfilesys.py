#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
    e-mail: <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata




############################################
# forms.h (filesys.h)
# Convenience functions to read a directory
############################################

# read dir with pattern filtering. All dirs read might be cached.
# must not change dirlist in anyway.

def fl_get_dirlist(dirname, pattern, rescan):
    """Gets a listing of specified directory.

    @param dirname: name of directory
    @type dirname: str
    @param pattern: regular expression that is used to filter the directory
        entries
    @type pattern: str
    @param rescan: flag to request a re-read or not. Values 0 (no re-read)
        or non-zero (does a re-read)

    :return: an array of DirList class instances (pDirList) and number of
        files (total number of entries in directory dirname that match the
        pattern specified by pattern)
    :rtype: pointer to FL_DIRLIST, int

    :note: e.g. pdirlist, nfiles = dirlistfl_get_dirlist("/home", "*.*", 1)
    :note: e.g. print pdirlist[1].name

    :attention: API change from XForms - upstream was
       fl_get_dirlist(directory, pattern, n, rescan)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_get_dirlist = library.cfuncproto(
        library.load_so_libforms(), "fl_get_dirlist",
        cty.POINTER(xfdata.FL_Dirlist), [xfdata.STRING, xfdata.STRING,
        cty.POINTER(cty.c_int), cty.c_int],
        """const char * fl_get_dirlist(const char * dir,
           const char * pattern, int * n, int rescan)""")
    library.check_if_initialized()
    sdirname = library.convert_to_string(dirname)
    spattern = library.convert_to_string(pattern)
    n, pn = library.make_int_and_pointer()
    irescan = library.convert_to_int(rescan)
    library.keep_elem_refs(dirname, pattern, n, rescan, sdirname, spattern,
                   pn, irescan)
    retval = _fl_get_dirlist(sdirname, spattern, pn, irescan)
    return retval, n.value


def fl_set_dirlist_filter(py_DirFilter):
    """Changes the default filter by which file types are returned.
    By default not all types of files are returned (only directories,
    normal files and link files).

    @param py_DirFilter: python function used to filter types, returning
        value (non-zero if is to be included, 0 otherwise)
    @type py_DirFilter: __ funcname (strname, inttype) -> num. __

    :return: old dirlist filter function
    :rtype: instance of xfdata.FL_DIRLIST_FILTER

    :note: e.g. def dirfilter(fname, ftype)
    :note: e.g. |->| return type == xfdata.FT_DIR || return type == \
    :note: e.g. |->| xfdata.FT_FILE || return type == xfdata.FT_SOCK || \
    :note: e.g. |->| return type == xfdata.FT_FIFO || return type == \
    :note: e.g. |->| xfdata.FT_LINK || return type == xfdata.FT_BLK || \
    :note: e.g. |->| return type == xfdata.FT_CHR || return type == \
    :note: e.g. |->| xfdata.FT_OTHER
    :note: e.g. olddirfiltfunc = fl_set_dirlist_filter(dirfilter)

    :status: Tested + Doc + NoDemo = OK

    """
    #FL_DIRLIST_FILTER = cty.CFUNCTYPE(cty.c_int, xfdata.STRING, cty.c_int)
    _fl_set_dirlist_filter = library.cfuncproto(
        library.load_so_libforms(), "fl_set_dirlist_filter",
        xfdata.FL_DIRLIST_FILTER, [xfdata.FL_DIRLIST_FILTER],
        """FL_DIRLIST_FILTER fl_set_dirlist_filter( \
           FL_DIRLIST_FILTER filter)""")
    library.check_if_initialized()
    c_DirFilter = xfdata.FL_DIRLIST_FILTER(py_DirFilter)
    library.keep_cfunc_refs(c_DirFilter, py_DirFilter)
    retval = _fl_set_dirlist_filter(c_DirFilter)
    return retval


def fl_set_dirlist_sort(method):
    """Changes the default sorting of files in directory. By default the
    files returned are sorted alphabetically.

    @param method: method of sorting. Values (from xfdata module) FL_NONE
        FL_ALPHASORT, FL_RALPHASORT, FL_MTIMESORT, FL_RMTIMESORT, 
        FL_SIZESORT, FL_RSIZESORT, FL_CASEALPHASORT, FL_RCASEALPHASORT
    @type method: int

    :return: old sort method
    :rtype: int

    :note: e.g. num = fl_set_dirlist_sort(xfdata.FL_CASEALPHASORT)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_set_dirlist_sort = library.cfuncproto(
        library.load_so_libforms(), "fl_set_dirlist_sort",
        cty.c_int, [cty.c_int],
        """int fl_set_dirlist_sort(int method)""")
    library.check_if_initialized()
    imethod = library.convert_to_int(method)
    library.keep_elem_refs(method, imethod)
    retval = _fl_set_dirlist_sort(imethod)
    return retval


def fl_set_dirlist_filterdir(yesno):
    """Change the filter to include the directories. By default directories
     are not subject to filtering.

    @param yesno: flag to anable/disable directory filter. Values 1 (enabled)
        or 0 (disabled)
    @type yesno: int

    :return: old filter setting
    :rtype: int

    :note: e.g. olddirfilt = fl_set_dirlist_filterdir(1)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_set_dirlist_filterdir = library.cfuncproto(
        library.load_so_libforms(), "fl_set_dirlist_filterdir",
        cty.c_int, [cty.c_int],
        """int fl_set_dirlist_filterdir(int yes)""")
    library.check_if_initialized()
    iyesno = library.convert_to_int(yesno)
    library.keep_elem_refs(yesno, iyesno)
    retval = _fl_set_dirlist_filterdir(iyesno)
    return retval


def fl_free_dirlist(pDirList):
    """Frees the list cache returned by fl_get_dirlist().

    @param pDirList: instance of DirList class
    @type pDirList: pointer to xfdata.FL_DirList

    :note: e.g. fl_free_dirlist(pdirlist)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_free_dirlist = library.cfuncproto(
        library.load_so_libforms(), "fl_free_dirlist",
        None, [cty.POINTER(xfdata.FL_Dirlist)],
        """void fl_free_dirlist(FL_Dirlist * dl)""")
    library.check_if_initialized()
    library.keep_elem_refs(pDirList)
    _fl_free_dirlist(pDirList)


# Free all directory caches

def fl_free_all_dirlist():
    """Frees all the list caches returned by fl_get_dirlist().

    :note: e.g. fl_free_all_dirlist()

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_free_all_dirlist = library.cfuncproto(
        library.load_so_libforms(), "fl_free_all_dirlist",
        None, [],
        """void fl_free_all_dirlist()""")
    library.check_if_initialized()
    _fl_free_all_dirlist()


def fl_is_valid_dir(dirname):
    """Checks if dirname is a valid name of a directory.

    @param dirname: name of the directory to evaluate
    @type dirname: str

    :return: 1 (if valid) or 0 (if invalid)
    :rtype: int

    :note: e.g. fl_is_valid_dir(name) -> num.

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_is_valid_dir = library.cfuncproto(
        library.load_so_libforms(), "fl_is_valid_dir",
        cty.c_int, [xfdata.STRING],
        """int fl_is_valid_dir(const char * name)""")
    library.check_if_initialized()
    sdirname = library.convert_to_string(dirname)
    library.keep_elem_refs(dirname, sdirname)
    retval = _fl_is_valid_dir(sdirname)
    return retval


def fl_fmtime(fname):
    """Returns the modification time of a specified file.

    @param fname: name of the file
    @type fname: str

    :return: file modification time
    :rtype: long_pos

    :note: e.g. fmtime = fl_fmtime("/home/user/somefile")

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_fmtime = library.cfuncproto(
        library.load_so_libforms(), "fl_fmtime",
        cty.c_ulong, [xfdata.STRING],
        """long unsigned int fl_fmtime(const char * s)""")
    library.check_if_initialized()
    sfname = library.convert_to_string(fname)
    library.keep_elem_refs(fname, sfname)
    retval = _fl_fmtime(sfname)
    return retval


def fl_fix_dirname(dirname):
    """Fixes the name of a directory that has a relative path ("..") in it.

    @param dirname: name of the directory to evaluate
    @type dirname: str

    :return: fixed directory name
    :rtype: str

    :note: e.g. newdirnam = fl_fix_dirname("../mydir/")

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_fix_dirname = library.cfuncproto(
        library.load_so_libforms(), "fl_fix_dirname",
        xfdata.STRING, [xfdata.STRING],
        """char * fl_fix_dirname(char * dir)""")
    library.check_if_initialized()
    sdirname = library.convert_to_string(dirname)
    library.keep_elem_refs(dirname, sdirname)
    retval = _fl_fix_dirname(sdirname)
    return retval


