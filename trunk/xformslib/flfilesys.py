#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage files and directories.
"""

#    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
#    e-mail: <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata


############################################
# forms.h (filesys.h)
# Convenience functions to read a directory
############################################

# read dir with pattern filtering. All dirs read might be cached.
# must not change dirlist in anyway.

def fl_get_dirlist(dirname, pattern, rescan):
    """fl_get_dirlist(dirname, pattern, rescan)
    
    Obtains a listing of specified directory.

    Parameters
    ----------
        dirname : str
            name of directory
        pattern : str
            regular expression that is used to filter the directory entries
        rescan : int
            flag to request a re-read or not. Values 0 (no re-read)
            or non-zero (to do a re-read)

    Returns
    -------
        pDirList : pointer to xfdata.FL_DIRLIST, 
            array of DirList class instances
        numfiles : int
            number of files (total number of entries in directory dirname
            that match the pattern specified by pattern)

    Examples
    --------
        >>> pdirlist, nfiles = dirlistfl_get_dirlist("/home", "*.*", 1)
        >>> print pdirlist[1].name

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_dirlist(directory, pattern, n, rescan)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_dirlist = library.cfuncproto(
        library.load_so_libforms(), "fl_get_dirlist",
        cty.POINTER(xfdata.FL_Dirlist), [xfdata.STRING, xfdata.STRING,
        cty.POINTER(cty.c_int), cty.c_int],
        """const char * fl_get_dirlist(const char * dir,
           const char * pattern, int * n, int rescan)""")
    library.check_if_initialized()
    sdirname = library.convert_to_string(dirname)
    spattern = library.convert_to_string(pattern)
    n, pn = library.make_int_and_pointer()
    irescan = library.convert_to_int(rescan)
    library.keep_elem_refs(dirname, pattern, n, rescan, sdirname, \
            spattern, pn, irescan)
    retval = _fl_get_dirlist(sdirname, spattern, pn, irescan)
    return retval, n.value


def fl_set_dirlist_filter(py_DirFilter):
    """fl_set_dirlist_filter(py_DirFilter)
    
    Changes the default filter by which file types are returned.
    By default not all types of files are returned (only directories,
    normal files and link files).

    Parameters
    ----------
        py_DirFilter : python function used to filter types, returned value
            name referring to function (strname, inttype) -> (non-zero if is
            to be included, 0 otherwise)

    Returns
    -------
        DirFilter : xfdata.FL_DIRLIST_FILTER class instance
            old dirlist filter function

    Examples
    --------
        >>> def dirfilter(fname, ftype):
        >>> ... return (ftype == xfdata.FT_DIR || ftype == xfdata.FT_FILE ||
        >>>     ftype == xfdata.FT_SOCK || ftype == xfdata.FT_FIFO ||
        >>>     ftype == xfdata.FT_LINK || ftype == xfdata.FT_BLK ||
        >>>     ftype == xfdata.FT_CHR || type == xfdata.FT_OTHER)
        >>> olddirfiltfunc = fl_set_dirlist_filter(dirfilter)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    #FL_DIRLIST_FILTER = cty.CFUNCTYPE(cty.c_int, xfdata.STRING, cty.c_int)
    _fl_set_dirlist_filter = library.cfuncproto(
        library.load_so_libforms(), "fl_set_dirlist_filter",
        xfdata.FL_DIRLIST_FILTER, [xfdata.FL_DIRLIST_FILTER],
        """FL_DIRLIST_FILTER fl_set_dirlist_filter( \
           FL_DIRLIST_FILTER filter)""")
    library.check_if_initialized()
    library.verify_function_type(py_DirFilter)
    c_DirFilter = xfdata.FL_DIRLIST_FILTER(py_DirFilter)
    library.keep_cfunc_refs(c_DirFilter, py_DirFilter)
    retval = _fl_set_dirlist_filter(c_DirFilter)
    return retval


def fl_set_dirlist_sort(method):
    """fl_set_dirlist_sort(method)
    
    Changes the default sorting of files in directory. By default the
    files returned are sorted alphabetically.

    Parameters
    ----------
        method : int
            method of sorting. Values (from xfdata.py) FL_NONE, FL_ALPHASORT,
            FL_RALPHASORT, FL_MTIMESORT, FL_RMTIMESORT,  FL_SIZESORT,
            FL_RSIZESORT, FL_CASEALPHASORT, FL_RCASEALPHASORT

    Returns
    -------
        oldsort : int
            old sort method

    Examples
    --------
        >>> num = fl_set_dirlist_sort(xfdata.FL_CASEALPHASORT)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_dirlist_sort = library.cfuncproto(
        library.load_so_libforms(), "fl_set_dirlist_sort",
        cty.c_int, [cty.c_int],
        """int fl_set_dirlist_sort(int method)""")
    library.check_if_initialized()
    imethod = library.convert_to_int(method)
    library.keep_elem_refs(method, imethod)
    retval = _fl_set_dirlist_sort(imethod)
    return retval


def fl_set_dirlist_filterdir(yesno):
    """fl_set_dirlist_filterdir(yesno)

    Changes the filter to include the directories. By default directories
    are not subject to filtering.

    Parameters
    ----------
        yesno : int
            flag to enable/disable directory filter. Values 1 (enabled) or 0
            (disabled)

    Returns
    -------
        oldfilt : int
            old filter setting

    Examples
    --------
        >>> olddirfilt = fl_set_dirlist_filterdir(1)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_dirlist_filterdir = library.cfuncproto(
        library.load_so_libforms(), "fl_set_dirlist_filterdir",
        cty.c_int, [cty.c_int],
        """int fl_set_dirlist_filterdir(int yes)""")
    library.check_if_initialized()
    iyesno = library.convert_to_int(yesno)
    library.keep_elem_refs(yesno, iyesno)
    retval = _fl_set_dirlist_filterdir(iyesno)
    return retval


def fl_free_dirlist(pDirList):
    """fl_free_dirlist(pDirList)
    
    Frees the list cache returned by fl_get_dirlist().

    Parameters
    ----------
        pDirList : pointer to xfdata.FL_DirList
            instance of DirList class

    Examples
    --------
        >>> fl_free_dirlist(pdirlist)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_free_dirlist = library.cfuncproto(
        library.load_so_libforms(), "fl_free_dirlist",
        None, [cty.POINTER(xfdata.FL_Dirlist)],
        """void fl_free_dirlist(FL_Dirlist * dl)""")
    library.check_if_initialized()
    library.verify_otherclassptr_type(pDirList, cty.POINTER( \
                                xfdata.FL_Dirlist))
    library.keep_elem_refs(pDirList)
    _fl_free_dirlist(pDirList)


# Free all directory caches

def fl_free_all_dirlist():
    """fl_free_all_dirlist()
    
    Frees all the list caches returned by fl_get_dirlist().

    Examples
    --------
        >>> fl_free_all_dirlist()

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_free_all_dirlist = library.cfuncproto(
        library.load_so_libforms(), "fl_free_all_dirlist",
        None, [],
        """void fl_free_all_dirlist()""")
    library.check_if_initialized()
    _fl_free_all_dirlist()


def fl_is_valid_dir(dirname):
    """fl_is_valid_dir(dirname)
    
    Checks if dirname is a valid name of a directory.

    Parameters
    ----------
        dirname : str
            name of the directory to evaluate

    Returns
    -------
        yesno : int
            1 (if valid) or 0 (if invalid)

    Examples
    --------
        >>> isvalid = fl_is_valid_dir("/etc/mydirname")
        >>> if not isvalid:
        >>> ... <something>

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_is_valid_dir = library.cfuncproto(
        library.load_so_libforms(), "fl_is_valid_dir",
        cty.c_int, [xfdata.STRING],
        """int fl_is_valid_dir(const char * name)""")
    library.check_if_initialized()
    sdirname = library.convert_to_string(dirname)
    library.keep_elem_refs(dirname, sdirname)
    retval = _fl_is_valid_dir(sdirname)
    return retval


def fl_fmtime(fname):
    """fl_fmtime(fname)
    
    Obtains the modification time of a specified file.

    Parameters
    ----------
        fname : str
            name of the file

    Returns
    -------
        mtime : long_pos
            file modification time

    Examples
    --------
        >>> fmtime = fl_fmtime("/home/user/somefile")

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_fmtime = library.cfuncproto(
        library.load_so_libforms(), "fl_fmtime",
        cty.c_ulong, [xfdata.STRING],
        """long unsigned int fl_fmtime(const char * s)""")
    library.check_if_initialized()
    sfname = library.convert_to_string(fname)
    library.keep_elem_refs(fname, sfname)
    retval = _fl_fmtime(sfname)
    return retval


def fl_fix_dirname(dirname):
    """fl_fix_dirname(dirname)
    
    Fixes the name of a directory that has a relative path ("..") in it.

    Parameters
    ----------
        dirname : str
            name of the directory to evaluate

    Returns
    -------
        fixdirname : str
            fixed directory name

    Examples
    --------
        >>> newdirnam = fl_fix_dirname("../../home/user/../user/mydir/")

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_fix_dirname = library.cfuncproto(
        library.load_so_libforms(), "fl_fix_dirname",
        xfdata.STRING, [xfdata.STRING],
        """char * fl_fix_dirname(char * dir)""")
    library.check_if_initialized()
    sdirname = library.convert_to_string(dirname)
    library.keep_elem_refs(dirname, sdirname)
    retval = _fl_fix_dirname(sdirname)
    return retval

