#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage browser flobjects.
"""

#    Copyright (C) 2009, 2010, 2011  Luca Lazzaroni "LukenShiro"
#    e-mail:  <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared flobject libraries #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata


#######################
# forms.h (browser.h)
# Object class Browser
#######################

# Routines

# fl_create_browser function placeholder (internal)


def fl_add_browser(browsertype, xpos, ypos, width, height, label):
    """fl_add_browser(browsertype, xpos, ypos, width, height, label)
    -> ptr_flobject

    Adds a browser flobject. The label is placed below the box by default.

    Parameters
    ----------
        browsertype : int
            type of the browser to be added. Values (from xfdata.py)
            FL_NORMAL_BROWSER (A browser in which no selections can be made),
            FL_SELECT_BROWSER (In this case the user can make single line
            selections), FL_HOLD_BROWSER (Same to FL_SELECT_BROWSER but the
            selection remains visible until the next selection),
            FL_MULTI_BROWSER (Multiple selections can be made and remains
            visible until de-selected).
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of browser

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject created

    Examples
    --------
        >>> pbrobj = fl_add_browser(FL_SELECT_BROWSER, 200, 250, 200, 200,
                "BrowserList")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_browser = library.cfuncproto(
        library.load_so_libforms(), "fl_add_browser",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_browser(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_flinitialized()
    library.checkfatal_allowed_value_in_list(browsertype,
            xfdata.BROWSERTYPE_list)
    i_browsertype = library.convert_to_intc(browsertype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_stringc(label)
    library.keep_elem_refs(browsertype, xpos, ypos, width, height, label, \
            i_browsertype, i_xpos, i_ypos, i_width, i_height, s_label)
    retval = _fl_add_browser(i_browsertype, i_xpos, i_ypos, i_width, \
            i_height, s_label)
    return retval


def fl_clear_browser(ptr_flobject):
    """fl_clear_browser(ptr_flobject)

    Clears contents of a browser flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject

    Examples
    --------
        >>> fl_clear_browser(pbrobj)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_clear_browser = library.cfuncproto(
        library.load_so_libforms(), "fl_clear_browser",
        None, [cty.POINTER(xfdata.FL_OBJECT)],
        """void fl_clear_browser(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    _fl_clear_browser(ptr_flobject)


def fl_add_browser_line(ptr_flobject, newtext):
    """fl_add_browser_line(ptr_flobject, newtext)

    Add a line to a browser flobject without making the line visible. The line
    may contain embedded newline characters: these will result in the text
    being split up into several lines, separated at the newline characters.
    It is possible to change the appearance of individual lines in the
    browser, prepending text with the symbol '@' and a letter who indicates
    the special characteristics associated with this line. See xfdata.py for
    browserlines appearance.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        newtext : str
            line of text to be added

    Examples
    --------
        >>> fl_add_browser_line(pbrobj, "My new line\ntext")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_browser_line = library.cfuncproto(
        library.load_so_libforms(), "fl_add_browser_line",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_add_browser_line(FL_OBJECT * ob, const char * newtext)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    s_newtext = library.convert_to_stringc(newtext)
    library.keep_elem_refs(ptr_flobject, newtext, s_newtext)
    _fl_add_browser_line(ptr_flobject, s_newtext)


def fl_addto_browser(ptr_flobject, newtext):
    """fl_addto_browser(ptr_flobject, newtext)

    Adds text to browser. The browser will be shifted such that the newly
    appended line is visible. This is useful when e.g. using the browser
    to display messages. The text may contain embedded newline characters.
    See xfdata.py for browserlines appearance.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        newtext : str
            text to be added

    Examples
    --------
        >>> fl_addto_browser(pbrobj, "this line is now visible")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_addto_browser = library.cfuncproto(
        library.load_so_libforms(), "fl_addto_browser",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_addto_browser(FL_OBJECT * ob, const char * newtext)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    s_newtext = library.convert_to_stringc(newtext)
    library.keep_elem_refs(ptr_flobject, newtext, s_newtext)
    _fl_addto_browser(ptr_flobject, s_newtext)


def fl_addto_browser_chars(ptr_flobject, addedtext):
    """fl_addto_browser_chars(ptr_flobject, addedtext)

    Appends text to the last line in the browser without advancing the
    line counter. The text may contain embedded newline characters. In
    that case, the text before the first embedded newline is appended
    to the last line, and everything afterwards is put onto new lines.
    As in the case of fl_addto_browser() the last added line will be
    visible in the browser. See xfdata.py for browserlines appearance.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        addedtext : str
            text to be added

    Examples
    --------
        >>> fl_addto_browser_chars(pbrobj, "some chars")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_addto_browser_chars = library.cfuncproto(
        library.load_so_libforms(), "fl_addto_browser_chars",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_addto_browser_chars(FL_OBJECT * ob, const char * str)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    s_addedtext = library.convert_to_stringc(addedtext)
    library.keep_elem_refs(ptr_flobject, addedtext, s_addedtext)
    _fl_addto_browser_chars(ptr_flobject, s_addedtext)


fl_append_browser = fl_addto_browser_chars


def fl_insert_browser_line(ptr_flobject, linenum, newtext):
    """fl_insert_browser_line(ptr_flobject, linenum, newtext)

    Inserts a line in front of a given line in browser. All lines after
    it will be shifted. Embedded newline characters do not result in the
    line being split up as it is done in the previous functions, instead
    they will rather likely appear as strange looking characters in the
    text shown. The only exception is when inserting into an empty browser
    or after the last line, then this function works exactly as if you had
    called fl_add_browser_line(). See xfdata.py for browserlines appearance.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        linenum : int
            line id after which insert it (top line is numbered 1, not 0)
        newtext : str
            text to be inserted

    Examples
    --------
        >>> fl_insert_browser_line(pbrobj, 1, "new line inserted, no newline")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_insert_browser_line = library.cfuncproto(
        library.load_so_libforms(), "fl_insert_browser_line",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, xfdata.STRING],
        """void fl_insert_browser_line(FL_OBJECT * ob, int linenumb,
           const char * newtext)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_linenum = library.convert_to_intc(linenum)
    s_newtext = library.convert_to_stringc(newtext)
    library.keep_elem_refs(ptr_flobject, linenum, newtext, i_linenum, \
            s_newtext)
    _fl_insert_browser_line(ptr_flobject, i_linenum, s_newtext)


def fl_delete_browser_line(ptr_flobject, linenum):
    """fl_delete_browser_line(ptr_flobject, linenum)

    Deletes a line from browser flobject (shifting the following lines).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        linenum : int
            line id to delete

    Examples
    --------
        >>> fl_delete_browser_line(pbrobj, 3)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_delete_browser_line = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_browser_line",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_delete_browser_line(FL_OBJECT * ob, int linenumb)""")
    library.verify_flobjectptr_type(ptr_flobject)
    ilinenum = library.convert_to_intc(linenum)
    library.keep_elem_refs(ptr_flobject, linenum, ilinenum)
    _fl_delete_browser_line(ptr_flobject, ilinenum)


def fl_replace_browser_line(ptr_flobject, linenum, newtext):
    """fl_replace_browser_line(ptr_flobject, linenum, newtext)

    Replaces a line in the browser. As in the case of
    fl_insert_browser_line() newline characters embedded into the
    replacement text do not have any special meaning, i.e. they do not
    result in replacement of more than a single line. See xfdata.py for
    browserlines appearance.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        linenum : int
            line id to replace
        newtext : str
            text line used as replacement

    Examples
    --------
        >>> fl_replace_browser_line(pbrobj, 5, "replaced line")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_replace_browser_line = library.cfuncproto(
        library.load_so_libforms(), "fl_replace_browser_line",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, xfdata.STRING],
        """void fl_replace_browser_line(FL_OBJECT * ob, int linenumb,
           const char * newtext)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_linenum = library.convert_to_intc(linenum)
    s_newtext = library.convert_to_stringc(newtext)
    library.keep_elem_refs(ptr_flobject, linenum, newtext, i_linenum, \
            s_newtext)
    _fl_replace_browser_line(ptr_flobject, i_linenum, s_newtext)


def fl_get_browser_line(ptr_flobject, linenum):
    """fl_get_browser_line(ptr_flobject, linenum) -> linetext

    Finds out the contents of a particular line in the browser.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        linenum : int
            line id to return. Index of the topline is 1, not 0.

    Returns
    -------
        linetext : str
            text of requested line

    Examples
    --------
        >>> txt4thline = fl_get_browser_line(pbrobj, 4)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_get_browser_line = library.cfuncproto(
        library.load_so_libforms(), "fl_get_browser_line",
        xfdata.STRING, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """const char * fl_get_browser_line(FL_OBJECT * ob, int linenumb)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_linenum = library.convert_to_intc(linenum)
    library.keep_elem_refs(ptr_flobject, linenum, i_linenum)
    retval = _fl_get_browser_line(ptr_flobject, i_linenum)
    return retval


def fl_load_browser(ptr_flobject, filename):
    """fl_load_browser(ptr_flobject, filename) -> result

    Loads an entire file into a browser. With an empty string (or if the
    file could not be opened for reading) the browser is just cleared.
    This routine is particularly useful when using the browser for a help
    facility. You can create different help files and load the needed one
    depending on context.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        filename : str
            name of the file. If it is empty (""), does not load a new file.

    Returns
    -------
        result : int
            1 (if file is successfully loaded), otherwise 0

    Examples
    --------
        >>> ival = fl_load_browser(pbrobj, "somefile.txt")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_load_browser = library.cfuncproto(
        library.load_so_libforms(), "fl_load_browser",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """int fl_load_browser(FL_OBJECT * ob, const char * filename)""")
    library.verify_flobjectptr_type(ptr_flobject)
    s_filename = library.convert_to_stringc(filename)
    library.keep_elem_refs(ptr_flobject, filename, s_filename)
    retval = _fl_load_browser(ptr_flobject, s_filename)
    return retval


def fl_select_browser_line(ptr_flobject, linenum):
    """fl_select_browser_line(ptr_flobject, linenum)

    Selects a line in the browser flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        linenum : int
            line id to select

    Examples
    --------
        >>> fl_select_browser_line(pbrobj, 4)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe
ŕ
    """
    _fl_select_browser_line = library.cfuncproto(
        library.load_so_libforms(), "fl_select_browser_line",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_select_browser_line(FL_OBJECT * ob, int line)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_linenum = library.convert_to_intc(linenum)
    library.keep_elem_refs(ptr_flobject, linenum, i_linenum)
    _fl_select_browser_line(ptr_flobject, i_linenum)


def fl_deselect_browser_line(ptr_flobject, linenum):
    """fl_deselect_browser_line(ptr_flobject, linenum)

    Deselects a previously selected line in the browser flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        linenum : int
            line id to deselect

    Examples
    --------
        >>> fl_deselect_browser_line(pbrobj, 4)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_deselect_browser_line = library.cfuncproto(
        library.load_so_libforms(), "fl_deselect_browser_line",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_deselect_browser_line(FL_OBJECT * ob, int line)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_linenum = library.convert_to_intc(linenum)
    library.keep_elem_refs(ptr_flobject, linenum, i_linenum)
    _fl_deselect_browser_line(ptr_flobject, i_linenum)


def fl_deselect_browser(ptr_flobject):
    """fl_deselect_browser(ptr_flobject)

    Deselects all lines in the browser.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject

    Examples
    --------
        >>> fl_deselect_browser(pbrobj)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_deselect_browser = library.cfuncproto(
        library.load_so_libforms(), "fl_deselect_browser",
        None, [cty.POINTER(xfdata.FL_OBJECT)],
        """void fl_deselect_browser(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    _fl_deselect_browser(ptr_flobject)


def fl_isselected_browser_line(ptr_flobject, linenum):
    """fl_isselected_browser_line(ptr_flobject, linenum) -> yesno

    Checks whether a line of the browser flobject is selected, or not.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        linenum : int
            line id to evaluate

    Returns
    -------
        yesno : int
            flag. 1 if selected, otherwise 0

    Examples
    --------
        >>> if fl_isselected_browser_line(pbrobj, 2):
        >>> ... <something>

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_isselected_browser_line = library.cfuncproto(
        library.load_so_libforms(), "fl_isselected_browser_line",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_isselected_browser_line(FL_OBJECT * ob, int line)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    ilinenum = library.convert_to_intc(linenum)
    library.keep_elem_refs(ptr_flobject, linenum, ilinenum)
    retval = _fl_isselected_browser_line(ptr_flobject, ilinenum)
    return retval


def fl_get_browser_topline(ptr_flobject):
    """fl_get_browser_topline(ptr_flobject) -> linenum

    Finds out the (un-obscured) line that is currently shown at the top
    of the browser. The index of the top line is 1, not 0.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject

    Returns
    -------
        linenum : int
            line id of topline

    Examples
    --------
        >>> topl = fl_get_browser_topline(pbrobj)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_browser_topline = library.cfuncproto(
        library.load_so_libforms(), "fl_get_browser_topline",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_browser_topline(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_browser_topline(ptr_flobject)
    return retval


def fl_get_browser(ptr_flobject):
    """fl_get_browser(ptr_flobject) -> linenum

    Finds out the last selection made by the user, e.g. when the browser
    is returned. Index of the topline is 1, not 0.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject

    Returns
    -------
        linenum : int
            line id of the last selection, or 0 (if no selection was made).
            For FL_MULTI_BROWSER only: the negative of deselected line id
            (when the last action was a deselection)

    Examples
    --------
        >>> lastsel = fl_get_browser(pbrobj)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_get_browser = library.cfuncproto(
        library.load_so_libforms(), "fl_get_browser",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_browser(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_browser(ptr_flobject)
    return retval


def fl_get_browser_maxline(ptr_flobject):
    """fl_get_browser_maxline(ptr_flobject) -> numlines

    Finds out the number of lines in the browser.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject

    Returns
    -------
        numlines : int
            number of lines

    Examples
    --------
        >>> maxlin = fl_get_browser_maxline(pbrobj)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_browser_maxline = library.cfuncproto(
        library.load_so_libforms(), "fl_get_browser_maxline",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_browser_maxline(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_browser_maxline(ptr_flobject)
    return retval


def fl_get_browser_screenlines(ptr_flobject):
    """fl_get_browser_screenlines(ptr_flobject) -> numlines

    Finds out an approximation of the number of lines shown in the
    browser. This count only includes lines that are shown completely
    in the browser, partially obscured ones are not counted in.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject

    Returns
    -------
        numlines : int
            number of lines

    Examples
    --------
        >>> visiblines = fl_get_browser_screenlines(pbrobj)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_browser_screenlines = library.cfuncproto(
        library.load_so_libforms(), "fl_get_browser_screenlines",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_browser_screenlines(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_browser_screenlines(ptr_flobject)
    return retval


def fl_set_browser_topline(ptr_flobject, linenum):
    """fl_set_browser_topline(ptr_flobject, linenum)

    Moves a text line to the top of the browser. Line numbers start with 1.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        linenum : int
            line id to be moved to top

    Examples
    --------
        >>> fl_set_browser_topline(pbrobj, 5)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_browser_topline = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_topline",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_browser_topline(FL_OBJECT * ob, int line)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_linenum = library.convert_to_intc(linenum)
    library.keep_elem_refs(ptr_flobject, linenum, i_linenum)
    _fl_set_browser_topline(ptr_flobject, i_linenum)


def fl_set_browser_bottomline(ptr_flobject, linenum):
    """fl_set_browser_bottomline(ptr_flobject, linenum)

    Moves a text line to the bottom of the browser. Line numbers start with 1.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        linenum : int
            line id to be moved to bottom

    Examples
    --------
        >>> fl_set_browser_bottomline(pbrobj, 2)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_browser_bottomline = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_bottomline",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_browser_bottomline(FL_OBJECT * ob, int line)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_linenum = library.convert_to_intc(linenum)
    library.keep_elem_refs(ptr_flobject, linenum, i_linenum)
    _fl_set_browser_bottomline(ptr_flobject, i_linenum)


def fl_set_browser_fontsize(ptr_flobject, size):
    """fl_set_browser_fontsize(ptr_flobject, size)

    Defines the font size used inside the browser.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        size : int
            font size to be set. Values (from xfdata.py) FL_TINY_SIZE (8
            points font), FL_SMALL_SIZE or FL_DEFAULT_SIZE (10 points font,
            default), FL_NORMAL_SIZE (12 points font), FL_MEDIUM_SIZE (14
            points font), FL_LARGE_SIZE (18 points font), FL_HUGE_SIZE (24
            points font), or other numeric odd or even value

    Examples
    --------
        >>> fl_set_browser_fontsize(pbrobj, xfdata.FL_NORMAL_SIZE)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_browser_fontsize = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_fontsize",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_browser_fontsize(FL_OBJECT * ob, int size)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_size = library.convert_to_intc(size)
    library.keep_elem_refs(ptr_flobject, size, i_size)
    _fl_set_browser_fontsize(ptr_flobject, i_size)


def fl_set_browser_fontstyle(ptr_flobject, style):
    """fl_set_browser_fontstyle(ptr_flobject, style)

    Defines the font style of a browser flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        style : int
            font style to be set. Values (from xfdata.py) FL_NORMAL_STYLE
            (Helvetica normal text), FL_BOLD_STYLE (Helvetica boldface text),
            FL_ITALIC_STYLE (Helvetica italic text), FL_BOLDITALIC_STYLE
            (Helvetica boldface and italic text), FL_FIXED_STYLE (Courier
            fixed width, good for tables), FL_FIXEDBOLD_STYLE (Courier bold
            fixed text), FL_FIXEDITALIC_STYLE (Courier italic fixed text),
            FL_FIXEDBOLDITALIC_STYLE (Courier boldface and italic fixed text),
            FL_TIMES_STYLE (Times-Roman like normal font), FL_TIMESBOLD_STYLE
            (Times-Roman like boldface text), FL_TIMESITALIC_STYLE (Times-Roman
            like italic text), FL_TIMESBOLDITALIC_STYLE (Times-Roman like
            boldface and italic text), FL_MISC_STYLE (Charter normal text),
            FL_MISCBOLD_STYLE (Charter boldface text), FL_MISCITALIC_STYLE
            Charter italic text), FL_SYMBOL_STYLE (Symbol text),
            FL_SHADOW_STYLE (Text casting a shadow, modifier mask),
            FL_ENGRAVED_STYLE (Text engraved into the form, modifier mask),
            FL_EMBOSSED_STYLE (Text standing out, modifier mask). Bitwise OR
            with any of modifiers is allowed.

    Examples
    --------
        >>> fl_set_browser_fontstyle(pbrobj, xfdata.FL_EMBOSSED_STYLE)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_browser_fontstyle = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_fontstyle",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_browser_fontstyle(FL_OBJECT * ob, int style)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    i_style = library.convert_to_intc(style)
    library.keep_elem_refs(ptr_flobject, style, i_style)
    _fl_set_browser_fontstyle(ptr_flobject, i_style)


def fl_set_browser_specialkey(ptr_flobject, specialkey):
    """fl_set_browser_specialkey(ptr_flobject, specialkey)

    Changes the special character, used to change appearance, see
    fl_add_browser_line(), to something other than '@'. In some cases
    the character '@' might need to be placed at the beginning of the
    lines without introducing the special meaning mentioned above. In
    this case you can use "@@".

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        specialkey : int or char
            escape key to be set

    Examples
    --------
        >>> fl_set_browser_specialkey(pbrobj, "#")

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_browser_specialkey = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_specialkey",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_browser_specialkey(FL_OBJECT * ob, int specialkey)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    if isinstance(specialkey, str):
        # workaround to let a character as int argument
        ordspkey = ord(specialkey)
    else:
        ordspkey = specialkey
    i_specialkey = library.convert_to_intc(ordspkey)
    library.keep_elem_refs(ptr_flobject, specialkey, ordspkey, i_specialkey)
    _fl_set_browser_specialkey(ptr_flobject, i_specialkey)


def fl_set_browser_vscrollbar(ptr_flobject, howscroll):
    """fl_set_browser_vscrollbar(ptr_flobject, howscroll)

    Turns the vertical scrollbar on or off. When you switch the
    scrollbars off the text cannot be scrolled by the user anymore
    at all (i.e. also not using methods that do not use scrollbars,
    e.g. using the cursor keys).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        howscroll : int
            if bar is turned on/off. Values (from xfdata.py) FL_AUTO (On when
            needed, default), FL_ON (always on), FL_OFF (always off).

    Examples
    --------
        >>> fl_set_browser_vscrollbar(pbrobj, xfdata.FL_OFF)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_browser_vscrollbar = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_vscrollbar",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_browser_vscrollbar(FL_OBJECT * ob, int on)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.checkfatal_allowed_value_in_list(howscroll, \
            xfdata.SCROLLBARVAL_list)
    i_howscroll = library.convert_to_intc(howscroll)
    library.keep_elem_refs(ptr_flobject, howscroll, i_howscroll)
    _fl_set_browser_vscrollbar(ptr_flobject, i_howscroll)


def fl_set_browser_hscrollbar(ptr_flobject, howscroll):
    """fl_set_browser_hscrollbar(ptr_flobject, howscroll)

    Turns the horizontal scrollbar on or off. When you switch the
    scrollbars off the text cannot be scrolled by the user anymore at
    all (i.e. also not using methods that do not use scrollbars, e.g.
    using the cursor keys).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        howscroll : int
            if bar is turned on/off. Values (from xfdata.py) FL_AUTO (On when
            needed, default), FL_ON (always on), FL_OFF (always off).

    Examples
    --------
        >>> fl_set_browser_hscrollbar(pbrobj, xfdata.FL_OFF)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_browser_hscrollbar = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_hscrollbar",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_browser_hscrollbar(FL_OBJECT * ob, int on)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.checkfatal_allowed_value_in_list(howscroll, \
            xfdata.SCROLLBARVAL_list)
    i_howscroll = library.convert_to_intc(howscroll)
    library.keep_elem_refs(ptr_flobject, howscroll, i_howscroll)
    _fl_set_browser_hscrollbar(ptr_flobject, i_howscroll)


def fl_set_browser_line_selectable(ptr_flobject, linenum, yesno):
    """fl_set_browser_line_selectable(ptr_flobject, linenum, yesno)

    Defines if a line of browser flobject is selectable or not.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        linenum : int
            line id to set
        yesno : int
            line selectable state. Values 1 (selectable) or 0 (not selectable)

    Notes
    -----
        Status: NA-UTest + NoDoc + NoDemo = Maybe

    """
    _fl_set_browser_line_selectable = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_line_selectable",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_browser_line_selectable(FL_OBJECT * ob, int line,
           int flag)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_linenum = library.convert_to_intc(linenum)
    i_yesno = library.convert_to_intc(yesno)
    library.keep_elem_refs(ptr_flobject, linenum, yesno, i_linenum, i_yesno)
    _fl_set_browser_line_selectable(ptr_flobject, i_linenum, i_yesno)


def fl_get_browser_dimension(ptr_flobject):
    """fl_get_browser_dimension(ptr_flobject) -> xpos, ypos, width, height

    Finds out the browser size in pixels for the text area.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject

    Returns
    -------
        xpos : int
            horizontal position
        ypos : int
            vertical position
        width : int
            width of browser in coord units
        height : int
            height of browser in coord units

    Examples
    --------
        >>> x, y, w, h = fl_get_browser_dimension(pbrobj)

    API_diversion
    ----------
        API changed from XForms, upstream is
        fl_get_browser_dimension(ptr_flobject, xpos, ypos, width, height)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_browser_dimension = library.cfuncproto(
        library.load_so_libforms(), "fl_get_browser_dimension",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_Coord),
        cty.POINTER(xfdata.FL_Coord), cty.POINTER(xfdata.FL_Coord),
        cty.POINTER(xfdata.FL_Coord)],
        """void fl_get_browser_dimension(FL_OBJECT * ob, FL_Coord * x,
           FL_Coord * y, FL_Coord * w, FL_Coord * h)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_xpos, ptr_xpos = library.make_FL_Coord_and_pointer()
    i_ypos, ptr_ypos = library.make_FL_Coord_and_pointer()
    i_width, ptr_width = library.make_FL_Coord_and_pointer()
    i_height, ptr_height = library.make_FL_Coord_and_pointer()
    library.keep_elem_refs(ptr_flobject, i_xpos, i_ypos, i_width, \
            i_height, ptr_xpos, ptr_ypos, ptr_width, ptr_height)
    _fl_get_browser_dimension(ptr_flobject, ptr_xpos, ptr_ypos, \
            ptr_width, ptr_height)
    return i_xpos.value, i_ypos.value, i_width.value, i_height.value


def fl_set_browser_dblclick_callback(ptr_flobject, pyfn_CallbackPtr, numdata):
    """fl_set_browser_dblclick_callback(ptr_flobject, pyfn_CallbackPtr,
    numdata)

    Registers a callback function that gets called when a line is
    double-clicked on. Double-click callbacks make most sense for
    xfdata.FL_HOLD_BROWSERs.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        pyfn_CallbackPtr : python function callback, no return
            name referring to function(ptr_flobject, [long]numdata)
        numdata : long
            user data to be passed to callback function

    Examples
    --------
        >>> def browsercb(pobj, data):
        >>> ... <something>
        >>> fl_set_browser_dblclick_callback(pbrobj, browsercb, data)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    #FL_CALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_OBJECT), \
    #                               cty.c_long)
    _fl_set_browser_dblclick_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_dblclick_callback",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_CALLBACKPTR, \
        cty.c_long],
        """void fl_set_browser_dblclick_callback(FL_OBJECT * ob,
           FL_CALLBACKPTR cb, long int a)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    l_numdata = library.convert_to_longc(numdata)
    library.verify_function_type(pyfn_CallbackPtr)
    cfn_CallbackPtr = xfdata.FL_CALLBACKPTR(pyfn_CallbackPtr)
    library.keep_cfunc_refs(cfn_CallbackPtr, pyfn_CallbackPtr)
    library.keep_elem_refs(ptr_flobject, numdata, l_numdata)
    _fl_set_browser_dblclick_callback(ptr_flobject, cfn_CallbackPtr, \
            l_numdata)


def fl_get_browser_xoffset(ptr_flobject):
    """fl_get_browser_xoffset(ptr_flobject) -> numpixels

    Finds out the amount of text in pixel that is scrolled in
    horizontal direction (relative to the left margin) .

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject

    Returns
    -------
        numpixels : int
            pixel amount scrolled

    Examples
    --------
        >>> xoffset = fl_get_browser_xfoffset(pbrobj)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_browser_xoffset = library.cfuncproto(
        library.load_so_libforms(), "fl_get_browser_xoffset",
        xfdata.FL_Coord, [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_Coord fl_get_browser_xoffset(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_browser_xoffset(ptr_flobject)
    return retval


def fl_get_browser_rel_xoffset(ptr_flobject):
    """fl_get_browser_rel_xoffset(ptr_flobject) -> roffset

    Finds out the relative amount of text in pixel that is scrolled in
    horizontal direction (relative to the total width of all of the text).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject

    Returns
    -------
        roffset : float
            offset between 0 (starts of lines are shown) and 1 (end of
            longest line is shown)

    Examples
    --------
        >>> reloffset = fl_get_browser_rel_xoffset(pbrwsobj)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_browser_rel_xoffset = library.cfuncproto(
        library.load_so_libforms(), "fl_get_browser_rel_xoffset",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
        """double fl_get_browser_rel_xoffset(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_browser_rel_xoffset(ptr_flobject)
    return retval


def fl_set_browser_xoffset(ptr_flobject, numpixels):
    """fl_set_browser_xoffset(ptr_flobject, numpixels)

    Defines the amount of text in pixel that is scrolled in
    horizontal direction (relative to the left margin).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        numpixels : int
            amount of text in pixel to be scrolled

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_browser_xoffset = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_xoffset",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_Coord],
        """void fl_set_browser_xoffset(FL_OBJECT * ob, FL_Coord npixels)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_numpixels = library.convert_to_FL_Coord(numpixels)
    library.keep_elem_refs(ptr_flobject, numpixels, i_numpixels)
    _fl_set_browser_xoffset(ptr_flobject, i_numpixels)


def fl_set_browser_rel_xoffset(ptr_flobject, roffset):
    """fl_set_browser_rel_xoffset(ptr_flobject, roffset)

    Defines the relative amount of text that is scrolled in horizontal
    direction (relative to the total width of all of the text).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        roffset : float
            relative amount of text in pixel to be scrolled

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + NoDoc + NoDemo = Maybe

    """
    _fl_set_browser_rel_xoffset = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_rel_xoffset",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_browser_rel_xoffset(FL_OBJECT * ob, double val)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_roffset = library.convert_to_doublec(roffset)
    library.keep_elem_refs(ptr_flobject, roffset, f_roffset)
    _fl_set_browser_rel_xoffset(ptr_flobject, f_roffset)


def fl_get_browser_yoffset(ptr_flobject):
    """fl_get_browser_yoffset(ptr_flobject) -> numpixels

    Finds out the amount of text in pixels that is scrolled in
    vertical direction (relative to the top of the text).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject

    Returns
    -------
        numpixels : int
            pixel amount scrolled

    Examples
    --------
        >>> offset = fl_get_browser_yoffset(pbrobj)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_get_browser_yoffset = library.cfuncproto(
        library.load_so_libforms(), "fl_get_browser_yoffset",
        xfdata.FL_Coord, [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_Coord fl_get_browser_yoffset(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_browser_yoffset(ptr_flobject)
    return retval


def fl_get_browser_rel_yoffset(ptr_flobject):
    """fl_get_browser_rel_yoffset(ptr_flobject) -> roffset

    Finds out the relative amount of text in pixel that is scrolled in
    vertical direction (relative to the total height of all of the text).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject

    Returns
    -------
        roffset : float
            offset between 0 (starts of lines are shown) and 1 (end of
            longest line is shown)

    Examples
    --------
        >>> reloffset = fl_get_browser_rel_yoffset(pbrobj)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_browser_rel_yoffset = library.cfuncproto(
        library.load_so_libforms(), "fl_get_browser_rel_yoffset",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
        """double fl_get_browser_rel_yoffset(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_browser_rel_yoffset(ptr_flobject)
    return retval


def fl_set_browser_yoffset(ptr_flobject, numpixels):
    """fl_set_browser_yoffset(ptr_flobject, numpixels)

    Defines the amount of text in pixels that is scrolled in
    vertical direction (relative to the top of the text).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        numpixels : int
            amount of text in pixels to be scrolled

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + NoDoc + Demo = OK

    """
    _fl_set_browser_yoffset = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_yoffset",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_Coord],
        """void fl_set_browser_yoffset(FL_OBJECT * ob, FL_Coord npixels)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_numpixels = library.convert_to_FL_Coord(numpixels)
    library.keep_elem_refs(ptr_flobject, numpixels, i_numpixels)
    _fl_set_browser_yoffset(ptr_flobject, i_numpixels)


def fl_set_browser_rel_yoffset(ptr_flobject, roffset):
    """fl_set_browser_rel_yoffset(ptr_flobject, roffset)

    Defines the relative amount of text in pixels that is scrolled in
    horizontal direction (relative to the total heigth of all of the text).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        roffset : float
            relative amount of text in pixels to be scrolled

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_browser_rel_yoffset = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_rel_yoffset",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_browser_rel_yoffset(FL_OBJECT * ob, double val)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    froffset = library.convert_to_doublec(roffset)
    library.keep_elem_refs(ptr_flobject, roffset, froffset)
    _fl_set_browser_rel_yoffset(ptr_flobject, froffset)


def fl_set_browser_scrollbarsize(ptr_flobject, height, width):
    """fl_set_browser_scrollbarsize(ptr_flobject, height, width)

    Defines the scrollbar size of the browser. By default, the scrollbar size
    is based on the relation between the size of the browser and the size of
    the text.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        height : int
            horizontal scrollbar height (0 for the default)
        width : int
            vertical scrollbar width (0 for the default)

    Examples
    --------
        >>> fl_set_browser_scrollbarsize(pbrobj, 10, 10)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_browser_scrollbarsize = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_scrollbarsize",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_browser_scrollbarsize(FL_OBJECT * ob,
           int hh, int vw)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_height = library.convert_to_intc(height)
    i_width = library.convert_to_intc(width)
    library.keep_elem_refs(ptr_flobject, height, width, i_height, i_width)
    _fl_set_browser_scrollbarsize(ptr_flobject, i_height, i_width)


def fl_show_browser_line(ptr_flobject, linenum):
    """fl_show_browser_line(ptr_flobject, linenum)

    Brings a line of browser flobject into view.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        linenum : int
            line id to show

    Examples
    --------
        >>> fl_show_browser_line(pbrobj, 12)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_show_browser_line = library.cfuncproto(
        library.load_so_libforms(), "fl_show_browser_line",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_show_browser_line(FL_OBJECT * ob, int j)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_linenum = library.convert_to_intc(linenum)
    library.keep_elem_refs(ptr_flobject, linenum, i_linenum)
    _fl_show_browser_line(ptr_flobject, i_linenum)


# fl_set_default_browser_maxlinelength function placeholder (deprecated)


def fl_set_browser_hscroll_callback(ptr_flobject, pyfn_BrowserScrollCb, \
        userdata):
    """fl_set_browser_hscroll_callback(ptr_flobject, pyfn_BrowserScrollCb,
    userdata)

    Defines the callback function to be invoked whenever the horizontal
    scrollbar of browser flobject changes position.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        pyfn_BrowserScrollCb : python function callback, no return
            name referring to function(ptr_flobject, [int]topline,
            [pointer to void]pvdata)
        userdata : any type (e.g. None, int, str, etc..)
            user data to be passed to function; invoked callback has to take
            care of type check and re-cast from ptr_void to chosen type using
            appropriate xfstruct.convert_ptrvoid_to_*() function

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    #FL_BROWSER_SCROLL_CALLBACK = cty.CFUNCTYPE(None,
    #            cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_void_p)
    _fl_set_browser_hscroll_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_hscroll_callback",
        None, [cty.POINTER(xfdata.FL_OBJECT), \
        xfdata.FL_BROWSER_SCROLL_CALLBACK, cty.c_void_p],
        """void fl_set_browser_hscroll_callback(FL_OBJECT * ob,
           FL_BROWSER_SCROLL_CALLBACK cb, void * data)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.verify_function_type(pyfn_BrowserScrollCb)
    cfn_BrowserScrollCb = xfdata.FL_BROWSER_SCROLL_CALLBACK( \
            pyfn_BrowserScrollCb)
    ptr_vdata = library.convert_userdata_to_ptrvoid(userdata)
    library.keep_cfunc_refs(cfn_BrowserScrollCb, pyfn_BrowserScrollCb)
    library.keep_elem_refs(ptr_flobject, userdata, ptr_vdata)
    _fl_set_browser_hscroll_callback(ptr_flobject, cfn_BrowserScrollCb, \
            ptr_vdata)


def fl_set_browser_vscroll_callback(ptr_flobject, pyfn_BrowserScrollCb, \
        userdata):
    """fl_set_browser_vscroll_callback(ptr_flobject, pyfn_BrowserScrollCb,
    userdata)

    Defines the callback function to be invoked whenever the vertical
    scrollbar of browser flobject changes position.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        pyfn_BrowserScrollCb : python function callback, no return
            name referring to function(ptr_flobject, [int]topline,
            [pointer to void]pvdata)
        userdata : any type (e.g. None, int, str, etc..)
            user data to be passed to function; invoked callback has to take
            care of type check and re-cast from ptr_void to chosen type using
            appropriate xfstruct.convert_ptrvoid_to_*() function

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + NoDoc + Demo = OK

    """
    #FL_BROWSER_SCROLL_CALLBACK = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT),
    #            cty.c_int, cty.c_void_p)
    _fl_set_browser_vscroll_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_vscroll_callback",
        None, [cty.POINTER(xfdata.FL_OBJECT),
        xfdata.FL_BROWSER_SCROLL_CALLBACK, cty.c_void_p],
        """void fl_set_browser_vscroll_callback(FL_OBJECT * ob,
           FL_BROWSER_SCROLL_CALLBACK cb, void * data)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.verify_function_type(pyfn_BrowserScrollCb)
    cfn_BrowserScrollCb = xfdata.FL_BROWSER_SCROLL_CALLBACK( \
            pyfn_BrowserScrollCb)
    ptr_vdata = library.convert_userdata_to_ptrvoid(userdata)
    library.keep_cfunc_refs(cfn_BrowserScrollCb, pyfn_BrowserScrollCb)
    library.keep_elem_refs(ptr_flobject, userdata, ptr_vdata)
    _fl_set_browser_vscroll_callback(ptr_flobject, cfn_BrowserScrollCb,
            ptr_vdata)


def fl_get_browser_line_yoffset(ptr_flobject, linenum):
    """fl_get_browser_line_yoffset(ptr_flobject, linenum) -> offset

    Finds out the vertical-offset in pixels for a line of browser flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        linenum : int
            line id

    Returns
    -------
        offset : int
            offset of the line in pixels, or -1 (if the line does not exist)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_browser_line_yoffset = library.cfuncproto(
        library.load_so_libforms(), "fl_get_browser_line_yoffset",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_get_browser_line_yoffset(FL_OBJECT * obj, int line)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_linenum = library.convert_to_intc(linenum)
    library.keep_elem_refs(ptr_flobject, linenum, i_linenum)
    retval = _fl_get_browser_line_yoffset(ptr_flobject, i_linenum)
    return retval


def fl_get_browser_hscroll_callback(ptr_flobject):
    """fl_get_browser_hscroll_callback(ptr_flobject) -> BrowserScrollCb

    Finds out the callback function created for horizontal scrollbar
    position change of browser flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject

    Returns
    -------
        BrowserScrollCb : xfdata.FL_BROWSER_SCROLL_CALLBACK
            xfdata.FL_BROWSER_SCROLL_CALLBACK function

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_browser_hscroll_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_get_browser_hscroll_callback",
        xfdata.FL_BROWSER_SCROLL_CALLBACK, [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_BROWSER_SCROLL_CALLBACK fl_get_browser_hscroll_callback(
           FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_browser_hscroll_callback(ptr_flobject)
    return retval


def fl_get_browser_vscroll_callback(ptr_flobject):
    """fl_get_browser_vscroll_callback(ptr_flobject) -> BrowserScrollCb

    Finds out the callback function created for horizontal scrollbar position
    change of browser flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject

    Returns
    -------
        BrowserScrollCb : xfdata.FL_BROWSER_SCROLL_CALLBACK
            callback function for vertical scrolling

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_browser_vscroll_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_get_browser_vscroll_callback",
        xfdata.FL_BROWSER_SCROLL_CALLBACK, [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_BROWSER_SCROLL_CALLBACK fl_get_browser_vscroll_callback(
           FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_browser_vscroll_callback(ptr_flobject)
    return retval


def fl_get_browser_scrollbar_repeat(ptr_flobject):
    """fl_get_browser_scrollbar_repeat(ptr_flobject) -> tdelay

    Finds out the time delay (in milliseconds) between jumps of the scrollbar
    knob when the mouse button is kept pressed down on the scrollbar outside
    of the knobs area. The delay for the very first jump is twice that long
    in order to avoid jumping to start too soon when only a single click was
    intended but the user is a bit slow in releasing the mouse button.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject

    Returns
    -------
        tdelay : int
            time delay

    Examples
    --------
        >>> dly = fl_get_browser_scrollbar_repeat(pobj)

    Notes
    -----
        Status: NA-UTest + NoDoc + NoDemo = Maybe

    """
    _fl_get_browser_scrollbar_repeat = library.cfuncproto(
        library.load_so_libforms(), "fl_get_browser_scrollbar_repeat",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_browser_scrollbar_repeat(FL_OBJECT * obj)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_browser_scrollbar_repeat(ptr_flobject)
    return retval


def fl_set_browser_scrollbar_repeat(ptr_flobject, tdelay):
    """fl_set_browser_scrollbar_repeat(ptr_flobject, tdelay)

    Defines the time delay between jumps of the scrollbar knob when the mouse
    button is kept pressed down on the scrollbar outside of the knobs area.
    The delay for the very first jump is twice that long in order to avoid
    jumping to start too soon when only a single click was intended but the
    user is a bit slow in releasing the mouse button.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            browser flobject
        tdelay : int
            time delay (in milliseconds) to be set. The default value
            is 100 ms.

    Examples
    --------
        >>> fl_set_browser_scrollbar_repeat(pbrobj, 200)

    Notes
    -----
        Status: NA-UTest + NoDoc + NoDemo = Maybe

    """
    _fl_set_browser_scrollbar_repeat = library.cfuncproto(
        library.load_so_libforms(), "fl_set_browser_scrollbar_repeat",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_browser_scrollbar_repeat(FL_OBJECT * obj, int)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_tdelay = library.convert_to_intc(tdelay)
    library.keep_elem_refs(ptr_flobject, tdelay, i_tdelay)
    _fl_set_browser_scrollbar_repeat(ptr_flobject, i_tdelay)

