#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
        using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
        <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


__docformat__ = "epytext en"    # to be used with epydoc doc


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata



#######################
# forms.h (browser.h)
# Object class Browser
#######################

# Routines

# fl_create_browser function placeholder (internal)


def fl_add_browser(browsertype, x, y, w, h, label):
    """ fl_add_browser(browsertype, x, y, w, h, label) -> pFlObject

        Adds a browser object.

        @param browsertype: type of the browser to be added
        @type browsertype: [num./int] FL_NORMAL_BROWSER,
                           FL_SELECT_BROWSER, FL_HOLD_BROWSER,
                           FL_MULTI_BROWSER
        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of browser

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_browser = library.cfuncproto(
            library.load_so_libforms(), "fl_add_browser",
            cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
            xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
            """FL_OBJECT * fl_add_browser(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
""")
    library.check_if_initialized()
    library.check_admitted_listvalues(browsertype, xfdata.BROWSERTYPE_list)
    ibrowsertype = library.convert_to_int(browsertype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(browsertype, x, y, w, h, label, ibrowsertype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_browser(ibrowsertype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_browser(pFlObject):
    """ fl_clear_browser(pFlObject)

        Clears contents of a browser object.

        @param pFlObject: pointer to browser object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_clear_browser = library.cfuncproto(
            library.load_so_libforms(), "fl_clear_browser",
            None, [cty.POINTER(xfdata.FL_OBJECT)],
            """void fl_clear_browser(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_clear_browser(pFlObject)


def fl_add_browser_line(pFlObject, newtext):
    """
    fl_add_browser_line(pFlObject, newtext)

    Add a line to a browser object.

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param newtext: line of text to be added
    @type newtext: str

    @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_browser_line = library.cfuncproto(
            library.load_so_libforms(), "fl_add_browser_line",
            None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
            """void fl_add_browser_line(FL_OBJECT * ob, const char * newtext)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    snewtext = library.convert_to_string(newtext)
    library.keep_elem_refs(pFlObject, newtext, snewtext)
    _fl_add_browser_line(pFlObject, snewtext)


def fl_addto_browser(pFlObject, newtext):
    """
    fl_addto_browser(pFlObject, newtext)

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param newtext: text to be added
    @type newtext: str

    @status: Tested + NoDoc + Demo = OK
    """

    _fl_addto_browser = library.cfuncproto(
            library.load_so_libforms(), "fl_addto_browser",
            None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
            """void fl_addto_browser(FL_OBJECT * ob, const char * newtext)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    snewtext = library.convert_to_string(newtext)
    library.keep_elem_refs(pFlObject, newtext, snewtext)
    _fl_addto_browser(pFlObject, snewtext)


def fl_addto_browser_chars(pFlObject, addedtext):
    """
    fl_addto_browser_chars(pFlObject, addedtext)

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param addedtext: text to be added
    @type addedtext: str

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_addto_browser_chars = library.cfuncproto(
            library.load_so_libforms(), "fl_addto_browser_chars",
            None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
            """void fl_addto_browser_chars(FL_OBJECT * ob, const char * str)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    saddedtext = library.convert_to_string(addedtext)
    library.keep_elem_refs(pFlObject, addedtext, saddedtext)
    _fl_addto_browser_chars(pFlObject, saddedtext)


fl_append_browser = fl_addto_browser_chars


def fl_insert_browser_line(pFlObject, linenum, newtext):
    """
    fl_insert_browser_line(pFlObject, linenum, newtext)

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param linenum: line number after which insert it
    @type linenum: int
    @param newtext: text to be inserted
    @type netext: str

    @status: Tested + NoDoc + Demo = OK
    """

    _fl_insert_browser_line = library.cfuncproto(
            library.load_so_libforms(), "fl_insert_browser_line",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, xfdata.STRING],
            """void fl_insert_browser_line(FL_OBJECT * ob, int linenumb,
               const char * newtext)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ilinenum = library.convert_to_int(linenum)
    snewtext = library.convert_to_string(newtext)
    library.keep_elem_refs(pFlObject, linenum, newtext, ilinenum, snewtext)
    _fl_insert_browser_line(pFlObject, ilinenum, snewtext)


def fl_delete_browser_line(pFlObject, linenum):
    """
    fl_delete_browser_line(pFlObject, linenum)

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param linenum: line number to delete
    @type linenum: int

    @status: Tested + NoDoc + Demo = OK
    """

    _fl_delete_browser_line = library.cfuncproto(
            library.load_so_libforms(), "fl_delete_browser_line",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_delete_browser_line(FL_OBJECT * ob, int linenumb)
""")
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ilinenum = library.convert_to_int(linenum)
    library.keep_elem_refs(pFlObject, linenum, ilinenum)
    _fl_delete_browser_line(pFlObject, ilinenum)


def fl_replace_browser_line(pFlObject, linenum, newtext):
    """
    fl_replace_browser_line(pFlObject, linenum, newtext)

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param linenum: line number to replace
    @type linenum: int
    @param newtext: text line used as replacement
    @type newtext: str

    @status: Tested + NoDoc + Demo = OK
    """

    _fl_replace_browser_line = library.cfuncproto(
            library.load_so_libforms(), "fl_replace_browser_line",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, xfdata.STRING],
            """void fl_replace_browser_line(FL_OBJECT * ob, int linenumb,
               const char * newtext)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ilinenum = library.convert_to_int(linenum)
    snewtext = library.convert_to_string(newtext)
    library.keep_elem_refs(pFlObject, linenum, newtext, ilinenum, snewtext)
    _fl_replace_browser_line(pFlObject, ilinenum, snewtext)


def fl_get_browser_line(pFlObject, linenum):
    """
    fl_get_browser_line(pFlObject, linenum) -> str

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param linenum: line number to return
    @type linenum: int

    @returns: line string

    @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_browser_line = library.cfuncproto(
            library.load_so_libforms(), "fl_get_browser_line",
            xfdata.STRING, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """const char * fl_get_browser_line(FL_OBJECT * ob, int linenumb)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ilinenum = library.convert_to_int(linenum)
    library.keep_elem_refs(pFlObject, linenum, ilinenum)
    retval = _fl_get_browser_line(pFlObject, ilinenum)
    return retval


def fl_load_browser(pFlObject, filename):
    """
    fl_load_browser(pFlObject, filename) -> int

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param filename: name of the file
    @type filename: str

    @returns: num.

    @status: Tested + NoDoc + Demo = OK
    """

    _fl_load_browser = library.cfuncproto(
            library.load_so_libforms(), "fl_load_browser",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
            """int fl_load_browser(FL_OBJECT * ob, const char * filename)
""")
    library.check_if_FL_OBJECT_ptr(pFlObject)
    sfilename = library.convert_to_string(filename)
    library.keep_elem_refs(pFlObject, filename, sfilename)
    retval = _fl_load_browser(pFlObject, sfilename)
    return retval


def fl_select_browser_line(pFlObject, linenum):
    """
    fl_select_browser_line(pFlObject, linenum)

    @param pFlObject: pointer to object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param linenum: line number to select
    @type linenum: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_select_browser_line = library.cfuncproto(
            library.load_so_libforms(), "fl_select_browser_line",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_select_browser_line(FL_OBJECT * ob, int line)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ilinenum = library.convert_to_int(linenum)
    library.keep_elem_refs(pFlObject, linenum, ilinenum)
    _fl_select_browser_line(pFlObject, ilinenum)


def fl_deselect_browser_line(pFlObject, linenum):
    """
    fl_deselect_browser_line(pFlObject, linenum)

    @param pFlObject: pointer to object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param linenum: line id to deselect
    @type linenum: int

    @status: Tested + NoDoc + Demo = OK
    """

    _fl_deselect_browser_line = library.cfuncproto(
            library.load_so_libforms(), "fl_deselect_browser_line",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_deselect_browser_line(FL_OBJECT * ob, int line)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ilinenum = library.convert_to_int(linenum)
    library.keep_elem_refs(pFlObject, linenum, ilinenum)
    _fl_deselect_browser_line(pFlObject, ilinenum)


def fl_deselect_browser(pFlObject):
    """
    fl_deselect_browser(pFlObject)

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @status: Tested + NoDoc + Demo = OK
    """

    _fl_deselect_browser = library.cfuncproto(
            library.load_so_libforms(), "fl_deselect_browser",
            None, [cty.POINTER(xfdata.FL_OBJECT)],
            """void fl_deselect_browser(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_deselect_browser(pFlObject)


def fl_isselected_browser_line(pFlObject, linenum):
    """
    fl_isselected_browser_line(pFlObject, linenum) -> int

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param linenum: line id to evaluate
    @type linenum: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_isselected_browser_line = library.cfuncproto(
            library.load_so_libforms(), "fl_isselected_browser_line",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """int fl_isselected_browser_line(FL_OBJECT * ob, int line)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ilinenum = library.convert_to_int(linenum)
    library.keep_elem_refs(pFlObject, linenum, ilinenum)
    retval = _fl_isselected_browser_line(pFlObject, ilinenum)
    return retval


def fl_get_browser_topline(pFlObject):
    """
    fl_get_browser_topline(pFlObject) -> int

    @param pFlObject: pointer to object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: line id number

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_topline = library.cfuncproto(
            library.load_so_libforms(), "fl_get_browser_topline",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_browser_topline(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_browser_topline(pFlObject)
    return retval


def fl_get_browser(pFlObject):
    """
    fl_get_browser(pFlObject) -> int

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: num.

    @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_browser = library.cfuncproto(
            library.load_so_libforms(), "fl_get_browser",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_browser(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_browser(pFlObject)
    return retval


def fl_get_browser_maxline(pFlObject):
    """
    fl_get_browser_maxline(pFlObject) -> int

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: line num.

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_maxline = library.cfuncproto(
            library.load_so_libforms(), "fl_get_browser_maxline",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_browser_maxline(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_browser_maxline(pFlObject)
    return retval


def fl_get_browser_screenlines(pFlObject):
    """
    fl_get_browser_screenlines(pFlObject) -> int

    Returns an approximation of the number of lines shown in the browser.

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: number of lines

    @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_get_browser_screenlines = library.cfuncproto(
            library.load_so_libforms(), "fl_get_browser_screenlines",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_browser_screenlines(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_browser_screenlines(pFlObject)
    return retval


def fl_set_browser_topline(pFlObject, linenum):
    """
    fl_set_browser_topline(pFlObject, linenum)

    Moves a text line to the top of the browser.

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param linenum: line id to be moved to top
    @type linenum: int

    @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_set_browser_topline = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_topline",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_browser_topline(FL_OBJECT * ob, int line)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ilinenum = library.convert_to_int(linenum)
    library.keep_elem_refs(pFlObject, linenum, ilinenum)
    _fl_set_browser_topline(pFlObject, ilinenum)


def fl_set_browser_bottomline(pFlObject, linenum):
    """
    fl_set_browser_bottomline(pFlObject, linenum)

    Moves a text line to the bottom of the browser.

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param linenum: line id to be moved to bottom
    @type linenum: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_bottomline = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_bottomline",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_browser_bottomline(FL_OBJECT * ob, int line)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ilinenum = library.convert_to_int(linenum)
    library.keep_elem_refs(pFlObject, linenum, ilinenum)
    _fl_set_browser_bottomline(pFlObject, ilinenum)


def fl_set_browser_fontsize(pFlObject, size):
    """
    fl_set_browser_fontsize(pFlObject, size)

    Sets the font size of a browser object.

    @param pFlObject: browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param size: font size to be set
    @type size: int

    @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_browser_fontsize = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_fontsize",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_browser_fontsize(FL_OBJECT * ob, int size)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    isize = library.convert_to_int(size)
    library.keep_elem_refs(pFlObject, size, isize)
    _fl_set_browser_fontsize(pFlObject, isize)


def fl_set_browser_fontstyle(pFlObject, style):
    """
    fl_set_browser_fontstyle(pFlObject, style)

    Sets the font style of a browser object.

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param style: font style to be set
    @type style: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_fontstyle = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_fontstyle",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_browser_fontstyle(FL_OBJECT * ob, int style)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    istyle = library.convert_to_int(style)
    library.keep_elem_refs(pFlObject, style, istyle)
    _fl_set_browser_fontstyle(pFlObject, istyle)


def fl_set_browser_specialkey(pFlObject, specialkey):
    """
    fl_set_browser_specialkey(pFlObject, specialkey)

    Sets the escape key used in the text.

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param specialkey: escape key to be set
    @type specialkey: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_specialkey = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_specialkey",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_browser_specialkey(FL_OBJECT * ob, int specialkey)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ispecialkey = library.convert_to_int(specialkey)
    library.keep_elem_refs(pFlObject, specialkey, ispecialkey)
    _fl_set_browser_specialkey(pFlObject, ispecialkey)


def fl_set_browser_vscrollbar(pFlObject, how):
    """
    fl_set_browser_vscrollbar(pFlObject, how)

    Turns the vertical scrollbar on or off.

    @param pFlObject: pointer to object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param how: how bar is turned. Values (from xfdata module) i.e. FL_ON,
        FL_OFF, FL_AUTO (default)
    @type how: int

    @status: Tested + Doc + Demo = OK
    """

    _fl_set_browser_vscrollbar = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_vscrollbar",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_browser_vscrollbar(FL_OBJECT * ob, int on)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(how, xfdata.SCROLLBARVAL_list)
    ihow = library.convert_to_int(how)
    library.keep_elem_refs(pFlObject, how, ihow)
    _fl_set_browser_vscrollbar(pFlObject, ihow)


def fl_set_browser_hscrollbar(pFlObject, how):
    """
    fl_set_browser_hscrollbar(pFlObject, how)

    Turns the horizontal scrollbar on or off.

    @param pFlObject: pointer to object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param how: how bar is turned. Values (from xfdata module) i.e. FL_ON,
        FL_OFF, FL_AUTO (default)
    @type how: int

    @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_set_browser_hscrollbar = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_hscrollbar",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_browser_hscrollbar(FL_OBJECT * ob, int on)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(how, xfdata.SCROLLBARVAL_list)
    ihow = library.convert_to_int(how)
    library.keep_elem_refs(pFlObject, how, ihow)
    _fl_set_browser_hscrollbar(pFlObject, ihow)


def fl_set_browser_line_selectable(pFlObject, linenum, flag):
    """
    fl_set_browser_line_selectable(pFlObject, linenum, flag)

    @param pFlObject: pointer to object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param linenum: line id to set
    @type linenum: int
    @param flag: ?
    @type flag: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_line_selectable = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_line_selectable",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_browser_line_selectable(FL_OBJECT * ob, int line,
               int flag)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ilinenum = library.convert_to_int(linenum)
    iflag = library.convert_to_int(flag)
    library.keep_elem_refs(pFlObject, linenum, flag, ilinenum, iflag)
    _fl_set_browser_line_selectable(pFlObject, ilinenum, iflag)


def fl_get_browser_dimension(pFlObject):
    """
    fl_get_browser_dimension(pFlObject) -> int, int, int, int

    Returns all dimensions of a browser object.

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: horizontal and vertical position, width, height (x, y, w, h)

    @attention: API change from XForms - upstream was
        fl_get_browser_dimension(pFlObject, x, y, w, h)

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_dimension = library.cfuncproto(
            library.load_so_libforms(), "fl_get_browser_dimension",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_Coord),
            cty.POINTER(xfdata.FL_Coord), cty.POINTER(xfdata.FL_Coord),
            cty.POINTER(xfdata.FL_Coord)],
            """void fl_get_browser_dimension(FL_OBJECT * ob, FL_Coord * x,
               FL_Coord * y, FL_Coord * w, FL_Coord * h)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    x, px = library.make_FL_Coord_and_pointer()
    y, py = library.make_FL_Coord_and_pointer()
    w, pw = library.make_FL_Coord_and_pointer()
    h, ph = library.make_FL_Coord_and_pointer()
    library.keep_elem_refs(pFlObject, x, y, w, h, px, py, pw, ph)
    _fl_get_browser_dimension(pFlObject, px, py, pw, ph)
    return x.value, y.value, w.value, h.value


def fl_set_browser_dblclick_callback(pFlObject, py_CallbackPtr, data):
    """
    fl_set_browser_dblclick_callback(pFlObject, py_CallbackPtr, data)

    @param pFlObject: pointer to object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param py_CallbackPtr: python function callback ..
    @type py_CallbackPtr: __ funcname (..) __
    @param data: user data to be passed to function
    @param data: long

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_dblclick_callback = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_dblclick_callback",
            None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_CALLBACKPTR, cty.c_long],
            """void fl_set_browser_dblclick_callback(FL_OBJECT * ob,
               FL_CALLBACKPTR cb, long int a)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ldata = library.convert_to_long(data)
    c_CallbackPtr = xfdata.FL_CALLBACKPTR(py_CallbackPtr)
    library.keep_cfunc_refs(c_CallbackPtr, py_CallbackPtr)
    library.keep_elem_refs(pFlObject, data, ldata)
    _fl_set_browser_dblclick_callback(pFlObject, c_CallbackPtr, ldata)


def fl_get_browser_xoffset(pFlObject):
    """
    fl_get_browser_xoffset(pFlObject) -> int

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: coord num.

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_xoffset = library.cfuncproto(
            library.load_so_libforms(), "fl_get_browser_xoffset",
            xfdata.FL_Coord, [cty.POINTER(xfdata.FL_OBJECT)],
            """FL_Coord fl_get_browser_xoffset(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_browser_xoffset(pFlObject)
    return retval


def fl_get_browser_rel_xoffset(pFlObject):
    """
    fl_get_browser_rel_xoffset(pFlObject) -> float

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: relative offset

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_rel_xoffset = library.cfuncproto(
            library.load_so_libforms(), "fl_get_browser_rel_xoffset",
            cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
            """double fl_get_browser_rel_xoffset(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_browser_rel_xoffset(pFlObject)
    return retval


def fl_set_browser_xoffset(pFlObject, npixels):
    """
    fl_set_browser_xoffset(pFlObject, npixels)

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param npixels: offset
    @type npixels: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_xoffset = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_xoffset",
            None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_Coord],
            """void fl_set_browser_xoffset(FL_OBJECT * ob, FL_Coord npixels)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    inpixels = library.convert_to_FL_Coord(npixels)
    library.keep_elem_refs(pFlObject, npixels, inpixels)
    _fl_set_browser_xoffset(pFlObject, inpixels)


def fl_set_browser_rel_xoffset(pFlObject, val):
    """
    fl_set_browser_rel_xoffset(pFlObject, val)

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param val: offset
    @type val: float

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_rel_xoffset = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_rel_xoffset",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
            """void fl_set_browser_rel_xoffset(FL_OBJECT * ob, double val)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fval = library.convert_to_double(val)
    library.keep_elem_refs(pFlObject, val, fval)
    _fl_set_browser_rel_xoffset(pFlObject, fval)


def fl_get_browser_yoffset(pFlObject):
    """
    fl_get_browser_yoffset(pFlObject) -> int

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: coord. num.

    @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_browser_yoffset = library.cfuncproto(
            library.load_so_libforms(), "fl_get_browser_yoffset",
            xfdata.FL_Coord, [cty.POINTER(xfdata.FL_OBJECT)],
            """FL_Coord fl_get_browser_yoffset(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_browser_yoffset(pFlObject)
    return retval


def fl_get_browser_rel_yoffset(pFlObject):
    """
    fl_get_browser_rel_yoffset(pFlObject) -> float

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: relative offset

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_rel_yoffset = library.cfuncproto(
            library.load_so_libforms(), "fl_get_browser_rel_yoffset",
            cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
            """double fl_get_browser_rel_yoffset(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_browser_rel_yoffset(pFlObject)
    return retval


def fl_set_browser_yoffset(pFlObject, npixels):
    """
    fl_set_browser_yoffset(pFlObject, npixels)

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param npixels: offset
    @type npixels: int

    @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_browser_yoffset = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_yoffset",
            None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_Coord],
            """void fl_set_browser_yoffset(FL_OBJECT * ob, FL_Coord npixels)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    inpixels = library.convert_to_FL_Coord(npixels)
    library.keep_elem_refs(pFlObject, npixels, inpixels)
    _fl_set_browser_yoffset(pFlObject, inpixels)


def fl_set_browser_rel_yoffset(pFlObject, val):
    """
    fl_set_browser_rel_yoffset(pFlObject, val)

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param val: offset
    @type val: float

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_rel_yoffset = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_rel_yoffset",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
            """void fl_set_browser_rel_yoffset(FL_OBJECT * ob, double val)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fval = library.convert_to_double(val)
    library.keep_elem_refs(pFlObject, val, fval)
    _fl_set_browser_rel_yoffset(pFlObject, fval)


def fl_set_browser_scrollbarsize(pFlObject, hh, vw):
    """
    fl_set_browser_scrollbarsize(pFlObject, hh, vw)

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param hh: ?
    @type hh: int
    @param vw: ?
    @type vw: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_scrollbarsize = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_scrollbarsize",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_browser_scrollbarsize(FL_OBJECT * ob,
               int hh, int vw)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ihh = library.convert_to_int(hh)
    ivw = library.convert_to_int(vw)
    library.keep_elem_refs(pFlObject, hh, vw, ihh, ivw)
    _fl_set_browser_scrollbarsize(pFlObject, ihh, ivw)


def fl_show_browser_line(pFlObject, line):
    """
    fl_show_browser_line(pFlObject, line)

    Bring a browser line into view.

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param line: line number to show
    @type line: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_show_browser_line = library.cfuncproto(
            library.load_so_libforms(), "fl_show_browser_line",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_show_browser_line(FL_OBJECT * ob, int j)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iline = library.convert_to_int(line)
    library.keep_elem_refs(pFlObject, line, iline)
    _fl_show_browser_line(pFlObject, iline)


# fl_set_default_browser_maxlinelength function placeholder (deprecated)



def fl_set_browser_hscroll_callback(pFlObject, py_BrowserScrollCallback, vdata):
    """
    fl_set_browser_hscroll_callback(pFlObject, py_BrowserScrollCallback, vdata)

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param py_BrowserScrollCallback: python function callback, no return
    @type py_BrowserScrollCallback: __ funcname (pFlObject, num, vdata) __
    @param vdata: user data to be passed to function
    @type vdata: pointer to void

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    #FL_BROWSER_SCROLL_CALLBACK = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_OBJECT),
    #            cty.c_int, cty.c_void_p)
    _fl_set_browser_hscroll_callback = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_hscroll_callback",
            None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_BROWSER_SCROLL_CALLBACK,
            cty.c_void_p],
            """void fl_set_browser_hscroll_callback(FL_OBJECT * ob,
               FL_BROWSER_SCROLL_CALLBACK cb, void * data)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    c_BrowserScrollCallback = xfdata.FL_BROWSER_SCROLL_CALLBACK( \
                                py_BrowserScrollCallback)
    pvdata = cty.cast(vdata, cty.c_void_p)
    library.keep_cfunc_refs(c_BrowserScrollCallback, py_BrowserScrollCallback)
    library.keep_elem_refs(pFlObject, vdata, pvdata)
    _fl_set_browser_hscroll_callback(pFlObject, c_BrowserScrollCallback, pvdata)


def fl_set_browser_vscroll_callback(pFlObject, py_BrowserScrollCallback, vdata):
    """
    fl_set_browser_vscroll_callback(pFlObject, py_BrowserScrollCallback, vdata)

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param py_BrowserScrollCallback: python function callback, no return
    @type py_BrowserScrollCallback: __ funcname (pFlObject, num, vdata) __
    @param vdata: user data to be passed to function
    @type vdata: pointer to void

    @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_browser_vscroll_callback = library.cfuncproto(
            library.load_so_libforms(), "fl_set_browser_vscroll_callback",
            None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_BROWSER_SCROLL_CALLBACK,
            cty.c_void_p],
            """void fl_set_browser_vscroll_callback(FL_OBJECT * ob,
               FL_BROWSER_SCROLL_CALLBACK cb, void * data)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    c_BrowserScrollCallback = xfdata.FL_BROWSER_SCROLL_CALLBACK( \
                                py_BrowserScrollCallback)
    pvdata = cty.cast(vdata, cty.c_void_p)
    library.keep_cfunc_refs(c_BrowserScrollCallback, py_BrowserScrollCallback)
    library.keep_elem_refs(pFlObject, vdata, pvdata)
    _fl_set_browser_vscroll_callback(pFlObject, c_BrowserScrollCallback, pvdata)


def fl_get_browser_line_yoffset(pFlObject, line):
    """
    fl_get_browser_line_yoffset(pFlObject, line) -> int

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: num.

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_line_yoffset = library.cfuncproto(
            library.load_so_libforms(), "fl_get_browser_line_yoffset",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """int fl_get_browser_line_yoffset(FL_OBJECT * obj, int line)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iline = library.convert_to_int(line)
    library.keep_elem_refs(pFlObject, line, iline)
    retval = _fl_get_browser_line_yoffset(pFlObject, iline)
    return retval


def fl_get_browser_hscroll_callback(pFlObject):
    """
    fl_get_browser_hscroll_callback(pFlObject) -> callback

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_hscroll_callback = library.cfuncproto(
            library.load_so_libforms(), "fl_get_browser_hscroll_callback",
            xfdata.FL_BROWSER_SCROLL_CALLBACK, [cty.POINTER(xfdata.FL_OBJECT)],
            """FL_BROWSER_SCROLL_CALLBACK fl_get_browser_hscroll_callback(
               FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_browser_hscroll_callback(pFlObject)
    return retval


def fl_get_browser_vscroll_callback(pFlObject):
    """
    fl_get_browser_vscroll_callback(pFlObject) -> callback

    @param pFlObject: pointer to browser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_browser_vscroll_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_get_browser_vscroll_callback",
        xfdata.FL_BROWSER_SCROLL_CALLBACK, [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_BROWSER_SCROLL_CALLBACK fl_get_browser_vscroll_callback(
           FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_browser_vscroll_callback(pFlObject)
    return retval

