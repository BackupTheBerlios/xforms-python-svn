#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
    e-mail: <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata



#####################
# forms.h (nmenu.h)
#####################

# Nmenu object types

# fl_create_nmenu function placeholder (internal)


def fl_add_nmenu(nmenutype, x, y, w, h, label):
    """
        fl_add_nmenu(nmenutype, x, y, w, h, label) -> pFlObject

        Adds a nmenu object.

        @param nmenutype: type of nmenu to be added
        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of nmenu object

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_add_nmenu = library.cfuncproto(
        library.load_so_libforms(), "fl_add_nmenu",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_nmenu(int p1, FL_Coord p2, FL_Coord p3,
           FL_Coord p4, FL_Coord p5, const char * p6)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(nmenutype, xfdata.NMENUTYPE_list)
    inmenutype = library.convert_to_int(nmenutype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(nmenutype, x, y, w, h, label, inmenutype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_nmenu(inmenutype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_nmenu(pFlObject):
    """
        fl_clear_nmenu(pFlObject) -> num.


        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_clear_nmenu = library.cfuncproto(
        library.load_so_libforms(), "fl_clear_nmenu",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_clear_nmenu(FL_OBJECT * p1)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_clear_nmenu(pFlObject)
    return retval


def fl_add_nmenu_items(pFlObject, itemstr):
    """
        fl_add_nmenu_items(pFlObject, itemstr) -> pPopupEntry

        @param pFlObject: nmenu object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: HalfTested + NoDoc + Demo = NOT OK (sequence param.)
    """
    _fl_add_nmenu_items = library.cfuncproto(
        library.load_so_libforms(), "fl_add_nmenu_items",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT),
        xfdata.STRING],
        """FL_POPUP_ENTRY * fl_add_nmenu_items(FL_OBJECT * p1,
           const char * p2)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    sitemstr = library.convert_to_string(itemstr)
    library.keep_elem_refs(pFlObject, itemstr, sitemstr)
    retval = _fl_add_nmenu_items(pFlObject, sitemstr)
    return retval


def fl_insert_nmenu_items(pFlObject, pPopupEntry, itemstr):
    """
        fl_insert_nmenu_items(pFlObject, pPopupEntry, itemstr) -> pPopupEntry

        @param pFlObject: nmenu object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param itemstr: text of the item (among special sequences only %S is
                        supported)

        @status: HalfTested + NoDoc + Demo = NOT OK (special sequences)
    """
    _fl_insert_nmenu_items = library.cfuncproto(
        library.load_so_libforms(), "fl_insert_nmenu_items",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_POPUP_ENTRY), xfdata.STRING],
        """FL_POPUP_ENTRY * fl_insert_nmenu_items(FL_OBJECT * p1,
           FL_POPUP_ENTRY * p2, const char * p3)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    sitemstr = library.convert_to_string(itemstr)
    library.keep_elem_refs(pFlObject, pPopupEntry, itemstr, sitemstr)
    retval = _fl_insert_nmenu_items(pFlObject, pPopupEntry, sitemstr)
    return retval


def fl_replace_nmenu_item(pFlObject, pPopupEntry, itemstr):
    """
        fl_replace_nmenu_item(pFlObject, pPopupEntry, itemstr) -> pPopupEntry

        @param pFlObject: nmenu object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_replace_nmenu_item = library.cfuncproto(
        library.load_so_libforms(), "fl_replace_nmenu_item",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_POPUP_ENTRY), xfdata.STRING],
        """FL_POPUP_ENTRY * fl_replace_nmenu_item(FL_OBJECT * p1,
           FL_POPUP_ENTRY * p2, const char * p3)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    sitemstr = library.convert_to_string(itemstr)
    library.keep_elem_refs(pFlObject, pPopupEntry, itemstr, sitemstr)
    retval = _fl_replace_nmenu_item(pFlObject, pPopupEntry, sitemstr)
    return retval


def fl_delete_nmenu_item(pFlObject, pPopupEntry):
    """
        fl_delete_nmenu_item(pFlObject, pPopupEntry) -> num.


        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_delete_nmenu_item = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_nmenu_item",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_POPUP_ENTRY)],
        """int fl_delete_nmenu_item(FL_OBJECT * p1, FL_POPUP_ENTRY * p2)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject, pPopupEntry)
    retval = _fl_delete_nmenu_item(pFlObject, pPopupEntry)
    return retval


def fl_set_nmenu_items(pFlObject, pPopupItem):
    """
        fl_set_nmenu_items(pFlObject, pPopupItem) -> pPopupEntry


        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_nmenu_items = library.cfuncproto(
        library.load_so_libforms(), "fl_set_nmenu_items",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_POPUP_ITEM)],
        """FL_POPUP_ENTRY * fl_set_nmenu_items(FL_OBJECT * p1,
           FL_POPUP_ITEM * p2)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject, pPopupItem)
    retval = _fl_set_nmenu_items(pFlObject, pPopupItem)
    return retval


def fl_add_nmenu_items2(pFlObject, pPopupItem):
    """
        fl_add_nmenu_items2(pFlObject, pPopupItem) -> pPopupEntry

        @param pFlObject: nmenu object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param pPopupItem: pointer to xfdata.FL_POPUP_ITEM; it needs to be
           prepared beforehand with library.make_pPopupItem_from_list(..) function
           for single or multiple lists, or with library.make_pPopupItem_from_dict(..)
           for a single dict.

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_add_nmenu_items2 = library.cfuncproto(
        library.load_so_libforms(), "fl_add_nmenu_items2",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_POPUP_ITEM)],
        """FL_POPUP_ENTRY * fl_add_nmenu_items2(FL_OBJECT * obj,
           FL_POPUP_ITEM * p2)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject, pPopupItem)
    retval = _fl_add_nmenu_items2(pFlObject, pPopupItem)
    return retval


def fl_insert_nmenu_items2(pFlObject, pPopupEntry, pPopupItem):
    """
        fl_insert_nmenu_items2(pFlObject, pPopupEntry, pPopupItem) -> pPopupEntry

        @param pFlObject: nmenu object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param pPopupItem: pointer to xfdata.FL_POPUP_ITEM; it needs to be
           prepared beforehand with library.make_pPopupItem_from_list(..) function
           for single or multiple lists, or with library.make_pPopupItem_from_dict(..)
           for a single dict.

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_insert_nmenu_items2 = library.cfuncproto(
        library.load_so_libforms(), "fl_insert_nmenu_items2",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_POPUP_ENTRY), cty.POINTER(xfdata.FL_POPUP_ITEM)],
        """FL_POPUP_ENTRY * fl_insert_nmenu_items2(FL_OBJECT * obj,
           FL_POPUP_ITEM * p2, FL_POPUP_ITEM * p3)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject, pPopupEntry, pPopupItem)
    retval = _fl_insert_nmenu_items2(pFlObject, pPopupEntry, pPopupItem)
    return retval


def fl_replace_nmenu_items2(pFlObject, pPopupEntry, pPopupItem):
    """
        fl_replace_nmenu_items2(pFlObject, pPopupEntry, pPopupItem) -> pPopupEntry

        @param pFlObject: nmenu object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param pPopupItem: pointer to xfdata.FL_POPUP_ITEM; it needs to be
           prepared beforehand with library.make_pPopupItem_from_list(..) function for
           for single or multiple lists, or with library.make_pPopupItem_from_dict(..)
           for a single dict.

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_replace_nmenu_items2 = library.cfuncproto(
        library.load_so_libforms(), "fl_replace_nmenu_items2",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_POPUP_ENTRY), cty.POINTER(xfdata.FL_POPUP_ITEM)],
        """FL_POPUP_ENTRY * fl_replace_nmenu_items2(FL_OBJECT * obj,
           FL_POPUP_ENTRY * p2, FL_POPUP_ITEM * p3)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject, pPopupEntry, pPopupItem)
    retval = _fl_replace_nmenu_items2(pFlObject, pPopupEntry, pPopupItem)
    return retval


def fl_get_nmenu_popup(pFlObject):
    """
        fl_get_nmenu_popup(pFlObject) -> pPopup

        @param pFlObject: nmenu object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_nmenu_popup = library.cfuncproto(
        library.load_so_libforms(), "fl_get_nmenu_popup",
        cty.POINTER(xfdata.FL_POPUP), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_POPUP * fl_get_nmenu_popup(FL_OBJECT * p1)""")
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_nmenu_popup(pFlObject)
    return retval


def fl_set_nmenu_popup(pFlObject, pPopup):
    """
        fl_set_nmenu_popup(pFlObject, pPopup) -> num.

        @param pFlObject: nmenu object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_nmenu_popup = library.cfuncproto(
        library.load_so_libforms(), "fl_set_nmenu_popup",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_POPUP)],
        """int fl_set_nmenu_popup(FL_OBJECT * p1, FL_POPUP * p2)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject, pPopup)
    retval = _fl_set_nmenu_popup(pFlObject, pPopup)
    return retval


def fl_get_nmenu_item(pFlObject):
    """
        fl_get_nmenu_item(pFlObject) -> pPopupReturn

        @param pFlObject: nmenu object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_get_nmenu_item = library.cfuncproto(
        library.load_so_libforms(), "fl_get_nmenu_item",
        cty.POINTER(xfdata.FL_POPUP_RETURN), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_POPUP_RETURN * fl_get_nmenu_item(FL_OBJECT * p1)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_nmenu_item(pFlObject)
    return retval


def fl_get_nmenu_item_by_value(pFlObject, value):
    """
        fl_get_nmenu_item_by_value(pFlObject, value) -> pPopupEntry

        @param pFlObject: nmenu object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_get_nmenu_item_by_value = library.cfuncproto(
        library.load_so_libforms(), "fl_get_nmenu_item_by_value",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT), cty.c_long],
        """FL_POPUP_ENTRY * fl_get_nmenu_item_by_value(FL_OBJECT * p1,
           long int p2)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    lvalue = library.convert_to_long(value)
    library.keep_elem_refs(pFlObject, value, lvalue)
    retval = _fl_get_nmenu_item_by_value(pFlObject, lvalue)
    return retval


def fl_get_nmenu_item_by_label(pFlObject, label):
    """
        fl_get_nmenu_item_by_label(pFlObject, label) -> pPopupEntry

        @param pFlObject: nmenu object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_nmenu_item_by_label = library.cfuncproto(
        library.load_so_libforms(), "fl_get_nmenu_item_by_label",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """FL_POPUP_ENTRY * fl_get_nmenu_item_by_label(FL_OBJECT * p1,
           const char * p2)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(pFlObject, label, slabel)
    retval = _fl_get_nmenu_item_by_label(pFlObject, slabel)
    return retval


def fl_get_nmenu_item_by_text(pFlObject, text):
    """
        fl_get_nmenu_item_by_text(pFlObject, text) -> pPopupEntry

        @param pFlObject: nmenu object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_nmenu_item_by_text = library.cfuncproto(
        library.load_so_libforms(), "fl_get_nmenu_item_by_text",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """FL_POPUP_ENTRY * fl_get_nmenu_item_by_text(FL_OBJECT * p1,
           const char * p2)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    stext = library.convert_to_string(text)
    library.keep_elem_refs(pFlObject, text, stext)
    retval = _fl_get_nmenu_item_by_text(pFlObject, stext)
    return retval


def fl_set_nmenu_policy(pFlObject, num):
    """
        fl_set_nmenu_policy(pFlObject, num) -> num.

        @param pFlObject: nmenu object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_nmenu_policy = library.cfuncproto(
        library.load_so_libforms(), "fl_set_nmenu_policy",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_nmenu_policy(FL_OBJECT * p1, int p2)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    inum = library.convert_to_int(num)
    library.keep_elem_refs(pFlObject, num, inum)
    retval = _fl_set_nmenu_policy(pFlObject, inum)
    return retval


def fl_set_nmenu_hl_text_color(pFlObject, colr):
    """
        fl_set_nmenu_hl_text_color(pFlObject, colr) -> color

        @param pFlObject: nmenu object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_nmenu_hl_text_color = library.cfuncproto(
        library.load_so_libforms(), "fl_set_nmenu_hl_text_color",
        xfdata.FL_COLOR, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_COLOR],
        """FL_COLOR fl_set_nmenu_hl_text_color(FL_OBJECT * p1,
           FL_COLOR p2)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(pFlObject, colr, ulcolr)
    retval = _fl_set_nmenu_hl_text_color(pFlObject, ulcolr)
    return retval


