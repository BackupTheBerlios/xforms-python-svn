#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage timer objects.
"""

#    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
#    e-mail: <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata


######################
# forms.h (timer.h)
# Object Class: Timer
######################

# Routines

# fl_create_timer function placeholder (internal)


def fl_add_timer(timertype, x, y, w, h, label):
    """fl_add_timer(timertype, x, y, w, h, label)
    
    Adds a timer object.

    Parameters
    ----------
        timertype : int
            type of timer to be added. Values (from xfdata.py)
            FL_NORMAL_TIMER, FL_VALUE_TIMER, FL_HIDDEN_TIMER
        x : int
            horizontal position (upper-left corner)
        y : int
            vertical position (upper-left corner)
        w : int
            width in coord units
        h : int
            height in coord units
        label : str
            text label of timer

    Returns
    -------
        pFlObject : pointer to xfdata.FL_OBJECT
            timer object added

    Examples
    --------
        >>> ptimerobj = fl_add_timer(xfdata.FL_NORMAL_TIMER, 120, 120,
                210, 210, "My Timer")

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_add_timer = library.cfuncproto(
        library.load_so_libforms(), "fl_add_timer",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_timer(int type, FL_Coord x, FL_Coord y,
        FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(timertype, \
            xfdata.TIMERTYPE_list)
    itimertype = library.convert_to_int(timertype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(timertype, x, y, w, h, label, itimertype, \
            ix, iy, iw, ih, slabel)
    retval = _fl_add_timer(itimertype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_timer(pFlObject, delay):
    """fl_set_timer(pFlObject, delay)
    
    Sets the timer to a particular value.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            timer object
        delay : float
            number of seconds the timer should run. If it is 0.0,
            resets/de-blinks the timer.

    Examples
    --------
        >>> fl_set_timer(ptimerobj, 20)

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_set_timer = library.cfuncproto(
        library.load_so_libforms(), "fl_set_timer",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_timer(FL_OBJECT * ob, double total)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    fdelay = library.convert_to_double(delay)
    library.keep_elem_refs(pFlObject, delay, fdelay)
    _fl_set_timer(pFlObject, fdelay)


def fl_get_timer(pFlObject):
    """fl_get_timer(pFlObject)
    
    Obtains the time left in the timer.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            timer object

    Returns
    -------
        ltime : float
            time left

    Examples
    --------
        >>> lefttim = fl_get_timer(ptimerobj)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_timer = library.cfuncproto(
        library.load_so_libforms(), "fl_get_timer",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
        """double fl_get_timer(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_timer(pFlObject)
    return retval


def fl_set_timer_countup(pFlObject, yesno):
    """fl_set_timer_countup(pFlObject, yesno)
    
    Changes timer behavior so the timer counts up and shows elapsed time.
    By default, a timer counts down toward zero and the value shown (for
    xfdata.FL_VALUE_TIMERs) is the time left until the timer expires.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            timer object
        yesno : int
            flag to set count up or down. Values 0 (counts down and shows
            time left) or 1 (counts up and shows elapsed time)

    Examples
    --------
        >>> fl_set_timer_countup(ptimerobj, 1)

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_set_timer_countup = library.cfuncproto(
        library.load_so_libforms(), "fl_set_timer_countup",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_timer_countup(FL_OBJECT * ob, int yes)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iyesno = library.convert_to_int(yesno)
    library.keep_elem_refs(pFlObject, yesno, iyesno)
    _fl_set_timer_countup(pFlObject, iyesno)



def fl_set_timer_filter(pFlObject, py_TimerFilter):
    """fl_set_timer_filter(pFlObject, py_TimerFilter)
    
    Sets a function to change the way the time is presented in
    xfdata.FL_VALUE_TIMER. By default, it returns the time in a
    hour:minutes:seconds.fraction format

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            timer object
        py_TimerFilter : python callback function, returned value
            name referring to function(pFlObject, float secs) -> str
            Parameter secs is time left for count-down timers and the
            elapsed time for up-counting timers (in units of seconds).
            Returns string representation of time.

    Returns
    -------
        TimerFilter : pointer to xfdata.FL_TIMER_FILTER
            old timer filter function

    Examples
    --------
        >>> def timefilt(pobj, elapsedsecs):
        >>> ... <something>
        >>> ... return newstr
        >>> oldtimerfunc = fl_set_timer_filter(ptimerobj, timefilt)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    #FL_TIMER_FILTER = cty.CFUNCTYPE(xfdata.STRING,
    #           cty.POINTER(xfdata.FL_OBJECT), cty.c_double)
    _fl_set_timer_filter = library.cfuncproto(
        library.load_so_libforms(), "fl_set_timer_filter",
        xfdata.FL_TIMER_FILTER, [cty.POINTER(xfdata.FL_OBJECT),
        xfdata.FL_TIMER_FILTER],
        """FL_TIMER_FILTER fl_set_timer_filter(FL_OBJECT * ob,
           FL_TIMER_FILTER filter)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.verify_function_type(py_TimerFilter)
    c_TimerFilter = xfdata.FL_TIMER_FILTER(py_TimerFilter)
    library.keep_cfunc_refs(c_TimerFilter, py_TimerFilter)
    library.keep_elem_refs(pFlObject)
    retval = _fl_set_timer_filter(pFlObject, c_TimerFilter)
    return retval


def fl_suspend_timer(pFlObject):
    """fl_suspend_timer(pFlObject)
    
    Suspends timer, pausing time.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            timer object

    Examples
    --------
        >>> fl_suspend_timer(ptimerobj)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_suspend_timer = library.cfuncproto(
        library.load_so_libforms(), "fl_suspend_timer",
        None, [cty.POINTER(xfdata.FL_OBJECT)],
        """void fl_suspend_timer(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_suspend_timer(pFlObject)


def fl_resume_timer(pFlObject):
    """fl_resume_timer(pFlObject)
    
    Resumes timer previously paused (with fl_suspend_timer). Unlike
    fl_set_timer() a suspended timer keeps its internal state (total
    delay, time left etc.), so when it is resumed, it starts from
    where it was suspended.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            timer object

    Examples
    --------
        >>> fl_resume_timer(ptimobj)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_resume_timer = library.cfuncproto(
        library.load_so_libforms(), "fl_resume_timer",
        None, [cty.POINTER(xfdata.FL_OBJECT)],
        """void fl_resume_timer(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_resume_timer(pFlObject)

