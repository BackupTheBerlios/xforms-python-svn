#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage cursor objects.

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
    e-mail: <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata


#############################
# forms.h (cursor.h)
# Cursor defs and prototypes
#############################


def fl_set_cursor(win, cursnum):
    """Set cursor for window to a specific cursor number.

    --

    :Parameters:
      `win` : long_pos
        window
      `cursnum` : int
        cursor id (either the standard XC_* or Form defined)

    :note: e.g. fl_set_cursor(win0, xfdata.FL_CROSSHAIR_CURSOR)

    :status: Tested + Doc + Demo = OK

    """
    _fl_set_cursor = library.cfuncproto(
        library.load_so_libforms(), "fl_set_cursor",
        None, [xfdata.Window, cty.c_int],
        """void fl_set_cursor(Window win, int name)""")
    library.check_if_initialized()
    ulwin = library.convert_to_Window(win)
    icursnum = library.convert_to_int(cursnum)
    library.keep_elem_refs(win, cursnum, ulwin, icursnum)
    _fl_set_cursor(ulwin, icursnum)


def fl_set_cursor_color(cursnum, fgcolr, bgcolr):
    """Sets foreground and background colors of a cursor.

    --

    :Parameters:
      `cursnum` : int
        cursor id
      `fgcolr` : long_pos
        foreground color to be set
      `bgcolr` : long_pos
        background color to be set

    :note: e.g. fl_set_cursor_color(FL_CROSSHAIR_CURSOR, xfdata.FL_WHITE,
        xfdata.FL_ORANGE)

    :status: Tested + Doc + Demo = OK

    """
    _fl_set_cursor_color = library.cfuncproto(
        library.load_so_libforms(), "fl_set_cursor_color",
        None, [cty.c_int, xfdata.FL_COLOR, xfdata.FL_COLOR],
        """void fl_set_cursor_color(int name, FL_COLOR fg, FL_COLOR bg)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(fgcolr, xfdata.COLOR_list)
    library.checkfatal_allowed_value_in_list(bgcolr, xfdata.COLOR_list)
    icursnum = library.convert_to_int(cursnum)
    ulfgcolr = library.convert_to_FL_COLOR(fgcolr)
    ulbgcolr = library.convert_to_FL_COLOR(bgcolr)
    library.keep_elem_refs(cursnum, fgcolr, bgcolr, icursnum, ulfgcolr, \
                           ulbgcolr)
    _fl_set_cursor_color(icursnum, ulfgcolr, ulbgcolr)


def fl_create_bitmap_cursor(source, maskstr, w, h, hotx, hoty):
    """Creates a bitmap cursor, using cursors other than those defined by
    the standard cursor font.

    --

    :Parameters:
      `source` : str?
        bitmap to be used as cursor.
      `maskstr` : str?
        bitmap defining the shape of the cursor. The pixels set to 1 in the
        mask define which source pixels are displayed. If mask is None all
        bits in source are displayed.
      `w` : int
        width of cursor
      `h` : int
        height of cursor
      `hotx` : int
        horizontal hotspot of the cursor (relative to the source's origin)
      `hoty` : int
        vertical hotspot of the cursor (relative to the source's origin)

    :return: cursor id
    :rtype: int

    :note: e.g. *todo*

    :status: Tested + Doc + Demo = OK

    """
    _fl_create_bitmap_cursor = library.cfuncproto(
        library.load_so_libforms(), "fl_create_bitmap_cursor",
        cty.c_int, [xfdata.STRING, xfdata.STRING, cty.c_int, cty.c_int,
        cty.c_int, cty.c_int],
        """int fl_create_bitmap_cursor(const char * source,
           const char * mask, int w, int h, int hotx, int hoty)""")
    library.check_if_initialized()
    ssource = library.convert_to_string(source)
    smaskstr = library.convert_to_string(maskstr)
    iw = library.convert_to_int(w)
    ih = library.convert_to_FL_Coord(h)
    ihotx = library.convert_to_int(hotx)
    ihoty = library.convert_to_int(hoty)
    library.keep_elem_refs(source, maskstr, w, h, hotx, hoty, ssource, \
                           smaskstr, iw, ih, ihotx, ihoty)
    retval = _fl_create_bitmap_cursor(ssource, smaskstr, iw, ih, ihotx, ihoty)
    return retval


def fl_create_animated_cursor(curseries, timeout):
    """Creates an animated series of cursors, that change after timeout
    is expired (several cursors are displayed one after another). Internally
    animated cursor works by utilizing the timeout callback, this means that
    if the application blocks (thus the main loop has no chance of servicing
    the timeouts), the animation will stop.

    --

    :Parameters:
      `curseries` : str of ubytes
        array of cursor names (either X standard cursors or cursor names
        returned by fl_create_bitmap_cursor()), terminated by -1.
      `timeout` : int
        time after which the cursor is changed, replacing by the next in
        the array. An interval about 150 msec is a good value for typical
        uses.

    :return: cursor id
    :rtype: int

    :note: e.g. *todo*

    :status: HalfTested + Doc + Demo = NOT OK (curnums data problematic)

    """
    _fl_create_animated_cursor = library.cfuncproto(
        library.load_so_libforms(), "fl_create_animated_cursor",
        cty.c_int, [cty.POINTER(cty.c_int), cty.c_int],
        """int fl_create_animated_cursor(int * cur_names, int timeout)""")
    library.check_if_initialized()
    pcurseries = cty.cast(curseries, cty.POINTER(cty.c_int))
    #print "pcurnums", pcurnums
    itimeout = library.convert_to_int(timeout)
    library.keep_elem_refs(curseries, timeout, pcurseries, itimeout)
    retval = _fl_create_animated_cursor(pcurseries, itimeout)
    return retval


def fl_get_cursor_byname(cursnum):
    """Returns cursor corresponding to its number (cursor id).

    --

    :Parameters:
      `cursnum` : int
        cursor id

    :return: cursor
    :rtype: long_pos

    :note: e.g. *todo*

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_get_cursor_byname = library.cfuncproto(
        library.load_so_libforms(), "fl_get_cursor_byname",
        xfdata.Cursor, [cty.c_int],
        """Cursor fl_get_cursor_byname(int name)""")
    library.check_if_initialized()
    icursnum = library.convert_to_int(cursnum)
    library.keep_elem_refs(cursnum, icursnum)
    retval = _fl_get_cursor_byname(icursnum)
    return retval


def fl_reset_cursor(win):
    """Reset used cursor, reverting to default one.

    --

    :Parameters:
      `win` : long_pos
        window

    :note: e.g. fl_reset_cursor(win0)

    :status: Tested + Doc + Demo = OK

    """
    fl_set_cursor(win, xfdata.FL_DEFAULT_CURSOR)
