#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python
    Python wrapper for XForms (X11) GUI C toolkit library using ctypes

    Copyright (C) 2009  Luca Lazzaroni "LukenShiro"  <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read XForms, ctypes and other acknowledgements
    and thanks.
"""

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

######################################################
# Data structures for XForms shared object libraries #
######################################################

import ctypes as cty


########################################
# forms.h (Basic.h)
#  Basic definitions and limits.
#  Window system independent prototypes
#  Modify with care
########################################

# The screen coordinate unit, FL_Coord, must be of signed type.
# If FL_Coord is float, FL_CoordIsFloat must be defined to be 1 so that
# round-off error can be checked. **TODO Float not tested
FL_Coord = cty.c_int

FL_COLOR = cty.c_ulong

# Coordinates can be in pixels, milli-meters or points (1/72inch)
# values for enumeration 'FL_COORD_UNIT'
FL_COORD_UNIT = cty.c_int  # enum

# All object classes.
# values for enumeration 'FL_CLASS'
FL_CLASS = cty.c_int  # enum

# how to display a form onto screen
# values for enumeration 'FL_PLACE'
FL_PLACE = cty.c_int # enum

# All box types
# values for enumeration 'FL_BOX_TYPE'
FL_BOX_TYPE = cty.c_int  # enum

# How to place text relative to a box
# values for enumeration 'FL_ALIGN'
FL_ALIGN = cty.c_int  # enum


# Some special color indices for FL private colormap.
# It does not matter  what the value of each enum is,
# but it must start from 0 and be consecutive.
# values for enumeration 'FL_PD_COL'
FL_PD_COL = cty.c_int  # enum


# Events that a form reacts to.
# values for enumeration 'FL_EVENTS'
FL_EVENTS = cty.c_int # enum

# Resize policies
# values for enumeration 'FL_RESIZE_T'
FL_RESIZE_T = cty.c_int  # enum

# Keyboard focus control
# values for enumeration 'FL_KEY'
FL_KEY = cty.c_int  # enum


# Popup and menu entries

FL_PUP_CB = cty.CFUNCTYPE(cty.c_int, cty.c_int)   # callback prototype

STRING = cty.c_char_p
WSTRING = cty.c_wchar_p

class FL_PUP_ENTRY(cty.Structure):
    pass
FL_PUP_ENTRY._fields_ = [
    ('text', STRING),               # label of a popup/menu item
    ('callback', FL_PUP_CB),        # the callback function
    ('shortcut', STRING),           # hotkeys
    ('mode', cty.c_int),            # FL_PUP_GRAY, FL_PUP_CHECK, etcty.
    ('reserved', cty.c_long * 2),   # left in for backward compatibility
]

FL_MENU_ENTRY = FL_PUP_ENTRY

# ***** FONTS *****

# values for enumeration 'FL_TEXT_STYLE'
FL_TEXT_STYLE = cty.c_int # enum
FL_FONT_STYLE = FL_TEXT_STYLE


FL_BOUND_WIDTH = FL_Coord(1)     # Border width of boxes

# Definition of basic struct that holds an object

XPointer = STRING    # cty.c_char_p

# /usr/include/X11/Xlib.h 159
class _XExtData(cty.Structure):
    pass
_XExtData._fields_ = [
    ('number', cty.c_int),
    ('next', cty.POINTER(_XExtData)),
    ('free_private', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XExtData))),
    ('private_data', XPointer),
]
XExtData = _XExtData

VisualID = cty.c_ulong


# /usr/include/X11/Xlib.h 249
class Visual(cty.Structure):
    pass
Visual._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('visualid', VisualID),
    ('c_class', cty.c_int),
    ('red_mask', cty.c_ulong),
    ('green_mask', cty.c_ulong),
    ('blue_mask', cty.c_ulong),
    ('bits_per_rgb', cty.c_int),
    ('map_entries', cty.c_int),
]

# /usr/include/X11/Xutil.h 296
class XVisualInfo(cty.Structure):
    pass
XVisualInfo._fields_ = [
    ('visual', cty.POINTER(Visual)),
    ('visualid', VisualID),
    ('screen', cty.c_int),
    ('depth', cty.c_int),
    ('c_class', cty.c_int),
    ('red_mask', cty.c_ulong),
    ('green_mask', cty.c_ulong),
    ('blue_mask', cty.c_ulong),
    ('colormap_size', cty.c_int),
    ('bits_per_rgb', cty.c_int),
]

XID = cty.c_ulong
Window = XID    # cty.c_ulong
Pixmap = XID    # cty.c_ulong

class FL_FORM_(cty.Structure):
    pass
FL_FORM = FL_FORM_

class FL_OBJECT_(cty.Structure):
    pass
FL_OBJECT = FL_OBJECT_

# my add --LK
FL_OBJECT_ptr = cty.POINTER(FL_OBJECT)
FL_FORM_ptr = cty.POINTER(FL_FORM)
LONG = cty.c_long

class FL_pixmap_(cty.Structure):
    pass
FL_pixmap = FL_pixmap_

# All pixmaps used by FL_OBJECT to simulate double buffering have the
# following entries in the structure. FL_Coord x,y are used to shift
# the origin of the drawing routines
FL_pixmap_._fields_ = [
    ('pixmap', Pixmap),
    ('win', Window),
    ('visual', cty.POINTER(Visual)),
    ('x', FL_Coord),
    ('y', FL_Coord),
    ('w', FL_Coord),
    ('h', FL_Coord),
    ('depth', cty.c_int),
    ('dbl_background', FL_COLOR),
    ('pixel', FL_COLOR),
]

# callback function for an entire form
FL_FORMCALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_void_p)

# object callback function
FL_CALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_long)

# preemptive callback function
FL_RAW_CALLBACK = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_FORM), cty.c_void_p)

# at close (WM menu delete/close etcty.)
FL_FORM_ATCLOSE = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_FORM), cty.c_void_p)

# deactivate/activate callback
FL_FORM_ATDEACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(FL_FORM), cty.c_void_p)
FL_FORM_ATACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(FL_FORM), cty.c_void_p)
FL_HANDLEPTR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), cty.c_int, \
                FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)

FL_FORM_._pack_ = 4
FL_FORM_._fields_ = [
    ('fdui', cty.c_void_p),               # for fdesign
    ('u_vdata', cty.c_void_p),            # for application
    ('u_cdata', STRING),                # for application
    ('u_ldata', cty.c_long),              # for application
    ('label', STRING),                  # window title
    ('window', Window),                 # X resource ID for window
    ('x', FL_Coord),                    # current geometry info
    ('y', FL_Coord),
    ('w', FL_Coord),
    ('h', FL_Coord),
    ('in_redraw', cty.c_int),             # set while form is drawn
    ('handle_dec_x', cty.c_int),
    ('handle_dec_y', cty.c_int),
    ('hotx', FL_Coord),                 # hot-spot of the form
    ('hoty', FL_Coord),
    ('w_hr', cty.c_double),               # high resolution width and height
    ('h_hr', cty.c_double),               # (needed for precise scaling)
    ('first', cty.POINTER(FL_OBJECT)),
    ('last', cty.POINTER(FL_OBJECT)),
    ('focusobj', cty.POINTER(FL_OBJECT)),
    ('form_callback', FL_FORMCALLBACKPTR),
    ('activate_callback', FL_FORM_ATACTIVATE),
    ('deactivate_callback', FL_FORM_ATDEACTIVATE),
    ('form_cb_data', cty.c_void_p),
    ('activate_data', cty.c_void_p),
    ('deactivate_data', cty.c_void_p),
    ('key_callback', FL_RAW_CALLBACK),
    ('push_callback', FL_RAW_CALLBACK),
    ('crossing_callback', FL_RAW_CALLBACK),
    ('motion_callback', FL_RAW_CALLBACK),
    ('all_callback', FL_RAW_CALLBACK),
    ('compress_mask', cty.c_ulong),
    ('evmask', cty.c_ulong),
    # WM_DELETE_WINDOW message handler
    ('close_callback', FL_FORM_ATCLOSE),
    ('close_data', cty.c_void_p),
    ('flpixmap', cty.POINTER(FL_pixmap)),     # back buffer
    ('icon_pixmap', Pixmap),
    ('icon_mask', Pixmap),
    # interaction and other flags
    ('vmode', cty.c_int),                     # current X visual class
    ('deactivated', cty.c_int),               # true if sensitive
    ('use_pixmap', cty.c_int),                # true if dbl buffering
    ('frozen', cty.c_int),                    # true if sync change
    ('visible', cty.c_int),                   # true if mapped
    ('wm_border', cty.c_int),                 # window manager info
    ('prop', cty.c_uint),                     # other attributes
    ('has_auto_objects', cty.c_int),
    ('top', cty.c_int),
    ('sort_of_modal', cty.c_int),             # internal use
    ('parent', cty.POINTER(FL_FORM)),
    ('child', cty.POINTER(FL_FORM)),
    ('parent_obj', cty.POINTER(FL_OBJECT)),
    ('attached', cty.c_int),                  # not independent anymore
    ('pre_attach', cty.CFUNCTYPE(None, cty.POINTER(FL_FORM))),
    ('attach_data', cty.c_void_p),
    ('no_tooltip', cty.c_int),
]

FL_OBJECT_._pack_ = 4
FL_OBJECT_._fields_ = [
    ('form', cty.POINTER(FL_FORM)),       # the form this object belongs to
    ('u_vdata', cty.c_void_p),            # anything the user likes
    ('u_cdata', STRING),                # anything the user likes
    ('u_ldata', cty.c_long),              # anything the user likes
    ('objclass', cty.c_int),              # class of object, button, slider etc
    ('type', cty.c_int),                  # type within the class
    ('boxtype', cty.c_int),               # what kind of box type
    ('x', FL_Coord),                    # current obj. location and size
    ('y', FL_Coord),
    ('w', FL_Coord),
    ('h', FL_Coord),
    ('fl1', cty.c_double),                # distances of upper left hand (1) and
    ('fr1', cty.c_double),                # lower right hand corner (2) to left,
    ('ft1', cty.c_double),                # right, top and bottom of enclosing
    ('fb1', cty.c_double),                # form
    ('fl2', cty.c_double),
    ('fr2', cty.c_double),
    ('ft2', cty.c_double),
    ('fb2', cty.c_double),
    ('bw', FL_Coord),
    ('col1', FL_COLOR),                 # colors of obj
    ('col2', FL_COLOR),
    ('label', STRING),                  # object label
    ('lcol', FL_COLOR),                 # label color
    ('align', cty.c_int),
    ('lsize', cty.c_int),                 # label size and style
    ('lstyle', cty.c_int),
    ('shortcut', cty.POINTER(cty.c_long)),
    ('handle', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), cty.c_int, \
    FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)),
    ('object_callback', cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), \
    cty.c_long)),
    ('argument', cty.c_long),
    ('spec', cty.c_void_p),               # instantiation
    ('prehandle', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
    cty.c_int, FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)),
    ('posthandle', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
    cty.c_int, FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)),
    ('set_return', cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_int)),
    # re-configure preference
    ('resize', cty.c_uint),               # what to do if WM resizes the FORM
    ('nwgravity', cty.c_uint),            # how to re-position top-left corner
    ('segravity', cty.c_uint),         # how to re-position lower-right corner
    ('prev', cty.POINTER(FL_OBJECT)),     # prev. obj in form
    ('next', cty.POINTER(FL_OBJECT)),     # next obj in form
    ('parent', cty.POINTER(FL_OBJECT)),
    ('child', cty.POINTER(FL_OBJECT)),
    ('nc', cty.POINTER(FL_OBJECT)),
    ('returned', cty.c_int),
    ('flpixmap', cty.POINTER(FL_pixmap)), # pixmap double buffering stateinfo
    ('use_pixmap', cty.c_int),          # true to use pixmap double buffering
    # some interaction flags
    ('double_buffer', cty.c_int),         # only used by mesa/gl canvas
    ('pushed', cty.c_int),
    ('focus', cty.c_int),
    ('belowmouse', cty.c_int),
    ('active', cty.c_int),                # if accept event
    ('input', cty.c_int),
    ('wantkey', cty.c_int),
    ('radio', cty.c_int),
    ('automatic', cty.c_int),
    ('redraw', cty.c_int),
    ('visible', cty.c_int),
    ('is_under', cty.c_int),          # if (partially) hidden by other object
    ('clip', cty.c_int),
    ('click_timeout', cty.c_ulong),
    ('c_vdata', cty.c_void_p),            # for class use
    ('c_cdata', STRING),                # for class use
    ('c_ldata', cty.c_long),              # for class use
    ('aux_col1', FL_COLOR),             # aux colors
    ('aux_col2', FL_COLOR),
    ('dbl_background', FL_COLOR),       # double buffer background
    ('how_return', cty.c_int),
    ('tooltip', STRING),
    ('tipID', cty.c_int),
    ('group_id', cty.c_int),
    ('want_motion', cty.c_int),
    ('want_update', cty.c_int),
]

# error callback
FL_ERROR_FUNC = cty.CFUNCTYPE(None, STRING, STRING)

# FL_EVENT already defined in main library

# All FD_xxx structure emitted by fdesign contains at least the
# following
class FD_Any(cty.Structure):
    pass
FD_Any._fields_ = [
    ('form', cty.POINTER(FL_FORM)),
    ('vdata', cty.c_void_p),
    ('cdata', STRING),
    ('ldata', cty.c_long),
]


# IO other than XEvent Q

FL_IO_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)

# signals

FL_SIGNAL_HANDLER = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)

#timeouts

FL_TIMEOUT_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)

# cfunction for _fl_for_all_objects
cfunc_int_pobject_pvoid = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
                                        cty.c_void_p)

# cfunction for _fl_enumerate_fonts
cfunc_none_string = cty.CFUNCTYPE(None, STRING)

FL_DRAWPTR = cty.CFUNCTYPE(None, FL_Coord, FL_Coord, FL_Coord, FL_Coord,
                           cty.c_int, FL_COLOR)

FL_FSCB = cty.CFUNCTYPE(cty.c_int, STRING, cty.c_void_p)

size_t = cty.c_uint

# cfunction for _fl_malloc
cfunc_none_sizet = cty.CFUNCTYPE(cty.c_void_p, size_t)

# cfunction for _fl_calloc
cfunc_none_sizet_sizet = cty.CFUNCTYPE(cty.c_void_p, size_t, size_t)

# cfunction for _fl_realloc
cfunc_voidp_voidp_sizet = cty.CFUNCTYPE(cty.c_void_p, cty.c_void_p, size_t)


FL_VAL_FILTER = cty.CFUNCTYPE(STRING, cty.POINTER(FL_OBJECT), cty.c_double, \
                              cty.c_int)


# FL graphics state information. Some are redundant.

Font = XID    # cty.c_ulong
Atom = cty.c_ulong

# /usr/include/X11/Xlib.h 1044
class XFontProp(cty.Structure):
    pass
XFontProp._fields_ = [
    ('name', Atom),
    ('card32', cty.c_ulong),
]

# /usr/include/X11/Xlib.h 1035
class XCharStruct(cty.Structure):
    pass
XCharStruct._fields_ = [
    ('lbearing', cty.c_short),
    ('rbearing', cty.c_short),
    ('width', cty.c_short),
    ('ascent', cty.c_short),
    ('descent', cty.c_short),
    ('attributes',  cty.c_ushort),
]

# /usr/include/X11/Xlib.h 1050
class XFontStruct(cty.Structure):
    pass
XFontStruct._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('fid', Font),
    ('direction', cty.c_uint),
    ('min_char_or_byte2', cty.c_uint),
    ('max_char_or_byte2', cty.c_uint),
    ('min_byte1', cty.c_uint),
    ('max_byte1', cty.c_uint),
    ('all_chars_exist', cty.c_int),
    ('default_char', cty.c_uint),
    ('n_properties', cty.c_int),
    ('properties', cty.POINTER(XFontProp)),
    ('min_bounds', XCharStruct),
    ('max_bounds', XCharStruct),
    ('per_char', cty.POINTER(XCharStruct)),
    ('ascent', cty.c_int),
    ('descent', cty.c_int),
]

Colormap = XID    # cty.c_ulong

# /usr/include/X11/Xlib.h 225
class _XGC(cty.Structure):
    pass
GC = cty.POINTER(_XGC)

class FL_State(cty.Structure):
    pass
FL_State._fields_ = [
    ('xvinfo', cty.POINTER(XVisualInfo)),
    ('cur_fnt', cty.POINTER(XFontStruct)),
    ('colormap', Colormap),
    ('trailblazer', Window),
    ('vclass', cty.c_int),
    ('depth', cty.c_int),
    ('rgb_bits', cty.c_int),
    ('dithered', cty.c_int),
    ('pcm', cty.c_int),
    ('gc', GC * 16),
    ('textgc', GC * 16),
    ('dimmedGC', GC),
    ('lut', cty.c_ulong * 1024),
    ('rshift', cty.c_uint),
    ('rmask', cty.c_uint),
    ('rbits', cty.c_uint),
    ('gshift', cty.c_uint),
    ('gmask', cty.c_uint),
    ('gbits', cty.c_uint),
    ('bshift', cty.c_uint),
    ('bmask', cty.c_uint),
    ('bbits', cty.c_uint),
]

FL_STATE = FL_State     # for compatibility


# Global variables
# /usr/include/X11/Xlib.h 266
class _XDisplay(cty.Structure):
    pass
_XDisplay._fields_ = []

Display = _XDisplay
#Display = _XDisplay.in_dll(so_libforms, "_XDisplay") # NOTWORKING


# fl_state and fl_display already defined in main library
#fl_screen = (cty.c_int).in_dll(so_libforms, 'fl_screen')
fl_screen = cty.c_int
#fl_root = (Window).in_dll(so_libforms, 'fl_root')       # root window
fl_root = Window    # cty.c_ulong
#fl_vroot = (Window).in_dll(so_libforms, 'fl_vroot')     # virtual root window
fl_vroot = Window    # cty.c_ulong
#fl_scrh = (cty.c_int).in_dll(so_libforms, 'fl_scrh')      # screen dimension in pixels
fl_scrh = cty.c_int
#fl_scrw = (cty.c_int).in_dll(so_libforms, 'fl_scrw')
fl_scrw = cty.c_int
#fl_vmode = (cty.c_int).in_dll(so_libforms, 'fl_vmode')
fl_vmode = cty.c_int


# Fonts related

FL_MAX_FONTSIZES = 10

class FL_FONT(cty.Structure):
    pass
FL_FONT._fields_ = [
    ('fs', cty.POINTER(XFontStruct) * FL_MAX_FONTSIZES),
    ('size', cty.c_short * FL_MAX_FONTSIZES),
    ('nsize', cty.c_short),
    ('fname', cty.c_char * 80),
]

# /usr/include/X11/Xlib.h 439
class XPoint(cty.Structure):
    pass
FL_POINT = XPoint

# /usr/include/X11/Xlib.h 444
class XRectangle(cty.Structure):
    pass
FL_RECT = XRectangle


# my add --LK
class XEvent(cty.Union):
    pass
XEvent._fields_ = []

FL_APPEVENT_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(XEvent), cty.c_void_p)

# Resources

# values for enumeration 'FL_RTYPE'
FL_RTYPE = cty.c_int  # enum

class FL_RESOURCE(cty.Structure):
    pass
FL_RESOURCE._fields_ = [
    ('res_name', STRING),           # resource name
    ('res_class', STRING),          # resource class
    ('type', FL_RTYPE),             # FL_INT, FL_FLOAT, FL_BOOL, FL_STRING
    ('var', cty.c_void_p),            # address for the variable
    ('defval', STRING),             # default setting in string form
    ('nbytes', cty.c_int),            # used only for strings
]

# values for enumeration 'XrmOptionKind'
XrmOptionKind = cty.c_int # enum


# /usr/include/X11/Xresource.h 345
class XrmOptionDescRec(cty.Structure):
    pass
XrmOptionDescRec._fields_ = [
    ('option', STRING),
    ('specifier', STRING),
    ('argKind', XrmOptionKind),
    ('value', XPointer),
]
XrmOptionDescList = cty.POINTER(XrmOptionDescRec)

FL_CMD_OPT = XrmOptionDescRec

FL_resource = FL_RESOURCE

KeySym = XID    # cty.c_ulong


# All Form control variables. Named closely as its resource name

class FL_IOPT(cty.Structure):
    pass
FL_IOPT._fields_ = [
    ('rgamma', cty.c_float),
    ('ggamma', cty.c_float),
    ('bgamma', cty.c_float),
    ('debug', cty.c_int),
    ('sync', cty.c_int),
    ('depth', cty.c_int),
    ('vclass', cty.c_int),
    ('doubleBuffer', cty.c_int),
    ('ulPropWidth', cty.c_int),           # underline stuff
    ('ulThickness', cty.c_int),
    ('buttonFontSize', cty.c_int),
    ('sliderFontSize', cty.c_int),
    ('inputFontSize', cty.c_int),
    ('browserFontSize', cty.c_int),
    ('menuFontSize', cty.c_int),
    ('choiceFontSize', cty.c_int),
    ('labelFontSize', cty.c_int),         # all other labels fonts
    ('pupFontSize', cty.c_int),           # font for pop-up menus
    ('pupFontStyle', cty.c_int),
    ('privateColormap', cty.c_int),
    ('sharedColormap', cty.c_int),
    ('standardColormap', cty.c_int),
    ('scrollbarType', cty.c_int),
    ('backingStore', cty.c_int),
    ('coordUnit', cty.c_int),
    ('borderWidth', cty.c_int),
    ('safe', cty.c_int),
    ('rgbfile', STRING),                # where RGB file is
    ('vname', cty.c_char * 24),
]

# my add --LK
my_fl_iopt = FL_IOPT()

buttonLabelSize = my_fl_iopt.buttonFontSize
sliderLabelSize = my_fl_iopt.sliderFontSize
inputLabelSize = my_fl_iopt.inputFontSize


# pack and unpack colors
FL_PCTYPE = cty.c_ubyte

FL_PACKED4 = cty.c_uint
FL_PACKED = FL_PACKED4


class FL_RGB2PIXEL_(cty.Structure):
    pass
FL_RGB2PIXEL_._fields_ = [
    ('rshift', cty.c_uint),
    ('rmask', cty.c_uint),
    ('rbits', cty.c_uint),
    ('gshift', cty.c_uint),
    ('gmask', cty.c_uint),
    ('gbits', cty.c_uint),
    ('bshift', cty.c_uint),
    ('bmask', cty.c_uint),
    ('bbits', cty.c_uint),
    ('bits_per_rgb', cty.c_int),
    ('colormap_size', cty.c_int),
]

FL_RGB2PIXEL = FL_RGB2PIXEL_


# values for enumeration 'FL_SPINNER_TYPE'
FL_SPINNER_TYPE = cty.c_int # enum


class FL_POPUP_(cty.Structure):
    pass
FL_POPUP = FL_POPUP_

class FL_POPUP_ENTRY_(cty.Structure):
    pass
FL_POPUP_ENTRY = FL_POPUP_ENTRY_

class FL_POPUP_RETURN_(cty.Structure):
    pass
FL_POPUP_RETURN = FL_POPUP_RETURN_

FL_POPUP_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_POPUP_RETURN))

FL_POPUP_RETURN_._fields_ = [
    ('val', cty.c_long),              # value assigned to popup entry
    ('user_data', cty.c_void_p),      # pointer to user data
    ('text', STRING),               # text of the selected popup entry
    ('label', STRING),              # left-flushed label part
    ('accel', STRING),              # right-flushed label part
    ('entry', cty.POINTER(FL_POPUP_ENTRY)),   # pointer to selected popup entry
    ('popup', cty.POINTER(FL_POPUP)),         # popup we're called for
]

Cursor = XID    # cty.c_ulong

FL_POPUP_._fields_ = [
    ('next', cty.POINTER(FL_POPUP)),      # next in linked list
    ('prev', cty.POINTER(FL_POPUP)),      # previous in linked list
    ('parent', cty.POINTER(FL_POPUP)),        # for sub-popups: direct parent
    ('top_parent', cty.POINTER(FL_POPUP)),    # and top-most parent
    ('entries', cty.POINTER(FL_POPUP_ENTRY)),     # pointer to list of entries
    ('title', STRING),
    ('win', Window),                    # popup window
    ('parent_win', Window),             # parent window of popup window
    ('cursor', Cursor),                 # cursor for the popup
    ('callback', FL_POPUP_CB),
    ('use_req_pos', cty.c_int),           # if set use req_x, req_y
    ('req_x', cty.c_int),
    ('req_y', cty.c_int),
    ('x', cty.c_int),                     # position of popup window
    ('y', cty.c_int),
    ('w', cty.c_uint),                    # dimensions of popup window
    ('h', cty.c_uint),
    ('min_width', cty.c_int),             # minimum width of popup
    ('title_box_x', cty.c_int),           # position of title box
    ('title_box_y', cty.c_int),
    ('title_box_w', cty.c_uint),          # dimensions of title box
    ('title_box_h', cty.c_uint),
    ('has_subs', cty.c_int),
    ('has_boxes', cty.c_int),
    ('counter', cty.c_int),
    ('title_font_style', cty.c_int),
    ('title_font_size', cty.c_int),
    ('entry_font_style', cty.c_int),
    ('entry_font_size', cty.c_int),
    ('event_mask', cty.c_ulong),
    ('bw', cty.c_int),                    # border width
    ('bg_color', FL_COLOR),             # background color of popup
    ('on_color', FL_COLOR),             # color of entry under mouse
    ('title_color', FL_COLOR),          # color of title text
    ('text_color', FL_COLOR),           # normal text color of entry
    ('text_on_color', FL_COLOR),        # text color when mouse on entry
    ('text_off_color', FL_COLOR),       # text color of disabled entry
    ('radio_color', FL_COLOR),          # color of radio buttons
    ('policy', cty.c_int),
    ('need_recalc', cty.c_int),           # do we need to recalc position?
    ('ret', FL_POPUP_RETURN),     # structure passed to callbacks and returned
                                  # on selection
]

FL_POPUP_ENTRY_._fields_ = [
    ('prev', cty.POINTER(FL_POPUP_ENTRY)),    # next in linked list
    ('next', cty.POINTER(FL_POPUP_ENTRY)),    # previous in linked list
    ('popup', cty.POINTER(FL_POPUP)),         # popup it belongs to
    ('is_act', cty.c_int),                    # set while mouse is over it
    ('text', STRING),                       # complete text of entry
    ('label', STRING),                      # cleaned-up label text
    ('accel', STRING),                      # cleaned-up accelerator key text
    ('val', cty.c_long),                      # value associated with entry
    ('user_data', cty.c_void_p),              # pointer to user data
    ('type', cty.c_int),                      # normal, toggle, radio, sub-popup
    ('state', cty.c_uint),                    # disabled, hidden, checked
    ('group', cty.c_int),                     # group (for radio entries only)
    ('sub', cty.POINTER(FL_POPUP)),           # sub-popup bound to entry
    ('shortcut', cty.POINTER(cty.c_long)),      # keyboard shortcuts
    ('ulpos', cty.c_int),                     # underline position in text
    ('callback', FL_POPUP_CB),              # callback for entry
    ('enter_callback', FL_POPUP_CB),        # callback for entering entry
    ('leave_callback', FL_POPUP_CB),        # callback for leaving entry
    ('x', cty.c_int),                         # position of entry text
    ('y', cty.c_int),
    ('w', cty.c_uint),
    ('h', cty.c_uint),                        # height of entry text
    ('box_x', cty.c_int),
    ('box_y', cty.c_int),
    ('box_w', cty.c_uint),
    ('box_h', cty.c_uint),
    ('sl_h', cty.c_uint),
    ('ul_x', cty.c_int),
    ('ul_y', cty.c_int),
    ('ul_w', cty.c_uint),
    ('ul_h', cty.c_uint),
]

class FL_POPUP_ITEM(cty.Structure):
    pass
FL_POPUP_ITEM._fields_ = [
    ('text', STRING),               # text of entry
    ('callback', FL_POPUP_CB),      # (selection) callback
    ('shortcut', STRING),           # keyboard shortcut description
    ('type', cty.c_int),              # type of entry
    ('state', cty.c_int),             # disabled, hidden, checked
]


#######################
# forms.h (bitmap.h)
# Object Class: Bitmap
#######################

Drawable = XID    # cty.c_ulong


#######################
# forms.h (browser.h)
# Object class Browser
#######################

# values for enumeration 'FL_BROWSER_TYPE'
FL_BROWSER_TYPE = cty.c_int # enum

FL_BROWSER_SCROLL_CALLBACK = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT),
                cty.c_int, cty.c_void_p)


#############################################################
# forms.h (button.h)
# All Buttons: regular button, light button and round button
#############################################################

# values for enumeration 'FL_BUTTON_TYPE'
FL_BUTTON_TYPE = cty.c_int # enum


class FL_BUTTON_SPEC(cty.Structure):
    pass
FL_BUTTON_SPEC._fields_ = [
    ('pixmap', Pixmap),
    ('mask', Pixmap),
    ('bits_w', cty.c_uint),
    ('bits_h', cty.c_uint),
    ('val', cty.c_int),               # whether on
    ('mousebut', cty.c_int),          # mouse button that caused the push
    ('timdel', cty.c_int),            # time since last touch (TOUCH buttons)
    ('event', cty.c_int),             # what event triggers redraw
    ('is_pushed', cty.c_int),         # set while drawn as pushed down
    ('react_to', cty.c_int * 5),      # mouse buttons button reacts to
    ('cspecl', cty.c_long),           # reserved for class specfic stuff
    ('cspecv', cty.c_void_p),         # miscty. things
    ('filename', STRING),
    ('focus_pixmap', Pixmap),
    ('focus_mask', Pixmap),
    ('focus_filename', STRING),
]

FL_BUTTON_STRUCT = FL_BUTTON_SPEC

FL_DrawButton = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT))
FL_CleanupButton = cty.CFUNCTYPE(None, cty.POINTER(FL_BUTTON_SPEC))

FL_DRAWBUTTON = FL_DrawButton
FL_CLEANUPBUTTON = FL_CleanupButton


#######################
# forms.h (canvas.h)
# Header for FL_CANVAS
#######################

# values for enumeration 'FL_CANVAS_TYPE'
FL_CANVAS_TYPE = cty.c_int # enum


# /usr/include/X11/Xlib.h 317
class XSetWindowAttributes(cty.Structure):
    pass
XSetWindowAttributes._fields_ = [
    ('background_pixmap', Pixmap),
    ('background_pixel', cty.c_ulong),
    ('border_pixmap', Pixmap),
    ('border_pixel', cty.c_ulong),
    ('bit_gravity', cty.c_int),
    ('win_gravity', cty.c_int),
    ('backing_store', cty.c_int),
    ('backing_planes', cty.c_ulong),
    ('backing_pixel', cty.c_ulong),
    ('save_under', cty.c_int),
    ('event_mask', cty.c_long),
    ('do_not_propagate_mask', cty.c_long),
    ('override_redirect', cty.c_int),
    ('colormap', Colormap),
    ('cursor', Cursor),
]

FL_HANDLE_CANVAS = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), Window,
            cty.c_int, cty.c_int, cty.POINTER(XEvent), cty.c_void_p)

FL_MODIFY_CANVAS_PROP = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT))


#############
# glcanvas.h
#############

# my add --LK
class GLXContext (cty.Structure):
    pass
GLXContext._fields_ = []


#############################
# forms.h (chart.h)
# Object Class: Chart
#############################

# values for enumeration 'FL_CHART_TYPE'
FL_CHART_TYPE = cty.c_int # enum


#####################
# forms.h (choice.h)
#####################

# values for enumeration 'FL_CHOICE_TYPE'
FL_CHOICE_TYPE = cty.c_int # enum


#################################
# forms.h (clipbd.h)
# prototypes for clipboard stuff
#################################

FL_CPTYPE = Atom
FL_LOSE_SELECTION_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
                                     cty.c_long)
FL_SELECTION_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
                                cty.c_long, cty.c_void_p, cty.c_long)

FL_SELECTION_CALLBACK = FL_SELECTION_CB
FL_LOSE_SELECTION_CALLBACK = FL_LOSE_SELECTION_CB


######################
# forms.h (counter.h)
######################

# values for enumeration 'FL_COUNTER_TYPE'
FL_COUNTER_TYPE = cty.c_int # enum


###################
# forms.h (dial.h)
###################

# values for enumeration 'FL_DIAL_TYPE'
FL_DIAL_TYPE = cty.c_int # enum


############################################
# forms.h (filesys.h)
# Convenience functions to read a directory
############################################

class FL_Dirlist(cty.Structure):
    pass
FL_Dirlist._fields_ = [
    ('name', STRING),               # entry name
    ('type', cty.c_int),              # FILE_TYPE
    ('dl_mtime', cty.c_long),         # file modification time
    ('dl_size', cty.c_ulong),         # file size in bytes
]

FL_DIRLIST_FILTER = cty.CFUNCTYPE(cty.c_int, STRING, cty.c_int)


###################
# forms.h (flps.h)
###################

# postscript stuff

class FLPS_CONTROL(cty.Structure):
    pass
FLPS_CONTROL._fields_ = [
    ('ps_color', cty.c_int),
    ('orientation', cty.c_int),
    ('auto_fit', cty.c_int),
    ('drawbox', cty.c_int),
    ('eps', cty.c_int),
    ('xdpi', cty.c_float),
    ('ydpi', cty.c_float),
    ('paper_w', cty.c_float),
    ('paper_h', cty.c_float),
    ('gamma', cty.c_float),
    ('tmpdir', STRING),
    ('printer_dpi', cty.c_int),
    ('hm', cty.c_float),
    ('vm', cty.c_float),
    ('xscale', cty.c_float),
    ('yscale', cty.c_float),
    ('scale_text', cty.c_int),
    ('first_page_only', cty.c_int),
    ('clip', cty.c_int),
]


#####################
# forms.h (free.h)
# Object Class: Free
#####################

# values for enumeration 'FL_FREE_TYPE'
FL_FREE_TYPE = cty.c_int # enum


# command log

class FD_CMDLOG(cty.Structure):
    pass
FD_CMDLOG._fields_ = [
    ('form', cty.POINTER(FL_FORM)),
    ('vdata', cty.c_void_p),
    ('cdata', STRING),
    ('ldata', cty.c_long),
    ('browser', cty.POINTER(FL_OBJECT)),
    ('close_browser', cty.POINTER(FL_OBJECT)),
    ('clear_browser', cty.POINTER(FL_OBJECT)),
]

# file selector

class FD_FSELECTOR(cty.Structure):
    pass
FD_FSELECTOR._fields_ = [
    ('fselect', cty.POINTER(FL_FORM)),
    ('vdata', cty.c_void_p),
    ('cdata', cty.c_void_p),
    ('ldata', cty.c_long),
    ('browser', cty.POINTER(FL_OBJECT)),
    ('input', cty.POINTER(FL_OBJECT)),
    ('prompt', cty.POINTER(FL_OBJECT)),
    ('resbutt', cty.POINTER(FL_OBJECT)),
    ('patbutt', cty.POINTER(FL_OBJECT)),
    ('dirbutt', cty.POINTER(FL_OBJECT)),
    ('cancel', cty.POINTER(FL_OBJECT)),
    ('ready', cty.POINTER(FL_OBJECT)),
    ('dirlabel', cty.POINTER(FL_OBJECT)),
    ('patlabel', cty.POINTER(FL_OBJECT)),
    ('appbutt', cty.POINTER(FL_OBJECT) * 3),
]


####################
# forms.h (input.h)
####################

# Types
# values for enumeration 'FL_INPUT_TYPE'
FL_INPUT_TYPE = cty.c_int # enum


# edit keys

class FL_EditKeymap(cty.Structure):
    pass
FL_EditKeymap._fields_ = [
    ('del_prev_char', cty.c_long),        # delete previous char
    ('del_next_char', cty.c_long),        # delete next char
    ('del_prev_word', cty.c_long),        # delete previous word
    ('del_next_word', cty.c_long),        # delete next word
    # movement
    ('moveto_prev_line', cty.c_long),     # one line up
    ('moveto_next_line', cty.c_long),     # one line down
    ('moveto_prev_char', cty.c_long),     # one char left
    ('moveto_next_char', cty.c_long),     # one char right
    ('moveto_prev_word', cty.c_long),     # one word left
    ('moveto_next_word', cty.c_long),     # one word right
    ('moveto_prev_page', cty.c_long),     # one page up
    ('moveto_next_page', cty.c_long),     # one page down
    ('moveto_bol', cty.c_long),           # move to begining of line
    ('moveto_eol', cty.c_long),           # move to end of line
    ('moveto_bof', cty.c_long),           # move to begin of file
    ('moveto_eof', cty.c_long),           # move to end of file
    # miscty. stuff
    ('transpose', cty.c_long),            # switch two char positions
    ('paste', cty.c_long),                # paste the edit buffer
    ('backspace', cty.c_long),            # another  del_prev_char
    ('del_to_bol', cty.c_long),           # cut to begining of line
    ('del_to_eol', cty.c_long),           # cut to end of line
    ('clear_field', cty.c_long),          # delete everything
    ('del_to_eos', cty.c_long),           # not implemented
]


#####################
# forms.h (menu.h)
# Object Class: Menu
#####################

# values for enumeration 'FL_MENU_TYPE'
FL_MENU_TYPE = cty.c_int # enum


#######################
# forms.h (slider.h)
# Object Class: Slider
#######################

# values for enumeration 'FL_SLIDER_TYPE'
FL_SLIDER_TYPE = cty.c_int # enum


######################
# forms.h (timer.h)
# Object Class: Timer
######################

# values for enumeration 'FL_TIMER_TYPE'
FL_TIMER_TYPE = cty.c_int # enum

FL_TIMER_FILTER = cty.CFUNCTYPE(STRING, cty.POINTER(FL_OBJECT), cty.c_double)


###############################
# forms.h (xpopup.h)
# Prototypes for xpop-up menus
###############################

FL_PUP_ENTERCB = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
FL_PUP_LEAVECB = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)


# Class FL_XYPLOT
# values for enumeration 'FL_XYPLOT_TYPE'
FL_XYPLOT_TYPE = cty.c_int # enum


FL_XYPLOT_SYMBOL = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_int,
            cty.POINTER(FL_POINT), cty.c_int, cty.c_int, cty.c_int)


Mask = cty.c_ulong
Time = cty.c_ulong
GContext = XID    # cty.c_ulong
KeyCode = cty.c_ubyte


#########################
# flimage.h
# Image related routines
#########################

FL_PCTYPE = cty.c_uint        # primary color type

FL_WINDOW = Window    # cty.c_ulong

Pixmap = XID    # cty.c_ulong


class flimage_text_(cty.Structure):
    pass
flimage_text_._fields_ = [
    ('str', STRING),            # the string itself
    ('len', cty.c_int),             # string length
    ('x', cty.c_int),               # starting location of text (wrt image)
    ('y', cty.c_int),
    ('color', cty.c_uint),          # color of the text
    ('bcolor', cty.c_uint),         # background color of the text
    ('nobk', cty.c_int),            # no background
    ('size', cty.c_int),            # font size & style
    ('style', cty.c_int),
    ('angle', cty.c_int),           # in 1/10th of a degrees
    ('align', cty.c_int),           # alignment wrt to (x,y)
    ('reserved', cty.c_int * 6),
]
FLIMAGE_TEXT = flimage_text_

class flimage_marker_(cty.Structure):
    pass
flimage_marker_._fields_ = [
    ('name', STRING),           # marker name
    ('w', cty.c_int),               # size
    ('h', cty.c_int),
    ('x', cty.c_int),               # location
    ('y', cty.c_int),
    ('color', cty.c_uint),          # color of the marker
    ('bcolor', cty.c_uint),         # aux. color of the marker
    ('angle', cty.c_int),           # in 1/10th of a degree
    ('fill', cty.c_int),
    ('thickness', cty.c_int),       # line thickness
    ('style', cty.c_int),           # line style
    # the following is filled by the library
    ('display', cty.c_void_p),
    ('gc', cty.c_void_p),
    ('win', FL_WINDOW),
    ('psdraw', STRING),
    ('reserved', cty.c_int * 6),
]
FLIMAGE_MARKER = flimage_marker_


class flimage_setup_(cty.Structure):
    pass

FLIMAGESETUP = cty.POINTER(flimage_setup_)


class _IO_FILE(cty.Structure):
    pass
FILE = _IO_FILE


class flimage_(cty.Structure):
    pass
flimage_._fields_ = [
    ('type', cty.c_int),            # image type
    ('w', cty.c_int),
    ('h', cty.c_int),               # image size
    ('app_data', cty.c_void_p),     #for application at setup time
    ('u_vdata', cty.c_void_p),      # for application
    ('u_ldata', cty.c_long),        # for application
    ('red', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('green', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('blue', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('alpha', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('rgba', cty.POINTER(cty.POINTER(cty.c_ubyte)) * 4),    # alias
    ('ci', cty.POINTER(cty.POINTER(cty.c_ushort))),
    ('gray', cty.POINTER(cty.POINTER(cty.c_ushort))),
    ('packed', cty.POINTER(cty.POINTER(FL_PACKED4))),
    ('red16', cty.POINTER(cty.POINTER(cty.c_ushort))),  # not currently supported
    ('green16', cty.POINTER(cty.POINTER(cty.c_ushort))),  #not currently supported
    ('blue16', cty.POINTER(cty.POINTER(cty.c_ushort))),  # not currently supported
    ('alpha16', cty.POINTER(cty.POINTER(cty.c_ushort))),  # not currently supported
    ('ci8', cty.POINTER(cty.POINTER(cty.c_ubyte))), # not currently supported
    ('red_lut', cty.POINTER(cty.c_int)),        # red lookup tables
    ('green_lut', cty.POINTER(cty.c_int)),      # green lookup tables
    ('blue_lut', cty.POINTER(cty.c_int)),       # blue lookup tables
    ('alpha_lut', cty.POINTER(cty.c_int)),      # alpha lookup tables
    ('lut', cty.POINTER(cty.c_int) * 4),        # alias
    ('map_len', cty.c_int),                 # lut length
    ('colors', cty.c_int),                  # actual colors used in displaying
    ('gray_maxval', cty.c_int),             # indicate the range of gray16
    ('ci_maxval', cty.c_int),               # max value of ci. not used, use map_len
    ('rgb_maxval', cty.c_int),              # max value for rgb16 image
    ('level', cty.c_int),
    ('wwidth', cty.c_int),
    ('wlut', cty.POINTER(cty.c_ushort)),        # lut for window levelling
    ('wlut_len', cty.c_int),
    ('app_background', cty.c_int),          # transparent color: in RGB
    ('comments', STRING),
    ('comments_len', cty.c_int),
    ('available_type', cty.c_int),
    ('next', cty.POINTER(flimage_)),
    ('sx', cty.c_int),                      # display subimage origin
    ('sy', cty.c_int),
    ('sw', cty.c_int),                      # display subimage width
    ('sh', cty.c_int),
    ('wx', cty.c_int),              # display location relative to win
    ('wy', cty.c_int),
    ('modified', cty.c_int),
    ('display', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_), FL_WINDOW)),
    ('double_buffer', cty.c_int),
    ('sxd', cty.c_int),
    ('syd', cty.c_int),
    ('swd', cty.c_int),
    ('shd', cty.c_int),
    ('wxd', cty.c_int),
    ('wyd', cty.c_int),
    ('fmt_name', STRING),       # format name (ppm,jpg etc)
    ('bi_reserved', cty.c_int * 8),
    # annotation stuff
    ('text', cty.POINTER(FLIMAGE_TEXT)),
    ('ntext', cty.c_int),
    ('max_text', cty.c_int),
    ('dont_display_text', cty.c_int),
    ('display_text', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('free_text', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('marker', cty.POINTER(FLIMAGE_MARKER)),
    ('nmarkers', cty.c_int),
    ('max_markers', cty.c_int),
    ('dont_display_marker', cty.c_int),
    ('display_markers', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('free_markers', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('an_reserved', cty.c_int * 8),
    # physicalValue = poffset + pixelValue * pscale
    ('pmin', cty.c_double),         # physical data range
    ('pmax', cty.c_double),
    ('poffset', cty.c_double),
    ('pscale', cty.c_double),
    #  pixel grid distance
    ('xdist_offset', cty.c_double),
    ('xdist_scale', cty.c_double),
    ('ydist_offset', cty.c_double),
    ('ydist_scale', cty.c_double),
    ('px_reserved', cty.c_int * 8),
    ('infile', STRING),
    ('outfile', STRING),
    ('foffset', cty.c_long),
    ('original_type', cty.c_int),
    # hooks for application to have a chance to set some options.
    # if pre_write returns -1, the output will be canceled
    ('pre_write', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('post_write', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('f_reserved', cty.c_int * 16),
    # image processing stuff
    ('subx', cty.c_int),        # subimage origin
    ('suby', cty.c_int),
    ('subw', cty.c_int),        # subimage size
    ('subh', cty.c_int),
    ('sub_shape', cty.c_int),   # shape of the subimage
    ('fill_color', cty.c_uint),     # fill color
    ('force_convert', cty.c_int),
    ('llut', cty.POINTER(cty.c_int) * 3),   # linear lut
    ('llut_len', cty.c_int),
    ('hist', cty.POINTER(cty.c_uint) * 4),
    ('ip_reserved', cty.c_int * 16),
    # application handlers
    ('total', cty.c_int),
    ('completed', cty.c_int),
    ('visual_cue', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_), STRING)),
    ('error_message', cty.CFUNCTYPE(None, cty.POINTER(flimage_), STRING)),
    ('error_code', cty.c_int),      # not currently used
    ('display_type', cty.c_int),    # just before handing it to X
    ('pixels', cty.POINTER(cty.POINTER( cty.c_ushort))),
    ('image_spec', cty.c_void_p),   # additional image info
    ('xdisplay', cty.c_void_p),     # the X connection
    ('tran_rgb', cty.c_int),        # RGB color that should be transparent
    ('tran_index', cty.c_int),      # index that should be transparent
    ('matr', cty.c_int),
    ('matc', cty.c_int),
    # multi-frame images
    ('more', cty.c_int),
    ('current_frame', cty.c_int),
    ('total_frames', cty.c_int),
    ('next_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('prev_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('random_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_), cty.c_int)),
    ('rewind_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('cleanup', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('stop_looping', cty.c_int),
    ('mi_reserved', cty.c_int * 16),
    # the following are for internal use
    ('fpin', cty.POINTER(FILE)),
    ('fpout', cty.POINTER(FILE)),
    ('image_io', cty.c_void_p),
    ('io_spec', cty.c_void_p),      # io operation helper
    ('spec_size', cty.c_int),
    ('depth', cty.c_int),           # the depth we actually use
    ('vclass', cty.c_int),
    ('visual', cty.c_void_p),
    ('xcolormap', cty.c_ulong),
    ('rgb2p', FL_RGB2PIXEL_),
    ('ximage', cty.c_void_p),
    ('win', FL_WINDOW),
    ('gc', cty.c_void_p),
    ('sdepth', cty.c_int),          # depth the server says
    ('textgc', cty.c_void_p),
    ('markergc', cty.c_void_p),
    ('extra_io_info', cty.c_void_p),
    ('pixmap', cty.c_ulong),
    ('pixmap_w', cty.c_int),
    ('pixmap_h', cty.c_int),
    ('pixmap_depth', cty.c_int),
    ('isPixmap', cty.c_int),
    ('setup', FLIMAGESETUP),
    ('info', STRING),
    ('internal_reserved', cty.c_int * 14),
]
FL_IMAGE = flimage_

# some configuration stuff

flimage_setup_._fields_ = [
    ('app_data', cty.c_void_p),
    ('visual_cue', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE), STRING)),
    ('error_message', cty.CFUNCTYPE(None, cty.POINTER(FL_IMAGE), STRING)),
    ('display', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE), cty.c_ulong)),
    ('rgbfile', STRING),
    ('do_not_clear', cty.c_int),
    ('xdisplay', cty.c_void_p),
    ('max_frames', cty.c_int),
    ('delay', cty.c_int),
    ('no_auto_extension', cty.c_int),
    ('report_frequency', cty.c_int),
    ('double_buffer', cty.c_int),
    # internal use
    ('trailblazer', cty.c_ulong),
    ('header_info', cty.c_int),
    ('reserved', cty.c_int * 8),
]

FLIMAGE_SETUP = flimage_setup_


FLIMAGE_Identify = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FILE))
FLIMAGE_Description = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))
FLIMAGE_Read_Pixels = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))
FLIMAGE_Write_Image = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))


# output options

class FLIMAGE_JPEG_OPTION(cty.Structure):
    pass
FLIMAGE_JPEG_OPTION._fields_ = [
    ('quality', cty.c_int),
    ('smoothing', cty.c_int),
    ('reserved', cty.c_int * 6),
]

class FLIMAGE_FORMAT_INFO(cty.Structure):
    pass
FLIMAGE_FORMAT_INFO._fields_ = [
    ('formal_name', STRING),
    ('short_name', STRING),
    ('extension', STRING),
    ('type', cty.c_int),
    ('read_write', cty.c_int),
    ('annotation', cty.c_int),
    ('reserved', cty.c_int * 5),
]


# simple image processing routines

#FLIMAGE_SHARPEN = cty.POINTER(cty.POINTER(cty.c_int(-1)))
FLIMAGE_SHARPEN = cty.c_int(-1)
#FLIMAGE_SMOOTH = cty.POINTER(cty.POINTER(cty.c_int(-2)))
FLIMAGE_SMOOTH = cty.c_int(-2)
FL_SMOOTH = FLIMAGE_SMOOTH
FL_SHARPEN = FLIMAGE_SHARPEN


# /usr/include/X11/Xlib.h 345
class XWindowAttributes(cty.Structure):
    pass

# /usr/include/X11/Xlib.h 176
class XExtCodes(cty.Structure):
    pass
XExtCodes._fields_ = [
    ('extension', cty.c_int),
    ('major_opcode', cty.c_int),
    ('first_event', cty.c_int),
    ('first_error', cty.c_int),
]

# /usr/include/X11/Xlib.h 186
class XPixmapFormatValues(cty.Structure):
    pass
XPixmapFormatValues._fields_ = [
    ('depth', cty.c_int),
    ('bits_per_pixel', cty.c_int),
    ('scanline_pad', cty.c_int),
]

# /usr/include/X11/Xlib.h 218
class XGCValues(cty.Structure):
    pass
XGCValues._fields_ = [
    ('function', cty.c_int),
    ('plane_mask', cty.c_ulong),
    ('foreground', cty.c_ulong),
    ('background', cty.c_ulong),
    ('line_width', cty.c_int),
    ('line_style', cty.c_int),
    ('cap_style', cty.c_int),
    ('join_style', cty.c_int),
    ('fill_style', cty.c_int),
    ('fill_rule', cty.c_int),
    ('arc_mode', cty.c_int),
    ('tile', Pixmap),
    ('stipple', Pixmap),
    ('ts_x_origin', cty.c_int),
    ('ts_y_origin', cty.c_int),
    ('font', Font),
    ('subwindow_mode', cty.c_int),
    ('graphics_exposures', cty.c_int),
    ('clip_x_origin', cty.c_int),
    ('clip_y_origin', cty.c_int),
    ('clip_mask', Pixmap),
    ('dash_offset', cty.c_int),
    ('dashes', cty.c_char),
]


# /usr/include/X11/Xlib.h 258
class Depth(cty.Structure):
    pass
Depth._fields_ = [
    ('depth', cty.c_int),
    ('nvisuals', cty.c_int),
    ('visuals', cty.POINTER(Visual)),
]

# /usr/include/X11/Xlib.h 286
class Screen(cty.Structure):
    pass
Screen._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('display', cty.POINTER(_XDisplay)),
    ('root', Window),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('mwidth', cty.c_int),
    ('mheight', cty.c_int),
    ('ndepths', cty.c_int),
    ('depths', cty.POINTER(Depth)),
    ('root_depth', cty.c_int),
    ('root_visual', cty.POINTER(Visual)),
    ('default_gc', GC),
    ('cmap', Colormap),
    ('white_pixel', cty.c_ulong),
    ('black_pixel', cty.c_ulong),
    ('max_maps', cty.c_int),
    ('min_maps', cty.c_int),
    ('backing_store', cty.c_int),
    ('save_unders', cty.c_int),
    ('root_input_mask', cty.c_long),
]

# /usr/include/X11/Xlib.h 296
class ScreenFormat(cty.Structure):
    pass
ScreenFormat._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('depth', cty.c_int),
    ('bits_per_pixel', cty.c_int),
    ('scanline_pad', cty.c_int),
]

XWindowAttributes._fields_ = [
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('depth', cty.c_int),
    ('visual', cty.POINTER(Visual)),
    ('root', Window),
    ('c_class', cty.c_int),
    ('bit_gravity', cty.c_int),
    ('win_gravity', cty.c_int),
    ('backing_store', cty.c_int),
    ('backing_planes', cty.c_ulong),
    ('backing_pixel', cty.c_ulong),
    ('save_under', cty.c_int),
    ('colormap', Colormap),
    ('map_installed', cty.c_int),
    ('map_state', cty.c_int),
    ('all_event_masks', cty.c_long),
    ('your_event_mask', cty.c_long),
    ('do_not_propagate_mask', cty.c_long),
    ('override_redirect', cty.c_int),
    ('screen', cty.POINTER(Screen)),
]

# /usr/include/X11/Xlib.h 356
class XHostAddress(cty.Structure):
    pass
XHostAddress._fields_ = [
    ('family', cty.c_int),
    ('length', cty.c_int),
    ('address', STRING),
]

# /usr/include/X11/Xlib.h 366
class XServerInterpretedAddress(cty.Structure):
    pass
XServerInterpretedAddress._fields_ = [
    ('typelength', cty.c_int),
    ('valuelength', cty.c_int),
    ('type', STRING),
    ('value', STRING),
]

# /usr/include/X11/Xlib.h 371
class _XImage(cty.Structure):
    pass

# /usr/include/X11/Xlib.h 387
class funcs(cty.Structure):
    pass
funcs._fields_ = [
    ('create_image', cty.CFUNCTYPE(cty.POINTER(_XImage),
    cty.POINTER(_XDisplay), cty.POINTER(Visual), cty.c_uint, cty.c_int,
    cty.c_int, STRING, cty.c_uint, cty.c_uint, cty.c_int, cty.c_int)),
    ('destroy_image', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XImage))),
    ('get_pixel', cty.CFUNCTYPE(cty.c_ulong, cty.POINTER(_XImage), cty.c_int,
     cty.c_int)),
    ('put_pixel', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XImage), cty.c_int,
    cty.c_int, cty.c_ulong)),
    ('sub_image', cty.CFUNCTYPE(cty.POINTER(_XImage), cty.POINTER(_XImage),
    cty.c_int, cty.c_int, cty.c_uint, cty.c_uint)),
    ('add_pixel', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XImage), cty.c_long)),
]

_XImage._fields_ = [
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('xoffset', cty.c_int),
    ('format', cty.c_int),
    ('data', STRING),
    ('byte_order', cty.c_int),
    ('bitmap_unit', cty.c_int),
    ('bitmap_bit_order', cty.c_int),
    ('bitmap_pad', cty.c_int),
    ('depth', cty.c_int),
    ('bytes_per_line', cty.c_int),
    ('bits_per_pixel', cty.c_int),
    ('red_mask', cty.c_ulong),
    ('green_mask', cty.c_ulong),
    ('blue_mask', cty.c_ulong),
    ('obdata', XPointer),
    ('f', funcs),
]
XImage = _XImage

# /usr/include/X11/Xlib.h 416
class XWindowChanges(cty.Structure):
    pass
XWindowChanges._fields_ = [
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('sibling', Window),
    ('stack_mode', cty.c_int),
]

# /usr/include/X11/Xlib.h 426
class XColor(cty.Structure):
    pass
XColor._fields_ = [
    ('pixel', cty.c_ulong),
    ('red',  cty.c_ushort),
    ('green',  cty.c_ushort),
    ('blue',  cty.c_ushort),
    ('flags', cty.c_char),
    ('pad', cty.c_char),
]

# /usr/include/X11/Xlib.h 435
class XSegment(cty.Structure):
    pass
XSegment._fields_ = [
    ('x1', cty.c_short),
    ('y1', cty.c_short),
    ('x2', cty.c_short),
    ('y2', cty.c_short),
]

XPoint._fields_ = [
    ('x', cty.c_short),
    ('y', cty.c_short),
]

# /usr/include/X11/Xlib.h 444
XRectangle._fields_ = [
    ('x', cty.c_short),
    ('y', cty.c_short),
    ('width',  cty.c_ushort),
    ('height',  cty.c_ushort),
]

# /usr/include/X11/Xlib.h 450
class XArc(cty.Structure):
    pass
XArc._fields_ = [
    # /usr/include/X11/Xlib.h 450
    ('x', cty.c_short),
    ('y', cty.c_short),
    ('width',  cty.c_ushort),
    ('height',  cty.c_ushort),
    ('angle1', cty.c_short),
    ('angle2', cty.c_short),
]

# /usr/include/X11/Xlib.h 464
class XKeyboardControl(cty.Structure):
    pass
XKeyboardControl._fields_ = [
    ('key_click_percent', cty.c_int),
    ('bell_percent', cty.c_int),
    ('bell_pitch', cty.c_int),
    ('bell_duration', cty.c_int),
    ('led', cty.c_int),
    ('led_mode', cty.c_int),
    ('key', cty.c_int),
    ('auto_repeat_mode', cty.c_int),
]

# /usr/include/X11/Xlib.h 475
class XKeyboardState(cty.Structure):
    pass
XKeyboardState._fields_ = [
    ('key_click_percent', cty.c_int),
    ('bell_percent', cty.c_int),
    ('bell_pitch', cty.c_uint),
    ('bell_duration', cty.c_uint),
    ('led_mask', cty.c_ulong),
    ('global_auto_repeat', cty.c_int),
    ('auto_repeats', cty.c_char * 32),
]

# /usr/include/X11/Xlib.h 482
class XTimeCoord(cty.Structure):
    pass
XTimeCoord._fields_ = [
    ('time', Time),
    ('x', cty.c_short),
    ('y', cty.c_short),
]

# /usr/include/X11/Xlib.h 489
class XModifierKeymap(cty.Structure):
    pass
XModifierKeymap._fields_ = [
    ('max_keypermod', cty.c_int),
    ('modifiermap', cty.POINTER(KeyCode)),
]

Display = _XDisplay

# /usr/include/X11/Xlib.h 501
class _XPrivate(cty.Structure):
    pass
_XPrivate._fields_ = []

# /usr/include/X11/Xlib.h 502
class _XrmHashBucketRec(cty.Structure):
    pass
_XrmHashBucketRec._fields_ = []

# /usr/include/X11/Xlib.h 582
class XKeyEvent(cty.Structure):
    pass
XKeyEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('state', cty.c_uint),
    ('keycode', cty.c_uint),
    ('same_screen', cty.c_int),
]
XKeyPressedEvent = XKeyEvent
XKeyReleasedEvent = XKeyEvent

# /usr/include/X11/Xlib.h 600
class XButtonEvent(cty.Structure):
    pass
XButtonEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('state', cty.c_uint),
    ('button', cty.c_uint),
    ('same_screen', cty.c_int),
]
XButtonPressedEvent = XButtonEvent
XButtonReleasedEvent = XButtonEvent

# /usr/include/X11/Xlib.h 618
class XMotionEvent(cty.Structure):
    pass
XMotionEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('state', cty.c_uint),
    ('is_hint', cty.c_char),
    ('same_screen', cty.c_int),
]
XPointerMovedEvent = XMotionEvent

# /usr/include/X11/Xlib.h 641
class XCrossingEvent(cty.Structure):
    pass
XCrossingEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('mode', cty.c_int),
    ('detail', cty.c_int),
    ('same_screen', cty.c_int),
    ('focus', cty.c_int),
    ('state', cty.c_uint),
]
XEnterWindowEvent = XCrossingEvent
XLeaveWindowEvent = XCrossingEvent

# /usr/include/X11/Xlib.h 659
class XFocusChangeEvent(cty.Structure):
    pass
XFocusChangeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('mode', cty.c_int),
    ('detail', cty.c_int),
]
XFocusInEvent = XFocusChangeEvent
XFocusOutEvent = XFocusChangeEvent

# /usr/include/X11/Xlib.h 671
class XKeymapEvent(cty.Structure):
    pass
XKeymapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('key_vector', cty.c_char * 32),
]

# /usr/include/X11/Xlib.h 682
class XExposeEvent(cty.Structure):
    pass
XExposeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('count', cty.c_int),
]

# /usr/include/X11/Xlib.h 695
class XGraphicsExposeEvent(cty.Structure):
    pass
XGraphicsExposeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('drawable', Drawable),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('count', cty.c_int),
    ('major_code', cty.c_int),
    ('minor_code', cty.c_int),
]

# /usr/include/X11/Xlib.h 705
class XNoExposeEvent(cty.Structure):
    pass
XNoExposeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('drawable', Drawable),
    ('major_code', cty.c_int),
    ('minor_code', cty.c_int),
]

# /usr/include/X11/Xlib.h 714
class XVisibilityEvent(cty.Structure):
    pass
XVisibilityEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('state', cty.c_int),
]

# /usr/include/X11/Xlib.h 727
class XCreateWindowEvent(cty.Structure):
    pass
XCreateWindowEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('override_redirect', cty.c_int),
]

# /usr/include/X11/Xlib.h 736
class XDestroyWindowEvent(cty.Structure):
    pass
XDestroyWindowEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
]

# /usr/include/X11/Xlib.h 746
class XUnmapEvent(cty.Structure):
    pass
XUnmapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('from_configure', cty.c_int),
]

# /usr/include/X11/Xlib.h 756
class XMapEvent(cty.Structure):
    pass
XMapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('override_redirect', cty.c_int),
]

# /usr/include/X11/Xlib.h 765
class XMapRequestEvent(cty.Structure):
    pass
XMapRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
]

# /usr/include/X11/Xlib.h 777
class XReparentEvent(cty.Structure):
    pass
XReparentEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('parent', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('override_redirect', cty.c_int),
]

# /usr/include/X11/Xlib.h 791
class XConfigureEvent(cty.Structure):
    pass
XConfigureEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('above', Window),
    ('override_redirect', cty.c_int),
]

# /usr/include/X11/Xlib.h 801
class XGravityEvent(cty.Structure):
    pass
XGravityEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
]

# /usr/include/X11/Xlib.h 810
class XResizeRequestEvent(cty.Structure):
    pass
XResizeRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('width', cty.c_int),
    ('height', cty.c_int),
]

# /usr/include/X11/Xlib.h 825
class XConfigureRequestEvent(cty.Structure):
    pass
XConfigureRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('above', Window),
    ('detail', cty.c_int),
    ('value_mask', cty.c_ulong),
]

# /usr/include/X11/Xlib.h 835
class XCirculateEvent(cty.Structure):
    pass
XCirculateEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('place', cty.c_int),
]

# /usr/include/X11/Xlib.h 845
class XCirculateRequestEvent(cty.Structure):
    pass
XCirculateRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
    ('place', cty.c_int),
]

# /usr/include/X11/Xlib.h 856
class XPropertyEvent(cty.Structure):
    pass
XPropertyEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('atom', Atom),
    ('time', Time),
    ('state', cty.c_int),
]

# /usr/include/X11/Xlib.h 866
class XSelectionClearEvent(cty.Structure):
    pass
XSelectionClearEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('selection', Atom),
    ('time', Time),
]

# /usr/include/X11/Xlib.h 879
class XSelectionRequestEvent(cty.Structure):
    pass
XSelectionRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('owner', Window),
    ('requestor', Window),
    ('selection', Atom),
    ('target', Atom),
    ('property', Atom),
    ('time', Time),
]
# /usr/include/X11/Xlib.h 891
class XSelectionEvent(cty.Structure):
    pass
XSelectionEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('requestor', Window),
    ('selection', Atom),
    ('target', Atom),
    ('property', Atom),
    ('time', Time),
]
# /usr/include/X11/Xlib.h 906
class XColormapEvent(cty.Structure):
    pass
XColormapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('colormap', Colormap),
    ('c_new', cty.c_int),
    ('state', cty.c_int),
]

# /usr/include/X11/Xlib.h 916
class N19XClientMessageEvent4DOT_71E(cty.Union):
    pass
N19XClientMessageEvent4DOT_71E._fields_ = [
    ('b', cty.c_char * 20),
    ('s', cty.c_short * 10),
    ('l', cty.c_long * 5),
]

# /usr/include/X11/Xlib.h 921
class XClientMessageEvent(cty.Structure):
    pass
XClientMessageEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('message_type', Atom),
    ('format', cty.c_int),
    ('data', N19XClientMessageEvent4DOT_71E),
]

# /usr/include/X11/Xlib.h 933
class XMappingEvent(cty.Structure):
    pass
XMappingEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('request', cty.c_int),
    ('first_keycode', cty.c_int),
    ('count', cty.c_int),
]

# /usr/include/X11/Xlib.h 943
class XErrorEvent(cty.Structure):
    pass
XErrorEvent._fields_ = [
    ('type', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('resourceid', XID),
    ('serial', cty.c_ulong),
    ('error_code', cty.c_ubyte),
    ('request_code', cty.c_ubyte),
    ('minor_code', cty.c_ubyte),
]

# /usr/include/X11/Xlib.h 951
class XAnyEvent(cty.Structure):
    pass
XAnyEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
]

# /usr/include/X11/Xlib.h 967
class XGenericEvent(cty.Structure):
    pass
XGenericEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('extension', cty.c_int),
    ('evtype', cty.c_int),
]

# /usr/include/X11/Xlib.h 978
class XGenericEventCookie(cty.Structure):
    pass
XGenericEventCookie._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('extension', cty.c_int),
    ('evtype', cty.c_int),
    ('cookie', cty.c_uint),
    ('data', cty.c_void_p),
]

# /usr/include/X11/Xlib.h 984
class _XEvent(cty.Union):
    pass
_XEvent._fields_ = [
    ('type', cty.c_int),
    ('xany', XAnyEvent),
    ('xkey', XKeyEvent),
    ('xbutton', XButtonEvent),
    ('xmotion', XMotionEvent),
    ('xcrossing', XCrossingEvent),
    ('xfocus', XFocusChangeEvent),
    ('xexpose', XExposeEvent),
    ('xgraphicsexpose', XGraphicsExposeEvent),
    ('xnoexpose', XNoExposeEvent),
    ('xvisibility', XVisibilityEvent),
    ('xcreatewindow', XCreateWindowEvent),
    ('xdestroywindow', XDestroyWindowEvent),
    ('xunmap', XUnmapEvent),
    ('xmap', XMapEvent),
    ('xmaprequest', XMapRequestEvent),
    ('xreparent', XReparentEvent),
    ('xconfigure', XConfigureEvent),
    ('xgravity', XGravityEvent),
    ('xresizerequest', XResizeRequestEvent),
    ('xconfigurerequest', XConfigureRequestEvent),
    ('xcirculate', XCirculateEvent),
    ('xcirculaterequest', XCirculateRequestEvent),
    ('xproperty', XPropertyEvent),
    ('xselectionclear', XSelectionClearEvent),
    ('xselectionrequest', XSelectionRequestEvent),
    ('xselection', XSelectionEvent),
    ('xcolormap', XColormapEvent),
    ('xclient', XClientMessageEvent),
    ('xmapping', XMappingEvent),
    ('xerror', XErrorEvent),
    ('xkeymap', XKeymapEvent),
    ('xgeneric', XGenericEvent),
    ('xcookie', XGenericEventCookie),
    ('pad', cty.c_long * 24),
]
XEvent = _XEvent

