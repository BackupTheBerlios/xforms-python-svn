#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
        <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.

    *****************************************************************


    @newfield example: Example, Example
"""


__docformat__ = "epytext en"    # to be used with epydoc doc


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata



########################
# forms.h (xfdata.h)
########################

# fl_create_scrollbar function placeholder (internal)


def fl_add_scrollbar(scrolltype, x, y, w, h, label):
    """
    fl_add_scrollbar(scrolltype, x, y, w, h, label) -> pFlObject

    Adds a scrollbar object to a form.

    @param scrolltype: type of scrollbar to be added
    @type scrolltype: int
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int
    @param w: width in coord units
    @type w: int
    @param h: height in coord units
    @type h: int
    @param label: label text of scrollbar
    @type label: string

    @status: Tested + NoDoc + Demo = OK
    """
    _fl_add_scrollbar = library.cfuncproto(
        library.load_so_libforms(), "fl_add_scrollbar",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_scrollbar(int type, FL_Coord x, FL_Coord y,
            FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(scrolltype, xfdata.SCROLLTYPE_list)
    iscrolltype = library.convert_to_int(scrolltype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(scrolltype, x, y, w, h, label, iscrolltype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_scrollbar(iscrolltype, ix, iy, iw, ih, slabel)
    return retval


def fl_get_scrollbar_value(pFlObject):
    """
        fl_get_scrollbar_value(pFlObject) -> value[float]

        Returns the value of a xfdata.

        @param pFlObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_scrollbar_value = library.cfuncproto(
        library.load_so_libforms(), "fl_get_scrollbar_value",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
        """double fl_get_scrollbar_value(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_scrollbar_value(pFlObject)
    return retval


def fl_set_scrollbar_value(pFlObject, val):
    """
        fl_set_scrollbar_value(pFlObject, val)

        Sets the value of a xfdata.

        @param pFlObject: pointer to object
        @param val: value of the scrollbar to be set

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_set_scrollbar_value = library.cfuncproto(
        library.load_so_libforms(), "fl_set_scrollbar_value",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_scrollbar_value(FL_OBJECT * ob, double val)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fval = library.convert_to_double(val)
    library.keep_elem_refs(pFlObject, val, fval)
    _fl_set_scrollbar_value(pFlObject, fval)


def fl_set_scrollbar_size(pFlObject, val):
    """
        fl_set_scrollbar_size(pFlObject, val)

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_set_scrollbar_size = library.cfuncproto(
        library.load_so_libforms(), "fl_set_scrollbar_size",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_scrollbar_size(FL_OBJECT * ob, double val)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fval = library.convert_to_double(val)
    library.keep_elem_refs(pFlObject, val, fval)
    _fl_set_scrollbar_size(pFlObject, fval)


def fl_set_scrollbar_increment(pFlObject, leftbtnval, midlbtnval):
    """
        fl_set_scrollbar_increment(pFlObject, leftbtnval, midlbtnval)

        Sets the size of the steps of a scrollbar jump.

        @param pFlObject: pointer to object
        @param leftbtnval: value to increment if the left mouse button is
           pressed
        @param midlbtnval: value to increment if the middle mouse button is
           pressed

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_scrollbar_increment = library.cfuncproto(
        library.load_so_libforms(), "fl_set_scrollbar_increment",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_scrollbar_increment(FL_OBJECT * ob, double l,
           double r)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fleftbtnval = library.convert_to_double(leftbtnval)
    fmidlbtnval = library.convert_to_double(midlbtnval)
    library.keep_elem_refs(pFlObject, leftbtnval, midlbtnval, fleftbtnval, \
                   fmidlbtnval)
    _fl_set_scrollbar_increment(pFlObject, fleftbtnval, fmidlbtnval)


def fl_get_scrollbar_increment(pFlObject):
    """
        fl_get_scrollbar_increment(pFlObject) -> leftbtnval[double], midlbtnval[double]

        Returns the increment of size of a scrollbar for left and middle mouse
        buttons.

        @param pFlObject: pointer to object

        @attention: API change from XForms - upstream was
                    fl_get_scrollbar_increment(pFlObject, leftbtnval,
                    valmidlbtnval)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_scrollbar_increment = library.cfuncproto(
        library.load_so_libforms(), "fl_get_scrollbar_increment",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_scrollbar_increment(FL_OBJECT * ob, double * a,
           double * b)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    leftbtnval, pleftbtnval = library.make_double_and_pointer()
    midlbtnval, pmidlbtnval = library.make_double_and_pointer()
    library.keep_elem_refs(pFlObject, leftbtnval, midlbtnval, pleftbtnval, pmidlbtnval)
    _fl_get_scrollbar_increment(pFlObject, pleftbtnval, pmidlbtnval)
    return leftbtnval.value, midlbtnval.value


def fl_set_scrollbar_bounds(pFlObject, minbound, maxbound):
    """
        fl_set_scrollbar_bounds(pFlObject, minbound, maxbound)

        Sets the bounds/limits of a xfdata.

        @param pFlObject: pointer to object
        @param minbound: minimum bound of scrollbar
        @param maxbound: maximum bound of scrollbar

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_scrollbar_bounds = library.cfuncproto(
        library.load_so_libforms(), "fl_set_scrollbar_bounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_scrollbar_bounds(FL_OBJECT * ob, double b1, double b2)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fminbound = library.convert_to_double(minbound)
    fmaxbound = library.convert_to_double(maxbound)
    library.keep_elem_refs(pFlObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_scrollbar_bounds(pFlObject, fminbound, fmaxbound)


def fl_get_scrollbar_bounds(pFlObject):
    """
        fl_get_scrollbar_bounds(pFlObject) -> minbound, maxbound

        Returns the bounds/limits of a xfdata.

        @param pFlObject: pointer to scrollbar object

        @attention: API change from XForms - upstream was
           fl_get_scrollbar_bounds(pFlObject, b1, b2)
    """
    _fl_get_scrollbar_bounds = library.cfuncproto(
        library.load_so_libforms(), "fl_get_scrollbar_bounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_scrollbar_bounds(FL_OBJECT * ob, double * b1,
           double * b2)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    minbound, pminbound = library.make_double_and_pointer()
    maxbound, pmaxbound = library.make_double_and_pointer()
    library.keep_elem_refs(pFlObject, minbound, pminbound, maxbound, pmaxbound)
    _fl_get_scrollbar_bounds(pFlObject, pminbound, pmaxbound)
    return minbound.value, maxbound.value


# fl_set_scrollbar_return function placeholder (internal)


def fl_set_scrollbar_step(pFlObject, step):
    """
        fl_set_scrollbar_step(pFlObject, step)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_scrollbar_step = library.cfuncproto(
        library.load_so_libforms(), "fl_set_scrollbar_step",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_scrollbar_step(FL_OBJECT * ob, double step)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fstep = library.convert_to_double(step)
    library.keep_elem_refs(pFlObject, step, fstep)
    _fl_set_scrollbar_step(pFlObject, fstep)


