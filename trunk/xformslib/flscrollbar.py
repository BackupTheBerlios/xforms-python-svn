#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage scrollbar objects.
"""

#    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
#    e-mail: <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata


########################
# forms.h (xfdata.h)
########################

# fl_create_scrollbar function placeholder (internal)


def fl_add_scrollbar(scrolltype, x, y, w, h, label):
    """fl_add_scrollbar(scrolltype, x, y, w, h, label)
    
    Adds a scrollbar object to a form.

    Parameters
    ----------
        scrolltype : int
            type of scrollbar to be added. Values (from xfdata.py)
            FL_VERT_SCROLLBAR, FL_HOR_SCROLLBAR, FL_VERT_THIN_SCROLLBAR
            FL_HOR_THIN_SCROLLBAR, FL_VERT_NICE_SCROLLBAR,
            FL_HOR_NICE_SCROLLBAR, FL_VERT_PLAIN_SCROLLBAR,
            FL_HOR_PLAIN_SCROLLBAR, FL_HOR_BASIC_SCROLLBAR,
            FL_VERT_BASIC_SCROLLBAR, FL_NORMAL_SCROLLBAR,
            FL_THIN_SCROLLBAR, FL_NICE_SCROLLBAR, FL_PLAIN_SCROLLBAR
        x : int
            horizontal position (upper-left corner)
        y : int
            vertical position (upper-left corner)
        w : int
            width in coord units
        h : int
            height in coord units
        label : str
            label text of scrollbar

    Returns
    -------
        pFlObject : pointer to xfdata.FL_OBJECT
            scrollbar object added

    Examples
    --------
        >>> scrbobj = fl_add_scrollbar(scrolltype, 182, 140, 50, 150, \
                "MyScrollbar")

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_add_scrollbar = library.cfuncproto(
        library.load_so_libforms(), "fl_add_scrollbar",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_scrollbar(int type, FL_Coord x, FL_Coord y,
            FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(scrolltype, \
            xfdata.SCROLLTYPE_list)
    iscrolltype = library.convert_to_int(scrolltype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(scrolltype, x, y, w, h, label, iscrolltype, \
            ix, iy, iw, ih, slabel)
    retval = _fl_add_scrollbar(iscrolltype, ix, iy, iw, ih, slabel)
    return retval


def fl_get_scrollbar_value(pFlObject):
    """fl_get_scrollbar_value(pFlObject)
    
    Obtains the current value of a scrollbar object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            scrollbar object

    Returns
    -------
        value : float
            scrollbar value

    Examples
    --------
        >>> val = fl_get_scrollbar_value(scrbobj)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_scrollbar_value = library.cfuncproto(
        library.load_so_libforms(), "fl_get_scrollbar_value",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
        """double fl_get_scrollbar_value(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_scrollbar_value(pFlObject)
    return retval


def fl_set_scrollbar_value(pFlObject, val):
    """fl_set_scrollbar_value(pFlObject, val)
    
    Sets the value of a scrollbar object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            scrollbar object
        val : float
            value of the scrollbar to be set. By default it is 0.5.

    Examples
    --------
        >>> fl_set_scrollbar_value(scrbobj, 0.75)

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_set_scrollbar_value = library.cfuncproto(
        library.load_so_libforms(), "fl_set_scrollbar_value",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_scrollbar_value(FL_OBJECT * ob, double val)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    fval = library.convert_to_double(val)
    library.keep_elem_refs(pFlObject, val, fval)
    _fl_set_scrollbar_value(pFlObject, fval)


def fl_set_scrollbar_size(pFlObject, val):
    """fl_set_scrollbar_size(pFlObject, val)
    
    Controls the size of the sliding bar inside the box. This function
    does nothing if applied to scrollbars of type xfdata.FL_NICE_SCROLLBAR.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            scrollbar object
        val : float
            size should be a value between 0.0 and 1.0. The default is
            xfdata.FL_SLIDER_WIDTH (which is 0.15 for all scrollbars). If it
            is 1.0, the scrollbar covers the box completely and can no longer
            be moved.

    Examples
    --------
        >>> fl_set_scrollbar_size(scrbobj, 0.2)

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_set_scrollbar_size = library.cfuncproto(
        library.load_so_libforms(), "fl_set_scrollbar_size",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_scrollbar_size(FL_OBJECT * ob, double val)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    fval = library.convert_to_double(val)
    library.keep_elem_refs(pFlObject, val, fval)
    _fl_set_scrollbar_size(pFlObject, fval)


def fl_set_scrollbar_increment(pFlObject, leftbtnval, midlbtnval):
    """fl_set_scrollbar_increment(pFlObject, leftbtnval, midlbtnval)
    
    Sets the size of the steps of a scrollbar jump. By default, if the
    mouse is pressed beside the the sliding bar, the bar starts to jumps
    in the direction of the mouse position.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            scrollbar object
        leftbtnval : float
            value to increment if the left mouse button is pressed
        midlbtnval : float
            value to increment if the middle mouse button is pressed

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_scrollbar_increment = library.cfuncproto(
        library.load_so_libforms(), "fl_set_scrollbar_increment",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_scrollbar_increment(FL_OBJECT * ob, double l,
           double r)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    fleftbtnval = library.convert_to_double(leftbtnval)
    fmidlbtnval = library.convert_to_double(midlbtnval)
    library.keep_elem_refs(pFlObject, leftbtnval, midlbtnval, fleftbtnval, \
            fmidlbtnval)
    _fl_set_scrollbar_increment(pFlObject, fleftbtnval, fmidlbtnval)


def fl_get_scrollbar_increment(pFlObject):
    """fl_get_scrollbar_increment(pFlObject)
    
    Obtains the increment of size of a scrollbar for left and middle mouse
    buttons.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            scrollbar object

    Returns
    -------
        leftbtnval : float
            left button increment
        midbtnval : float
            middle button increment

    Examples
    --------
        >>> leftbv, midbv = fl_get_scrollbar_increment(scrbobj)

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_scrollbar_increment(pFlObject, leftbtnval, midlbtnval)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_scrollbar_increment = library.cfuncproto(
        library.load_so_libforms(), "fl_get_scrollbar_increment",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_scrollbar_increment(FL_OBJECT * ob, double * a,
           double * b)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    leftbtnval, pleftbtnval = library.make_double_and_pointer()
    midlbtnval, pmidlbtnval = library.make_double_and_pointer()
    library.keep_elem_refs(pFlObject, leftbtnval, midlbtnval, pleftbtnval,
                        pmidlbtnval)
    _fl_get_scrollbar_increment(pFlObject, pleftbtnval, pmidlbtnval)
    return leftbtnval.value, midlbtnval.value


def fl_set_scrollbar_bounds(pFlObject, minbound, maxbound):
    """fl_set_scrollbar_bounds(pFlObject, minbound, maxbound)
    
    Sets minimum and maximum the bounds/limits of a scrollbar object. For
    vertical sliders the slider position for the minimum value is at the left,
    for horizontal sliders at the top of the slider. By setting min to a
    larger value than max in a call of fl_set_scrollbar_bounds() this can be
    reversed. When this function is called, if the actual value of a scrollbar
    is not within the range of the new bounds, its value gets adjusted to the
    nearest limit.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            scrollbar object
        minbound : float
            minimum bound of scrollbar. By default, the minimum value
            for a slider is 0.0.
        maxbound : float
            maximum bound of scrollbar. By default, the maximum value
            for a slider is 1.0.

    Examples
    --------
        >>> fl_set_scrollbar_bounds(scrbobj, 1.0, 2.0)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_scrollbar_bounds = library.cfuncproto(
        library.load_so_libforms(), "fl_set_scrollbar_bounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_scrollbar_bounds(FL_OBJECT * ob, double b1, double
           b2)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    fminbound = library.convert_to_double(minbound)
    fmaxbound = library.convert_to_double(maxbound)
    library.keep_elem_refs(pFlObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_scrollbar_bounds(pFlObject, fminbound, fmaxbound)


def fl_get_scrollbar_bounds(pFlObject):
    """fl_get_scrollbar_bounds(pFlObject)
    
    Obtains minimum and maximum bounds/limits of a scrollbar object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            scrollbar object

    Returns
    -------
        minbound : float
            minimum bound
        maxbound : float
            maximum bound

    Examples
    --------
        >>> minb, maxb = fl_get_scrollbar_bounds(scrbobj)

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_scrollbar_bounds(pFlObject, b1, b2)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_scrollbar_bounds = library.cfuncproto(
        library.load_so_libforms(), "fl_get_scrollbar_bounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_scrollbar_bounds(FL_OBJECT * ob, double * b1,
           double * b2)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    minbound, pminbound = library.make_double_and_pointer()
    maxbound, pmaxbound = library.make_double_and_pointer()
    library.keep_elem_refs(pFlObject, minbound, pminbound, maxbound, \
            pmaxbound)
    _fl_get_scrollbar_bounds(pFlObject, pminbound, pmaxbound)
    return minbound.value, maxbound.value


# fl_set_scrollbar_return function placeholder (internal)


def fl_set_scrollbar_step(pFlObject, step):
    """fl_set_scrollbar_step(pFlObject, step)
    
    Sets the step size of a scrollbar to which values are rounded.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            scrollbar object
        step : float
            rounded value.

    Examples
    --------
        >>> fl_set_scrollbar_step(scrbobj, 1)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_scrollbar_step = library.cfuncproto(
        library.load_so_libforms(), "fl_set_scrollbar_step",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_scrollbar_step(FL_OBJECT * ob, double step)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    fstep = library.convert_to_double(step)
    library.keep_elem_refs(pFlObject, step, fstep)
    _fl_set_scrollbar_step(pFlObject, fstep)

