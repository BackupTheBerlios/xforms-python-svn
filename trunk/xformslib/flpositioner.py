#!/usr/bin/env python3
# -*- coding: utf-8 -*-

""" xforms-python's functions to manage positioner flobjects.
"""

#    Copyright (C) 2009-2012  Luca Lazzaroni "LukenShiro"
#    e-mail: <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License,
#    or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ########################################### #
# Interface to XForms shared-object libraries #
# ########################################### #


import ctypes as cty
from xformslib import library
from xformslib import xfdata


#########################
# forms.h (positioner.h)
#########################

# Routines

# fl_create_positioner() function placeholder (internal)


def fl_add_positioner(posittype, xpos, ypos, width, height, label):
    """fl_add_positioner(posittype, xpos, ypos, width, height, label)
    -> ptr_flobject

    Adds a positioner flobject. By default the label is placed below the box.

    Parameters
    ----------
        posittype : int
            type of positioner to be added. Values (from xfdata.py)
            - FL_NORMAL_POSITIONER (Cross-hair inside a box),
            - FL_OVERLAY_POSITIONER (Cross-hair inside a transparent box, i.e.
              drawn in in XOR mode),
            - FL_INVISIBLE_POSITIONER (Completely invisible positioner to be
              used just for the side effect of obtaining a position, typically
              a flobject is below it that otherwise would receive user events)
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of positioner.

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            positioner flobject added

    Examples
    --------
        >>> pstobj = fl_add_positioner(xfdata.FL_NORMAL_POSITIONER,
                140, 120, 180, 180, "MyPositioner")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_positioner = library.cfuncproto(
        library.load_so_libforms(), "fl_add_positioner",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_positioner(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_flinitialized()
    library.checkfatal_allowed_value_in_list(posittype, \
            xfdata.POSITIONERTYPE_list)
    i_posittype = library.convert_to_intc(posittype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_bytestrc(label)
    library.keep_elem_refs(posittype, xpos, ypos, width, height, label, \
            i_posittype, i_xpos, i_ypos, i_width, i_height, s_label)
    retval = _fl_add_positioner(i_posittype, i_xpos, i_ypos, i_width, \
            i_height, s_label)
    return retval


def fl_set_positioner_xvalue(ptr_flobject, xvalue):
    """fl_set_positioner_xvalue(ptr_flobject, xvalue)

    Defines the actual value of positioner flobject in horizontal direction.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            positioner flobject
        xvalue : float
            horizontal value to be set. By default it is 0.5.

    Examples
    --------
        >>> fl_set_positioner_xvalue(pstobj, 0.1)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_positioner_xvalue = library.cfuncproto(
        library.load_so_libforms(), "fl_set_positioner_xvalue",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_positioner_xvalue(FL_OBJECT * ob, double val)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_xvalue = library.convert_to_doublec(xvalue)
    library.keep_elem_refs(ptr_flobject, xvalue, f_xvalue)
    _fl_set_positioner_xvalue(ptr_flobject, f_xvalue)


def fl_get_positioner_xvalue(ptr_flobject):
    """fl_get_positioner_xvalue(ptr_flobject) -> xvalue

    Finds out value of positioner flobject in horizontal direction.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            positioner flobject

    Returns
    -------
        xvalue : float
            value in horizontal direction

    Examples
    --------
        >>> val = fl_get_positioner_xvalue(pstobj)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_get_positioner_xvalue = library.cfuncproto(
        library.load_so_libforms(), "fl_get_positioner_xvalue",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
        """double fl_get_positioner_xvalue(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_positioner_xvalue(ptr_flobject)
    return retval


def fl_set_positioner_xbounds(ptr_flobject, minbound, maxbound):
    """fl_set_positioner_xbounds(ptr_flobject, minbound, maxbound)

    Defines minimum and maximum bounds for values of a positioner in
    horizontal direction.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            positioner flobject
        minbound : float
            minimum value limit to be set. By default the minimum value is 0.0
        maxbound : float
            maximum value limit to be set. By default the maximum value is 1.0

    Examples
    --------
        >>> fl_set_positioner_xbounds(pstobj, 1.0, 1.5)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_positioner_xbounds = library.cfuncproto(
        library.load_so_libforms(), "fl_set_positioner_xbounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_positioner_xbounds(FL_OBJECT * ob, double min,
            double max)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_minbound = library.convert_to_doublec(minbound)
    f_maxbound = library.convert_to_doublec(maxbound)
    library.keep_elem_refs(ptr_flobject, minbound, maxbound, f_minbound, \
            f_maxbound)
    _fl_set_positioner_xbounds(ptr_flobject, f_minbound, f_maxbound)


def fl_get_positioner_xbounds(ptr_flobject):
    """fl_get_positioner_xbounds(ptr_flobject) -> minbound, maxbound

    Obtain minumum and maximum value bounds/limits of a positioner in
    horizontal direction.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            positioner flobject

    Returns
    -------
        minbound : float
            minimum value bound
        maxbound : float
            maximum value bound

    Examples
    --------
        >>> minb, maxb = fl_get_positioner_xbounds(pstobj)

    API_diversion
    -------------
        API changed from XForms, upstream is
        fl_get_positioner_xbounds(ptr_flobject, minbound, maxbound)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_positioner_xbounds = library.cfuncproto(
        library.load_so_libforms(), "fl_get_positioner_xbounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_positioner_xbounds(FL_OBJECT * ob, double * min,
        double * max)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_minbound, ptr_minbound = library.make_doublec_and_pointer()
    f_maxbound, ptr_maxbound = library.make_doublec_and_pointer()
    library.keep_elem_refs(ptr_flobject, f_minbound, f_maxbound, \
            ptr_minbound, ptr_maxbound)
    _fl_get_positioner_xbounds(ptr_flobject, ptr_minbound, ptr_maxbound)
    return f_minbound.value, f_maxbound.value


def fl_set_positioner_yvalue(ptr_flobject, yvalue):
    """fl_set_positioner_yvalue(ptr_flobject, yvalue)

    Defines the actual value of positioner flobject in vertical direction.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            positioner flobject
        yvalue : float
            vertical value to be set. By default it is 0.5.

    Examples
    --------
        >>> fl_set_positioner_yvalue(pstobj, 1.0)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_positioner_yvalue = library.cfuncproto(
        library.load_so_libforms(), "fl_set_positioner_yvalue",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_positioner_yvalue(FL_OBJECT * ob, double val)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_yvalue = library.convert_to_doublec(yvalue)
    library.keep_elem_refs(ptr_flobject, yvalue, f_yvalue)
    _fl_set_positioner_yvalue(ptr_flobject, f_yvalue)


def fl_get_positioner_yvalue(ptr_flobject):
    """fl_get_positioner_yvalue(ptr_flobject) -> yvalue

    Finds out value of positioner flobject in vertical direction.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            positioner flobject

    Returns
    -------
        yvalue : float
            value in vertical direction

    Examples
    --------
        >>> val = fl_get_positioner_yvalue(pstobj)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_positioner_yvalue = library.cfuncproto(
        library.load_so_libforms(), "fl_get_positioner_yvalue",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
        """double fl_get_positioner_yvalue(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_positioner_yvalue(ptr_flobject)
    return retval


def fl_set_positioner_ybounds(ptr_flobject, minbound, maxbound):
    """fl_set_positioner_ybounds(ptr_flobject, minbound, maxbound)

    Defines minimum and maximum bounds for values of a positioner in
    vertical direction.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            positioner flobject
        minbound : float
            minimum value limit to be set. By default the minimum value is 0.0
        maxbound : float
            maximum value limit to be set. By default the maximum value is 1.0

    Examples
    --------
        >>> fl_set_positioner_ybounds(pstobj, 0.5, 1.5)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_positioner_ybounds = library.cfuncproto(
        library.load_so_libforms(), "fl_set_positioner_ybounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_positioner_ybounds(FL_OBJECT * ob, double min,
           double max)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_minbound = library.convert_to_doublec(minbound)
    f_maxbound = library.convert_to_doublec(maxbound)
    library.keep_elem_refs(ptr_flobject, minbound, maxbound, f_minbound,
            f_maxbound)
    _fl_set_positioner_ybounds(ptr_flobject, f_minbound, f_maxbound)


def fl_get_positioner_ybounds(ptr_flobject):
    """fl_get_positioner_ybounds(ptr_flobject) -> minbound, maxbound

    Obtain minimum and maximum bounds for values of a positioner in
    vertical direction.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            positioner flobject

    Returns
    -------
        minbound : float
            minimum value bound
        maxbound : float
            maximum value bound

    Examples
    --------
        >>> minb, maxb = fl_get_positioner_ybounds(pstobj)

    API_diversion
    -------------
        API changed from XForms, upstream is
        fl_get_positioner_ybounds(ptr_flobject, minbound, maxbound)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_positioner_ybounds = library.cfuncproto(
        library.load_so_libforms(), "fl_get_positioner_ybounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_positioner_ybounds(FL_OBJECT * ob, double * min,
           double * max)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_minbound, ptr_minbound = library.make_doublec_and_pointer()
    f_maxbound, ptr_maxbound = library.make_doublec_and_pointer()
    library.keep_elem_refs(ptr_flobject, f_minbound, f_maxbound, \
            ptr_minbound, ptr_maxbound)
    _fl_get_positioner_ybounds(ptr_flobject, ptr_minbound, ptr_maxbound)
    return f_minbound.value, f_maxbound.value


def fl_set_positioner_xstep(ptr_flobject, step):
    """fl_set_positioner_xstep(ptr_flobject, step)

    Handles positioner values in horizontal direction to be rounded to
    some values (multiples of step), e.g. to integer values.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            positioner flobject
        step : float
            rounded value. If it is 0.0, switch off rounding.

    Examples
    --------
        >>> fl_set_positioner_xstep(pstobj, 0.0)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_positioner_xstep = library.cfuncproto(
        library.load_so_libforms(), "fl_set_positioner_xstep",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_positioner_xstep(FL_OBJECT * ob, double value)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_step = library.convert_to_doublec(step)
    library.keep_elem_refs(ptr_flobject, step, f_step)
    _fl_set_positioner_xstep(ptr_flobject, f_step)


def fl_set_positioner_ystep(ptr_flobject, step):
    """fl_set_positioner_ystep(ptr_flobject, step)

    Handles positioner values in vertical direction to be rounded to
    some values (multiples of step), e.g. to integer values.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            positioner flobject
        step : float
            rounded value. If it is 0.0, switch off rounding.

    Examples
    --------
        >>> fl_set_positioner_ystep(pstobj, 0.0)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_positioner_ystep = library.cfuncproto(
        library.load_so_libforms(), "fl_set_positioner_ystep",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_positioner_ystep(FL_OBJECT * ob, double value)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_step = library.convert_to_doublec(step)
    library.keep_elem_refs(ptr_flobject, step, f_step)
    _fl_set_positioner_ystep(ptr_flobject, f_step)


# fl_set_positioner_return() function placeholder (deprecated)


def fl_set_positioner_mouse_buttons(ptr_flobject, mousebtns):
    """fl_set_positioner_mouse_buttons(ptr_flobject, mousebtns)

    Defines which mouse buttons the positioner flobject will react to.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            positioner flobject
        mousebtns : int_pos
            *todo*

    Example
    -------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_positioner_mouse_buttons = library.cfuncproto(
        library.load_so_libforms(), "fl_set_positioner_mouse_buttons",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint],
        """void fl_set_positioner_mouse_buttons(FL_OBJECT * ob,
           unsigned int mount_buttons)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    ui_mousebtns = library.convert_to_uintc(mousebtns)
    library.keep_elem_refs(ptr_flobject, mousebtns, ui_mousebtns)
    _fl_set_positioner_ystep(ptr_flobject, ui_mousebtns)


def fl_get_positioner_mouse_buttons(ptr_flobject):
    """fl_get_positioner_mouse_buttons(ptr_flobject) -> mousebtns

    Retrieves which mouse buttons the positioner flobject will react to.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            positioner flobject

    Returns
    -------
        mousebtns : int_pos
            *todo*

    Example
    -------
        >>> *todo*


    API_diversion
    -------------
        API changed from XForms, upstream is 
        fl_get_positioner_mouse_buttons(ptr_flobject, mousebtns)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_positioner_mouse_buttons = library.cfuncproto(
        library.load_so_libforms(), "fl_set_positioner_mouse_buttons",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint],
        """void fl_get_positioner_mouse_buttons(FL_OBJECT * ob,
           unsigned int mount_buttons)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    ui_mousebtns,  ptr_mousebtns = library.make_uints_and_pointer(mousebtns)
    library.keep_elem_refs(ptr_flobject, mousebtns, ui_mousebtns, \
            ptr_mousebtns)
    _fl_set_positioner_ystep(ptr_flobject, ptr_mousebtns)
    return ui_mousebtns.value


def fl_get_positioner_numb(ptr_flobject):
    """fl_get_positioner_numb(ptr_flobject) -> mousebtn

    Retrieves the number of the last used mouse button. It is returned
    by flbasic.fl_mouse_button, too.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            positioner flobject

    Returns
    -------
        mousebtn : int
            *todo*

    Example
    -------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = OK

    """
    _fl_get_positioner_numb = library.cfuncproto(
        library.load_so_libforms(), "fl_get_positioner_numb",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_positioner_numb(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_mousebtn = library.convert_to_intc(mousebtn)
    library.keep_elem_refs(ptr_flobject, mousebtn, i_mousebtn)
    retval = _fl_get_positioner_numb(ptr_flobject, i_mousebtn)
    return retval

