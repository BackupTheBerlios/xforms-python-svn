#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage positioner objects.

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
    e-mail: <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library as libr
from xformslib import xfdata


#########################
# forms.h (positioner.h)
#########################

# Routines

# fl_create_positioner function placeholder (internal)


def fl_add_positioner(postype, x, y, w, h, label):
    """Adds a positioner object.

    --

    :Parameters:
      `postype` : int
        type of positioner to be added. Values (from xfdata.py)
        FL_NORMAL_POSITIONER, FL_OVERLAY_POSITIONER, FL_INVISIBLE_POSITIONER
      `x` : int
        horizontal position (upper-left corner)
      `y` : int
        vertical position (upper-left corner)
      `w` : int
        width in coord units
      `h` : int
        height in coord units
      `label` : str
        text label of positioner. By default the label is placed below the box.

    :return: positioner object added (pFlObject).
    :rtype: pointer to xfdata.FL_OBJECT

    :note: e.g. *todo*

    :status: Tested + NoDoc + Demo = OK

    """
    _fl_add_positioner = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_positioner",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_positioner(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    libr.check_if_initialized()
    libr.check_admitted_value_in_list(postype, xfdata.POSITIONERTYPE_list)
    ipostype = libr.convert_to_int(postype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(postype, x, y, w, h, label, ipostype, ix, iy,
                        iw, ih, slabel)
    retval = _fl_add_positioner(ipostype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_positioner_xvalue(pFlObject, val):
    """Sets the actual value of positioner object in horizontal direction.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        positioner object
      `val` : float
        value to be set. By default it is 0.5.

    :note: e.g. *todo*

    :status: Tested + NoDoc + Demo = OK

    """
    _fl_set_positioner_xvalue = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_positioner_xvalue",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_positioner_xvalue(FL_OBJECT * ob, double val)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    fval = libr.convert_to_double(val)
    libr.keep_elem_refs(pFlObject, val, fval)
    _fl_set_positioner_xvalue(pFlObject, fval)


def fl_get_positioner_xvalue(pFlObject):
    """Obtains value of positioner object in horizontal direction.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        positioner object

    :return: value in horizontal direction
    :rtype: float

    :note: e.g. *todo*

    :status: Tested + NoDoc + Demo = OK

    """
    _fl_get_positioner_xvalue = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_positioner_xvalue",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
        """double fl_get_positioner_xvalue(FL_OBJECT * ob)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.keep_elem_refs(pFlObject)
    retval = _fl_get_positioner_xvalue(pFlObject)
    return retval


def fl_set_positioner_xbounds(pFlObject, minbound, maxbound):
    """Sets minimum and maximum bounds/limits of a positioner in horizontal
    direction.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        positioner object
      `minbound` : float
        minimum bound to be set. By default the minimum value is 0.0.
      `maxbound` : float
        maximum bound to be set. By default the the maximum value is 1.0.

    :note: e.g. *todo*

    :status: Tested + NoDoc + Demo = OK

    """
    _fl_set_positioner_xbounds = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_positioner_xbounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_positioner_xbounds(FL_OBJECT * ob, double min,
            double max)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    fminbound = libr.convert_to_double(minbound)
    fmaxbound = libr.convert_to_double(maxbound)
    libr.keep_elem_refs(pFlObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_positioner_xbounds(pFlObject, fminbound, fmaxbound)


def fl_get_positioner_xbounds(pFlObject):
    """Obtain minumum and maximum bounds/limits of a positioner in horizontal
    direction.

    --

    :Parameters:

      `pFlObject` : pointer to xfdata.FL_OBJECT
        positioner object

    :return: minimum  bound, maximum bound
    :rtype: float, float

    :note: e.g. *todo*

    :attention: API change from XForms - upstream was
        fl_get_positioner_xbounds(pFlObject, minbound, maxbound)

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_positioner_xbounds = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_positioner_xbounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_positioner_xbounds(FL_OBJECT * ob, double * min,
        double * max)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    minbound, pminbound = libr.make_double_and_pointer()
    maxbound, pmaxbound = libr.make_double_and_pointer()
    libr.keep_elem_refs(pFlObject, minbound, maxbound, pminbound,
                        pmaxbound)
    _fl_get_positioner_xbounds(pFlObject, pminbound, pmaxbound)
    return minbound.value, maxbound.value


def fl_set_positioner_yvalue(pFlObject, val):
    """Sets the actual value of positioner object in vertical direction.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        positioner object
      `val` : float
        value to be set. By default it is 0.5.

    :note: e.g. *todo*

    :status: Tested + NoDoc + Demo = OK

    """
    _fl_set_positioner_yvalue = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_positioner_yvalue",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_positioner_yvalue(FL_OBJECT * ob, double val)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    fval = libr.convert_to_double(val)
    libr.keep_elem_refs(pFlObject, val, fval)
    _fl_set_positioner_yvalue(pFlObject, fval)


def fl_get_positioner_yvalue(pFlObject):
    """Obtains value of positioner object in vertical direction.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        positioner object

    :return: value in vertical direction
    :rtype: float

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_positioner_yvalue = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_positioner_yvalue",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
        """double fl_get_positioner_yvalue(FL_OBJECT * ob)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.keep_elem_refs(pFlObject)
    retval = _fl_get_positioner_yvalue(pFlObject)
    return retval


def fl_set_positioner_ybounds(pFlObject, minbound, maxbound):
    """Sets minimum and maximum bounds/limits of a positioner in vertical
    direction.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        positioner object
      `minbound` : float
        minimum bound to be set. By default the minimum value is 0.0.
      `maxbound` : float
        maximum bound to be set. By default the the maximum value is 1.0.

    :note: e.g. *todo*

    :status: Tested + NoDoc + Demo = OK

    """
    _fl_set_positioner_ybounds = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_positioner_ybounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_positioner_ybounds(FL_OBJECT * ob, double min,
           double max)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    fminbound = libr.convert_to_double(minbound)
    fmaxbound = libr.convert_to_double(maxbound)
    libr.keep_elem_refs(pFlObject, minbound, maxbound, fminbound,
                        fmaxbound)
    _fl_set_positioner_ybounds(pFlObject, fminbound, fmaxbound)


def fl_get_positioner_ybounds(pFlObject):
    """Obtain minimum and maximum bounds/limits of a positioner in vertical
    direction.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        positioner object

    :return: minimum bound, maximum bound
    :rtype: float, float

    :note: e.g. *todo*

    :attention: API change from XForms - upstream was
        fl_get_positioner_ybounds(pFlObject, minbound, maxbound)

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_positioner_ybounds = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_positioner_ybounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_positioner_ybounds(FL_OBJECT * ob, double * min,
           double * max)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    minbound, pminbound = libr.make_double_and_pointer()
    maxbound, pmaxbound = libr.make_double_and_pointer()
    libr.keep_elem_refs(pFlObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_positioner_ybounds(pFlObject, pminbound, pmaxbound)
    return minbound.value, maxbound.value


def fl_set_positioner_xstep(pFlObject, step):
    """Handles positioner values in horizontal direction to be rounded to some
    values (multiples of step), e.g. to integer values.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        positioner object
      `step` : float
        rounded value. If it's 0.0, switch off rounding.

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_positioner_xstep = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_positioner_xstep",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_positioner_xstep(FL_OBJECT * ob, double value)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    fstep = libr.convert_to_double(step)
    libr.keep_elem_refs(pFlObject, step, fstep)
    _fl_set_positioner_xstep(pFlObject, fstep)


def fl_set_positioner_ystep(pFlObject, step):
    """Handles positioner values in vertical direction to be rounded to some
    values (multiples of step), e.g. to integer values.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        positioner object
      `step` : float
        rounded value. If it's 0.0, switch off rounding.

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_positioner_ystep = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_positioner_ystep",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_positioner_ystep(FL_OBJECT * ob, double value)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    fstep = libr.convert_to_double(step)
    libr.keep_elem_refs(pFlObject, step, fstep)
    _fl_set_positioner_ystep(pFlObject, fstep)

# fl_set_positioner_return function placeholder (deprecated)
