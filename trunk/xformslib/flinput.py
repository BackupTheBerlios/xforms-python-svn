#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
        <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.

    *****************************************************************


    @newfield example: Example, Example
"""


__docformat__ = "epytext en"    # to be used with epydoc doc


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata
from xformslib import flbasic



####################
# forms.h (input.h)
####################

# Routines

# fl_create_input function placeholder (internal)


def fl_add_input(inputtype, x, y, w, h, label):
    """
    fl_add_input(inputtype, x, y, w, h, label) -> pFlObject

    Adds an input object.

    @param inputtype: type of input to be added. Values (from xfdata module)
        FL_NORMAL_INPUT, FL_FLOAT_INPUT, FL_INT_INPUT, FL_DATE_INPUT,
        FL_MULTILINE_INPUT, FL_HIDDEN_INPUT, FL_SECRET_INPUT
    @type inputtype: int
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int
    @param w: width in coord units
    @type w: int
    @param h: height in coord units
    @type h: int
    @param label: text label of input
    @type label: str

    @returns: object created (pointer to xfdata.FL_OBJECT)

    @status: Tested + Doc + Demo = OK
    """
    _fl_add_input = library.cfuncproto(
        library.load_so_libforms(), "fl_add_input",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_input(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(inputtype, xfdata.INPUTTYPE_list)
    iinputtype = library.convert_to_int(inputtype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(inputtype, x, y, w, h, label, iinputtype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_input(iinputtype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_input(pFlObject, text):
    """
        fl_set_input(pFlObject, text)

        Sets the particular input string, with no checks for validity.
        An empty string can be used to clear an input field.

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param text: input text (<string>)

        @status: Tested + Doc + Demo = OK
    """
    _fl_set_input = library.cfuncproto(
        library.load_so_libforms(), "fl_set_input",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_set_input(FL_OBJECT * ob, const char * str)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    stext = library.convert_to_string(text)
    library.keep_elem_refs(pFlObject, text, stext)
    _fl_set_input(pFlObject, stext)


# fl_set_input_return function placeholder (internal)


def fl_set_input_color(pFlObject, txtcolr, curscolr):
    """
        fl_set_input_color(pFlObject, txtcolr, curscolr)

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param txtcolr: color value for text <long(pos)>
        @param curscolr: color value for cursor <long(pos)>

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_input_color = library.cfuncproto(
        library.load_so_libforms(), "fl_set_input_color",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_COLOR, xfdata.FL_COLOR],
        """void fl_set_input_color(FL_OBJECT * ob, FL_COLOR textcol,
           FL_COLOR curscol)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(txtcolr, xfdata.COLOR_list)
    library.check_admitted_listvalues(curscolr, xfdata.COLOR_list)
    ultxtcolr = library.convert_to_FL_COLOR(txtcolr)
    ulcurscolr = library.convert_to_FL_COLOR(curscolr)
    library.keep_elem_refs(pFlObject, txtcolr, curscolr, ultxtcolr, ulcurscolr)
    _fl_set_input_color(pFlObject, ultxtcolr, ulcurscolr)


def fl_get_input_color(pFlObject):
    """
        fl_get_input_color(pFlObject) -> txtcolr, curscolr

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @returns: color value for text, color value for cursor
                  <long(pos), long(pos)>

        @attention: API change from XForms - upstream was
                    fl_get_input_color(pFlObject, textcolr, curscolr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_input_color = library.cfuncproto(
        library.load_so_libforms(), "fl_get_input_color",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_COLOR),
        cty.POINTER(xfdata.FL_COLOR)],
        """void fl_get_input_color(FL_OBJECT * ob, FL_COLOR * textcol,
           FL_COLOR * curscol)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    txtcolr, ptxtcolr = library.make_FL_COLOR_and_pointer()
    curscolr, pcurscolr = library.make_FL_COLOR_and_pointer()
    library.keep_elem_refs(pFlObject, txtcolr, curscolr)
    _fl_get_input_color(pFlObject, ptxtcolr, pcurscolr)
    return txtcolr.value, curscolr.value


def fl_set_input_scroll(pFlObject, yes):
    """
        fl_set_input_scroll(pFlObject, yes)

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param yes: (<int>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_input_scroll = library.cfuncproto(
        library.load_so_libforms(), "fl_set_input_scroll",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_input_scroll(FL_OBJECT * ob, int yes)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iyes = library.convert_to_int(yes)
    library.keep_elem_refs(pFlObject, yes, iyes)
    _fl_set_input_scroll(pFlObject, iyes)


def fl_set_input_cursorpos(pFlObject, xpos, ypos):
    """
        fl_set_input_cursorpos(pFlObject, xpos, ypos)

        Moves the cursor within the input field.

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param xpos: horizontal cursor position in characters (<int>)
        @param ypos: vertical cursor position in lines (<int>)

        @status: Untested + Doc + NoDemo = NOT OK
    """
    _fl_set_input_cursorpos = library.cfuncproto(
        library.load_so_libforms(), "fl_set_input_cursorpos",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_input_cursorpos(FL_OBJECT * ob, int xpos, int ypos)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ixpos = library.convert_to_int(xpos)
    iypos = library.convert_to_int(ypos)
    library.keep_elem_refs(pFlObject, xpos, ypos, ixpos, iypos)
    _fl_set_input_cursorpos(pFlObject, ixpos, iypos)


def fl_set_input_selected(pFlObject, flag):
    """Selects or deselects the current input. It places the cursor at
    the end of the string when selected.

    @param pFlObject: input object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param flag: flag to deselect/select. Values 0 (deselected) or 1
        (selected)
    @type flag: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_input_selected = library.cfuncproto(
        library.load_so_libforms(), "fl_set_input_selected",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_input_selected(FL_OBJECT * ob, int yes)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iflag = library.convert_to_int(flag)
    library.keep_elem_refs(pFlObject, flag, iflag)
    _fl_set_input_selected(pFlObject, iflag)


def fl_set_input_selected_range(pFlObject, begin, end):
    """
        fl_set_input_selected_range(pFlObject, begin, end)

        Selects or deselects the current input of part of it. When begin is
        0 and end is the last character number, all input is selected. It
        places the cursor at the beginning of selected string.

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param begin: starting value in characters (<int>)
        @param end: ending value in characters (<int>)

        @status: Untested + Doc + NoDemo = NOT OK
    """
    _fl_set_input_selected_range = library.cfuncproto(
        library.load_so_libforms(), "fl_set_input_selected_range",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_input_selected_range(FL_OBJECT * ob,
           int begin, int end)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ibegin = library.convert_to_int(begin)
    iend = library.convert_to_int(end)
    library.keep_elem_refs(pFlObject, begin, end, ibegin, iend)
    _fl_set_input_selected_range(pFlObject, ibegin, iend)


def fl_get_input_selected_range(pFlObject):
    """
        fl_get_input_selected_range(pFlObject) -> string, begin, end

        Obtains the currently selected range, either selected by the
        application or by the user.

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @returns: selected string, starting and ending values of selection
                  in characters [string, int_num, int_num]

        @attention: API change from XForms - upstream was
                    fl_get_input_selected_range(pFlObject, begin, end)

        @status: Untested + Doc + NoDemo = NOT OK
    """
    _fl_get_input_selected_range = library.cfuncproto(
        library.load_so_libforms(), "fl_get_input_selected_range",
        xfdata.STRING, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """const char * fl_get_input_selected_range(FL_OBJECT * ob,
           int * begin, int * end)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    begin, pbegin = library.make_int_and_pointer()
    end, pend = library.make_int_and_pointer()
    library.keep_elem_refs(pFlObject, begin, end, pbegin, pend)
    retval = _fl_get_input_selected_range(pFlObject, pbegin, pend)
    return retval, begin.value, end.value


def fl_set_input_maxchars(pFlObject, maxchars):
    """
        fl_set_input_maxchars(pFlObject, maxchars)

        Limits the number of characters per line for input fields of type
        xfdata.FL_NORMAL_INPUT. To reset the limit to infinite, set maxchars
        to 0. Note that input objects of types xfdata.FL_DATE_INPUT are
        limited to 10 characters per default and those of type
        xfdata.FL_SECRET_INPUT to 16.

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param maxchars: maximum characters to be set (<int>)

        @status: Untested + Doc + NoDemo = NOT OK
    """
    _fl_set_input_maxchars = library.cfuncproto(
        library.load_so_libforms(), "fl_set_input_maxchars",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_input_maxchars(FL_OBJECT * ob, int maxchars)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    imaxchars = library.convert_to_int(maxchars)
    library.keep_elem_refs(pFlObject, maxchars, imaxchars)
    _fl_set_input_maxchars(pFlObject, imaxchars)


def fl_set_input_format(pFlObject, fmt, sep):
    """
        fl_set_input_format(pFlObject, fmt, sep)

        Sets the format used for an input object. Currently used only for
        xfdata.FL_DATE_INPUT objects.

        @param fmt: format for the input (<int>)
        @type fmt: (from xfdata module) FL_INPUT_DDMM, FL_INPUT_MMDD
        @param sep: printable single character used as separator
                    <int or char>

        @status: Untested + Doc + NoDemo = NOT OK
    """
    _fl_set_input_format = library.cfuncproto(
        library.load_so_libforms(), "fl_set_input_format",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_input_format(FL_OBJECT * ob, int fmt, int sep)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(fmt, xfdata.DATEFMT_list)
    if isinstance(sep, str):
        # workaround to let a character as int argument
        ordsep = ord(sep)
    else:
        ordsep = sep
    ifmt = library.convert_to_int(fmt)
    isep = library.convert_to_int(ordsep)
    library.keep_elem_refs(pFlObject, fmt, sep, ordsep, ifmt, isep)
    _fl_set_input_format(pFlObject, ifmt, isep)


def fl_set_input_hscrollbar(pFlObject, pref):
    """
        fl_set_input_hscrollbar(pFlObject, pref)

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param pref: horizontal scrollbar flag (<int>)
        @type pref: (from xfdata module) FL_AUTO, FL_ON, FL_OFF

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_input_hscrollbar = library.cfuncproto(
        library.load_so_libforms(), "fl_set_input_hscrollbar",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_input_hscrollbar(FL_OBJECT * ob, int pref)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(pref, xfdata.SCROLLBARVAL_list)
    ipref = library.convert_to_int(pref)
    library.keep_elem_refs(pFlObject, pref, ipref)
    _fl_set_input_hscrollbar(pFlObject, ipref)


def fl_set_input_vscrollbar(pFlObject, pref):
    """
        fl_set_input_vscrollbar(pFlObject, pref)

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param pref: vertical scrollbar flag (<int>)
        @type pref: (from xfdata module) FL_AUTO, FL_ON, FL_OFF

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_input_vscrollbar = library.cfuncproto(
        library.load_so_libforms(), "fl_set_input_vscrollbar",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_input_vscrollbar(FL_OBJECT * ob, int pref)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(pref, xfdata.SCROLLBARVAL_list)
    ipref = library.convert_to_int(pref)
    library.keep_elem_refs(pFlObject, pref, ipref)
    _fl_set_input_vscrollbar(pFlObject, ipref)


def fl_set_input_topline(pFlObject, top):
    """
        fl_set_input_topline(pFlObject, top)

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param top: ? (<int>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_input_topline = library.cfuncproto(
        library.load_so_libforms(), "fl_set_input_topline",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_input_topline(FL_OBJECT * ob, int top)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    itop = library.convert_to_int(top)
    library.keep_elem_refs(pFlObject, top, itop)
    _fl_set_input_topline(pFlObject, itop)


def fl_set_input_scrollbarsize(pFlObject, hh, vw):
    """
        fl_set_input_scrollbarsize(pFlObject, hh, vw)

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_input_scrollbarsize = library.cfuncproto(
            library.load_so_libforms(), "fl_set_input_scrollbarsize",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_input_scrollbarsize(FL_OBJECT * ob, int hh, int vw)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ihh = library.convert_to_int(hh)
    ivw = library.convert_to_int(vw)
    library.keep_elem_refs(pFlObject, hh, vw, ihh, ivw)
    _fl_set_input_scrollbarsize(pFlObject, ihh, ivw)


def fl_get_input_scrollbarsize(pFlObject):
    """
        fl_get_input_scrollbarsize(pFlObject) -> hh, vw


        @attention: API change from XForms - upstream was
                    fl_get_input_scrollbarsize(pFlObject, hh, vw)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_input_scrollbarsize = library.cfuncproto(
            library.load_so_libforms(), "fl_get_input_scrollbarsize",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """void fl_get_input_scrollbarsize(FL_OBJECT * ob,
               int * hh, int * vw)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    hh, phh = library.make_int_and_pointer()
    vw, pvw = library.make_int_and_pointer()
    library.keep_elem_refs(pFlObject, hh, vw)
    _fl_get_input_scrollbarsize(pFlObject, phh, pvw)
    return hh.value, vw.value


def fl_set_input_xoffset(pFlObject, xoff):
    """
        fl_set_input_xoffset(pFlObject, xoff)

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_input_xoffset = library.cfuncproto(
            library.load_so_libforms(), "fl_set_input_xoffset",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_input_xoffset(FL_OBJECT * ob, int xoff)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ixoff = library.convert_to_int(xoff)
    library.keep_elem_refs(pFlObject, xoff, ixoff)
    _fl_set_input_xoffset(pFlObject, ixoff)


def fl_get_input_xoffset(pFlObject):
    """
        fl_get_input_xoffset(pFlObject) -> num.

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_input_xoffset = library.cfuncproto(
            library.load_so_libforms(), "fl_get_input_xoffset",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_input_xoffset(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_input_xoffset(pFlObject)
    return retval


def fl_set_input_fieldchar(pFlObject, fldchar):
    """
        fl_set_input_fieldchar(pFlObject, fldchar) -> num.

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_input_fieldchar = library.cfuncproto(
            library.load_so_libforms(), "fl_set_input_fieldchar",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """int fl_set_input_fieldchar(FL_OBJECT * ob, int fchar)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ifldchar = library.convert_to_int(fldchar)
    library.keep_elem_refs(pFlObject, fldchar, ifldchar)
    retval = _fl_set_input_fieldchar(pFlObject, ifldchar)
    return retval


def fl_get_input_topline(pFlObject):
    """
        fl_get_input_topline(pFlObject) -> num.

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_input_topline = library.cfuncproto(
            library.load_so_libforms(), "fl_get_input_topline",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_input_topline(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_input_topline(pFlObject)
    return retval


def fl_get_input_screenlines(pFlObject):
    """
        fl_get_input_screenlines(pFlObject) -> num.

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_input_screenlines = library.cfuncproto(
            library.load_so_libforms(), "fl_get_input_screenlines",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_input_screenlines(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_input_screenlines(pFlObject)
    return retval


def fl_get_input_cursorpos(pFlObject):
    """
        fl_get_input_cursorpos(pFlObject) -> num., x, y

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @attention: API change from XForms - upstream was
                    fl_get_input_cursorpos(pFlObject, x, y)

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_get_input_cursorpos = library.cfuncproto(
        library.load_so_libforms(), "fl_get_input_cursorpos",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """int fl_get_input_cursorpos(FL_OBJECT * ob, int * x, int * y)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    x, px = library.make_int_and_pointer()
    y, py = library.make_int_and_pointer()
    library.keep_elem_refs(pFlObject, x, y)
    retval = _fl_get_input_cursorpos(pFlObject, px, py)
    return retval, x.value, y.value


def fl_set_input_cursor_visible(pFlObject, visible):
    """
        fl_set_input_cursor_visible(pFlObject, visible)

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_input_cursor_visible = library.cfuncproto(
        library.load_so_libforms(), "fl_set_input_cursor_visible",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_input_cursor_visible(FL_OBJECT * ob, int visible)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ivisible = library.convert_to_int(visible)
    library.keep_elem_refs(pFlObject, visible, ivisible)
    _fl_set_input_cursor_visible(pFlObject, ivisible)


def fl_get_input_numberoflines(pFlObject):
    """
        fl_get_input_numberoflines(pFlObject) -> lines num.

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_input_numberoflines = library.cfuncproto(
        library.load_so_libforms(), "fl_get_input_numberoflines",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_input_numberoflines(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_input_numberoflines(pFlObject)
    return retval


def fl_get_input_format(pFlObject):
    """
        fl_get_input_format(pFlObject) -> fmt, sep

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @attention: API change from XForms - upstream was
                    fl_get_input_format(pFlObject, fmt, sep)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_input_format = library.cfuncproto(
        library.load_so_libforms(), "fl_get_input_format",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """void fl_get_input_format(FL_OBJECT * ob, int * fmt, int * sep)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fmt, pfmt = library.make_int_and_pointer()
    sep, psep = library.make_int_and_pointer()
    library.keep_elem_refs(pFlObject, fmt, sep, pfmt, psep)
    _fl_get_input_format(pFlObject, pfmt, psep)
    return fmt.value, sep.value


def fl_get_input(pFlObject):
    """
        fl_get_input(pFlObject) -> input string

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_get_input = library.cfuncproto(
        library.load_so_libforms(), "fl_get_input",
        xfdata.STRING, [cty.POINTER(xfdata.FL_OBJECT)],
        """const char * fl_get_input(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_input(pFlObject)
    return retval


def fl_set_input_filter(pFlObject, py_InputValidator):
    """
        fl_set_input_filter(pFlObject, py_InputValidator) -> input_filter func.

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    #FL_INPUTVALIDATOR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_OBJECT),
    #                                  xfdata.STRING, xfdata.STRING, cty.c_int)
    _fl_set_input_filter = library.cfuncproto(
            library.load_so_libforms(), "fl_set_input_filter",
            xfdata.FL_INPUTVALIDATOR, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_INPUTVALIDATOR],
            """FL_INPUTVALIDATOR fl_set_input_filter(FL_OBJECT * ob,
               FL_INPUTVALIDATOR validate)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    c_InputValidator = xfdata.FL_INPUTVALIDATOR(py_InputValidator)
    library.keep_cfunc_refs(c_InputValidator, py_InputValidator)
    library.keep_elem_refs(pFlObject)
    retval = _fl_set_input_filter(pFlObject, c_InputValidator)
    return retval


def fl_validate_input(pFlObject):
    """
        fl_validate_input(pFlObject) -> num.

        Tests if the value in an input field is valid. It returns
        xfdata.FL_VALID if the value is valid or if there is no validator
        function set for the input, otherwise xfdata.FL_INVALID.

        @param pFlObject: input object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @returns: (from xfdata module) FL_VALID or FL_INVALID (<int>)

        @status: Untested + Doc + NoDemo = NOT OK
    """
    _fl_validate_input = library.cfuncproto(
            library.load_so_libforms(), "fl_validate_input",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_validate_input(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_validate_input(pFlObject)
    return retval


fl_set_input_shortcut = flbasic.fl_set_object_shortcut


# edit keys

def fl_set_input_editkeymap(pEditKeymap):
    """
    fl_set_input_editkeymap(pEditKeymap)

    @param pEditKeymap: EditKeyMap class
    @type pEditKeymap: pointer to xfdata.FL_EditKeymap

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_input_editkeymap = library.cfuncproto(
        library.load_so_libforms(), "fl_set_input_editkeymap",
        None, [cty.POINTER(xfdata.FL_EditKeymap)],
        """void fl_set_input_editkeymap(const char * keymap)""")
    library.check_if_initialized()
    library.keep_elem_refs(pEditKeymap)
    _fl_set_input_editkeymap(pEditKeymap)


