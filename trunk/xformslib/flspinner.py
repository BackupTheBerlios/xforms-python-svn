#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage spinner flobjects.
"""

#    Copyright (C) 2009, 2010, 2011  Luca Lazzaroni "LukenShiro"
#    e-mail: <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared flobject libraries #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata


######################
# forms.h (spinner.h)
######################


# fl_create_spinner() function placeholder (internal)


def fl_add_spinner(spinnertype, xpos, ypos, width, height, label):
    """fl_add_spinner(spinnertype, xpos, ypos, width, height, label)
    -> ptr_flobject

    Adds a spinner flobject. It is a combination of a (numerical) input field
    with two (touch) buttons that allow to increment or decrement the value in
    the (editable) input field. I.e. the user can change the spinners value by
    either editing the value of the input field or by using the up/down buttons
    shown beside the input field.

    Parameters
    ----------
        spinnertype : int
            type of spinner to be added. Values (from xfdata.py)
            - FL_INT_SPINNER (spinner with integer values),
            - FL_FLOAT_SPINNER (spinner with float values)
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of spinner

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            spinner flobject added

    Examples
    --------
        >>> pspnobj = fl_add_spinner(xfdata.FL_INT_SPINNER, 175, 75, 140, 150,
                "My spinner")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_spinner = library.cfuncproto(
        library.load_so_libforms(), "fl_add_spinner",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_spinner(int type, FL_Coord x, FL_Coord y,
        FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_flinitialized()
    library.checkfatal_allowed_value_in_list(spinnertype, \
            xfdata.SPINNERTYPE_list)
    i_spinnertype = library.convert_to_intc(spinnertype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_stringc(label)
    library.keep_elem_refs(spinnertype, xpos, ypos, width, height, label, \
            i_spinnertype, i_xpos, i_ypos, i_width, i_height, s_label)
    retval = _fl_add_spinner(i_spinnertype, i_xpos, i_ypos, i_width, \
            i_height, s_label)
    return retval


def fl_get_spinner_value(ptr_flobject):
    """fl_get_spinner_value(ptr_flobject) -> spvalue

    Finds out value of a spinner flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            spinner flobject

    Returns
    -------
        spvalue : float
            spinner value

    Examples
    --------
        >>> val = fl_get_spinner_value(pspnobj)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_spinner_value = library.cfuncproto(
        library.load_so_libforms(), "fl_get_spinner_value",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
        """double fl_get_spinner_value(FL_OBJECT * obj)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_spinner_value(ptr_flobject)
    return retval


def fl_set_spinner_value(ptr_flobject, spvalue):
    """fl_set_spinner_value(ptr_flobject, spvalue) -> oldspvalue

    Defines value of a spinner flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            spinner flobject
        spvalue : float
            value to be set

    Returns
    -------
        oldspvalue : float
            previous spinner value

    Examples
    --------
        >>> oldval = fl_set_spinner_value(spnobj, 12.0)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_spinner_value = library.cfuncproto(
        library.load_so_libforms(), "fl_set_spinner_value",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """double fl_set_spinner_value(FL_OBJECT * obj, double val)""")
    library.verify_flobjectptr_type(ptr_flobject)
    f_spvalue = library.convert_to_doublec(spvalue)
    library.keep_elem_refs(ptr_flobject, spvalue, f_spvalue)
    _fl_set_spinner_value(ptr_flobject, f_spvalue)


def fl_set_spinner_bounds(ptr_flobject, minbound, maxbound):
    """fl_set_spinner_bounds(ptr_flobject, minbound, maxbound)

    Defines minimum and maximum value limits of a spinner flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            spinner flobject
        minbound : float
            minimum value bound to be set
        maxbound : float
            maximum value bound to be set

    Examples
    --------
        >>> fl_set_spinner_bounds(pspnobj, 1.0, 10.0)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_spinner_bounds = library.cfuncproto(
        library.load_so_libforms(), "fl_set_spinner_bounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_spinner_bounds(FL_OBJECT * obj, double min,
           double max)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_minbound = library.convert_to_doublec(minbound)
    f_maxbound = library.convert_to_doublec(maxbound)
    library.keep_elem_refs(ptr_flobject, minbound, maxbound, \
            f_minbound, f_maxbound)
    _fl_set_spinner_bounds(ptr_flobject, f_minbound, f_maxbound)


def fl_get_spinner_bounds(ptr_flobject):
    """fl_get_spinner_bounds(ptr_flobject) -> minbound, maxbound

    Finds out minimum and maximum value limits of a spinner flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            spinner flobject

    Returns
    -------
        minbound : float
            minimum value bound. It can be set up to xfdata.INT_MIN for
            xfdata.FL_INT_SPINNER, or up to negative of xfdata.DBL_MAX for
            xfdata.FL_FLOAT_SPINNER. By default it is -10000
        maxbound : float
            maximum value bound. It can be set up to xfdata.INT_MAX for
            xfdata.FL_INT_SPINNER, or up to xfdata.DBL_MAX for
            xfdata.FL_FLOAT_SPINNER. By default it is 10000

    Examples
    --------
        >>> minb, maxb = fl_get_spinner_bounds(pspnobj)

    API_diversion
    ----------
        API changed from XForms, upstream is
        fl_get_spinner_bounds(ptr_flobject, minbound, maxbound)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_spinner_bounds = library.cfuncproto(
        library.load_so_libforms(), "fl_get_spinner_bounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)], \
        """void fl_get_spinner_bounds(FL_OBJECT * obj, double * min,
           double * max)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_minbound, ptr_minbound = library.make_doublec_and_pointer()
    f_maxbound, ptr_maxbound = library.make_doublec_and_pointer()
    library.keep_elem_refs(ptr_flobject, f_minbound, f_maxbound, \
            ptr_minbound, ptr_maxbound)
    _fl_get_spinner_bounds(ptr_flobject, ptr_minbound, ptr_maxbound)
    return f_minbound.value, f_maxbound.value


def fl_set_spinner_step(ptr_flobject, step):
    """fl_set_spinner_step(ptr_flobject, step)

    Defines step that spinner values are rounded to.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            spinner flobject
        step : float
            step value to round spinner values to

    Examples
    --------
        >>> fl_set_spinner_step(pspnobj, 0.5)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_spinner_step = library.cfuncproto(
        library.load_so_libforms(), "fl_set_spinner_step",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_spinner_step(FL_OBJECT * obj, double step)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_step = library.convert_to_doublec(step)
    library.keep_elem_refs(ptr_flobject, step, f_step)
    _fl_set_spinner_step(ptr_flobject, f_step)


def fl_get_spinner_step(ptr_flobject):
    """fl_get_spinner_step(ptr_flobject) -> step

    Finds out step that spinner values are rounded to.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            spinner flobject

    Returns
    -------
        step : float
            step values are rounded to

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_spinner_step = library.cfuncproto(
        library.load_so_libforms(), "fl_get_spinner_step",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
        """double fl_get_spinner_step(FL_OBJECT * obj)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_spinner_step(ptr_flobject)
    return retval


def fl_set_spinner_precision(ptr_flobject, precis):
    """fl_set_spinner_precision(ptr_flobject, precis)

    Defines the precision number of values in a spinner flobject. It has no
    effect on xfdata.FL_INT_SPINNER flobjects.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            spinner flobject
        precis : int
            precision value to be set after the decimal point. By default it
            is set to 6 digits.

    Examples
    --------
        >>> fl_set_spinner_precision(pspnobj, 2)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_spinner_precision = library.cfuncproto(
        library.load_so_libforms(), "fl_set_spinner_precision",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_spinner_precision(FL_OBJECT * obj, int prec)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_precis = library.convert_to_intc(precis)
    library.keep_elem_refs(ptr_flobject, precis, i_precis)
    _fl_set_spinner_precision(ptr_flobject, i_precis)


def fl_get_spinner_precision(ptr_flobject):
    """fl_get_spinner_precision(ptr_flobject) -> precis

    Finds out the precision of values in a spinner flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            spinner flobject

    Returns
    -------
        precis : int
            precision number after the dot, or 0 (if it is of type
            xfdata.FL_INT_SPINNER)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_spinner_precision = library.cfuncproto(
        library.load_so_libforms(), "fl_get_spinner_precision",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_spinner_precision(FL_OBJECT * obj)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_spinner_precision(ptr_flobject)
    return retval


def fl_get_spinner_input(ptr_flobject):
    """fl_get_spinner_input(ptr_flobject) -> ptr_flobject

    Finds out the input element of the spinner flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            spinner flobject

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            input element of spinner flobject

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_spinner_input = library.cfuncproto(
        library.load_so_libforms(), "fl_get_spinner_input",
        cty.POINTER(xfdata.FL_OBJECT), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_OBJECT * fl_get_spinner_input(FL_OBJECT * obj)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_spinner_input(ptr_flobject)
    return retval


def fl_get_spinner_up_button(ptr_flobject):
    """fl_get_spinner_up_button(ptr_flobject) -> ptr_flobject

    Finds out up button element of a spinner flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            spinner flobject

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            up button element of spinner flobject

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_spinner_up_button = library.cfuncproto(
        library.load_so_libforms(), "fl_get_spinner_up_button",
        cty.POINTER(xfdata.FL_OBJECT), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_OBJECT * fl_get_spinner_up_button(FL_OBJECT * obj)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_spinner_up_button(ptr_flobject)
    return retval


def fl_get_spinner_down_button(ptr_flobject):
    """fl_get_spinner_down_button(ptr_flobject) -> ptr_flobject

    Finds out down button element of a spinner flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            spinner flobject

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            down button element of spinner flobject

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_spinner_down_button = library.cfuncproto(
        library.load_so_libforms(), "fl_get_spinner_down_button",
        cty.POINTER(xfdata.FL_OBJECT), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_OBJECT * fl_get_spinner_down_button(FL_OBJECT * obj)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_spinner_down_button(ptr_flobject)
    return retval

