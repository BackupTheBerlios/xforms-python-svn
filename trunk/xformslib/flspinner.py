#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
        <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.

    *****************************************************************


    @newfield example: Example, Example
"""


__docformat__ = "epytext en"    # to be used with epydoc doc


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata



######################
# forms.h (spinner.h)
######################


# fl_create_spinner function placeholder (internal)


def fl_add_spinner(spinnertype, x, y, w, h, label):
    """
        fl_add_spinner(spinnertype, x, y, w, h, label) -> pFlObject

        Adds a spinner object.

        @param spinnertype: type of spinner to be added
        @type spinnertype: [num./int] from xfdata module FL_INT_SPINNER,
                           FL_FLOAT_SPINNER
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of spinner

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_add_spinner = library.cfuncproto(
        library.load_so_libforms(), "fl_add_spinner",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_spinner(int type, FL_Coord x, FL_Coord y,
        FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(spinnertype, xfdata.SPINNERTYPE_list)
    ispinnertype = library.convert_to_int(spinnertype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(spinnertype, x, y, w, h, label, ispinnertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_spinner(ispinnertype, ix, iy, iw, ih, slabel)
    return retval


def fl_get_spinner_value(pFlObject):
    """
        fl_get_spinner_value(pFlObject) -> floatval

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_spinner_value = library.cfuncproto(
        library.load_so_libforms(), "fl_get_spinner_value",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
        """double fl_get_spinner_value(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_spinner_value(pFlObject)
    return retval


def fl_set_spinner_value(pFlObject, val):
    """
        fl_set_spinner_value(pFlObject, val) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_spinner_value = library.cfuncproto(
        library.load_so_libforms(), "fl_set_spinner_value",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """double fl_set_spinner_value(FL_OBJECT * obj, double val)""")
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fval = library.convert_to_double(val)
    library.keep_elem_refs(pFlObject, val, fval)
    _fl_set_spinner_value(pFlObject, fval)


def fl_set_spinner_bounds(pFlObject, minbound, maxbound):
    """
        fl_set_spinner_bounds(pFlObject, minbound, maxbound)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_spinner_bounds = library.cfuncproto(
        library.load_so_libforms(), "fl_set_spinner_bounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_spinner_bounds(FL_OBJECT * obj, double min,
           double max)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fminbound = library.convert_to_double(minbound)
    fmaxbound = library.convert_to_double(maxbound)
    library.keep_elem_refs(pFlObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_spinner_bounds(pFlObject, fminbound, fmaxbound)


def fl_get_spinner_bounds(pFlObject):
    """
        fl_get_spinner_bounds(pFlObject) -> minbound, maxbound

        @attention: API change from XForms - upstream was
                    fl_get_spinner_bounds(pFlObject, minbound, maxbound)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_spinner_bounds = library.cfuncproto(
        library.load_so_libforms(), "fl_get_spinner_bounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)], \
        """void fl_get_spinner_bounds(FL_OBJECT * obj, double * min,
           double * max)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    minbound, pminbound = library.make_double_and_pointer()
    maxbound, pmaxbound = library.make_double_and_pointer()
    library.keep_elem_refs(pFlObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_spinner_bounds(pFlObject, pminbound, pmaxbound)
    return minbound.value, maxbound.value


def fl_set_spinner_step(pFlObject, step):
    """
        fl_set_spinner_step(pFlObject, step)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_spinner_step = library.cfuncproto(
        library.load_so_libforms(), "fl_set_spinner_step",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_spinner_step(FL_OBJECT * obj, double step)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fstep = library.convert_to_double(step)
    library.keep_elem_refs(pFlObject, step, fstep)
    _fl_set_spinner_step(pFlObject, fstep)


def fl_get_spinner_step(pFlObject):
    """
        fl_get_spinner_step(pFlObject) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_spinner_step = library.cfuncproto(
        library.load_so_libforms(), "fl_get_spinner_step",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
        """double fl_get_spinner_step(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_spinner_step(pFlObject)
    return retval


def fl_set_spinner_precision(pFlObject, precnum):
    """
        fl_set_spinner_precision(pFlObject, precnum)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_spinner_precision = library.cfuncproto(
        library.load_so_libforms(), "fl_set_spinner_precision",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_spinner_precision(FL_OBJECT * obj, int prec)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iprecnum = library.convert_to_int(precnum)
    library.keep_elem_refs(pFlObject, precnum, iprecnum)
    _fl_set_spinner_precision(pFlObject, iprecnum)


def fl_get_spinner_precision(pFlObject):
    """
        fl_get_spinner_precision(pFlObject) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_spinner_precision = library.cfuncproto(
        library.load_so_libforms(), "fl_get_spinner_precision",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_spinner_precision(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_spinner_precision(pFlObject)
    return retval


def fl_get_spinner_input(pFlObject):
    """
        fl_get_spinner_input(pFlObject) -> pFlObject

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_spinner_input = library.cfuncproto(
        library.load_so_libforms(), "fl_get_spinner_input",
        cty.POINTER(xfdata.FL_OBJECT), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_OBJECT * fl_get_spinner_input(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_spinner_input(pFlObject)
    return retval


def fl_get_spinner_up_button(pFlObject):
    """
        fl_get_spinner_up_button(pFlObject) -> pFlObject

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_spinner_up_button = library.cfuncproto(
        library.load_so_libforms(), "fl_get_spinner_up_button",
        cty.POINTER(xfdata.FL_OBJECT), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_OBJECT * fl_get_spinner_up_button(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_spinner_up_button(pFlObject)
    return retval


def fl_get_spinner_down_button(pFlObject):
    """
        fl_get_spinner_down_button(pFlObject) -> pFlObject

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_spinner_down_button = library.cfuncproto(
        library.load_so_libforms(), "fl_get_spinner_down_button",
        cty.POINTER(xfdata.FL_OBJECT), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_OBJECT * fl_get_spinner_down_button(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_spinner_down_button(pFlObject)
    return retval


