#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
    e-mail: <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata



#######################
# forms.h (bitmap.h)
# Object Class: Bitmap
#######################


# Routines

# fl_create_bitmap function placeholder (internal)


def fl_add_bitmap(bitmaptype, x, y, w, h, label):
    """Adds a bitmap object.

    @param bitmaptype: type of bitmap to be added. Values (from xfdata)
        module) FL_NORMAL_BITMAP
    @type bitmaptype: int
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position of bitmap (upper-left corner)
    @type y: int
    @param w: width in coord units
    @type w: int
    @param h: height in coord units
    @type h: int
    @param label: text label of bitmap
    @type label: str

    @returns: object created (pFlObject)
    @rtype: pointer to xfdata.FL_OBJECT

    @example: fl_add_bitmap(xfdata.FL_NORMAL_BITMAP, 320, 200, 100, 100, \
        "MyBitmap")

    @status: Tested + NoDoc + Demo = OK

    """
    _fl_add_bitmap = library.cfuncproto(
        library.load_so_libforms(), "fl_add_bitmap",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_bitmap(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(bitmaptype, xfdata.BITMAPTYPE_list)
    ibitmaptype = library.convert_to_int(bitmaptype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(bitmaptype, x, y, w, h, label, ibitmaptype, ix, \
                           iy, iw, ih, slabel)
    retval = _fl_add_bitmap(ibitmaptype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_bitmap_data(pFlObject, w, h, xbmcontents):
    """Sets the actual bitmap being displayed from specified contents. A
    number of bitmaps can be found in '/usr/include/X11/bitmaps' or similar
    places. The X program 'bitmap' can be used to create bitmaps.

    @param pFlObject: pointer to object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param w: width of bitmap in cood units
    @type w: int
    @param h: height of bitmap in coord units
    @type h: int
    @param xbmcontents: bitmap data used for contents
    @type xbmcontents: str of ubytes characters

    @example: ??

    @status: Untested + Doc + NoDemo = NOT OK

    """
    _fl_set_bitmap_data = library.cfuncproto(
        library.load_so_libforms(), "fl_set_bitmap_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int,
        cty.POINTER(cty.c_ubyte)],
        """void fl_set_bitmap_data(FL_OBJECT * ob, int w, int h,
           unsigned char * data)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iw = library.convert_to_int(w)
    ih = library.convert_to_int(h)
    pxbmcontents = cty.cast(xbmcontents, cty.POINTER(cty.c_ubyte))
    library.keep_elem_refs(pFlObject, w, h, xbmcontents, iw, ih, pxbmcontents)
    _fl_set_bitmap_data(pFlObject, iw, ih, pxbmcontents)


def fl_set_bitmap_file(pFlObject, fname):
    """Sets the actual bitmap being displayed from a specified .xbm file. A
    number of bitmaps can be found in '/usr/include/X11/bitmaps' or similar
    places. The X program 'bitmap' can be used to create bitmaps.

    @param pFlObject: bitmap object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param fname: name (path included if necessary) of bitmap (.xbm
        format) file
    @type fname: str

    @example: fl_set_bitmap_file(xbmobj, "mybitmapfile.xbm")

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_bitmap_file = library.cfuncproto(
        library.load_so_libforms(), "fl_set_bitmap_file",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_set_bitmap_file(FL_OBJECT * ob, const char * fname)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    sfname = library.convert_to_string(fname)
    library.keep_elem_refs(pFlObject, fname, sfname)
    _fl_set_bitmap_file(pFlObject, sfname)


fl_set_bitmapbutton_file = fl_set_bitmap_file
fl_set_bitmapbutton_datafile = fl_set_bitmapbutton_file

# fl_set_bitmap_datafile placeholder (backwards)


def fl_read_bitmapfile(win, filename):
    """Makes a bitmap from a bitmap file.

    @param win: window id
    @type win: long_pos
    @param filename: name of bitmap (.xbm format) file
    @type filename: str

    @returns: pixmap, w, h, hotx, hoty
    @rtype: long_pos, int_pos, int_pos, int, int

    @example: pmap, w, h, hotx, hoty = fl_read_bitmapfile(win0, "xbmfile.xbm")

    @attention: API change from XForms - upstream was
        fl_read_bitmapfile(win, filename, w, h, hotx, hoty)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_read_bitmapfile = library.cfuncproto(
        library.load_so_libforms(), "fl_read_bitmapfile",
        xfdata.Pixmap, [xfdata.Window, xfdata.STRING, cty.POINTER(cty.c_uint),
        cty.POINTER(cty.c_uint), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """Pixmap fl_read_bitmapfile(Window win, const char * file,
           unsigned int * w, unsigned int * h, int * hotx, int * hoty)""")
    library.check_if_initialized()
    ulwin = library.convert_to_Window(win)
    sfilename = library.convert_to_string(filename)
    w, pw = library.make_uint_and_pointer()
    h, ph = library.make_uint_and_pointer()
    hotx, photx = library.make_int_and_pointer()
    hoty, photy = library.make_int_and_pointer()
    library.keep_elem_refs(win, filename, w, h, hotx, hoty, ulwin, sfilename,
                           pw, ph, photx, photy)
    retval = _fl_read_bitmapfile(ulwin, sfilename, pw, ph, photx, photy)
    return retval, w.value, h.value, hotx.value, hoty.value


def fl_create_from_bitmapdata(win, data, w, h):
    """Makes a bitmap from bitmap contents data.

    @param win: window
    @type win: long_pos
    @param data: bitmap contents data
    @type data: str of ubyte
    @param w: width of bitmap in coord units
    @type w: int_pos
    @param h: height of bitmap in coord units
    @type h: int_pos

    @returns: pixmap created
    @rtype: long_pos

    @example: ??

    @status: Untested + Doc + NoDemo = NOT OK

    """
    _fl_create_from_bitmapdata = library.cfuncproto(
        library.load_so_libforms(), "fl_create_from_bitmapdata",
        xfdata.Pixmap, [xfdata.Window, xfdata.STRING, cty.c_int, cty.c_int],
        """Pixmap fl_create_from_bitmapdata(Window win, const
           char * data, int width, int height)""")
    library.check_if_initialized()
    ulwin = library.convert_to_Window(win)
    sdata = library.convert_to_string(data)
    iw = library.convert_to_int(w)
    ih = library.convert_to_int(h)
    library.keep_elem_refs(win, data, w, h, ulwin, sdata, iw, ih)
    retval = _fl_create_from_bitmapdata(ulwin, sdata, iw, ih)
    return retval


# PIXMAP stuff

# fl_create_pixmap function placeholder (internal)


def fl_add_pixmap(pixmaptype, x, y, w, h, label):
    """Adds a pixmap object.

    @param pixmaptype: type of pixmap to be added. Values (from xfdata
        module) FL_NORMAL_PIXMAP
    @type pixmaptype: int
    @param x: horizontal position (upper-left corner)
    @type x int
    @param y: vertical position of bitmap (upper-left corner)
    @type y int
    @param w: width in coord units
    @type w int
    @param h: height in coord units
    @type h int
    @param label: text label of pixmap
    @type label: str

    @returns: object created (pFlObject)
    @rtype: pointer to xfdata.FL_OBJECT

    @example: fl_add_pixmap(xfdata.FL_NORMAL_PIXMAP, 320, 200, 100, 100, \
        "MyPixmap")

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_add_pixmap = library.cfuncproto(
        library.load_so_libforms(), "fl_add_pixmap",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_pixmap(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(pixmaptype, xfdata.PIXMAPTYPE_list)
    ipixmaptype = library.convert_to_int(pixmaptype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(pixmaptype, x, y, w, h, label, ipixmaptype, ix, \
                           iy, iw, ih, slabel)
    retval = _fl_add_pixmap(ipixmaptype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_pixmap_data(pFlObject, bits):
    """Sets the actual bitmap being displayed from specified data. A
    number of pixmaps can be found in '/usr/include/X11/pixmaps' or similar
    places.

    @param pFlObject: pixmap object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param bits: bits contents of pixmap
    @type bits: str of ubyte

    @example: ??

    @status: Untested + Doc + NoDemo = NOT OK

    """
    _fl_set_pixmap_data = library.cfuncproto(
        library.load_so_libforms(), "fl_set_pixmap_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.STRING)],
        """void fl_set_pixmap_data(FL_OBJECT * ob, char * * bits)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    print "bits", bits
    sbits = library.convert_to_string(bits)
    print "sbits", sbits
    pbits = cty.pointer(sbits)     #cty.cast(bits, cty.POINTER(xfdata.STRING))
    print "pbits", pbits
    library.keep_elem_refs(pFlObject, bits, sbits, pbits)
    _fl_set_pixmap_data(pFlObject, pbits)


def fl_set_pixmap_file(pFlObject, fname):
    """Sets the actual bitmap being displayed from a specified .xpm file. A
    number of pixmaps can be found in '/usr/include/X11/pixmaps' or similar
    places.

    @param pFlObject: pixmap object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param fname: name (path included if necessary) of pixmap (.xpm
        format) file
    @type fname: str

    @example: fl_set_pixmap_file(xpmobj, "mypixmapfile.xpm")

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_pixmap_file = library.cfuncproto(
        library.load_so_libforms(), "fl_set_pixmap_file",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_set_pixmap_file(FL_OBJECT * ob, const char * fname)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    sfname = library.convert_to_string(fname)
    library.keep_elem_refs(pFlObject, fname, sfname)
    _fl_set_pixmap_file(pFlObject, sfname)


fl_set_pixmapbutton_file = fl_set_pixmap_file
fl_set_pixmapbutton_datafile = fl_set_pixmapbutton_file


def fl_set_pixmap_align(pFlObject, align, xmargin, ymargin):
    """Changes alignment of a pixmap. By default it is displayed centered
    inside the bounding box.

    @param pFlObject: pixmap object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param align: alignment of pixmap. Values (from xfdata module)
        FL_ALIGN_CENTER, FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT,
        FL_ALIGN_RIGHT, FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP,
        FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE,
        FL_ALIGN_VERT
    @type align: int

    @example: fl_set_pixmap_align(xpmobj, xfdata.FL_ALIGN_CENTER, 10, 10)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_pixmap_align = library.cfuncproto(
        library.load_so_libforms(), "fl_set_pixmap_align",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int,
        cty.c_int],
        """void fl_set_pixmap_align(FL_OBJECT * ob, int align,
           int xmargin, int ymargin)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(align, xfdata.ALIGN_list)
    ialign = library.convert_to_int(align)
    ixmargin = library.convert_to_int(xmargin)
    iymargin = library.convert_to_int(ymargin)
    library.keep_elem_refs(pFlObject, align, xmargin, ymargin, ialign, ixmargin,
                   iymargin)
    _fl_set_pixmap_align(pFlObject, ialign, ixmargin, iymargin)


fl_set_pixmapbutton_align = fl_set_pixmap_align


def fl_set_pixmap_pixmap(pFlObject, idnum, mask):
    """ fl_set_pixmap_pixmap(pFlObject, idnum, mask)

    @param pFlObject: pixmap object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param idnum: ?
    @type idnum: long_pos
    @param mask: ?
    @type mask: long_pos

    @example: ??

    @status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_pixmap_pixmap = library.cfuncproto(
        library.load_so_libforms(), "fl_set_pixmap_pixmap",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.Pixmap, xfdata.Pixmap],
        """void fl_set_pixmap_pixmap(FL_OBJECT * ob, Pixmap id,
           Pixmap mask)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ulidnum = library.convert_to_ulong(idnum)
    ulmask = library.convert_to_ulong(mask)
    library.keep_elem_refs(pFlObject, idnum, mask, ulidnum, ulmask)
    _fl_set_pixmap_pixmap(pFlObject, ulidnum, ulmask)


fl_set_pixmapbutton_pixmap = fl_set_pixmap_pixmap


def fl_set_pixmap_colorcloseness(red, green, blue):
    """ fl_set_pixmap_colorcloseness(red, green, blue)

    @param red: ?
    @type red: int
    @param green: ?
    @type green: int
    @param blue: ?
    @type blue: int

    @example: ?

    @status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_pixmap_colorcloseness = library.cfuncproto(
        library.load_so_libforms(), "fl_set_pixmap_colorcloseness",
        None, [cty.c_int, cty.c_int, cty.c_int],
        """void fl_set_pixmap_colorcloseness(int red, int green, int blue)""")
    library.check_if_initialized()
    ired = library.convert_to_int(red)
    igreen = library.convert_to_int(green)
    iblue = library.convert_to_int(blue)
    library.keep_elem_refs(red, green, blue, ired, igreen, iblue)
    _fl_set_pixmap_colorcloseness(ired, igreen, iblue)


def fl_free_pixmap_pixmap(pFlObject):
    """fl_free_pixmap_pixmap(pFlObject)

    @param pFlObject: pixmap object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: ??

    @status: Tested + NoDoc + Demo = OK

    """
    _fl_free_pixmap_pixmap = library.cfuncproto(
        library.load_so_libforms(), "fl_free_pixmap_pixmap",
        None, [cty.POINTER(xfdata.FL_OBJECT)],
        """void fl_free_pixmap_pixmap(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_free_pixmap_pixmap(pFlObject)


fl_free_pixmapbutton_pixmap = fl_free_pixmap_pixmap


def fl_get_pixmap_pixmap(pFlObject):
    """ fl_get_pixmap_pixmap(pFlObject) -> pixmap, Pixmap, Pixmap_mask

    @param pFlObject: pixmap object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: pixmap id, pixmap id, pixmap mask
    @rtype: long_pos, long_pos, long_pos

    @example: ??

    @attention: API change from XForms - upstream was
        fl_get_pixmap_pixmap(pFlObject, p, m)

    @status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_pixmap_pixmap = library.cfuncproto(
        library.load_so_libforms(), "fl_get_pixmap_pixmap",
        xfdata.Pixmap, [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.Pixmap), cty.POINTER(xfdata.Pixmap)],
        """Pixmap fl_get_pixmap_pixmap(FL_OBJECT * ob, Pixmap * p,
           Pixmap * m)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    p, pp = library.make_ulong_and_pointer()
    m, pm = library.make_ulong_and_pointer()
    library.keep_elem_refs(pFlObject, p, m, pp, pm)
    retval = _fl_get_pixmap_pixmap(pFlObject, pp, pm)
    return retval, p.value, m.value


fl_get_pixmapbutton_pixmap = fl_get_pixmap_pixmap


def fl_read_pixmapfile(win, filename, tran):
    """Makes a pixmap from a pixmap file.

    @param win: window id
    @type win: long_pos
    @param filename: name of pixmap (.xpm format) file
    @type filename: str
    @param tran: color value
    @type tran: long_pos

    @returns: pixmap, w, h, shapemask, hotx, hoty
    @rtype: long_pos, int_pos, int_pos, long_pos, int, int

    @example: pmap, w, h, shapmsk, hotx, hoty = fl_read_pixmapfile(win0, \
        "xpmfile.xpm", xfdata.FL_WHITE)

    @attention: API change from XForms - upstream was
        fl_read_pixmapfile(win, filename, w, h, shape_mask, hotx, hoty, tran)

    @status: Tested + Doc + Demo = OK

    """
    _fl_read_pixmapfile = library.cfuncproto(
        library.load_so_libforms(), "fl_read_pixmapfile",
        xfdata.Pixmap, [xfdata.Window, xfdata.STRING, cty.POINTER(cty.c_uint),
        cty.POINTER(cty.c_uint), cty.POINTER(xfdata.Pixmap),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int), xfdata.FL_COLOR],
        """Pixmap fl_read_pixmapfile(Window win, const char * file,
           unsigned int * w, unsigned int * h, Pixmap * shape_mask,
           int * hotx, int * hoty, FL_COLOR tran)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(tran, xfdata.COLOR_list)
    ulwin = library.convert_to_Window(win)
    sfilename = library.convert_to_string(filename)
    ultran = library.convert_to_FL_COLOR(tran)
    w, pw = library.make_uint_and_pointer()
    h, ph = library.make_uint_and_pointer()
    shapemask, pshapemask = library.make_ulong_and_pointer()
    hotx, photx = library.make_int_and_pointer()
    hoty, photy = library.make_int_and_pointer()
    library.keep_elem_refs(win, filename, w, h, shapemask, hotx, hoty, tran, ulwin,
                   sfilename, ultran, pw, ph, pshapemask, photx, photy)
    retval = _fl_read_pixmapfile(ulwin, sfilename, pw, ph, pshapemask, \
                                 photx, photy, ultran)
    return retval, w.value, h.value, shapemask.value, hotx.value, hoty.value


def fl_create_from_pixmapdata(win, data, w, h, sm, hotx, hoty, tran):
    """Makes a pixmap from pixmap contents data.

    @param win: window
    @type win: long_pos
    @param data: bitmap contents data
    @type data: str of ubyte
    @param w: width of bitmap in coord units
    @type w: int_pos
    @param h: height of bitmap in coord units
    @type h: int_pos
    @param sm: shape mask
    @type sm: long_pos
    @param hotx: ?
    @type hotx: int
    @param hoty: ?
    @type hoty: int
    @param tran: color value
    @type tran: long_pos

    @returns: pixmap created
    @rtype: long_pos

    @example: ??

    @status: Untested + Doc + NoDemo = NOT OK

    """
    _fl_create_from_pixmapdata = library.cfuncproto(
        library.load_so_libforms(), "fl_create_from_pixmapdata",
        xfdata.Pixmap, [xfdata.Window, cty.POINTER(xfdata.STRING),
        cty.POINTER(cty.c_uint), cty.POINTER(cty.c_uint),
        cty.POINTER(xfdata.Pixmap), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int), xfdata.FL_COLOR],
        """Pixmap fl_create_from_pixmapdata(Window win, char * * data,
        unsigned int * w, unsigned int * h, Pixmap * sm, int * hotx,
        int * hoty, FL_COLOR tran)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(tran, xfdata.COLOR_list)
    ulwin = library.convert_to_Window(win)
    ultran = library.convert_to_FL_COLOR(tran)
    library.keep_elem_refs(win, data, w, h, sm, hotx, hoty, tran, ulwin, ultran)
    retval = _fl_create_from_pixmapdata(ulwin, data, w, h, sm, hotx, hoty,
                                        ultran)
    return retval


def fl_free_pixmap(idnum):
    """Frees the pixmap.

    @param idnum: Pixmap id to be freed
    @type idnum: long_pos

    @example: fl_free_pixmap(pmap)

    @status: Untested + Doc + NoDemo = NOT OK

    """
    _fl_free_pixmap = library.cfuncproto(
        library.load_so_libforms(), "fl_free_pixmap",
        None, [xfdata.Pixmap],
        """void fl_free_pixmap(Pixmap id)""")
    library.check_if_initialized()
    ulidnum = library.convert_to_Pixmap(idnum)
    library.keep_elem_refs(idnum, ulidnum)
    _fl_free_pixmap(ulidnum)


