#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
    e-mail:  <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata




#############################
# forms.h (chart.h)
# Object Class: Chart
#############################

# Routines

# fl_create_chart function placeholder (internal)


def fl_add_chart(charttype, x, y, w, h, label):
    """Adds a chart object.

    @param charttype: type of chart to be created. Values (from xfdata module)
        FL_BAR_CHART, FL_HORBAR_CHART, FL_LINE_CHART, FL_FILL_CHART,
        FL_SPIKE_CHART, FL_PIE_CHART, FL_SPECIALPIE_CHART
    @type charttype: int
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int
    @param w: width in coord units
    @type w: int
    @param h: height in coord units
    @type h: int
    @param label: text label of chart
    @type label: str

    @returns: hcart object added (pFlObject)

    @example: chrtobj = fl_add_chart(xfdata.FL_SPIKE_CHART, 147, 168, 
        250, 492, "My Chart")

    @status: Tested + Doc + Demo = OK

    """
    _fl_add_chart = library.cfuncproto(
        library.load_so_libforms(), "fl_add_chart",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_chart(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(charttype, xfdata.CHARTTYPE_list)
    icharttype = library.convert_to_int(charttype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(charttype, x, y, w, h, label, icharttype, ix, iy,
                           iw, ih, slabel)
    retval = _fl_add_chart(icharttype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_chart(pFlObject):
    """Clears the contents of a chart.

    @param pFlObject: chart object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example:  fl_clear_chart(chrtobj)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_clear_chart = library.cfuncproto(
        library.load_so_libforms(), "fl_clear_chart",
        None, [cty.POINTER(xfdata.FL_OBJECT)],
        """void fl_clear_chart(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_clear_chart(pFlObject)


def fl_add_chart_value(pFlObject, val, label, colr):
    """Adds an item to the chart object.

    @param pFlObject: chart object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param val: value of chart item
    @type val: float
    @param label: text label of chart
    @type label: str
    @param colr: color num.
    @type colr: long_pos

    @example: fl_add_chart_value(chrtobj, 120, "Some point", xfdata.FL_BLUE)

    @status: Tested + Doc + Demo = OK

    """
    _fl_add_chart_value = library.cfuncproto(
        library.load_so_libforms(), "fl_add_chart_value",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, xfdata.STRING,
        xfdata.FL_COLOR],
        """void fl_add_chart_value(FL_OBJECT * ob, double val,
           const char * str, FL_COLOR col)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fval = library.convert_to_double(val)
    slabel = library.convert_to_string(label)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(pFlObject, val, label, colr, fval, slabel, ulcolr)
    _fl_add_chart_value(pFlObject, fval, slabel, ulcolr)


def fl_insert_chart_value(pFlObject, indx, val, label, colr):
    """Inserts a new value at a particular place in a chart object.

    @param pFlObject: chart object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param indx: index before which the new item should be inserted. The first
        item is number 1
    @type indx: int
    @param val: value of chart item
    @type val: float
    @param label: text label of chart
    @type label: str
    @param colr: color value
    @type colr: long_pos

    @example: fl_insert_chart_value(chrtobj, 2, 123.0, "new value", 
        xfdata.FL_DEEPSKYBLUE)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_insert_chart_value = library.cfuncproto(
        library.load_so_libforms(), "fl_insert_chart_value",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_double,
        xfdata.STRING, xfdata.FL_COLOR],
        """void fl_insert_chart_value(FL_OBJECT * ob, int indx,
           double val, const char * str, FL_COLOR col)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iindx = library.convert_to_int(indx)
    fval = library.convert_to_double(val)
    slabel = library.convert_to_string(label)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(pFlObject, indx, val, label, colr, iindx, fval,
                   slabel, ulcolr)
    _fl_insert_chart_value(pFlObject, iindx, fval, slabel, ulcolr)


def fl_replace_chart_value(pFlObject, indx, val, label, colr):
    """Replaces value of an item in the chart object.

    @param pFlObject: chart object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param indx: index position of item to be replaced
    @type indx: int
    @param val: value of chart item
    @type val: float
    @param label: text label of chart
    @type label: str
    @param colr: color value
    @type colr: long_pos

    @example: fl_replace_chart_value(chrtobj, 3, 142.0, "replaced item",
        xfdata.FL_FIREBRICK)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_replace_chart_value = library.cfuncproto(
        library.load_so_libforms(), "fl_replace_chart_value",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_double,
        xfdata.STRING, xfdata.FL_COLOR],
        """void fl_replace_chart_value(FL_OBJECT * ob, int indx,
           double val, const char * str, FL_COLOR col)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iindx = library.convert_to_int(indx)
    fval = library.convert_to_double(val)
    slabel = library.convert_to_string(label)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(pFlObject, indx, val, label, colr, iindx, fval,
                   slabel, ulcolr)
    _fl_replace_chart_value(pFlObject, iindx, fval, slabel, ulcolr)


def fl_set_chart_bounds(pFlObject, minbound, maxbound):
    """Sets the boundaries/limits for values of a chart object. Normally,
    bar-charts and line-charts are automatically scaled in the vertical
    direction such that all values can be displayed.

    @param pFlObject: chart object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param minbound: minimum bounds to be set
    @type minbound: float
    @param maxbound: maximum bounds to be set
    @type maxbound: float

    @example: fl_set_chart_bounds(chrtobj, 100, 950)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_chart_bounds = library.cfuncproto(
        library.load_so_libforms(), "fl_set_chart_bounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_chart_bounds(FL_OBJECT * ob, double min,
           double max)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fminbound = library.convert_to_double(minbound)
    fmaxbound = library.convert_to_double(maxbound)
    library.keep_elem_refs(pFlObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_chart_bounds(pFlObject, fminbound, fmaxbound)


def fl_get_chart_bounds(pFlObject):
    """Returns the boundaries/limits set for values of a chart object.

    @param pFlObject: chart object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: minbound and maxbound
    @rtype: float, float

    @example: minb, maxb = fl_get_chart_bounds(chrtobj)

    @attention: API change from XForms - upstream was
        fl_get_chart_bounds(pFlObject, minbound, maxbound)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_chart_bounds = library.cfuncproto(
        library.load_so_libforms(), "fl_get_chart_bounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_chart_bounds(FL_OBJECT * ob, double * min,
           double * max)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    minbound, pminbound = library.make_double_and_pointer()
    maxbound, pmaxbound = library.make_double_and_pointer()
    library.keep_elem_refs(pFlObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_chart_bounds(pFlObject, pminbound, pmaxbound)
    return minbound.value, maxbound.value


def fl_set_chart_maxnumb(pFlObject, maxnum):
    """Sets the maximum number of values displayed in the chart. Defaults
    is xfdata.FL_CHART_MAX; maximum set cannot be exceeded it.

    @param pFlObject: chart object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param maxnum: maximum number of values to display
    @type maxnum: int

    @example: fl_set_chart_maxnumb(chrtobj, 12)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_chart_maxnumb = library.cfuncproto(
        library.load_so_libforms(), "fl_set_chart_maxnumb",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_chart_maxnumb(FL_OBJECT * ob, int maxnumb)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    imaxnum = library.convert_to_int(maxnum)
    library.keep_elem_refs(pFlObject, maxnum, imaxnum)
    _fl_set_chart_maxnumb(pFlObject, imaxnum)


def fl_set_chart_autosize(pFlObject, autosize):
    """Sets whether the chart should autosize along the x-axis. If autosize
    being set to false (0) the width of the bars will be such that the maximum
    number of items fits in the box. Normally width of the bars and distance
    between the points in a line-chart are normally scaled.

    @param pFlObject: chart object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param autosize: autosize flag. Values 1 (if enabled) or 0 (if disabled)
    @type autosize: int

    @example: fl_set_chart_autosize(chrtobj, 1)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_chart_autosize = library.cfuncproto(
        library.load_so_libforms(), "fl_set_chart_autosize",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_chart_autosize(FL_OBJECT * ob, int autosize)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iautosize = library.convert_to_int(autosize)
    library.keep_elem_refs(pFlObject, autosize, iautosize)
    _fl_set_chart_autosize(pFlObject, iautosize)


def fl_set_chart_lstyle(pFlObject, style):
    """Changes the font style of a chart's label. By default the label is
    drawn in a tiny font.

    @param pFlObject: chart object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param style: label style. Values (from xfdata module) FL_NORMAL_STYLE,
        FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
        FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
        FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
        FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
        FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
        FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
    @type style: int

    @example: fl_set_chart_lstyle(chrtobj, xfdata.FL_TIMESBOLD_STYLE)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_chart_lstyle = library.cfuncproto(
        library.load_so_libforms(), "fl_set_chart_lstyle",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_chart_lstyle(FL_OBJECT * ob, int lstyle)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(style, xfdata.TEXTSTYLE_list)
    istyle = library.convert_to_int(style)
    library.keep_elem_refs(pFlObject, style, istyle)
    _fl_set_chart_lstyle(pFlObject, istyle)


def fl_set_chart_lsize(pFlObject, size):
    """Changes the font size of chart's label. By default, the label is
    drawn in a tiny font.

    @param pFlObject: chart object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param size: label size. Values (from xfdata module) FL_TINY_SIZE,
        FL_SMALL_SIZE, FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
        FL_HUGE_SIZE, FL_DEFAULT_SIZE
    @type size: int

    @example: fl_set_chart_lsize(chrtobj, xfdata.FL_SMALL_SIZE)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_chart_lsize = library.cfuncproto(
        library.load_so_libforms(), "fl_set_chart_lsize",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_chart_lsize(FL_OBJECT * ob, int lsize)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(size, xfdata.FONTSIZE_list)
    isize = library.convert_to_int(size)
    library.keep_elem_refs(pFlObject, size, isize)
    _fl_set_chart_lsize(pFlObject, isize)


def fl_set_chart_lcolor(pFlObject, colr):
    """Changes the color of chart's label. By default, the label is
    drawn in black.

    @param pFlObject: chart object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param colr: color value
    @type colr: long_pos

    @example: fl_set_chart_lcolor(chrtobj, xfdata.FL_FORESTGREEN)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_chart_lcolor = library.cfuncproto(
        library.load_so_libforms(), "fl_set_chart_lcolor",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_COLOR],
        """void fl_set_chart_lcolor(FL_OBJECT * ob, FL_COLOR lcol)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(pFlObject, colr, ulcolr)
    _fl_set_chart_lcolor(pFlObject, ulcolr)


def fl_set_chart_baseline(pFlObject, yesno):
    """Turn on or off the chart's baseline.

    @param pFlObject: chart object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param yesno: flag. Values 0 (if disabled) or 1 (if enabled)
    @type yesno: int

    @example: fl_set_chart_baseline(chrtobj, 1)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_chart_baseline = library.cfuncproto(
        library.load_so_libforms(), "fl_set_chart_baseline",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_chart_baseline(FL_OBJECT * ob, int iYesNo)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iyesno = library.convert_to_int(yesno)
    library.keep_elem_refs(pFlObject, yesno, iyesno)
    _fl_set_chart_baseline(pFlObject, iyesno)


fl_set_chart_lcol = fl_set_chart_lcolor

