#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro" 
        <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


__docformat__ = "epytext en"    # to be used with epydoc doc


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata




#################################
# forms.h (clock.h)
#################################

# fl_create_clock function placeholder (internal)


def fl_add_clock(clocktype, x, y, w, h, label):
    """ fl_add_clock(clocktype, x, y, w, h, label) -> pFlObject

        Adds a clock object.

        @param clocktype: type of clock to be added
        @type clocktype: [num./int] from xfdata module FL_ANALOG_CLOCK,
                         FL_DIGITAL_CLOCK
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of clock

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_add_clock = library.cfuncproto(
            library.load_so_libforms(), "fl_add_clock",
            cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
            xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
            """FL_OBJECT * fl_add_clock(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * s)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(clocktype, xfdata.CLOCKTYPE_list)
    iclocktype = library.convert_to_int(clocktype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(clocktype, x, y, w, h, label, iclocktype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_clock(iclocktype, ix, iy, iw, ih, slabel)
    return retval


def fl_get_clock(pFlObject):
    """ fl_get_clock(pFlObject) -> hr, mn, sec

        Returns time values from a clock object.

        @param pFlObject: pointer to clock object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @attention: API change from XForms - upstream was
                    fl_get_clock(pFlObject, hr, mn, sec)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_clock = library.cfuncproto(
            library.load_so_libforms(), "fl_get_clock",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
            """void fl_get_clock(FL_OBJECT * ob, int * h, int * m, int * s)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    hr, phr = library.make_int_and_pointer()
    mn, pmn = library.make_int_and_pointer()
    sec, psec = library.make_int_and_pointer()
    library.keep_elem_refs(pFlObject, hr, mn, sec, phr, pmn, psec)
    _fl_get_clock(pFlObject, phr, pmn, psec)
    return hr.value, mn.value, sec.value


def fl_set_clock_adjustment(pFlObject, offset):
    """ fl_set_clock_adjustment(pFlObject, offset) -> num.

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_clock_adjustment = library.cfuncproto(
            library.load_so_libforms(), "fl_set_clock_adjustment",
            cty.c_long, [cty.POINTER(xfdata.FL_OBJECT), cty.c_long],
            """long int fl_set_clock_adjustment(FL_OBJECT * ob,
               long int offset)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    loffset = library.convert_to_long(offset)
    library.keep_elem_refs(pFlObject, offset, loffset)
    retval = _fl_set_clock_adjustment(pFlObject, loffset)
    return retval


def fl_set_clock_ampm(pFlObject, y):
    """ fl_set_clock_ampm(pFlObject, y)

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_clock_ampm = library.cfuncproto(
            library.load_so_libforms(), "fl_set_clock_ampm",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_clock_ampm(FL_OBJECT * ob, int y)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iy = library.convert_to_int(y)
    library.keep_elem_refs(pFlObject, y, iy)
    _fl_set_clock_ampm(pFlObject, iy)


