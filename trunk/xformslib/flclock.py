#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    flclock.py - xforms-python's functions to manage clock objects.

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
    e-mail: <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library as libr
from xformslib import xfdata


#################################
# forms.h (clock.h)
#################################

# fl_create_clock function placeholder (internal)


def fl_add_clock(clocktype, x, y, w, h, label):
    """Adds a clock object.

    --

    :Parameters:
      `clocktype` : int
        type of clock to be added. Values (from xfdata.py) FL_ANALOG_CLOCK,
        FL_DIGITAL_CLOCK
      `x` : int
        horizontal position (upper-left corner)
      `y` : int
        vertical position (upper-left corner)
      `w` : int
        width in coord units
      `h` : int
        height in coord units
      `label` : str
        text label of clock

    :return: clock object added (pFlObject)
    :rtype: pointer to xfdata.FL_OBJECT

    :note: e.g. clkobj = fl_add_clock(xfdata.FL_ANALOG_CLOCK, 150, 210,
        220, 200, "My great clock")

    :status: Tested + Doc + Demo = OK

    """
    _fl_add_clock = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_clock",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_clock(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * s)""")
    libr.check_if_initialized()
    libr.check_admitted_value_in_list(clocktype, xfdata.CLOCKTYPE_list)
    iclocktype = libr.convert_to_int(clocktype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(clocktype, x, y, w, h, label, iclocktype, ix, iy,
                           iw, ih, slabel)
    retval = _fl_add_clock(iclocktype, ix, iy, iw, ih, slabel)
    return retval


def fl_get_clock(pFlObject):
    """Obtains time values from a clock object, with hours in 0-23, minutes
    in 0-59 and seconds in 0-59.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        clock object

    :return: hours, minutes, seconds
    :rtype: int, int, int

    :note: e.g. hou, mnu, sec = fl_get_clock(clkobj)

    :attention: API change from XForms - upstream was
        fl_get_clock(pFlObject, hr, mn, sec)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_get_clock = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_clock",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
        """void fl_get_clock(FL_OBJECT * ob, int * h, int * m, int * s)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    hr, phr = libr.make_int_and_pointer()
    mn, pmn = libr.make_int_and_pointer()
    sec, psec = libr.make_int_and_pointer()
    libr.keep_elem_refs(pFlObject, hr, mn, sec, phr, pmn, psec)
    _fl_get_clock(pFlObject, phr, pmn, psec)
    return hr.value, mn.value, sec.value


def fl_set_clock_adjustment(pFlObject, offset):
    """Adjusts the clock to display a time other than local time.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        clock object
      `offset` : long
        adjustment value in seconds

    :return: old adjustment value
    :rtype: long

    :note: e.g. oldadj = fl_set_clock_adjustment(clkobj, 3600)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_set_clock_adjustment = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_clock_adjustment",
        cty.c_long, [cty.POINTER(xfdata.FL_OBJECT), cty.c_long],
        """long int fl_set_clock_adjustment(FL_OBJECT * ob,
           long int offset)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    loffset = libr.convert_to_long(offset)
    libr.keep_elem_refs(pFlObject, offset, loffset)
    retval = _fl_set_clock_adjustment(pFlObject, loffset)
    return retval


def fl_set_clock_ampm(pFlObject, yesno):
    """Switches the display to 12hr system (am-pm). By default, the
    digital clock uses 24hr system.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        clock object
      `yesno` : int
        flag. Values 1 (12hr system used) or 0 (24hr system used)

    :note: e.g. fl_set_clock_ampm(clkobj, 1)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_set_clock_ampm = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_clock_ampm",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_clock_ampm(FL_OBJECT * ob, int y)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iyesno = libr.convert_to_int(yesno)
    libr.keep_elem_refs(pFlObject, yesno, iyesno)
    _fl_set_clock_ampm(pFlObject, iyesno)

