#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
        <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


__docformat__ = "epytext en"    # to be used with epydoc doc


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata



##########################
# forms.h (formbrowser.h)
##########################

def fl_addto_formbrowser(pFlObject, pFlForm):
    """
        fl_addto_formbrowser(pFlObject, pFlForm) -> num.

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_addto_formbrowser = library.cfuncproto(
            library.load_so_libforms(), "fl_addto_formbrowser",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_FORM)],
            """int fl_addto_formbrowser(FL_OBJECT * ob, FL_FORM * form)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject, pFlForm)
    retval = _fl_addto_formbrowser(pFlObject, pFlForm)
    return retval


def fl_delete_formbrowser_bynumber(pFlObject, num):
    """
        fl_delete_formbrowser_bynumber(pFlObject, num) -> pFlForm

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_delete_formbrowser_bynumber = library.cfuncproto(
            library.load_so_libforms(), "fl_delete_formbrowser_bynumber",
            cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """FL_FORM * fl_delete_formbrowser_bynumber(FL_OBJECT * ob,
               int num)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    inum = library.convert_to_int(num)
    library.keep_elem_refs(pFlObject, num, inum)
    retval = _fl_delete_formbrowser_bynumber(pFlObject, inum)
    return retval


def fl_delete_formbrowser(pFlObject, pFlForm):
    """
        fl_delete_formbrowser(pFlObject, pFlForm) -> num.

        @param pFlObject: object the formbrowser belongs to
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param pFlForm: form candidate to deletion
                      @type pFlForm: pointer to xfdata.FL_FORM

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_delete_formbrowser = library.cfuncproto(
            library.load_so_libforms(), "fl_delete_formbrowser",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_FORM)],
            """int fl_delete_formbrowser(FL_OBJECT * ob,
               FL_FORM * candidate_form)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlObject, pFlForm)
    retval = _fl_delete_formbrowser(pFlObject, pFlForm)
    return retval


def fl_replace_formbrowser(pFlObject, num, pFlForm):
    """
        fl_replace_formbrowser(pFlObject, num, pFlForm)

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param num: formbrowser number to be replaced (<int>)
        @param pFlForm: form used as replacement
                      @type pFlForm: pointer to xfdata.FL_FORM

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_replace_formbrowser = library.cfuncproto(
            library.load_so_libforms(), "fl_replace_formbrowser",
            cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
            cty.POINTER(xfdata.FL_FORM)],
            """FL_FORM * fl_replace_formbrowser(FL_OBJECT * ob, int num,
               FL_FORM * form)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    inum = library.convert_to_int(num)
    library.keep_elem_refs(pFlObject, num, pFlForm, inum)
    retval = _fl_replace_formbrowser(pFlObject, inum, pFlForm)
    return retval


def fl_insert_formbrowser(pFlObject, line, pFlForm):
    """
        fl_insert_formbrowser(pFlObject, line, pFlForm) -> num.

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param line: line after which new form is inserted
        @param pFlForm: new form to insert
                      @type pFlForm: pointer to xfdata.FL_FORM

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_insert_formbrowser = library.cfuncproto(
            library.load_so_libforms(), "fl_insert_formbrowser",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, \
            cty.POINTER(xfdata.FL_FORM)],
            """int fl_insert_formbrowser(FL_OBJECT * ob, int line,
               FL_FORM * new_form)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iline = library.convert_to_int(line)
    library.keep_elem_refs(pFlObject, line, iline, pFlForm)
    retval = _fl_insert_formbrowser(pFlObject, iline, pFlForm)
    return retval


def fl_get_formbrowser_area(pFlObject):
    """
        fl_get_formbrowser_area(pFlObject) -> num., x, y, w, h

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @attention: API change from XForms - upstream was
                    fl_get_formbrowser_area(pFlObject, x, y, w, h)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_formbrowser_area = library.cfuncproto(
            library.load_so_libforms(), "fl_get_formbrowser_area",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int), \
            cty.POINTER(cty.c_int)],
            """int fl_get_formbrowser_area(FL_OBJECT * ob, int * x, int * y,
               int * w, int * h)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    x, px = library.make_int_and_pointer()
    y, py = library.make_int_and_pointer()
    w, pw = library.make_int_and_pointer()
    h, ph = library.make_int_and_pointer()
    library.keep_elem_refs(pFlObject, x, y, w, h, px, py, pw, ph)
    retval = _fl_get_formbrowser_area(pFlObject, px, py, pw, ph)
    return retval, x.value, y.value, w.value, h.value


def fl_set_formbrowser_scroll(pFlObject, how):
    """
        fl_set_formbrowser_scroll(pFlObject, how)

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param how: ?

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_formbrowser_scroll = library.cfuncproto(
            library.load_so_libforms(), "fl_set_formbrowser_scroll",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_formbrowser_scroll(FL_OBJECT * ob, int how)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ihow = library.convert_to_int(how)
    library.keep_elem_refs(pFlObject, how, ihow)
    _fl_set_formbrowser_scroll(pFlObject, ihow)


def fl_set_formbrowser_hscrollbar(pFlObject, how):
    """
        fl_set_formbrowser_hscrollbar(pFlObject, how)

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param how: ?

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_formbrowser_hscrollbar = library.cfuncproto(
            library.load_so_libforms(), "fl_set_formbrowser_hscrollbar",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_formbrowser_hscrollbar(FL_OBJECT * ob, int how)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ihow = library.convert_to_int(how)
    library.keep_elem_refs(pFlObject, how, ihow)
    _fl_set_formbrowser_hscrollbar(pFlObject, ihow)


def fl_set_formbrowser_vscrollbar(pFlObject, how):
    """
        fl_set_formbrowser_vscrollbar(pFlObject, how)

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param how: ?

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_formbrowser_vscrollbar = library.cfuncproto(
            library.load_so_libforms(), "fl_set_formbrowser_vscrollbar",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_formbrowser_vscrollbar(FL_OBJECT * ob, int how)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ihow = library.convert_to_int(how)
    library.keep_elem_refs(pFlObject, how, ihow)
    _fl_set_formbrowser_vscrollbar(pFlObject, ihow)


def fl_get_formbrowser_topform(pFlObject):
    """
        fl_get_formbrowser_topform(pFlObject) -> pFlForm

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_formbrowser_topform = library.cfuncproto(
            library.load_so_libforms(), "fl_get_formbrowser_topform",
            cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT)],
            """FL_FORM * fl_get_formbrowser_topform(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_formbrowser_topform(pFlObject)
    return retval


def fl_set_formbrowser_topform(pFlObject, pFlForm):
    """
        fl_set_formbrowser_topform(pFlObject, pFlForm) -> num.

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param pFlForm: form
                      @type pFlForm: pointer to xfdata.FL_FORM

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_formbrowser_topform = library.cfuncproto(
            library.load_so_libforms(), "fl_set_formbrowser_topform",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_FORM)],
            """int fl_set_formbrowser_topform(FL_OBJECT * ob, FL_FORM * form)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlObject, pFlForm)
    retval = _fl_set_formbrowser_topform(pFlObject, pFlForm)
    return retval


def fl_set_formbrowser_topform_bynumber(pFlObject, num):
    """
        fl_set_formbrowser_topform_bynumber(pFlObject, num) -> pFlForm

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param num: ?

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_formbrowser_topform_bynumber = library.cfuncproto(
            library.load_so_libforms(), "fl_set_formbrowser_topform_bynumber",
            cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """FL_FORM * fl_set_formbrowser_topform_bynumber( \
               FL_OBJECT * ob, int n)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    inum = library.convert_to_int(num)
    library.keep_elem_refs(pFlObject, num, inum)
    retval = _fl_set_formbrowser_topform_bynumber(pFlObject, inum)
    return retval


def fl_set_formbrowser_xoffset(pFlObject, offset):
    """
        fl_set_formbrowser_xoffset(pFlObject, offset) -> num.

        Scrolls within a formbrowser in horizontal direction.

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param offset: positive number, measuring in pixels the offset
                       from the the natural position from the left (<int>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_formbrowser_xoffset = library.cfuncproto(
            library.load_so_libforms(), "fl_set_formbrowser_xoffset",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """int fl_set_formbrowser_xoffset(FL_OBJECT * ob, int offset)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ioffset = library.convert_to_int(offset)
    library.keep_elem_refs(pFlObject, offset, ioffset)
    retval = _fl_set_formbrowser_xoffset(pFlObject, ioffset)
    return retval


def fl_set_formbrowser_yoffset(pFlObject, offset):
    """
        fl_set_formbrowser_yoffset(pFlObject, offset) -> num.

        Scrolls within a formbrowser in vertical direction.

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param offset: positive number, measuring in pixels the offset
                       from the the natural position from the top (<int>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_formbrowser_yoffset = library.cfuncproto(
            library.load_so_libforms(), "fl_set_formbrowser_yoffset",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """int fl_set_formbrowser_yoffset(FL_OBJECT * ob, int offset)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ioffset = library.convert_to_int(offset)
    library.keep_elem_refs(pFlObject, offset, ioffset)
    retval = _fl_set_formbrowser_yoffset(pFlObject, ioffset)
    return retval


def fl_get_formbrowser_xoffset(pFlObject):
    """
        fl_get_formbrowser_xoffset(pFlObject) -> num.

        Returns the current horizontal offset from left in pixel of a
        formbrowser.

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_formbrowser_xoffset = library.cfuncproto(
            library.load_so_libforms(), "fl_get_formbrowser_xoffset",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_formbrowser_xoffset(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_formbrowser_xoffset(pFlObject)
    return retval


def fl_get_formbrowser_yoffset(pFlObject):
    """
        fl_get_formbrowser_yoffset(pFlObject) -> num.

        Returns the current vertical offset from top in pixel of a
        formbrowser.

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_formbrowser_yoffset = library.cfuncproto(
            library.load_so_libforms(), "fl_get_formbrowser_yoffset",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_formbrowser_yoffset(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_formbrowser_yoffset(pFlObject)
    return retval


def fl_find_formbrowser_form_number(pFlObject, pFlForm):
    """
        fl_find_formbrowser_form_number(pFlObject, pFlForm) -> num.

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param pFlForm: form candidate to be found

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_find_formbrowser_form_number = library.cfuncproto(
            library.load_so_libforms(), "fl_find_formbrowser_form_number",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_FORM)],
            """int fl_find_formbrowser_form_number(FL_OBJECT * ob,
               FL_FORM * candidate_form)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlObject, pFlForm)
    retval = _fl_find_formbrowser_form_number(pFlObject, pFlForm)
    return retval


def fl_add_formbrowser(frmbrwstype, x, y, w, h, label):
    """
        fl_add_formbrowser(frmbrwstype, x, y, w, h, label) -> pFlObject

        Adds a formbrowser object.

        @param frmbrwstype: type of formbrowser to be added (<int>)
        @type frmbrwstype: xfdata.FL_NORMAL_FORMBROWSER
        @param x: horizontal position (upper-left corner) (<int>)
        @param y: vertical position (upper-left corner) (<int>)
        @param w: width in coord units (<int>)
        @param h: height in coord units (<int>)
        @param label: text label of formbrowser (<string>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_add_formbrowser = library.cfuncproto(
        library.load_so_libforms(), "fl_add_formbrowser",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_formbrowser(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(frmbrwstype, xfdata.FORMBRWSTYPE_list)
    ifrmbrwstype = library.convert_to_int(frmbrwstype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(frmbrwstype, x, y, w, h, label, ifrmbrwstype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_formbrowser(ifrmbrwstype, ix, iy, iw, ih, slabel)
    return retval


# fl_create_formbrowser function placeholder (internal)


def fl_get_formbrowser_numforms(pFlObject):
    """
        fl_get_formbrowser_numforms(pFlObject) -> forms num.

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_formbrowser_numforms = library.cfuncproto(
            library.load_so_libforms(), "fl_get_formbrowser_numforms",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_formbrowser_numforms(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_formbrowser_numforms(pFlObject)
    return retval


def fl_get_formbrowser_form(pFlObject, num):
    """
        fl_get_formbrowser_form(pFlObject, num) -> pFlForm

        @param pFlObject: formbrowser object
        @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_formbrowser_form = library.cfuncproto(
            library.load_so_libforms(), "fl_get_formbrowser_form",
            cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """FL_FORM * fl_get_formbrowser_form(FL_OBJECT * ob, int n)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    inum = library.convert_to_int(num)
    library.keep_elem_refs(pFlObject, num, inum)
    retval = _fl_get_formbrowser_form(pFlObject, inum)
    return retval


