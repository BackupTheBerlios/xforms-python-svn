#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
    e-mail: <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata



##########################
# forms.h (formbrowser.h)
##########################

def fl_addto_formbrowser(pFlObject, pFlForm):
    """Populates a formbrowser. The form so added is appended to the list of
    forms that are already in the formbrowser. Form should be valid for the
    duration of the formbrowser and the application program should not destroy
    a form that is added to a formbrowser before deleting the form from the
    formbrowser first.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param pFlForm: form
    @type pFlForm: pointer to xfdata.FL_FORM

    @returns: total number of forms in the formbrowser
    @rtype: int

    @example: ntotfrms = fl_addto_formbrowser(frmbrobj, newform)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_addto_formbrowser = library.cfuncproto(
        library.load_so_libforms(), "fl_addto_formbrowser",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_FORM)],
        """int fl_addto_formbrowser(FL_OBJECT * ob, FL_FORM * form)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlObject, pFlForm)
    retval = _fl_addto_formbrowser(pFlObject, pFlForm)
    return retval


def fl_delete_formbrowser_bynumber(pFlObject, seqnum):
    """Removes a form from the formbrowser using a sequence number, an
    integer between 1 and the number of forms in the browser. After a
    form is removed, the sequence numbers are re-adjusted so they are
    always consecutive.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param seqnum: sequence number of form to be removed
    @type seqnum: int

    @returns: removed form (pFlForm) or None (on failure)
    @rtype: pointer to xfdata.FL_FORM

    @example: delfrm = fl_delete_formbrowser_bynumber(frmbrobj, 2)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_delete_formbrowser_bynumber = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_formbrowser_bynumber",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT), 
        cty.c_int],
        """FL_FORM * fl_delete_formbrowser_bynumber(FL_OBJECT * ob, int
           num)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iseqnum = library.convert_to_int(seqnum)
    library.keep_elem_refs(pFlObject, seqnum, iseqnum)
    retval = _fl_delete_formbrowser_bynumber(pFlObject, iseqnum)
    return retval


def fl_delete_formbrowser(pFlObject, pFlForm):
    """Removes a specified form from the formbrowser.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param pFlForm: form candidate to deletion
    @type pFlForm: pointer to xfdata.FL_FORM

    @returns: current (after deletion) number of forms in the formbrowser
        or -1 (on failure)
    @rtype: int

    @example: num = fl_delete_formbrowser(frmbrobj, p2ndform)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_delete_formbrowser = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_formbrowser",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_FORM)],
        """int fl_delete_formbrowser(FL_OBJECT * ob,
           FL_FORM * candidate_form)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlObject, pFlForm)
    retval = _fl_delete_formbrowser(pFlObject, pFlForm)
    return retval


def fl_replace_formbrowser(pFlObject, seqnum, pFlForm):
    """Replaces a form in formbrowser specified by a sequence number 

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param seqnum: sequence number of form to be replaced
    @type seqnum: int
    @param pFlForm: form used as replacement
    @type pFlForm: pointer to xfdata.FL_FORM

    @returns: form that has been replaced (pFlForm), or None (on failure)
    @rtype: pointer to xfdata.FL_FORM

    @example: replfrm = fl_replace_formbrowser(frmbrobj, 4, newreplfrm)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_replace_formbrowser = library.cfuncproto(
        library.load_so_libforms(), "fl_replace_formbrowser",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        cty.POINTER(xfdata.FL_FORM)],
        """FL_FORM * fl_replace_formbrowser(FL_OBJECT * ob, int num,
           FL_FORM * form)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iseqnum = library.convert_to_int(seqnum)
    library.keep_elem_refs(pFlObject, seqnum, pFlForm, iseqnum)
    retval = _fl_replace_formbrowser(pFlObject, iseqnum, pFlForm)
    return retval


def fl_insert_formbrowser(pFlObject, seqnum, pFlForm):
    """Inserts a form into a formbrowser at arbitrary location.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param seqnum: the sequence number before which the new form form is
        to be inserted into the formbrowser
    @type seqnum: int
    @param pFlForm: new form to insert
    @type pFlForm: pointer to xfdata.FL_FORM

    @returns: number of forms in the formbrowser, or -1 (on failure)
    @rtype: int

    @example: frmsnum = fl_insert_formbrowser(frmbrobj, 5, pform)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_insert_formbrowser = library.cfuncproto(
        library.load_so_libforms(), "fl_insert_formbrowser",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, \
        cty.POINTER(xfdata.FL_FORM)],
        """int fl_insert_formbrowser(FL_OBJECT * ob, int line,
           FL_FORM * new_form)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iseqnum = library.convert_to_int(seqnum)
    library.keep_elem_refs(pFlObject, seqnum, iseqnum, pFlForm)
    retval = _fl_insert_formbrowser(pFlObject, iseqnum, pFlForm)
    return retval


def fl_get_formbrowser_area(pFlObject):
    """Obtains the actual size of the forms area. The area occupied by the
    formbrowser contains the space for the scrollbars.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: 1 or 0 (on failure), horizontal (x), vertical position (y),
        width (w) and height (h)
    @rtype: int, int, int, int

    @example: exval, x, y, w, h = fl_get_formbrowser_area(frmbrobj)

    @attention: API change from XForms - upstream was
        fl_get_formbrowser_area(pFlObject, x, y, w, h)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_formbrowser_area = library.cfuncproto(
        library.load_so_libforms(), "fl_get_formbrowser_area",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int), \
        cty.POINTER(cty.c_int)],
        """int fl_get_formbrowser_area(FL_OBJECT * ob, int * x, int * y,
           int * w, int * h)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    x, px = library.make_int_and_pointer()
    y, py = library.make_int_and_pointer()
    w, pw = library.make_int_and_pointer()
    h, ph = library.make_int_and_pointer()
    library.keep_elem_refs(pFlObject, x, y, w, h, px, py, pw, ph)
    retval = _fl_get_formbrowser_area(pFlObject, px, py, pw, ph)
    return retval, x.value, y.value, w.value, h.value


def fl_set_formbrowser_scroll(pFlObject, how):
    """Changes the vertical scrollbar so each action of the scrollbar scrolls
    to the next forms. By default it scrolls a fixed number of pixels.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param how: How it scrolls. Values (from xfdata module) FL_SMOOTH_SCROLL
        (default) or FL_JUMP_SCROLL
    @type how: int

    @example: fl_set_formbrowser_scroll(frmbrobj, xfdata.FL_JUMP_SCROLL)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_formbrowser_scroll = library.cfuncproto(
        library.load_so_libforms(), "fl_set_formbrowser_scroll",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_formbrowser_scroll(FL_OBJECT * ob, int how)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(how, xfdata.FORMBRWSSCROLL_list)
    ihow = library.convert_to_int(how)
    library.keep_elem_refs(pFlObject, how, ihow)
    _fl_set_formbrowser_scroll(pFlObject, ihow)


def fl_set_formbrowser_hscrollbar(pFlObject, how):
    """Controls the presence of horizontal scrollbar. By default, if the size
    of the forms exceeds the size of the formbrowser, scrollbars are added
    automatically.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param how: if scrollbar is added or not. Values (from xfdata module) FL_ON,
        FL_OFF, FL_AUTO
    @type how: int

    @example: fl_set_formbrowser_hscrollbar(frmbrobj, FL_OFF)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_formbrowser_hscrollbar = library.cfuncproto(
        library.load_so_libforms(), "fl_set_formbrowser_hscrollbar",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_formbrowser_hscrollbar(FL_OBJECT * ob, int how)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(how, xfdata.SCROLLBARVAL_list)
    ihow = library.convert_to_int(how)
    library.keep_elem_refs(pFlObject, how, ihow)
    _fl_set_formbrowser_hscrollbar(pFlObject, ihow)


def fl_set_formbrowser_vscrollbar(pFlObject, how):
    """Controls the presence of vertical scrollbar. By default, if the size of
    the forms exceeds the size of the formbrowser, scrollbars are added
    automatically

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param how: if scrollbar is added or not. Values (from xfdata module) FL_ON,
        FL_OFF, FL_AUTO
    @type how: int

    @example: fl_set_formbrowser_vscrollbar(frmbrobj, FL_OFF)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_formbrowser_vscrollbar = library.cfuncproto(
        library.load_so_libforms(), "fl_set_formbrowser_vscrollbar",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_formbrowser_vscrollbar(FL_OBJECT * ob, int how)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(how, xfdata.SCROLLBARVAL_list)
    ihow = library.convert_to_int(how)
    library.keep_elem_refs(pFlObject, how, ihow)
    _fl_set_formbrowser_vscrollbar(pFlObject, ihow)


def fl_get_formbrowser_topform(pFlObject):
    """Obtains the form that is currently the first form in the formbrowser
    visible to the user.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: first visible form (pFlForm)
    @rtype: pointer to xfdata.FL_FORM

    @example: pform = fl_get_formbrowser_topform(frmbrobj)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_formbrowser_topform = library.cfuncproto(
        library.load_so_libforms(), "fl_get_formbrowser_topform",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_FORM * fl_get_formbrowser_topform(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_formbrowser_topform(pFlObject)
    return retval


def fl_set_formbrowser_topform(pFlObject, pFlForm):
    """Sets which form to show by setting the top form.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param pFlForm: form
    @type pFlForm: pointer to xfdata.FL_FORM

    @returns: sequence number of the form (seqnum)
    @rtype: int

    @example: frmid = fl_set_formbrowser_topform(frmbrobj, pform)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_formbrowser_topform = library.cfuncproto(
        library.load_so_libforms(), "fl_set_formbrowser_topform",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_FORM)],
        """int fl_set_formbrowser_topform(FL_OBJECT * ob, FL_FORM * form)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlObject, pFlForm)
    retval = _fl_set_formbrowser_topform(pFlObject, pFlForm)
    return retval


def fl_set_formbrowser_topform_bynumber(pFlObject, seqnum):
    """Sets which form to show by setting the top form, using a sequence
    number.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param seqnum: sequence number of form
    @type seqnum: int

    @returns: new top form (pFlForm)
    @rtype: pointer to xfdata.FL_FORM

    @example: pform = fl_set_formbrowser_topform_bynumber(frmbrobj, 2)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_formbrowser_topform_bynumber = library.cfuncproto(
        library.load_so_libforms(), "fl_set_formbrowser_topform_bynumber",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """FL_FORM * fl_set_formbrowser_topform_bynumber( \
           FL_OBJECT * ob, int n)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iseqnum = library.convert_to_int(seqnum)
    library.keep_elem_refs(pFlObject, seqnum, iseqnum)
    retval = _fl_set_formbrowser_topform_bynumber(pFlObject, iseqnum)
    return retval


def fl_set_formbrowser_xoffset(pFlObject, offset):
    """Scrolls within a formbrowser in horizontal direction.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param offset: positive number, measuring in pixels the offset
        from the the natural position from the left. 0 indicates
        the natural position of the content within the formbrowser
    @type offset: int

    @returns: num.
    @rtype: int

    @example: num = fl_set_formbrowser_xoffset(frmbrobj, 15)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_formbrowser_xoffset = library.cfuncproto(
        library.load_so_libforms(), "fl_set_formbrowser_xoffset",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_formbrowser_xoffset(FL_OBJECT * ob, int offset)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ioffset = library.convert_to_int(offset)
    library.keep_elem_refs(pFlObject, offset, ioffset)
    retval = _fl_set_formbrowser_xoffset(pFlObject, ioffset)
    return retval


def fl_set_formbrowser_yoffset(pFlObject, offset):
    """Scrolls within a formbrowser in vertical direction.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param offset: positive number, measuring in pixels the offset
        from the the natural position from the top. 0 indicates
        the natural position of the content within the formbrowser
    @type offset: int

    @returns: num.
    @rtype: int

    @example: num = fl_set_formbrowser_yoffset(frmbrobj, 15)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_formbrowser_yoffset = library.cfuncproto(
        library.load_so_libforms(), "fl_set_formbrowser_yoffset",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_formbrowser_yoffset(FL_OBJECT * ob, int offset)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ioffset = library.convert_to_int(offset)
    library.keep_elem_refs(pFlObject, offset, ioffset)
    retval = _fl_set_formbrowser_yoffset(pFlObject, ioffset)
    return retval


def fl_get_formbrowser_xoffset(pFlObject):
    """Returns the current horizontal offset from left in pixel of a
    formbrowser.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: horizontal offset
    @rtype: int

    @example: xoffset = fl_get_formbrowser_xoffset(frmbrobj)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_formbrowser_xoffset = library.cfuncproto(
        library.load_so_libforms(), "fl_get_formbrowser_xoffset",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_formbrowser_xoffset(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_formbrowser_xoffset(pFlObject)
    return retval


def fl_get_formbrowser_yoffset(pFlObject):
    """Returns the current vertical offset from top in pixel of a
    formbrowser.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: vertical offset
    @rtype: int

    @example: yoffset = fl_get_formbrowser_yoffset(frmbrobj)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_formbrowser_yoffset = library.cfuncproto(
        library.load_so_libforms(), "fl_get_formbrowser_yoffset",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_formbrowser_yoffset(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_formbrowser_yoffset(pFlObject)
    return retval


def fl_find_formbrowser_form_number(pFlObject, pFlForm):
    """Finds out the sequence number of a particular form.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param pFlForm: form candidate to be found
    @type pFlForm: pointer to xfdata.FL_FORM

    @returns: sequence number of form (seqnum)
    @rtype: int

    @example: frmid = fl_find_formbrowser_form_number(frmbrobj, pform)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_find_formbrowser_form_number = library.cfuncproto(
        library.load_so_libforms(), "fl_find_formbrowser_form_number",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_FORM)],
        """int fl_find_formbrowser_form_number(FL_OBJECT * ob,
           FL_FORM * candidate_form)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlObject, pFlForm)
    retval = _fl_find_formbrowser_form_number(pFlObject, pFlForm)
    return retval


def fl_add_formbrowser(frmbrwstype, x, y, w, h, label):
    """Adds a formbrowser object.

    @param frmbrwstype: type of formbrowser to be added. Values (from
        xfdata module) FL_NORMAL_FORMBROWSER
    @type frmbrwstype: int
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int
    @param w: width in coord units
    @type w: int
    @param h: height in coord units
    @type h: int
    @param label: text label of formbrowser
    @type label: str

    @returns: formbrowser object added

    @example: frmbrobj = fl_add_formbrowser(xfdata.FL_NORMAL_FORMBROWSER, 
        110, 60, 550, 750, "My Formbrowser)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_add_formbrowser = library.cfuncproto(
        library.load_so_libforms(), "fl_add_formbrowser",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_formbrowser(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(frmbrwstype, xfdata.FORMBRWSTYPE_list)
    ifrmbrwstype = library.convert_to_int(frmbrwstype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(frmbrwstype, x, y, w, h, label, ifrmbrwstype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_formbrowser(ifrmbrwstype, ix, iy, iw, ih, slabel)
    return retval


# fl_create_formbrowser function placeholder (internal)


def fl_get_formbrowser_numforms(pFlObject):
    """Obtains the total number of forms in a formbrowser object.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: number of forms in formbrowser
    @rtype: int

    @example: frmsnum = fl_get_formbrowser_numforms(frmbrobj)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_formbrowser_numforms = library.cfuncproto(
        library.load_so_libforms(), "fl_get_formbrowser_numforms",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_formbrowser_numforms(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_formbrowser_numforms(pFlObject)
    return retval


def fl_get_formbrowser_form(pFlObject, seqnum):
    """Obtains the form handle from the sequence number.

    @param pFlObject: formbrowser object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param seqnum: sequence number of the form
    @type seqnum: int

    @returns: form (pFlForm)
    @rtype: pointer to xfdata.FL_FORM

    @example: pform = fl_get_formbrowser_form(frmbrobj, 2)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_formbrowser_form = library.cfuncproto(
        library.load_so_libforms(), "fl_get_formbrowser_form",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """FL_FORM * fl_get_formbrowser_form(FL_OBJECT * ob, int n)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iseqnum = library.convert_to_int(seqnum)
    library.keep_elem_refs(pFlObject, seqnum, iseqnum)
    retval = _fl_get_formbrowser_form(pFlObject, iseqnum)
    return retval


