#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage formbrowser objects.

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
    e-mail: <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library as libr
from xformslib import xfdata


##########################
# forms.h (formbrowser.h)
##########################

def fl_addto_formbrowser(pFlObject, pFlForm):
    """Populates a formbrowser. The form so added is appended to the list of
    forms that are already in the formbrowser. Form should be valid for the
    duration of the formbrowser and the application program should not destroy
    a form that is added to a formbrowser before deleting the form from the
    formbrowser first.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object
      `pFlForm` : pointer to xfdata.FL_FORM
        form

    :return: total number of forms in the formbrowser
    :rtype: int

    :note: e.g. ntotfrms = fl_addto_formbrowser(frmbrobj, newform)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_addto_formbrowser = libr.cfuncproto(
        libr.load_so_libforms(), "fl_addto_formbrowser",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_FORM)],
        """int fl_addto_formbrowser(FL_OBJECT * ob, FL_FORM * form)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.verify_flformptr_type(pFlForm)
    libr.keep_elem_refs(pFlObject, pFlForm)
    retval = _fl_addto_formbrowser(pFlObject, pFlForm)
    return retval


def fl_delete_formbrowser_bynumber(pFlObject, seqnum):
    """Removes a form from the formbrowser using a sequence number, an
    integer between 1 and the number of forms in the browser. After a
    form is removed, the sequence numbers are re-adjusted so they are
    always consecutive.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object
      `seqnum` : int
        sequence number of form to be removed

    :return: removed form (pFlForm) or None (on failure)
    :rtype: pointer to xfdata.FL_FORM

    :note: e.g. delfrm = fl_delete_formbrowser_bynumber(frmbrobj, 2)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_delete_formbrowser_bynumber = libr.cfuncproto(
        libr.load_so_libforms(), "fl_delete_formbrowser_bynumber",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT),
        cty.c_int],
        """FL_FORM * fl_delete_formbrowser_bynumber(FL_OBJECT * ob, int
           num)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iseqnum = libr.convert_to_int(seqnum)
    libr.keep_elem_refs(pFlObject, seqnum, iseqnum)
    retval = _fl_delete_formbrowser_bynumber(pFlObject, iseqnum)
    return retval


def fl_delete_formbrowser(pFlObject, pFlForm):
    """Removes a specified form from the formbrowser.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object
      `pFlForm` : pointer to xfdata.FL_FORM
        form candidate to deletion

    :return: current (after deletion) number of forms in the formbrowser
        or -1 (on failure)
    :rtype: int

    :note: e.g. num = fl_delete_formbrowser(frmbrobj, p2ndform)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_delete_formbrowser = libr.cfuncproto(
        libr.load_so_libforms(), "fl_delete_formbrowser",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_FORM)],
        """int fl_delete_formbrowser(FL_OBJECT * ob,
           FL_FORM * candidate_form)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.verify_flformptr_type(pFlForm)
    libr.keep_elem_refs(pFlObject, pFlForm)
    retval = _fl_delete_formbrowser(pFlObject, pFlForm)
    return retval


def fl_replace_formbrowser(pFlObject, seqnum, pFlForm):
    """Replaces a form in formbrowser specified by a sequence number

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object
      `seqnum` : int
        sequence number of form to be replaced
      `pFlForm` : pointer to xfdata.FL_FORM
        form used as replacement

    :return: form that has been replaced (pFlForm), or None (on failure)
    :rtype: pointer to xfdata.FL_FORM

    :note: e.g. replfrm = fl_replace_formbrowser(frmbrobj, 4, newreplfrm)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_replace_formbrowser = libr.cfuncproto(
        libr.load_so_libforms(), "fl_replace_formbrowser",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT),
        cty.c_int, cty.POINTER(xfdata.FL_FORM)],
        """FL_FORM * fl_replace_formbrowser(FL_OBJECT * ob, int num,
           FL_FORM * form)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iseqnum = libr.convert_to_int(seqnum)
    libr.verify_flformptr_type(pFlForm)
    libr.keep_elem_refs(pFlObject, seqnum, pFlForm, iseqnum)
    retval = _fl_replace_formbrowser(pFlObject, iseqnum, pFlForm)
    return retval


def fl_insert_formbrowser(pFlObject, seqnum, pFlForm):
    """Inserts a form into a formbrowser at arbitrary location.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object
      `seqnum` : int
        the sequence number before which the new form form is to be inserted
        into the formbrowser
      `pFlForm` : pointer to xfdata.FL_FORM
        new form to insert

    :return: number of forms in the formbrowser, or -1 (on failure)
    :rtype: int

    :note: e.g. frmsnum = fl_insert_formbrowser(frmbrobj, 5, pform)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_insert_formbrowser = libr.cfuncproto(
        libr.load_so_libforms(), "fl_insert_formbrowser",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, \
        cty.POINTER(xfdata.FL_FORM)],
        """int fl_insert_formbrowser(FL_OBJECT * ob, int line,
           FL_FORM * new_form)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iseqnum = libr.convert_to_int(seqnum)
    libr.verify_flformptr_type(pFlForm)
    libr.keep_elem_refs(pFlObject, seqnum, iseqnum, pFlForm)
    retval = _fl_insert_formbrowser(pFlObject, iseqnum, pFlForm)
    return retval


def fl_get_formbrowser_area(pFlObject):
    """Obtains the actual size of the forms area. The area occupied by the
    formbrowser contains the space for the scrollbars.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object

    :return: 1 or 0 (on failure), horizontal (x), vertical position (y),
        width (w) and height (h)
    :rtype: int, int, int, int

    :note: e.g. exval, x, y, w, h = fl_get_formbrowser_area(frmbrobj)

    :attention: API change from XForms - upstream was
        fl_get_formbrowser_area(pFlObject, x, y, w, h)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_get_formbrowser_area = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_formbrowser_area",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int), \
        cty.POINTER(cty.c_int)],
        """int fl_get_formbrowser_area(FL_OBJECT * ob, int * x, int * y,
           int * w, int * h)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    x, px = libr.make_int_and_pointer()
    y, py = libr.make_int_and_pointer()
    w, pw = libr.make_int_and_pointer()
    h, ph = libr.make_int_and_pointer()
    libr.keep_elem_refs(pFlObject, x, y, w, h, px, py, pw, ph)
    retval = _fl_get_formbrowser_area(pFlObject, px, py, pw, ph)
    return retval, x.value, y.value, w.value, h.value


def fl_set_formbrowser_scroll(pFlObject, how):
    """Changes the vertical scrollbar so each action of the scrollbar scrolls
    to the next forms. By default it scrolls a fixed number of pixels.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object
      `how` : int
        How it scrolls. Values (from xfdata module) FL_SMOOTH_SCROLL (default)
        or FL_JUMP_SCROLL

    :note: e.g. fl_set_formbrowser_scroll(frmbrobj, xfdata.FL_JUMP_SCROLL)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_set_formbrowser_scroll = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_formbrowser_scroll",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_formbrowser_scroll(FL_OBJECT * ob, int how)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.checkfatal_allowed_value_in_list(how, xfdata.FORMBRWSSCROLL_list)
    ihow = libr.convert_to_int(how)
    libr.keep_elem_refs(pFlObject, how, ihow)
    _fl_set_formbrowser_scroll(pFlObject, ihow)


def fl_set_formbrowser_hscrollbar(pFlObject, how):
    """Controls the presence of horizontal scrollbar. By default, if the size
    of the forms exceeds the size of the formbrowser, scrollbars are added
    automatically.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object
      `how` : int
        if scrollbar is added or not. Values (from xfdata module) FL_ON,
        FL_OFF, FL_AUTO

    :note: e.g. fl_set_formbrowser_hscrollbar(frmbrobj, FL_OFF)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_set_formbrowser_hscrollbar = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_formbrowser_hscrollbar",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_formbrowser_hscrollbar(FL_OBJECT * ob, int how)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.checkfatal_allowed_value_in_list(how, xfdata.SCROLLBARVAL_list)
    ihow = libr.convert_to_int(how)
    libr.keep_elem_refs(pFlObject, how, ihow)
    _fl_set_formbrowser_hscrollbar(pFlObject, ihow)


def fl_set_formbrowser_vscrollbar(pFlObject, how):
    """Controls the presence of vertical scrollbar. By default, if the size of
    the forms exceeds the size of the formbrowser, scrollbars are added
    automatically

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object
      `how` : int
        if scrollbar is added or not. Values (from xfdata module) FL_ON,
        FL_OFF, FL_AUTO

    :note: e.g. fl_set_formbrowser_vscrollbar(frmbrobj, FL_OFF)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_set_formbrowser_vscrollbar = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_formbrowser_vscrollbar",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_formbrowser_vscrollbar(FL_OBJECT * ob, int how)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.checkfatal_allowed_value_in_list(how, xfdata.SCROLLBARVAL_list)
    ihow = libr.convert_to_int(how)
    libr.keep_elem_refs(pFlObject, how, ihow)
    _fl_set_formbrowser_vscrollbar(pFlObject, ihow)


def fl_get_formbrowser_topform(pFlObject):
    """Obtains the form that is currently the first form in the formbrowser
    visible to the user.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object

    :return: first visible form (pFlForm)
    :rtype: pointer to xfdata.FL_FORM

    :note: e.g. pform = fl_get_formbrowser_topform(frmbrobj)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_get_formbrowser_topform = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_formbrowser_topform",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_FORM * fl_get_formbrowser_topform(FL_OBJECT * ob)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.keep_elem_refs(pFlObject)
    retval = _fl_get_formbrowser_topform(pFlObject)
    return retval


def fl_set_formbrowser_topform(pFlObject, pFlForm):
    """Sets which form to show by setting the top form.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object
      `pFlForm` : pointer to xfdata.FL_FORM
        form

    :return: sequence number of the form (seqnum)
    :rtype: int

    :note: e.g. frmid = fl_set_formbrowser_topform(frmbrobj, pform)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_set_formbrowser_topform = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_formbrowser_topform",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_FORM)],
        """int fl_set_formbrowser_topform(FL_OBJECT * ob, FL_FORM * form)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.verify_flformptr_type(pFlForm)
    libr.keep_elem_refs(pFlObject, pFlForm)
    retval = _fl_set_formbrowser_topform(pFlObject, pFlForm)
    return retval


def fl_set_formbrowser_topform_bynumber(pFlObject, seqnum):
    """Sets which form to show by setting the top form, using a sequence
    number.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object
      `seqnum` : int
        sequence number of form

    :return: new top form (pFlForm)
    :rtype: pointer to xfdata.FL_FORM

    :note: e.g. pform = fl_set_formbrowser_topform_bynumber(frmbrobj, 2)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_set_formbrowser_topform_bynumber = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_formbrowser_topform_bynumber",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT),
        cty.c_int],
        """FL_FORM * fl_set_formbrowser_topform_bynumber( \
           FL_OBJECT * ob, int n)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iseqnum = libr.convert_to_int(seqnum)
    libr.keep_elem_refs(pFlObject, seqnum, iseqnum)
    retval = _fl_set_formbrowser_topform_bynumber(pFlObject, iseqnum)
    return retval


def fl_set_formbrowser_xoffset(pFlObject, offset):
    """Scrolls within a formbrowser in horizontal direction.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object
      `offset` : int
        positive number, measuring in pixels the offset from the natural
        position from the left. 0 indicates the natural position of the
        content within the formbrowser.

    :return: num.
    :rtype: int

    :note: e.g. num = fl_set_formbrowser_xoffset(frmbrobj, 15)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_set_formbrowser_xoffset = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_formbrowser_xoffset",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_formbrowser_xoffset(FL_OBJECT * ob, int offset)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    ioffset = libr.convert_to_int(offset)
    libr.keep_elem_refs(pFlObject, offset, ioffset)
    retval = _fl_set_formbrowser_xoffset(pFlObject, ioffset)
    return retval


def fl_set_formbrowser_yoffset(pFlObject, offset):
    """Scrolls within a formbrowser in vertical direction.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object
      `offset` : int
        positive number, measuring in pixels the offset from the natural
        position from the top. 0 indicates the natural position of the
        content within the formbrowser

    :return: num.
    :rtype: int

    :note: e.g. num = fl_set_formbrowser_yoffset(frmbrobj, 15)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_set_formbrowser_yoffset = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_formbrowser_yoffset",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_formbrowser_yoffset(FL_OBJECT * ob, int offset)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    ioffset = libr.convert_to_int(offset)
    libr.keep_elem_refs(pFlObject, offset, ioffset)
    retval = _fl_set_formbrowser_yoffset(pFlObject, ioffset)
    return retval


def fl_get_formbrowser_xoffset(pFlObject):
    """Returns the current horizontal offset from left in pixel of a
    formbrowser.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object

    :return: horizontal offset
    :rtype: int

    :note: e.g. xoffset = fl_get_formbrowser_xoffset(frmbrobj)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_get_formbrowser_xoffset = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_formbrowser_xoffset",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_formbrowser_xoffset(FL_OBJECT * ob)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.keep_elem_refs(pFlObject)
    retval = _fl_get_formbrowser_xoffset(pFlObject)
    return retval


def fl_get_formbrowser_yoffset(pFlObject):
    """Returns the current vertical offset from top in pixel of a
    formbrowser.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object

    :return: vertical offset
    :rtype: int

    :note: e.g. yoffset = fl_get_formbrowser_yoffset(frmbrobj)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_get_formbrowser_yoffset = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_formbrowser_yoffset",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_formbrowser_yoffset(FL_OBJECT * ob)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.keep_elem_refs(pFlObject)
    retval = _fl_get_formbrowser_yoffset(pFlObject)
    return retval


def fl_find_formbrowser_form_number(pFlObject, pFlForm):
    """Finds out the sequence number of a particular form.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object
      `pFlForm` : pointer to xfdata.FL_FORM
        form candidate to be found

    :return: sequence number of form (seqnum)
    :rtype: int

    :note: e.g. frmid = fl_find_formbrowser_form_number(frmbrobj, pform)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_find_formbrowser_form_number = libr.cfuncproto(
        libr.load_so_libforms(), "fl_find_formbrowser_form_number",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_FORM)],
        """int fl_find_formbrowser_form_number(FL_OBJECT * ob,
           FL_FORM * candidate_form)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.verify_flformptr_type(pFlForm)
    libr.keep_elem_refs(pFlObject, pFlForm)
    retval = _fl_find_formbrowser_form_number(pFlObject, pFlForm)
    return retval


def fl_add_formbrowser(frmbrwstype, x, y, w, h, label):
    """Adds a formbrowser object.

    --

    :Parameters:
      `frmbrwstype` : int
        type of formbrowser to be added. Values (from xfdata.py)
        FL_NORMAL_FORMBROWSER
      `x` : int
        horizontal position (upper-left corner)
      `y` : int
        vertical position (upper-left corner)
      `w` : int
        width in coord units
      `h` : int
        height in coord units
      `label` : str
        text label of formbrowser

    :return: formbrowser object added (pFlObject)
    :rtype: pointer to xfdata.FL_OBJECT

    :note: e.g. frmbrobj = fl_add_formbrowser(xfdata.FL_NORMAL_FORMBROWSER,
        110, 60, 550, 750, "My Formbrowser)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_add_formbrowser = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_formbrowser",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_formbrowser(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)""")
    libr.check_if_initialized()
    libr.checkfatal_allowed_value_in_list(frmbrwstype, xfdata.FORMBRWSTYPE_list)
    ifrmbrwstype = libr.convert_to_int(frmbrwstype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(frmbrwstype, x, y, w, h, label, ifrmbrwstype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_formbrowser(ifrmbrwstype, ix, iy, iw, ih, slabel)
    return retval


# fl_create_formbrowser function placeholder (internal)


def fl_get_formbrowser_numforms(pFlObject):
    """Obtains the total number of forms in a formbrowser object.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object

    :return: number of forms in formbrowser
    :rtype: int

    :note: e.g. frmsnum = fl_get_formbrowser_numforms(frmbrobj)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_get_formbrowser_numforms = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_formbrowser_numforms",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_formbrowser_numforms(FL_OBJECT * ob)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.keep_elem_refs(pFlObject)
    retval = _fl_get_formbrowser_numforms(pFlObject)
    return retval


def fl_get_formbrowser_form(pFlObject, seqnum):
    """Obtains the form handle from the sequence number.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        formbrowser object
      `seqnum` : int
        sequence number of the form

    :return: form (pFlForm)
    :rtype: pointer to xfdata.FL_FORM

    :note: e.g. pform = fl_get_formbrowser_form(frmbrobj, 2)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_get_formbrowser_form = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_formbrowser_form",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT),
        cty.c_int],
        """FL_FORM * fl_get_formbrowser_form(FL_OBJECT * ob, int n)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iseqnum = libr.convert_to_int(seqnum)
    libr.keep_elem_refs(pFlObject, seqnum, iseqnum)
    retval = _fl_get_formbrowser_form(pFlObject, iseqnum)
    return retval
