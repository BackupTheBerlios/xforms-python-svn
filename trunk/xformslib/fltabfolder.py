#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage tabfolder flobjects.
"""

#    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
#    e-mail: <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared flobject libraries #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata


########################
# forms.h (tabfolder.h)
########################

# fl_create_tabfolder function placeholde (internal)


def fl_add_tabfolder(foldertype, xpos, ypos, width, height, label):
    """fl_add_tabfolder(foldertype, xpos, ypos, width, height, label)
    -> ptr_flobject
    
    Adds a tabfolder flobject. It is a special container that is capable
    of holding multiple groups of objects (folders) to maximize the
    utilization of the screen real estate. Each folder has its own tab
    the user can click on to call up a specific folder from which option
    can be selected.

    Parameters
    ----------
        foldertype : int
            type of tabfolder to be added. Values (from xfdata.py)
            FL_TOP_TABFOLDER, FL_BOTTOM_TABFOLDER, FL_LEFT_TABFOLDER,
            FL_RIGHT_TABFOLDER, FL_NORMAL_TABFOLDER
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of tabfolder

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject added

    Examples
    --------
        >>> tbfobj = fl_add_tabfolder(xfdata.FL_TOP_TABFOLDER, 120, 120,
                250, 400, "myTabFolder")

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_add_tabfolder = library.cfuncproto(
        library.load_so_libforms(), "fl_add_tabfolder",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_tabfolder(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(foldertype, \
            xfdata.TABFOLDERTYPE_list)
    i_foldertype = library.convert_to_intc(foldertype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_stringc(label)
    library.keep_elem_refs(foldertype, xpos, ypos, width, height, label, \
            i_foldertype, i_xpos, i_ypos, i_width, i_height, s_label)
    retval = _fl_add_tabfolder(i_foldertype, i_xpos, i_ypos, i_width, \
            i_height, s_label)
    return retval


def fl_addto_tabfolder(ptr_flobject, tabtitle, ptr_flform):
    """fl_addto_tabfolder(ptr_flobject, tabtitle, ptr_flform) -> ptr_flobject
    
    Populates a tabbed folder, adding a regular form to it. Note: application
    program should not destroy a form that has been added to a tabbed folder.
    You can change the attributes of the returned flobject just like any other
    objects, but not all possibilities result in a pleasing appearance.
    Although there is no specific requirement of what the backface of the
    folder/form should be, a boxtype other than xfdata.FL_FLAT_BOX or
    xfdata.FL_NO_BOX may not look nice. If the backface of the form is of
    xfdata.FL_FLAT_BOX the associated tab will take on the color of the
    backface when activated. Each tab must have its own form, i.e. you should
    not associate the same form with two different tabs; however, you can
    create copies of a form and use these copies.
    

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject
        tabtitle : str
            text of the tab rider (with possible embedded newlines in it)
        ptr_flform : pointer to xfdata.FL_FORM
            form

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject 

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_addto_tabfolder = library.cfuncproto(
        library.load_so_libforms(), "fl_addto_tabfolder",
        cty.POINTER(xfdata.FL_OBJECT), [cty.POINTER(xfdata.FL_OBJECT),
        xfdata.STRING, cty.POINTER(xfdata.FL_FORM)],
        """FL_OBJECT * fl_addto_tabfolder(FL_OBJECT * ob,
           const char * title, FL_FORM * form)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.verify_flformptr_type(ptr_flform)
    s_tabtitle = library.convert_to_stringc(tabtitle)
    library.keep_elem_refs(ptr_flobject, tabtitle, ptr_flform, s_tabtitle)
    retval = _fl_addto_tabfolder(ptr_flobject, s_tabtitle, ptr_flform)
    return retval


def fl_get_tabfolder_folder_bynumber(ptr_flobject, seqnum):
    """fl_get_tabfolder_folder_bynumber(ptr_flobject, seqnum) -> ptr_flform
    
    Accesses an individual form on the tabfolder by its sequence number.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject
        seqnum : int
            sequence number. The first tab on the left is 1,
            the second 2 etc..)

    Returns
    -------
        ptr_flform : pointer to xfdata.FL_FORM
            form associated with the number, or None (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_tabfolder_folder_bynumber = library.cfuncproto(
        library.load_so_libforms(), "fl_get_tabfolder_folder_bynumber",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT),
        cty.c_int],
        """FL_FORM * fl_get_tabfolder_folder_bynumber(FL_OBJECT * ob,
           int num)""")
    library.verify_flobjectptr_type(ptr_flobject)
    i_seqnum = library.convert_to_intc(seqnum)
    library.keep_elem_refs(ptr_flobject, seqnum, i_seqnum)
    retval = _fl_get_tabfolder_folder_bynumber(ptr_flobject, i_seqnum)
    return retval


def fl_get_tabfolder_folder_byname(ptr_flobject, name):
    """fl_get_tabfolder_folder_byname(ptr_flobject, name) -> ptr_flform
    
    Accesses an individual form on the tabfolder by its name.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject
        name : str
            name of folder

    Returns
    -------
        ptr_flform : pointer to xfdata.FL_FORM
            form associated with the name, or None (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_tabfolder_folder_byname = library.cfuncproto(
        library.load_so_libforms(), "fl_get_tabfolder_folder_byname",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT),
        xfdata.STRING],
        """FL_FORM * fl_get_tabfolder_folder_byname(FL_OBJECT * ob,
           const char * name)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    s_name = library.convert_to_stringc(name)
    library.keep_elem_refs(ptr_flobject, name, s_name)
    retval = _fl_get_tabfolder_folder_byname(ptr_flobject, s_name)
    return retval


def fl_delete_folder(ptr_flobject, ptr_flform):
    """fl_delete_folder(ptr_flobject, ptr_flform)
    
    Removes a folder from a tabfolder flobject. After deletion, the number
    of folders in the tabfolder as well as the sequence numbers are
    updated. This means if you want to delete all folders after the
    second folder, you can do that by deleting the third folder repeatedly.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject
        ptr_flform : pointer to xfdata.FL_FORM
            form

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_delete_folder = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_folder",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_FORM)],
        """void fl_delete_folder(FL_OBJECT * ob, FL_FORM * form)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.verify_flformptr_type(ptr_flform)
    library.keep_elem_refs(ptr_flobject, ptr_flform)
    _fl_delete_folder(ptr_flobject, ptr_flform)


def fl_delete_folder_bynumber(ptr_flobject, seqnum):
    """fl_delete_folder_bynumber(ptr_flobject, seqnum)
    
    Removes a folder from a tabfolder flobject by its sequence number.
    After deletion, the number of folders in the tabfolder as well as
    the sequence numbers are updated. This means if you want to delete
    all folders after the second folder, you can do that by deleting
    the third folder repeatedly.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject
        seqnum : int
            sequence number of folder to be deleted

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_delete_folder_bynumber = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_folder_bynumber",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_delete_folder_bynumber(FL_OBJECT * ob, int num)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_seqnum = library.convert_to_intc(seqnum)
    library.keep_elem_refs(ptr_flobject, seqnum, i_seqnum)
    _fl_delete_folder_bynumber(ptr_flobject, i_seqnum)


def fl_delete_folder_byname(ptr_flobject, name):
    """fl_delete_folder_byname(ptr_flobject, name)
    
    Removes a folder from a tabfolder flobject by its name. After
    deletion, the number of folders in the tabfolder as well as the
    sequence numbers are updated. This means if you want to delete
    all folders after the second folder, you can do that by deleting
    the third folder repeatedly.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject
        name : str
            name of folder to be deleted

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_delete_folder_byname = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_folder_byname",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_delete_folder_byname(FL_OBJECT * ob, const char * name)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    s_name = library.convert_to_stringc(name)
    library.keep_elem_refs(ptr_flobject, name, s_name)
    _fl_delete_folder_byname(ptr_flobject, s_name)


def fl_set_folder(ptr_flobject, ptr_flform):
    """fl_set_folder(ptr_flobject, ptr_flform)
    
    Defines which folder to show.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject
        ptr_flform : pointer to xfdata.FL_FORM
            form to show

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_folder = library.cfuncproto(
        library.load_so_libforms(), "fl_set_folder",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_FORM)],
        """void fl_set_folder(FL_OBJECT * ob, FL_FORM * form)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.verify_flformptr_type(ptr_flform)
    library.keep_elem_refs(ptr_flobject, ptr_flform)
    _fl_set_folder(ptr_flobject, ptr_flform)


def fl_set_folder_byname(ptr_flobject, name):
    """fl_set_folder_byname(ptr_flobject, name)
    
    Defines which folder to show by its name.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject
        name : str
            name of folder to show

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_folder_byname = library.cfuncproto(
        library.load_so_libforms(), "fl_set_folder_byname",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_set_folder_byname(FL_OBJECT * ob, const char * name)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    sname = library.convert_to_stringc(name)
    library.keep_elem_refs(ptr_flobject, name, sname)
    _fl_set_folder_byname(ptr_flobject, name)


def fl_set_folder_bynumber(ptr_flobject, seqnum):
    """fl_set_folder_bynumber(ptr_flobject, seqnum)
    
    Defines which folder to show by its sequence number.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject
        seqnum : int
            sequence number of folder to show

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_set_folder_bynumber = library.cfuncproto(
        library.load_so_libforms(), "fl_set_folder_bynumber",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_folder_bynumber(FL_OBJECT * ob, int num)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_seqnum = library.convert_to_intc(seqnum)
    library.keep_elem_refs(ptr_flobject, seqnum, i_seqnum)
    _fl_set_folder_bynumber(ptr_flobject, i_seqnum)


def fl_get_folder(ptr_flobject):
    """fl_get_folder(ptr_flobject) -> ptr_flform
    
    Finds out what the last active folder is (which may be of greater
    interest than the currently active one).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject

    Returns
    -------
        ptr_flform : pointer to xfdata.FL_FORM
            last active folder form

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_folder = library.cfuncproto(
        library.load_so_libforms(), "fl_get_folder",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_FORM * fl_get_folder(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_folder(ptr_flobject)
    return retval


def fl_get_folder_number(ptr_flobject):
    """fl_get_folder_number(ptr_flobject)
    
    Finds out what the sequence number of the last active folder is (which
    may be of greater interest than the currently active one).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject

    Returns
    -------
        seqnum. : int
            sequence number of the last active folder form

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_folder_number = library.cfuncproto(
        library.load_so_libforms(), "fl_get_folder_number",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_folder_number(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_folder_number(ptr_flobject)
    return retval


def fl_get_folder_name(ptr_flobject):
    """fl_get_folder_name(ptr_flobject)
    
    Finds out what the name of the last active folder is (which may
    be of greater interest than the currently active one).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject

    Returns
    -------
        name : str
            name of the last active folder form

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_folder_name = library.cfuncproto(
        library.load_so_libforms(), "fl_get_folder_name",
        xfdata.STRING, [cty.POINTER(xfdata.FL_OBJECT)],
        """const char * fl_get_folder_name(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_folder_name(ptr_flobject)
    return retval


def fl_get_tabfolder_numfolders(ptr_flobject):
    """fl_get_tabfolder_numfolders(ptr_flobject) -> numfolders
    
    Finds out the number of folders in the tabfolder.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject

    Returns
    -------
        numfolders : int
            number of folders in tabfolder

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_tabfolder_numfolders = library.cfuncproto(
        library.load_so_libforms(), "fl_get_tabfolder_numfolders",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_tabfolder_numfolders(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_tabfolder_numfolders(ptr_flobject)
    return retval


def fl_get_active_folder(ptr_flobject):
    """fl_get_active_folder(ptr_flobject) -> ptr_flform

    Finds out which folder is currently active.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject

    Returns
    -------
        ptr_flform : pointer to xfdata.FL_FORM
            form associated with folder

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_get_active_folder = library.cfuncproto(
        library.load_so_libforms(), "fl_get_active_folder",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_FORM * fl_get_active_folder(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_active_folder(ptr_flobject)
    return retval


def fl_get_active_folder_number(ptr_flobject):
    """fl_get_active_folder_number(ptr_flobject) -> seqnum
    
    Finds out the sequence number of which folder is currently
    active, starting from 1 on the left.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject

    Returns
    -------
        seqnum : int
            sequence number of active folder

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_active_folder_number = library.cfuncproto(
        library.load_so_libforms(), "fl_get_active_folder_number",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_active_folder_number(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_active_folder_number(ptr_flobject)
    return retval


def fl_get_active_folder_name(ptr_flobject):
    """fl_get_active_folder_name(ptr_flobject) -> name
    
    Finds out the name of which folder is currently active.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject

    Returns
    -------
        name : str
            active folder name

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_active_folder_name = library.cfuncproto(
        library.load_so_libforms(), "fl_get_active_folder_name",
        xfdata.STRING, [cty.POINTER(xfdata.FL_OBJECT)],
        """const char * fl_get_active_folder_name(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_active_folder_name(ptr_flobject)
    return retval


def fl_get_folder_area(ptr_flobject):
    """fl_get_folder_area(ptr_flobject) -> xpos, ypos, width, height

    Finds out the actual folder size. The folder area may not be constant
    depending on the current tabs. E.g. adding a multi-line tab will reduce
    the area for the folders).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject

    Returns
    -------
        xpos : int
            horizontal position of folder, relative to the (top-level)
            form the tabbed folder belongs to
        ypos : int
            vertical position of folder, relative to the (top-level)
            form the tabbed folder belongs to
        width : int
            width
        height : int
            height

    Examples
    --------
        >>> xpos, ypos, width, height = fl_get_folder_area(tbfobj)

    API_diversion
    -------------
        API changed from XForms, upstream is
        fl_get_folder_area(ptr_flobject, xpos, ypos, width, height)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_folder_area = library.cfuncproto(
        library.load_so_libforms(), "fl_get_folder_area",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_Coord),
        cty.POINTER(xfdata.FL_Coord), cty.POINTER(xfdata.FL_Coord),
        cty.POINTER(xfdata.FL_Coord)],
        """void fl_get_folder_area(FL_OBJECT * ob, FL_Coord * x,
           FL_Coord * y, FL_Coord * w, FL_Coord * h)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_xpos, ptr_xpos = library.make_intc_and_pointer()
    i_ypos, ptr_ypos = library.make_intc_and_pointer()
    i_width, ptr_width = library.make_intc_and_pointer()
    i_height, ptr_height = library.make_intc_and_pointer()
    library.keep_elem_refs(ptr_flobject, i_xpos, i_ypos, i_width, \
            i_height, ptr_xpos, ptr_ypos, ptr_width, ptr_height)
    _fl_get_folder_area(ptr_flobject, ptr_xpos, ptr_ypos, ptr_width, \
            ptr_height)
    return i_xpos.value, i_ypos.value, i_width.value, i_height.value


def fl_replace_folder_bynumber(ptr_flobject, seqnum, ptr_flform):
    """fl_replace_folder_bynumber(ptr_flobject, seqnum, ptr_flform)
    
    Replaces a form associated with folder having a particular sequence
    number with a new form

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject
        num : int
            sequence number of folder to be replaced
        ptr_flform : pointer to xfdata.FL_FORM
            new form associated with folder

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_replace_folder_bynumber = library.cfuncproto(
        library.load_so_libforms(), "fl_replace_folder_bynumber",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        cty.POINTER(xfdata.FL_FORM)],
        """void fl_replace_folder_bynumber(FL_OBJECT * ob, int num,
           FL_FORM * form)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.verify_flformptr_type(ptr_flform)
    i_seqnum = library.convert_to_intc(seqnum)
    library.keep_elem_refs(ptr_flobject, seqnum, ptr_flform, i_seqnum)
    _fl_replace_folder_bynumber(ptr_flobject, i_seqnum, ptr_flform)


def fl_set_tabfolder_autofit(ptr_flobject, howfit):
    """fl_set_tabfolder_autofit(ptr_flobject, howfit) -> oldhowfit

    Adjusts dynamically the sizes of the folders in the tab folder so they
    fit. Since tab size can vary depending on monitor/font resolutions, it
    is in general not possible to design the forms (folders) so they fit
    exactly into the folder area.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject
        howfit : int
            how do folders' sizes fit . Values (from xfdata.py) FL_NO,
            FL_FIT, FL_ENLARGE_ONLY

    Returns
    -------
        oldhowfit : int
            previous fit settings

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_tabfolder_autofit = library.cfuncproto(
        library.load_so_libforms(), "fl_set_tabfolder_autofit",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_tabfolder_autofit(FL_OBJECT * ob, int y)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.checkfatal_allowed_value_in_list(howfit, \
            xfdata.FOLDERSIZESFIT_list)
    i_howfit = library.convert_to_intc(howfit)
    library.keep_elem_refs(ptr_flobject, howfit, i_howfit)
    retval = _fl_set_tabfolder_autofit(ptr_flobject, i_howfit)
    return retval


def fl_set_default_tabfolder_corner(numpixels):
    """fl_set_default_tabfolder_corner(numpixels) -> oldnumpixels
    
    Adjusts the corner pixels, changing appearance of the tabs.

    Parameters
    ----------
        numpixels : int
            number of corner pixels (default 3)

    Returns
    -------
        oldnumpixels : int
            old number of corner pixels

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_default_tabfolder_corner = library.cfuncproto(
        library.load_so_libforms(), "fl_set_default_tabfolder_corner",
        cty.c_int, [cty.c_int],
        """int fl_set_default_tabfolder_corner(int n):""")
    library.check_if_initialized()
    i_numpixels = library.convert_to_intc(numpixels)
    library.keep_elem_refs(numpixels, i_numpixels)
    retval = _fl_set_default_tabfolder_corner(i_numpixels)
    return retval


def fl_get_tabfolder_offset(ptr_flobject):
    """fl_get_tabfolder_offset(ptr_flobject) -> offset
    
    Finds out current offset for a tabfolder flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject

    Returns
    -------
        offset : int
            current offset value

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_tabfolder_offset = library.cfuncproto(
        library.load_so_libforms(), "fl_get_tabfolder_offset",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_tabfolder_offset(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_tabfolder_offset(ptr_flobject)
    return retval


def fl_set_tabfolder_offset(ptr_flobject, offset):
    """fl_set_tabfolder_offset(ptr_flobject, offset) -> oldoffset
    
    Defines offset for a tabfolder flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            tabfolder flobject
        offset : int
            value of tabfolder offset

    Returns
    -------
        oldoffset : int
            previous offset value

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_tabfolder_offset = library.cfuncproto(
        library.load_so_libforms(), "fl_set_tabfolder_offset",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_tabfolder_offset(FL_OBJECT * ob, int offset)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_offset = library.convert_to_intc(offset)
    library.keep_elem_refs(ptr_flobject, offset, i_offset)
    retval = _fl_set_tabfolder_offset(ptr_flobject, i_offset)
    return retval

