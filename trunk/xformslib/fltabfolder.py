#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage tabfolder objects.
"""

#    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
#    e-mail: <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata


########################
# forms.h (tabfolder.h)
########################

# fl_create_tabfolder function placeholde (internal)


def fl_add_tabfolder(foldertype, x, y, w, h, label):
    """fl_add_tabfolder(foldertype, x, y, w, h, label)
    
    Adds a tabfolder object.

    Parameters
    ----------
        foldertype : int
            type of tabfolder to be added. Values (from xfdata.py)
            FL_TOP_TABFOLDER, FL_BOTTOM_TABFOLDER, FL_LEFT_TABFOLDER,
            FL_RIGHT_TABFOLDER, FL_NORMAL_TABFOLDER
        x : int
            horizontal position (upper-left corner)
        y : int
            vertical position (upper-left corner)
        w : int
            width in coord units
        h : int
            height in coord units
        label : str
            text label of tabfolder

    Returns
    -------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object added

    Examples
    --------
        >>> tbfobj = fl_add_tabfolder(xfdata.FL_TOP_TABFOLDER, 120, 120, \
                250, 400, "myTabFolder")

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_add_tabfolder = library.cfuncproto(
        library.load_so_libforms(), "fl_add_tabfolder",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_tabfolder(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(foldertype, \
            xfdata.TABFOLDERTYPE_list)
    ifoldertype = library.convert_to_int(foldertype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(foldertype, x, y, w, h, label, ifoldertype, \
            ix, iy, iw, ih, slabel)
    retval = _fl_add_tabfolder(ifoldertype, ix, iy, iw, ih, slabel)
    return retval


def fl_addto_tabfolder(pFlObject, title, pFlForm):
    """fl_addto_tabfolder(pFlObject, title, pFlForm)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object
        title : str
            *todo*
        pFlForm : pointer to xfdata.FL_FORM
            form

    Returns
    -------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object 

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_addto_tabfolder = library.cfuncproto(
        library.load_so_libforms(), "fl_addto_tabfolder",
        cty.POINTER(xfdata.FL_OBJECT), [cty.POINTER(xfdata.FL_OBJECT),
        xfdata.STRING, cty.POINTER(xfdata.FL_FORM)],
        """FL_OBJECT * fl_addto_tabfolder(FL_OBJECT * ob,
           const char * title, FL_FORM * form)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.verify_flformptr_type(pFlForm)
    stitle = library.convert_to_string(title)
    library.keep_elem_refs(pFlObject, title, pFlForm, stitle)
    retval = _fl_addto_tabfolder(pFlObject, stitle, pFlForm)
    return retval


def fl_get_tabfolder_folder_bynumber(pFlObject, num):
    """fl_get_tabfolder_folder_bynumber(pFlObject, num)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object
        num : int
            sequence number?

    Returns
    -------
        pForm : pointer to xfdata.FL_FORM
            form

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_tabfolder_folder_bynumber = library.cfuncproto(
        library.load_so_libforms(), "fl_get_tabfolder_folder_bynumber",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT),
        cty.c_int],
        """FL_FORM * fl_get_tabfolder_folder_bynumber(FL_OBJECT * ob,
           int num)""")
    library.verify_flobjectptr_type(pFlObject)
    inum = library.convert_to_int(num)
    library.keep_elem_refs(pFlObject, num, inum)
    retval = _fl_get_tabfolder_folder_bynumber(pFlObject, inum)
    return retval


def fl_get_tabfolder_folder_byname(pFlObject, name):
    """fl_get_tabfolder_folder_byname(pFlObject, name)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object
        name : str
            name?

    Returns
    -------
        pForm : pointer to xfdata.FL_FORM
            form

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_tabfolder_folder_byname = library.cfuncproto(
        library.load_so_libforms(), "fl_get_tabfolder_folder_byname",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT),
        xfdata.STRING],
        """FL_FORM * fl_get_tabfolder_folder_byname(FL_OBJECT * ob,
           const char * name)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    sname = library.convert_to_string(name)
    library.keep_elem_refs(pFlObject, name, sname)
    retval = _fl_get_tabfolder_folder_byname(pFlObject, sname)
    return retval


def fl_delete_folder(pFlObject, pFlForm):
    """fl_delete_folder(pFlObject, pFlForm)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object
        pFlForm : pointer to xfdata.FL_FORM
            form

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_delete_folder = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_folder",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_FORM)],
        """void fl_delete_folder(FL_OBJECT * ob, FL_FORM * form)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlObject, pFlForm)
    _fl_delete_folder(pFlObject, pFlForm)


def fl_delete_folder_bynumber(pFlObject, num):
    """fl_delete_folder_bynumber(pFlObject, num)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object
        num : int
            sequnece number?

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_delete_folder_bynumber = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_folder_bynumber",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_delete_folder_bynumber(FL_OBJECT * ob, int num)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    inum = library.convert_to_int(num)
    library.keep_elem_refs(pFlObject, num, inum)
    _fl_delete_folder_bynumber(pFlObject, inum)


def fl_delete_folder_byname(pFlObject, name):
    """fl_delete_folder_byname(pFlObject, name)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object
        name : str
            name of folder

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_delete_folder_byname = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_folder_byname",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_delete_folder_byname(FL_OBJECT * ob, const char * name)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    sname = library.convert_to_string(name)
    library.keep_elem_refs(pFlObject, name, sname)
    _fl_delete_folder_byname(pFlObject, sname)


def fl_set_folder(pFlObject, pFlForm):
    """fl_set_folder(pFlObject, pFlForm)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object
        pFlForm : pointer to xfdata.FL_FORM
            form

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_folder = library.cfuncproto(
        library.load_so_libforms(), "fl_set_folder",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_FORM)],
        """void fl_set_folder(FL_OBJECT * ob, FL_FORM * form)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlObject, pFlForm)
    _fl_set_folder(pFlObject, pFlForm)


def fl_set_folder_byname(pFlObject, name):
    """fl_set_folder_byname(pFlObject, name)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object
        name : str
            name of folder

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_folder_byname = library.cfuncproto(
        library.load_so_libforms(), "fl_set_folder_byname",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_set_folder_byname(FL_OBJECT * ob, const char * name)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    sname = library.convert_to_string(name)
    library.keep_elem_refs(pFlObject, name, sname)
    _fl_set_folder_byname(pFlObject, name)


def fl_set_folder_bynumber(pFlObject, num):
    """fl_set_folder_bynumber(pFlObject, num)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object
        num : int
            sequence number?

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_set_folder_bynumber = library.cfuncproto(
        library.load_so_libforms(), "fl_set_folder_bynumber",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_folder_bynumber(FL_OBJECT * ob, int num)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    inum = library.convert_to_int(num)
    library.keep_elem_refs(pFlObject, num, inum)
    _fl_set_folder_bynumber(pFlObject, inum)


def fl_get_folder(pFlObject):
    """fl_get_folder(pFlObject)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object

    Returns
    -------
        pForm : pointer to xfdata.FL_FORM
            form

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_folder = library.cfuncproto(
        library.load_so_libforms(), "fl_get_folder",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_FORM * fl_get_folder(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_folder(pFlObject)
    return retval


def fl_get_folder_number(pFlObject):
    """fl_get_folder_number(pFlObject)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object

    Returns
    -------
        num. : int
            folder num.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_folder_number = library.cfuncproto(
        library.load_so_libforms(), "fl_get_folder_number",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_folder_number(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_folder_number(pFlObject)
    return retval


def fl_get_folder_name(pFlObject):
    """fl_get_folder_name(pFlObject)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object

    Returns
    -------
        name : str
            name of folder

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_folder_name = library.cfuncproto(
        library.load_so_libforms(), "fl_get_folder_name",
        xfdata.STRING, [cty.POINTER(xfdata.FL_OBJECT)],
        """const char * fl_get_folder_name(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_folder_name(pFlObject)
    return retval


def fl_get_tabfolder_numfolders(pFlObject):
    """fl_get_tabfolder_numfolders(pFlObject)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object

    Returns
    -------
        num. : int
            *todo*

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_tabfolder_numfolders = library.cfuncproto(
        library.load_so_libforms(), "fl_get_tabfolder_numfolders",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_tabfolder_numfolders(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_tabfolder_numfolders(pFlObject)
    return retval


def fl_get_active_folder(pFlObject):
    """fl_get_active_folder(pFlObject)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object

    Returns
    -------
        pForm : pointer to xfdata.FL_FORM
            form

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_get_active_folder = library.cfuncproto(
        library.load_so_libforms(), "fl_get_active_folder",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_FORM * fl_get_active_folder(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_active_folder(pFlObject)
    return retval


def fl_get_active_folder_number(pFlObject):
    """fl_get_active_folder_number(pFlObject)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object

    Returns
    -------
        num : int
            active folder id

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_active_folder_number = library.cfuncproto(
        library.load_so_libforms(), "fl_get_active_folder_number",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_active_folder_number(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_active_folder_number(pFlObject)
    return retval


def fl_get_active_folder_name(pFlObject):
    """fl_get_active_folder_name(pFlObject)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object

    Returns
    -------
        name : str
            active folder name

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_active_folder_name = library.cfuncproto(
        library.load_so_libforms(), "fl_get_active_folder_name",
        xfdata.STRING, [cty.POINTER(xfdata.FL_OBJECT)],
        """const char * fl_get_active_folder_name(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_active_folder_name(pFlObject)
    return retval


def fl_get_folder_area(pFlObject):
    """fl_get_folder_area(pFlObject)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object

    Returns
    -------
        x : int
            horizontal position of tabfolder
        y : int
            vertical position of tabfolder
        w : int
            width
        h : int
            height

    Examples
    --------
        >>> x, y, w, h = fl_get_folder_area(tbfobj)

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_folder_area(pFlObject, x, y, w, h)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_folder_area = library.cfuncproto(
        library.load_so_libforms(), "fl_get_folder_area",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_Coord),
        cty.POINTER(xfdata.FL_Coord), cty.POINTER(xfdata.FL_Coord),
        cty.POINTER(xfdata.FL_Coord)],
        """void fl_get_folder_area(FL_OBJECT * ob, FL_Coord * x,
           FL_Coord * y, FL_Coord * w, FL_Coord * h)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    x, px = library.make_int_and_pointer()
    y, py = library.make_int_and_pointer()
    w, pw = library.make_int_and_pointer()
    h, ph = library.make_int_and_pointer()
    library.keep_elem_refs(pFlObject, x, y, w, h, px, py, pw, ph)
    _fl_get_folder_area(pFlObject, px, py, pw, ph)
    return x.value, y.value, w.value, h.value


def fl_replace_folder_bynumber(pFlObject, num, pFlForm):
    """fl_replace_folder_bynumber(pFlObject, num, pFlForm)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object
        num : int
            sequence number?
        pFlForm : pointer to xfdata.FL_FORM
            form

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_replace_folder_bynumber = library.cfuncproto(
        library.load_so_libforms(), "fl_replace_folder_bynumber",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        cty.POINTER(xfdata.FL_FORM)],
        """void fl_replace_folder_bynumber(FL_OBJECT * ob, int num,
           FL_FORM * form)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.verify_flformptr_type(pFlForm)
    inum = library.convert_to_int(num)
    library.keep_elem_refs(pFlObject, num, pFlForm, inum)
    _fl_replace_folder_bynumber(pFlObject, inum, pFlForm)


def fl_set_tabfolder_autofit(pFlObject, num):
    """fl_set_tabfolder_autofit(pFlObject, num)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object
        num : int
            sequence number?

    Returns
    -------
        num. : int
            *todo*

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_tabfolder_autofit = library.cfuncproto(
        library.load_so_libforms(), "fl_set_tabfolder_autofit",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_tabfolder_autofit(FL_OBJECT * ob, int y)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    inum = library.convert_to_int(num)
    library.keep_elem_refs(pFlObject, num, inum)
    retval = _fl_set_tabfolder_autofit(pFlObject, inum)
    return retval


def fl_set_default_tabfolder_corner(npixels):
    """fl_set_default_tabfolder_corner(npixels)
    
    Adjusts the corner pixels, changing appearance of the tabs.

    Parameters
    ----------
        npixels : int
            number of corner pixels (default 3)

    Returns
    -------
        oldpix : int
            old pixels num.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_default_tabfolder_corner = library.cfuncproto(
        library.load_so_libforms(), "fl_set_default_tabfolder_corner",
        cty.c_int, [cty.c_int],
        """int fl_set_default_tabfolder_corner(int n):""")
    library.check_if_initialized()
    ipixels = library.convert_to_int(npixels)
    library.keep_elem_refs(npixels, ipixels)
    retval = _fl_set_default_tabfolder_corner(ipixels)
    return retval


def fl_set_tabfolder_offset(pFlObject, offset):
    """fl_set_tabfolder_offset(pFlObject, offset)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            tabfolder object
        offset : int
            *todo*

    Returns
    -------
        num. : int
            *todo*

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_tabfolder_offset = library.cfuncproto(
        library.load_so_libforms(), "fl_set_tabfolder_offset",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_tabfolder_offset(FL_OBJECT * ob, int offset)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    ioffset = library.convert_to_int(offset)
    library.keep_elem_refs(pFlObject, offset, ioffset)
    retval = _fl_set_tabfolder_offset(pFlObject, ioffset)
    return retval

