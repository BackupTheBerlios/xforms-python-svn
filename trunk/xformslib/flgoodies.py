#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
        <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.

    *****************************************************************


    @newfield example: Example, Example
"""


__docformat__ = "epytext en"    # to be used with epydoc doc


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata
from xformslib import flbasic






######################
# forms.h (goodies.h)
######################

# Resources and misc. goodie routines

def fl_set_goodies_font(style, size):
    """
        fl_set_goodies_font(style, size)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_goodies_font = library.cfuncproto(
            library.load_so_libforms(), "fl_set_goodies_font",
            None, [cty.c_int, cty.c_int],
            """void fl_set_goodies_font(int style, int size)
""")
    library.check_if_initialized()
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    library.keep_elem_refs(style, size, istyle, isize)
    _fl_set_goodies_font(istyle, isize)


# messages and questions

def fl_show_message(msgtxt1, msgtxt2, msgtxt3):
    """
        fl_show_message(msgtxt1, msgtxt2, msgtxt3)

        Shows a message.

        @param msgtxt1: first message to show
        @param msgtxt2: second message to show
        @param msgtxt3: third message to show

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_message = library.cfuncproto(
            library.load_so_libforms(), "fl_show_message",
            None, [xfdata.STRING, xfdata.STRING, xfdata.STRING],
            """void fl_show_message(const char * p1, const char * p2,
               const char * p3)
""")
    library.check_if_initialized()
    smsgtxt1 = library.convert_to_string(msgtxt1)
    smsgtxt2 = library.convert_to_string(msgtxt2)
    smsgtxt3 = library.convert_to_string(msgtxt3)
    library.keep_elem_refs(msgtxt1, msgtxt2, msgtxt3, smsgtxt1, smsgtxt2, smsgtxt3)
    _fl_show_message(smsgtxt1, smsgtxt2, smsgtxt3)


def fl_show_messages(p1):
    """
        fl_show_messages(p1)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_messages = library.cfuncproto(
            library.load_so_libforms(), "fl_show_messages",
            None, [xfdata.STRING],
            """void fl_show_messages(const char * p1)
""")
    library.check_if_initialized()
    sp1 = library.convert_to_string(p1)
    library.keep_elem_refs(p1, sp1)
    _fl_show_messages(sp1)


def fl_show_msg(fmttxt):
    """
        fl_show_msg(fmttxt)

        Shows a formatted text message.

        @param fmttxt: text message to show (with format parameters, e.g.
           %s, %d, %f etc..)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_show_msg = library.cfuncproto(
            library.load_so_libforms(), "fl_show_msg",
            None, [xfdata.STRING],
            """void fl_show_msg(const char * p1)
""")
    library.check_if_initialized()
    sfmttxt = library.convert_to_string(fmttxt)
    library.keep_elem_refs(fmttxt, sfmttxt)
    _fl_show_msg(sfmttxt)


def fl_hide_message():
    """
        fl_hide_message()

        Hides a text message already shown.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_hide_message = library.cfuncproto(
            library.load_so_libforms(), "fl_hide_message",
            None, [],
            """void fl_hide_message()
""")
    library.check_if_initialized()
    _fl_hide_message()


fl_hide_msg = fl_hide_message
fl_hide_messages = fl_hide_message


def fl_show_question(questmsg, p2):
    """
        fl_show_question(questmsg, p2) -> num.

        Shows a question message.

        @param questmsg: text of question message to show
        @param p2: ?

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_question = library.cfuncproto(
            library.load_so_libforms(), "fl_show_question",
            cty.c_int, [xfdata.STRING, cty.c_int],
            """int fl_show_question(const char * p1, int p2)
""")
    library.check_if_initialized()
    squestmsg = library.convert_to_string(questmsg)
    ip2 = library.convert_to_int(p2)
    library.keep_elem_refs(questmsg, p2, squestmsg, ip2)
    retval = _fl_show_question(squestmsg, ip2)
    return retval


def fl_hide_question():
    """
        fl_hide_question()

        Hides a question message already shown.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_hide_question = library.cfuncproto(
            library.load_so_libforms(), "fl_hide_question",
            None, [],
            """void fl_hide_question()
""")
    library.check_if_initialized()
    _fl_hide_question()


def fl_show_alert(title, msg1, msg2, centered):
    """
        fl_show_alert(title, msg1, msg2, centered)

        Shows an alert message.

        @param title: title of alert
        @param msg1: first message text
        @param msg2: other message text
        @param centered: if alert has to be displayed centered or not

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_alert = library.cfuncproto(
            library.load_so_libforms(), "fl_show_alert",
            None, [xfdata.STRING, xfdata.STRING, xfdata.STRING, cty.c_int],
            """void fl_show_alert(const char * p1, const char * p2,
               const char * p3, int p4)
""")
    library.check_if_initialized()
    stitle = library.convert_to_string(title)
    smsg1 = library.convert_to_string(msg1)
    smsg2 = library.convert_to_string(msg2)
    icentered = library.convert_to_int(centered)
    library.keep_elem_refs(title, msg1, msg2, centered, stitle, smsg1, smsg2,
                   icentered)
    _fl_show_alert(stitle, smsg1, smsg2, icentered)


def fl_show_alert2(centered, fmt):
    """
        fl_show_alert2(centered, fmt)

        Shows a formatted alert message.

        @param fmt: formatted message text
        @param centered: if alert has to be displayed centered or not

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_show_alert2 = library.cfuncproto(
            library.load_so_libforms(), "fl_show_alert2",
            None, [cty.c_int, xfdata.STRING],
            """void fl_show_alert2(int c, const char * fmt)
""")
    library.check_if_initialized()
    icentered = library.convert_to_int(centered)
    sfmt = library.convert_to_string(fmt)
    library.keep_elem_refs(centered, fmt, icentered, sfmt)
    _fl_show_alert2(icentered, sfmt)


def fl_hide_alert():
    """
        fl_hide_alert()

        Hides a previously shown alert message.

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_hide_alert = library.cfuncproto(
            library.load_so_libforms(), "fl_hide_alert",
            None, [],
            """void fl_hide_alert()
""")
    library.check_if_initialized()
    _fl_hide_alert()


def fl_show_input(msgtxt, defstr):
    """
        fl_show_input(msgtxt, defstr) -> input string

        Obtains some text from user, showing a default text. It has OK and
        Cancel buttons.

        @param msgtxt: text used to ask for input
        @param defstr: default user answer to show

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_input = library.cfuncproto(
            library.load_so_libforms(), "fl_show_input",
            xfdata.STRING, [xfdata.STRING, xfdata.STRING],
            """const char * fl_show_input(const char * p1, const char * p2)
""")
    library.check_if_initialized()
    smsgtxt = library.convert_to_string(msgtxt)
    sdefstr = library.convert_to_string(defstr)
    library.keep_elem_refs(msgtxt, defstr, smsgtxt, sdefstr)
    retval = _fl_show_input(smsgtxt, sdefstr)
    return retval


def fl_hide_input():
    """
        fl_hide_input()

        Hides a previously shown input object.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_hide_input = library.cfuncproto(
            library.load_so_libforms(), "fl_hide_input",
            None, [],
            """void fl_hide_input()
""")
    library.check_if_initialized()
    _fl_hide_input()


def fl_show_simple_input(msgtxt, defstr):
    """
        fl_show_simple_input(msgtxt, defstr) -> input string

        Asks the user for textual input. It has an OK button only.

        @param msgtxt: message used to ask for input
        @param defstr: default user answer in input

        @example: inpstr = fl_show_simple_input("Insert name and surname:",
            "John Doe")

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_show_simple_input = library.cfuncproto(
            library.load_so_libforms(), "fl_show_simple_input",
            xfdata.STRING, [xfdata.STRING, xfdata.STRING],
            """const char * fl_show_simple_input(const char * p1,
               const char * p2)
""")
    library.check_if_initialized()
    smsgtxt = library.convert_to_string(msgtxt)
    sdefstr = library.convert_to_string(defstr)
    library.keep_elem_refs(msgtxt, defstr, smsgtxt, sdefstr)
    retval = _fl_show_simple_input(smsgtxt, sdefstr)
    return retval


def fl_show_colormap(oldcolr):
    """
        fl_show_colormap(oldcolr) -> colormap num.

        Shows a colormap color selector from which the user can select a
        color.

        @param oldcolr: color num. (Not FL_COLOR)
        @type oldcolr: num./int

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_colormap = library.cfuncproto(
            library.load_so_libforms(), "fl_show_colormap",
            cty.c_int, [cty.c_int],
            """int fl_show_colormap(int p1)
""")
    library.check_if_initialized()
    ioldcolr = library.convert_to_int(oldcolr)
    library.keep_elem_refs(oldcolr, ioldcolr)
    retval = _fl_show_colormap(ioldcolr)
    return retval


# choices

def fl_show_choices(msgtxt, p2, p3, p4, p5, p6):
    """
        fl_show_choices(msgtxt, p2, p3, p4, p5, p6) -> num.

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_choices = library.cfuncproto(
            library.load_so_libforms(), "fl_show_choices",
            cty.c_int, [xfdata.STRING, cty.c_int, xfdata.STRING, xfdata.STRING,
            xfdata.STRING, cty.c_int],
            """int fl_show_choices(const char * p1, int p2,
               const char * p3, const char * p4, const char * p5, int p6)
""")
    library.check_if_initialized()
    smsgtxt = library.convert_to_string(msgtxt)
    ip2 = library.convert_to_int(p2)
    sp3 = library.convert_to_string(p3)
    sp4 = library.convert_to_string(p4)
    sp5 = library.convert_to_string(p5)
    ip6 = library.convert_to_int(p6)
    library.keep_elem_refs(msgtxt, p2, p3, p4, p5, p6, smsgtxt, ip2, sp3, sp4, sp5, ip6)
    retval = _fl_show_choices(smsgtxt, ip2, sp3, sp4, sp5, ip6)
    return retval


def fl_show_choice(p1, p2, p3, p4, p5, p6, p7, p8):
    """
        fl_show_choice(p1, p2, p3, p4, p5, p6, p7, p8) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_show_choice = library.cfuncproto(
            library.load_so_libforms(), "fl_show_choice",
            cty.c_int, [xfdata.STRING, xfdata.STRING, xfdata.STRING, cty.c_int,
            xfdata.STRING, xfdata.STRING, xfdata.STRING, cty.c_int],
            """int fl_show_choice(const char * p1, const char * p2,
               const char * p3, int p4, const char * p5, const char * p6,
               const char * p7, int p8)
""")
    library.check_if_initialized()
    sp1 = library.convert_to_string(p1)
    sp2 = library.convert_to_string(p2)
    sp3 = library.convert_to_string(p3)
    ip4 = library.convert_to_int(p4)
    sp5 = library.convert_to_string(p5)
    sp6 = library.convert_to_string(p6)
    sp7 = library.convert_to_string(p7)
    ip8 = library.convert_to_int(p8)
    library.keep_elem_refs(sp1, sp2, sp3, ip4, sp5, sp6, sp7, ip8)
    retval = _fl_show_choice(sp1, sp2, sp3, ip4, sp5, sp6, sp7, ip8)
    return retval


def fl_hide_choice():
    """
        fl_hide_choice()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_hide_choice = library.cfuncproto(
            library.load_so_libforms(), "fl_hide_choice",
            None, [],
            """void fl_hide_choice()
""")
    library.check_if_initialized()
    _fl_hide_choice()


def fl_set_choices_shortcut(p1, p2, p3):
    """
        fl_set_choices_shortcut(p1, p2, p3)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_choices_shortcut = library.cfuncproto(
            library.load_so_libforms(), "fl_set_choices_shortcut",
            None, [xfdata.STRING, xfdata.STRING, xfdata.STRING],
            """void fl_set_choices_shortcut(const char * p1, const char * p2,
               const char * p3)
""")
    library.check_if_initialized()
    sp1 = library.convert_to_string(p1)
    sp2 = library.convert_to_string(p2)
    sp3 = library.convert_to_string(p3)
    library.keep_elem_refs(p1, p2, p3, sp1, sp2, sp3)
    _fl_set_choices_shortcut(sp1, sp2, sp3)


fl_set_choice_shortcut = fl_set_choices_shortcut


# one liner

def fl_show_oneliner(p1, p2, p3):
    """
        fl_show_oneliner(p1, p2, p3)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_oneliner = library.cfuncproto(
            library.load_so_libforms(), "fl_show_oneliner",
            None, [xfdata.STRING, xfdata.FL_Coord, xfdata.FL_Coord],
            """void fl_show_oneliner(const char * p1, FL_Coord p2,
               FL_Coord p3)
""")
    library.check_if_initialized()
    sp1 = library.convert_to_string(p1)
    ip2 = library.convert_to_FL_Coord(p2)
    ip3 = library.convert_to_FL_Coord(p3)
    library.keep_elem_refs(p1, p2, p3, sp1, ip2, ip3)
    _fl_show_oneliner(sp1, ip2, ip3)


def fl_hide_oneliner():
    """
        fl_hide_oneliner()

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_hide_oneliner = library.cfuncproto(
            library.load_so_libforms(), "fl_hide_oneliner",
            None, [],
            """void fl_hide_oneliner()
""")
    library.check_if_initialized()
    _fl_hide_oneliner()


def fl_set_oneliner_font(style, size):
    """
        fl_set_oneliner_font(style, size)

        @param style: label style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        @param size: label size (<int>)
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE,
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_oneliner_font = library.cfuncproto(
        library.load_so_libforms(), "fl_set_oneliner_font",
        None, [cty.c_int, cty.c_int],
        """void fl_set_oneliner_font(int p1, int p2)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(style, xfdata.TEXTSTYLE_list)
    library.check_admitted_listvalues(size, xfdata.FONTSIZE_list)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    library.keep_elem_refs(style, size, istyle, isize)
    _fl_set_oneliner_font(istyle, isize)


def fl_set_oneliner_color(fgcolr, bgcolr):
    """
         fl_set_oneliner_color(fgcolr, bgcolr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_oneliner_color = library.cfuncproto(
        library.load_so_libforms(), "fl_set_oneliner_color",
        None, [xfdata.FL_COLOR, xfdata.FL_COLOR],
        """void fl_set_oneliner_color(FL_COLOR p1, FL_COLOR p2)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(fgcolr, xfdata.COLOR_list)
    library.check_admitted_listvalues(bgcolr, xfdata.COLOR_list)
    ulfgcolr = library.convert_to_FL_COLOR(fgcolr)
    ulbgcolr = library.convert_to_FL_COLOR(bgcolr)
    library.keep_elem_refs(fgcolr, bgcolr, ulfgcolr, ulbgcolr)
    _fl_set_oneliner_color(ulfgcolr, ulbgcolr)


def fl_set_tooltip_font(style, size):
    """
        fl_set_tooltip_font(style, size)

        @param style: label style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        @param size: label size (<int>)
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE,
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_tooltip_font = library.cfuncproto(
        library.load_so_libforms(), "fl_set_tooltip_font",
        None, [cty.c_int, cty.c_int],
        """void fl_set_tooltip_font(int p1, int p2)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(style, xfdata.TEXTSTYLE_list)
    library.check_admitted_listvalues(size, xfdata.FONTSIZE_list)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    library.keep_elem_refs(style, size, istyle, isize)
    _fl_set_tooltip_font(istyle, isize)


def fl_set_tooltip_color(fgcolr, bgcolr):
    """
        fl_set_tooltip_color(fgcolr, bgcolr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_tooltip_color = library.cfuncproto(
        library.load_so_libforms(), "fl_set_tooltip_color",
        None, [xfdata.FL_COLOR, xfdata.FL_COLOR],
        """void fl_set_tooltip_color(FL_COLOR p1, FL_COLOR p2)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(fgcolr, xfdata.COLOR_list)
    library.check_admitted_listvalues(bgcolr, xfdata.COLOR_list)
    ulfgcolr = library.convert_to_FL_COLOR(fgcolr)
    ulbgcolr = library.convert_to_FL_COLOR(bgcolr)
    library.keep_elem_refs(fgcolr, bgcolr, ulfgcolr, ulbgcolr)
    _fl_set_tooltip_color(ulfgcolr, ulbgcolr)


def fl_set_tooltip_boxtype(boxtype):
    """
        fl_set_tooltip_boxtype(boxtype)

        @param boxtype: type of the box to be added (<int>)
        @type boxtype: (from xfdata module) FL_NO_BOX, FL_UP_BOX, FL_DOWN_BOX,
                       FL_BORDER_BOX, FL_SHADOW_BOX, FL_FRAME_BOX,
                       FL_ROUNDED_BOX, FL_EMBOSSED_BOX, FL_FLAT_BOX,
                       FL_RFLAT_BOX, FL_RSHADOW_BOX, FL_OVAL_BOX,
                       FL_ROUNDED3D_UPBOX, FL_ROUNDED3D_DOWNBOX,
                       FL_OVAL3D_UPBOX, FL_OVAL3D_DOWNBOX, FL_OVAL3D_FRAMEBOX,
                       FL_OVAL3D_EMBOSSEDBOX

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_tooltip_boxtype = library.cfuncproto(
        library.load_so_libforms(), "fl_set_tooltip_boxtype",
        None, [cty.c_int],
        """void fl_set_tooltip_boxtype(int p1)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(boxtype, xfdata.BOXTYPE_list)
    iboxtype = library.convert_to_int(boxtype)
    library.keep_elem_refs(boxtype, iboxtype)
    _fl_set_tooltip_boxtype(iboxtype)


def fl_set_tooltip_lalign(align):
    """
        fl_set_tooltip_lalign(align)

        @param align: alignment of tooltip (<int>)
        @type align: (from xfdata module) FL_ALIGN_CENTER, FL_ALIGN_TOP,
                     FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
                     FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP,
                     FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM,
                     FL_ALIGN_INSIDE, FL_ALIGN_VERT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_tooltip_lalign = library.cfuncproto(
        library.load_so_libforms(), "fl_set_tooltip_lalign",
        None, [cty.c_int],
        """void fl_set_tooltip_lalign(int p1)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(align, xfdata.ALIGN_list)
    ialign = library.convert_to_int(align)
    library.keep_elem_refs(align, ialign)
    _fl_set_tooltip_lalign(ialign)


def fl_exe_command(command, block):
    """
        fl_exe_command(command, block) -> exit status

        Forks a new process that runs specified command

        @param command: a shell command line
        @param block: blocking flag indicating if the function should
                      wait for the child process to finish or not (<int>)
        @type block: non-zero (for waiting) or 0 (don't wait).

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_exe_command = library.cfuncproto(
        library.load_so_libforms(), "fl_exe_command",
        cty.c_long, [xfdata.STRING, cty.c_int],
        """long int fl_exe_command(const char * p1, int p2)""")
    library.check_if_initialized()
    scommand = library.convert_to_string(command)
    iblock = library.convert_to_int(block)
    library.keep_elem_refs(command, block, scommand, iblock)
    retval = _fl_exe_command(scommand, iblock)
    return retval


fl_open_command = fl_exe_command


def fl_end_command(pid):
    """
        fl_end_command(pid) -> exit status

        Suspends the current process and waits until the child process is
        completed, then it returns the exit status of the child process or
        -1 if an error has occurred.

        @param pid: process id returned by fl_exe_command()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_end_command = library.cfuncproto(
        library.load_so_libforms(), "fl_end_command",
        cty.c_int, [cty.c_long],
        """int fl_end_command(long int p1)""")
    library.check_if_initialized()
    lpid = library.convert_to_long(pid)
    library.keep_elem_refs(pid, lpid)
    retval = _fl_end_command(lpid)
    return retval


fl_close_command = fl_end_command


def fl_check_command(pid):
    """
        fl_check_command(pid) -> exit status

        Polls the status of a child process. Returns 0 if the child process is
        finished; 1 if the child process still exists (running or stopped) and
        -1 if an error has occurred inside the function.

        @param pid: process id returned by fl_exe_command()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_check_command = library.cfuncproto(
        library.load_so_libforms(), "fl_check_command",
        cty.c_int, [cty.c_long],
        """int fl_check_command(long int p1)""")
    library.check_if_initialized()
    lpid = library.convert_to_long(pid)
    library.keep_elem_refs(pid, lpid)
    retval = _fl_check_command(lpid)
    return retval


def fl_popen(command, otype):
    """
    fl_popen(command, otype) -> pFile

    Executes the command in a child process, and logs the stderr messages into
    the command log. If otype is "w", stdout will also be logged into the
    command browser.

    @param command: existing filename to execute
    @type command: str
    @param otype: type of opening (e.g. letter between w, r ..)
    @type otype: str

    @returns: file opened (<pointer to FILE>)

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_popen = library.cfuncproto(
        library.load_so_libforms(), "fl_popen",
        cty.POINTER(xfdata.FILE), [xfdata.STRING, xfdata.STRING],
        """FILE * fl_popen(const char * p1, const char * p2)""")
    library.check_if_initialized()
    scommand = library.convert_to_string(command)
    sotype = library.convert_to_string(otype)
    library.keep_elem_refs(command, otype, scommand, sotype)
    retval = _fl_popen(scommand, sotype)
    return retval


def fl_pclose(pFile):
    """
    fl_pclose(pFile) -> int

    Cleans up the child process executed.

    @param pFile: opened file stream returned by fl_popen()
    @type pFile: pointer to FILE

    @returns: non-zero, or -1 (on failure)

    @example: if fl_pclose(pfile) == -1: ...

    @status: Tested + Doc + NoDemo = OK
    """
    _fl_pclose = library.cfuncproto(
        library.load_so_libforms(), "fl_pclose",
        cty.c_int, [cty.POINTER(xfdata.FILE)],
        """int fl_pclose(FILE * p1)""")
    library.check_if_initialized()
    library.keep_elem_refs(pFile)
    retval = _fl_pclose(pFile)
    return retval


def fl_end_all_command():
    """
    fl_end_all_command() -> exit status

    Wait for all the child processes initiated by fl_exe_command() to
    complete. Returns the status of the last child process.

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_end_all_command = library.cfuncproto(
        library.load_so_libforms(), "fl_end_all_command",
        cty.c_int, [],
        """int fl_end_all_command()""")
    retval = _fl_end_all_command()
    return retval


def fl_show_command_log(border):
    """
    fl_show_command_log(border)

    Shows the log of the command output.

    @param border: window manager decoration. Values (from xfdata module) i.e.
        FL_FULLBORDER, FL_TRANSIENT, FL_NOBORDER
    @type border: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_show_command_log = library.cfuncproto(
        library.load_so_libforms(), "fl_show_command_log",
        None, [cty.c_int],
        """void fl_show_command_log(int p1)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(border, xfdata.DECORATION_list)
    iborder = library.convert_to_int(border)
    library.keep_elem_refs(border, iborder)
    _fl_show_command_log(iborder)


def fl_hide_command_log():
    """
    fl_hide_command_log()

    Hides the log of the command output.

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_hide_command_log = library.cfuncproto(
        library.load_so_libforms(), "fl_hide_command_log",
        None, [],
        """void fl_hide_command_log()""")
    library.check_if_initialized()
    _fl_hide_command_log()


def fl_clear_command_log():
    """
    fl_clear_command_log()

    Clears the browser and the logging output displayed within it.

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_clear_command_log = library.cfuncproto(
        library.load_so_libforms(), "fl_clear_command_log",
        None, [],
        """void fl_clear_command_log()""")
    library.check_if_initialized()
    _fl_clear_command_log()


def fl_addto_command_log(txtstr):
    """
    fl_addto_command_log(txtstr)

    Adds arbitrary text to the command browser

    @param txtstr: text line to be added <string>

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_addto_command_log = library.cfuncproto(
            library.load_so_libforms(), "fl_addto_command_log",
            None, [xfdata.STRING],
            """void fl_addto_command_log(const char * p1)
""")
    library.check_if_initialized()
    stxtstr = library.convert_to_string(txtstr)
    library.keep_elem_refs(txtstr, stxtstr)
    _fl_addto_command_log(stxtstr)


def fl_set_command_log_position(x, y):
    """
    fl_set_command_log_position(x, y)

    Changes the default placement of the command log.

    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_command_log_position = library.cfuncproto(
            library.load_so_libforms(), "fl_set_command_log_position",
            None, [cty.c_int, cty.c_int],
            """void fl_set_command_log_position(int p1, int p2)
""")
    library.check_if_initialized()
    ix = library.convert_to_int(x)
    iy = library.convert_to_int(y)
    library.keep_elem_refs(x, y, ix, iy)
    _fl_set_command_log_position(ix, iy)


def fl_get_command_log_fdstruct():
    """
    fl_get_command_log_fdstruct() -> pCmdlog

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_command_log_fdstruct = library.cfuncproto(
        library.load_so_libforms(), "fl_get_command_log_fdstruct",
        cty.POINTER(xfdata.FD_CMDLOG), [],
        """FD_CMDLOG * fl_get_command_log_fdstruct()""")
    library.check_if_initialized()
    retval = _fl_get_command_log_fdstruct()
    return retval


# file selector

def fl_use_fselector(num):
    """
    fl_use_fselector(num) -> num.

    @param num: fselector number to use. Values between 0 and
        xfdata.FL_MAX_FSELECTOR - 1
    @type num: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_use_fselector = library.cfuncproto(
        library.load_so_libforms(), "fl_use_fselector",
        cty.c_int, [cty.c_int],
        """int fl_use_fselector(int p1)""")
    library.check_if_initialized()
    inum = library.convert_to_int(num)
    library.keep_elem_refs(num, inum)
    retval = _fl_use_fselector(inum)
    return retval


def fl_show_fselector(msgtxt, p2, p3, p4):
    """
    fl_show_fselector(msgtxt, p2, p3, p4) -> fselector string

    @param msgtxt: message text
    @type msgtxt: str
    @param p2: ?
    @type p2: str
    @param p3: ?
    @type p3: str

    @status: Tested + NoDoc + Demo = OK
    """
    _fl_show_fselector = library.cfuncproto(
        library.load_so_libforms(), "fl_show_fselector",
        xfdata.STRING, [xfdata.STRING, xfdata.STRING, xfdata.STRING, xfdata.STRING],
        """const char * fl_show_fselector(const char * p1,
           const char * p2, const char * p3, const char * p4)""")
    library.check_if_initialized()
    smsgtxt = library.convert_to_string(msgtxt)
    sp2 = library.convert_to_string(p2)
    sp3 = library.convert_to_string(p3)
    sp4 = library.convert_to_string(p4)
    library.keep_elem_refs(msgtxt, p2, p3, p4, smsgtxt, sp2, sp3, sp4)
    retval = _fl_show_fselector(smsgtxt, sp2, sp3, sp4)
    return retval


fl_show_file_selector = fl_show_fselector


def fl_set_fselector_fontsize(size):
    """
    fl_set_fselector_fontsize(size)

    @param size: label size. Values (from xfdata module) i.e. FL_TINY_SIZE,
        FL_SMALL_SIZE, FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
        FL_HUGE_SIZE, FL_DEFAULT_SIZE

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_fselector_fontsize = library.cfuncproto(
        library.load_so_libforms(), "fl_set_fselector_fontsize",
        None, [cty.c_int],
        """void fl_set_fselector_fontsize(int p1)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(size, xfdata.FONTSIZE_list)
    isize = library.convert_to_int(size)
    library.keep_elem_refs(size, isize)
    _fl_set_fselector_fontsize(isize)


def fl_set_fselector_fontstyle(style):
    """
    fl_set_fselector_fontstyle(style)

    @param style: label style. Values (from xfdata module) i.e. FL_NORMAL_STYLE,
        FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
        FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
        FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
        FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
        FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
        FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
    @type place: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_fselector_fontstyle = library.cfuncproto(
        library.load_so_libforms(), "fl_set_fselector_fontstyle",
        None, [cty.c_int],
        """void fl_set_fselector_fontstyle(int p1)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(style, xfdata.TEXTSTYLE_list)
    istyle = library.convert_to_int(style)
    library.keep_elem_refs(style, istyle)
    _fl_set_fselector_fontstyle(istyle)


def fl_set_fselector_placement(place):
    """
    fl_set_fselector_placement(place)

    @param place: where to place it. Values (from xfdata module) i.e.
        FL_PLACE_FREE, FL_PLACE_MOUSE, FL_PLACE_CENTER, FL_PLACE_POSITION,
        FL_PLACE_SIZE, FL_PLACE_GEOMETRY, FL_PLACE_ASPECT, FL_PLACE_FULLSCREEN,
        FL_PLACE_HOTSPOT, FL_PLACE_ICONIC, FL_FREE_SIZE, FL_PLACE_FREE_CENTER,
        FL_PLACE_CENTERFREE
    @type place: int

    @status: Tested + NoDoc + Demo = OK
    """
    _fl_set_fselector_placement = library.cfuncproto(
        library.load_so_libforms(), "fl_set_fselector_placement",
        None, [cty.c_int],
        """void fl_set_fselector_placement(int p1)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(place, xfdata.PLACE_list)
    iplace = library.convert_to_int(place)
    library.keep_elem_refs(place, iplace)
    _fl_set_fselector_placement(iplace)


def fl_set_fselector_border(border):
    """
    fl_set_fselector_border(border)

    @param border: window manager decoration. Values (from xfdata module) i.e.
        FL_FULLBORDER, FL_TRANSIENT, FL_NOBORDER
    @type border: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_fselector_border = library.cfuncproto(
        library.load_so_libforms(), "fl_set_fselector_border",
        None, [cty.c_int],
        """void fl_set_fselector_border(int p1)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(border, xfdata.DECORATION_list)
    iborder = library.convert_to_int(border)
    library.keep_elem_refs(border, iborder)
    _fl_set_fselector_border(iborder)


def fl_set_fselector_transient(flag):
    """
    fl_set_fselector_transient(flag)

    @param flag: flag if transient or not. Values 1 (transient) or 0 (not
        transient)
    @type flag: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    if flag:
        argval = xfdata.FL_TRANSIENT
    else:
        argval = xfdata.FL_FULLBORDER
    fl_set_fselector_border(argval)


def fl_set_fselector_callback(py_FSCB, vdata):
    """
    fl_set_fselector_callback(py_FSCB, vdata)

    @param py_FSCB: python function callback, returning value
    @type py_FSCB: __ funcname (string, ptr_void) -> num __
    @param vdata: user data to be passed to function
    @type vdata: pointer to void

    @status: Tested + NoDoc + Demo = OK
    """
    #FL_FSCB = cty.CFUNCTYPE(cty.c_int, xfdata.STRING, cty.c_void_p)
    _fl_set_fselector_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_set_fselector_callback",
        None, [xfdata.FL_FSCB, cty.c_void_p],
        """void fl_set_fselector_callback(FL_FSCB p1, void * p2)""")
    library.check_if_initialized()
    c_FSCB = xfdata.FL_FSCB(py_FSCB)
    pvdata = cty.cast(vdata, cty.c_void_p)
    library.keep_cfunc_refs(c_FSCB, py_FSCB)
    library.keep_elem_refs(vdata, pvdata)
    _fl_set_fselector_callback(c_FSCB, pvdata)


fl_set_fselector_cb = fl_set_fselector_callback


def fl_get_filename():
    """
    fl_get_filename() -> str

    @returns: name of file (fname)

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_filename = library.cfuncproto(
        library.load_so_libforms(), "fl_get_filename",
        xfdata.STRING, [],
        """const char * fl_get_filename()""")
    library.check_if_initialized()
    retval = _fl_get_filename()
    return retval


def fl_get_directory():
    """
    fl_get_directory() -> str

    @returns: name of directory (dirname)

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_directory = library.cfuncproto(
        library.load_so_libforms(), "fl_get_directory",
        xfdata.STRING, [],
        """const char * fl_get_directory()""")
    retval = _fl_get_directory()
    return retval


def fl_get_pattern():
    """
    fl_get_pattern() -> str

    @returns: pattern text

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_pattern = library.cfuncproto(
        library.load_so_libforms(), "fl_get_pattern",
        xfdata.STRING, [],
        """const char * fl_get_pattern()""")
    library.check_if_initialized()
    retval = _fl_get_pattern()
    return retval


def fl_set_directory(dirname):
    """
    fl_set_directory(dirname) -> int

    @param dirname: name of directory to be set
    @type dirname: str

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_directory = library.cfuncproto(
        library.load_so_libforms(), "fl_set_directory",
        cty.c_int, [xfdata.STRING],
        """int fl_set_directory(const char * p1)""")
    library.check_if_initialized()
    sdirname = library.convert_to_string(dirname)
    library.keep_elem_refs(dirname, sdirname)
    retval = _fl_set_directory(sdirname)
    return retval


def fl_set_pattern(pattern):
    """
    fl_set_pattern(pattern)

    @param pattern: text of pattern
    @type pattern: str

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_pattern = library.cfuncproto(
        library.load_so_libforms(), "fl_set_pattern",
        None, [xfdata.STRING],
        """void fl_set_pattern(const char * p1)""")
    library.check_if_initialized()
    spattern = library.convert_to_string(pattern)
    library.keep_elem_refs(pattern, spattern)
    _fl_set_pattern(spattern)


def fl_refresh_fselector():
    """
    fl_refresh_fselector()

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_refresh_fselector = library.cfuncproto(
        library.load_so_libforms(), "fl_refresh_fselector",
        None, [],
        """void fl_refresh_fselector()""")
    library.check_if_initialized()
    _fl_refresh_fselector()


def fl_add_fselector_appbutton(label, py_fn, vdata):
    """
    fl_add_fselector_appbutton(label, py_fn, vdata)

    @param label: text of label
    @type label: str
    @param py_fn: python function callback, no return
    @type py_fn: __ funcname (ptr_void) __
    @param vdata: user data to be passed to function
    @type vdata: pointer to void

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    #cfunc_none_voidp = cty.CFUNCTYPE(None, cty.c_void_p)
    _fl_add_fselector_appbutton = library.cfuncproto(
            library.load_so_libforms(), "fl_add_fselector_appbutton",
            None, [xfdata.STRING, xfdata.cfunc_none_voidp, cty.c_void_p],
            """void fl_add_fselector_appbutton(const char * p1,
               const char * p2, void * p3)""")
    library.check_if_initialized()
    slabel = library.convert_to_string(label)
    c_fn = xfdata.cfunc_none_voidp(py_fn)
    pvdata = cty.cast(vdata, cty.c_void_p)
    library.keep_cfunc_refs(c_fn, py_fn)
    library.keep_elem_refs(label, vdata, slabel, pvdata)
    _fl_add_fselector_appbutton(slabel, c_fn, pvdata)


def fl_remove_fselector_appbutton(label):
    """
    fl_remove_fselector_appbutton(label)

    @param label: text of label
    @type label: str

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_remove_fselector_appbutton = library.cfuncproto(
            library.load_so_libforms(), "fl_remove_fselector_appbutton",
            None, [xfdata.STRING],
            """void fl_remove_fselector_appbutton(const char * p1)
""")
    library.check_if_initialized()
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(label, slabel)
    _fl_remove_fselector_appbutton(slabel)


def fl_disable_fselector_cache(yes):
    """
    fl_disable_fselector_cache(yes)

    @param yes: ?
    @type yes: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_disable_fselector_cache = library.cfuncproto(
            library.load_so_libforms(), "fl_disable_fselector_cache",
            None, [cty.c_int],
            """void fl_disable_fselector_cache(int p1)
""")
    library.check_if_initialized()
    iyes = library.convert_to_int(yes)
    library.keep_elem_refs(yes, iyes)
    _fl_disable_fselector_cache(iyes)


def fl_invalidate_fselector_cache():
    """
    fl_invalidate_fselector_cache()

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_invalidate_fselector_cache = library.cfuncproto(
            library.load_so_libforms(), "fl_invalidate_fselector_cache",
            None, [],
            """void fl_invalidate_fselector_cache()
""")
    library.check_if_initialized()
    _fl_invalidate_fselector_cache()


def fl_get_fselector_form():
    """
    fl_get_fselector_form() -> pFlForm

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_fselector_form = library.cfuncproto(
            library.load_so_libforms(), "fl_get_fselector_form",
            cty.POINTER(xfdata.FL_FORM), [],
            """FL_FORM * fl_get_fselector_form()
""")
    library.check_if_initialized()
    retval = _fl_get_fselector_form()
    return retval


def fl_get_fselector_fdstruct():
    """
    fl_get_fselector_fdstruct() -> fselector_cls

    @returns: pointer to xfdata.FD_FSELECTOR

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_fselector_fdstruct = library.cfuncproto(
            library.load_so_libforms(), "fl_get_fselector_fdstruct",
            cty.POINTER(xfdata.FD_FSELECTOR), [],
            """FD_FSELECTOR * fl_get_fselector_fdstruct()
""")
    library.check_if_initialized()
    retval = _fl_get_fselector_fdstruct()
    return retval


def fl_hide_fselector():
    """
    fl_hide_fselector()

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_hide_fselector = library.cfuncproto(
            library.load_so_libforms(), "fl_hide_fselector",
            None, [],
            """void fl_hide_fselector()
""")
    library.check_if_initialized()
    _fl_hide_fselector()


def fl_set_fselector_filetype_marker(p1, p2, p3, p4, p5):
    """ fl_set_fselector_filetype_marker(p1, p2, p3, p4, p5)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_fselector_filetype_marker = library.cfuncproto(
            library.load_so_libforms(), "fl_set_fselector_filetype_marker",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int],
            """void fl_set_fselector_filetype_marker(int p1, int p2, int p3,
               int p4, int p5)
""")
    library.check_if_initialized()
    ip1 = library.convert_to_int(p1)
    ip2 = library.convert_to_int(p2)
    ip3 = library.convert_to_int(p3)
    ip4 = library.convert_to_int(p4)
    ip5 = library.convert_to_int(p5)
    library.keep_elem_refs(p1, p2, p3, p4, p5, ip1, ip2, ip3, ip4, ip5)
    _fl_set_fselector_filetype_marker(ip1, ip2, ip3, ip4, ip5)


def fl_set_fselector_title(title):
    """
    fl_set_fselector_title(title)

    @param title: title to be set
    @type title: string

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    flbasic.fl_set_form_title(fl_get_fselector_form(), title)


def fl_goodies_atclose(pFlForm, vdata):
    """
    fl_goodies_atclose(pFlForm, vdata) -> int

    @param pFlForm: form
    @type pFlForm: pointer to xfdata.FL_FORM

    @returns: num.

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_goodies_atclose = library.cfuncproto(
            library.load_so_libforms(), "fl_goodies_atclose",
            cty.c_int, [cty.POINTER(xfdata.FL_FORM), cty.c_void_p],
            """int fl_goodies_atclose(FL_FORM * p1, void * p2)
""")
    library.check_if_initialized()
    pvdata = cty.cast(vdata, cty.c_void_p)
    library.keep_elem_refs(pFlForm, vdata, pvdata)
    retval = _fl_goodies_atclose(pFlForm, pvdata)
    return retval


