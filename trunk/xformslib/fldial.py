#!/usr/bin/env python3
# -*- coding: utf-8 -*-

""" xforms-python's functions to manage dial flobjects.
"""

#    Copyright (C) 2009-2012  Luca Lazzaroni "LukenShiro"
#    e-mail: <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License,
#    or (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ########################################### #
# Interface to XForms shared-object libraries #
# ########################################### #


import ctypes as cty
from xformslib import library
from xformslib import xfdata


###################
# forms.h (dial.h)
###################

# Routines

# fl_create_dial function placeholder (internal)


def fl_add_dial(dialtype, xpos, ypos, width, height, label):
    """fl_add_dial(dialtype, xpos, ypos, width, height, label) -> ptr_flobject

    Adds a dial flobject to the form.

    Parameters
    ----------
        dialtype : int
            type of dial to be added. Values (from xfdata.py)
            - FL_NORMAL_DIAL (A dial with a knob indicating the position),
            - FL_LINE_DIAL (A dial with a line indicating the position),
            - FL_FILL_DIAL (The area between initial and current is filled)
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of dial

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            dial flobject added

    Examples
    --------
        >>> fl_add_dial(xfdata.FL_LINE_DIAL, 140, 120, 123, 521, "MyDial")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_dial = library.cfuncproto(
        library.load_so_libforms(), "fl_add_dial",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_dial(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_flinitialized()
    library.checkfatal_allowed_value_in_list(dialtype, xfdata.DIALTYPE_list)
    i_dialtype = library.convert_to_intc(dialtype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_bytestrc(label)
    library.keep_elem_refs(dialtype, xpos, ypos, width, height, label, \
            i_dialtype, i_xpos, i_ypos, i_width, i_height, s_label)
    retval = _fl_add_dial(i_dialtype, i_xpos, i_ypos, i_width, i_height, \
            s_label)
    return retval


def fl_set_dial_value(ptr_flobject, dialval):
    """fl_set_dial_value(ptr_flobject, dialval)

    Defines the value of a dial flobject. By default the value is 0.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            dial flobject
        dialval : float
            value of dial to be set

    Examples
    --------
        >>> fl_set_dial_value(dialobj, 155.0)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_dial_value = library.cfuncproto(
        library.load_so_libforms(), "fl_set_dial_value",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_dial_value(FL_OBJECT * ob, double val)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_dialval = library.convert_to_doublec(dialval)
    library.keep_elem_refs(ptr_flobject, dialval, f_dialval)
    _fl_set_dial_value(ptr_flobject, f_dialval)


def fl_get_dial_value(ptr_flobject):
    """fl_get_dial_value(ptr_flobject) -> dialval

    Finds out the current value of a dial flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            dial flobject

    Returns
    -------
        dialval : float
            current value of dial

    Examples
    --------
        >>> currval = fl_get_dial_value(dialobj)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_get_dial_value = library.cfuncproto(
        library.load_so_libforms(), "fl_get_dial_value",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
        """double fl_get_dial_value(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_dial_value(ptr_flobject)
    return retval


def fl_set_dial_bounds(ptr_flobject, minbound, maxbound):
    """fl_set_dial_bounds(ptr_flobject, minbound, maxbound)

    Defines the minimum and the maximum limit of values of a dial flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            dial flobject
        minbound : float
            minimum value limit of dial. By default it is 0.0.
        maxbound : float
            maximum value limit of dial. By default it is 1.0.

    Examples
    --------
        >>> fl_set_dial_bounds(dialobj, 0, 200)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_dial_bounds = library.cfuncproto(
        library.load_so_libforms(), "fl_set_dial_bounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_dial_bounds(FL_OBJECT * ob, double min,
           double max)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_minbound = library.convert_to_doublec(minbound)
    f_maxbound = library.convert_to_doublec(maxbound)
    library.keep_elem_refs(ptr_flobject, minbound, maxbound, f_minbound, \
            f_maxbound)
    _fl_set_dial_bounds(ptr_flobject, f_minbound, f_maxbound)


def fl_get_dial_bounds(ptr_flobject):
    """fl_get_dial_bounds(ptr_flobject) -> minbounds, maxbounds

    Finds out the minimum and maximum value limits of a dial flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            dial flobject

    Returns
    -------
        minbounds : float
            minimum value limit of dial
        maxbounds : float
            maximum value limit of dial

    Examples
    --------
        >>> minb, maxb = fl_get_dial_bounds(dialobj)

    API_diversion
    ----------
        API changed from XForms, upstream is
        fl_get_dial_bounds(ptr_flobject, minbound, maxbound)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_dial_bounds = library.cfuncproto(
        library.load_so_libforms(), "fl_get_dial_bounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_dial_bounds(FL_OBJECT * ob, double * min,
           double * max)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_minbound, ptr_minbound = library.make_doublec_and_pointer()
    f_maxbound, ptr_maxbound = library.make_doublec_and_pointer()
    library.keep_elem_refs(ptr_flobject, f_minbound, f_maxbound, \
            ptr_minbound, ptr_maxbound)
    _fl_get_dial_bounds(ptr_flobject, ptr_minbound, ptr_maxbound)
    return f_minbound.value, f_maxbound.value


def fl_set_dial_step(ptr_flobject, step):
    """fl_set_dial_step(ptr_flobject, step)

    Defines the dial value to be rounded to a specified step or a
    multiple of it.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            dial flobject
        step : float
            rounding value to be set. Use 0.0 to switch off rounding.

    Examples
    --------
        >>> fl_set_dial_step(dialobj, 2)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_dial_step = library.cfuncproto(
        library.load_so_libforms(), "fl_set_dial_step",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_dial_step(FL_OBJECT * ob, double value)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_step = library.convert_to_doublec(step)
    library.keep_elem_refs(ptr_flobject, step, f_step)
    _fl_set_dial_step(ptr_flobject, f_step)


# fl_set_dial_return() function placeholder (deprecated)


def fl_set_dial_angles(ptr_flobject, anglmin, anglmax):
    """fl_set_dial_angles(ptr_flobject, anglmin, anglmax)

    Limits the angular range a dial can take or choose an angle other
    than 0 to represent the minimum value. The angles are relative to the
    origin of the dial, which is by default at 6 o'clock and rotates
    clock-wise.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            dial flobject
        anglmin : float
            minimum value of angle. By default it is 0.
        anglmax : float
            maximum value of angle. By default it is 360.

    Examples
    --------
        >>> fl_set_dial_angles(dialobj, 45, 180)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_dial_angles = library.cfuncproto(
        library.load_so_libforms(), "fl_set_dial_angles",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_dial_angles(FL_OBJECT * ob, double amin,
           double amax)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_anglmin = library.convert_to_doublec(anglmin)
    f_anglmax = library.convert_to_doublec(anglmax)
    library.keep_elem_refs(ptr_flobject, anglmin, anglmax, f_anglmin, \
            f_anglmax)
    _fl_set_dial_angles(ptr_flobject, f_anglmin, f_anglmax)


def fl_set_dial_cross(ptr_flobject, yesno):
    """fl_set_dial_cross(ptr_flobject, yesno)

    Allows crossing over of dial flobject. By default, crossing from 359.9
    to 0 or from 0 to 359.9 is not allowed.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            dial flobject
        yesno : int
            flag to enable (1) or disable (0) crossover

    Examples
    --------
        >>> fl_set_dial_cross(dialobj, 1)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_dial_cross = library.cfuncproto(
        library.load_so_libforms(), "fl_set_dial_cross",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_dial_cross(FL_OBJECT * ob, int flag)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_yesno = library.convert_to_intc(yesno)
    library.keep_elem_refs(ptr_flobject, yesno, i_yesno)
    _fl_set_dial_cross(ptr_flobject, i_yesno)


fl_set_dial_crossover = fl_set_dial_cross


def fl_set_dial_direction(ptr_flobject, directn):
    """fl_set_dial_direction(ptr_flobject, directn)

    Changes what rotation modifies dial value. By default, clock-wise
    rotation increases the dial value.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            dial flobject
        directn : int
            direction of dial rotation. Values (from xfdata.py)
            - FL_DIAL_CCW (counter-clock-wise rotation)
            - FL_DIAL_CW (clock-wise rotation)

    Examples
    --------
        >>> fl_set_dial_direction(dialobj, xfdata.FL_DIAL_CCW)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_dial_direction = library.cfuncproto(
        library.load_so_libforms(), "fl_set_dial_direction",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_dial_direction(FL_OBJECT * ob, int dir)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.checkfatal_allowed_value_in_list(directn, xfdata.DIALROTN_list)
    i_directn = library.convert_to_intc(directn)
    library.keep_elem_refs(ptr_flobject, directn, i_directn)
    _fl_set_dial_direction(ptr_flobject, i_directn)

