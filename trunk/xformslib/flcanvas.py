#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
        <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.

    *****************************************************************


    @newfield example: Example, Example
"""


__docformat__ = "epytext en"    # to be used with epydoc doc


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata



#######################
# forms.h (canvas.h)
# Header for FL_CANVAS
#######################

# Interfaces

def fl_create_generic_canvas(canvasclass, canvastype, x, y, w, h, label):
    """
    fl_create_generic_canvas(canvasclass, canvastype, x, y, w, h, label) -> pFlObject

    Creates a generic canvas object.

    @param canvasclass: value of a new canvas class
    @type canvasclass: int
    @param canvastype: type of canvas to be created. Values (from xfdata
        module) i.e. FL_NORMAL_CANVAS, FL_SCROLLED_CANVAS (not enabled)
    @type canvastype: int
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int
    @param w: width in coord units
    @type w: int
    @param h: height in coord units
    @type h: int
    @param label: text label of canvas
    @type label: str

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_create_generic_canvas = library.cfuncproto(
            library.load_so_libforms(), "fl_create_generic_canvas",
            cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, cty.c_int, xfdata.FL_Coord,
            xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
            """FL_OBJECT * fl_create_generic_canvas(int canvas_class,
               int type, FL_Coord x, FL_Coord y, FL_Coord w, FL_Coord h,
               const char * label)
""")
    library.check_if_initialized()
    library.check_admitted_listvalues(canvastype, xfdata.CANVASTYPE_list)
    icanvasclass = library.convert_to_int(canvasclass)
    icanvastype = library.convert_to_int(canvastype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(canvasclass, canvastype, x, y, w, h, label, icanvasclass,
                   icanvastype, ix, iy, iw, ih, slabel)
    retval = _fl_create_generic_canvas(icanvasclass, icanvastype, ix, iy, iw, ih,
                                  slabel)
    return retval


def fl_add_canvas(canvastype, x, y, w, h, label):
    """
    fl_add_canvas(canvastype, x, y, w, h, label) -> pFlObject

    Adds a canvas object.

    @param canvastype: type of canvas to be added. Values (from xfdata
        modules) i.e. FL_NORMAL_CANVAS, FL_SCROLLED_CANVAS (not enabled)
    @type canvastype: int
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int
    @param w: width in coord units
    @type w: int
    @param h: height in coord units
    @type h: int
    @param label: text label of canvas
    @type label: str

    @returns: object added (<pointer to xfdata.FL_OBJECT>)

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_add_canvas = library.cfuncproto(
            library.load_so_libforms(), "fl_add_canvas",
            cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord,
            xfdata.FL_Coord, xfdata.STRING],
            """FL_OBJECT * fl_add_canvas(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(canvastype, xfdata.CANVASTYPE_list)
    icanvastype = library.convert_to_int(canvastype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(canvastype, x, y, w, h, label, icanvastype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_canvas(icanvastype, ix, iy, iw, ih, slabel)
    return retval


# fl_create_canvas function placeholder (internal)

# fl_set_canvas_decoration placeholder (backwards)


def fl_set_canvas_colormap(pFlObject, colormap):
    """
    fl_set_canvas_colormap(pFlObject, colormap)

    @param pFlObject: pointer to object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param colormap: colormap of canvas
    @type colormap: long_pos

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_canvas_colormap = library.cfuncproto(
            library.load_so_libforms(), "fl_set_canvas_colormap",
            None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.Colormap],
            """void fl_set_canvas_colormap(FL_OBJECT * ob, Colormap colormap)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ulcolormap = library.convert_to_ulong(colormap)
    library.keep_elem_refs(pFlObject, colormap, ulcolormap)
    _fl_set_canvas_colormap(pFlObject, ulcolormap)


def fl_set_canvas_visual(pFlObject, pVisual):
    """ fl_set_canvas_visual(pFlObject, pVisual)

        @param pFlObject: pointer to canvas object
        @type pFlObject: pointer to xfdata.FL_OBJECT
        @param pVisual: pointer to Visual class instance

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_canvas_visual = library.cfuncproto(
            library.load_so_libforms(), "fl_set_canvas_visual",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.Visual)],
            """void fl_set_canvas_visual(FL_OBJECT * obj, Visual * vi)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject, pVisual)
    _fl_set_canvas_visual(pFlObject, pVisual)


def fl_set_canvas_depth(pFlObject, depth):
    """
    fl_set_canvas_depth(pFlObject, depth)

    @param pFlObject: pointer to canvas object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param depth: depth value of canvas
    @type depth: int

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_canvas_depth = library.cfuncproto(
            library.load_so_libforms(), "fl_set_canvas_depth",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_canvas_depth(FL_OBJECT * obj, int depth)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    idepth = library.convert_to_int(depth)
    library.keep_elem_refs(pFlObject, depth, idepth)
    _fl_set_canvas_depth(pFlObject, idepth)


def fl_set_canvas_attributes(pFlObject, mask, pXSetWindowAttributes):
    """
    fl_set_canvas_attributes(pFlObject, mask, pXSetWindowAttributes)

    @param pFlObject: pointer to canvas object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param mask: mask num.
    @type mask: int_pos
    @param pXSetWindowAttributes: pointer to XSetWindowAttributes

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_canvas_attributes = library.cfuncproto(
            library.load_so_libforms(), "fl_set_canvas_attributes",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint,
            cty.POINTER(xfdata.XSetWindowAttributes)],
            """void fl_set_canvas_attributes(FL_OBJECT * ob,
               unsigned int mask, XSetWindowAttributes * xswa)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    uimask = library.convert_to_uint(mask)
    library.keep_elem_refs(pFlObject, mask, pXSetWindowAttributes, uimask)
    _fl_set_canvas_attributes(pFlObject, uimask, pXSetWindowAttributes)



def fl_add_canvas_handler(pFlObject, ev, py_HandleCanvas, udata):
    """
    fl_add_canvas_handler(pFlObject, ev, py_HandleCanvas, udata) -> canvas handler

    @param pFlObject: pointer to canvas object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param ev: event number
    @type ev: int
    @param py_HandleCanvas: python function to handle canvas
    @type py_HandleCanvas: __ funcname (pFlObject, win, num, num, pXEvent,
        ptr_void) -> num __

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    #FL_HANDLE_CANVAS = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_OBJECT),
    #                             xfdata.Window, cty.c_int, cty.c_int,
    #                             cty.POINTER(xfdata.XEvent), cty.c_void_p)
    _fl_add_canvas_handler = library.cfuncproto(
            library.load_so_libforms(), "fl_add_canvas_handler",
            xfdata.FL_HANDLE_CANVAS, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
            xfdata.FL_HANDLE_CANVAS, cty.c_void_p],
            """FL_HANDLE_CANVAS fl_add_canvas_handler(FL_OBJECT * ob, int ev,
               FL_HANDLE_CANVAS h, void * udata)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iev = library.convert_to_int(ev)
    c_HandleCanvas = xfdata.FL_HANDLE_CANVAS(py_HandleCanvas)
    pudata = cty.cast(udata, cty.c_void_p)
    library.keep_cfunc_refs(c_HandleCanvas, py_HandleCanvas)
    library.keep_elem_refs(pFlObject, ev, udata, iev, pudata)
    retval = _fl_add_canvas_handler(pFlObject, iev, c_HandleCanvas, pudata)
    return retval


def fl_get_canvas_id(pFlObject):
    """
    fl_get_canvas_id(pFlObject) -> win

    Returns the window ID of the canvas window.

    @param pFlObject: pointer to canvas object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_canvas_id = library.cfuncproto(
            library.load_so_libforms(), "fl_get_canvas_id",
            xfdata.Window, [cty.POINTER(xfdata.FL_OBJECT)],
            """Window fl_get_canvas_id(FL_OBJECT * ob)
""")
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_canvas_id(pFlObject)
    return retval


def fl_get_canvas_colormap(pFlObject):
    """
    fl_get_canvas_colormap(pFlObject) -> colormap

    Returns the colormap of a canas object

    @param pFlObject: pointer to canvas object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_canvas_colormap = library.cfuncproto(
            library.load_so_libforms(), "fl_get_canvas_colormap",
            xfdata.Colormap, [cty.POINTER(xfdata.FL_OBJECT)],
            """Colormap fl_get_canvas_colormap(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_canvas_colormap(pFlObject)
    return retval


def fl_get_canvas_depth(pFlObject):
    """
    fl_get_canvas_depth(pFlObject) -> int

    Returns the depth of a canvas object.

    @param pFlObject: pointer to canvas object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: depth num.

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_canvas_depth = library.cfuncproto(
            library.load_so_libforms(), "fl_get_canvas_depth",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_canvas_depth(FL_OBJECT * obj)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_canvas_depth(pFlObject)
    return retval


def fl_remove_canvas_handler(pFlObject, ev, py_HandleCanvas):
    """
    fl_remove_canvas_handler(pFlObject, ev, py_HandleCanvas)

    Remove a particular handler for event ev. If ev is invalid, removes all
    handlers and their corresponding event mask.

    @param pFlObject: pointer to canvas object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param ev: event number
    @type ev: int
    @param py_HandleCanvas: python function to handle canvas
    @type py_HandleCanvas: __ funcname (pFlObject, win, num, num, pXEvent,
        ptr_void) -> num

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    #FL_HANDLE_CANVAS = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_OBJECT),
    #                             xfdata.Window, cty.c_int, cty.c_int,
    #                             cty.POINTER(xfdata.XEvent), cty.c_void_p)
    _fl_remove_canvas_handler = library.cfuncproto(
            library.load_so_libforms(), "fl_remove_canvas_handler",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, xfdata.FL_HANDLE_CANVAS],
            """void fl_remove_canvas_handler(FL_OBJECT * ob, int ev,
               FL_HANDLE_CANVAS h)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iev = library.convert_to_int(ev)
    c_HandleCanvas = xfdata.FL_HANDLE_CANVAS(py_HandleCanvas)
    library.keep_cfunc_refs(c_HandleCanvas, py_HandleCanvas)
    library.keep_elem_refs(pFlObject, ev, iev)
    _fl_remove_canvas_handler(pFlObject, iev, c_HandleCanvas)


def fl_hide_canvas(pFlObject):
    """
    fl_hide_canvas(pFlObject)

    Hides a canvas object.

    @param pFlObject: pointer to canvas object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_hide_canvas = library.cfuncproto(
            library.load_so_libforms(), "fl_hide_canvas",
            None, [cty.POINTER(xfdata.FL_OBJECT)],
            """void fl_hide_canvas(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_hide_canvas(pFlObject)


def fl_share_canvas_colormap(pFlObject, colormap):
    """
    fl_share_canvas_colormap(pFlObject, colormap)

    @param pFlObject: pointer to object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_share_canvas_colormap = library.cfuncproto(
            library.load_so_libforms(), "fl_share_canvas_colormap",
            None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.Colormap],
            """void fl_share_canvas_colormap(FL_OBJECT * ob, Colormap colormap)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ulcolormap = library.convert_to_ulong(colormap)
    library.keep_elem_refs(pFlObject, colormap, ulcolormap)
    _fl_share_canvas_colormap(pFlObject, ulcolormap)


def fl_clear_canvas(pFlObject):
    """
    fl_clear_canvas(pFlObject)

    Clears the canvas to the background color. If no background is defined
    uses black.

    @param pFlObject: pointer to canvas object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_clear_canvas = library.cfuncproto(
            library.load_so_libforms(), "fl_clear_canvas",
            None, [cty.POINTER(xfdata.FL_OBJECT)],
            """void fl_clear_canvas(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_clear_canvas(pFlObject)


def fl_modify_canvas_prop(pFlObject, py_initModifyCanvasProp,
     py_activateModifyCanvasProp, py_cleanupModifyCanvasProp):
    """
    fl_modify_canvas_prop(pFlObject, py_initModifyCanvasProp,
     py_activateModifyCanvasProp, py_cleanupModifyCanvasProp)

    @param pFlObject: pointer to canvas object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param py_initModifyCanvasProp: python function callback, returning value
    @param py_initModifyCanvasProp: __ funcname (pFlObject) -> num. __
    @param py_activateModifyCanvasProp: python function callback, returning
        value
    @param py_activateModifyCanvasProp: __ funcname (pFlObject) -> num. __
    @param py_cleanupModifyCanvasProp: python function callback, returning
        value
    @param py_cleanupModifyCanvasProp: __ funcname (pFlObject) -> num. __

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    #FL_MODIFY_CANVAS_PROP = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_OBJECT))
    _fl_modify_canvas_prop = library.cfuncproto(
            library.load_so_libforms(), "fl_modify_canvas_prop",
            None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_MODIFY_CANVAS_PROP,
            xfdata.FL_MODIFY_CANVAS_PROP, xfdata.FL_MODIFY_CANVAS_PROP],
            """void fl_modify_canvas_prop(FL_OBJECT * obj,
               FL_MODIFY_CANVAS_PROP init, FL_MODIFY_CANVAS_PROP activate,
               FL_MODIFY_CANVAS_PROP cleanup)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    c_initModifyCanvasProp = xfdata.FL_MODIFY_CANVAS_PROP(py_initModifyCanvasProp)
    c_activateModifyCanvasProp = xfdata.FL_MODIFY_CANVAS_PROP( \
                py_activateModifyCanvasProp)
    c_cleanupModifyCanvasProp = xfdata.FL_MODIFY_CANVAS_PROP( \
                py_cleanupModifyCanvasProp)
    library.keep_cfunc_refs(c_initModifyCanvasProp, py_initModifyCanvasProp, \
                c_activateModifyCanvasProp, py_activateModifyCanvasProp, \
                c_cleanupModifyCanvasProp, py_cleanupModifyCanvasProp)
    library.keep_elem_refs(pFlObject)
    _fl_modify_canvas_prop(pFlObject, c_initModifyCanvasProp,
                    c_activateModifyCanvasProp, c_cleanupModifyCanvasProp)


def fl_canvas_yield_to_shortcut(pFlObject, yes):
    """
    fl_canvas_yield_to_shortcut(pFlObject, yes)

    @param pFlObject: pointer to object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param yes: ?
    @type yes: int

    @example:

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_canvas_yield_to_shortcut = library.cfuncproto(
            library.load_so_libforms(), "fl_canvas_yield_to_shortcut",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_canvas_yield_to_shortcut(FL_OBJECT * ob, int yes)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iyes = library.convert_to_int(yes)
    library.keep_elem_refs(pFlObject, yes, iyes)
    _fl_canvas_yield_to_shortcut(pFlObject, iyes)


