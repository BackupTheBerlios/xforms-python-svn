#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
        <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.

    *****************************************************************


    @newfield example: Example, Example
"""


__docformat__ = "epytext en"    # to be used with epydoc doc


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata



#######################
# forms.h (slider.h)
# Object Class: Slider
#######################

# Routines

# fl_create_slider function placeholder (internal)


def fl_add_slider(slidertype, x, y, w, h, label):
    """
        fl_add_slider(slidertype, x, y, w, h, label) -> pFlObject

        Adds a slider to a form. No value is displayed.

        @param slidertype: type of the slider to be added
        @type slidertype: [num./int] from xfdata module FL_VERT_SLIDER,
                          FL_HOR_SLIDER, FL_VERT_FILL_SLIDER,
                          FL_HOR_FILL_SLIDER, FL_VERT_NICE_SLIDER,
                          FL_HOR_NICE_SLIDER, FL_VERT_BROWSER_SLIDER,
                          FL_HOR_BROWSER_SLIDER, FL_VERT_BROWSER_SLIDER2,
                          FL_HOR_BROWSER_SLIDER2, FL_VERT_THIN_SLIDER,
                          FL_HOR_THIN_SLIDER, FL_VERT_THIN_SLIDER,
                          FL_HOR_THIN_SLIDER, FL_VERT_NICE_SLIDER2,
                          FL_HOR_NICE_SLIDER2, FL_VERT_BASIC_SLIDER,
                          FL_HOR_BASIC_SLIDER
        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: label of the slider (placed below it by default)

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_add_slider = library.cfuncproto(
        library.load_so_libforms(), "fl_add_slider",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_slider(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(slidertype, xfdata.SLIDERTYPE_list)
    islidertype = library.convert_to_int(slidertype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(slidertype, x, y, w, h, label, islidertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_slider(islidertype, ix, iy, iw, ih, slabel)
    return retval


# fl_create_valslider function placeholder (internal)


def fl_add_valslider(slidertype, x, y, w, h, label):
    """
        fl_add_valslider(slidertype, x, y, w, h, label) -> pFlObject

        Adds a slider to a form. Its value is displayed above or to the
        left of the slider.

        @param slidertype: type of the slider
        @type slidertype: [num./int] from xfdata module FL_VERT_SLIDER,
                          FL_HOR_SLIDER, FL_VERT_FILL_SLIDER,
                          FL_HOR_FILL_SLIDER, FL_VERT_NICE_SLIDER,
                          FL_HOR_NICE_SLIDER, FL_VERT_BROWSER_SLIDER,
                          FL_HOR_BROWSER_SLIDER, FL_VERT_BROWSER_SLIDER2,
                          FL_HOR_BROWSER_SLIDER2, FL_VERT_THIN_SLIDER,
                          FL_HOR_THIN_SLIDER, FL_VERT_THIN_SLIDER,
                          FL_HOR_THIN_SLIDER, FL_VERT_NICE_SLIDER2,
                          FL_HOR_NICE_SLIDER2, FL_VERT_BASIC_SLIDER,
                          FL_HOR_BASIC_SLIDER
        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of slider

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_add_valslider = library.cfuncproto(
        library.load_so_libforms(), "fl_add_valslider",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_valslider(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(slidertype, xfdata.SLIDERTYPE_list)
    islidertype = library.convert_to_int(slidertype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(slidertype, x, y, w, h, label, islidertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_valslider(islidertype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_slider_value(pFlObject, val):
    """
        fl_set_slider_value(pFlObject, val)

        Changes the value of a slider.

        @param pFlObject: pointer to object
        @param val: new value of slider

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_set_slider_value = library.cfuncproto(
        library.load_so_libforms(), "fl_set_slider_value",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_slider_value(FL_OBJECT * ob, double val)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fval = library.convert_to_double(val)
    library.keep_elem_refs(pFlObject, val, fval)
    _fl_set_slider_value(pFlObject, fval)


def fl_get_slider_value(pFlObject):
    """
        fl_get_slider_value(pFlObject) -> value[float]

        Returns value of a slider.

        @param pFlObject: pointer to object

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_get_slider_value = library.cfuncproto(
        library.load_so_libforms(), "fl_get_slider_value",
        cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
        """double fl_get_slider_value(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_slider_value(pFlObject)
    return retval


def fl_set_slider_bounds(pFlObject, minbound, maxbound):
    """
        fl_set_slider_bounds(pFlObject, minbound, maxbound)

        Sets bounds/limits of a slider.

        @param pFlObject: pointer to object
        @param minbound: minimum bound of slider
        @param maxbound: maximum bound of slider

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_set_slider_bounds = library.cfuncproto(
        library.load_so_libforms(), "fl_set_slider_bounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_slider_bounds(FL_OBJECT * ob, double min,
           double max)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fminbound = library.convert_to_double(minbound)
    fmaxbound = library.convert_to_double(maxbound)
    library.keep_elem_refs(pFlObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_slider_bounds(pFlObject, fminbound, fmaxbound)


def fl_get_slider_bounds(pFlObject):
    """
        fl_get_slider_bounds(pFlObject) -> minbound[float], maxbound[float]

        Returns bounds/limits of a slider.

        @param pFlObject: pointer to object

        @attention: API change from XForms - upstream was
           fl_get_slider_bounds(pFlObject, minbound, maxbound)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_slider_bounds = library.cfuncproto(
        library.load_so_libforms(), "fl_get_slider_bounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)],
        """void fl_get_slider_bounds(FL_OBJECT * ob, double * min,
           double * max)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    minbound, pminbound = library.make_double_and_pointer()
    maxbound, pmaxbound = library.make_double_and_pointer()
    library.keep_elem_refs(pFlObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_slider_bounds(pFlObject, pminbound, pmaxbound)
    return minbound.value, maxbound.value


# fl_set_slider_return function placeholder (deprecated)


def fl_set_slider_step(pFlObject, value):
    """
        fl_set_slider_step(pFlObject, value)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_slider_step = library.cfuncproto(
        library.load_so_libforms(), "fl_set_slider_step",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_slider_step(FL_OBJECT * ob, double value)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fvalue = library.convert_to_double(value)
    library.keep_elem_refs(pFlObject, value, fvalue)
    _fl_set_slider_step(pFlObject, fvalue)


def fl_set_slider_increment(pFlObject, leftbtnval, midlbtnval):
    """
        fl_set_slider_increment(pFlObject, leftbtnval, midlbtnval)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_slider_increment = library.cfuncproto(
        library.load_so_libforms(), "fl_set_slider_increment",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_slider_increment(FL_OBJECT * ob, double l,
           double r)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fleftbtnval = library.convert_to_double(leftbtnval)
    fmidlbtnval = library.convert_to_double(midlbtnval)
    library.keep_elem_refs(pFlObject, leftbtnval, midlbtnval, fleftbtnval, fmidlbtnval)
    _fl_set_slider_increment(pFlObject, fleftbtnval, fmidlbtnval)


def fl_get_slider_increment(pFlObject):
    """ fl_get_slider_increment(pFlObject) -> leftbtnval, midlbtnval

        @attention: API change from XForms - upstream was
                    fl_get_slider_increment(pFlObject, leftbtnval, midlbtnval)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_get_slider_increment = library.cfuncproto(
        library.load_so_libforms(), "fl_get_slider_increment",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double)], \
        """void fl_get_slider_increment(FL_OBJECT * ob, double * l,
           double * r)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    leftbtnval, pleftbtnval = library.make_double_and_pointer()
    midlbtnval, pmidlbtnval = library.make_double_and_pointer()
    library.keep_elem_refs(pFlObject, leftbtnval, midlbtnval, pleftbtnval, pmidlbtnval)
    _fl_get_slider_increment(pFlObject, pleftbtnval, pmidlbtnval)
    return leftbtnval.value, midlbtnval.value


def fl_set_slider_size(pFlObject, size):
    """
        fl_set_slider_size(pFlObject, size)

        Sets the size of a slider.

        @param pFlObject: pointer to object
        @param size: value of size of the slider

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_set_slider_size = library.cfuncproto(
        library.load_so_libforms(), "fl_set_slider_size",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
        """void fl_set_slider_size(FL_OBJECT * ob, double size)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fsize = library.convert_to_double(size)
    library.keep_elem_refs(pFlObject, size, fsize)
    _fl_set_slider_size(pFlObject, fsize)


def fl_set_slider_precision(pFlObject, precnum):
    """
        fl_set_slider_precision(pFlObject, precnum)

        Sets precision with which value a valslider is shown.

        @param pFlObject: pointer to object
        @param precnum: precision of shown value

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_slider_precision = library.cfuncproto(
        library.load_so_libforms(), "fl_set_slider_precision",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_slider_precision(FL_OBJECT * ob, int prec)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iprecnum = library.convert_to_int(precnum)
    library.keep_elem_refs(pFlObject, precnum, iprecnum)
    _fl_set_slider_precision(pFlObject, iprecnum)


def fl_set_slider_filter(pFlObject, py_ValFilter):
    """
        fl_set_slider_filter(pFlObject, py_ValFilter)

        Overrides the default (slider value shown in floating point format)
        by registering a filter function.

        @param pFlObject: pointer to object
        @param py_ValFilter: python function, fn(pFlObject, valfloat,
           intprecis) -> string

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_set_slider_filter = library.cfuncproto(
        library.load_so_libforms(), "fl_set_slider_filter",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_VAL_FILTER],
        """void fl_set_slider_filter(FL_OBJECT * ob, FL_VAL_FILTER filter)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    c_ValFilter = xfdata.FL_VAL_FILTER(py_ValFilter)
    library.keep_cfunc_refs(c_ValFilter, py_ValFilter)
    library.keep_elem_refs(pFlObject)
    _fl_set_slider_filter(pFlObject, c_ValFilter)


