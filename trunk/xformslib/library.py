#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python
    Python wrapper for XForms (X11) GUI C toolkit library using ctypes

    Copyright (C) 2009  Luca Lazzaroni "LukenShiro"  <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #

import ctypes as cty
import ctypes.util as ctyutil
import sys
import warnings
from xfdata import *       # data types and constants from XForms


# xforms-python version
__mainversion__ = "0.3.1"               # real version
__vers_against_xforms__ = "1.0.93pre1"   # xforms version to be built against
__version__ = __mainversion__+"_"+__vers_against_xforms__


header_filename = "/usr/include/forms.h"


def get_xforms_version():
    """ Return version string of installed XForms library/header
    """

    complete_xf_version = ""
    try:
        formsh = open(header_filename, "r")
    except IOError:
        raise XFormsLoadError("XForms library toolkit header is not " \
                              " installed properly")
    else:
        try:
            # a reasonable size to catch version values
            fconten = formsh.read(2500)
        except IOError:
            raise XFormsLoadError("XForms library toolkit header is not " \
                                  "installed properly")
        else:
            formsh.close()
            listconten = fconten.split("\n")
            for singline in listconten:
                idx_ver = singline.find("FL_VERSION")
                if idx_ver != -1:
                    strg_ver1 = singline[idx_ver:len(singline)]
                    strg_ver = strg_ver1.replace("FL_VERSION", "").strip(" ")
                    break
            for singline in listconten:
                idx_rev = singline.find("FL_REVISION")
                if idx_rev != -1:
                    strg_rev1 = singline[idx_rev:len(singline)]
                    strg_rev = strg_rev1.replace("FL_REVISION", "").strip(" ")
                    break
            for singline in listconten:
                idx_fix = singline.find("FL_FIXLEVEL")
                if idx_fix != -1:
                    strg_fix1 = singline[idx_fix:len(singline)]
                    strg_fix = strg_fix1.replace("FL_FIXLEVEL", \
                                                 "").strip(" ").strip('"')
                    break
            complete_xf_version = strg_ver+"."+strg_rev+"."+strg_fix

    return complete_xf_version


def verify_version_compatibility():
    """ verify compatibility between xforms-python version and XForms version
    """

    xforms_vers = get_xforms_version()
    if __vers_against_xforms__ != xforms_vers:      # no match
        warningmsg = "xforms-python is implemented against XForms version " \
                    " %s and does not match XForms installed version " \
                    "(%s). Some compatibility problems may arise if XForms" \
                    " public interface has been modified." % \
                    (__vers_against_xforms__, xforms_vers)
        warnings.warn(warningmsg, UserWarning)


class XFormsLoadError(OSError):
    """ Error in loading shared object library """

    pass


class XFormsTypeError(TypeError):
    """ Generic error for type mismatch """

    pass


def warn_deprecated_function(altfunc=""):
    """ Warns the user when a function is deprecated and should not be used
        anymore. If a param is provided it may advide the user about an
        alternative function.
    """

    funcname = sys._getframe(1).f_code.co_name
    if altfunc:
        newaltfunc = "Use %s instead." % altfunc
    else:
        newaltfunc = ""
    warningmsg = "Function %s is deprecated and might be removed in future" \
                  " releases. %s" % (funcname, newaltfunc)
    warnings.warn(warningmsg, DeprecationWarning, 3)


def func_do_nothing_placeholder(cfunction):
    """ Print a warning if called function doesn't exist
    """

    warningmsg = "C function %s does NOT exist, hence its call is ignored," \
                 " hence it is not wrappable and callable in python, as " \
                 "well. Maybe removed or disabled?" % cfunction
    warnings.warn(warningmsg, UserWarning)
    return None


# placeholders to keep reference to c functions
# keeps global to avoid garbage collector's' unpredictable behaviour
_cfunc_refs = []
# just in case, maintains elements used as parameters, too
_elem_refs = []


def keep_cfunc_refs(*cfunclist):
    """ Adds a reference for _cfunc_refs list of values
    """

    for singvalue in cfunclist:
        _cfunc_refs.append(singvalue)


def keep_elem_refs(*elemlist):
    """ Adds a reference for _elem_refs list of values
    """

    for singvalue in elemlist:
        _elem_refs.append(singvalue)


loaded_xlibraries = {'libforms' : None, 'libflimage' : None, \
                    'libformsgl' : None, 'libx11' : None}


def load_so_libforms():
    """ Load libforms.so else raise an error -> library instance
    """

    if loaded_xlibraries['libforms'] is None:
        libfbase = ctyutil.find_library("forms")
        if not libfbase:    # not installed
            raise XFormsLoadError("XForms library toolkit is not installed" \
                                  " properly")
        else:
            loaded_xlibraries['libforms'] = cty.cdll.LoadLibrary(libfbase)
    return loaded_xlibraries['libforms']


def load_so_libflimage():
    """ Load libflimage.so else raise an error -> library instance
    """

    if loaded_xlibraries['libflimage'] is None:
        libfimg = ctyutil.find_library("flimage")
        if not libfimg:    # not installed
            raise XFormsLoadError("XForms library toolkit is not installed" \
                                  " properly")
        else:
            loaded_xlibraries['libflimage'] = cty.cdll.LoadLibrary(libfimg)
    return loaded_xlibraries['libflimage']


def load_so_libformsgl():
    """ Load libformsGL.so else raise an error -> library instance
    """

    if loaded_xlibraries['libformsgl'] is None:
        libfgl = ctyutil.find_library("formsGL")
        if not libfgl:    # not installed
            raise XFormsLoadError("XForms library toolkit is not installed" \
                                  " properly, with OpenGL support")
        else:
            loaded_xlibraries['libformsgl'] = cty.cdll.LoadLibrary(libfgl)
    return loaded_xlibraries['libformsgl']


def load_so_libx11():
    """ Load libX11.so.6 else raise an error -> library instance
    """

    if loaded_xlibraries['libx11'] is None:
        libx11 = ctyutil.find_library("X11")
        if not libx11:    # not installed
            raise XFormsLoadError("X11 libraries are not installed" \
                                  " properly")
        else:
            loaded_xlibraries['libx11'] = cty.cdll.LoadLibrary(libx11)
    return loaded_xlibraries['libx11']


def cfuncproto(library, cfuncname, retval, arglist, doc=""):
    """ Prototype for C function to be wrapped in python
    """

    loadedfunc = None
    try:
        loadedfunc = getattr(library, cfuncname)
    except AttributeError:
        # function doesn't exist
        loadedfunc = func_do_nothing_placeholder(cfuncname)
    else:
        loadedfunc.restype = retval
        loadedfunc.argtypes = arglist
        loadedfunc.__doc__ = doc

    return loadedfunc


# functions to convert a parameter into a python type then into the
# equivalent ctypes type

def convert_to_string(paramname):
    """ Converts paramname to python str and to ctypes c_char_p """

    try:
        retv0 = str(paramname)
    except ValueError:
        raise XFormsTypeError("Parameter cannot be converted into" \
                              "'str'/'c_char_p'")
    retv = cty.c_char_p(retv0)
    #print "string", paramname, retv0, retv
    return retv


def convert_to_int(paramname):
    """ Converts paramname to python int and to ctypes c_int """

    if not isinstance(paramname, cty.c_int):
        try:
            retv0 = int(paramname)
        except ValueError:
            raise XFormsTypeError("Parameter cannot be converted into" \
                                  " 'int'/'c_int'")
        retv = cty.c_int(retv0)
        #print "int", paramname, retv0, retv
        return retv
    else:
        return paramname

convert_to_FL_Coord = convert_to_int


def convert_to_uint(paramname):
    """ Converts paramname to python int and to ctypes c_uint """

    if not isinstance(paramname, cty.c_int):
        try:
            retv0 = int(paramname)
        except ValueError:
            raise XFormsTypeError("Parameter cannot be converted into" \
                                  " 'int'/'c_uint'")
        else:
            retv = cty.c_uint(retv0)
            #print "uint", paramname, retv0, retv
            return retv
    else:
        return paramname


def convert_to_long(paramname):
    """ Converts paramname to python long and to ctypes c_long """

    if not isinstance(paramname, cty.c_long):
        try:
            retv0 = long(paramname)
        except ValueError:
            raise XFormsTypeError("Parameter cannot be converted into" \
                                  " 'long'/'c_long'")
        else:
            retv = cty.c_long(retv0)
            #print "long", paramname, retv0, retv
            return retv
    else:
        return paramname


def convert_to_ulong(paramname):
    """ Converts paramname to python long and to ctypes c_ulong """

    if not isinstance(paramname, cty.c_ulong):
        try:
            retv0 = long(paramname)
        except ValueError:
            raise XFormsTypeError("Parameter cannot be converted into" \
                              " 'long'/'c_ulong'")
        else:
            retv = cty.c_ulong(retv0)
            #print "ulong", paramname, retv0, retv
            return retv
    else:
        return paramname


convert_to_FL_COLOR = convert_to_ulong
convert_to_Window = convert_to_ulong
convert_to_Pixmap = convert_to_ulong


def convert_to_double(paramname):
    """ Converts paramname to python float and to ctypes c_double """

    if not isinstance(paramname, cty.c_double):
        try:
            retv0 = float(paramname)
        except ValueError:
            raise XFormsTypeError("Parameter cannot be converted into" \
                                  " 'float'/'c_double'")
        else:
            retv = cty.c_double(retv0)
            #print "double", paramname, retv0, retv
            return retv
    else:
        return paramname


def convert_to_float(paramname):
    """ Converts paramname to python float and to ctypes c_float """

    if not isinstance(paramname, cty.c_float):
        try:
            retv0 = float(paramname)
        except ValueError:
            raise XFormsTypeError("Parameter cannot be converted into" \
                                  " 'float'/'c_float'")
        else:
            retv = cty.c_float(retv0)
            #print "float", paramname, retv0, retv
            return retv
    else:
        return paramname


def convert_to_ubyte(paramname):
    """ Converts paramname to ctypes c_ubyte """

    retv = cty.c_ubyte(paramname)
    return retv


def make_int_and_pointer():
    """ Makes a ctypes c_int and its pointer, and returns both """

    baseval = cty.c_int()
    ptrbaseval = cty.byref(baseval)
    return baseval, ptrbaseval

make_FL_Coord_and_pointer = make_int_and_pointer


def make_uint_and_pointer():
    """ Makes a ctypes c_uint and its pointer, and returns both """

    baseval = cty.c_uint()
    ptrbaseval = cty.byref(baseval)
    return baseval, ptrbaseval


def make_long_and_pointer():
    """ Makes a ctypes c_long and its pointer, and returns both """

    baseval = cty.c_long()
    ptrbaseval = cty.byref(baseval)
    return baseval, ptrbaseval


def make_ulong_and_pointer():
    """ Makes a ctypes c_ulong and its pointer, and returns both """

    baseval = cty.c_ulong()
    ptrbaseval = cty.byref(baseval)
    return baseval, ptrbaseval

make_Pixmap_and_pointer = make_uint_and_pointer


def make_float_and_pointer():
    """ Makes a ctypes c_float and its pointer, and returns both """

    baseval = cty.c_float()
    ptrbaseval = cty.byref(baseval)
    return baseval, ptrbaseval


def make_double_and_pointer():
    """ Makes a ctypes c_double and its pointer, and returns both """

    baseval = cty.c_double()
    ptrbaseval = cty.byref(baseval)
    return baseval, ptrbaseval


def check_admitted_listvalues(paramname, *valueslist):
    """ Check if paramname value is valid in accordance to a list of
        admissible values.
    """

    if isinstance(valueslist, list):
        if paramname not in valueslist:
            raise XFormsTypeError("Parameter must be a values in list " \
                                  "%s." % valueslist)


# exported variables
FL_EVENT = (cty.POINTER(FL_OBJECT)).in_dll(load_so_libforms(), 'FL_EVENT')
fl_current_form = (cty.POINTER(FL_FORM)).in_dll(load_so_libforms(), \
                  'fl_current_form')
fl_display = (cty.POINTER(Display)).in_dll(load_so_libforms(), 'fl_display')
fl_screen = (cty.c_int).in_dll(load_so_libforms(), 'fl_screen')
# root window
fl_root = (Window).in_dll(load_so_libforms(), 'fl_root')
# virtual root window
fl_vroot = (Window).in_dll(load_so_libforms(), 'fl_vroot')
# screen dimension in pixels
fl_scrh = (cty.c_int).in_dll(load_so_libforms(), 'fl_scrh')
fl_scrw = (cty.c_int).in_dll(load_so_libforms(), 'fl_scrw')
fl_vmode = (cty.c_int).in_dll(load_so_libforms(), 'fl_vmode')
fl_state = (cty.POINTER(FL_State)).in_dll(load_so_libforms(), 'fl_state')
fl_ul_magic_char = (STRING).in_dll(load_so_libforms(), 'fl_state')


########################################
# forms.h (Basic.h)
#  Basic definitions and limits.
#  Window system independent prototypes
#  Modify with care
########################################


def FL_IS_UPBOX(t):
    if (t == FL_UP_BOX) or \
        (t == FL_OVAL3D_UPBOX) or \
        (t == FL_ROUNDED3D_UPBOX):
        return True
    else:
        return False


def FL_IS_DOWNBOX(t):
    if (t == FL_DOWN_BOX) or \
        (t == FL_OVAL3D_DOWNBOX) or \
        (t == FL_ROUNDED3D_DOWNBOX):
        return True
    else:
        return False


def FL_TO_DOWNBOX(t):
    if t == FL_UP_BOX:
        t1 = FL_DOWN_BOX
    elif t == FL_ROUNDED3D_UPBOX:
        t1 = FL_ROUNDED3D_DOWNBOX
    elif t == FL_OVAL3D_UPBOX:
        t1 = FL_OVAL3D_DOWNBOX
    else:
        t1 = t
    return t1


def special_style(a):
    if (a >= FL_SHADOW_STYLE) and \
     (a <= (FL_EMBOSSED_STYLE + FL_MAXFONTS)):
        return True
    else:
        return False


# Macro for getting at the object handlers return value

def fl_object_returned(pObject):
    return pObject[0].returned


# IO other than XEvent Q

FL_IO_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)

def fl_add_io_callback(fd, mask, py_IoCallback, data):
    """
        fl_add_io_callback(fd, mask, py_IoCallback, data)

        Registers an input callback function when input is available from fd.

        @param fd : a valid file descriptor in a *nix system
        @param mask : under what circumstance the input callback should be
           invoked (i.e. FL_READ, FL_WRITE or FL_EXCEPT)
        @param py_IoCallback : python function to be invoked under mask
           condition, fn(num, ptr_void)
        @param data : argument to be passed to function
    """

    _fl_add_io_callback = cfuncproto(
            load_so_libforms(), "fl_add_io_callback", \
            None, [cty.c_int, cty.c_uint, FL_IO_CALLBACK, cty.c_void_p], \
            """void fl_add_io_callback(int fd, unsigned int mask,
               FL_IO_CALLBACK callback, void * data)
            """)
    ifd = convert_to_int(fd)
    uimask = convert_to_uint(mask)
    c_IoCallback = FL_IO_CALLBACK(py_IoCallback)
    keep_cfunc_refs(py_callback, c_IoCallback)
    keep_elem_refs(fd, ifd, mask, uimask, data)
    _fl_add_io_callback(ifd, uimask, c_IoCallback, data)


def fl_remove_io_callback(fd, mask, py_IoCallback):
    """
        fl_remove_io_callback(fd, mask, py_IoCallback)

        Removes the registered callback function when input is available
        from fd.

        @param fd : a valid file descriptor in a unix system
        @param mask : under what circumstance the input callback should be
           removed (i.e. xfc.FL_READ, xfc.FL_WRITE, xfc.FL_EXCEPT)
        @param py_IoCallback : python function to be removed under mask
           condition, fn(num, ptr_void)
    """

    _fl_remove_io_callback = cfuncproto(
            load_so_libforms(), "fl_remove_io_callback", \
            None, [cty.c_int, cty.c_uint, FL_IO_CALLBACK], \
            """void fl_remove_io_callback(int fd, unsigned int mask,
               FL_IO_CALLBACK cb)
            """)
    check_admitted_listvalues(mask, ASYNCIO_list)
    ifd = convert_to_int(fd)
    uimask = convert_to_uint(mask)
    c_IoCallback = FL_IO_CALLBACK(py_IoCallback)
    keep_cfunc_refs(c_IoCallback, py_IoCallback)
    keep_elem_refs(fd, ifd, mask, uimask)
    _fl_remove_io_callback(ifd, uimask, c_IoCallback)


# signals

FL_SIGNAL_HANDLER = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)

def fl_add_signal_callback(sglnum, py_SignalHandler, data):
    """
        fl_add_signal_callback(sglnum, py_SignalHandler, data)

        Handles the receipt of a signal by registering a callback function
        that gets called when a signal is caught (only 1 function per signal)

        @param sglnum : signal number (e.g. SIGALRM, SIGINT, etc.)
        @param py_SignalHandler : python function to be invoked after
           catching the signal, fn(num, ptr_void)
        @param data : argument to be passed to function
    """

    _fl_add_signal_callback = cfuncproto(
            load_so_libforms(), "fl_add_signal_callback", \
            None, [cty.c_int, FL_SIGNAL_HANDLER, cty.c_void_p], \
            """void fl_add_signal_callback(int s, FL_SIGNAL_HANDLER cb,
               void * data)
            """)
    isglnum = convert_to_int(sglnum)
    c_SignalHandler = FL_SIGNAL_HANDLER(py_SignalHandler)
    keep_cfunc_refs(c_SignalHandler, py_SignalHandler)
    keep_elem_refs(sglnum, isglnum, data)
    _fl_add_signal_callback(isglnum, c_SignalHandler, data)


def fl_remove_signal_callback(sglnum):
    """
        fl_remove_signal_callback(sglnum)

        Removes a previously registered callback function related to a signal.

        @param sglnum : signal number (e.g. SIGALRM, SIGINT, etc.)
    """

    _fl_remove_signal_callback = cfuncproto(
            load_so_libforms(), "fl_remove_signal_callback", \
            None, [cty.c_int], \
            """void fl_remove_signal_callback(int s)
            """)
    isglnum = convert_to_int(sglnum)
    keep_elem_refs(sglnum, isglnum)
    _fl_remove_signal_callback(isglnum)


def fl_signal_caught(sglnum):
    """
        fl_signal_caught(sglnum)

        Informs the main loop of the delivery of the signal signum, the signal
        is received by the application program

        @param sglnum : signal number (e.g. SIGALRM, SIGINT, etc.)
    """

    _fl_signal_caught = cfuncproto(
            load_so_libforms(), "fl_signal_caught", \
            None, [cty.c_int], \
            """void fl_signal_caught(int s)
            """)
    isglnum = convert_to_int(sglnum)
    keep_elem_refs(sglnum, isglnum)
    _fl_signal_caught(isglnum)


def fl_app_signal_direct(flag):
    """
        fl_app_signal_direct(flag)

        Changes the default behavior of the built-in signal facilities (to
        be called with a true value for flag prior to any use of
        fl_add_signal_callback

        @param flag : flag (0|1)
    """

    _fl_app_signal_direct = cfuncproto(
            load_so_libforms(), "fl_app_signal_direct", \
            None, [cty.c_int], \
            """void fl_app_signal_direct(int y)
            """)
    iflag = convert_to_int(flag)
    keep_elem_refs(flag, flagy)
    _fl_app_signal_direct(iflag)


# timeouts

FL_TIMEOUT_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)

def fl_add_timeout(msec, py_TimeoutCallback, data):
    """
        fl_add_timeout(msec, py_TimeoutCallback, data) -> timer ID

        Adds a timeout callback after a specified elapsed time.

        @param msec : time elapsed in milliseconds
        @param py_TimeoutCallback : python function to be invoked after time,
           fn(num, ptr_void)
        @param data : argument to be passed to function
    """

    _fl_add_timeout = cfuncproto(
            load_so_libforms(), "fl_add_timeout", \
            cty.c_int, [cty.c_long, FL_TIMEOUT_CALLBACK, cty.c_void_p], \
            """int fl_add_timeout(long int msec,
               FL_TIMEOUT_CALLBACK callback, void * data)
            """)
    lmsec = convert_to_long(msec)
    pdata = cty.cast(data, cty.c_void_p)
    c_TimeoutCallback = FL_TIMEOUT_CALLBACK(py_TimeoutCallback)
    keep_cfunc_refs(c_TimeoutCallback, py_TimeoutCallback)
    keep_elem_refs(msec, lmsec, data, pdata)
    retval = _fl_add_timeout(lmsec, c_TimeoutCallback, pdata)
    return retval


def fl_remove_timeout(idnum):
    """
        fl_remove_timeout(idnum)

        Removes a timeout callback function (created with fl_add_timeout).

        @param idnum : ID timeout number
    """

    _fl_remove_timeout = cfuncproto(
            load_so_libforms(), "fl_remove_timeout", \
            None, [cty.c_int], \
            """void fl_remove_timeout(int id)
            """)
    iidnum = convert_to_int(idnum)
    keep_elem_refs(idnum, iidnum)
    _fl_remove_timeout(iidnum)


# Basic public routine prototypes

#def fl_library_version(ver, rev)
def fl_library_version():
    """
        fl_library_version() -> version_rev ID, ver, rev

        Returns consolidated version informations.

        Returns:
        <version_rev> : computed as 1000 * version + revision
        <ver> : version (e.g. 1 in 1.x.yy)
        <rev> : revision (e.g. 0 in x.0.yy)
    """

    _fl_library_version = cfuncproto(
            load_so_libforms(), "fl_library_version", \
            cty.c_int, [cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)], \
            """int fl_library_version(int * ver, int * rev)
            """)
    ver, pver = make_int_and_pointer()
    rev, prev = make_int_and_pointer()
    keep_elem_refs(ver, rev, pver, prev)
    retval = _fl_library_version(pver, prev)
    return retval, ver, rev


# Generic routines that deal with FORMS

def fl_bgn_form(formtype, w, h):
    """
        fl_bgn_form(formtype, w, h) -> pForm

        Starts the definition of a form call.

        @param formtype : type of box that is used as a background
           (e.g. FL_DOWN_BOX, FL_BORDER_BOX, FL_SHADOW_BOX, etc.)
        @param w : width of the new form
        @param h : height of the new form
    """

    _fl_bgn_form = cfuncproto(
            load_so_libforms(), "fl_bgn_form", \
            cty.POINTER(FL_FORM), [cty.c_int, FL_Coord, FL_Coord], \
            """FL_FORM * fl_bgn_form(int type, FL_Coord w, FL_Coord h)
            """)
    check_admitted_listvalues(formtype, BOXTYPE_list)
    iformtype = convert_to_int(formtype)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(formtype, iformtype, w, iw, h, ih)
    retval = _fl_bgn_form(iformtype, iw, ih)
    return retval


def fl_end_form():
    """
        fl_end_form()

        Ends the definition for a form call, after all required objects
        have been added to a form call.
    """

    _fl_end_form = cfuncproto(
            load_so_libforms(), "fl_end_form", \
            None, [], \
            """void fl_end_form()
            """)
    _fl_end_form()


def fl_do_forms():
    """
        fl_do_forms() -> pObject

        Starts the main loop of the program and returns only when the state
        of an object changes that has no callback bound to it.
    """

    _fl_do_forms = cfuncproto(
            load_so_libforms(), "fl_do_forms", \
            cty.POINTER(FL_OBJECT), [], \
            """FL_OBJECT * fl_do_forms()
            """)
    retval = _fl_do_forms()
    return retval


def fl_check_forms():
    """
        fl_check_forms() -> pObject

        Returns None immediately unless the state of one of the object
        (without a callback bound to it) changed.
    """

    _fl_check_forms = cfuncproto(
            load_so_libforms(), "fl_check_forms", \
            cty.POINTER(FL_OBJECT), [], \
            """FL_OBJECT * fl_check_forms()
            """)
    retval = _fl_check_forms()
    return retval


def fl_do_only_forms():
    """
        fl_do_only_forms() -> pObject

        Starts the main loop of the program and returns only when the state of
        an object changes that has no callback bound to it. It does not
        handle user events generated by application windows opened via
        fl_winopen() or similar routines.
    """

    _fl_do_only_forms = cfuncproto(
            load_so_libforms(), "fl_do_only_forms", \
            cty.POINTER(FL_OBJECT), [], \
            """FL_OBJECT * fl_do_only_forms()
            """)
    retval = _fl_do_only_forms()
    return retval


def fl_check_only_forms():
    """
        fl_check_only_forms() -> pObject

        Returns None immediately unless the state of one of the object
        (without a callback bound to it) changed. It does not handle user
        events generated by application windows opened via fl_winopen() or
        similar routines.
    """

    _fl_check_only_forms = cfuncproto(
            load_so_libforms(), "fl_check_only_forms", \
            cty.POINTER(FL_OBJECT), [], \
            """FL_OBJECT * fl_check_only_forms()
            """)
    retval = _fl_check_only_forms()
    return retval


def fl_freeze_form(pForm):
    """
        fl_freeze_form(pForm)

        It does not temporarily redraw a form while changes are being made, so
        all changes made are instead buffered internally.

        @param pForm : pointer to form not to be re-drawn temporarly
    """

    _fl_freeze_form = cfuncproto(
            load_so_libforms(), "fl_freeze_form", \
            None, [cty.POINTER(FL_FORM)], \
            """void fl_freeze_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_freeze_form(pForm)


def fl_set_focus_object(pForm, pObject):
    """
        fl_set_focus_object(pForm, pObject)

        Sets the input focus in form to object pObject.

        @param pForm : pointer to form whose object has to be focused
        @param pObject : pointer to object to be focused
    """

    _fl_set_focus_object = cfuncproto(
            load_so_libforms(), "fl_set_focus_object", \
            None, [cty.POINTER(FL_FORM), cty.POINTER(FL_OBJECT)], \
            """void fl_set_focus_object(FL_FORM * form, FL_OBJECT * obj)
            """)
    keep_elem_refs(pForm, pObject)
    _fl_set_focus_object(pForm, pObject)


fl_set_object_focus = fl_set_focus_object


def fl_get_focus_object(pForm):
    """
        fl_get_focus_object(pForm) -> pObject

        Obtains the object that has the focus on a form.

        @param pForm : pointer to form that has a focused object
    """

    _fl_get_focus_object = cfuncproto(
            load_so_libforms(), "fl_get_focus_object", \
            cty.POINTER(FL_OBJECT), [cty.POINTER(FL_FORM)], \
            """FL_OBJECT * fl_get_focus_object(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    retval = _fl_get_focus_object(pForm)
    return retval


def fl_reset_focus_object(pObject):
    """
        fl_reset_focus_object(pObject)

        Override the FL_UNFOCUS event.

        @param pObject : pointer to object towards applying event
    """

    _fl_reset_focus_object = cfuncproto(
            load_so_libforms(), "fl_reset_focus_object", \
            None, [cty.POINTER(FL_OBJECT)], \
            """void fl_reset_focus_object(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_reset_focus_object(pObject)


#already defined in xfdata
#FL_FORM_ATCLOSE = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_FORM), cty.c_void_p)

def fl_set_form_atclose(pForm, py_FormAtclose, data):
    """
        fl_set_form_atclose(pForm, py_FormAtclose, data) -> FormAtclose func.

        Calls a callback function before closing the form.

        @param pForm : pointer to form that receives the message
        @param py_FormAtclose : python callback function to be called,
           fn(pForm, ptr_void) -> num
        @param data : argument to be passed to function
    """

    _fl_set_form_atclose = cfuncproto(
            load_so_libforms(), "fl_set_form_atclose", \
            FL_FORM_ATCLOSE, [cty.POINTER(FL_FORM), FL_FORM_ATCLOSE,
            cty.c_void_p], \
            """FL_FORM_ATCLOSE fl_set_form_atclose(FL_FORM * form,
               FL_FORM_ATCLOSE fmclose, void * data)
            """)
    c_FormAtclose = FL_FORM_ATCLOSE(py_FormAtclose)
    pdata = cty.cast(data, cty.c_void_p)
    keep_cfunc_refs(c_FormAtclose, py_FormAtclose)
    keep_elem_refs(pForm, data, pdata)
    retval = _fl_set_form_atclose(pForm, c_FormAtclose, pdata)
    return retval


def fl_set_atclose(py_FormAtclose, data):
    """
        fl_set_atclose(py_FormAtclose, data) -> FormAtclose func.

        Calls a callback function before terminating the application.

        @param py_FormAtclose : callback function to be called, fn(pForm,
           ptr_void) -> num
        @param data : argument to be passed to function
    """

    _fl_set_atclose = cfuncproto(
            load_so_libforms(), "fl_set_atclose", \
            FL_FORM_ATCLOSE, [FL_FORM_ATCLOSE, cty.c_void_p], \
            """FL_FORM_ATCLOSE fl_set_atclose(FL_FORM_ATCLOSE fmclose,
               void * data)
            """)
    c_FormAtclose = FL_FORM_ATCLOSE(py_FormAtclose)
    pdata = cty.cast(data, cty.c_void_p)
    keep_cfunc_refs(c_FormAtclose, py_FormAtclose)
    keep_elem_refs(data, pdata)
    retval = _fl_set_atclose(c_FormAtclose, pdata)
    return retval


#already defined in xfdata
#FL_FORM_ATACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(FL_FORM), cty.c_void_p)

def fl_set_form_atactivate(pForm, py_FormAtactivate, data):
    """
        fl_set_form_atactivate(pForm, py_FormAtactivate, data) -> FormAtactivate func.

        Register a callback that is called when activation status of a forms
        is enabled,

        @param pForm : activated form
        @param py_FormAtactivate : python callback function called, fn(pForm,
           ptr_void)
        @param data : argument to be passed to function
    """

    _fl_set_form_atactivate = cfuncproto(
            load_so_libforms(), "fl_set_form_atactivate", \
            FL_FORM_ATACTIVATE, [cty.POINTER(FL_FORM), FL_FORM_ATACTIVATE,
            cty.c_void_p], \
            """FL_FORM_ATACTIVATE fl_set_form_atactivate(FL_FORM * form,
               FL_FORM_ATACTIVATE cb, void * data)
            """)
    c_FormAtactivate = FL_FORM_ATACTIVATE(py_FormAtactivate)
    pdata = cty.cast(data, cty.c_void_p)
    keep_cfunc_refs(c_FormAtactivate, py_FormAtactivate)
    keep_elem_refs(pForm, data, pdata)
    retval = _fl_set_form_atactivate(pForm, c_FormAtactivate, pdata)
    return retval


#already defined in xfdata
#FL_FORM_ATDEACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(FL_FORM), cty.c_void_p)

def fl_set_form_atdeactivate(pForm, py_FormAtdeactivate, data):
    """
        fl_set_form_atdeactivate(pForm, py_FormAtdeactivate, data) -> FormAtdeactivate func.

        Register a callback that is called when activation status of a forms
        is disabled.

        @param pForm : pointer to de-activated form
        @param py_FormAtdeactivate : python callback function called,
           fn(pForm, ptr_void)
        @param data : argument to be passed to function
    """

    _fl_set_form_atdeactivate = cfuncproto(
            load_so_libforms(), "fl_set_form_atdeactivate", \
            FL_FORM_ATDEACTIVATE, [cty.POINTER(FL_FORM),
            FL_FORM_ATDEACTIVATE, cty.c_void_p], \
            """FL_FORM_ATDEACTIVATE fl_set_form_atdeactivate(FL_FORM * form,
               FL_FORM_ATDEACTIVATE cb, void * data)
            """)
    c_FormAtdeactivate = FL_FORM_ATDEACTIVATE(py_FormAtdeactivate)
    pdata = cty.cast(data, cty.c_void_p)
    keep_cfunc_refs(c_FormAtdeactivate, py_FormAtdeactivate)
    keep_elem_refs(pForm, data, pdata)
    retval = _fl_set_form_atdeactivate(pForm, c_FormAtdeactivate, pdata)
    return retval


def fl_unfreeze_form(pForm):
    """
        fl_unfreeze_form(pForm)

        All changes made in the meantime in a form are drawn at once,
        reverting previous freeze.

        @param pForm : pointer to form to be re-drawn after freezing
    """

    _fl_unfreeze_form = cfuncproto(
            load_so_libforms(), "fl_unfreeze_form", \
            None, [cty.POINTER(FL_FORM)], \
            """void fl_unfreeze_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_unfreeze_form(pForm)


def fl_deactivate_form(pForm):
    """
        fl_deactivate_form(pForm)

        Deactivates form temporarily, without hiding it, but not allowing the
        user to interact with elements contained in form (buttons, etc.).

        @param pForm : pointer to form to be de-activated
    """

    _fl_deactivate_form = cfuncproto(
            load_so_libforms(), "fl_deactivate_form", \
            None, [cty.POINTER(FL_FORM)], \
            """void fl_deactivate_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_deactivate_form(pForm)


def fl_activate_form(pForm):
    """
        fl_activate_form(pForm)

        Re-activates form, allowing the user to interact again with elements
        contained in form (buttons, etc.).

        @param pForm : pointer to form to be re-activated
    """

    _fl_activate_form = cfuncproto(
            load_so_libforms(), "fl_activate_form", \
            None, [cty.POINTER(FL_FORM)], \
            """void fl_activate_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_activate_form(pForm)


def fl_deactivate_all_forms():
    """
        fl_deactivate_all_forms()

        De-activates all current forms.
    """

    _fl_deactivate_all_forms = cfuncproto(
            load_so_libforms(), "fl_deactivate_all_forms", \
            None, [], \
            """void fl_deactivate_all_forms()
            """)
    _fl_deactivate_all_forms()


def fl_activate_all_forms():
    """
        fl_activate_all_forms()

        Re-activates all current forms.
    """

    _fl_activate_all_forms = cfuncproto(
            load_so_libforms(), "fl_activate_all_forms", \
            None, [], \
            """void fl_activate_all_forms()
            """)
    _fl_activate_all_forms()


def fl_freeze_all_forms():
    """
        fl_freeze_all_forms()

        It does not temporarily redraw all current forms while changes are
        being made, so all changes made are instead buffered internally.
    """

    _fl_freeze_all_forms = cfuncproto(
            load_so_libforms(), "fl_freeze_all_forms", \
            None, [], \
            """void fl_freeze_all_forms()
            """)
    _fl_freeze_all_forms()


def fl_unfreeze_all_forms():
    """
        fl_unfreeze_all_forms()

        All changes made in the meantime in all current forms are drawn at
        once, reverting previous freeze.
    """

    _fl_unfreeze_all_forms = cfuncproto(
            load_so_libforms(), "fl_unfreeze_all_forms", \
            None, [], \
            """void fl_unfreeze_all_forms()
            """)
    _fl_unfreeze_all_forms()


def fl_scale_form(pForm, xsc, ysc):
    """
        fl_scale_form(pForm, xsc, ysc)

        Scales a form and the objects on it in size and position, indicating
        a scaling factor in x- and y-direction with respect to the current
        size.

        @param pForm : pointer to form to be scaled
        @param xsc : scaling factor in horizontal direction
        @param ysc : scaling factor in vertical direction
    """

    _fl_scale_form = cfuncproto(
            load_so_libforms(), "fl_scale_form", \
            None, [cty.POINTER(FL_FORM), cty.c_double, cty.c_double], \
            """void fl_scale_form(FL_FORM * form, double xsc, double ysc)
            """)
    fxsc = convert_to_double(xsc)
    fysc = convert_to_double(ysc)
    keep_elem_refs(pForm, xsc, fxsc, ysc, fysc)
    _fl_scale_form(pForm, fxsc, fysc)


def fl_set_form_position(pForm, x, y):
    """
        fl_set_form_position(pForm, x, y)

        Sets position of form, when placing a form on the screen with
        FL_PLACE_GEOMETRY as place argument.

        @param pForm : pointer to form whose position is to be set
        @param x : horizontal position
        @param y : vertical position
    """

    _fl_set_form_position = cfuncproto(
            load_so_libforms(), "fl_set_form_position", \
            None, [cty.POINTER(FL_FORM), FL_Coord, FL_Coord], \
            """void fl_set_form_position(FL_FORM * form, FL_Coord x,
               FL_Coord y)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    keep_elem_refs(pForm, x, ix, y, iy)
    _fl_set_form_position(pForm, ix, iy)


def fl_set_form_title(pForm, name):
    """
        fl_set_form_title(pForm, name)

        Changes the form title (and the icon name) after it is shown.

        @param pForm : pointer to form whose title has to be changed
        @param name : new name for the form
    """

    _fl_set_form_title = cfuncproto(
            load_so_libforms(), "fl_set_form_title", \
            None, [cty.POINTER(FL_FORM), STRING], \
            """void fl_set_form_title(FL_FORM * form, const char * name)
            """)
    sname = convert_to_string(name)
    keep_elem_refs(pForm, name, sname)
    _fl_set_form_title(pForm, sname)


def fl_set_app_mainform(pForm):
    """ fl_set_app_mainform(pForm)
    """

    _fl_set_app_mainform = cfuncproto(
            load_so_libforms(), "fl_set_app_mainform",
            None, [cty.POINTER(FL_FORM)], \
            """void fl_set_app_mainform(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_set_app_mainform(pForm)


def fl_get_app_mainform():
    """ fl_get_app_mainform() -> pForm
    """

    _fl_get_app_mainform = cfuncproto(
            load_so_libforms(), "fl_get_app_mainform",
            cty.POINTER(FL_FORM), [], \
            """FL_FORM * fl_get_app_mainform()
            """)
    retval = _fl_get_app_mainform()
    return retval


def fl_set_app_nomainform(flag):
    """ fl_set_app_nomainform(flag)
    """

    _fl_set_app_nomainform = cfuncproto(
            load_so_libforms(), "fl_set_app_nomainform",
            None, [cty.c_int], \
            """void fl_set_app_nomainform(int flag)
            """)
    iflag = convert_to_int(flag)
    keep_elem_refs(flag, iflag)
    _fl_set_app_nomainform(iflag)


#already defined in xfdata
#FL_FORMCALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_void_p)

def fl_set_form_callback(pForm, py_FormCallbackPtr, data):
    """ fl_set_form_callback(pForm, py_FormCallbackPtr, data)

        Sets the callback routine for the form.

        @param pForm : pointer to form
        @param py_FormCallbackPtr : python callback to be set,
           fn(pObject, ptr_void)
        @param data : argument to be passed to function
    """

    _fl_set_form_callback = cfuncproto(
            load_so_libforms(), "fl_set_form_callback", \
            None, [cty.POINTER(FL_FORM), FL_FORMCALLBACKPTR, cty.c_void_p], \
            """void fl_set_form_callback(FL_FORM * form,
               FL_FORMCALLBACKPTR callback, void * d)
            """)
    c_FormCallbackPtr = FL_FORMCALLBACKPTR(py_FormCallbackPtr)
    pdata = cty.cast(data, cty.c_void_p)
    keep_cfunc_refs(c_FormCallbackPtr, py_FormCallbackPtr)
    keep_elem_refs(pForm, data, pdata)
    _fl_set_form_callback(pForm, c_FormCallbackPtr, pdata)


fl_set_form_call_back = fl_set_form_callback


def fl_set_form_size(pForm, w, h):
    """
        fl_set_form_size(pForm, w, h)

        Sets the size of form.

        @param pForm : pointer to form
        @param w : width of form
        @param h : height of form
    """

    _fl_set_form_size = cfuncproto(
            load_so_libforms(), "fl_set_form_size", \
            None, [cty.POINTER(FL_FORM), FL_Coord, FL_Coord], \
            """void fl_set_form_size(FL_FORM * form, FL_Coord w, FL_Coord h)
            """)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(pForm, w, iw, h, ih)
    _fl_set_form_size(pForm, iw, ih)


def fl_set_form_hotspot(pForm, x, y):
    """
        fl_set_form_hotspot(pForm, x, y)

        Sets the position of the hotspot of a form.

        @param pForm : pointer to form
        @param x : horizontal position
        @param y : vertical position
    """

    _fl_set_form_hotspot = cfuncproto(
            load_so_libforms(), "fl_set_form_hotspot", \
            None, [cty.POINTER(FL_FORM), FL_Coord, FL_Coord], \
            """void fl_set_form_hotspot(FL_FORM * form, FL_Coord x,
               FL_Coord y)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    keep_elem_refs(pForm, x, ix, y, iy)
    _fl_set_form_hotspot(pForm, ix, iy)


def fl_set_form_hotobject(pForm, pObject):
    """
        fl_set_form_hotobject(pForm, pObject)

        @param pForm : pointer to form
        @param pObject : pointer to object
    """

    _fl_set_form_hotobject = cfuncproto(
            load_so_libforms(), "fl_set_form_hotobject", \
            None, [cty.POINTER(FL_FORM), cty.POINTER(FL_OBJECT)], \
            """void fl_set_form_hotobject(FL_FORM * form, FL_OBJECT * ob)
            """)
    keep_elem_refs(pForm, pObject)
    _fl_set_form_hotobject(pForm, pObject)


def fl_set_form_minsize(pForm, w, h):
    """
        fl_set_form_minsize(pForm, w, h)

        @param pForm : pointer to form
        @param w : width of form
        @param h : height of form
    """

    _fl_set_form_minsize = cfuncproto(
            load_so_libforms(), "fl_set_form_minsize", \
            None, [cty.POINTER(FL_FORM), FL_Coord, FL_Coord], \
            """void fl_set_form_minsize(FL_FORM * form, FL_Coord w, FL_Coord h)
            """)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(pForm, w, iw, h, ih)
    _fl_set_form_minsize(pForm, iw, ih)


def fl_set_form_maxsize(pForm, w, h):
    """
        fl_set_form_maxsize(pForm, w, h)

        @param pForm : pointer to form
        @param w : width of form
        @param h : height of form
    """

    _fl_set_form_maxsize = cfuncproto(
            load_so_libforms(), "fl_set_form_maxsize", \
            None, [cty.POINTER(FL_FORM), FL_Coord, FL_Coord], \
            """void fl_set_form_maxsize(FL_FORM * form, FL_Coord w, FL_Coord h)
            """)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(pForm, w, iw, h, ih)
    _fl_set_form_maxsize(pForm, iw, ih)


def fl_set_form_event_cmask(pForm, cmask):
    """
        fl_set_form_event_cmask(pForm, cmask)

        @param pForm : pointer to form
        @param cmask : compress mask for form
    """

    _fl_set_form_event_cmask = cfuncproto(
            load_so_libforms(), "fl_set_form_event_cmask", \
            None, [cty.POINTER(FL_FORM), cty.c_ulong], \
            """void fl_set_form_event_cmask(FL_FORM * form,
               long unsigned int cmask)
            """)
    ulcmask = convert_to_ulong(cmask)
    keep_elem_refs(pForm, cmask, ulcmask)
    _fl_set_form_event_cmask(pForm, ulcmask)


def fl_get_form_event_cmask(pForm):
    """
        fl_get_form_event_cmask(pForm) -> cmask ID

        @param pForm : pointer to form

        Returns:
            compress mask for form
    """

    _fl_get_form_event_cmask = cfuncproto(
            load_so_libforms(), "fl_get_form_event_cmask", \
            cty.c_ulong, [cty.POINTER(FL_FORM)], \
            """long unsigned int fl_get_form_event_cmask(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    retval = _fl_get_form_event_cmask(pForm)
    return retval


# alert until upstream bugfix
def fl_set_form_geometry(pForm, x, y, w, h):
    """
        fl_set_form_geometry(pForm, x, y, w, h)

        @param pForm : pointer to form
        @param x : horizontal position
        @param y : vertical position
        @param w : width of form
        @param h : height of form
    """

    _fl_set_form_geometry = cfuncproto(
            load_so_libforms(), "fl_set_form_geometry", \
            None, [cty.POINTER(FL_FORM), FL_Coord, FL_Coord,
            FL_Coord, FL_Coord], \
            """void fl_set_form_geometry(FL_FORM * form, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(pForm, x, ix, y, iy, w, iw, h, ih)
    _fl_set_form_geometry(pForm, ix, iy, iw, ih)


fl_set_initial_placement = fl_set_form_geometry


def fl_show_form(pForm, place, border, title):
    """
        fl_show_form(pForm, place, border, title) -> window id

        Shows the form.

        @param pForm : pointer to form
        @param place : where form has to be placed
        @param border : type of window manager decoration
        @param title : title of form
    """

    _fl_show_form = cfuncproto(
            load_so_libforms(), "fl_show_form",
            Window, [cty.POINTER(FL_FORM), cty.c_int, cty.c_int, STRING], \
            """Window fl_show_form(FL_FORM * form, int place, int border,
               const char * name)
            """)
    check_admitted_listvalues(place, PLACE_list)
    check_admitted_listvalues(border, DECORATION_list)
    iplace = convert_to_int(place)
    iborder = convert_to_int(border)
    stitle = convert_to_string(title)
    keep_elem_refs(pForm, place, iplace, border, iborder, title, stitle)
    retval = _fl_show_form(pForm, iplace, iborder, stitle)
    return retval


def fl_hide_form(pForm):
    """
        fl_hide_form(pForm)

        Hides the form.

        @param pForm : pointer to form
    """

    _fl_hide_form = cfuncproto(
            load_so_libforms(), "fl_hide_form",
            None, [cty.POINTER(FL_FORM)], \
            """void fl_hide_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_hide_form(pForm)


def fl_free_form(pForm):
    """
        fl_free_form(pForm)

        Frees the memory used by a form together with all its objects.

        @param pForm : pointer to form
    """

    _fl_free_form = cfuncproto(
            load_so_libforms(), "fl_free_form",
            None, [cty.POINTER(FL_FORM)], \
            """void fl_free_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_free_form(pForm)


def fl_redraw_form(pForm):
    """
        fl_redraw_form(pForm)

        Draws a form.

        @param pForm : pointer to form
    """

    _fl_redraw_form = cfuncproto(
            load_so_libforms(), "fl_redraw_form",
            None, [cty.POINTER(FL_FORM)], \
            """void fl_redraw_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_redraw_form(pForm)


def fl_set_form_dblbuffer(pForm, y):
    """
        fl_set_form_dblbuffer(pForm, y)

        @param pForm : pointer to form
        @param y : flag (0|1) for disabling/enabling doublebuffer
    """

    _fl_set_form_dblbuffer = cfuncproto(
            load_so_libforms(), "fl_set_form_dblbuffer", \
            None, [cty.POINTER(FL_FORM), cty.c_int], \
            """void fl_set_form_dblbuffer(FL_FORM * form, int y)
            """)
    iy = convert_to_int(y)
    keep_elem_refs(pForm, y, iy)
    _fl_set_form_dblbuffer(pForm, iy)


def fl_prepare_form_window(pForm, place, border, name):
    """
        fl_prepare_form_window(pForm, place, border, name) -> window ID

        Displays a particular form, returns its window handle.

        @param pForm : pointer to form
        @param place : where has to be placed
        @param border : window manager decoration
        @param name : title of form
    """

    _fl_prepare_form_window = cfuncproto(
            load_so_libforms(), "fl_prepare_form_window", \
            Window, [cty.POINTER(FL_FORM), cty.c_int, cty.c_int, STRING], \
            """Window fl_prepare_form_window(FL_FORM * form, int place,
               int border, const char * name)
            """)
    iplace = convert_to_int(place)
    iborder = convert_to_int(border)
    sname = convert_to_string(name)
    keep_elem_refs(pForm, place, iplace, border, iborder, name, sname)
    retval = _fl_prepare_form_window(pForm, iplace, iborder, sname)
    return retval


def fl_show_form_window(pForm):
    """
        fl_show_form_window(pForm) -> window ID

        @param pForm : pointer to form
    """

    _fl_show_form_window = cfuncproto(
            load_so_libforms(), "fl_show_form_window", \
            Window, [cty.POINTER(FL_FORM)], \
            """Window fl_show_form_window(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    retval = _fl_show_form_window(pForm)
    return retval


def fl_adjust_form_size(pForm):
    """
        fl_adjust_form_size(pForm) -> max_factor id

        Similar to fit_object_label, but will do it for all objects and has
        a smaller threshold. Mainly intended for compensation for font size
        variations.

        @param pForm : pointer to form
    """

    _fl_adjust_form_size = cfuncproto(
            load_so_libforms(), "fl_adjust_form_size", \
            cty.c_double, [cty.POINTER(FL_FORM)], \
            """double fl_adjust_form_size(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    retval = _fl_adjust_form_size(pForm)
    return retval


def fl_form_is_visible(pForm):
    """
        fl_form_is_visible(pForm) -> state id

        Returns if form is visible.

        @param pForm : pointer to form
    """

    _fl_form_is_visible = cfuncproto(
            load_so_libforms(), "fl_form_is_visible", \
            cty.c_int, [cty.POINTER(FL_FORM)], \
            """int fl_form_is_visible(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    retval = _fl_form_is_visible(pForm)
    return retval


def fl_form_is_iconified(pForm):
    """
        fl_form_is_iconified(pForm) -> state id

        Returns if a forms window is in iconified state.

        @param pForm : pointer to form
    """

    _fl_form_is_iconified = cfuncproto(
            load_so_libforms(), "fl_form_is_iconified", \
            cty.c_int, [cty.POINTER(FL_FORM)], \
            """int fl_form_is_iconified(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    retval = _fl_form_is_iconified(pForm)
    return retval


#already defined in xfdata
#FL_RAW_CALLBACK = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_FORM), cty.c_void_p)

def fl_register_raw_callback(pForm, mask, py_RawCallback):
    """
        fl_register_raw_callback(pForm, mask, py_RawCallback) -> old raw_callback func.

        Register pre-emptive event handlers.

        @param pForm : pointer to form
        @param mask : key/button/window event mask (press, release, motion,
           enter, leave etc..)
        @param py_RawCallback : python callback function,
           fn(pForm, ptr_void) -> num
    """

    _fl_register_raw_callback = cfuncproto(
            load_so_libforms(), "fl_register_raw_callback", \
            FL_RAW_CALLBACK, [cty.POINTER(FL_FORM), cty.c_ulong,
            FL_RAW_CALLBACK], \
            """FL_RAW_CALLBACK fl_register_raw_callback(FL_FORM * form,
               long unsigned int mask, FL_RAW_CALLBACK rcb)
            """)
    ulmask = convert_to_ulong(mask)
    c_RawCallback = FL_RAW_CALLBACK(py_RawCallback)
    keep_cfunc_refs(c_RawCallback, py_RawCallback)
    keep_elem_refs(pForm, mask, ulmask)
    retval = _fl_register_raw_callback(pForm, ulmask, c_RawCallback)
    return retval


fl_register_call_back = fl_register_raw_callback


def fl_bgn_group():
    """
        fl_bgn_group() -> pObject

        Starts a group definition.
    """

    _fl_bgn_group = cfuncproto(
            load_so_libforms(), "fl_bgn_group", \
            cty.POINTER(FL_OBJECT), [], \
            """FL_OBJECT * fl_bgn_group()
            """)
    retval = _fl_bgn_group()
    return retval


def fl_end_group():
    """
        fl_end_group()

        Ends a group definition.
    """

    _fl_end_group = cfuncproto(
            load_so_libforms(), "fl_end_group", \
            None, [], \
            """void fl_end_group()
            """)
    _fl_end_group()


def fl_addto_group(pGroup):
    """
        fl_addto_group(pGroup) -> pForm

        Reopens a group to allow addition of further objects.

        @param pGroup : pointer to group object to reopen
    """

    _fl_addto_group = cfuncproto(
            load_so_libforms(), "fl_addto_group", \
            cty.POINTER(FL_OBJECT), [cty.POINTER(FL_OBJECT)], \
            """FL_OBJECT * fl_addto_group(FL_OBJECT * group)
            """)
    keep_elem_refs(pGroup)
    retval = _fl_addto_group(pGroup)
    return retval


# Routines that deal with FL_OBJECTS

def fl_set_object_boxtype(pObject, boxtype):
    """
        fl_set_object_boxtype(pObject, boxtype)

        Sets the boxtype of the object.

        @param pObject : pointer to object
        @param boxtype : type of the box
    """

    _fl_set_object_boxtype = cfuncproto(
            load_so_libforms(), "fl_set_object_boxtype", \
            None, [cty.POINTER(FL_OBJECT), cty.c_int], \
            """void fl_set_object_boxtype(FL_OBJECT * ob, int boxtype)
            """)
    check_admitted_listvalues(boxtype, BOXTYPE_list)
    iboxtype = convert_to_int(boxtype)
    keep_elem_refs(pObject, boxtype, iboxtype)
    _fl_set_object_boxtype(pObject, iboxtype)


def fl_set_object_bw(pObject, bw):
    """
        fl_set_object_bw(pObject, bw)

        Sets the borderwidth of an object.

        @param pObject : pointer to object
        @param bw : borderwidth of object
    """

    _fl_set_object_bw = cfuncproto(
            load_so_libforms(), "fl_set_object_bw", \
            None, [cty.POINTER(FL_OBJECT), cty.c_int], \
            """void fl_set_object_bw(FL_OBJECT * ob, int bw)
            """)
    ibw = convert_to_int(bw)
    keep_elem_refs(pObject, bw, ibw)
    _fl_set_object_bw(pObject, ibw)


#def fl_get_object_bw(pObject, bw)
def fl_get_object_bw(pObject):
    """
        fl_get_object_bw(pObject) -> bw

        Returns the borderwidth of an object.

        @param pObject : pointer to object
    """

    _fl_get_object_bw = cfuncproto(
            load_so_libforms(), "fl_get_object_bw", \
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int)], \
            """void fl_get_object_bw(FL_OBJECT * ob, int * bw)
            """)
    bw, pbw = make_int_and_pointer()
    keep_elem_refs(pObject, bw, pbw)
    _fl_get_object_bw(pObject, pbw)
    return bw


def fl_set_object_resize(pObject, what):
    """
        fl_set_object_resize(pObject, what)

        Sets the resize property of an object.

        @param pObject : pointer to object
        @param what : resize property
    """

    _fl_set_object_resize = cfuncproto(
            load_so_libforms(), "fl_set_object_resize", \
            None, [cty.POINTER(FL_OBJECT), cty.c_uint], \
            """void fl_set_object_resize(FL_OBJECT * ob, unsigned int what)
            """)
    uiwhat = convert_to_uint(what)
    keep_elem_refs(pObject, what, uiwhat)
    _fl_set_object_resize(pObject, uiwhat)


#def fl_get_object_resize(pObject, what)
def fl_get_object_resize(pObject):
    """
        fl_get_object_resize(pObject) -> what

        Returns the resize property of an object.

        @param pObject : pointer to object
    """

    _fl_get_object_resize = cfuncproto(
            load_so_libforms(), "fl_get_object_resize", \
             None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_uint)], \
            """void fl_get_object_resize(FL_OBJECT * ob, unsigned int * what)
            """)
    what, pwhat = make_uint_and_pointer()
    keep_elem_refs(pObject, what, pwhat)
    _fl_get_object_resize(pObject, pwhat)
    return what


def fl_set_object_gravity(pObject, nw, se):
    """
        fl_set_object_gravity(pObject, nw, se)

        Sets the gravity properties of an object.

        @param pObject : pointer to object
        @param nw : gravity property for NorthWest
        @param se : gravity property for SouthEast
    """

    _fl_set_object_gravity = cfuncproto(
            load_so_libforms(), "fl_set_object_gravity", \
            None, [cty.POINTER(FL_OBJECT), cty.c_uint, cty.c_uint], \
            """void fl_set_object_gravity(FL_OBJECT * ob, unsigned int nw,
               unsigned int se)
            """)
    uinw = convert_to_uint(nw)
    uise = convert_to_uint(se)
    keep_elem_refs(pObject, nw, uinw, se, uise)
    _fl_set_object_gravity(pObject, uinw, uise)


#def fl_get_object_gravity(pObject, nw, se)
def fl_get_object_gravity(pObject):
    """
        fl_get_object_gravity(pObject) -> nw, se

        Returns the gravity properties of an object.

        @param pObject : pointer to object
    """

    _fl_get_object_gravity = cfuncproto(
            load_so_libforms(), "fl_get_object_gravity", \
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_uint),
            cty.POINTER(cty.c_uint)], \
            """void fl_get_object_gravity(FL_OBJECT * ob, unsigned int * nw,
               unsigned int * se)
            """)
    nw, pnw = make_uint_and_pointer()
    se, pse = make_uint_and_pointer()
    keep_elem_refs(pObject, nw, se, pnw, pse)
    _fl_get_object_gravity(pObject, pnw, pse)
    return nw, se


def fl_set_object_lsize(pObject, lsize):
    """
        fl_set_object_lsize(pObject, lsize)

        Sets the label size of an object.

        @param pObject : pointer to object
        @param lsize : label size
    """

    _fl_set_object_lsize = cfuncproto(
            load_so_libforms(), "fl_set_object_lsize", \
            None, [cty.POINTER(FL_OBJECT), cty.c_int], \
            """void fl_set_object_lsize(FL_OBJECT * ob, int lsize)
            """)
    ilsize = convert_to_int(lsize)
    keep_elem_refs(pObject, lsize, ilsize)
    _fl_set_object_lsize(pObject, ilsize)


def fl_set_object_lstyle(pObject, lstyle):
    """
        fl_set_object_lstyle(pObject, lstyle)

        Sets the label style of an object.

        @param pObject : pointer to object
        @param lstyle : label style
    """

    _fl_set_object_lstyle = cfuncproto(
            load_so_libforms(), "fl_set_object_lstyle", \
            None, [cty.POINTER(FL_OBJECT), cty.c_int], \
            """void fl_set_object_lstyle(FL_OBJECT * ob, int lstyle)
            """)
    check_admitted_listvalues(lstyle, TEXTSTYLE_list)
    ilstyle = convert_to_int(lstyle)
    keep_elem_refs(pObject, lstyle, ilstyle)
    _fl_set_object_lstyle(pObject, ilstyle)


def fl_set_object_lcol(pObject, lcolr):
    """
        fl_set_object_lcol(pObject, lcolr)

        Sets the label color of an object.

        @param pObject : pointer to object
        @param lcolr : label color
    """

    _fl_set_object_lcol = cfuncproto(
            load_so_libforms(), "fl_set_object_lcol", \
            None, [cty.POINTER(FL_OBJECT), FL_COLOR], \
            """void fl_set_object_lcol(FL_OBJECT * ob, FL_COLOR lcol)
            """)
    check_admitted_listvalues(lcolr, COLOR_list)
    ullcolr = convert_to_FL_COLOR(lcolr)
    keep_elem_refs(pObject, lcolr, ullcolr)
    _fl_set_object_lcol(pObject, ullcolr)


def fl_set_object_return(pObject, when):
    """
        fl_set_object_return(pObject, when) -> ID num

        Function for setting the conditions under which an object gets
        returned (or its callback invoked). If the object has to do
        additional work on setting te condition (e.g. it has child
        objects that also need to be set) it has to set up it's own
        function that then will called in the end. This function should
        only be called once an object has been created completely!

        @param pObject : pointer to object
        @param when : return type
    """

    _fl_set_object_return = cfuncproto(
            load_so_libforms(), "fl_set_object_return", \
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int], \
            """int fl_set_object_return(FL_OBJECT * ob, int when)   DEPRECATED
            """)
    check_admitted_listvalues(when, RETURN_list)
    iwhen = convert_to_int(when)
    keep_elem_refs(pObject, when, iwhen)
    retval = _fl_set_object_return(pObject, iwhen)
    return retval


def fl_notify_object(pObject, cause):
    """
        fl_notify_object(pObject, cause)

        @param pObject : pointer to object
        @param cause : ?
    """

    _fl_notify_object = cfuncproto(
            load_so_libforms(), "fl_notify_object", \
            None, [cty.POINTER(FL_OBJECT), cty.c_int], \
            """void fl_notify_object(FL_OBJECT * obj, int cause)
            """)
    icause = convert_to_int(cause)
    keep_elem_refs(pObject, cause, icause)
    _fl_notify_object(pObject, icause)


def fl_set_object_lalign(pObject, align):
    """
        fl_set_object_lalign(pObject, align)

        Sets alignment of an object.

        @param pObject : pointer to object
        @param align : alignment of object
    """

    _fl_set_object_lalign = cfuncproto(
            load_so_libforms(), "fl_set_object_lalign", \
            None, [cty.POINTER(FL_OBJECT), cty.c_int], \
            """void fl_set_object_lalign(FL_OBJECT * ob, int align)
            """)
    check_admitted_listvalues(align, ALIGN_list)
    ialign = convert_to_int(align)
    keep_elem_refs(pObject, align, ialign)
    _fl_set_object_lalign(pObject, ialign)


def fl_set_object_shortcut(pObject, sstr, showit):
    """
        fl_set_object_shortcut(pObject, sstr, showit)

        @param pObject : pointer to object
        @param sstr : shortcut string
        @param showit : flag (0|1)
    """

    _fl_set_object_shortcut = cfuncproto(
            load_so_libforms(), "fl_set_object_shortcut", \
            None, [cty.POINTER(FL_OBJECT), STRING, cty.c_int], \
            """void fl_set_object_shortcut(FL_OBJECT * obj,
               const char * sstr, int showit)
            """)
    ssstr = convert_to_string(sstr)
    ishowit = convert_to_int(showit)
    keep_elem_refs(pObject, sstr, ssstr, showit, ishowit)
    _fl_set_object_shortcut(pObject, ssstr, ishowit)


def fl_set_object_shortcutkey(pObject, keysym):
    """
        fl_set_object_shortcutkey(pObject, keysym)

        @param pObject : pointer to object
        @param keysym : ?
    """

    _fl_set_object_shortcutkey = cfuncproto(
            load_so_libforms(), "fl_set_object_shortcutkey",
            None, [cty.POINTER(FL_OBJECT), cty.c_uint], \
            """void fl_set_object_shortcutkey(FL_OBJECT * obj,
               unsigned int keysym)
            """)
    uikeysym = convert_to_uint(keysym)
    keep_elem_refs(pObject, keysym, uikeysym)
    _fl_set_object_shortcutkey(pObject, uikeysym)


def fl_set_object_dblbuffer(pObject, y):
    """
        fl_set_object_dblbuffer(pObject, y)

        @param pObject : pointer to object
        @param y : flag (0|1) to disable/enable double buffer
    """

    _fl_set_object_dblbuffer = cfuncproto(
            load_so_libforms(), "fl_set_object_dblbuffer", \
            None, [cty.POINTER(FL_OBJECT), cty.c_int], \
            """void fl_set_object_dblbuffer(FL_OBJECT * ob, int y)
            """)
    iy = convert_to_int(y)
    keep_elem_refs(pObject, y, iy)
    _fl_set_object_dblbuffer(pObject, iy)


def fl_set_object_color(pObject, fgcolr, bgcolr):
    """
        fl_set_object_color(pObject, fgcolr, bgcolr)

        Sets the color of an object.

        @param pObject : pointer to object
        @param fgcolr : foreground color
        @param bgcolr : background color
    """

    _fl_set_object_color = cfuncproto(
            load_so_libforms(), "fl_set_object_color", \
            None, [cty.POINTER(FL_OBJECT), FL_COLOR, FL_COLOR], \
            """void fl_set_object_color(FL_OBJECT * ob, FL_COLOR col1,
               FL_COLOR col2)
            """)
    check_admitted_listvalues(fgcolr, COLOR_list)
    check_admitted_listvalues(bgcolr, COLOR_list)
    ulfgcolr = convert_to_FL_COLOR(fgcolr)
    ulbgcolr = convert_to_FL_COLOR(bgcolr)
    keep_elem_refs(pObject, fgcolr, ulfgcolr, bgcolr, ulbgcolr)
    _fl_set_object_color(pObject, ulfgcolr, ulbgcolr)


def fl_set_object_label(pObject, label):
    """
        fl_set_object_label(pObject, label)

        Sets the label of an object.

        @param pObject : pointer to object
        @param label : label of object
    """

    _fl_set_object_label = cfuncproto(
            load_so_libforms(), "fl_set_object_label", \
            None, [cty.POINTER(FL_OBJECT), STRING], \
            """void fl_set_object_label(FL_OBJECT * ob, const char * label)
            """)
    slabel = convert_to_string(label)
    keep_elem_refs(pObject, label, slabel)
    _fl_set_object_label(pObject, slabel)


def fl_set_object_helper(pObject, tip):
    """
        fl_set_object_helper(pObject, tip)

        Sets the tooltip of an object.

        @param pObject : pointer to object
        @param tip : tooltip text for object
    """

    _fl_set_object_helper = cfuncproto(
            load_so_libforms(), "fl_set_object_helper", \
            None, [cty.POINTER(FL_OBJECT), STRING], \
            """void fl_set_object_helper(FL_OBJECT * ob, const char * tip)
            """)
    stip = convert_to_string(tip)
    keep_elem_refs(pObject, tip, stip)
    _fl_set_object_helper(pObject, stip)


def fl_set_object_position(pObject, x, y):
    """
        fl_set_object_position(pObject, x, y)

        Sets position of an object.

        @param pObject : pointer of object
        @param x : horizontal position
        @param y : vertical position
    """

    _fl_set_object_position = cfuncproto(
            load_so_libforms(), "fl_set_object_position", \
            None, [cty.POINTER(FL_OBJECT), FL_Coord, FL_Coord], \
            """void fl_set_object_position(FL_OBJECT * obj, FL_Coord x,
               FL_Coord y)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    keep_elem_refs(pObject, x, ix, y, iy)
    _fl_set_object_position(pObject, ix, iy)


#def fl_get_object_size(pObject, w, h)
def fl_get_object_size(pObject):
    """
        fl_get_object_size(pObject) -> width, height

        Returns the size of an object.

        @param pObject : pointer to object
    """

    _fl_get_object_size = cfuncproto(
            load_so_libforms(), "fl_get_object_size", \
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_Coord),
            cty.POINTER(FL_Coord)], \
            """void fl_get_object_size(FL_OBJECT * obj, FL_Coord * w,
               FL_Coord * h)
            """)
    w, pw = make_FL_Coord_and_pointer()
    h, ph = make_FL_Coord_and_pointer()
    keep_elem_refs(pObject, w, h, pw, ph)
    _fl_get_object_size(pObject, pw, ph)
    return w, h


def fl_set_object_size(pObject, w, h):
    """
        fl_set_object_size(pObject, w, h)

        Sets the size of an object.

        @param pObject : pointer to object
        @param w : width of object
        @param h : height of object
    """

    _fl_set_object_size = cfuncproto(
            load_so_libforms(), "fl_set_object_size", \
            None, [cty.POINTER(FL_OBJECT), FL_Coord, FL_Coord], \
            """void fl_set_object_size(FL_OBJECT * obj, FL_Coord w,
               FL_Coord h)
            """)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(pObject, w, iw, h, ih)
    _fl_set_object_size(pObject, iw, ih)


def fl_set_object_automatic(pObject, flag):
    """
        fl_set_object_automatic(pObject, flag)

        @param pObject : pointer to object
        @param flag : flag (0|1)
    """

    _fl_set_object_automatic = cfuncproto(
            load_so_libforms(), "fl_set_object_automatic",
            None, [cty.POINTER(FL_OBJECT), cty.c_int], \
            """void fl_set_object_automatic(FL_OBJECT * ob, int flag)
            """)
    iflag = convert_to_int(flag)
    keep_elem_refs(pObject, flag, iflag)
    _fl_set_object_automatic(pObject, iflag)


def fl_draw_object_label(pObject):
    """
        fl_draw_object_label(pObject)

        @param pObject : pointer to object
    """

    _fl_draw_object_label = cfuncproto(
            load_so_libforms(), "fl_draw_object_label", \
            None, [cty.POINTER(FL_OBJECT)], \
            """void fl_draw_object_label(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_draw_object_label(pObject)


def fl_draw_object_label_outside(pObject):
    """
        fl_draw_object_label_outside(pObject)

        @param pObject : pointer to object
    """

    _fl_draw_object_label_outside = cfuncproto(
            load_so_libforms(), "fl_draw_object_label_outside",
            None, [cty.POINTER(FL_OBJECT)], \
            """void fl_draw_object_label_outside(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_draw_object_label_outside(pObject)


def fl_get_object_component(pObjectComposite, objclass, compontype, numb):
    """ fl_get_object_component(pObjectComposite, objclass, compontype, numb) -> pObject
    """

    _fl_get_object_component = cfuncproto(
            load_so_libforms(), "fl_get_object_component",
            cty.POINTER(FL_OBJECT), [cty.POINTER(FL_OBJECT), cty.c_int,
            cty.c_int, cty.c_int], \
            """FL_OBJECT * fl_get_object_component(FL_OBJECT * composite,
               int objclass, int type, int numb)
            """)
    iobjclass = convert_to_int(objclass)
    icompontype = convert_to_int(compontype)
    inumb = convert_to_int(numb)
    keep_elem_refs(pObjectComposite, objclass, iobjclass, compontype, \
                   icompontype, numb, inumb)
    retval = _fl_get_object_component(pObjectComposite, iobjclass, \
                                      icompontype, inumb)
    return retval


# cfunction for _fl_for_all_objects
cfunc_int_pobject_pvoid = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
                                        cty.c_void_p)

def fl_for_all_objects(pForm, py_cb, v):
    """
        fl_for_all_objects(pForm, py_cb, v)

        @param pForm : pointer to form
        @param py_cb : python function, fn(pObject, ptr_void) -> num.
        @param v : ?
    """

    _fl_for_all_objects = cfuncproto(
            load_so_libforms(), "fl_for_all_objects", \
            None, [cty.POINTER(FL_FORM), cfunc_int_pobject_pvoid, \
            cty.c_void_p], \
            """void fl_for_all_objects(FL_FORM * form, int ( * cb ) \
               ( FL_OBJECT *, void * ), void * v)
            """)
    c_cb = cfunc_int_pobject_pvoid(py_cb)
    keep_cfunc_refs(c_cb, py_cb)
    keep_elem_refs(pForm, v)
    _fl_for_all_objects(pForm, c_cb, v)


fl_draw_object_outside_label = fl_draw_object_label_outside


def fl_set_object_dblclick(pObject, timeout):
    pObject[0].click_timeout = timeout


def fl_set_object_geometry(pObject, x, y, w, h):
    """
        fl_set_object_geometry(pObject, x, y, w, h)

        Sets the geometry (position and size) of an object.

        @param pObject : pointer to object
        @param x : horizontal position (upper-left corner)
        @param y : vertical position (upper-left corner)
        @param w : width of the object in pixels
        @param h : height of the object in pixels
    """

    _fl_set_object_geometry = cfuncproto(
            load_so_libforms(), "fl_set_object_geometry", \
            None, [cty.POINTER(FL_OBJECT), FL_Coord, FL_Coord, FL_Coord,
            FL_Coord], \
            """void fl_set_object_geometry(FL_OBJECT * obj, FL_Coord x,
            FL_Coord y, FL_Coord w, FL_Coord h)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(pObject, x, ix, y, iy, w, iw, h, ih)
    _fl_set_object_geometry(pObject, ix, iy, iw, ih)


def fl_move_object(pObject, dx, dy):
    """
        fl_move_object(pObject, dx, dy)

        @param pObject : pointer to object
    """

    _fl_move_object = cfuncproto(
            load_so_libforms(), "fl_move_object", \
            None, [cty.POINTER(FL_OBJECT), FL_Coord, FL_Coord], \
            """void fl_move_object(FL_OBJECT * obj, FL_Coord dx, FL_Coord dy)
            """)
    idx = convert_to_int(dx)
    idy = convert_to_int(dy)
    keep_elem_refs(pObject, dx, idx, dy, idy)
    _fl_move_object(pObject, idx, idy)


fl_set_object_lcolor = fl_set_object_lcol


def fl_fit_object_label(pObject, xmargin, ymargin):
    """
        fl_fit_object_label(pObject, xmargin, ymargin)

        @param pObject : pointer to object
    """

    _fl_fit_object_label = cfuncproto(
            load_so_libforms(), "fl_fit_object_label",\
            None, [cty.POINTER(FL_OBJECT), FL_Coord, FL_Coord],\
            """void fl_fit_object_label(FL_OBJECT * obj, FL_Coord xmargin,
               FL_Coord ymargin)
            """)
    ixmargin = convert_to_int(xmargin)
    iymargin = convert_to_int(ymargin)
    keep_elem_refs(pObject, xmargin, ixmargin, ymargin, iymargin)
    _fl_fit_object_label(pObject, ixmargin, iymargin)


#def fl_get_object_geometry(pObject, x, y, w, h):
def fl_get_object_geometry(pObject):
    """
        fl_get_object_geometry(pObject) -> hor-xpos, vert-ypos, width, height

        Returns the geometry (position and size) of an object.

        @param pObject : pointer to object
    """

    _fl_get_object_geometry = cfuncproto(
            load_so_libforms(), "fl_get_object_geometry",\
        None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_Coord),\
        cty.POINTER(FL_Coord), cty.POINTER(FL_Coord), cty.POINTER(FL_Coord)],
        """void fl_get_object_geometry(FL_OBJECT * ob, FL_Coord * x,
           FL_Coord * y, FL_Coord * w, FL_Coord * h)
        """)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    w, pw = make_FL_Coord_and_pointer()
    h, ph = make_FL_Coord_and_pointer()
    keep_elem_refs(pObject, x, px, y, py, w, pw, h, ph)
    _fl_get_object_geometry(pObject, px, py, pw, ph)
    return x, y, w,h


#def fl_get_object_position(pObject, x, y):
def fl_get_object_position(pObject):
    """
        fl_get_object_position(pObject) -> xpos, ypos

        Returns the position of an object.

        @param pObject : pointer to object
    """

    _fl_get_object_position = cfuncproto(
            load_so_libforms(), "fl_get_object_position",\
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_Coord),
            cty.POINTER(FL_Coord)],\
            """void fl_get_object_position(FL_OBJECT * ob, FL_Coord * x,
               FL_Coord * y)
            """)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    keep_elem_refs(pObject, x, px, y, py)
    _fl_get_object_position(pObject, px, py)
    return x,y


def fl_get_object_label(pObject):
    """
        fl_get_object_label(pObject) -> labelname_string

        @param pObject : pointer to object
    """

    _fl_get_object_label = cfuncproto(
            load_so_libforms(), "fl_get_object_label",\
            STRING, [cty.POINTER(FL_OBJECT)],\
            """const char * fl_get_object_label(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_object_label(pObject)
    return retval


# this one takes into account the label

#def fl_get_object_bbox(pObject, x, y, w, h)
def fl_get_object_bbox(pObject):
    """
        fl_get_object_bbox(pObject) -> x, y, w, h

        @param pObject : pointer to object
    """

    _fl_get_object_bbox = cfuncproto(
            load_so_libforms(), "fl_get_object_bbox",\
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_Coord),\
            cty.POINTER(FL_Coord), cty.POINTER(FL_Coord),
            cty.POINTER(FL_Coord)],\
            """void fl_get_object_bbox(FL_OBJECT * obj, FL_Coord * x,
               FL_Coord * y, FL_Coord * w, FL_Coord * h)
            """)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    w, pw = make_FL_Coord_and_pointer()
    h, ph = make_FL_Coord_and_pointer()
    keep_elem_refs(pObject, x, y, w, h, px, py, pw, ph)
    _fl_get_object_bbox(pObject, px, py, pw, ph)
    return x, y, w,h


fl_compute_object_geometry = fl_get_object_bbox


def fl_call_object_callback(pObject):
    """
        fl_call_object_callback(pObject)

        @param pObject : pointer to object
    """

    _fl_call_object_callback = cfuncproto(
            load_so_libforms(), "fl_call_object_callback",\
            None, [cty.POINTER(FL_OBJECT)],\
            """void fl_call_object_callback(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_call_object_callback(pObject)


#already defined in xfdata
#FL_HANDLEPTR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), cty.c_int, \
#                FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)

def fl_set_object_prehandler(pObject, py_HandlerPtr):
    """
        fl_set_object_prehandler(pObject, py_HandlerPtr) ->  pHandlerPtr

        @param pObject : pointer to object
        @param py_HandlerPtr : python callback function, fn(pObject,
           num, coord, coord, num, ptr_void) -> num
    """

    _fl_set_object_prehandler = cfuncproto(
            load_so_libforms(), "fl_set_object_prehandler",
            FL_HANDLEPTR, [cty.POINTER(FL_OBJECT), FL_HANDLEPTR],\
            """FL_HANDLEPTR fl_set_object_prehandler(FL_OBJECT * ob,
               FL_HANDLEPTR phandler)
            """)
    c_HandlerPtr = FL_HANDLEPTR(py_HandlerPtr)
    keep_cfunc_refs(c_HandlerPtr, py_HandlerPtr)
    keep_elem_refs(pObject)
    retval = _fl_set_object_prehandler(pObject, c_HandlerPtr)
    return retval


def fl_set_object_posthandler(pObject, py_HandlerPtr):
    """
        fl_set_object_posthandler(pObject, py_HandlerPtr) -> pHandlerPtr

        @param pObject : pointer to object
        @param py_HandlerPtr : python callback function, fn(pObject,
           num, coord, coord, num, ptr_void) -> num
    """

    _fl_set_object_posthandler = cfuncproto(
            load_so_libforms(), "fl_set_object_posthandler",
            FL_HANDLEPTR, [cty.POINTER(FL_OBJECT), FL_HANDLEPTR],\
            """FL_HANDLEPTR fl_set_object_posthandler(FL_OBJECT * ob,
               FL_HANDLEPTR post)
            """)
    c_HandlerPtr = FL_HANDLEPTR(py_HandlerPtr)
    keep_cfunc_refs(c_HandlerPtr, py_HandlerPtr)
    keep_elem_refs(pObject)
    retval = _fl_set_object_posthandler(pObject, c_HandlerPtr)
    return retval


#already defined in xfdata
#FL_CALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_long)

def fl_set_object_callback(pObject, py_CallbackPtr, argum):
    """
        fl_set_object_callback(pObject, py_CallbackPtr, argum) -> c_callback func.

        Calls a callback function bound to an object, if a condition is met.

        @param pObject : pointer to object
        @param py_CallbackPtr : a python function with no () and no args to
           be used as callback, fn(pObject, longnum)
        @param argum : argument being passed to function
    """

    _fl_set_object_callback = cfuncproto(
            load_so_libforms(), "fl_set_object_callback",\
            FL_CALLBACKPTR, [cty.POINTER(FL_OBJECT), FL_CALLBACKPTR,
            cty.c_long],
            """FL_CALLBACKPTR fl_set_object_callback(FL_OBJECT * obj,\
            FL_CALLBACKPTR callback, long int argument)
            """)
    largum = convert_to_long(argum)
    c_CallbackPtr = FL_CALLBACKPTR(py_CallbackPtr)
    keep_cfunc_refs(c_CallbackPtr, py_CallbackPtr)
    keep_elem_refs(pObject, argum, largum)
    retval = _fl_set_object_callback(pObject, c_CallbackPtr, largum)
    return retval


fl_set_object_align = fl_set_object_lalign
fl_set_call_back = fl_set_object_callback


def fl_redraw_object(pObject):
    """
        fl_redraw_object(pObject)

        @param pObject : pointer to object
    """

    _fl_redraw_object = cfuncproto(
            load_so_libforms(), "fl_redraw_object",\
            None, [cty.POINTER(FL_OBJECT)],\
            """void fl_redraw_object(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    _fl_redraw_object(pObject)


def fl_scale_object(pObject, xs, ys):
    """
        fl_scale_object(pObject, xs, ys)

        Scales (shrink or enlarge) an object.

        @param pObject : pointer to object
        @param xs : new horizontal factor
        @param ys : new vertical factor
    """

    _fl_scale_object = cfuncproto(
            load_so_libforms(), "fl_scale_object",\
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],\
            """void fl_scale_object(FL_OBJECT * ob, double xs, double ys)
            """)
    fxs = convert_to_double(xs)
    fys = convert_to_double(ys)
    keep_elem_refs(pObject, xs, fxs, ys, fys)
    _fl_scale_object(pObject, fxs, fys)


def fl_show_object(pObject):
    """
        fl_show_object(pObject)

        @param pObject : pointer to object
    """

    _fl_show_object = cfuncproto(
            load_so_libforms(), "fl_show_object",\
            None, [cty.POINTER(FL_OBJECT)],\
            """void fl_show_object(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_show_object(pObject)
    pObject[0].visible =1


def fl_hide_object(pObject):
    """
        fl_hide_object(pObject)

        @param pObject : pointer to object
    """

    _fl_hide_object = cfuncproto(
            load_so_libforms(), "fl_hide_object",\
            None, [cty.POINTER(FL_OBJECT)],\
            """void fl_hide_object(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_hide_object(pObject)
    pObject[0].visible =0


def fl_free_object(pObject):
    """
        fl_free_object(pObject)

        @param pObject : pointer to object
    """

    _fl_free_object = cfuncproto(
            load_so_libforms(), "fl_free_object",\
            None, [cty.POINTER(FL_OBJECT)],\
            """void fl_free_object(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    _fl_free_object(pObject)


def fl_delete_object(pObject):
    """
        fl_delete_object(pObject)

        @param pObject : pointer to object
    """

    _fl_delete_object = cfuncproto(
            load_so_libforms(), "fl_delete_object",\
            None, [cty.POINTER(FL_OBJECT)],\
            """void fl_delete_object(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    _fl_delete_object(pObject)


def fl_get_object_return_state(pObject):
    """
        fl_get_object_return_state(pObject) -> ID num

        @param pObject : pointer to object
    """

    _fl_get_object_return_state = cfuncproto(
            load_so_libforms(), "fl_get_object_return_state",
            cty.c_int, [cty.POINTER(FL_OBJECT)],\
            """int fl_get_object_return_state(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_object_return_state(pObject)
    return retval


def fl_trigger_object(pObject):
    """
        fl_trigger_object(pObject)

        @param pObject : pointer to object
    """

    _fl_trigger_object = cfuncproto(
            load_so_libforms(), "fl_trigger_object",\
            None, [cty.POINTER(FL_OBJECT)],\
            """void fl_trigger_object(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    _fl_trigger_object(pObject)


def fl_activate_object(pObject):
    """
        fl_activate_object(pObject)

        @param pObject : pointer to object
    """

    _fl_activate_object = cfuncproto(
            load_so_libforms(), "fl_activate_object",\
            None, [cty.POINTER(FL_OBJECT)],\
            """void fl_activate_object(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_activate_object(pObject)
    pObject[0].active = 1


def fl_deactivate_object(pObject):
    """
        fl_deactivate_object(pObject)

        @param pObject : pointer to object
    """

    _fl_deactivate_object = cfuncproto(
            load_so_libforms(), "fl_deactivate_object",\
            None, [cty.POINTER(FL_OBJECT)],\
            """void fl_deactivate_object(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_deactivate_object(pObject)
    pObject[0].active = 0


# cfunction for _fl_enumerate_fonts
cfunc_none_string = cty.CFUNCTYPE(None, STRING)

def fl_enumerate_fonts(py_output, shortform):
    """ fl_enumerate_fonts(py_output, shortform) -> ID num
    """

    _fl_enumerate_fonts = cfuncproto(
            load_so_libforms(), "fl_enumerate_fonts",\
            cty.c_int, [cfunc_none_string, cty.c_int],\
            """int fl_enumerate_fonts(void ( * output )( const char *s ), \
               int shortform)
            """)
    ishortform = convert_to_int(shortform)
    c_output = cfunc_none_string(py_output)
    keep_cfunc_refs(c_output, py_output)
    keep_elem_refs(shortform, ishortform)
    retval = _fl_enumerate_fonts(c_output, ishortform)
    return retval


def fl_set_font_name(n, name):
    """ fl_set_font_name(n, name) -> ID num
    """

    _fl_set_font_name = cfuncproto(
            load_so_libforms(), "fl_set_font_name",\
            cty.c_int, [cty.c_int, STRING],\
            """int fl_set_font_name(int n, const char * name)
            """)
    inum = convert_to_int(n)
    sname = convert_to_string(name)
    keep_elem_refs(n, inum, name, sname)
    retval = _fl_set_font_name(inum, sname)
    return retval


def fl_set_font(numb, size):
    """ fl_set_font(numb, size)
    """

    _fl_set_font = cfuncproto(
            load_so_libforms(), "fl_set_font",\
            None, [cty.c_int, cty.c_int],\
            """void fl_set_font(int numb, int size)
            """)
    inumb = convert_to_int(numb)
    isize = convert_to_int(size)
    keep_elem_refs(numb, inumb, size, isize)
    _fl_set_font(inumb, isize)


# routines that facilitate free object

#def fl_get_char_height(style, size, asc, desc)
def fl_get_char_height(style, size):
    """ fl_get_char_height(style, size) -> height num., asc, desc
    """

    _fl_get_char_height = cfuncproto(
            load_so_libforms(), "fl_get_char_height",\
            cty.c_int, [cty.c_int, cty.c_int, cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],\
            """int fl_get_char_height(int style, int size, int * asc,
               int * desc)
            """)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    asc, pasc = make_int_and_pointer()          # not sure
    desc, pdesc = make_int_and_pointer()
    keep_elem_refs(style, istyle, size, isize, asc, desc, pasc, pdesc)
    retval = _fl_get_char_height(istyle, isize, pasc, pdesc)
    return retval, asc, desc


def fl_get_char_width(style, size):
    """ fl_get_char_width(style, size) -> width num.
    """

    _fl_get_char_width = cfuncproto(
            load_so_libforms(), "fl_get_char_width",\
            cty.c_int, [cty.c_int, cty.c_int],\
            """int fl_get_char_width(int style, int size)
            """)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    keep_elem_refs(style, istyle, size, isize)
    retval = _fl_get_char_width(istyle, isize)
    return retval


#def fl_get_string_height(style, size, strng, strglen, asc, desc)
def fl_get_string_height(style, size, strng, strglen):
    """ fl_get_string_height(style, size, strng, strglen) -> height num., asc, desc
    """

    _fl_get_string_height = cfuncproto(
            load_so_libforms(), "fl_get_string_height",\
            cty.c_int, [cty.c_int, cty.c_int, STRING, cty.c_int,
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
            """int fl_get_string_height(int style, int size, const char * s,
               int len, int * asc, int * desc)
            """)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    sstrng = convert_to_string(strng)
    istrglen = convert_to_int(strglen)
    #pasc = cty.cast(asc, cty.POINTER(cty.c_int))
    asc, pasc = make_int_and_pointer()
    #pdesc = cty.cast(desc, cty.POINTER(cty.c_int))
    desc, pdesc = make_int_and_pointer()
    keep_elem_refs(style, istyle, size, isize, strng, sstrng, strglen,\
                   istrglen, asc, desc, pasc, pdesc)
    retval = _fl_get_string_height(istyle, isize, sstrng, istrglen,\
                                   pasc, pdesc)
    return retval, asc, desc


def fl_get_string_width(style, size, s, strglen):
    """ fl_get_string_width(style, size, s, strglen) -> width num.
    """

    _fl_get_string_width = cfuncproto(
            load_so_libforms(), "fl_get_string_width",\
            cty.c_int, [cty.c_int, cty.c_int, STRING, cty.c_int],\
            """int fl_get_string_width(int style, int size, const char * s,
               int len)
            """)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    ss = convert_to_string(s)
    istrglen = convert_to_int(strglen)
    keep_elem_refs(style, istyle, size, isize, s, ss, strglen, istrglen)
    retval = _fl_get_string_width(istyle, isize, ss, istrglen)
    return retval


def fl_get_string_widthTAB(style, size, s, strglen):
    """ fl_get_string_widthTAB(style, size, s, strglen) -> width num.
    """

    _fl_get_string_widthTAB = cfuncproto(
            load_so_libforms(), "fl_get_string_widthTAB",\
            cty.c_int, [cty.c_int, cty.c_int, STRING, cty.c_int],\
            """int fl_get_string_widthTAB(int style, int size, const char * s,
               int len)
            """)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    ss = convert_to_string(s)
    istrglen = convert_to_int(strglen)
    keep_elem_refs(style, istyle, size, isize, s, ss, strglen, istrglen)
    retval = _fl_get_string_widthTAB(istyle, isize, ss, istrglen)
    return retval


#def fl_get_string_dimension(fntstyle, fntsize, s, strglen, width, height)
def fl_get_string_dimension(fntstyle, fntsize, s, strglen):
    """ fl_get_string_dimension(fntstyle, fntsize, s, strglen) -> width, height
    """

    _fl_get_string_dimension = cfuncproto(
            load_so_libforms(), "fl_get_string_dimension",\
            None, [cty.c_int, cty.c_int, STRING, cty.c_int,
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
            """void fl_get_string_dimension(int fntstyle, int fntsize,
               const char * s, int len, int * width, int * height)
            """)
    ifntstyle = convert_to_int(fntstyle)
    ifntsize = convert_to_int(fntsize)
    ss = convert_to_string(s)
    istrglen = convert_to_int(strglen)
    width, pwidth = make_int_and_pointer()
    height, pheight = make_int_and_pointer()
    keep_elem_refs(fntstyle, ifntstyle, fntsize, ifntsize, s, ss, strglen,
                   istrglen, width, height, pwidth, pheight)
    _fl_get_string_dimension(ifntstyle, ifntsize, ss, istrglen, pwidth,
                            pheight)
    return width, height


fl_get_string_size = fl_get_string_dimension


#def fl_get_align_xy(align, x, y, w, h, xsize, ysize, xoff, yoff, xx, yy)
def fl_get_align_xy(align, x, y, w, h, xsize, ysize, xoff, yoff):
    """ fl_get_align_xy(align, x, y, w, h, xsize, ysize, xoff, yoff) -> xx, yy
    """

    _fl_get_align_xy = cfuncproto(
            load_so_libforms(), "fl_get_align_xy",\
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,\
            cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.POINTER(cty.c_int),\
            cty.POINTER(cty.c_int)],\
            """void fl_get_align_xy(int align, int x, int y, int w, int h,
            int xsize, int ysize, int xoff, int yoff, int * xx, int * yy)
            """)
    check_admitted_listvalues(align, ALIGN_list)
    ialign = convert_to_int(align)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    ixsize = convert_to_int(xsize)
    iysize = convert_to_int(ysize)
    ixoff = convert_to_int(xoff)
    iyoff = convert_to_int(yoff)
    xx, pxx = make_int_and_pointer()
    yy, pyy = make_int_and_pointer()
    keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, xsize, ixsize,
                   ysize, iysize, xoff, ixoff, yoff, iyoff, xx, yy, pxx, pyy)
    _fl_get_align_xy(ialign, ix, iy, iw, ih, ixsize, iysize, ixoff,
                     iyoff, pxx, pyy)
    return xx, yy


def fl_drw_text(align, x, y, w, h, colr, style, size, txtstr):
    """ fl_drw_text(align, x, y, w, h, colr, style, size, txtstr)
    """

    _fl_drw_text = cfuncproto(
            load_so_libforms(), "fl_drw_text",\
            None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR,
            cty.c_int, cty.c_int, STRING],\
            """void fl_drw_text(int align, FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h, FL_COLOR c, int style, int size, const char * istr)
            """)
    check_admitted_listvalues(align, ALIGN_list)
    ialign = convert_to_int(align)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    s_txtstr = convert_to_string(txtstr)
    keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, style, istyle, size, isize, txtstr, s_txtstr)
    _fl_drw_text(ialign, ix, iy, iw, ih, ulcolr, istyle, isize,
                 s_txtstr)


def fl_drw_text_beside(align, x, y, w, h, colr, style, size, txtstr):
    """ fl_drw_text_beside(align, x, y, w, h, colr, style, size, txtstr)
    """

    _fl_drw_text_beside = cfuncproto(
            load_so_libforms(), "fl_drw_text_beside",\
            None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR,
            cty.c_int, cty.c_int, STRING],\
            """void fl_drw_text_beside(int align, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, FL_COLOR c, int style, int size,
               const char * str)
            """)
    check_admitted_listvalues(align, ALIGN_list)
    ialign = convert_to_int(align)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    s_txtstr = convert_to_string(txtstr)
    keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, style, istyle, size, isize, txtstr, s_txtstr)
    _fl_drw_text_beside(ialign, ix, iy, iw, ih, ulcolr, istyle,
                        isize, s_txtstr)


def fl_drw_text_cursor(align, x, y, w, h, colr, style, size, txtstr, cc, pos):
    """ fl_drw_text_cursor(align, x, y, w, h, colr, style, size, txtstr, cc, pos)
    """

    _fl_drw_text_cursor = cfuncproto(
            load_so_libforms(), "fl_drw_text_cursor",\
            None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord,\
            FL_COLOR, cty.c_int, cty.c_int, STRING, cty.c_int, cty.c_int],\
            """void fl_drw_text_cursor(int align, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, FL_COLOR c, int style, int size,
               const char * str, int cc, int pos)
            """)
    check_admitted_listvalues(align, ALIGN_list)
    ialign = convert_to_int(align)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    s_txtstr = convert_to_string(txtstr)
    icc = convert_to_int(cc)
    ipos = convert_to_int(pos)
    keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, style, istyle, size, isize, txtstr, s_txtstr,
                   cc, icc, pos, ipos)
    _fl_drw_text_cursor(ialign, ix, iy, iw, ih, ulcolr, istyle,
                        isize, s_txtstr, icc, ipos)


def fl_drw_box(style, x, y, w, h, colr, bwIn):
    """ fl_drw_box(style, x, y, w, h, colr, bwIn)
    """

    _fl_drw_box = cfuncproto(
            load_so_libforms(), "fl_drw_box",\
            None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR,
            cty.c_int],\
            """void fl_drw_box(int style, FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h, FL_COLOR c, int bw_in)
            """)
    istyle = convert_to_int(style)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    ibwIn = convert_to_int(bwIn)
    keep_elem_refs(style, istyle, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, bwIn, ibwIn)
    _fl_drw_box(style, x, y, w, h, ulcolr, ibwIn)


FL_DRAWPTR = cty.CFUNCTYPE(None, FL_Coord, FL_Coord, FL_Coord, FL_Coord,
                           cty.c_int, FL_COLOR)

def fl_add_symbol(name, py_DrawPtr, scalable):
    """
        fl_add_symbol(name, py_DrawPtr, scalable) -> num.

        Adds a symbol.

        @param name : name of a symbol
        @param py_DrawPtr : python function to draw symbol, fn(coord, coord,
           coord, coord, num, colr)
        @param scalable : not used
    """

    _fl_add_symbol = cfuncproto(
            load_so_libforms(), "fl_add_symbol",\
            cty.c_int, [STRING, FL_DRAWPTR, cty.c_int],\
            """int fl_add_symbol(const char * name, FL_DRAWPTR drawit,
               int scalable)
            """)
    s_name = convert_to_string(name)
    iscalable = convert_to_int(scalable)
    c_DrawPtr = FL_DRAWPTR(py_DrawPtr)
    keep_cfunc_refs(c_DrawPtr, py_DrawPtr)
    keep_elem_refs(name, s_name, scalable, iscalable)
    retval = _fl_add_symbol(s_name, c_DrawPtr, iscalable)
    return retval


def fl_draw_symbol(label, x, y, w, h, colr):
    """ fl_draw_symbol(label, x, y, w, h, colr) -> num.
    """

    _fl_draw_symbol = cfuncproto(
            load_so_libforms(), "fl_draw_symbol",\
            cty.c_int, [STRING, FL_Coord, FL_Coord, FL_Coord, FL_Coord,
            FL_COLOR],\
            """int fl_draw_symbol(const char * label, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, FL_COLOR col)
            """)
    slabel = convert_to_string(label)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(label, slabel, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr)
    retval = _fl_draw_symbol(slabel, ix, iy, iw, ih, ulcolr)
    return retval


def fl_mapcolor(colr, r, g, b):
    """ fl_mapcolor(colr, r, g, b) -> num.
    """

    _fl_mapcolor = cfuncproto(
            load_so_libforms(), "fl_mapcolor",\
            cty.c_ulong, [FL_COLOR, cty.c_int, cty.c_int, cty.c_int],\
            """long unsigned int fl_mapcolor(FL_COLOR col, int r, int g, int b)
            """)
    ulcolr = convert_to_FL_COLOR(colr)
    ir = convert_to_int(r)
    ig = convert_to_int(g)
    ib = convert_to_int(b)
    keep_elem_refs(colr, ulcolr, r, ir, g, ig, b, ib)
    retval = _fl_mapcolor(ulcolr, ir, ig, ib)
    return retval


def fl_mapcolorname(colr, name):
    """ fl_mapcolorname(colr, name) -> num.
    """

    _fl_mapcolorname = cfuncproto(
            load_so_libforms(), "fl_mapcolorname",\
            cty.c_long, [FL_COLOR, STRING],\
            """long int fl_mapcolorname(FL_COLOR col, const char * name)
            """)
    ulcolr = convert_to_FL_COLOR(colr)
    sname = convert_to_string(name)
    keep_elem_refs(colr, ulcolr, name, sname)
    retval = _fl_mapcolorname(ulcolr, sname)
    return retval


fl_mapcolor_name = fl_mapcolorname


def fl_free_colors(c, n):
    """ fl_free_colors(c, n)
    """

    _fl_free_colors = cfuncproto(
            load_so_libforms(), "fl_free_colors",\
            None, [cty.POINTER(FL_COLOR), cty.c_int],\
            """void fl_free_colors(FL_COLOR * c, int n)
            """)
    inum = convert_to_int(n)
    keep_elem_refs(c, n, inum)
    _fl_free_colors(c, inum)


def fl_free_pixels(pix, n):
    """ fl_free_pixels(pix, n)
    """

    _fl_free_pixels = cfuncproto(
            load_so_libforms(), "fl_free_pixels",\
            None, [cty.POINTER(cty.c_ulong), cty.c_int],\
            """void fl_free_pixels(long unsigned int * pix, int n)
            """)
    inum = convert_to_int(n)
    keep_elem_refs(pix, n, inum)
    _fl_free_pixels(pix, inum)


def fl_set_color_leak(y):
    """ fl_set_color_leak(y)
    """

    _fl_set_color_leak = cfuncproto(
            load_so_libforms(), "fl_set_color_leak",\
            None, [cty.c_int],\
            """void fl_set_color_leak(int y)
            """)
    iy = convert_to_int(y)
    keep_elem_refs(y, iy)
    _fl_set_color_leak(iy)


#def fl_getmcolor(colr, r, g, b):
def fl_getmcolor(colr):
    """ fl_getmcolor(colr) -> num., r, g,b
    """

    _fl_getmcolor = cfuncproto(
            load_so_libforms(), "fl_getmcolor",\
            cty.c_ulong, [FL_COLOR, cty.POINTER(cty.c_int),\
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
            """long unsigned int fl_getmcolor(FL_COLOR i, int * r, int * g,
               int * b)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    r, pr = make_int_and_pointer()
    g, pg = make_int_and_pointer()
    b, pb = make_int_and_pointer()
    keep_elem_refs(colr, ulcolr, r, g, b, pr, pg, pb)
    retval = _fl_getmcolor(ulcolr, pr, pg, pb)
    return retval, r, g,b


def fl_get_pixel(colr):
    """ fl_get_pixel(colr) -> pixel num.
    """

    _fl_get_pixel = cfuncproto(
            load_so_libforms(), "fl_get_pixel",\
            cty.c_ulong, [FL_COLOR],\
            """long unsigned int fl_get_pixel(FL_COLOR col)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(colr, ulcolr)
    retval = _fl_get_pixel(ulcolr)
    return retval


fl_get_flcolor = fl_get_pixel


#def fl_get_icm_color(colr, r, g, b)
def fl_get_icm_color(colr):
    """ fl_get_icm_color(colr) -> r, g,b
    """

    _fl_get_icm_color = cfuncproto(
            load_so_libforms(), "fl_get_icm_color",\
            None, [FL_COLOR, cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],\
            """void fl_get_icm_color(FL_COLOR col, int * r, int * g, int * b)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    r, pr = make_int_and_pointer()
    g, pg = make_int_and_pointer()
    b, pb = make_int_and_pointer()
    keep_elem_refs(colr, ulcolr, r, g, b, pr, pg, pb)
    _fl_get_icm_color(ulcolr, pr, pg, pb)
    return r, g,b


def fl_set_icm_color(colr, r, g, b):
    """ fl_set_icm_color(colr, r, g, b)
    """

    _fl_set_icm_color = cfuncproto(
            load_so_libforms(), "fl_set_icm_color",\
            None, [FL_COLOR, cty.c_int, cty.c_int, cty.c_int],\
            """void fl_set_icm_color(FL_COLOR col, int r, int g, int b)
            """)
    ulcolr = convert_to_FL_COLOR(colr)
    ir = convert_to_int(r)
    ig = convert_to_int(g)
    ib = convert_to_int(b)
    keep_elem_refs(colr, ulcolr, r, g, b, ir, ig, ib)
    _fl_set_icm_color(ulcolr, ir, ig, ib)


def fl_color(colr):
    """ fl_color(colr)
    """

    _fl_color = cfuncproto(
            load_so_libforms(), "fl_color",\
            None, [FL_COLOR],\
            """void fl_color(FL_COLOR col)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(colr, ulcolr)
    _fl_color(ulcolr)


def fl_bk_color(colr):
    """ fl_bk_color(colr)
    """

    _fl_bk_color = cfuncproto(
            load_so_libforms(), "fl_bk_color",\
            None, [FL_COLOR],\
            """void fl_bk_color(FL_COLOR col)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(colr, ulcolr)
    _fl_bk_color(ulcolr)


def fl_textcolor(colr):
    """ fl_textcolor(colr)
    """

    _fl_textcolor = cfuncproto(
            load_so_libforms(), "fl_textcolor",\
            None, [FL_COLOR],\
            """void fl_textcolor(FL_COLOR col)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(colr, ulcolr)
    _fl_textcolor(ulcolr)


def fl_bk_textcolor(colr):
    """ fl_bk_textcolor(colr)
    """

    _fl_bk_textcolor = cfuncproto(
            load_so_libforms(), "fl_bk_textcolor",\
            None, [FL_COLOR],\
            """void fl_bk_textcolor(FL_COLOR col)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(colr, ulcolr)
    _fl_bk_textcolor(ulcolr)


def fl_set_gamma(r, g, b):
    """
        fl_set_gamma(r, g, b)

        @param r : value for red
        @param g : value for green
        @param b : value for blue
    """

    _fl_set_gamma = cfuncproto(
            load_so_libforms(), "fl_set_gamma",\
            None, [cty.c_double, cty.c_double, cty.c_double],\
            """void fl_set_gamma(double r, double g, double b)
            """)
    fr = convert_to_double(r)
    fg = convert_to_double(g)
    fb = convert_to_double(b)
    keep_elem_refs(r, fr, g, fg, b, fb)
    _fl_set_gamma(fr, fg, fb)


def fl_show_errors(y):
    """ fl_show_errors(y)
    """

    _fl_show_errors = cfuncproto(
            load_so_libforms(), "fl_show_errors",\
            None, [cty.c_int],\
            """void fl_show_errors(int y)
            """)
    iy = convert_to_int(y)
    keep_elem_refs(y, iy)
    _fl_show_errors(iy)


# Some macros

def FL_max(a, b):
    if (a > b):
        return a
    else:
        return b

def FL_min(a, b):
    if (a < b):
        return a
    else:
        return b

def FL_abs(a):
    if (a > 0):
        return a
    else:
        return (-a)

def FL_nint(a):
    if int(a) > 0:
        return (a + 0.5)
    else:
        return (a - 0.5)

def FL_clamp(a, amin, amax):
    if (a < amin):
        return amin
    elif (a > amax):
        return amax
    else:
        return a

def FL_crnd(a):
    if FL_Coord(a) > 0:
        return (a + 0.5)
    else:
        return (a - 0.5)


# utilities for new objects

def fl_add_object(pForm, pObject):
    """
        fl_add_object(pForm, pObject)

        @param pForm : pointer to form
        @param pObject : pointer to object
    """

    _fl_add_object = cfuncproto(
            load_so_libforms(), "fl_add_object",\
            None, [cty.POINTER(FL_FORM), cty.POINTER(FL_OBJECT)],\
            """void fl_add_object(FL_FORM * form, FL_OBJECT * obj)
            """)
    keep_elem_refs(pForm, pObject)
    _fl_add_object(pForm, pObject)


def fl_addto_form(pForm):
    """
        fl_addto_form(pForm) -> pForm

        @param pForm : pointer to form
    """

    _fl_addto_form = cfuncproto(
            load_so_libforms(), "fl_addto_form",
            cty.POINTER(FL_FORM), [cty.POINTER(FL_FORM)],\
            """FL_FORM * fl_addto_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    retval = _fl_addto_form(pForm)
    return retval


def fl_make_object(objclass, objtype, x, y, w, h, label, py_HandlePtr):
    """
        fl_make_object(objclass, objtype, x, y, w, h, label, py_HandlePtr) -> pObject
    """

    _fl_make_object = cfuncproto(
            load_so_libforms(), "fl_make_object",\
            cty.POINTER(FL_OBJECT), [cty.c_int, cty.c_int, FL_Coord,\
            FL_Coord, FL_Coord, FL_Coord, STRING, FL_HANDLEPTR],\
            """FL_OBJECT * fl_make_object(int objclass, int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label,
               FL_HANDLEPTR handle)
            """)
    iobjclass = convert_to_int(objclass)
    iobjtype = convert_to_int(objtype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    c_HandlePtr = FL_HANDLEPTR(py_HandlePtr)
    keep_cfunc_refs(c_HandlePtr, py_HandlePtr)
    keep_elem_refs(objclass, objtype, x, y, w, h, label, iobjclass,
                   iobjtype, ix, iy, iw, ih, slabel)
    retval = _fl_make_object(iobjclass, iobjtype, ix, iy, iw,
                             ih, slabel, c_HandlePtr)
    return retval


def fl_add_child(pObject1, pObject2):
    """
        fl_add_child(pObject1, pObject2)

        @param pObject1 : pointer to father object
        @param pObject2 : pointer to child object
    """

    _fl_add_child = cfuncproto(
            load_so_libforms(), "fl_add_child",\
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_OBJECT)],\
            """void fl_add_child(FL_OBJECT * p1, FL_OBJECT * p2)
            """)
    keep_elem_refs(pObject1, pObject2)
    _fl_add_child(pObject1, pObject2)


def fl_set_coordunit(u):
    """
        fl_set_coordunit(u)

        @param u :?
    """

    _fl_set_coordunit = cfuncproto(
            load_so_libforms(), "fl_set_coordunit",\
            None, [cty.c_int],\
            """void fl_set_coordunit(int u)
            """)
    iu = convert_to_int(u)
    keep_elem_refs(u, iu)
    _fl_set_coordunit(iu)


def fl_set_border_width(bw):
    """
        fl_set_border_width(bw)

        Sets the width of the border.

        @param bw : width of border
    """

    _fl_set_border_width = cfuncproto(
            load_so_libforms(), "fl_set_border_width",\
            None, [cty.c_int],\
            """void fl_set_border_width(int bw)
            """)
    ibw = convert_to_int(bw)
    keep_elem_refs(bw, ibw)
    _fl_set_border_width(ibw)


def fl_set_scrollbar_type(sbtype):
    """
        fl_set_scrollbar_type(sbtype)

        @param sbtype : type of scrollbar
    """

    _fl_set_scrollbar_type = cfuncproto(
            load_so_libforms(), "fl_set_scrollbar_type",\
            None, [cty.c_int],\
            """void fl_set_scrollbar_type(int t)
            """)
    check_admitted_listvalues(sbtype, SCROLLTYPE_list)
    isbtype = convert_to_int(sbtype)
    keep_elem_refs(sbtype, isbtype)
    _fl_set_scrollbar_type(isbtype)


def fl_set_thinscrollbar(t):
    if t:
        t_type = FL_THIN_SCROLLBAR
    else:
        t_type = FL_NORMAL_SCROLLBAR
    fl_set_scrollbar_type(t_type)


def fl_flip_yorigin():
    """ fl_flip_yorigin()
    """

    _fl_flip_yorigin = cfuncproto(
            load_so_libforms(), "fl_flip_yorigin",\
            None, [],\
            """void fl_flip_yorigin()
            """)
    _fl_flip_yorigin()


def fl_get_coordunit():
    """ fl_get_coordunit() -> coord_unit num.
    """

    _fl_get_coordunit = cfuncproto(
            load_so_libforms(), "fl_get_coordunit",\
            cty.c_int, [],\
            """int fl_get_coordunit()
            """)
    retval = _fl_get_coordunit()
    return retval


def fl_get_border_width():
    """ fl_get_border_width() -> width num.
    """

    _fl_get_border_width = cfuncproto(
            load_so_libforms(), "fl_get_border_width",\
            cty.c_int, [],\
            """int fl_get_border_width()
            """)
    retval = _fl_get_border_width()
    return retval


# misc. routines

def fl_ringbell(percent):
    """
        fl_ringbell(percent)

        Sounds the keyboard ringbell (if capable).

        @param percent : volume value for the bell, min -100 (off), max  100,
           0 is default
    """

    _fl_ringbell = cfuncproto(
            load_so_libforms(), "fl_ringbell",\
            None, [cty.c_int],\
            """void fl_ringbell(int percent)
            """)
    ipercent = convert_to_int(percent)
    keep_elem_refs(percent, ipercent)
    _fl_ringbell(ipercent)


#def fl_gettime(sec, usec)
def fl_gettime():
    """
        fl_gettime() -> sec, usec

        Returns the current time, expressed in seconds and microseconds
        since 00:00 GMT January, 1970. It is most useful for computing
        time differences
    """

    _fl_gettime = cfuncproto(
            load_so_libforms(), "fl_gettime",\
            None, [cty.POINTER(cty.c_long), cty.POINTER(cty.c_long)],\
            """void fl_gettime(long int * sec, long int * usec)
            """)
    sec, psec = make_long_and_pointer()
    usec, pusec = make_long_and_pointer()
    keep_elem_refs(sec, usec, psec, pusec)
    _fl_gettime(psec, pusec)
    return sec, usec


def fl_now():
    """
        fl_now() -> string

        Returns a string form of the current date and time. The format of
        the string is of the form "Wed Jun 30 21:49:08 1993"
    """

    _fl_now = cfuncproto(
            load_so_libforms(), "fl_now",\
            STRING, [],\
            """const char * fl_now()
            """)
    retval = _fl_now()
    return retval


def fl_whoami():
    """
        fl_whoami() -> string

        Returns the user name who is running the application.
    """

    _fl_whoami = cfuncproto(
            load_so_libforms(), "fl_whoami",\
            STRING, [],\
            """const char * fl_whoami()
            """)
    retval = _fl_whoami()
    return retval


def fl_mouse_button():
    """ fl_mouse_button() -> num.
    """

    _fl_mouse_button = cfuncproto(
            load_so_libforms(), "fl_mouse_button",\
            cty.c_long, [],\
            """long int fl_mouse_button()
            """)
    retval = _fl_mouse_button()
    return retval

fl_mousebutton = fl_mouse_button



def fl_strdup(strng):
    """ fl_strdup(strng) -> string
    """

    _fl_strdup = cfuncproto(
            load_so_libforms(), "fl_strdup",\
            STRING, [STRING],\
            """char * fl_strdup(const char * s)
            """)
    sstrng = convert_to_string(strng)
    keep_elem_refs(strng, sstrng)
    retval = _fl_strdup(sstrng)
    return retval


def fl_set_err_logfp(pFile):
    """ fl_set_err_logfp(pFile)
    """

    _fl_set_err_logfp = cfuncproto(
            load_so_libforms(), "fl_set_err_logfp",\
            None, [cty.POINTER(FILE)],\
            """void fl_set_err_logfp(FILE * fp)
            """)
    keep_elem_refs(pFile)
    _fl_set_err_logfp(pFile)

# This function was called 'fl_set_error_logfp/' in XForms 0.89.
fl_set_error_logfp = fl_set_err_logfp



def fl_set_error_handler(py_ErrorFunc):
    """
        fl_set_error_handler(py_ErrorFunc)
    """

    _fl_set_error_handler = cfuncproto(
            load_so_libforms(), "fl_set_error_handler",\
            None, [FL_ERROR_FUNC],\
            """void fl_set_error_handler(FL_ERROR_FUNC user_func)
            """)
    c_ErrorFunc = FL_ERROR_FUNC(py_ErrorFunc)
    keep_cfunc_refs(c_ErrorFunc, py_ErrorFunc)
    retval = _fl_set_error_handler(c_ErrorFunc)
    return retval


def fl_get_cmdline_args(p1):
    """ fl_get_cmdline_args(p1) -> string
    """

    _fl_get_cmdline_args = cfuncproto(
            load_so_libforms(), "fl_get_cmdline_args",\
            cty.POINTER(STRING), [cty.POINTER(cty.c_int)],\
            """)char * * fl_get_cmdline_args(int * p1)
            """)
    keep_elem_refs(p1)
    retval = _fl_get_cmdline_args(p1)
    return retval


# these give more flexibility for future changes. Also application
# can re-assign these pointers to whatever function it wants, e.g.,
# to a shared memory pool allocator.

#fl_free = (cty.CFUNCTYPE(None, cty.c_void_p)).in_dll(load_so_libforms(), 'fl_free')
def fl_free(p1):
    """ fl_free(p1)
    """

    _fl_free = cfuncproto(
            load_so_libforms(), "fl_free",\
            None, [cty.c_void_p],
            """void ( * fl_free )( void *)
            """)
    keep_elem_refs(p1)
    _fl_free(p1)


# cfunction for _fl_malloc
cfunc_none_sizet = cty.CFUNCTYPE(cty.c_void_p, size_t)

# low-level function maybe unused in python
##fl_malloc = (cty.CFUNCTYPE(cty.c_void_p, size_t)).in_dll(load_so_libforms(),
#             'fl_malloc')
#def fl_malloc(size):
#    """ fl_malloc(size) -> pointer
#    """#
#   _fl_malloc = cfuncproto(
#           load_so_libforms(), "fl_malloc",\
#           cty.c_void_p, [size_t],
#           """void * ( * fl_malloc )( size_t)
#           """)
#    uisize = convert_to_uint(size)
#    keep_elem_refs(size, uisize)
#    retval = _fl_malloc(uisize)
#    return retval


# cfunction for _fl_calloc
cfunc_none_sizet_sizet = cty.CFUNCTYPE(cty.c_void_p, size_t, size_t)

# low-level function maybe unused in python
##fl_calloc = (cty.CFUNCTYPE(cty.c_void_p, size_t, size_t)).in_dll(\
#             load_so_libforms(), 'fl_calloc')
#def fl_calloc(size):
#    """ fl_calloc(size) -> pointer
#    """#
#   _fl_calloc = cfuncproto(
#        load_so_libforms(), "fl_malloc",\
#        cty.c_void_p, [size_t, size_t],
#        """void * ( * fl_calloc )( size_t)
#        """)
#    uisize = convert_to_uint(size)
#    keep_elem_refs(size, uisize)
#    retval = _fl_calloc(uisize)
#    return retval


# cfunction for _fl_realloc
cfunc_voidp_voidp_sizet = cty.CFUNCTYPE(cty.c_void_p, cty.c_void_p, size_t)

# low-level function maybe unused in python
##fl_realloc = (cty.CFUNCTYPE(cty.c_void_p, cty.c_void_p, size_t)).in_dll(\
#               load_so_libforms(), 'fl_realloc')
#def fl_realloc(py_p1, size):
#    """ fl_realloc(py_p1, size) -> pointer
#    """#
#    _fl_realloc = cfuncproto(
#        load_so_libforms(), "fl_realloc",\
#        cty.c_void_p, [cty.c_void_p, size_t],
#        """void * ( * fl_realloc )( void*
#        """)
#    uisize = convert_to_uint(size)
#    c_p1 = cfunc_voidp_voidp_sizet(py_p1)
#    keep_cfunc_refs(c_p1)
#    keep_elem_refs(size, uisize)
#    retval = _fl_realloc(c_p1, uisize)
#    return retval


def fl_msleep(msec):
    """
        fl_msleep(msec) -> num.

        Waits for a number of milliseconds (with the best resolution
        possible on your system)

        @param msec : milliseconds to sleep
    """

    _fl_msleep = cfuncproto(
            load_so_libforms(), "fl_msleep",\
            cty.c_int, [cty.c_ulong],\
            """int fl_msleep(long unsigned int msec)
            """)
    ulmsec = convert_to_ulong(msec)
    keep_elem_refs(msec, ulmsec)
    retval = _fl_msleep(ulmsec)
    return retval


def FL_is_gray(v):
    if (v == GrayScale) or (v == StaticGray):
        return True
    else:
        return False


def FL_is_rgb(v):
    if (v == TrueColor) or (v == DirectColor):
        return True
    else:
        return False


# Current version only runs in single visual mode
def fl_get_vclass():
    return fl_vmode


def fl_get_form_vclass(a):
    return fl_vmode


def fl_get_gc():
    return fl_state[fl_vmode].gc[0]


def fl_mode_capable(mode, warn):
    """
        fl_mode_capable(mode, warn) -> mode num.

        Determines the visual classes the system is capable of. It returns
        1 if the system is capable of displaying in this visual class and
        0 otherwise.

        @param mode : visual mode (i.e. xfc.FL_GrayScale, xfc.FL_StaticGray,
           xfc.FL_PseudoColor, xfc.FL_StaticColor, xfc.FL_DirectColor and
           xfc.FL_TrueColor)
        @param warn : warning (0|1), if set a warning is printed out in case
           the capability asked for isn't available
    """

    _fl_mode_capable = cfuncproto(
            load_so_libforms(), "fl_mode_capable",\
            cty.c_int, [cty.c_int, cty.c_int],\
            """int fl_mode_capable(int mode, int warn)
            """)
    imode = convert_to_int(mode)
    iwarn = convert_to_int(warn)
    keep_elem_refs(mode, warn, imode, iwarn)
    retval = _fl_mode_capable(imode, iwarn)
    return retval


def fl_default_win():
    return fl_state[0].trailblazer
    #fl_state[fl_vmode].trailblazer


def fl_default_window():
    return fl_state[0].trailblazer
    #fl_state[fl_vmode].trailblazer


# Some basic drawing routines

# Rectangles

def fl_rectangle(fill, x, y, w, h, colr):
    """ fl_rectangle(fill, x, y, w, h, colr)
    """

    _fl_rectangle = cfuncproto(
            load_so_libforms(), "fl_rectangle",\
            None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord,
            FL_COLOR],\
            """void fl_rectangle(int fill, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ifill = convert_to_int(fill)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(fill, x, y, w, h, colr, ifill, ix, iy, iw, ih,
                   ulcolr)
    _fl_rectangle(ifill, ix, iy, iw, ih, ulcolr)


def fl_rectbound(x, y, w, h, colr):
    """ fl_rectbound(x, y, w, h, colr)
    """

    _fl_rectbound = cfuncproto(
            load_so_libforms(), "fl_rectbound",\
            None, [FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR],\
            """void fl_rectbound(FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(x, y, w, h, colr, ix, iy, iw, ih, ulcolr)
    _fl_rectbound(ix, iy, iw, ih, ulcolr)


def fl_rectf(x, y, w, h, colr):
    fl_rectangle(1, x, y, w, h, colr)


def fl_rect(x, y, w, h, colr):
    fl_rectangle(0, x, y, w, h, colr)


# Rectangle with rounded-corners

def fl_roundrectangle(fill, x, y, w, h, colr):
    """ fl_roundrectangle(fill, x, y, w, h, colr)
    """

    _fl_roundrectangle = cfuncproto(
            load_so_libforms(), "fl_roundrectangle",\
            None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord,
            FL_COLOR],\
            """void fl_roundrectangle(int fill, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ifill = convert_to_int(fill)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(fill, x, y, w, h, colr, ifill, ix, iy, iw, ih,
                   ulcolr)
    _fl_roundrectangle(ifill, ix, iy, iw, ih, ulcolr)


def fl_roundrectf(x, y, w, h, colr):
    fl_roundrectangle(1, x, y, w, h, colr)


def fl_roundrect(x, y, w, h, colr):
    fl_roundrectangle(0, x, y, w, h, colr)


# General polygon and polylines

def fl_polygon(fill, pPoint, n, colr):
    """ fl_polygon(fill, pPoint, n, colr)
    """

    _fl_polygon = cfuncproto(
            load_so_libforms(), "fl_polygon",\
            None, [cty.c_int, cty.POINTER(FL_POINT), cty.c_int, FL_COLOR],\
            """void fl_polygon(int fill, FL_POINT * xp, int n, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ifill = convert_to_int(fill)
    inum = convert_to_int(n)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(fill, pPoint, n, colr, ifill, inum, ulcolr)
    _fl_polygon(ifill, pPoint, inum, ulcolr)


def fl_polyf(pPoint, n, colr):
    fl_polygon(1, pPoint, n, colr)


def fl_polyl(pPoint, n, colr):
    fl_polygon(0, pPoint, n, colr)

def fl_polybound(pPoint, n, colr):
    fl_polygon(1, pPoint, n, colr)
    fl_polygon(0, pPoint, n, FL_BLACK)


def fl_lines(pPoint, n, colr):
    """ fl_lines(pPoint, n, colr)
    """

    _fl_lines = cfuncproto(
            load_so_libforms(), "fl_lines",\
            None, [cty.POINTER(FL_POINT), cty.c_int, FL_COLOR],\
            """void fl_lines(FL_POINT * xp, int n, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    inum = convert_to_int(n)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pPoint, n, colr, inum, ulcolr)
    _fl_lines(pPoint, inum, ulcolr)


def fl_line(xi, yi, xf, yf, colr):
    """ fl_line(xi, yi, xf, yf, colr)
    """

    _fl_line = cfuncproto(
            load_so_libforms(), "fl_line",\
            None, [FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR],\
            """void fl_line(FL_Coord xi, FL_Coord yi, FL_Coord xf,
               FL_Coord yf, FL_COLOR c)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ixi = convert_to_int(xi)
    iyi = convert_to_int(yi)
    ixf = convert_to_int(xf)
    iyf = convert_to_int(yf)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(xi, yi, xf, yf, colr, ixi, iyi, ixf, iyf, ulcolr)
    _fl_line(ixi, iyi, ixf, iyf, ulcolr)


def fl_point(x, y, colr):
    """ fl_point(x, y, colr)
    """

    _fl_point = cfuncproto(
            load_so_libforms(), "fl_point",\
            None, [FL_Coord, FL_Coord, FL_COLOR],\
            """void fl_point(FL_Coord x, FL_Coord y, FL_COLOR c)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(x, y, colr, ix, iy, ulcolr)
    _fl_point(ix, iy, ulcolr)


def fl_points(pPoint, np, colr):
    """ fl_points(pPoint, np, colr)
    """

    _fl_points = cfuncproto(
            load_so_libforms(), "fl_points",\
            None, [cty.POINTER(FL_POINT), cty.c_int, FL_COLOR],\
            """void fl_points(FL_POINT * p, int np, FL_COLOR c)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    inump = convert_to_int(np)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pPoint, np, colr, inump, ulcolr)
    _fl_points(pPoint, inump, ulcolr)


fl_simple_line = fl_line


def fl_dashedlinestyle(dash, ndash):
    """ fl_dashedlinestyle(dash, ndash)
    """

    _fl_dashedlinestyle = cfuncproto(
            load_so_libforms(), "fl_dashedlinestyle",\
            None, [STRING, cty.c_int],\
            """void fl_dashedlinestyle(const char * dash, int ndash)
            """)
    sdash = convert_to_string(dash)
    indash = convert_to_int(ndash)
    keep_elem_refs(dash, ndash, sdash, indash)
    _fl_dashedlinestyle(sdash, indash)


def fl_update_display(block):
    """ fl_update_display(block)
    """

    _fl_update_display = cfuncproto(
            load_so_libforms(), "fl_update_display",\
            None, [cty.c_int],\
            """void fl_update_display(int block)
            """)
    iblock = convert_to_int(block)
    keep_elem_refs(block, iblock)
    _fl_update_display(iblock)


def fl_diagline(x, y, w, h, colr):
    fl_line(x, y, (x) + (w) - 1, (y) + (h) - 1, colr)


# Line attributes

def fl_linewidth(n):
    """ fl_linewidth(n)
    """

    _fl_linewidth = cfuncproto(
            load_so_libforms(), "fl_linewidth",\
            None, [cty.c_int],\
            """void fl_linewidth(int n)
            """)
    inum = convert_to_int(n)
    keep_elem_refs(n, inum)
    _fl_linewidth(inum)


def fl_linestyle(n):
    """ fl_linestyle(n)
    """

    _fl_linestyle = cfuncproto(
            load_so_libforms(), "fl_linestyle",\
            None, [cty.c_int],\
            """void fl_linestyle(int n)
            """)
    inum = convert_to_int(n)
    keep_elem_refs(n, inum)
    _fl_linestyle(inum)


def fl_drawmode(request):
    """ fl_drawmode(request)
    """

    _fl_drawmode = cfuncproto(
            load_so_libforms(), "fl_drawmode",\
            None, [cty.c_int],\
            """void fl_drawmode(int request)
            """)
    irequest = convert_to_int(request)
    keep_elem_refs(request, irequest)
    _fl_drawmode(irequest)


def fl_get_linewidth():
    """ fl_get_linewidth() -> width num.
    """

    _fl_get_linewidth = cfuncproto(
            load_so_libforms(), "fl_get_linewidth",\
            cty.c_int, [],\
            """int fl_get_linewidth()
            """)
    retval = _fl_get_linewidth()
    return retval


def fl_get_linestyle():
    """ fl_get_linestyle() -> style num.
    """

    _fl_get_linestyle = cfuncproto(
            load_so_libforms(), "fl_get_linestyle",\
            cty.c_int, [],\
            """int fl_get_linestyle()
            """)
    retval = _fl_get_linestyle()
    return retval


def fl_get_drawmode():
    """ fl_get_drawmode() -> mode num.
    """

    _fl_get_drawmode = cfuncproto(
            load_so_libforms(), "fl_get_drawmode",\
            cty.c_int, [],\
            """int fl_get_drawmode()
            """)
    retval = _fl_get_drawmode()
    return retval


fl_set_linewidth = fl_linewidth
fl_set_linestyle = fl_linestyle
fl_set_drawmode = fl_drawmode


# Ellipses

def fl_oval(fill, x, y, w, h, colr):
    """ fl_oval(fill, x, y, w, h, colr)
    """

    _fl_oval = cfuncproto(
            load_so_libforms(), "fl_oval",\
            None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord,
            FL_COLOR],\
            """void fl_oval(int fill, FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ifill = convert_to_int(fill)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(fill, x, y, w, h, colr, ifill, ix, iy, iw, ih,
                   ulcolr)
    _fl_oval(ifill, ix, iy, iw, ih, ulcolr)


def fl_ovalbound(x, y, w, h, colr):
    """ fl_ovalbound(x, y, w, h, colr)
    """

    _fl_ovalbound = cfuncproto(
            load_so_libforms(), "fl_ovalbound",\
            None, [FL_Coord, FL_Coord, FL_Coord, FL_Coord, FL_COLOR],\
            """void fl_ovalbound(FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(x, y, w, h, colr, ix, iy, iw, ih, ulcolr)
    _fl_ovalbound(ix, iy, iw, ih, ulcolr)


def fl_ovalarc(fill, x, y, w, h, t0, dt, colr):
    """ fl_ovalarc(fill, x, y, w, h, t0, dt, colr)
    """

    _fl_ovalarc = cfuncproto(
            load_so_libforms(), "fl_ovalarc",\
            None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord,
            cty.c_int, cty.c_int, FL_COLOR],\
            """void fl_ovalarc(int fill, FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h, int t0, int dt, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ifill = convert_to_int(fill)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    it0 = convert_to_int(t0)
    idt = convert_to_int(dt)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(fill, x, y, w, h, t0, dt, colr, ifill, ix, iy, iw,
                   ih, it0, idt, ulcolr)
    _fl_ovalarc(ifill, ix, iy, iw, ih, it0, idt, ulcolr)


def fl_ovalf(x, y, w, h, colr):
    fl_oval(1, x, y, w, h, colr)


def fl_ovall(x, y, w, h, colr):
    fl_oval(0, x, y, w, h, colr)


fl_oval_bound = fl_ovalbound


def fl_circf(x, y, r, colr):
    fl_oval(1, (x) - (r), (y) - (r), 2 * (r), 2 * (r), colr)


def fl_circ( x, y, r, colr):
    fl_oval(0, (x) - (r), (y) - (r), 2 * (r), 2 * (r), colr)


# Arcs

def fl_pieslice(fill, x, y, w, h, a1, a2, colr):
    """ fl_pieslice(fill, x, y, w, h, a1, a2, colr)
    """

    _fl_pieslice = cfuncproto(
            load_so_libforms(), "fl_pieslice",\
            None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord,\
            cty.c_int, cty.c_int, FL_COLOR],\
            """void fl_pieslice(int fill, FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h, int a1, int a2, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ifill = convert_to_int(fill)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ia1 = convert_to_int(a1)
    ia2 = convert_to_int(a2)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(fill, x, y, w, h, a1, a2, colr, ifill, ix, iy, iw,
                   ih, ia1, ia2, ulcolr)
    _fl_pieslice(ifill, ix, iy, iw, ih, ia1, ia2, ulcolr)


def fl_arcf(x, y, r, a1, a2, colr):
    fl_pieslice(1, (x - r), (y - r), (2 * r), (2 * r), a1, a2, colr)


def fl_arc(x, y, r, a1, a2, colr):
    fl_pieslice(0, (x - r), (y - r), (2 * r), (2 * r), a1, a2, colr)


# High level drawing routines

def fl_drw_frame(style, x, y, w, h, colr, bw):
    """ fl_drw_frame(style, x, y, w, h, colr, bw)
    """

    _fl_drw_frame = cfuncproto(
            load_so_libforms(), "fl_drw_frame",\
            None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord,\
            FL_COLOR, cty.c_int],\
            """void fl_drw_frame(int style, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, FL_COLOR c, int bw)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    istyle = convert_to_int(style)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    ibw = convert_to_int(bw)
    keep_elem_refs(style, x, y, w, h, colr, bw, istyle, ix, iy, iw,
                   ih, ulcolr, ibw)
    _fl_drw_frame(istyle, ix, iy, iw, ih, ulcolr, ibw)


def fl_drw_checkbox(boxtype, x, y, w, h, colr, bw):
    """ fl_drw_checkbox(boxtype, x, y, w, h, colr, bw)
    """

    _fl_drw_checkbox = cfuncproto(
            load_so_libforms(), "fl_drw_checkbox",\
            None, [cty.c_int, FL_Coord, FL_Coord, FL_Coord, FL_Coord,\
            FL_COLOR, cty.c_int],\
            """void fl_drw_checkbox(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, FL_COLOR col, int bw)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    iboxtype = convert_to_int(boxtype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    ibw = convert_to_int(bw)
    keep_elem_refs(boxtype, x, y, w, h, colr, bw, iboxtype, ix, iy, iw,
                   ih, ulcolr, ibw)
    _fl_drw_checkbox(iboxtype, ix, iy, iw, ih, ulcolr, ibw)


# Interfaces

def fl_get_fontstruct(style, size):
    """ fl_get_fontstruct(style, size) -> XFontStruct class
    """

    _fl_get_fontstruct = cfuncproto(
            load_so_libforms(), "fl_get_fontstruct",\
            cty.POINTER(XFontStruct), [cty.c_int, cty.c_int],\
            """)XFontStruct * fl_get_fontstruct(int style, int size)
            """)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    keep_elem_refs(style, size, istyle, isize)
    retval = _fl_get_fontstruct(istyle, isize)
    return retval


fl_get_font_struct = fl_get_fontstruct
fl_get_fntstruct = fl_get_font_struct


#def fl_get_mouse(x, y, keymask)
def fl_get_mouse():
    """ fl_get_mouse() -> window, x, y, keymask
    """

    _fl_get_mouse = cfuncproto(
            load_so_libforms(), "fl_get_mouse",\
            Window, [cty.POINTER(FL_Coord), cty.POINTER(FL_Coord),\
            cty.POINTER(cty.c_uint)],\
            """Window fl_get_mouse(FL_Coord * x, FL_Coord * y,
              unsigned int * keymask)
            """)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    keymask, pkeymask = make_uint_and_pointer()
    keep_elem_refs(x, y, keymask, px, py, pkeymask)
    retval = _fl_get_mouse(px, py, pkeymask)
    return retval, x, y, keymask


def fl_set_mouse(mx, my):
    """ fl_set_mouse(mx, my)
    """

    _fl_set_mouse = cfuncproto(
            load_so_libforms(), "fl_set_mouse",\
            None, [FL_Coord, FL_Coord],\
            """void fl_set_mouse(FL_Coord mx, FL_Coord my)
            """)
    imx = convert_to_int(mx)
    imy = convert_to_int(my)
    keep_elem_refs(mx, my, imx, imy)
    _fl_set_mouse(imx, imy)


#def fl_get_win_mouse(win, x, y, keymask)
def fl_get_win_mouse(win):
    """ fl_get_win_mouse(win) -> window, x, y, keymask
    """

    _fl_get_win_mouse = cfuncproto(
            load_so_libforms(), "fl_get_win_mouse",\
            Window, [Window, cty.POINTER(FL_Coord), cty.POINTER(FL_Coord),\
            cty.POINTER(cty.c_uint)],\
            """Window fl_get_win_mouse(Window win, FL_Coord * x, FL_Coord * y,
            unsigned int * keymask)
            """)
    ulwin = convert_to_Window(win)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    keymask, pkeymask = make_uint_and_pointer()
    keep_elem_refs(win, x, y, keymask, ulwin, px, py, pkeymask)
    retval = _fl_get_win_mouse(ulwin, px, py, pkeymask)
    return retval, x, y, keymask


#def fl_get_form_mouse(fm, x, y, keymask)
def fl_get_form_mouse(pForm):
    """ fl_get_form_mouse(pForm) -> window, x, y, keymask

        @param pForm : pointer to form
    """

    _fl_get_form_mouse = cfuncproto(
            load_so_libforms(), "fl_get_form_mouse",\
            Window, [cty.POINTER(FL_FORM), cty.POINTER(FL_Coord),\
            cty.POINTER(FL_Coord), cty.POINTER(cty.c_uint)],\
            """Window fl_get_form_mouse(FL_FORM * fm, FL_Coord * x,
               FL_Coord * y, unsigned int * keymask)
            """)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    keymask, pkeymask = make_uint_and_pointer()
    keep_elem_refs(pForm, x, y, keymask)
    retval = _fl_get_form_mouse(pForm, px, py, pkeymask)
    return retval, x, y, keymask


def fl_win_to_form(win):
    """ fl_win_to_form(win) -> pForm
    """

    _fl_win_to_form = cfuncproto(
            load_so_libforms(), "fl_win_to_form",
            cty.POINTER(FL_FORM), [Window],\
            """FL_FORM * fl_win_to_form(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    retval = _fl_win_to_form(ulwin)
    return retval


def fl_set_form_icon(pForm, icon, mask):
    """ fl_set_form_icon(pForm, icon, mask)

        @param pForm : pointer to form
    """

    _fl_set_form_icon = cfuncproto(
            load_so_libforms(), "fl_set_form_icon",\
            None, [cty.POINTER(FL_FORM), Pixmap, Pixmap],\
            """void fl_set_form_icon(FL_FORM * form, Pixmap p, Pixmap m)
            """)
    ulicon = convert_to_Pixmap(icon)
    ulmask = convert_to_Pixmap(mask)
    keep_elem_refs(pForm, icon, mask, ulicon, ulmask)
    _fl_set_form_icon(pForm, ulicon, ulmask)


#def fl_get_decoration_sizes(pForm, top, right, bottom, left)
def fl_get_decoration_sizes(pForm):
    """ fl_get_decoration_sizes(pForm) -> size num., top, right, bottom, left

        @param pForm : pointer to form
    """

    _fl_get_decoration_sizes = cfuncproto(
            load_so_libforms(), "fl_get_decoration_sizes",
            cty.c_int, [cty.POINTER(FL_FORM), cty.POINTER(cty.c_int),\
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],\
            """int fl_get_decoration_sizes(FL_FORM * form, int * top,
               int * right, int * bottom, int * left)
            """)
    top, ptop = make_int_and_pointer()
    right, pright = make_int_and_pointer()
    bottom, pbottom = make_int_and_pointer()
    left, pleft = make_int_and_pointer()
    keep_elem_refs(pForm, top, right, bottom, left, ptop, pright, pbottom,
                   pleft)
    retval = _fl_get_decoration_sizes(pForm, ptop, pright, pbottom, pleft)
    return retval, top, right, bottom, left


# /usr/include/X11/Xlib.h 3026
def XRaiseWindow(pDisplay, win):
    """ XRaiseWindow(pDisplay, win) -> num.
    """

    _XRaiseWindow = cfuncproto(
            load_so_libx11(), "XRaiseWindow",\
            cty.c_int, [cty.POINTER(Display), Window],\
            """int XRaiseWindow(Display * p1, Window p2)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(pDisplay, win, ulwin)
    retval = _XRaiseWindow(pDisplay, ulwin)
    return retval


def fl_raise_form(pForm):
    if pForm[0].window:
        XRaiseWindow(fl_display, pForm[0].window)


# /usr/include/X11/Xlib.h 2791
def XLowerWindow(pDisplay, win):
    """ XLowerWindow(pDisplay, win) -> num.
    """

    _XLowerWindow = cfuncproto(
            load_so_libx11(), "XLowerWindow",\
            cty.c_int, [cty.POINTER(Display), Window],\
            """int XLowerWindow(Display * p1, Window p2)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(pDisplay, win, ulwin)
    retval = _XLowerWindow(pDisplay, ulwin)
    return retval


def fl_lower_form(pForm):
    if pForm[0].window:
        XLowerWindow(fl_display, pForm[0].window)


# /usr/include/X11/Xlib.h 3241
def XSetForeground(pDisplay, p2, p3):
    """ XSetForeground(pDisplay, p2, p3) -> num.
    """

    _XSetForeground = cfuncproto(
            load_so_libx11(), "XSetForeground",\
            cty.c_int, [cty.POINTER(Display), GC, cty.c_ulong],\
            """int XSetForeground(Display * p1, GC p2, long unsigned int p3)
            """)
    ulp3 = convert_to_ulong(p3)
    keep_elem_refs(pDisplay, p2, p3, ulp3)
    retval = _XSetForeground(pDisplay, p2, ulp3)
    return retval


def fl_set_foreground(gc, c):
    XSetForeground(fl_display, gc, fl_get_pixel(c))


# /usr/include/X11/Xlib.h 3168
def XSetBackground(pDisplay, p2, p3):
    """ XSetBackground(pDisplay, p2, p3) -> num.
    """

    _XSetBackground = cfuncproto(
            load_so_libforms(), "XSetBackground",\
            cty.c_int, [cty.POINTER(Display), GC, cty.c_ulong],\
            """int XSetBackground(Display * p1, GC p2, long unsigned int p3)
            """)
    ulp3 = convert_to_ulong(p3)
    keep_elem_refs(pDisplay, p2, p3, ulp3)
    retval = _XSetBackground(pDisplay, p2, ulp3)
    return retval


def fl_set_background(gc, c):
    XSetBackground(fl_display, gc, fl_get_pixel(c))


# General windowing support

def fl_wincreate(title):
    """
        fl_wincreate(title) -> window ID

        Creates a window with a specified title.

        @param title : title of the window
    """

    _fl_wincreate = cfuncproto(
            load_so_libforms(), "fl_wincreate",\
            Window, [STRING],\
            """Window fl_wincreate(const char * label)
            """)
    stitle = convert_to_string(title)
    keep_elem_refs(title, stitle)
    retval = _fl_wincreate(stitle)
    return retval


def fl_winshow(win):
    """
        fl_winshow(win) -> window

        Shows the window (created with fl_wincreate)

        @param win : window id to show
    """

    _fl_winshow = cfuncproto(
            load_so_libforms(), "fl_winshow",\
            Window, [Window],\
            """Window fl_winshow(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    retval = _fl_winshow(ulwin)
    return retval


def fl_winopen(title):
    """
        fl_winopen(title) -> window         Opens (creates and shows) a toplevel window with the specified
        title.


        @param title : title of the window
    """

    _fl_winopen = cfuncproto(
            load_so_libforms(), "fl_winopen", \
            Window, [STRING], \
            """Window fl_winopen(const char * label)
            """)
    stitle = convert_to_string(title)
    keep_elem_refs(title, stitle)
    retval = _fl_winopen(stitle)
    return retval


def fl_winhide(win):
    """ fl_winhide(win)
    """

    _fl_winhide = cfuncproto(
            load_so_libforms(), "fl_winhide", \
            None, [Window], \
            """void fl_winhide(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    _fl_winhide(ulwin)


def fl_winclose(win):
    """ fl_winclose(win)
    """

    _fl_winclose = cfuncproto(
            load_so_libforms(), "fl_winclose", \
            None, [Window], \
            """void fl_winclose(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    _fl_winclose(win, ulwin)


def fl_winset(win):
    """ fl_winset(win)
    """

    _fl_winset = cfuncproto(
            load_so_libforms(), "fl_winset", \
            None, [Window], \
            """void fl_winset(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    _fl_winset(ulwin)


def fl_winreparent(win, winnewparent):
    """
        fl_winreparent(win, winnewparent) -> num.

        Makes a toplevel window a subwindow of another (new parent) window;
        both the window and the parent window must be valid ones.

        @param win : window to be made a subwindow
        @param winnewparent : window to become its new parent window
    """

    _fl_winreparent = cfuncproto(
            load_so_libforms(), "fl_winreparent", \
            cty.c_int, [Window, Window], \
            """int fl_winreparent(Window win, Window new_parent)
            """)
    ulwin = convert_to_Window(win)
    ulwinnewparent = convert_to_Window(winnewparent)
    keep_elem_refs(win, winnewparent, ulwin, ulwinnewparent)
    retval = _fl_winreparent(ulwin, ulwinnewparent)
    return retval


def fl_winfocus(win):
    """ fl_winfocus(win)
    """

    _fl_winfocus = cfuncproto(
            load_so_libforms(), "fl_winfocus", \
            None, [Window], \
            """void fl_winfocus(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    _fl_winfocus(ulwin)


def fl_winget():
    """ fl_winget() -> window
    """

    _fl_winget = cfuncproto(
            load_so_libforms(), "fl_winget", \
            Window, [], \
            """Window fl_winget()
            """)
    retval = _fl_winget()
    return retval


def fl_iconify(win):
    """ fl_iconify(win) -> num.
    """

    _fl_iconify = cfuncproto(
            load_so_libforms(), "fl_iconify", \
            cty.c_int, [Window], \
            """int fl_iconify(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    retval = _fl_iconify(ulwin)
    return retval


def fl_winresize(win, neww, newh):
    """ fl_winresize(win, neww, newh)

        @param win : window to resize
        @param neww : new width
        @param newh : new height
    """

    _fl_winresize = cfuncproto(
            load_so_libforms(), "fl_winresize", \
            None, [Window, FL_Coord, FL_Coord], \
            """void fl_winresize(Window win, FL_Coord neww, FL_Coord newh)
            """)
    ulwin = convert_to_Window(win)
    ineww = convert_to_int(neww)
    inewh = convert_to_int(newh)
    keep_elem_refs(win, neww, newh, ulwin, ineww, inewh)
    _fl_winresize(ulwin, ineww, inewh)


def fl_winmove(win, dx, dy):
    """ fl_winmove(win, dx, dy)

        @param win : window to move to a new position
        @param dx : new horizontal position
        @param dy : new vertical position
    """

    _fl_winmove = cfuncproto(
            load_so_libforms(), "fl_winmove", \
            None, [Window, FL_Coord, FL_Coord], \
            """void fl_winmove(Window win, FL_Coord dx, FL_Coord dy)
            """)
    ulwin = convert_to_Window(win)
    idx = convert_to_int(dx)
    idy = convert_to_int(dy)
    keep_elem_refs(win, dx, dy, ulwin, idx, idy)
    _fl_winmove(ulwin, idx, idy)


def fl_winreshape(win, dx, dy, w, h):
    """ fl_winreshape(win, dx, dy, w, h)
    """

    _fl_winreshape = cfuncproto(
            load_so_libforms(), "fl_winreshape", \
            None, [Window, FL_Coord, FL_Coord, FL_Coord, FL_Coord], \
            """void fl_winreshape(Window win, FL_Coord dx, FL_Coord dy,
               FL_Coord w, FL_Coord h)
            """)
    ulwin = convert_to_Window(win)
    idx = convert_to_int(dx)
    idy = convert_to_int(dy)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(win, dx, dy, w, h, ulwin, idx, idy, iw, ih)
    _fl_winreshape(ulwin, idx, idy, iw, ih)


def fl_winicon(win, icon, mask):
    """
        fl_winicon(win, icon, mask)

        Installs an icon for the window.

        @param win : window
        @param icon : pixmap icon to be installed in window
        @param mask : mask
    """

    _fl_winicon = cfuncproto(
            load_so_libforms(), "fl_winicon", \
            None, [Window, Pixmap, Pixmap], \
            """void fl_winicon(Window win, Pixmap p, Pixmap m)
            """)
    ulwin = convert_to_Window(win)
    ulicon = convert_to_Pixmap(icon)
    ulmask = convert_to_Pixmap(mask)
    keep_elem_refs(win, icon, mask, ulwin, ulicon, ulmask)
    _fl_winicon(ulwin, ulicon, ulmask)


def fl_winbackground(win, bkcolr):
    """
        fl_winbackground(win, bkcolr)

        Sets the background of the window to a certain color.

        @param win : window
        @param bkcolr : background color to be set
    """

    _fl_winbackground = cfuncproto(
            load_so_libforms(), "fl_winbackground", \
            None, [Window, FL_COLOR], \
            """void fl_winbackground(Window win, FL_COLOR bk)
            """)
    check_admitted_listvalues(bkcolr, COLOR_list)
    ulwin = convert_to_Window(win)
    ulbkcolr = convert_to_FL_COLOR(bkcolr)
    keep_elem_refs(win, bkcolr, ulwin, ulbkcolr)
    _fl_winbackground(ulwin, ulbkcolr)


def fl_winstepunit(win, dx, dy):
    """ fl_winstepunit(win, dx, dy)
    """

    _fl_winstepunit = cfuncproto(
            load_so_libforms(), "fl_winstepunit", \
            None, [Window, FL_Coord, FL_Coord], \
            """void fl_winstepunit(Window win, FL_Coord dx, FL_Coord dy)
            """)
    ulwin = convert_to_Window(win)
    idx = convert_to_int(dx)
    idy = convert_to_int(dy)
    keep_elem_refs(win, dx, dy, ulwin, idx, idy)
    _fl_winstepunit(ulwin, idx, idy)


# my add --LK (temporarily)
fl_winstepsize = fl_winstepunit


def fl_winisvalid(win):
    """ fl_winisvalid(win) -> num.
    """

    _fl_winisvalid = cfuncproto(
            load_so_libforms(), "fl_winisvalid", \
            cty.c_int, [Window], \
            """int fl_winisvalid(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    retval = _fl_winisvalid(ulwin)
    return retval


def fl_wintitle(win, title):
    """
        fl_wintitle(win, title)

        Changes the window title (and its associated icon title).

        @param win : window
        @param title : window title to be set
    """

    _fl_wintitle = cfuncproto(
            load_so_libforms(), "fl_wintitle", \
            None, [Window, STRING], \
            """void fl_wintitle(Window win, const char * title)
            """)
    ulwin = convert_to_Window(win)
    stitle = convert_to_string(title)
    keep_elem_refs(win, title, ulwin, stitle)
    _fl_wintitle(ulwin, stitle)


def fl_winicontitle(win, title):
    """
        fl_winicontitle(win, title)

        Changes only the icon title for the window.

        @param win : window
        @param title : icon title to be set
    """

    _fl_winicontitle = cfuncproto(
            load_so_libforms(), "fl_winicontitle", \
            None, [Window, STRING], \
            """void fl_winicontitle(Window win, const char * title)
            """)
    ulwin = convert_to_Window(win)
    stitle = convert_to_string(title)
    keep_elem_refs(win, title, ulwin, stitle)
    _fl_winicontitle(ulwin, stitle)


def fl_winposition(x, y):
    """
        fl_winposition(x, y)

        Sets the position of a window to be opened.

        @param x : horizontal position of the window (upper-left corner)
        @param y : vertical position of the window (upper-left corner)
    """

    _fl_winposition = cfuncproto(
            load_so_libforms(), "fl_winposition",
            None, [FL_Coord, FL_Coord],
            """void fl_winposition(FL_Coord x, FL_Coord y)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    keep_elem_refs(x, y, ix, iy)
    _fl_winposition(ix, iy)


fl_pref_winposition = fl_winposition
fl_win_background = fl_winbackground
fl_set_winstepunit = fl_winstepunit


def fl_winminsize(win, w, h):
    """
        fl_winminsize(win, w, h)

        Sets a constraint for a resizable window whose size will be within a
        range not less than minumum (before calling fl_winopen).

        @param win : window to be set
        @param w : minimum width of window
        @param h : minimum height of window
    """

    _fl_winminsize = cfuncproto(
            load_so_libforms(), "fl_winminsize",
            None, [Window, FL_Coord, FL_Coord],
            """void fl_winminsize(Window win, FL_Coord w, FL_Coord h)
            """)
    ulwin = convert_to_Window(win)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(win, w, h, ulwin, iw, ih)
    _fl_winminsize(ulwin, iw, ih)


def fl_winmaxsize(win, w, h):
    """
        fl_winmaxsize(win, w, h)

        Sets a constraint for a resizable window whose size will be within a
        range not bigger than maximum (before calling fl_winopen).

        @param win : window to be set
        @param w : maximum width of window
        @param h : maximum height of window
    """

    _fl_winmaxsize = cfuncproto(
            load_so_libforms(), "fl_winmaxsize",
            None, [Window, FL_Coord, FL_Coord],
            """void fl_winmaxsize(Window win, FL_Coord w, FL_Coord h)
            """)
    ulwin = convert_to_Window(win)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(win, w, h, ulwin, iw, ih)
    _fl_winmaxsize(ulwin, iw, ih)


def fl_winaspect(win, x, y):
    """
        fl_winaspect(win, x, y)

        Sets the aspect ratio of the window for later interactive resizing.

        @param win : window to be set
        @param x : horizontal aspect ratio
        @param y : vertical aspect ratio
    """

    _fl_winaspect = cfuncproto(
            load_so_libforms(), "fl_winaspect",
            None, [Window, FL_Coord, FL_Coord],
            """void fl_winaspect(Window win, FL_Coord x, FL_Coord y)
            """)
    ulwin = convert_to_Window(win)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    keep_elem_refs(win, x, y, ulwin, ix, iy)
    _fl_winaspect(ulwin, ix, iy)


def fl_reset_winconstraints(win):
    """ fl_reset_winconstraints(win)
    """

    _fl_reset_winconstraints = cfuncproto(
            load_so_libforms(), "fl_reset_winconstraints",
            None, [Window],
            """void fl_reset_winconstraints(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win)
    _fl_reset_winconstraints(ulwin)


def fl_winsize(w, h):
    """
        fl_winsize(w, h)

        Sets the preferred window size (before calling fl_winopen), and makes
        the window non-resizeable.

        @param w : width of the window in pixels
        @param h : height of the window in pixels
    """

    _fl_winsize = cfuncproto(
            load_so_libforms(), "fl_winsize",
            None, [FL_Coord, FL_Coord],
            """void fl_winsize(FL_Coord w, FL_Coord h)
            """)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(w, h, iw, ih)
    _fl_winsize(iw, ih)


def fl_initial_winsize(w, h):
    """
        fl_initial_winsize(w, h)

        Sets the preferred window size (before calling fl_winopen).

        @param w : width of the window in pixels
        @param h : height of the window in pixels
    """

    _fl_initial_winsize = cfuncproto(
            load_so_libforms(), "fl_initial_winsize",
            None, [FL_Coord, FL_Coord],
            """void fl_initial_winsize(FL_Coord w, FL_Coord h)
            """)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(w, h, iw, ih)
    _fl_initial_winsize(iw, ih)


fl_pref_winsize = fl_winsize


def fl_initial_winstate(state):
    """ fl_initial_winstate(state)
    """

    _fl_initial_winstate = cfuncproto(
            load_so_libforms(), "fl_initial_winstate",
            None, [cty.c_int],
            """void fl_initial_winstate(int state)
            """)
    istate = convert_to_int(state)
    keep_elem_refs(state, istate)
    _fl_initial_winstate(istate)


def fl_create_colormap(pXVisualInfo, nfill):
    """ fl_create_colormap(pXVisualInfo, nfill) -> colormap
    """

    _fl_create_colormap = cfuncproto(
            load_so_libforms(), "fl_create_colormap",
            Colormap, [cty.POINTER(XVisualInfo), cty.c_int],
            """)Colormap fl_create_colormap(XVisualInfo * xv, int nfill)
            """)
    infill = convert_to_int(nfill)
    keep_elem_refs(pXVisualInfo, nfill, infill)
    retval = _fl_create_colormap(pXVisualInfo, infill)
    return retval


def fl_wingeometry(x, y, w, h):
    """
        fl_wingeometry(x, y, w, h)

        Sets the initial geometry (position and size) of the window to be
        opened; the window will not be resizable.

        @param x : horizontal position of the window (upper-left corner)
        @param y : vertical position of the window (upper-left corner)
        @param w : width of the window in pixels
        @param h : height of the window in pixels
    """

    _fl_wingeometry = cfuncproto(
            load_so_libforms(), "fl_wingeometry",
            None, [FL_Coord, FL_Coord, FL_Coord, FL_Coord],
            """void fl_wingeometry(FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(x, y, w, h, ix, iy, iw, ih)
    _fl_wingeometry(ix, iy, iw, ih)


fl_pref_wingeometry = fl_wingeometry


def fl_initial_wingeometry(x, y, w, h):
    """
        fl_initial_wingeometry(x, y, w, h)

        Sets the initial geometry (position and size) of the window to be
        opened.

        @param x : horizontal position of the window (upper-left corner)
        @param y : vertical position of the window (upper-left corner)
        @param w : width of the window in pixels
        @param h : height of the window in pixels
    """

    _fl_initial_wingeometry = cfuncproto(
            load_so_libforms(), "fl_initial_wingeometry",
            None, [FL_Coord, FL_Coord, FL_Coord, FL_Coord],
            """void fl_initial_wingeometry(FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(x, y, w, h, ix, iy, iw, ih)
    _fl_initial_wingeometry(ix, iy, iw, ih)


def fl_noborder():
    """
        fl_noborder()

        Suppresses the window manager's decoration (before creating the
        window).
    """

    _fl_noborder = cfuncproto(
            load_so_libforms(), "fl_noborder",
            None, [],
            """void fl_noborder()
            """)
    _fl_noborder()


def fl_transient():
    """
        fl_transient()

        Makes a window a transient one (before creating the window).
    """

    _fl_transient = cfuncproto(
            load_so_libforms(), "fl_transient",
            None, [], \
            """void fl_transient()
            """)
    _fl_transient()


#def fl_get_winsize(win, w, h)
def fl_get_winsize(win):
    """ fl_get_winsize(win) -> width, height

        @param win : window
    """

    _fl_get_winsize = cfuncproto(
            load_so_libforms(), "fl_get_winsize",
            None, [Window, cty.POINTER(FL_Coord), cty.POINTER(FL_Coord)],
            """void fl_get_winsize(Window win, FL_Coord * w, FL_Coord * h)
            """)
    ulwin = convert_to_Window(win)
    iw, pw = make_int_and_pointer()
    ih, ph = make_int_and_pointer()
    keep_elem_refs(win, ulwin, iw, ih, pw, ph)
    _fl_get_winsize(ulwin, pw, ph)
    return iw, ih


#def fl_get_winorigin(win, x, y)
def fl_get_winorigin(win):
    """ fl_get_winorigin(win) -> x, y
    """

    _fl_get_winorigin = cfuncproto(
            load_so_libforms(), "fl_get_winorigin",
            None, [Window, cty.POINTER(FL_Coord), cty.POINTER(FL_Coord)],
            """void fl_get_winorigin(Window win, FL_Coord * x, FL_Coord * y)
            """)
    ulwin = convert_to_Window(win)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    keep_elem_refs(win, ulwin, x, y, px, py)
    _fl_get_winorigin(win, px, py)
    return x, y


#def fl_get_wingeometry(win, x, y, w, h)
def fl_get_wingeometry(win):
    """ fl_get_wingeometry(win) -> x, y, w, h

        @param win : window
    """

    _fl_get_wingeometry = cfuncproto(
            load_so_libforms(), "fl_get_wingeometry",
            None, [Window, cty.POINTER(FL_Coord), cty.POINTER(FL_Coord),
            cty.POINTER(FL_Coord), cty.POINTER(FL_Coord)],
            """void fl_get_wingeometry(Window win, FL_Coord * x, FL_Coord * y,
               FL_Coord * w, FL_Coord * h)
            """)
    ulwin = convert_to_Window(win)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    w, pw = make_FL_Coord_and_pointer()
    h, ph = make_FL_Coord_and_pointer()
    keep_elem_refs(win, x, y, w, h, ulwin, px, py, pw, ph)
    _fl_get_wingeometry(ulwin, px, py, pw, ph)
    return x, y, w, h


# For compatibility
fl_get_win_size = fl_get_winsize
fl_get_win_origin = fl_get_winorigin
fl_get_win_geometry = fl_get_wingeometry
fl_initial_winposition = fl_pref_winposition


def fl_get_display():       # NOT SURE
    return fl_display


def FL_FormDisplay(pForm):   # NOT SURE
    return fl_display


def FL_ObjectDisplay(object):   # NOT SURE
    return fl_display


def FL_IS_CANVAS(pObject):
    if (pObject[0].objclass == FL_CANVAS) or \
        (pObject[0].objclass == FL_GLCANVAS):
        return True
    else:
        return False


# The window an object belongs to - for drawing
def FL_ObjWin(pObject):
    if FL_IS_CANVAS(pObject):
        return fl_get_canvas_id(pObject)
    else:
        return pObject[0].form[0].window


def fl_get_real_object_window(pObject):
    """ fl_get_real_object_window(pObject) -> window

        @param pObject : pointer to object
    """

    _fl_get_real_object_window = cfuncproto(
            load_so_libforms(), "fl_get_real_object_window",
            Window, [cty.POINTER(FL_OBJECT)],
            """Window fl_get_real_object_window(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_real_object_window(pObject)
    return retval


FL_OBJECT_WID = FL_ObjWin


# Replacements for X functions that access the event queue

def fl_XNextEvent(pXEvent):
    """ fl_XNextEvent(pXEvent) -> event num.
    """

    _fl_XNextEvent = cfuncproto(
            load_so_libforms(), "fl_XNextEvent",
            cty.c_int, [cty.POINTER(XEvent)],
            """int fl_XNextEvent(XEvent * xev)
            """)
    keep_elem_refs(pXEvent)
    retval = _fl_XNextEvent(pXEvent)
    return retval


def fl_XPeekEvent(pXEvent):
    """ fl_XPeekEvent(pXEvent) -> event num.
    """

    _fl_XPeekEvent = cfuncproto(
            load_so_libforms(), "fl_XPeekEvent",
            cty.c_int, [cty.POINTER(XEvent)],
            """int fl_XPeekEvent(XEvent * xev)
            """)
    keep_elem_refs(pXEvent)
    retval = _fl_XPeekEvent(pXEvent)
    return retval


def fl_XEventsQueued(mode):
    """ fl_XEventsQueued(mode) -> event num.
    """

    _fl_XEventsQueued = cfuncproto(
            load_so_libforms(), "fl_XEventsQueued",
            cty.c_int, [cty.c_int],
            """int fl_XEventsQueued(int mode)
            """)
    imode = convert_to_int(mode)
    keep_elem_refs(mode, imode)
    retval = _fl_XEventsQueued(imode)
    return retval


def fl_XPutBackEvent(pXEvent):
    """ fl_XPutBackEvent(pXEvent)
    """

    _fl_XPutBackEvent = cfuncproto(
            load_so_libforms(), "fl_XPutBackEvent",
            None, [cty.POINTER(XEvent)],
            """void fl_XPutBackEvent(XEvent * xev)
            """)
    keep_elem_refs(pXEvent)
    _fl_XPutBackEvent(pXEvent)


def fl_last_event():
    """ fl_last_event() -> event
    """

    _fl_last_event = cfuncproto(
            load_so_libforms(), "fl_last_event",
            cty.POINTER(XEvent), [],
            """const char * fl_last_event()
            """)
    retval = _fl_last_event()
    return retval


FL_APPEVENT_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(XEvent), cty.c_void_p)

def fl_set_event_callback(py_AppEventCb, userdata):
    """
        fl_set_event_callback(py_AppEventCb, userdata) -> event callback
    """

    _fl_set_event_callback = cfuncproto(
            load_so_libforms(), "fl_set_event_callback",
            FL_APPEVENT_CB, [FL_APPEVENT_CB, cty.c_void_p],
            """FL_APPEVENT_CB fl_set_event_callback(FL_APPEVENT_CB callback,
               void * user_data)
            """)
    c_AppEventCb = FL_APPEVENT_CB(py_AppEventCb)
    keep_cfunc_refs(c_AppEventCb, py_AppEventCb)
    keep_elem_refs(userdata)
    retval = _fl_set_event_callback(c_AppEventCb, userdata)
    return retval


def fl_set_idle_callback(py_AppEventCb, userdata):
    """ fl_set_idle_callback(py_AppEventCb, userdata) -> event callback func.
    """

    _fl_set_idle_callback = cfuncproto(
            load_so_libforms(), "fl_set_idle_callback",
            FL_APPEVENT_CB, [FL_APPEVENT_CB, cty.c_void_p],
            """FL_APPEVENT_CB fl_set_idle_callback(FL_APPEVENT_CB callback,
               void * user_data)
            """)
    c_AppEventCb = FL_APPEVENT_CB(py_AppEventCb)
    keep_cfunc_refs(c_AppEventCb, py_AppEventCb)
    keep_elem_refs(userdata)
    retval = _fl_set_idle_callback(c_AppEventCb, userdata)
    return retval


def fl_addto_selected_xevent(win, mask):
    """ fl_addto_selected_xevent(win, mask) -> num.
    """

    _fl_addto_selected_xevent = cfuncproto(
            load_so_libforms(), "fl_addto_selected_xevent",
            cty.c_long, [Window, cty.c_long],
            """long int fl_addto_selected_xevent(Window win, long int mask)
            """)
    ulwin = convert_to_Window(win)
    lmask = convert_to_long(mask)
    keep_elem_refs(win, mask, ulwin, lmask)
    retval = _fl_addto_selected_xevent(ulwin, lmask)
    return retval


def fl_remove_selected_xevent(win, mask):
    """ fl_remove_selected_xevent(win, mask) -> num.
    """

    _fl_remove_selected_xevent = cfuncproto(
            load_so_libforms(), "fl_remove_selected_xevent",
            cty.c_long, [Window, cty.c_long],
            """)long int fl_remove_selected_xevent(Window win, long int mask)
            """)
    ulwin = convert_to_Window(win)
    lmask = convert_to_long(mask)
    keep_elem_refs(win, mask, ulwin, lmask)
    retval = _fl_remove_selected_xevent(ulwin, lmask)
    return retval


fl_add_selected_xevent = fl_addto_selected_xevent


def fl_set_idle_delta(delta):
    """ fl_set_idle_delta(delta)
    """

    _fl_set_idle_delta = cfuncproto(
            load_so_libforms(), "fl_set_idle_delta",
            None, [cty.c_long],
            """void fl_set_idle_delta(long int delta)
            """)
    ldelta = convert_to_long(delta)
    keep_elem_refs(delta, ldelta)
    _fl_set_idle_delta(ldelta)


def fl_add_event_callback(win, ev, py_AppEventCb, userdata):
    """
        fl_add_event_callback(win, ev, py_AppEventCb, userdata) -> event callback
    """

    _fl_add_event_callback = cfuncproto(
            load_so_libforms(), "fl_add_event_callback",
            FL_APPEVENT_CB, [Window, cty.c_int, FL_APPEVENT_CB, cty.c_void_p],
            """FL_APPEVENT_CB fl_add_event_callback(Window win, int ev,
               FL_APPEVENT_CB wincb, void * user_data)
            """)
    ulwin = convert_to_Window(win)
    iev = convert_to_int(ev)
    c_AppEventCb = FL_APPEVENT_CB(py_AppEventCb)
    keep_cfunc_refs(c_AppEventCb, py_AppEventCb)
    keep_elem_refs(win, ev, userdata, ulwin, iev)
    retval = _fl_add_event_callback(ulwin, iev, c_AppEventCb, userdata)
    return retval


def fl_remove_event_callback(win, ev):
    """ fl_remove_event_callback(win, ev)
    """

    _fl_remove_event_callback = cfuncproto(
            load_so_libforms(), "fl_remove_event_callback",
            None, [Window, cty.c_int],
            """void fl_remove_event_callback(Window win, int ev)
            """)
    ulwin = convert_to_Window(win)
    iev = convert_to_int(ev)
    keep_elem_refs(win, ev, ulwin, iev)
    _fl_remove_event_callback(ulwin, iev)


def fl_activate_event_callbacks(win):
    """ fl_activate_event_callbacks(win)

        @param win : window whose events are referred to
    """

    _fl_activate_event_callbacks = cfuncproto(
            load_so_libforms(), "fl_activate_event_callbacks",
            None, [Window],
            """void fl_activate_event_callbacks(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    _fl_activate_event_callbacks(ulwin)


def fl_print_xevent_name(where, pXEvent):
    """ fl_print_xevent_name(where, pXEvent) -> pXEvent
    """

    _fl_print_xevent_name = cfuncproto(
            load_so_libforms(), "fl_print_xevent_name",
            cty.POINTER(XEvent), [STRING, cty.POINTER(XEvent)],
            """XEvent * fl_print_xevent_name(const char * where,
               const char * xev)
            """)
    swhere = convert_to_string(where)
    keep_elem_refs(where, pXEvent, swhere)
    retval = _fl_print_xevent_name(swhere, pXEvent)
    return retval


def metakey_down(mask):
    return (mask & Mod1Mask)


def shiftkey_down(mask):
    return (mask & ShiftMask)


def controlkey_down(mask):
    return (mask & ControlMask)


def button_down(mask):
    if (mask & Button1Mask) or (mask & Button2Mask) or \
     (mask & Button3Mask) or (mask & Button4Mask) or \
     (mask & Button5Mask):
        return True
    else:
        return False


# Resources

def fl_initialize(lsysargv, sysargv, appclass, appopt, nappopt):
    """ fl_initialize(numargs, args, applclass, apploptions, numapplopts) -> pDisplay
    """

    _fl_initialize = cfuncproto(
            load_so_libforms(), "fl_initialize",
            cty.POINTER(Display), [cty.POINTER(cty.c_int),
            cty.POINTER(STRING), STRING, cty.POINTER(XrmOptionDescRec),
            cty.c_int],
            """Display * fl_initialize(int * na, char * * arg,
               const char * appclass, FL_CMD_OPT * appopt, int nappopt)
            """)
    verify_version_compatibility()      # verify if installed XForms
                                        # is compatible with this one
    lsysargv = 1
    cliargs_nr = cty.c_int(lsysargv)               #1
    cliargs_nr_p = cty.byref(cliargs_nr)
    argum = "".join(sysargv)
    scliargs = convert_to_string(argum)            # " "
    sappclass = convert_to_string(appclass)
    structopts = cty.POINTER(FL_CMD_OPT)()
    keep_elem_refs(cliargs_nr_p, scliargs, appclass, sappclass, structopts,
                   nappopt)
    retval = _fl_initialize(cliargs_nr_p, scliargs, sappclass, structopts,
                            nappopt)
    return retval


def fl_finish():
    """ fl_finish()
    """

    _fl_finish = cfuncproto(
            load_so_libforms(), "fl_finish",
            None, [],
            """void fl_finish()
            """)
    _fl_finish()


def fl_get_resource(rname, cname, dtype, defval, val, size):
    """ fl_get_resource(rname, cname, dtype, defval, val, size) -> string
    """

    _fl_get_resource = cfuncproto(
            load_so_libforms(), "fl_get_resource",
            STRING, [STRING, STRING, FL_RTYPE, STRING, cty.c_void_p,
            cty.c_int],
            """const char * fl_get_resource(const char * rname,
               const char * cname, FL_RTYPE dtype, const char * defval,
               void * val, int size)
            """)
    srname = convert_to_string(rname)
    scname = convert_to_string(cname)
    idtype = convert_to_int(dtype)
    sdefval = convert_to_string(defval)
    isize = convert_to_int(size)
    keep_elem_refs(rname, cname, dtype, defval, val, size, srname, scname,
                   idtype, sdefval, isize)
    retval = _fl_get_resource(srname, scname, idtype, sdefval, val, isize)
    return retval


def fl_set_resource(resstr, val):
    """ fl_set_resource(resstr, val)

        @param resstr : resource name
        @param val : new string value for resource
    """

    _fl_set_resource = cfuncproto(
            load_so_libforms(), "fl_set_resource",
            None, [STRING, STRING],
            """void fl_set_resource(const char * str, const char * val)
            """)
    sresstr = convert_to_string(resstr)
    sval = convert_to_string(val)
    keep_elem_refs(resstr, val, sresstr, sval)
    _fl_set_resource(sresstr, sval)


def fl_get_app_resources(pResource, n):
    """ fl_get_app_resources(pResource, n)
    """

    _fl_get_app_resources = cfuncproto(
            load_so_libforms(), "fl_get_app_resources",
            None, [cty.POINTER(FL_RESOURCE), cty.c_int],
            """void fl_get_app_resources(FL_RESOURCE * appresource, int n)
            """)
    inum = convert_to_int(n)
    keep_elem_refs(pResource, n, inum)
    _fl_get_app_resources(pResource, inum)


def fl_set_graphics_mode(mode, doublebuf):
    """ fl_set_graphics_mode(mode, doublebuf)
    """

    _fl_set_graphics_mode = cfuncproto(
            load_so_libforms(), "fl_set_graphics_mode",
            None, [cty.c_int, cty.c_int],
            """void fl_set_graphics_mode(int mode, int doublebuf)
            """)
    imode = convert_to_int(mode)
    idoublebuf = convert_to_int(doublebuf)
    keep_elem_refs(mode, doublebuf, imode, idoublebuf)
    _fl_set_graphics_mode(imode, idoublebuf)


def fl_set_visualID(idnum):
    """ fl_set_visualID(idnum)
    """

    _fl_set_visualID = cfuncproto(
            load_so_libforms(), "fl_set_visualID",
            None, [cty.c_long],
            """void fl_set_visualID(long int id)
            """)
    lidnum = convert_to_long(idnum)
    keep_elem_refs(idnum, lidnum)
    _fl_set_visualID(lidnum)


def fl_keysym_pressed(keysym):
    """ fl_keysym_pressed(keysym) -> num.
    """

    _fl_keysym_pressed = cfuncproto(
            load_so_libforms(), "fl_keysym_pressed",
            cty.c_int, [KeySym],
            """int fl_keysym_pressed(KeySym k)
            """)
    ulkeysym = convert_to_ulong(keysym)
    keep_elem_refs(keysym, ulkeysym)
    retval = _fl_keysym_pressed(ulkeysym)
    return retval


fl_keypressed = fl_keysym_pressed


# Program default masks

def fl_set_defaults(mask, pIopt):
    """ fl_set_defaults(mask, pIopt)
    """

    _fl_set_defaults = cfuncproto(
            load_so_libforms(), "fl_set_defaults",
            None, [cty.c_ulong, cty.POINTER(FL_IOPT)],
            """void fl_set_defaults(long unsigned int mask, FL_IOPT * cntl):
            """)
    ulmask = convert_to_ulong(mask)
    keep_elem_refs(mask, pIopt, ulmask)
    _fl_set_defaults(ulmask, pIopt)


def fl_set_tabstop(s):
    """ fl_set_tabstop(s)
    """

    _fl_set_tabstop = cfuncproto(
            load_so_libforms(), "fl_set_tabstop",
            None, [STRING],
            """void fl_set_tabstop(const char * s)
            """)
    ss = convert_to_string(s)
    keep_elem_refs(s, ss)
    _fl_set_tabstop(ss)


def fl_get_defaults(pIopt):
    """ fl_get_defaults(pIopt)
    """

    _fl_get_defaults = cfuncproto(
            load_so_libforms(), "fl_get_defaults",
            None, [cty.POINTER(FL_IOPT)],
            """void fl_get_defaults(FL_IOPT * cntl)
            """)
    keep_elem_refs(pIopt)
    _fl_get_defaults(pIopt)


def fl_get_visual_depth():
    """ fl_get_visual_depth() -> depth num.
    """

    _fl_get_visual_depth = cfuncproto(
            load_so_libforms(), "fl_get_visual_depth",
            cty.c_int, [],
            """int fl_get_visual_depth()
            """)
    retval = _fl_get_visual_depth()
    return retval


def fl_vclass_name(n):
    """ fl_vclass_name(n) -> name string
    """

    _fl_vclass_name = cfuncproto(
            load_so_libforms(), "fl_vclass_name",
            STRING, [cty.c_int],
            """const char * fl_vclass_name(int n)
            """)
    inum = convert_to_int(n)
    keep_elem_refs(n, inum)
    _fl_vclass_name(inum)


def fl_vclass_val(val):
    """ fl_vclass_val(val) -> num.
    """

    _fl_vclass_val = cfuncproto(
            load_so_libforms(), "fl_vclass_val",
            cty.c_int, [STRING],
            """int fl_vclass_val(const char * v)
            """)
    sval = convert_to_string(val)
    keep_elem_refs(val, sval)
    retval = _fl_vclass_val(sval)
    return retval


def fl_set_ul_property(prop, thickness):
    """ fl_set_ul_property(prop, thickness)
    """

    _fl_set_ul_property = cfuncproto(
            load_so_libforms(), "fl_set_ul_property",
            None, [cty.c_int, cty.c_int],
            """void fl_set_ul_property(int prop, int thickness)
            """)
    iprop = convert_to_int(prop)
    ithickness = convert_to_int(thickness)
    keep_elem_refs(prop, thickness, iprop, ithickness)
    _fl_set_ul_property(iprop, ithickness)


def fl_set_clipping(x, y, w, h):
    """ fl_set_clipping(x, y, w, h)
    """

    _fl_set_clipping = cfuncproto(
            load_so_libforms(), "fl_set_clipping",
            None, [FL_Coord, FL_Coord, FL_Coord, FL_Coord],
            """void fl_set_clipping(FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(x, y, w, h, ix, iy, iw, ih)
    _fl_set_clipping(ix, iy, iw, ih)


def fl_set_gc_clipping(gc, x, y, w, h):
    """ fl_set_gc_clipping(gc, x, y, w, h)
    """

    _fl_set_gc_clipping = cfuncproto(
            load_so_libforms(), "fl_set_gc_clipping",
            None, [GC, FL_Coord, FL_Coord, FL_Coord, FL_Coord],
            """void fl_set_gc_clipping(GC gc, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(gc, x, y, w, h, ix, iy, iw, ih)
    _fl_set_gc_clipping(gc, ix, iy, iw, ih)


def fl_unset_gc_clipping(gc):
    """ fl_unset_gc_clipping(gc)
    """

    _fl_unset_gc_clipping = cfuncproto(
            load_so_libforms(), "fl_unset_gc_clipping",
            None, [GC],
            """void fl_unset_gc_clipping(GC gc)
            """)
    keep_elem_refs(gc)
    _fl_unset_gc_clipping(gc)


def fl_set_clippings(pRect, n):
    """ fl_set_clippings(pRect, n)
    """

    _fl_set_clippings = cfuncproto(
            load_so_libforms(), "fl_set_clippings",
            None, [cty.POINTER(FL_RECT), cty.c_int],
            """void fl_set_clippings(FL_RECT * xrect, int n)
            """)
    inum = convert_to_int(n)
    keep_elem_refs(pRect, n, inum)
    _fl_set_clippings(pRect, inum)


def fl_unset_clipping():
    """ fl_unset_clipping()
    """

    _fl_unset_clipping = cfuncproto(
            load_so_libforms(), "fl_unset_clipping",
            None, [],
            """void fl_unset_clipping()
            """)
    _fl_unset_clipping()


def fl_set_text_clipping(x, y, w, h):
    """ fl_set_text_clipping(x, y, w, h)
    """

    _fl_set_text_clipping = cfuncproto(
            load_so_libforms(), "fl_set_text_clipping",
            None, [FL_Coord, FL_Coord, FL_Coord, FL_Coord],
            """void fl_set_text_clipping(FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(x, y, w, h, ix, iy, iw, ih)
    _fl_set_text_clipping(ix, iy, iw, ih)


def fl_unset_text_clipping():
    """ fl_unset_text_clipping()
    """

    _fl_unset_text_clipping = cfuncproto(
            load_so_libforms(), "fl_unset_text_clipping",
            None, [],
            """void fl_unset_text_clipping()
            """)
    _fl_unset_text_clipping()


# How we pack and unpack colors

def FL_PCCLAMP(a):
    if (a > FL_PCMAX):
        return FL_PCMAX
    elif (a < 0):
        return 0
    else:
        return a


# If PCBITS is not 8, we need to apply the RGBmask

# maybe unused in python?
#def FL_GETG(packed):
#    return ((packed) >> FL_GSHIFT) & FL_PCMAX

# maybe unused in python?
#def FL_GETB(packed):
#    return ((packed) >> FL_BSHIFT) & FL_PCMAX

# maybe unused in python?
#def FL_GETA(packed):
#    return ((packed) >> FL_ASHIFT) & FL_PCMAX

# maybe unused in python?
#def FL_PACK3(r, g, b ):
#    return (r<<FL_RSHIFT) | (g<<FL_GSHIFT) | (b<<FL_BSHIFT)

# maybe unused in python?
#FL_PACK = FL_PACK3

# maybe unused in python?
#def FL_PACK4(r, g, b, a):
#    return (FL_PACK3(r, g, b) | (a<<FL_ASHIFT))

# maybe unused in python?
#def FL_UNPACK(p, r, g, b):
#    r = FL_GETR(p)
#    g = FL_GETG(p)
#    b = FL_GETB(p)
#   return r, g, b

# maybe unused in python?
#FL_UNPACK3 = FL_UNPACK

# maybe unused in python?
#def FL_UNPACK4(p, r, g, b, a):
#    r, g, b = FL_UNPACK3(p, r, g, b)
#    a = FL_GETA(p)
#   return r, g, b, a


def fl_popup_add(win, text):
    """ fl_popup_add(win, text) -> pPopup
    """

    _fl_popup_add = cfuncproto(
            load_so_libforms(), "fl_popup_add",
            cty.POINTER(FL_POPUP), [Window, STRING],
            """FL_POPUP * fl_popup_add(Window p1, const char * p2)
            """)
    ulwin = convert_to_Window(win)
    stext = convert_to_string(text)
    keep_elem_refs(win, text, ulwin, stext)
    retval = _fl_popup_add(ulwin, stext)
    return retval


def fl_popup_add_entries(pPopup, entrytxt):
    """ fl_popup_add_entries(pPopup, entrytxt) -> pPopupEntry
    """

    _fl_popup_add_entries = cfuncproto(
            load_so_libforms(), "fl_popup_add_entries",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_POPUP), STRING],
            """FL_POPUP_ENTRY * fl_popup_add_entries(FL_POPUP * p1,
               const char * p2)
            """)
    sentrytxt = convert_to_string(entrytxt)
    keep_elem_refs(pPopup, entrytxt, sentrytxt)
    retval = _fl_popup_add_entries(pPopup, sentrytxt)
    return retval


def fl_popup_insert_entries(pPopup, pPopupEntry, entrytxt):
    """ fl_popup_insert_entries(pPopup, pPopupEntry, entrytxt) -> pPopupEntry
    """

    _fl_popup_insert_entries = cfuncproto(
            load_so_libforms(), "fl_popup_insert_entries",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_POPUP),
            cty.POINTER(FL_POPUP_ENTRY), STRING],
            """FL_POPUP_ENTRY * fl_popup_insert_entries(FL_POPUP * p1,
               FL_POPUP_ENTRY * p2, const char * p3)
            """)
    sentrytxt = convert_to_string(entrytxt)
    keep_elem_refs(pPopup, pPopupEntry, entrytxt, sentrytxt)
    retval = _fl_popup_insert_entries(pPopup, pPopupEntry, sentrytxt)
    return retval


def fl_popup_create(win, text, pPopupItem):
    """ fl_popup_create(win, text, pPopupItem) -> pPopup
    """

    _fl_popup_create = cfuncproto(
            load_so_libforms(), "fl_popup_create",
                cty.POINTER(FL_POPUP), [Window, STRING,
                cty.POINTER(FL_POPUP_ITEM)],
            """FL_POPUP * fl_popup_create(Window p1, const char * p2,
               FL_POPUP_ITEM * p3)
            """)
    ulwin = convert_to_Window(win)
    stext = convert_to_string(text)
    keep_elem_refs(win, text, pPopupItem, ulwin, stext)
    retval = _fl_popup_create(ulwin, stext, pPopupItem)
    return retval


def fl_popup_delete(pPopup):
    """ fl_popup_delete(pPopup) -> num.
    """

    _fl_popup_delete = cfuncproto(
            load_so_libforms(), "fl_popup_delete",
            cty.c_int, [cty.POINTER(FL_POPUP)],
            """int fl_popup_delete(FL_POPUP * p1)
            """)
    keep_elem_refs(pPopup)
    retval = _fl_popup_delete(pPopup)
    return retval


def fl_popup_entry_delete(pPopupEntry):
    """ fl_popup_entry_delete(pPopupEntry) -> num.
    """

    _fl_popup_entry_delete = cfuncproto(
            load_so_libforms(), "fl_popup_entry_delete",
            cty.c_int, [cty.POINTER(FL_POPUP_ENTRY)],
            """int fl_popup_entry_delete(FL_POPUP_ENTRY * p1)
            """)
    keep_elem_refs(pPopupEntry)
    retval = _fl_popup_entry_delete(pPopupEntry)
    return retval


def fl_popup_do(pPopup):
    """ fl_popup_do(pPopup) -> pPopupReturn
    """

    _fl_popup_do = cfuncproto(
            load_so_libforms(), "fl_popup_do",
            cty.POINTER(FL_POPUP_RETURN), [cty.POINTER(FL_POPUP)],
            """FL_POPUP_RETURN * fl_popup_do(FL_POPUP * p1)
            """)
    keep_elem_refs(pPopup)
    retval = _fl_popup_do(pPopup)
    return retval


def fl_popup_set_position(pPopup, x, y):
    """ fl_popup_set_position(pPopup, x, y)

        Sets position where the popup is supposed to appear (if never called
         the popup appears at the mouse position)

        @param pPopup : pointer to Popup
        @param x : horizontal position
        @param y : vertical position
    """

    _fl_popup_set_position = cfuncproto(
            load_so_libforms(), "fl_popup_set_position",
            None, [cty.POINTER(FL_POPUP), cty.c_int, cty.c_int],
            """void fl_popup_set_position(FL_POPUP * p1, int p2, int p3)
            """)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    keep_elem_refs(pPopup, x, y, ix, iy)
    _fl_popup_set_position(pPopup, ix, iy)


def fl_popup_get_policy(pPopup):
    """ fl_popup_get_policy(pPopup) -> num.
    """

    _fl_popup_get_policy = cfuncproto(
            load_so_libforms(), "fl_popup_get_policy",
            cty.c_int, [cty.POINTER(FL_POPUP)],
            """int fl_popup_get_policy(FL_POPUP * p1)
            """)
    keep_elem_refs(pPopup)
    retval = _fl_popup_get_policy(pPopup)
    return retval


def fl_popup_set_policy(pPopup, policy):
    """ fl_popup_set_policy(pPopup, policy) -> num.

        Sets policy of handling the popup (i.e. does it get closed when the
         user releases the mouse button outside an active entry or not?)

        @param pPopup : pointer to Popup
        @param policy : policy to be set
    """

    _fl_popup_set_policy = cfuncproto(
            load_so_libforms(), "fl_popup_set_policy",
            cty.c_int, [cty.POINTER(FL_POPUP), cty.c_int],
            """int fl_popup_set_policy(FL_POPUP * p1, int p2)
            """)
    ipolicy = convert_to_int(policy)
    keep_elem_refs(pPopup, policy, ipolicy)
    retval = _fl_popup_set_policy(pPopup, ipolicy)
    return retval


# already defined in xfdata
#FL_POPUP_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_POPUP_RETURN))

def fl_popup_set_callback(pPopup, py_PopupCb):
    """ fl_popup_set_callback(pPopup, py_PopupCb) -> popup callback func.
    """

    _fl_popup_set_callback = cfuncproto(
            load_so_libforms(), "fl_popup_set_callback",
            FL_POPUP_CB, [cty.POINTER(FL_POPUP), FL_POPUP_CB],
            """FL_POPUP_CB fl_popup_set_callback(FL_POPUP * p1,
               FL_POPUP_CB p2)
            """)
    c_PopupCb = FL_POPUP_CB(py_PopupCb)
    keep_cfunc_refs(c_PopupCb, py_PopupCb)
    keep_elem_refs(pPopup)
    retval = _fl_popup_set_callback(pPopup, c_PopupCb)
    return retval


#def fl_popup_get_title_font(pPopup, style, size)
def fl_popup_get_title_font(pPopup):
    """ fl_popup_get_title_font(pPopup) -> style, size
    """

    _fl_popup_get_title_font = cfuncproto(
            load_so_libforms(), "fl_popup_get_title_font",
            None, [cty.POINTER(FL_POPUP), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """void fl_popup_get_title_font(FL_POPUP * p1, int * p2,
               int * p3)
            """)
    style, pstyle = make_int_and_pointer()
    size, psize = make_int_and_pointer()
    keep_elem_refs(pPopup, style, size, pstyle, psize)
    _fl_popup_get_title_font(pPopup, pstyle, psize)
    return style, size


def fl_popup_set_title_font(pPopup, style, size):
    """ fl_popup_set_title_font(pPopup, style, size)
    """

    _fl_popup_set_title_font = cfuncproto(
            load_so_libforms(), "fl_popup_set_title_font",
            None, [cty.POINTER(FL_POPUP), cty.c_int, cty.c_int],
            """void fl_popup_set_title_font(FL_POPUP * p1, int p2, int p3)
            """)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    keep_elem_refs(pPopup, style, size, istyle, isize)
    _fl_popup_set_title_font(pPopup, istyle, isize)


#def fl_popup_entry_get_font(pPopup, style, size)
def fl_popup_entry_get_font(pPopup):
    """ fl_popup_entry_get_font(pPopup) -> style, size
    """

    _fl_popup_entry_get_font = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_font",
            None, [cty.POINTER(FL_POPUP), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """void fl_popup_entry_get_font(FL_POPUP * p1, int * p2, int * p3)
            """)
    style, pstyle = make_int_and_pointer()
    size, psize = make_int_and_pointer()
    keep_elem_refs(pPopup, style, size, pstyle, psize)
    _fl_popup_entry_get_font(pPopup, pstyle, psize)
    return style, size


def fl_popup_entry_set_font(pPopup, style, size):
    """ fl_popup_entry_set_font(pPopup, style, size)

        @param pPopup : pointer to Popup
        @param style : style of the popup entry
        @param size : size of the popup entry
    """

    _fl_popup_entry_set_font = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_font",
            None, [cty.POINTER(FL_POPUP), cty.c_int, cty.c_int],
            """void fl_popup_entry_set_font(FL_POPUP * p1, int p2, int p3)
            """)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    keep_elem_refs(pPopup, style, size, istyle, isize)
    _fl_popup_entry_set_font(pPopup, istyle, isize)


def fl_popup_get_bw(pPopup):
    """ fl_popup_get_bw(pPopup) -> borderwidth
    """

    _fl_popup_get_bw = cfuncproto(
            load_so_libforms(), "fl_popup_get_bw",
            cty.c_int, [cty.POINTER(FL_POPUP)],
            """int fl_popup_get_bw(FL_POPUP * p1)
            """)
    keep_elem_refs(pPopup)
    retval = _fl_popup_get_bw(pPopup)
    return retval


def fl_popup_set_bw(pPopup, bw):
    """ fl_popup_set_bw(pPopup, bw) -> num.
    """

    _fl_popup_set_bw = cfuncproto(
            load_so_libforms(), "fl_popup_set_bw",
            cty.c_int, [cty.POINTER(FL_POPUP), cty.c_int],
            """int fl_popup_set_bw(FL_POPUP * p1, int p2)
            """)
    ibw = convert_to_int(bw)
    keep_elem_refs(pPopup, bw, ibw)
    retval = _fl_popup_set_bw(pPopup, ibw)
    return retval


def fl_popup_get_color(pPopup, p2):
    """ fl_popup_get_color(pPopup, p2) -> color
    """

    _fl_popup_get_color = cfuncproto(
            load_so_libforms(), "fl_popup_get_color",
            FL_COLOR, [cty.POINTER(FL_POPUP), cty.c_int],
            """FL_COLOR fl_popup_get_color(FL_POPUP * p1, int p2)
            """)
    ip2 = convert_to_int(p2)
    keep_elem_refs(pPopup, p2, ip2)
    retval = _fl_popup_get_color(pPopup, ip2)
    return retval


def fl_popup_set_color(pPopup, p2, colr):
    """ fl_popup_set_color(pPopup, p2, colr) -> color
    """

    _fl_popup_set_color = cfuncproto(
            load_so_libforms(), "fl_popup_set_color",
            FL_COLOR, [cty.POINTER(FL_POPUP), cty.c_int, FL_COLOR],
            """FL_COLOR fl_popup_set_color(FL_POPUP * p1, int p2, FL_COLOR p3)
            """)
    check_admitted_listvalues(colr, COLOR_list)
    ip2 = convert_to_int(p2)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pPopup, p2, colr, ip2, ulcolr)
    retval = _fl_popup_set_color(pPopup, ip2, ulcolr)
    return retval


def fl_popup_set_cursor(pPopup, p2):
    """ fl_popup_set_cursor(pPopup, p2)
    """

    _fl_popup_set_cursor = cfuncproto(
            load_so_libforms(), "fl_popup_set_cursor",
            None, [cty.POINTER(FL_POPUP), cty.c_int],
            """void fl_popup_set_cursor(FL_POPUP * p1, int p2)
            """)
    ip2 = convert_to_int(p2)
    keep_elem_refs(pPopup, p2, ip2)
    _fl_popup_set_cursor(pPopup, ip2)


def fl_popup_get_title(pPopup):
    """ fl_popup_get_title(pPopup) -> title string
    """

    _fl_popup_get_title = cfuncproto(
            load_so_libforms(), "fl_popup_get_title",
            STRING, [cty.POINTER(FL_POPUP)],
            """const char * fl_popup_get_title(FL_POPUP * p1)
            """)
    keep_elem_refs(pPopup)
    retval = _fl_popup_get_title(pPopup)
    return retval


def fl_popup_set_title(pPopup, title):
    """ fl_popup_set_title(pPopup, title) -> popup

        @param pPopup : pointer to Popup
        @param title : title of the popup
    """

    _fl_popup_set_title = cfuncproto(
            load_so_libforms(), "fl_popup_set_title",
            cty.POINTER(FL_POPUP), [cty.POINTER(FL_POPUP), STRING],
            """FL_POPUP * fl_popup_set_title(FL_POPUP * p1, const char * p2)
            """)
    stitle = convert_to_string(title)
    keep_elem_refs(pPopup, title, stitle)
    retval = _fl_popup_set_title(pPopup, stitle)
    return retval


def fl_popup_entry_set_callback(pPopupEntry, py_PopupCb):
    """ fl_popup_entry_set_callback(pPopupEntry, py_PopupCb) -> popup_callback
    """

    _fl_popup_entry_set_callback = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_callback",
            FL_POPUP_CB, [cty.POINTER(FL_POPUP_ENTRY), FL_POPUP_CB],
            """FL_POPUP_CB fl_popup_entry_set_callback(FL_POPUP_ENTRY * p1,
               FL_POPUP_CB p2)
            """)
    c_PopupCb = FL_POPUP_CB(py_PopupCb)
    keep_cfunc_refs(c_PopupCb, py_PopupCb)
    keep_elem_refs(pPopupEntry)
    retval = _fl_popup_entry_set_callback(pPopupEntry, c_PopupCb)
    return retval


def fl_popup_entry_set_enter_callback(pPopupEntry, py_PopupCb):
    """ fl_popup_entry_set_enter_callback(pPopupEntry, py_PopupCb) -> popup_callback
    """

    _fl_popup_entry_set_enter_callback = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_enter_callback",
            FL_POPUP_CB, [cty.POINTER(FL_POPUP_ENTRY), FL_POPUP_CB],
            """FL_POPUP_CB fl_popup_entry_set_enter_callback(
               FL_POPUP_ENTRY * p1, FL_POPUP_CB p2)
            """)
    c_PopupCb = FL_POPUP_CB(py_PopupCb)
    keep_cfunc_refs(c_PopupCb, py_PopupCb)
    keep_elem_refs(pPopupEntry)
    retval = _fl_popup_entry_set_enter_callback(pPopupEntry, c_PopupCb)
    return retval


def fl_popup_entry_set_leave_callback(pPopupEntry, py_PopupCb):
    """ fl_popup_entry_set_leave_callback(pPopupEntry, py_PopupCb) -> popup_callback
    """

    _fl_popup_entry_set_leave_callback = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_leave_callback",
            FL_POPUP_CB, [cty.POINTER(FL_POPUP_ENTRY), FL_POPUP_CB],
            """FL_POPUP_CB fl_popup_entry_set_leave_callback(
               FL_POPUP_ENTRY * p1, FL_POPUP_CB p2)
            """)
    c_PopupCb = FL_POPUP_CB(py_PopupCb)
    keep_cfunc_refs(c_PopupCb, py_PopupCb)
    keep_elem_refs(pPopupEntry)
    retval = _fl_popup_entry_set_leave_callback(pPopupEntry, c_PopupCb)
    return retval


def fl_popup_entry_get_state(pPopupEntry):
    """ fl_popup_entry_get_state(pPopupEntry) -> state num.
    """

    _fl_popup_entry_get_state = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_state",
            cty.c_uint, [cty.POINTER(FL_POPUP_ENTRY)],
            """unsigned int fl_popup_entry_get_state(FL_POPUP_ENTRY * p1)
            """)
    keep_elem_refs(pPopupEntry)
    retval = _fl_popup_entry_get_state(pPopupEntry)
    return retval


def fl_popup_entry_set_state(pPopupEntry, state):
    """ fl_popup_entry_set_state(pPopupEntry, state) -> state num.
    """

    _fl_popup_entry_set_state = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_state",
            cty.c_uint, [cty.POINTER(FL_POPUP_ENTRY), cty.c_uint],
            """unsigned int fl_popup_entry_set_state(FL_POPUP_ENTRY * p1,
               unsigned int p2)
            """)
    uistate = convert_to_uint(state)
    keep_elem_refs(pPopupEntry, state, uistate)
    retval = _fl_popup_entry_set_state(pPopupEntry, uistate)
    return retval


def fl_popup_entry_clear_state(pPopupEntry, state):
    """ fl_popup_entry_clear_state(pPopupEntry, state) -> state num.
    """

    _fl_popup_entry_clear_state = cfuncproto(
            load_so_libforms(), "fl_popup_entry_clear_state",
            cty.c_uint, [cty.POINTER(FL_POPUP_ENTRY), cty.c_uint],
            """unsigned int fl_popup_entry_clear_state(FL_POPUP_ENTRY * p1,
               unsigned int p2)
            """)
    uistate = convert_to_uint(state)
    keep_elem_refs(pPopupEntry, state, uistate)
    retval = _fl_popup_entry_clear_state(pPopupEntry, uistate)
    return retval


def fl_popup_entry_raise_state(pPopupEntry, state):
    """ fl_popup_entry_raise_state(pPopupEntry, state) -> state num.
    """

    _fl_popup_entry_raise_state = cfuncproto(
            load_so_libforms(), "fl_popup_entry_raise_state",
            cty.c_uint, [cty.POINTER(FL_POPUP_ENTRY), cty.c_uint],
            """unsigned int fl_popup_entry_raise_state(FL_POPUP_ENTRY * p1,
               unsigned int p2)
            """)
    uistate = convert_to_uint(state)
    keep_elem_refs(pPopupEntry, state, uistate)
    retval = _fl_popup_entry_raise_state(pPopupEntry, uistate)
    return retval


def fl_popup_entry_toggle_state(pPopupEntry, state):
    """ fl_popup_entry_toggle_state(pPopupEntry, state) -> num.
    """

    _fl_popup_entry_toggle_state = cfuncproto(
            load_so_libforms(), "fl_popup_entry_toggle_state",
            cty.c_uint, [cty.POINTER(FL_POPUP_ENTRY), cty.c_uint],
            """unsigned int fl_popup_entry_toggle_state(FL_POPUP_ENTRY * p1,
               unsigned int p2)
            """)
    uistate = convert_to_uint(state)
    keep_elem_refs(pPopupEntry, state, uistate)
    retval = _fl_popup_entry_toggle_state(pPopupEntry, uistate)
    return retval


def fl_popup_entry_set_text(pPopupEntry, text):
    """ fl_popup_entry_set_text(p1, txtstr) -> num.
    """

    _fl_popup_entry_set_text = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_text",
            cty.c_int, [cty.POINTER(FL_POPUP_ENTRY), STRING],
            """int fl_popup_entry_set_text(FL_POPUP_ENTRY * p1,
               const char * p2)
            """)
    stext = convert_to_string(text)
    keep_elem_refs(pPopupEntry, text, stext)
    retval = _fl_popup_entry_set_text(pPopupEntry, stext)
    return retval


def fl_popup_entry_set_shortcut(pPopupEntry, textsc):
    """ fl_popup_entry_set_shortcut(pPopupEntry, textsc)
    """

    _fl_popup_entry_set_shortcut = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_shortcut",
            None, [cty.POINTER(FL_POPUP_ENTRY), STRING],
            """void fl_popup_entry_set_shortcut(FL_POPUP_ENTRY * p1,
               const char * p2)
            """)
    stextsc = convert_to_string(textsc)
    keep_elem_refs(pPopupEntry, textsc, stextsc)
    _fl_popup_entry_set_shortcut(pPopupEntry, stextsc)


def fl_popup_entry_set_value(pPopupEntry, val):
    """ fl_popup_entry_set_value(pPopupEntry, p2) -> num.
    """

    _fl_popup_entry_set_value = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_value",
            cty.c_long, [cty.POINTER(FL_POPUP_ENTRY), cty.c_long],
            """long int fl_popup_entry_set_value(FL_POPUP_ENTRY * p1,
               long int p2)
            """)
    lval = convert_to_long(val)
    keep_elem_refs(pPopupEntry, val, lval)
    retval = _fl_popup_entry_set_value(pPopupEntry, lval)
    return retval


def fl_popup_entry_set_user_data(pPopupEntry, data):
    """ fl_popup_entry_set_user_data(pPopupEntry, data) -> ??
    """

    _fl_popup_entry_set_user_data = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_user_data",
            cty.c_void_p, [cty.POINTER(FL_POPUP_ENTRY), cty.c_void_p],
            """void * fl_popup_entry_set_user_data(FL_POPUP_ENTRY * p1,
               void * p2)
            """)
    pdata = cty.cast(data, cty.c_void_p)
    keep_elem_refs(pPopupEntry, data, pdata)
    retval = _fl_popup_entry_set_user_data(pPopupEntry, pdata)
    return retval


def fl_popup_entry_get_by_position(pPopup, numpos):
    """ fl_popup_entry_get_by_position(pPopup, numpos) -> pPopupEntry
    """

    _fl_popup_entry_get_by_position = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_by_position",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_POPUP), cty.c_int],
            """FL_POPUP_ENTRY * fl_popup_entry_get_by_position(FL_POPUP * p1,
               int p2)
            """)
    inumpos = convert_to_int(numpos)
    keep_elem_refs(pPopup, numpos, inumpos)
    retval = _fl_popup_entry_get_by_position(pPopup, inumpos)
    return retval


def fl_popup_entry_get_by_value(pPopup, val):
    """ fl_popup_entry_get_by_value(pPopup, val) -> pPopupEntry
    """

    _fl_popup_entry_get_by_value = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_by_value",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_POPUP), cty.c_long],
            """FL_POPUP_ENTRY * fl_popup_entry_get_by_value(FL_POPUP * p1,
               long int p2)
            """)
    lval = convert_to_long(val)
    keep_elem_refs(pPopup, val, lval)
    retval = _fl_popup_entry_get_by_value(pPopup, lval)
    return retval


def fl_popup_entry_get_by_user_data(pPopup, p2):
    """ fl_popup_entry_get_by_user_data(pPopup, p2) -> pPopupEntry
    """

    _fl_popup_entry_get_by_user_data = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_by_user_data",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_POPUP), cty.c_void_p],
            """FL_POPUP_ENTRY * fl_popup_entry_get_by_user_data(FL_POPUP * p1,
               void * p2)
            """)
    pp2 = cty.cast(p2, cty.c_void_p)
    keep_elem_refs(pPopup, p2, pp2)
    retval = _fl_popup_entry_get_by_user_data(pPopup, pp2)
    return retval


def fl_popup_entry_get_by_text(pPopup, text):
    """ fl_popup_entry_get_by_text(pPopup, text) -> pPopupEntry
    """

    _fl_popup_entry_get_by_text = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_by_text",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_POPUP), STRING],
            """FL_POPUP_ENTRY * fl_popup_entry_get_by_text(FL_POPUP * p1,
               const char * p2)
            """)
    stext = convert_to_string(text)
    keep_elem_refs(pPopup, text, stext)
    retval = _fl_popup_entry_get_by_text(pPopup, stext)
    return retval


def fl_popup_entry_get_by_label(pPopup, label):
    """ fl_popup_entry_get_by_label(pPopup, label) -> pPopupEntry
    """

    _fl_popup_entry_get_by_label = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_by_label",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_POPUP), STRING],
            """FL_POPUP_ENTRY * fl_popup_entry_get_by_label(FL_POPUP * p1,
               const char * p2)
            """)
    slabel = convert_to_string(label)
    keep_elem_refs(pPopup, label, slabel)
    retval = _fl_popup_entry_get_by_label(pPopup, slabel)
    return retval


def fl_popup_entry_get_group(pPopupEntry):
    """ fl_popup_entry_get_group(pPopupEntry) -> num.
    """

    _fl_popup_entry_get_group = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_group",
            cty.c_int, [cty.POINTER(FL_POPUP_ENTRY)],
            """int fl_popup_entry_get_group(FL_POPUP_ENTRY * p1)
            """)
    keep_elem_refs(pPopupEntry)
    retval = _fl_popup_entry_get_group(pPopupEntry)
    return retval


def fl_popup_entry_set_group(pPopupEntry, num):
    """ fl_popup_entry_set_group(pPopupEntry, num) -> num.
    """

    _fl_popup_entry_set_group = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_group",
            cty.c_int, [cty.POINTER(FL_POPUP_ENTRY), cty.c_int],
            """int fl_popup_entry_set_group(FL_POPUP_ENTRY * p1, int p2)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pPopupEntry, num, inum)
    retval = _fl_popup_entry_set_group(pPopupEntry, inum)
    return retval


def fl_popup_entry_get_subpopup(pPopupEntry):
    """ fl_popup_entry_get_subpopup(pPopupEntry) -> pPopup
    """

    _fl_popup_entry_get_subpopup = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_subpopup",
            cty.POINTER(FL_POPUP), [cty.POINTER(FL_POPUP_ENTRY)],
            """FL_POPUP * fl_popup_entry_get_subpopup(FL_POPUP_ENTRY * p1)
            """)
    keep_elem_refs(pPopupEntry)
    retval = _fl_popup_entry_get_subpopup(pPopupEntry)
    return retval


def fl_popup_entry_set_subpopup(pPopupEntry, pPopup):
    """ fl_popup_entry_set_subpopup(pPopupEntry, pPopup) -> pPopup
    """

    _fl_popup_entry_set_subpopup = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_subpopup",
            cty.POINTER(FL_POPUP), [cty.POINTER(FL_POPUP_ENTRY),
            cty.POINTER(FL_POPUP)],
            """FL_POPUP * fl_popup_entry_set_subpopup(FL_POPUP_ENTRY * p1,
               FL_POPUP * p2)
            """)
    keep_elem_refs(pPopupEntry, pPopup)
    retval = _fl_popup_entry_set_subpopup(pPopupEntry, pPopup)
    return retval


#def fl_popup_get_size(pPopup, w, h)
def fl_popup_get_size(pPopup):
    """ fl_popup_get_size(pPopup) -> size num., width, height
    """

    _fl_popup_get_size = cfuncproto(
            load_so_libforms(), "fl_popup_get_size",
            cty.c_int, [cty.POINTER(FL_POPUP), cty.POINTER(cty.c_uint),
            cty.POINTER(cty.c_uint)],
            """int fl_popup_get_size(FL_POPUP * p1, unsigned int * p2,
               unsigned int * p3)
            """)
    w, pw = make_uint_and_pointer()
    h, ph = make_uint_and_pointer()
    keep_elem_refs(pPopup, w, h, pw, ph)
    retval = _fl_popup_get_size(pPopup, pw, ph)
    return retval, w, h


def fl_popup_get_min_width(pPopup):
    """ fl_popup_get_min_width(pPopup) -> width num.
    """

    _fl_popup_get_min_width = cfuncproto(
            load_so_libforms(), "fl_popup_get_min_width",
            cty.c_int, [cty.POINTER(FL_POPUP)],
            """int fl_popup_get_min_width(FL_POPUP * p1)
            """)
    keep_elem_refs(pPopup)
    retval = _fl_popup_get_min_width(pPopup)
    return retval


def fl_popup_set_min_width(pPopup, minwidth):
    """ fl_popup_set_min_width(pPopup, minwidth) -> width num.
    """

    _fl_popup_set_min_width = cfuncproto(
            load_so_libforms(), "fl_popup_set_min_width",
            cty.c_int, [cty.POINTER(FL_POPUP), cty.c_int],
            """int fl_popup_set_min_width(FL_POPUP * p1, int p2)
            """)
    iminwidth = convert_to_int(minwidth)
    keep_elem_refs(pPopup, minwidth, iminwidth)
    retval = _fl_popup_set_min_width(pPopup, iminwidth)
    return retval



#######################
# forms.h (bitmap.h)
# Object Class: Bitmap
#######################


# Routines

def fl_create_bitmap(bitmaptype, x, y, w, h, label):
    """ fl_create_bitmap(bitmaptype, x, y, w, h, label) -> pObject
    """

    _fl_create_bitmap = cfuncproto(
            load_so_libforms(), "fl_create_bitmap",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_bitmap(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(bitmaptype, BITMAPTYPE_list)
    ibitmaptype = convert_to_int(bitmaptype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_int(label)
    keep_elem_refs(bitmaptype, x, y, w, h, label, ibitmaptype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_bitmap(ibitmaptype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_bitmap(bitmaptype, x, y, w, h, label):
    """ fl_add_bitmap(bitmaptype, x, y, w, h, label) -> pObject
    """

    _fl_add_bitmap = cfuncproto(
            load_so_libforms(), "fl_add_bitmap",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_bitmap(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(bitmaptype, BITMAPTYPE_list)
    ibitmaptype = convert_to_int(bitmaptype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(bitmaptype, x, y, w, h, label, ibitmaptype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_bitmap(ibitmaptype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_bitmap_data(pObject, w, h, data):
    """ fl_set_bitmap_data(pObject, w, h, data)

        @param pObject : pointer to object
        @param w : width of bitmap
        @param h : height of bitmap
        @param data : bitmap data ubytes
    """

    _fl_set_bitmap_data = cfuncproto(
            load_so_libforms(), "fl_set_bitmap_data",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int,
            cty.POINTER(cty.c_ubyte)],
            """void fl_set_bitmap_data(FL_OBJECT * ob, int w, int h,
               unsigned char * data)
            """)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    pdata = cty.cast(data, cty.POINTER(cty.c_ubyte))
    keep_elem_refs(pObject, w, h, data, iw, ih, pdata)
    _fl_set_bitmap_data(pObject, iw, ih, pdata)


def fl_set_bitmap_file(pObject, fname):
    """ fl_set_bitmap_file(pObject, fname)

        @param pObject : pointer to object
        @param fname : name of bitmap file
    """

    _fl_set_bitmap_file = cfuncproto(
            load_so_libforms(), "fl_set_bitmap_file",
            None, [cty.POINTER(FL_OBJECT), STRING],
            """void fl_set_bitmap_file(FL_OBJECT * ob, const char * fname)
            """)
    sfname = convert_to_string(fname)
    keep_elem_refs(pObject, fname, sfname)
    _fl_set_bitmap_file(pObject, sfname)


def fl_read_bitmapfile(win, filename, w, h, hotx, hoty):
    """ fl_read_bitmapfile(win, filename, w, h, hotx, hoty) -> pixmap
    """

    _fl_read_bitmapfile = cfuncproto(
            load_so_libforms(), "fl_read_bitmapfile",
            Pixmap, [Window, STRING, cty.POINTER(cty.c_uint),
            cty.POINTER(cty.c_uint), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """Pixmap fl_read_bitmapfile(Window win, const char * file,
               unsigned int * w, unsigned int * h, int * hotx, int * hoty)
            """)
    ulwin = convert_to_Window(win)
    sfilename = convert_to_string(filename)
    pw = cty.cast(w, cty.POINTER(cty.c_uint))
    ph = cty.cast(h, cty.POINTER(cty.c_uint))
    photx = cty.cast(hotx, cty.POINTER(cty.c_int))
    photy = cty.cast(hoty, cty.POINTER(cty.c_int))
    keep_elem_refs(win, filename, w, h, hotx, hoty, ulwin, sfilename,
                   pw, ph, photx, photy)
    retval = _fl_read_bitmapfile(ulwin, sfilename, pw, ph, photx, photy)
    return retval


# /usr/include/X11/Xlib.h 1621
def XCreateBitmapFromData(pDisplay, win, data, w, h):
    """ XCreateBitmapFromData(pDisplay, win, data, w, h) -> pixmap
    """

    _XCreateBitmapFromData = cfuncproto(
            load_so_libx11(), "XCreateBitmapFromData",
            Pixmap, [cty.POINTER(Display), Drawable, STRING, cty.c_uint,
            cty.c_uint],
            """Pixmap XCreateBitmapFromData(Display * p1, Drawable p2,
               const char * p3, unsigned int p4, unsigned int p5)
            """)
    ulwin = convert_to_ulong(win)
    sdata = convert_to_string(data)
    uiw = convert_to_uint(w)
    uih = convert_to_uint(h)
    keep_elem_refs(pDisplay, win, data, w, h, ulwin, sdata, uiw, uih)
    retval = _XCreateBitmapFromData(pDisplay, ulwin, sdata, uiw, uih)
    return retval


def fl_create_from_bitmapdata(win, data, w, h):
    return XCreateBitmapFromData(fl_get_display(), win, data, w, h)


# for compatibility
fl_set_bitmap_datafile = fl_set_bitmap_file

# PIXMAP stuff

def fl_create_pixmap(pixmaptype, x, y, w, h, label):
    """ fl_create_pixmap(pixmaptype, x, y, w, h, label) -> pObject
    """

    _fl_create_pixmap = cfuncproto(
            load_so_libforms(), "fl_create_pixmap",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_pixmap(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(pixmaptype, PIXMAPTYPE_list)
    ipixmaptype = convert_to_int(pixmaptype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(pixmaptype, x, y, w, h, label, ipixmaptype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_create_pixmap(ipixmaptype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_pixmap(pixmaptype, x, y, w, h, label):
    """ fl_add_pixmap(pixmaptype, x, y, w, h, label) -> pObject
    """

    _fl_add_pixmap = cfuncproto(
            load_so_libforms(), "fl_add_pixmap",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_pixmap(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(pixmaptype, PIXMAPTYPE_list)
    ipixmaptype = convert_to_int(pixmaptype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(pixmaptype, x, y, w, h, label, ipixmaptype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_pixmap(ipixmaptype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_pixmap_data(pObject, bits):
    """ fl_set_pixmap_data(pObject, bits)
    """

    _fl_set_pixmap_data = cfuncproto(
            load_so_libforms(), "fl_set_pixmap_data",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(STRING)],
            """void fl_set_pixmap_data(FL_OBJECT * ob, char * * bits)
            """)
    keep_elem_refs(pObject, bits)
    _fl_set_pixmap_data(pObject, bits)


def fl_set_pixmap_file(pObject, fname):
    """ fl_set_pixmap_file(pObject, fname)

        @param pObject : pointer to object
        @param fname : name of the pixmap file
    """

    _fl_set_pixmap_file = cfuncproto(
            load_so_libforms(), "fl_set_pixmap_file",
            None, [cty.POINTER(FL_OBJECT), STRING],
            """void fl_set_pixmap_file(FL_OBJECT * ob, const char * fname)
            """)
    sfname = convert_to_string(fname)
    keep_elem_refs(pObject, fname, sfname)
    _fl_set_pixmap_file(pObject, sfname)


def fl_set_pixmap_align(pObject, align, xmargin, ymargin):
    """ fl_set_pixmap_align(pObject, align, xmargin, ymargin)
    """

    _fl_set_pixmap_align = cfuncproto(
            load_so_libforms(), "fl_set_pixmap_align",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int, cty.c_int],
            """void fl_set_pixmap_align(FL_OBJECT * ob, int align,
               int xmargin, int ymargin)
            """)
    check_admitted_listvalues(align, ALIGN_list)
    ialign = convert_to_int(align)
    ixmargin = convert_to_int(xmargin)
    iymargin = convert_to_int(ymargin)
    keep_elem_refs(pObject, align, xmargin, ymargin, ialign, ixmargin,
                   iymargin)
    _fl_set_pixmap_align(pObject, ialign, ixmargin, iymargin)


def fl_set_pixmap_pixmap(pObject, idnum, mask):
    """ fl_set_pixmap_pixmap(pObject, idnum, mask)
    """

    _fl_set_pixmap_pixmap = cfuncproto(
            load_so_libforms(), "fl_set_pixmap_pixmap",
            None, [cty.POINTER(FL_OBJECT), Pixmap, Pixmap],
            """void fl_set_pixmap_pixmap(FL_OBJECT * ob, Pixmap id,
               Pixmap mask)
            """)
    ulidnum = convert_to_ulong(idnum)
    ulmask = convert_to_ulong(mask)
    keep_elem_refs(pObject, idnum, mask, ulidnum, ulmask)
    _fl_set_pixmap_pixmap(pObject, ulidnum, ulmask)


def fl_set_pixmap_colorcloseness(red, green, blue):
    """ fl_set_pixmap_colorcloseness(red, green, blue)
    """

    _fl_set_pixmap_colorcloseness = cfuncproto(
            load_so_libforms(), "fl_set_pixmap_colorcloseness",
            None, [cty.c_int, cty.c_int, cty.c_int],
            """void fl_set_pixmap_colorcloseness(int red, int green, int blue)
            """)
    ired = convert_to_int(red)
    igreen = convert_to_int(green)
    iblue = convert_to_int(blue)
    keep_elem_refs(red, green, blue, ired, igreen, iblue)
    _fl_set_pixmap_colorcloseness(ired, igreen, iblue)


def fl_free_pixmap_pixmap(pObject):
    """ fl_free_pixmap_pixmap(pObject)

        @param pObject : pointer to object
    """

    _fl_free_pixmap_pixmap = cfuncproto(
            load_so_libforms(), "fl_free_pixmap_pixmap",
            None, [cty.POINTER(FL_OBJECT)],
            """void fl_free_pixmap_pixmap(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_free_pixmap_pixmap(pObject)


#def fl_get_pixmap_pixmap(pObject, p, m)
def fl_get_pixmap_pixmap(pObject):
    """ fl_get_pixmap_pixmap(pObject) -> pixmap, pPixmap, pPixmap_mask

        @param pObject : pointer to object
    """

    _fl_get_pixmap_pixmap = cfuncproto(
            load_so_libforms(), "fl_get_pixmap_pixmap",
            Pixmap, [cty.POINTER(FL_OBJECT), cty.POINTER(Pixmap),
            cty.POINTER(Pixmap)],
            """Pixmap fl_get_pixmap_pixmap(FL_OBJECT * ob, Pixmap * p,
               Pixmap * m)
            """)
    p, pp = make_ulong_and_pointer()
    m, pm = make_ulong_and_pointer()
    keep_elem_refs(pObject, p, m, pp, pm)
    retval = _fl_get_pixmap_pixmap(pObject, pp, pm)
    return retval, p, m


#def fl_read_pixmapfile(win, filename, w, h, shape_mask, hotx, hoty, tran)
def fl_read_pixmapfile(win, filename, tran):
    """ fl_read_pixmapfile(win, filename, tran) -> pixmap, w, h, shapemask, hotx, hoty
    """

    _fl_read_pixmapfile = cfuncproto(
            load_so_libforms(), "fl_read_pixmapfile",
            Pixmap, [Window, STRING, cty.POINTER(cty.c_uint),
            cty.POINTER(cty.c_uint), cty.POINTER(Pixmap),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int), FL_COLOR],
            """Pixmap fl_read_pixmapfile(Window win, const char * file,
               unsigned int * w, unsigned int * h, Pixmap * shape_mask,
               int * hotx, int * hoty, FL_COLOR tran)
            """)
    check_admitted_listvalues(tran, COLOR_list)
    ulwin = convert_to_Window(win)
    sfilename = convert_to_string(filename)
    ultran = convert_to_FL_COLOR(tran)
    w, pw = make_uint_and_pointer()
    h, ph = make_uint_and_pointer()
    shapemask, pshapemask = make_ulong_and_pointer()
    hotx, photx = make_int_and_pointer()
    hoty, photy = make_int_and_pointer()
    keep_elem_refs(win, filename, w, h, shapemask, hotx, hoty, tran, ulwin,
                   sfilename, ultran, pw, ph, pshapemask, photx, photy)
    retval = _fl_read_pixmapfile(ulwin, sfilename, pw, ph, pshapemask, \
                                 photx, photy, ultran)
    return retval, w, h, shapemask, hotx, hoty


def fl_create_from_pixmapdata(win, data, w, h, sm, hotx, hoty, tran):
    """ fl_create_from_pixmapdata(win, data, w, h, sm, hotx, hoty, tran) -> pixmap
    """

    _fl_create_from_pixmapdata = cfuncproto(
            load_so_libforms(), "fl_create_from_pixmapdata",
            Pixmap, [Window, cty.POINTER(STRING), cty.POINTER(cty.c_uint),
            cty.POINTER(cty.c_uint), cty.POINTER(Pixmap),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int), FL_COLOR],
            """Pixmap fl_create_from_pixmapdata(Window win, char * * data,
            unsigned int * w, unsigned int * h, Pixmap * sm, int * hotx,
            int * hoty, FL_COLOR tran)
            """)
    check_admitted_listvalues(tran, COLOR_list)
    ulwin = convert_to_Window(win)
    ultran = convert_to_FL_COLOR(tran)
    keep_elem_refs(win, data, w, h, sm, hotx, hoty, tran, ulwin, ultran)
    retval = _fl_create_from_pixmapdata(ulwin, data, w, h, sm, hotx, hoty,
                                        ultran)
    return retval


# /usr/include/X11/Xlib.h 2570
def XFreePixmap(pDisplay, pixmap):
    """ XFreePixmap(pDisplay, pixmap) -> num.
    """

    _XFreePixmap = cfuncproto(
            load_so_libx11(), "XFreePixmap",
            cty.c_int, [cty.POINTER(Display), Pixmap],
            """int XFreePixmap(Display * p1, Pixmap p2)
            """)
    ulpixmap = convert_to_Pixmap(pixmap)
    keep_elem_refs(pDisplay, pixmap, ulpixmap)
    retval = _XFreePixmap(pDisplay, ulpixmap)
    return retval


def fl_free_pixmap(idnum):
    if (idnum != None):
        return XFreePixmap(fl_display, idnum)
    else:
        return None         # UNSURE



##################
# forms.h (box.h)
##################

def fl_create_box(boxtype, x, y, w, h, label):
    """ fl_create_box(boxtype, x, y, w, h, label) -> pObject
    """

    _fl_create_box = cfuncproto(
            load_so_libforms(), "fl_create_box",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_box(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(boxtype, BOXTYPE_list)
    iboxtype = convert_to_int(boxtype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(boxtype, x, y, w, h, label, iboxtype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_create_box(iboxtype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_box(boxtype, x, y, w, h, label):
    """ fl_add_box(boxtype, x, y, w, h, label) -> pObject
    """

    _fl_add_box = cfuncproto(
            load_so_libforms(), "fl_add_box",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_box(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(boxtype, BOXTYPE_list)
    iboxtype = convert_to_int(boxtype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(boxtype, x, y, w, h, label, iboxtype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_box(iboxtype, ix, iy, iw, ih, slabel)
    return retval



#######################
# forms.h (browser.h)
# Object class Browser
#######################

# Routines

def fl_create_browser(browsertype, x, y, w, h, label):
    """ fl_create_browser(browsertype, x, y, w, h, label) -> pObject
    """

    _fl_create_browser = cfuncproto(
            load_so_libforms(), "fl_create_browser",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_browser(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(browsertype, BROWSERTYPE_list)
    ibrowsertype = convert_to_int(browsertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(browsertype, x, y, w, h, label, ibrowsertype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_create_browser(ibrowsertype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_browser(browsertype, x, y, w, h, label):
    """ fl_add_browser(browsertype, x, y, w, h, label) -> pObject
    """

    _fl_add_browser = cfuncproto(
            load_so_libforms(), "fl_add_browser",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_browser(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(browsertype, BROWSERTYPE_list)
    ibrowsertype = convert_to_int(browsertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(browsertype, x, y, w, h, label, ibrowsertype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_browser(ibrowsertype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_browser(pObject):
    """ fl_clear_browser(pObject)
    """

    _fl_clear_browser = cfuncproto(
            load_so_libforms(), "fl_clear_browser",
            None, [cty.POINTER(FL_OBJECT)],
            """void fl_clear_browser(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_clear_browser(pObject)


def fl_add_browser_line(pObject, newtext):
    """ fl_add_browser_line(pObject, newtext)
    """

    _fl_add_browser_line = cfuncproto(
            load_so_libforms(), "fl_add_browser_line",
            None, [cty.POINTER(FL_OBJECT), STRING],
            """void fl_add_browser_line(FL_OBJECT * ob, const char * newtext)
            """)
    snewtext = convert_to_string(newtext)
    keep_elem_refs(pObject, newtext, snewtext)
    _fl_add_browser_line(pObject, snewtext)


def fl_addto_browser(pObject, newtext):
    """ fl_addto_browser(pObject, newtext)
    """

    _fl_addto_browser = cfuncproto(
            load_so_libforms(), "fl_addto_browser",
            None, [cty.POINTER(FL_OBJECT), STRING],
            """void fl_addto_browser(FL_OBJECT * ob, const char * newtext)
            """)
    snewtext = convert_to_string(newtext)
    keep_elem_refs(pObject, newtext, snewtext)
    _fl_addto_browser(pObject, snewtext)


def fl_addto_browser_chars(pObject, browsertext):
    """ fl_addto_browser_chars(pObject, browsertext)
    """

    _fl_addto_browser_chars = cfuncproto(
            load_so_libforms(), "fl_addto_browser_chars",
            None, [cty.POINTER(FL_OBJECT), STRING],
            """void fl_addto_browser_chars(FL_OBJECT * ob, const char * str)
            """)
    sbrowsertext = convert_to_string(browsertext)
    keep_elem_refs(pObject, browsertext, sbrowsertext)
    _fl_addto_browser_chars(pObject, sbrowsertext)


fl_append_browser = fl_addto_browser_chars


def fl_insert_browser_line(pObject, linenumb, newtext):
    """ fl_insert_browser_line(pObject, linenumb, newtext)
    """

    _fl_insert_browser_line = cfuncproto(
            load_so_libforms(), "fl_insert_browser_line",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, STRING],
            """void fl_insert_browser_line(FL_OBJECT * ob, int linenumb,
               const char * newtext)
            """)
    ilinenumb = convert_to_int(linenumb)
    snewtext = convert_to_string(newtext)
    keep_elem_refs(pObject, linenumb, newtext, ilinenumb, snewtext)
    _fl_insert_browser_line(pObject, ilinenumb, snewtext)


def fl_delete_browser_line(pObject, linenumb):
    """ fl_delete_browser_line(pObject, linenumb)
    """

    _fl_delete_browser_line = cfuncproto(
            load_so_libforms(), "fl_delete_browser_line",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_delete_browser_line(FL_OBJECT * ob, int linenumb)
            """)
    ilinenumb = convert_to_int(linenumb)
    keep_elem_refs(pObject, linenumb, ilinenumb)
    _fl_delete_browser_line(pObject, ilinenumb)


def fl_replace_browser_line(pObject, linenumb, newtext):
    """ fl_replace_browser_line(pObject, linenumb, newtext)
    """

    _fl_replace_browser_line = cfuncproto(
            load_so_libforms(), "fl_replace_browser_line",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, STRING],
            """void fl_replace_browser_line(FL_OBJECT * ob, int linenumb,
               const char * newtext)
            """)
    ilinenumb = convert_to_int(linenumb)
    snewtext = convert_to_string(newtext)
    keep_elem_refs(pObject, linenumb, newtext, ilinenumb, snewtext)
    _fl_replace_browser_line(pObject, ilinenumb, snewtext)


def fl_get_browser_line(pObject, linenumb):
    """ fl_get_browser_line(pObject, linenumb) -> line string
    """

    _fl_get_browser_line = cfuncproto(
            load_so_libforms(), "fl_get_browser_line",
            STRING, [cty.POINTER(FL_OBJECT), cty.c_int],
            """const char * fl_get_browser_line(FL_OBJECT * ob, int linenumb)
            """)
    ilinenumb = convert_to_int(linenumb)
    keep_elem_refs(pObject, linenumb, ilinenumb)
    retval = _fl_get_browser_line(pObject, ilinenumb)
    return retval


def fl_load_browser(pObject, filename):
    """ fl_load_browser(pObject, filename) -> num.
    """

    _fl_load_browser = cfuncproto(
            load_so_libforms(), "fl_load_browser",
            cty.c_int, [cty.POINTER(FL_OBJECT), STRING],
            """int fl_load_browser(FL_OBJECT * ob, const char * filename)
            """)
    sfilename = convert_to_string(filename)
    keep_elem_refs(pObject, filename, sfilename)
    retval = _fl_load_browser(pObject, sfilename)
    return retval


def fl_select_browser_line(pObject, line):
    """ fl_select_browser_line(pObject, line)
    """

    _fl_select_browser_line = cfuncproto(
            load_so_libforms(), "fl_select_browser_line",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_select_browser_line(FL_OBJECT * ob, int line)
            """)
    iline = convert_to_int(line)
    keep_elem_refs(pObject, line, iline)
    _fl_select_browser_line(pObject, iline)


def fl_deselect_browser_line(pObject, line):
    """ fl_deselect_browser_line(pObject, line)
    """

    _fl_deselect_browser_line = cfuncproto(
            load_so_libforms(), "fl_deselect_browser_line",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_deselect_browser_line(FL_OBJECT * ob, int line)
            """)
    iline = convert_to_int(line)
    keep_elem_refs(pObject, line, iline)
    _fl_deselect_browser_line(pObject, iline)


def fl_deselect_browser(pObject):
    """ fl_deselect_browser(pObject)

        @param pObject : pointer to object
    """

    _fl_deselect_browser = cfuncproto(
            load_so_libforms(), "fl_deselect_browser",
            None, [cty.POINTER(FL_OBJECT)],
            """void fl_deselect_browser(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_deselect_browser(pObject)


def fl_isselected_browser_line(pObject, line):
    """ fl_isselected_browser_line(pObject, line) -> num.
    """

    _fl_isselected_browser_line = cfuncproto(
            load_so_libforms(), "fl_isselected_browser_line",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_isselected_browser_line(FL_OBJECT * ob, int line)
            """)
    iline = convert_to_int(line)
    keep_elem_refs(pObject, line, iline)
    retval = _fl_isselected_browser_line(pObject, iline)
    return retval


def fl_get_browser_topline(pObject):
    """ fl_get_browser_topline(pObject) -> num.
    """

    _fl_get_browser_topline = cfuncproto(
            load_so_libforms(), "fl_get_browser_topline",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_browser_topline(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_topline(pObject)
    return retval


def fl_get_browser(pObject):
    """ fl_get_browser(pObject) -> num.
    """

    _fl_get_browser = cfuncproto(
            load_so_libforms(), "fl_get_browser",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_browser(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser(pObject)
    return retval


def fl_get_browser_maxline(pObject):
    """ fl_get_browser_maxline(pObject) -> line num.
    """

    _fl_get_browser_maxline = cfuncproto(
            load_so_libforms(), "fl_get_browser_maxline",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_browser_maxline(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_maxline(pObject)
    return retval


def fl_get_browser_screenlines(pObject):
    """ fl_get_browser_screenlines(pObject) -> lines num.
    """

    _fl_get_browser_screenlines = cfuncproto(
            load_so_libforms(), "fl_get_browser_screenlines",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_browser_screenlines(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_screenlines(pObject)
    return retval


def fl_set_browser_topline(pObject, topline):
    """ fl_set_browser_topline(pObject, topline)
    """

    _fl_set_browser_topline = cfuncproto(
            load_so_libforms(), "fl_set_browser_topline",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_browser_topline(FL_OBJECT * ob, int topline)
            """)
    itopline = convert_to_int(topline)
    keep_elem_refs(pObject, topline, itopline)
    _fl_set_browser_topline(pObject, itopline)


def fl_set_browser_fontsize(pObject, size):
    """ fl_set_browser_fontsize(pObject, size)
    """

    _fl_set_browser_fontsize = cfuncproto(
            load_so_libforms(), "fl_set_browser_fontsize",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_browser_fontsize(FL_OBJECT * ob, int size)
            """)
    isize = convert_to_int(size)
    keep_elem_refs(pObject, size, isize)
    _fl_set_browser_fontsize(pObject, isize)


def fl_set_browser_fontstyle(pObject, style):
    """ fl_set_browser_fontstyle(pObject, style)
    """

    _fl_set_browser_fontstyle = cfuncproto(
            load_so_libforms(), "fl_set_browser_fontstyle",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_browser_fontstyle(FL_OBJECT * ob, int style)
            """)
    istyle = convert_to_int(style)
    keep_elem_refs(pObject, style, istyle)
    _fl_set_browser_fontstyle(pObject, istyle)


def fl_set_browser_specialkey(pObject, specialkey):
    """ fl_set_browser_specialkey(pObject, specialkey)
    """

    _fl_set_browser_specialkey = cfuncproto(
            load_so_libforms(), "fl_set_browser_specialkey",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_browser_specialkey(FL_OBJECT * ob, int specialkey)
            """)
    ispecialkey = convert_to_int(specialkey)
    keep_elem_refs(pObject, specialkey, ispecialkey)
    _fl_set_browser_specialkey(pObject, ispecialkey)


def fl_set_browser_vscrollbar(pObject, on):
    """ fl_set_browser_vscrollbar(pObject, on)
    """

    _fl_set_browser_vscrollbar = cfuncproto(
            load_so_libforms(), "fl_set_browser_vscrollbar",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_browser_vscrollbar(FL_OBJECT * ob, int on)
            """)
    ion = convert_to_int(on)
    keep_elem_refs(pObject, on, ion)
    _fl_set_browser_vscrollbar(pObject, ion)


def fl_set_browser_hscrollbar(pObject, on):
    """ fl_set_browser_hscrollbar(pObject, on)
    """

    _fl_set_browser_hscrollbar = cfuncproto(
            load_so_libforms(), "fl_set_browser_hscrollbar",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_browser_hscrollbar(FL_OBJECT * ob, int on)
            """)
    ion = convert_to_int(on)
    keep_elem_refs(pObject, on, ion)
    _fl_set_browser_hscrollbar(pObject, ion)


def fl_set_browser_line_selectable(pObject, line, flag):
    """ fl_set_browser_line_selectable(pObject, line, flag)
    """

    _fl_set_browser_line_selectable = cfuncproto(
            load_so_libforms(), "fl_set_browser_line_selectable",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_browser_line_selectable(FL_OBJECT * ob, int line,
               int flag)
            """)
    iline = convert_to_int(line)
    iflag = convert_to_int(flag)
    keep_elem_refs(pObject, line, flag, iline, iflag)
    _fl_set_browser_line_selectable(pObject, iline, iflag)


#def fl_get_browser_dimension(pObject, x, y, w, h)
def fl_get_browser_dimension(pObject):
    """ fl_get_browser_dimension(pObject) -> x, y, w, h
    """

    _fl_get_browser_dimension = cfuncproto(
            load_so_libforms(), "fl_get_browser_dimension",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_Coord),
            cty.POINTER(FL_Coord), cty.POINTER(FL_Coord),
            cty.POINTER(FL_Coord)],
            """void fl_get_browser_dimension(FL_OBJECT * ob, FL_Coord * x,
               FL_Coord * y, FL_Coord * w, FL_Coord * h)
            """)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    w, pw = make_FL_Coord_and_pointer()
    h, ph = make_FL_Coord_and_pointer()
    keep_elem_refs(pObject, x, y, w, h, px, py, pw, ph)
    _fl_get_browser_dimension(pObject, px, py, pw, ph)
    return x, y, w, h


def fl_set_browser_dblclick_callback(pObject, py_CallbackPtr, argum):
    """ fl_set_browser_dblclick_callback(pObject, py_CallbackPtr, argum)
    """

    _fl_set_browser_dblclick_callback = cfuncproto(
            load_so_libforms(), "fl_set_browser_dblclick_callback",
            None, [cty.POINTER(FL_OBJECT), FL_CALLBACKPTR, cty.c_long],
            """void fl_set_browser_dblclick_callback(FL_OBJECT * ob,
               FL_CALLBACKPTR cb, long int a)
            """)
    largum = convert_to_long(argum)
    c_CallbackPtr = FL_CALLBACKPTR(py_CallbackPtr)
    keep_cfunc_refs(c_CallbackPtr, py_CallbackPtr)
    keep_elem_refs(pObject, argum, largum)
    _fl_set_browser_dblclick_callback(pObject, c_CallbackPtr, largum)


def fl_get_browser_xoffset(pObject):
    """ fl_get_browser_xoffset(pObject) -> coord num.

        @param pObject : pointer to browser object
    """

    _fl_get_browser_xoffset = cfuncproto(
            load_so_libforms(), "fl_get_browser_xoffset",
            FL_Coord, [cty.POINTER(FL_OBJECT)],
            """FL_Coord fl_get_browser_xoffset(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_xoffset(pObject)
    return retval


def fl_get_browser_rel_xoffset(pObject):
    """ fl_get_browser_rel_xoffset(pObject) -> num.

        @param pObject : pointer to browser object
    """

    _fl_get_browser_rel_xoffset = cfuncproto(
            load_so_libforms(), "fl_get_browser_rel_xoffset",
            cty.c_double, [cty.POINTER(FL_OBJECT)],
            """double fl_get_browser_rel_xoffset(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_rel_xoffset(pObject)
    return retval


def fl_set_browser_xoffset(pObject, npixels):
    """ fl_set_browser_xoffset(pObject, npixels)
    """

    _fl_set_browser_xoffset = cfuncproto(
            load_so_libforms(), "fl_set_browser_xoffset",
            None, [cty.POINTER(FL_OBJECT), FL_Coord],
            """void fl_set_browser_xoffset(FL_OBJECT * ob, FL_Coord npixels)
            """)
    inpixels = convert_to_FL_Coord(npixels)
    keep_elem_refs(pObject, npixels, inpixels)
    _fl_set_browser_xoffset(pObject, inpixels)


def fl_set_browser_rel_xoffset(pObject, val):
    """ fl_set_browser_rel_xoffset(pObject, val)
    """

    _fl_set_browser_rel_xoffset = cfuncproto(
            load_so_libforms(), "fl_set_browser_rel_xoffset",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_browser_rel_xoffset(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_browser_rel_xoffset(pObject, fval)


def fl_get_browser_yoffset(pObject):
    """ fl_get_browser_yoffset(pObject) -> coord num.
    """

    _fl_get_browser_yoffset = cfuncproto(
            load_so_libforms(), "fl_get_browser_yoffset",
            FL_Coord, [cty.POINTER(FL_OBJECT)],
            """FL_Coord fl_get_browser_yoffset(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_yoffset(pObject)
    return retval


def fl_get_browser_rel_yoffset(pObject):
    """ fl_get_browser_rel_yoffset(pObject) -> num.
    """

    _fl_get_browser_rel_yoffset = cfuncproto(
            load_so_libforms(), "fl_get_browser_rel_yoffset",
            cty.c_double, [cty.POINTER(FL_OBJECT)],
            """double fl_get_browser_rel_yoffset(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_rel_yoffset(pObject)
    return retval


def fl_set_browser_yoffset(pObject, npixels):
    """ fl_set_browser_yoffset(pObject, npixels)
    """

    _fl_set_browser_yoffset = cfuncproto(
            load_so_libforms(), "fl_set_browser_yoffset",
            None, [cty.POINTER(FL_OBJECT), FL_Coord],
            """void fl_set_browser_yoffset(FL_OBJECT * ob, FL_Coord npixels)
            """)
    inpixels = convert_to_FL_Coord(npixels)
    keep_elem_refs(pObject, npixels, inpixels)
    _fl_set_browser_yoffset(pObject, inpixels)


def fl_set_browser_rel_yoffset(pObject, val):
    """ fl_set_browser_rel_yoffset(pObject, val)
    """

    _fl_set_browser_rel_yoffset = cfuncproto(
            load_so_libforms(), "fl_set_browser_rel_yoffset",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_browser_rel_yoffset(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_browser_rel_yoffset(pObject, fval)


def fl_set_browser_scrollbarsize(pObject, hh, vw):
    """ fl_set_browser_scrollbarsize(pObject, hh, vw)
    """

    _fl_set_browser_scrollbarsize = cfuncproto(
            load_so_libforms(), "fl_set_browser_scrollbarsize",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_browser_scrollbarsize(FL_OBJECT * ob,
               int hh, int vw)
            """)
    ihh = convert_to_int(hh)
    ivw = convert_to_int(vw)
    keep_elem_refs(pObject, hh, vw, ihh, ivw)
    _fl_set_browser_scrollbarsize(pObject, ihh, ivw)


def fl_show_browser_line(pObject, j):
    """ fl_show_browser_line(pObject, j)
    """

    _fl_show_browser_line = cfuncproto(
            load_so_libforms(), "fl_show_browser_line",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_show_browser_line(FL_OBJECT * ob, int j)
            """)
    ij = convert_to_int(j)
    keep_elem_refs(pObject, j, ij)
    _fl_show_browser_line(pObject, ij)


def fl_set_default_browser_maxlinelength(n):
    """ fl_set_default_browser_maxlinelength(n) -> length num.
    """

    _fl_set_default_browser_maxlinelength = cfuncproto(
            load_so_libforms(), "fl_set_default_browser_maxlinelength",
            cty.c_int, [cty.c_int],
            """int fl_set_default_browser_maxlinelength(int n):
            """)
    inum = convert_to_int(n)
    keep_elem_refs(n, inum)
    retval = _fl_set_default_browser_maxlinelength(inum)
    return retval


FL_BROWSER_SCROLL_CALLBACK = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT),
                cty.c_int, cty.c_void_p)

def fl_set_browser_hscroll_callback(pObject, py_BrowserScrollCallback, data):
    """ fl_set_browser_hscroll_callback(pObject, py_BrowserScrollCallback, data)
    """

    _fl_set_browser_hscroll_callback = cfuncproto(
            load_so_libforms(), "fl_set_browser_hscroll_callback",
            None, [cty.POINTER(FL_OBJECT), FL_BROWSER_SCROLL_CALLBACK,
            cty.c_void_p],
            """void fl_set_browser_hscroll_callback(FL_OBJECT * ob,
               FL_BROWSER_SCROLL_CALLBACK cb, void * data)
            """)
    c_BrowserScrollCallback = FL_BROWSER_SCROLL_CALLBACK(py_cb)
    keep_cfunc_refs(c_BrowserScrollCallback, py_BrowserScrollCallback)
    keep_elem_refs(pObject, data)
    _fl_set_browser_hscroll_callback(pObject, c_BrowserScrollCallback, data)


def fl_set_browser_vscroll_callback(pObject, py_BrowserScrollCallback, data):
    """ fl_set_browser_vscroll_callback(pObject, py_BrowserScrollCallback, data)
    """

    _fl_set_browser_vscroll_callback = cfuncproto(
            load_so_libforms(), "fl_set_browser_vscroll_callback",
            None, [cty.POINTER(FL_OBJECT), FL_BROWSER_SCROLL_CALLBACK,
            cty.c_void_p],
            """void fl_set_browser_vscroll_callback(FL_OBJECT * ob,
               FL_BROWSER_SCROLL_CALLBACK cb, void * data)
            """)
    c_BrowserScrollCallback = FL_BROWSER_SCROLL_CALLBACK( \
                                py_BrowserScrollCallback)
    keep_cfunc_refs(c_BrowserScrollCallback, py_BrowserScrollCallback)
    keep_elem_refs(pObject, data)
    _fl_set_browser_vscroll_callback(pObject, c_BrowserScrollCallback, data)


def fl_get_browser_line_yoffset(pObject, line):
    """ fl_get_browser_line_yoffset(pObject, line) -> num.
    """

    _fl_get_browser_line_yoffset = cfuncproto(
            load_so_libforms(), "fl_get_browser_line_yoffset",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_get_browser_line_yoffset(FL_OBJECT * obj, int line)
            """)
    iline = convert_to_int(line)
    keep_elem_refs(pObject, line, iline)
    retval = _fl_get_browser_line_yoffset(pObject, iline)
    return retval


def fl_get_browser_hscroll_callback(pObject):
    """ fl_get_browser_hscroll_callback(pObject) -> callback
    """

    _fl_get_browser_hscroll_callback = cfuncproto(
            load_so_libforms(), "fl_get_browser_hscroll_callback",
            FL_BROWSER_SCROLL_CALLBACK, [cty.POINTER(FL_OBJECT)],
            """FL_BROWSER_SCROLL_CALLBACK fl_get_browser_hscroll_callback(
               FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_hscroll_callback(pObject)
    return retval


def fl_get_browser_vscroll_callback(pObject):
    """ fl_get_browser_vscroll_callback(pObject) -> callback
    """

    _fl_get_browser_vscroll_callback = cfuncproto(
            load_so_libforms(), "fl_get_browser_vscroll_callback",
            FL_BROWSER_SCROLL_CALLBACK, [cty.POINTER(FL_OBJECT)],
            """FL_BROWSER_SCROLL_CALLBACK fl_get_browser_vscroll_callback(
               FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_vscroll_callback(pObject)
    return retval



#############################################################
# forms.h (button.h)
# All Buttons: regular button, light button and round button
#############################################################

# Routines

def fl_create_button(buttontype, x, y, w, h, label):
    """ fl_create_button(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_create_button = cfuncproto(
            load_so_libforms(), "fl_create_button",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_button(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_create_button(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_create_roundbutton(buttontype, x, y, w, h, label):
    """ fl_create_roundbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_create_roundbutton = cfuncproto(
            load_so_libforms(), "fl_create_roundbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_roundbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_create_roundbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_create_round3dbutton(buttontype, x, y, w, h, label):
    """ fl_create_round3dbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_create_round3dbutton = cfuncproto(
            load_so_libforms(), "fl_create_round3dbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_round3dbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_create_round3dbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_create_lightbutton(buttontype, x, y, w, h, label):
    """ fl_create_lightbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_create_lightbutton = cfuncproto(
            load_so_libforms(), "fl_create_lightbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_lightbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_create_lightbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_create_checkbutton(buttontype, x, y, w, h, label):
    """ fl_create_checkbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_create_checkbutton = cfuncproto(
            load_so_libforms(), "fl_create_checkbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_checkbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_create_checkbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_create_bitmapbutton(buttontype, x, y, w, h, label):
    """ fl_create_bitmapbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_create_bitmapbutton = cfuncproto(
            load_so_libforms(), "fl_create_bitmapbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_bitmapbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_create_bitmapbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_create_pixmapbutton(buttontype, x, y, w, h, label):
    """ fl_create_pixmapbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_create_pixmapbutton = cfuncproto(
            load_so_libforms(), "fl_create_pixmapbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_pixmapbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_create_pixmapbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_create_scrollbutton(buttontype, x, y, w, h, label):
    """ fl_create_scrollbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_create_scrollbutton = cfuncproto(
            load_so_libforms(), "fl_create_scrollbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_scrollbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_create_scrollbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_create_labelbutton(buttontype, x, y, w, h, label):
    """ fl_create_labelbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_create_labelbutton = cfuncproto(
            load_so_libforms(), "fl_create_labelbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_labelbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_create_labelbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_roundbutton(buttontype, x, y, w, h, label):
    """ fl_add_roundbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_add_roundbutton = cfuncproto(
            load_so_libforms(), "fl_add_roundbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_roundbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_roundbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_round3dbutton(buttontype, x, y, w, h, label):
    """ fl_add_round3dbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_add_round3dbutton = cfuncproto(
            load_so_libforms(), "fl_add_round3dbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_round3dbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_round3dbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_lightbutton(buttontype, x, y, w, h, label):
    """ fl_add_lightbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_add_lightbutton = cfuncproto(
            load_so_libforms(), "fl_add_lightbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_lightbutton(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_lightbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_checkbutton(buttontype, x, y, w, h, label):
    """ fl_add_checkbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_add_checkbutton = cfuncproto(
            load_so_libforms(), "fl_add_checkbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_checkbutton(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_checkbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_button(buttontype, x, y, w, h, label):
    """ fl_add_button(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_add_button = cfuncproto(
            load_so_libforms(), "fl_add_button",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_button(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_button(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_bitmapbutton(buttontype, x, y, w, h, label):
    """ fl_add_bitmapbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_add_bitmapbutton = cfuncproto(
            load_so_libforms(), "fl_add_bitmapbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_bitmapbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_bitmapbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_scrollbutton(buttontype, x, y, w, h, label):
    """ fl_add_scrollbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_add_scrollbutton = cfuncproto(
            load_so_libforms(), "fl_add_scrollbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_scrollbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_scrollbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_labelbutton(buttontype, x, y, w, h, label):
    """ fl_add_labelbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_add_labelbutton = cfuncproto(
            load_so_libforms(), "fl_add_labelbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_labelbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_labelbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


fl_set_bitmapbutton_file = fl_set_bitmap_file


def fl_set_bitmapbutton_data(pObject, w, h, bits):
    """ fl_set_bitmapbutton_data(pObject, w, h, bits)
    """

    _fl_set_bitmapbutton_data = cfuncproto(
            load_so_libforms(), "fl_set_bitmapbutton_data",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int,
            cty.POINTER(cty.c_ubyte)],
            """void fl_set_bitmapbutton_data(FL_OBJECT * ob, int w, int h,
               unsigned char * bits)
            """)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    pbits = cty.cast(bits, cty.POINTER(cty.c_ubyte))
    keep_elem_refs(pObject, w, h, bits, iw, ih, pbits)
    _fl_set_bitmapbutton_data(pObject, iw, ih, pbits)


fl_set_bitmapbutton_datafile = fl_set_bitmapbutton_file


def fl_add_pixmapbutton(buttontype, x, y, w, h, label):
    """ fl_add_pixmapbutton(buttontype, x, y, w, h, label) -> pObject
    """

    _fl_add_pixmapbutton = cfuncproto(
            load_so_libforms(), "fl_add_pixmapbutton",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_pixmapbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_pixmapbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_pixmapbutton_focus_outline(pObject, yes):
    """ fl_set_pixmapbutton_focus_outline(pObject, yes)
    """

    _fl_set_pixmapbutton_focus_outline = cfuncproto(
            load_so_libforms(), "fl_set_pixmapbutton_focus_outline",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_pixmapbutton_focus_outline(FL_OBJECT * ob, int yes)
            """)
    iyes = convert_to_int(yes)
    keep_elem_refs(pObject, yes, iyes)
    _fl_set_pixmapbutton_focus_outline(pObject, iyes)


fl_set_pixmapbutton_data = fl_set_pixmap_data
fl_set_pixmapbutton_file = fl_set_pixmap_file
fl_set_pixmapbutton_pixmap = fl_set_pixmap_pixmap
fl_get_pixmapbutton_pixmap = fl_get_pixmap_pixmap
fl_set_pixmapbutton_align = fl_set_pixmap_align
fl_free_pixmapbutton_pixmap = fl_free_pixmap_pixmap
fl_set_pixmapbutton_datafile = fl_set_pixmapbutton_file
fl_set_pixmapbutton_show_focus = fl_set_pixmapbutton_focus_outline


def fl_set_pixmapbutton_focus_data(pObject, bits):
    """ fl_set_pixmapbutton_focus_data(pObject, bits)
    """

    _fl_set_pixmapbutton_focus_data = cfuncproto(
            load_so_libforms(), "fl_set_pixmapbutton_focus_data",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(STRING)],
            """void fl_set_pixmapbutton_focus_data(FL_OBJECT * ob,
               char * * bits)
            """)
    keep_elem_refs(pObject, bits)
    _fl_set_pixmapbutton_focus_data(pObject, bits)


def fl_set_pixmapbutton_focus_file(pObject, fname):
    """ fl_set_pixmapbutton_focus_file(pObject, fname)
    """

    _fl_set_pixmapbutton_focus_file = cfuncproto(
            load_so_libforms(), "fl_set_pixmapbutton_focus_file",
            None, [cty.POINTER(FL_OBJECT), STRING],
            """void fl_set_pixmapbutton_focus_file(FL_OBJECT * ob,
               const char * fname)
            """)
    sfname = convert_to_string(fname)
    keep_elem_refs(pObject, fname, sfname)
    _fl_set_pixmapbutton_focus_file(pObject, sfname)


def fl_set_pixmapbutton_focus_pixmap(pObject, idnum, mask):
    """ fl_set_pixmapbutton_focus_pixmap(pObject, idnum, mask)
    """

    _fl_set_pixmapbutton_focus_pixmap = cfuncproto(
            load_so_libforms(), "fl_set_pixmapbutton_focus_pixmap",
            None, [cty.POINTER(FL_OBJECT), Pixmap, Pixmap],
            """void fl_set_pixmapbutton_focus_pixmap(FL_OBJECT * ob,
               Pixmap id, Pixmap mask)
            """)
    ulidnum = convert_to_ulong(idnum)
    ulmask = convert_to_ulong(mask)
    keep_elem_refs(pObject, idnum, mask, ulidnum, ulmask)
    _fl_set_pixmapbutton_focus_pixmap(pObject, ulidnum, ulmask)


def fl_get_button(pObject):
    """ fl_get_button(pObject) -> num.
    """

    _fl_get_button = cfuncproto(
            load_so_libforms(), "fl_get_button",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_button(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_button(pObject)
    return retval


def fl_set_button(pObject, pushed):
    """ fl_set_button(pObject, pushed)
    """

    _fl_set_button = cfuncproto(
            load_so_libforms(), "fl_set_button",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_button(FL_OBJECT * ob, int pushed)
            """)
    ipushed = convert_to_int(pushed)
    keep_elem_refs(pObject, pushed, ipushed)
    _fl_set_button(pObject, ipushed)


def fl_get_button_numb(pObject):
    """ fl_get_button_numb(pObject) -> num.
    """

    _fl_get_button_numb = cfuncproto(
            load_so_libforms(), "fl_get_button_numb",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_button_numb(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_button_numb(pObject)
    return retval


fl_set_button_shortcut = fl_set_object_shortcut


def fl_create_generic_button(objclass, buttontype, x, y, w, h, label):
    """ fl_create_generic_button(objclass, buttontype, x, y, w, h, label) -> pObject
    """

    _fl_create_generic_button = cfuncproto(
            load_so_libforms(), "fl_create_generic_button",
            cty.POINTER(FL_OBJECT), [cty.c_int, cty.c_int, FL_Coord, FL_Coord,
            FL_Coord, FL_Coord, STRING],
            """FL_OBJECT * fl_create_generic_button(int objclass, int type,
               FL_Coord x, FL_Coord y, FL_Coord w, FL_Coord h,
               const char * label)
            """)
    check_admitted_listvalues(buttontype, BUTTONTYPE_list)
    iobjclass = convert_to_int(objclass)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(objclass, buttontype, x, y, w, h, label, iobjclass,
                   ibuttontype, ix, iy, iw, ih, slabel)
    retval = _fl_create_generic_button(iobjclass, ibuttontype, ix, iy,
                                       iw, ih, slabel)
    return retval


FL_DrawButton = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT))
FL_CleanupButton = cty.CFUNCTYPE(None, cty.POINTER(FL_BUTTON_SPEC))

FL_DRAWBUTTON = FL_DrawButton
FL_CLEANUPBUTTON = FL_CleanupButton

def fl_add_button_class(bclass, py_DrawButton, py_CleanupButton):
    """
        fl_add_button_class(bclass, py_DrawButton, py_CleanupButton)

        Associates a button class with a drawing function.

        @param bclass : value of new button class
        @param py_DrawButton : python function to draw button, fn(pObject)
        @param py_CleanupButton : python function to cleanup button,
           fn(pButtonSpec)
    """

    _fl_add_button_class = cfuncproto(
            load_so_libforms(), "fl_add_button_class",
            None, [cty.c_int, FL_DrawButton, FL_CleanupButton],
            """void fl_add_button_class(int bclass, FL_DrawButton drawit,
               FL_CleanupButton cleanup)
            """)
    ibclass = convert_to_int(bclass)
    c_DrawButton = FL_DrawButton(py_DrawButton)
    c_CleanupButton = FL_CleanupButton(py_CleanupButton)
    keep_cfunc_refs(c_DrawButton, py_DrawButton, c_CleanupButton,
       py_CleanupButton)
    keep_elem_refs(bclass, ibclass)
    _fl_add_button_class(ibclass, c_DrawButton, c_CleanupButton)


def fl_set_button_mouse_buttons(pObject, buttons):
    """ fl_set_button_mouse_buttons(pObject, buttons)
    """

    _fl_set_button_mouse_buttons = cfuncproto(
            load_so_libforms(), "fl_set_button_mouse_buttons",
            None, [cty.POINTER(FL_OBJECT), cty.c_uint],
            """void fl_set_button_mouse_buttons(FL_OBJECT * ob,
               unsigned int buttons)
            """)
    ibuttons = convert_to_int(buttons)
    keep_elem_refs(pObject, buttons, ibuttons)
    _fl_set_button_mouse_buttons(pObject, ibuttons)


#def fl_get_button_mouse_buttons(pObject, buttons)
def fl_get_button_mouse_buttons(pObject):
    """ fl_get_button_mouse_buttons(pObject) -> buttons
    """

    _fl_get_button_mouse_buttons = cfuncproto(
            load_so_libforms(), "fl_get_button_mouse_buttons",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_uint)],
            """void fl_get_button_mouse_buttons(FL_OBJECT * ob,
               unsigned int * buttons)
            """)
    buttons, pbuttons = make_uint_and_pointer()
    keep_elem_refs(pObject, buttons, pbuttons)
    _fl_get_button_mouse_buttons(pObject, pbuttons)
    return buttons


#######################
# forms.h (canvas.h)
# Header for FL_CANVAS
#######################

# Interfaces

def fl_create_generic_canvas(canvasclass, canvastype, x, y, w, h, label):
    """ fl_create_generic_canvas(canvasclass, canvastype, x, y, w, h, label) -> pObject
    """

    _fl_create_generic_canvas = cfuncproto(
            load_so_libforms(), "fl_create_generic_canvas",
            cty.POINTER(FL_OBJECT), [cty.c_int, cty.c_int, FL_Coord, FL_Coord,
            FL_Coord, FL_Coord, STRING],
            """FL_OBJECT * fl_create_generic_canvas(int canvas_class,
               int type, FL_Coord x, FL_Coord y, FL_Coord w, FL_Coord h,
               const char * label)
            """)
    check_admitted_listvalues(canvastype, CANVASTYPE_list)
    icanvasclass = convert_to_int(canvasclass)
    icanvastype = convert_to_int(canvastype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(canvasclass, canvastype, x, y, w, h, label, icanvasclass,
                   icanvastype, ix, iy, iw, ih, slabel)
    retval = _fl_create_generic_canvas(icanvasclass, icanvastype, ix, iy, iw, ih,
                                  slabel)
    return retval


def fl_add_canvas(canvastype, x, y, w, h, label):
    """ fl_add_canvas(canvastype, x, y, w, h, label) -> pObject
    """

    _fl_add_canvas = cfuncproto(
            load_so_libforms(), "fl_add_canvas",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_canvas(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(canvastype, CANVASTYPE_list)
    icanvastype = convert_to_int(canvastype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(canvastype, x, y, w, h, label, icanvastype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_canvas(icanvastype, ix, iy, iw, ih, slabel)
    return retval


def fl_create_canvas(canvastype, x, y, w, h, label):
    """ fl_create_canvas(canvastype, x, y, w, h, label) -> pObject
    """

    _fl_create_canvas = cfuncproto(
            load_so_libforms(), "fl_create_canvas",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_canvas(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(canvastype, CANVASTYPE_list)
    icanvastype = convert_to_int(canvastype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(canvastype, x, y, w, h, label, icanvastype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_canvas(icanvastype, ix, iy, iw, ih, slabel)
    return retval


# backward compatibility
fl_set_canvas_decoration = fl_set_object_boxtype


def fl_set_canvas_colormap(pObject, colormap):
    """ fl_set_canvas_colormap(pObject, colormap)
    """

    _fl_set_canvas_colormap = cfuncproto(
            load_so_libforms(), "fl_set_canvas_colormap",
            None, [cty.POINTER(FL_OBJECT), Colormap],
            """void fl_set_canvas_colormap(FL_OBJECT * ob, Colormap colormap)
            """)
    ulcolormap = convert_to_ulong(colormap)
    keep_elem_refs(pObject, colormap, ulcolormap)
    _fl_set_canvas_colormap(pObject, ulcolormap)


def fl_set_canvas_visual(pObject, vi):
    """ fl_set_canvas_visual(pObject, vi)
    """

    _fl_set_canvas_visual = cfuncproto(
            load_so_libforms(), "fl_set_canvas_visual",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(Visual)],
            """void fl_set_canvas_visual(FL_OBJECT * obj, Visual * vi)
            """)
    keep_elem_refs(pObject, vi)
    _fl_set_canvas_visual(pObject, vi)


def fl_set_canvas_depth(pObject, depth):
    """ fl_set_canvas_depth(pObject, depth)
    """

    _fl_set_canvas_depth = cfuncproto(
            load_so_libforms(), "fl_set_canvas_depth",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_canvas_depth(FL_OBJECT * obj, int depth)
            """)
    idepth = convert_to_int(depth)
    keep_elem_refs(pObject, depth, idepth)
    _fl_set_canvas_depth(pObject, idepth)


def fl_set_canvas_attributes(pObject, mask, pXSetWindowAttributes):
    """ fl_set_canvas_attributes(pObject, mask, pXSetWindowAttributes)
    """

    _fl_set_canvas_attributes = cfuncproto(
            load_so_libforms(), "fl_set_canvas_attributes",
            None, [cty.POINTER(FL_OBJECT), cty.c_uint,
            cty.POINTER(XSetWindowAttributes)],
            """void fl_set_canvas_attributes(FL_OBJECT * ob,
               unsigned int mask, XSetWindowAttributes * xswa)
            """)
    uimask = convert_to_uint(mask)
    keep_elem_refs(pObject, mask, pXSetWindowAttributes, uimask)
    _fl_set_canvas_attributes(pObject, uimask, pXSetWindowAttributes)


FL_HANDLE_CANVAS = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), Window,
            cty.c_int, cty.c_int, cty.POINTER(XEvent), cty.c_void_p)

def fl_add_canvas_handler(pObject, ev, py_HandleCanvas, udata):
    """ fl_add_canvas_handler(pObject, ev, py_HandleCanvas, udata) -> canvas handler
    """

    _fl_add_canvas_handler = cfuncproto(
            load_so_libforms(), "fl_add_canvas_handler",
            FL_HANDLE_CANVAS, [cty.POINTER(FL_OBJECT), cty.c_int,
            FL_HANDLE_CANVAS, cty.c_void_p],
            """FL_HANDLE_CANVAS fl_add_canvas_handler(FL_OBJECT * ob, int ev,
               FL_HANDLE_CANVAS h, void * udata)
            """)
    iev = convert_to_int(ev)
    c_HandleCanvas = FL_HANDLE_CANVAS(py_HandleCanvas)
    keep_cfunc_refs(c_HandleCanvas, py_HandleCanvas)
    keep_elem_refs(pObject, ev, udata, iev)
    retval = _fl_add_canvas_handler(pObject, iev, c_HandleCanvas, udata)
    return retval


def fl_get_canvas_id(pObject):
    """
        fl_get_canvas_id(pObject) -> window

        @param pObject : pointer to canvas object
    """

    _fl_get_canvas_id = cfuncproto(
            load_so_libforms(), "fl_get_canvas_id",
            Window, [cty.POINTER(FL_OBJECT)],
            """Window fl_get_canvas_id(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_canvas_id(pObject)
    return retval


def fl_get_canvas_colormap(pObject):
    """ fl_get_canvas_colormap(pObject) -> colormap
    """

    _fl_get_canvas_colormap = cfuncproto(
            load_so_libforms(), "fl_get_canvas_colormap",
            Colormap, [cty.POINTER(FL_OBJECT)],
            """Colormap fl_get_canvas_colormap(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_canvas_colormap(pObject)
    return retval


def fl_get_canvas_depth(pObject):
    """ fl_get_canvas_depth(pObject) -> depth num.
    """

    _fl_get_canvas_depth = cfuncproto(
            load_so_libforms(), "fl_get_canvas_depth",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_canvas_depth(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_canvas_depth(pObject)
    return retval


def fl_remove_canvas_handler(pObject, ev, py_HandleCanvas):
    """ fl_remove_canvas_handler(pObject, ev, py_HandleCanvas)
    """

    _fl_remove_canvas_handler = cfuncproto(
            load_so_libforms(), "fl_remove_canvas_handler",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, FL_HANDLE_CANVAS],
            """void fl_remove_canvas_handler(FL_OBJECT * ob, int ev,
               FL_HANDLE_CANVAS h)
            """)
    iev = convert_to_int(ev)
    c_HandleCanvas = FL_HANDLE_CANVAS(py_handler)
    keep_cfunc_refs(c_HandleCanvas, py_HandleCanvas)
    keep_elem_refs(pObject, ev, iev)
    _fl_remove_canvas_handler(pObject, iev, c_HandleCanvas)


def fl_hide_canvas(pObject):
    """
        fl_hide_canvas(pObject)

        Hides a canvas object.

        @param pObject : pointer to canvas object
    """

    _fl_hide_canvas = cfuncproto(
            load_so_libforms(), "fl_hide_canvas",
            None, [cty.POINTER(FL_OBJECT)],
            """void fl_hide_canvas(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_hide_canvas(pObject)


def fl_share_canvas_colormap(pObject, colormap):
    """ fl_share_canvas_colormap(pObject, colormap)
    """

    _fl_share_canvas_colormap = cfuncproto(
            load_so_libforms(), "fl_share_canvas_colormap",
            None, [cty.POINTER(FL_OBJECT), Colormap],
            """void fl_share_canvas_colormap(FL_OBJECT * ob, Colormap colormap)
            """)
    ulcolormap = convert_to_ulong(colormap)
    keep_elem_refs(pObject, colormap, ulcolormap)
    _fl_share_canvas_colormap(pObject, ulcolormap)


def fl_clear_canvas(pObject):
    """ fl_clear_canvas(pObject)
    """

    _fl_clear_canvas = cfuncproto(
            load_so_libforms(), "fl_clear_canvas",
            None, [cty.POINTER(FL_OBJECT)],
            """void fl_clear_canvas(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_clear_canvas(pObject)


FL_MODIFY_CANVAS_PROP = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT))

def fl_modify_canvas_prop(pObject, py_initModifyCanvasProp, \
     py_activateModifyCanvasProp, py_cleanupModifyCanvasProp):
    """
        fl_modify_canvas_prop(pObject, py_initModifyCanvasProp, \
        py_activateModifyCanvasProp, py_cleanupModifyCanvasProp)

    """

    _fl_modify_canvas_prop = cfuncproto(
            load_so_libforms(), "fl_modify_canvas_prop",
            None, [cty.POINTER(FL_OBJECT), FL_MODIFY_CANVAS_PROP,
            FL_MODIFY_CANVAS_PROP, FL_MODIFY_CANVAS_PROP],
            """void fl_modify_canvas_prop(FL_OBJECT * obj,
               FL_MODIFY_CANVAS_PROP init, FL_MODIFY_CANVAS_PROP activate,
               FL_MODIFY_CANVAS_PROP cleanup)
            """)
    c_initModifyCanvasProp = FL_MODIFY_CANVAS_PROP(py_initModifyCanvasProp)
    c_activateModifyCanvasProp = FL_MODIFY_CANVAS_PROP( \
                py_activateModifyCanvasProp)
    c_cleanupModifyCanvasProp = FL_MODIFY_CANVAS_PROP( \
                py_cleanupModifyCanvasProp)
    keep_cfunc_refs(c_initModifyCanvasProp, py_initModifyCanvasProp, \
                c_activateModifyCanvasProp, py_activateModifyCanvasProp, \
                c_cleanupModifyCanvasProp, py_cleanupModifyCanvasProp)
    keep_elem_refs(pObject)
    _fl_modify_canvas_prop(pObject, c_initModifyCanvasProp,
                    c_activateModifyCanvasProp, c_cleanupModifyCanvasProp)


def fl_canvas_yield_to_shortcut(pObject, yes):
    """ fl_canvas_yield_to_shortcut(pObject, yes)
    """

    _fl_canvas_yield_to_shortcut = cfuncproto(
            load_so_libforms(), "fl_canvas_yield_to_shortcut",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_canvas_yield_to_shortcut(FL_OBJECT * ob, int yes)
            """)
    iyes = convert_to_int(yes)
    keep_elem_refs(pObject, yes, iyes)
    _fl_canvas_yield_to_shortcut(pObject, iyes)



#############
# glcanvas.h
#############

# This is an attempt to maintain some sort of backwards compatibility
# with old code whilst also getting rid of the old, system-specific
# hack.

# OpenGL canvases

def fl_create_glcanvas(canvastype, x, y, w, h, label):
    """ fl_create_glcanvas(canvastype, x, y, w, h, label) -> pObject
    """

    _fl_create_glcanvas = cfuncproto(
            load_so_libformsgl(), "fl_create_glcanvas",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_glcanvas(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(canvastype, CANVASTYPE_list)
    icanvastype = convert_to_int(canvastype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(canvastype, x, y, w, h, label, icanvastype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_glcanvas(icanvastype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_glcanvas(canvastype, x, y, w, h, label):
    """ fl_add_glcanvas(canvastype, x, y, w, h, label) -> pObject
    """

    _fl_add_glcanvas = cfuncproto(
            load_so_libformsgl(), "fl_add_glcanvas",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_glcanvas(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(canvastype, CANVASTYPE_list)
    icanvastype = convert_to_int(canvastype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(canvastype, x, y, w, h, label, icanvastype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_glcanvas(icanvastype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_glcanvas_defaults(config):
    """ fl_set_glcanvas_defaults(config):
    """

    _fl_set_glcanvas_defaults = cfuncproto(
            load_so_libformsgl(), "fl_set_glcanvas_defaults",
            None, [cty.POINTER(cty.c_int)],
            """void fl_set_glcanvas_defaults(const int * config):
            """)
    #iconfig = convert_to_int(config)
    keep_elem_refs(config)  #, iconfig)
    _fl_set_glcanvas_defaults(config)


def fl_get_glcanvas_defaults(config):
    """ fl_get_glcanvas_defaults(config):
    """

    _fl_get_glcanvas_defaults = cfuncproto(
            load_so_libformsgl(), "fl_get_glcanvas_defaults",
            None, [cty.c_int],
            """void fl_get_glcanvas_defaults(int config[ ]):
            """)
    iconfig = convert_to_int(config)
    keep_elem_refs(config, iconfig)
    _fl_get_glcanvas_defaults(iconfig)


def fl_set_glcanvas_attributes(pObject, config):
    """ fl_set_glcanvas_attributes(pObject, config)
    """

    _fl_set_glcanvas_attributes = cfuncproto(
            load_so_libformsgl(), "fl_set_glcanvas_attributes",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int)],
            """void fl_set_glcanvas_attributes(FL_OBJECT * ob,
               const int * config)
            """)
    keep_elem_refs(pObject, config)
    _fl_set_glcanvas_attributes(pObject, config)


def fl_get_glcanvas_attributes(pObject, attributes):
    """ fl_get_glcanvas_attributes(pObject, attributes)
    """

    _fl_get_glcanvas_attributes = cfuncproto(
            load_so_libformsgl(), "fl_get_glcanvas_attributes",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int)],
            """void fl_get_glcanvas_attributes(FL_OBJECT * ob,
               int * attributes)
            """)
    keep_elem_refs(pObject, attributes)
    _fl_get_glcanvas_attributes(pObject, attributes)


def fl_set_glcanvas_direct(pObject, direct):
    """ fl_set_glcanvas_direct(pObject, direct)
    """

    _fl_set_glcanvas_direct = cfuncproto(
            load_so_libformsgl(), "fl_set_glcanvas_direct",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_glcanvas_direct(FL_OBJECT * ob, int direct)
            """)
    idirect = convert_to_int(direct)
    keep_elem_refs(pObject, direct, idirect)
    _fl_set_glcanvas_direct(pObject, idirect)


def fl_activate_glcanvas(pObject):
    """ fl_activate_glcanvas(pObject)
    """

    _fl_activate_glcanvas = cfuncproto(
            load_so_libformsgl(), "fl_activate_glcanvas",
            None, [cty.POINTER(FL_OBJECT)],
            """void fl_activate_glcanvas(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_activate_glcanvas(pObject)


def fl_get_glcanvas_xvisualinfo(pObject):
    """ fl_get_glcanvas_xvisualinfo(pObject) -> xvisualinfo class
    """

    _fl_get_glcanvas_xvisualinfo = cfuncproto(
            load_so_libformsgl(), "fl_get_glcanvas_xvisualinfo",
            cty.POINTER(XVisualInfo), [cty.POINTER(FL_OBJECT)],
            """)XVisualInfo * fl_get_glcanvas_xvisualinfo(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_glcanvas_xvisualinfo(pObject)
    return retval


def fl_get_glcanvas_context(pObject):
    """ fl_get_glcanvas_context(pObject) -> glxcontext class
    """

    _fl_get_glcanvas_context = cfuncproto(
            load_so_libformsgl(), "fl_get_glcanvas_context",
            GLXContext, [cty.POINTER(FL_OBJECT)],
            """)GLXContext fl_get_glcanvas_context(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_glcanvas_context(pObject)
    return retval


def fl_glwincreate(config, pGLXContext, w, h):
    """ fl_glwincreate(config, pGLXContext, w, h) -> window
    """

    _fl_glwincreate = cfuncproto(
            load_so_libformsgl(), "fl_glwincreate",
            Window, [cty.POINTER(cty.c_int), cty.POINTER(GLXContext),
            cty.c_int, cty.c_int],
            """Window fl_glwincreate(int * config, GLXContext * context,
               int w, int h)
            """)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    keep_elem_refs(config, pGLXContext, w, h, iw, ih)
    retval = _fl_glwincreate(config, pGLXContext, iw, ih)
    return retval


def fl_glwinopen(config, pGLXContext, w, h):
    """ fl_glwinopen(config, pGLXContext, w, h) -> window
    """

    _fl_glwinopen = cfuncproto(
            load_so_libformsgl(), "fl_glwinopen",
            Window, [cty.POINTER(cty.c_int), cty.POINTER(GLXContext),
            cty.c_int, cty.c_int],
            """Window fl_glwinopen(int * config, GLXContext * context,
               int w, int h
            """)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    keep_elem_refs(config, pGLXContext, w, h, iw, ih)
    retval = _fl_glwinopen(config, pGLXContext, iw, ih)
    return retval



#############################
# forms.h (chart.h)
# Object Class: Chart
#############################

# Routines

def fl_create_chart(charttype, x, y, w, h, label):
    """ fl_create_chart(charttype, x, y, w, h, label) -> pObject
    """

    _fl_create_chart = cfuncproto(
            load_so_libforms(), "fl_create_chart",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_chart(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(charttype, CHARTTYPE_list)
    icharttype = convert_to_int(charttype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(charttype, x, y, w, h, label, icharttype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_chart(icharttype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_chart(charttype, x, y, w, h, label):
    """ fl_add_chart(charttype, x, y, w, h, label) -> pObject
    """

    _fl_add_chart = cfuncproto(
            load_so_libforms(), "fl_add_chart",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_chart(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(charttype, CHARTTYPE_list)
    icharttype = convert_to_int(charttype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(charttype, x, y, w, h, label, icharttype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_chart(icharttype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_chart(pObject):
    """ fl_clear_chart(pObject)
    """

    _fl_clear_chart = cfuncproto(
            load_so_libforms(), "fl_clear_chart",
            None, [cty.POINTER(FL_OBJECT)],
            """void fl_clear_chart(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_clear_chart(pObject)


def fl_add_chart_value(pObject, val, labeltext, col):
    """ fl_add_chart_value(pObject, val, labeltext, col)
    """

    _fl_add_chart_value = cfuncproto(
            load_so_libforms(), "fl_add_chart_value",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, STRING, cty.c_int],
            """void fl_add_chart_value(FL_OBJECT * ob, double val,
               const char * str, int col)
            """)
    fval = convert_to_double(val)
    slabeltext = convert_to_string(labeltext)
    icol = convert_to_int(col)
    keep_elem_refs(pObject, val, labeltext, col, fval, slabeltext, icol)
    _fl_add_chart_value(pObject, fval, slabeltext, icol)


def fl_insert_chart_value(pObject, indx, val, labeltext, col):
    """ fl_insert_chart_value(pObject, indx, val, labeltext, col)
    """

    _fl_insert_chart_value = cfuncproto(
            load_so_libforms(), "fl_insert_chart_value",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_double, STRING,
            cty.c_int],
            """void fl_insert_chart_value(FL_OBJECT * ob, int indx,
               double val, const char * str, int col)
            """)
    iindx = convert_to_int(indx)
    fval = convert_to_double(val)
    slabeltext = convert_to_string(labeltext)
    icol = convert_to_int(col)
    keep_elem_refs(pObject, indx, val, labeltext, col, iindx, fval,
                   slabeltext, icol)
    _fl_insert_chart_value(pObject, iindx, fval, slabeltext, icol)


def fl_replace_chart_value(pObject, indx, val, labeltext, col):
    """ fl_replace_chart_value(pObject, indx, val, labeltext, col)
    """

    _fl_replace_chart_value = cfuncproto(
            load_so_libforms(), "fl_replace_chart_value",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_double, STRING,
            cty.c_int],
            """void fl_replace_chart_value(FL_OBJECT * ob, int indx,
               double val, const char * str, int col)
            """)
    iindx = convert_to_int(indx)
    fval = convert_to_double(val)
    slabeltext = convert_to_string(labeltext)
    icol = convert_to_int(col)
    keep_elem_refs(pObject, indx, val, labeltext, col, iindx, fval,
                   slabeltext, icol)
    _fl_replace_chart_value(pObject, iindx, fval, slabeltext, icol)


def fl_set_chart_bounds(pObject, minbound, maxbound):
    """ fl_set_chart_bounds(pObject, minbound, maxbound)
    """

    _fl_set_chart_bounds = cfuncproto(
            load_so_libforms(), "fl_set_chart_bounds",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_chart_bounds(FL_OBJECT * ob, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_chart_bounds(pObject, fminbound, fmaxbound)


#def fl_get_chart_bounds(pObject, minbound, maxbound)
def fl_get_chart_bounds(pObject):
    """ fl_get_chart_bounds(pObject) -> minbound, maxbound
    """

    _fl_get_chart_bounds = cfuncproto(
            load_so_libforms(), "fl_get_chart_bounds",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_chart_bounds(FL_OBJECT * ob, double * min,
               double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_chart_bounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_set_chart_maxnumb(pObject, maxnumb):
    """ fl_set_chart_maxnumb(pObject, maxnumb)
    """

    _fl_set_chart_maxnumb = cfuncproto(
            load_so_libforms(), "fl_set_chart_maxnumb",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_chart_maxnumb(FL_OBJECT * ob, int maxnumb)
            """)
    imaxnumb = convert_to_int(maxnumb)
    keep_elem_refs(pObject, maxnumb, imaxnumb)
    _fl_set_chart_maxnumb(pObject, imaxnumb)


def fl_set_chart_autosize(pObject, autosize):
    """ fl_set_chart_autosize(pObject, autosize)
    """

    _fl_set_chart_autosize = cfuncproto(
            load_so_libforms(), "fl_set_chart_autosize",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_chart_autosize(FL_OBJECT * ob, int autosize)
            """)
    iautosize = convert_to_int(autosize)
    keep_elem_refs(pObject, autosize, iautosize)
    _fl_set_chart_autosize(pObject, iautosize)


def fl_set_chart_lstyle(pObject, lstyle):
    """ fl_set_chart_lstyle(pObject, lstyle)
    """

    _fl_set_chart_lstyle = cfuncproto(
            load_so_libforms(), "fl_set_chart_lstyle",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_chart_lstyle(FL_OBJECT * ob, int lstyle)
            """)
    ilstyle = convert_to_int(lstyle)
    keep_elem_refs(pObject, lstyle, ilstyle)
    _fl_set_chart_lstyle(pObject, ilstyle)


def fl_set_chart_lsize(pObject, lsize):
    """ fl_set_chart_lsize(pObject, lsize)
    """

    _fl_set_chart_lsize = cfuncproto(
            load_so_libforms(), "fl_set_chart_lsize",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_chart_lsize(FL_OBJECT * ob, int lsize)
            """)
    ilsize = convert_to_int(lsize)
    keep_elem_refs(pObject, lsize, ilsize)
    _fl_set_chart_lsize(pObject, ilsize)


def fl_set_chart_lcolor(pObject, colr):
    """ fl_set_chart_lcolor(pObject, colr)
    """

    _fl_set_chart_lcolor = cfuncproto(
            load_so_libforms(), "fl_set_chart_lcolor",
            None, [cty.POINTER(FL_OBJECT), FL_COLOR],
            """void fl_set_chart_lcolor(FL_OBJECT * ob, FL_COLOR lcol)
            """)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, colr, ulcolr)
    _fl_set_chart_lcolor(pObject, ulcolr)


def fl_set_chart_baseline(pObject, yesno):
    """ fl_set_chart_baseline(pObject, yesno)
    """

    _fl_set_chart_baseline = cfuncproto(
            load_so_libforms(), "fl_set_chart_baseline",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_chart_baseline(FL_OBJECT * ob, int iYesNo)
            """)
    iyesno = convert_to_int(yesno)
    keep_elem_refs(pObject, yesno, iyesno)
    _fl_set_chart_baseline(pObject, iyesno)


fl_set_chart_lcol = fl_set_chart_lcolor



#####################
# forms.h (choice.h)
#####################

# Routines

def fl_create_choice(choicetype, x, y, w, h, label):
    """ fl_create_choice(choicetype, x, y, w, h, label) -> pObject
    """

    _fl_create_choice = cfuncproto(
            load_so_libforms(), "fl_create_choice",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_choice(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(choicetype, CHOICETYPE_list)
    ichoicetype = convert_to_int(choicetype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(choicetype, x, y, w, h, label, ichoicetype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_choice(ichoicetype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_choice(choicetype, x, y, w, h, label):
    """ fl_add_choice(choicetype, x, y, w, h, label) -> pObject
    """

    _fl_add_choice = cfuncproto(
            load_so_libforms(), "fl_add_choice",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_choice(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)  DEPRECATED
            """)
    check_admitted_listvalues(choicetype, CHOICETYPE_list)
    ichoicetype = convert_to_int(choicetype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(choicetype, x, y, w, h, label, ichoicetype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_choice(ichoicetype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_choice(pObject):
    """ fl_clear_choice(pObject)
    """

    _fl_clear_choice = cfuncproto(
            load_so_libforms(), "fl_clear_choice",
            None, [cty.POINTER(FL_OBJECT)],
            """void fl_clear_choice(FL_OBJECT * ob)    DEPRECATED
            """)
    keep_elem_refs(pObject)
    _fl_clear_choice(pObject)


def fl_addto_choice(pObject, choicetext):
    """ fl_addto_choice(pObject, choicetext) -> num.
    """

    _fl_addto_choice = cfuncproto(
            load_so_libforms(), "fl_addto_choice",
            cty.c_int, [cty.POINTER(FL_OBJECT), STRING],
            """int fl_addto_choice(FL_OBJECT * ob, const char * str)    DEPRECATED
            """)
    warn_deprecated_function()
    schoicetext = convert_to_string(choicetext)
    keep_elem_refs(pObject, choicetext, schoicetext)
    retval = _fl_addto_choice(pObject, schoicetext)
    return retval


def fl_replace_choice(pObject, numb, choicetext):
    """ fl_replace_choice(pObject, numb, choicetext)
    """

    _fl_replace_choice = cfuncproto(
            load_so_libforms(), "fl_replace_choice",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, STRING],
            """void fl_replace_choice(FL_OBJECT * ob, int numb,
               const char * str)    DEPRECATED
            """)
    inumb = convert_to_int(numb)
    schoicetext = convert_to_string(choicetext)
    keep_elem_refs(pObject, numb, choicetext, inumb, schoicetext)
    _fl_replace_choice(pObject, inumb, schoicetext)


def fl_delete_choice(pObject, numb):
    """ fl_delete_choice(pObject, numb)
    """

    _fl_delete_choice = cfuncproto(
            load_so_libforms(), "fl_delete_choice",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_delete_choice(FL_OBJECT * ob, int numb)    DEPRECATED
            """)
    inumb = convert_to_int(numb)
    keep_elem_refs(pObject, numb, inumb)
    _fl_delete_choice(pObject, inumb)


def fl_set_choice(pObject, choice):
    """ fl_set_choice(pObject, choice)
    """

    _fl_set_choice = cfuncproto(
            load_so_libforms(), "fl_set_choice",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_choice(FL_OBJECT * ob, int choice)    DEPRECATED
            """)
    ichoice = convert_to_int(choice)
    keep_elem_refs(pObject, choice, ichoice)
    _fl_set_choice(pObject, ichoice)


def fl_set_choice_text(pObject, choicetext):
    """ fl_set_choice_text(pObject, choicetext)
    """

    _fl_set_choice_text = cfuncproto(
            load_so_libforms(), "fl_set_choice_text",
            None, [cty.POINTER(FL_OBJECT), STRING],
            """void fl_set_choice_text(FL_OBJECT * ob, const char * txt)    DEPRECATED
            """)
    schoicetext = convert_to_string(choicetext)
    keep_elem_refs(pObject, choicetext, schoicetext)
    _fl_set_choice_text(pObject, schoicetext)


def fl_get_choice(pObject):
    """ fl_get_choice(pObject) -> num.
    """

    _fl_get_choice = cfuncproto(
            load_so_libforms(), "fl_get_choice",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_choice(FL_OBJECT * ob)    DEPRECATED
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_choice(pObject)
    return retval


def fl_get_choice_item_text(pObject, n):
    """ fl_get_choice_item_text(pObject, n) -> text string
    """

    _fl_get_choice_item_text = cfuncproto(
            load_so_libforms(), "fl_get_choice_item_text",
            STRING, [cty.POINTER(FL_OBJECT), cty.c_int],
            """const char * fl_get_choice_item_text(FL_OBJECT * ob, int n)    DEPRECATED
            """)
    inum = convert_to_int(n)
    keep_elem_refs(pObject, n, inum)
    retval = _fl_get_choice_item_text(pObject, inum)
    return retval


def fl_get_choice_maxitems(pObject):
    """ fl_get_choice_maxitems(pObject) -> items num.
    """

    _fl_get_choice_maxitems = cfuncproto(
            load_so_libforms(), "fl_get_choice_maxitems",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_choice_maxitems(FL_OBJECT * ob)    DEPRECATED
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_choice_maxitems(pObject)
    return retval


def fl_get_choice_text(pObject):
    """ fl_get_choice_text(pObject) -> text string
    """

    _fl_get_choice_text = cfuncproto(
            load_so_libforms(), "fl_get_choice_text",
            STRING, [cty.POINTER(FL_OBJECT)],
            """const char * fl_get_choice_text(FL_OBJECT * ob)    DEPRECATED
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_choice_text(pObject)
    return retval


def fl_set_choice_fontsize(pObject, size):
    """ fl_set_choice_fontsize(pObject, size)
    """

    _fl_set_choice_fontsize = cfuncproto(
            load_so_libforms(), "fl_set_choice_fontsize",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_choice_fontsize(FL_OBJECT * ob, int size)
            """)
    isize = convert_to_int(size)
    keep_elem_refs(pObject, size, isize)
    _fl_set_choice_fontsize(pObject, isize)


def fl_set_choice_fontstyle(pObject, style):
    """ fl_set_choice_fontstyle(pObject, style)
    """

    _fl_set_choice_fontstyle = cfuncproto(
            load_so_libforms(), "fl_set_choice_fontstyle",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_choice_fontstyle(FL_OBJECT * ob, int style)
            """)
    istyle = convert_to_int(style)
    keep_elem_refs(pObject, style, istyle)
    _fl_set_choice_fontstyle(pObject, istyle)


def fl_set_choice_align(pObject, align):
    """ fl_set_choice_align(pObject, align)
    """

    _fl_set_choice_align = cfuncproto(
            load_so_libforms(), "fl_set_choice_align",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_choice_align(FL_OBJECT * ob, int align)
            """)
    ialign = convert_to_int(align)
    keep_elem_refs(pObject, align, ialign)
    _fl_set_choice_align(pObject, ialign)


def fl_get_choice_item_mode(pObject, item):
    """ fl_get_choice_item_mode(pObject, item) -> mode num.
    """

    _fl_get_choice_item_mode = cfuncproto(
            load_so_libforms(), "fl_get_choice_item_mode",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_get_choice_item_mode(FL_OBJECT * ob, int item)    DEPRECATED
            """)
    iitem = convert_to_int(item)
    keep_elem_refs(pObject, item, iitem)
    retval = _fl_get_choice_item_mode(pObject, iitem)
    return retval


def fl_set_choice_item_mode(pObject, item, mode):
    """ fl_set_choice_item_mode(pObject, item, mode)
    """

    _fl_set_choice_item_mode = cfuncproto(
            load_so_libforms(), "fl_set_choice_item_mode",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_uint],
            """void fl_set_choice_item_mode(FL_OBJECT * ob, int item,
               unsigned int mode)
            """)
    iitem = convert_to_int(item)
    uimode = convert_to_uint(mode)
    keep_elem_refs(pObject, item, mode, iitem, uimode)
    _fl_set_choice_item_mode(pObject, iitem, uimode)


def fl_set_choice_item_shortcut(pObject, item, sctext):
    """ fl_set_choice_item_shortcut(pObject, item, sstext)
    """

    _fl_set_choice_item_shortcut = cfuncproto(
            load_so_libforms(), "fl_set_choice_item_shortcut",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, STRING],
            """void fl_set_choice_item_shortcut(FL_OBJECT * ob, int item,
               const char * sc)
            """)
    iitem = convert_to_int(item)
    ssctext = convert_to_string(sctext)
    keep_elem_refs(pObject, item, sctext, iitem, ssctext)
    _fl_set_choice_item_shortcut(pObject, iitem, ssctext)


def fl_set_choice_entries(pObject, pPopupEntry):
    """ fl_set_choice_entries(pObject, pPopupEntry) -> num.
    """

    _fl_set_choice_entries = cfuncproto(
            load_so_libforms(), "fl_set_choice_entries",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_PUP_ENTRY)],
            """int fl_set_choice_entries(FL_OBJECT * ob, FL_PUP_ENTRY * ent)    DEPRECATED
            """)
    keep_elem_refs(pObject, pPopupEntry)
    retval = _fl_set_choice_entries(pObject, pPopupEntry)
    return retval


def fl_set_choice_notitle(pObject, n):
    """ fl_set_choice_notitle(pObject, n) -> num.
    """

    _fl_set_choice_notitle = cfuncproto(
            load_so_libforms(), "fl_set_choice_notitle",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_set_choice_notitle(FL_OBJECT * ob, int n)
            """)
    inum = convert_to_int(n)
    keep_elem_refs(pObject, n, inum)
    retval = _fl_set_choice_notitle(pObject, inum)
    return retval



#################################
# forms.h (clipbd.h)
# prototypes for clipboard stuff
#################################

FL_LOSE_SELECTION_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
                                     cty.c_long)
FL_LOSE_SELECTION_CALLBACK = FL_LOSE_SELECTION_CB

def fl_stuff_clipboard(pObject, clipbdtype, data, size, py_LoseSelectionCb):
    """ fl_stuff_clipboard(pObject, clipbdtype, data, size, py_LoseSelectionCb) -> num.
    """

    _fl_stuff_clipboard = cfuncproto(
            load_so_libforms(), "fl_stuff_clipboard",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_long, cty.c_void_p,
            cty.c_long, FL_LOSE_SELECTION_CB],
            """int fl_stuff_clipboard(FL_OBJECT * ob, long int type,
               const char * data, long int size,
               FL_LOSE_SELECTION_CB lose_callback)
            """)
    lclipbdtype = convert_to_long(clipbdtype)       # type is not used
    lsize = convert_to_long(size)
    c_LoseSelectionCb = FL_LOSE_SELECTION_CB(py_LoseSelectionCb)
    keep_cfunc_refs(c_LoseSelectionCb, py_LoseSelectionCb)
    keep_elem_refs(pObject, clipbdtype, data, size, lclipbdtype, lsize)
    retval = _fl_stuff_clipboard(pObject, lclipbdtype, data, lsize,
                                 c_LoseSelectionCb)
    return retval


FL_SELECTION_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
                                cty.c_long, cty.c_void_p, cty.c_long)
FL_SELECTION_CALLBACK = FL_SELECTION_CB

def fl_request_clipboard(pObject, clipbdtype, py_SelectionCb):
    """ fl_request_clipboard(pObject, clipbdtype, py_SelectionCb) -> num.
    """

    _fl_request_clipboard = cfuncproto(
            load_so_libforms(), "fl_request_clipboard",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_long, FL_SELECTION_CB],
            """int fl_request_clipboard(FL_OBJECT * ob, long int type,
               FL_SELECTION_CB got_it_callback)
            """)
    lclipbdtype = convert_to_long(clipbdtype)       # type is not used
    c_SelectionCb = FL_SELECTION_CB(py_SelectionCb)
    keep_cfunc_refs(c_SelectionCb, py_SelectionCb)
    keep_elem_refs(pObject, clipbdtype, lclipbdtype)
    retval = _fl_request_clipboard(pObject, lclipbdtype, c_SelectionCb)
    return retval



#################################
# forms.h (clock.h)
#################################


def fl_create_clock(clocktype, x, y, w, h, s):
    """ fl_create_clock(clocktype, x, y, w, h, s) -> pObject
    """

    _fl_create_clock = cfuncproto(
            load_so_libforms(), "fl_create_clock",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_clock(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * s)
            """)
    check_admitted_listvalues(clocktype, CLOCKTYPE_list)
    iclocktype = convert_to_int(clocktype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ss = convert_to_string(s)
    keep_elem_refs(clocktype, x, y, w, h, s, iclocktype, ix, iy,
                   iw, ih, ss)
    retval = _fl_create_clock(iclocktype, ix, iy, iw, ih, ss)
    return retval


def fl_add_clock(clocktype, x, y, w, h, s):
    """ fl_add_clock(clocktype, x, y, w, h, s) -> pObject
    """

    _fl_add_clock = cfuncproto(
            load_so_libforms(), "fl_add_clock",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_clock(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * s)
            """)
    check_admitted_listvalues(clocktype, CLOCKTYPE_list)
    iclocktype = convert_to_int(clocktype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ss = convert_to_string(s)
    keep_elem_refs(clocktype, x, y, w, h, s, iclocktype, ix, iy,
                   iw, ih, ss)
    retval = _fl_add_clock(iclocktype, ix, iy, iw, ih, ss)
    return retval


#def fl_get_clock(pObject, hr, mn, sec)
def fl_get_clock(pObject):
    """ fl_get_clock(pObject) -> hr, mn, sec
    """

    _fl_get_clock = cfuncproto(
            load_so_libforms(), "fl_get_clock",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
            """void fl_get_clock(FL_OBJECT * ob, int * h, int * m, int * s)
            """)
    hr, phr = make_int_and_pointer()
    mn, pmn = make_int_and_pointer()
    sec, psec = make_int_and_pointer()
    keep_elem_refs(pObject, hr, mn, sec, phr, pmn, psec)
    _fl_get_clock(pObject, phr, pmn, psec)
    return hr, mn, sec


def fl_set_clock_adjustment(pObject, offset):
    """ fl_set_clock_adjustment(pObject, offset) -> num.
    """

    _fl_set_clock_adjustment = cfuncproto(
            load_so_libforms(), "fl_set_clock_adjustment",
            cty.c_long, [cty.POINTER(FL_OBJECT), cty.c_long],
            """long int fl_set_clock_adjustment(FL_OBJECT * ob,
               long int offset)
            """)
    loffset = convert_to_long(offset)
    keep_elem_refs(pObject, offset, loffset)
    retval = _fl_set_clock_adjustment(pObject, loffset)
    return retval


def fl_set_clock_ampm(pObject, y):
    """ fl_set_clock_ampm(pObject, y)
    """

    _fl_set_clock_ampm = cfuncproto(
            load_so_libforms(), "fl_set_clock_ampm",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_clock_ampm(FL_OBJECT * ob, int y)
            """)
    iy = convert_to_int(y)
    keep_elem_refs(pObject, y, iy)
    _fl_set_clock_ampm(pObject, iy)



######################
# forms.h (counter.h)
######################

# Routines

def fl_create_counter(countertype, x, y, w, h, label):
    """ fl_create_counter(countertype, x, y, w, h, label) -> pObject
    """

    _fl_create_counter = cfuncproto(
            load_so_libforms(), "fl_create_counter",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_counter(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(countertype, COUNTERTYPE_list)
    icountertype = convert_to_int(countertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(countertype, x, y, w, h, label, icountertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_counter(icountertype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_counter(countertype, x, y, w, h, label):
    """ fl_add_counter(countertype, x, y, w, h, label) -> pObject
    """

    _fl_add_counter = cfuncproto(
            load_so_libforms(), "fl_add_counter",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_counter(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(countertype, COUNTERTYPE_list)
    icountertype = convert_to_int(countertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(countertype, x, y, w, h, label, icountertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_counter(icountertype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_counter_value(pObject, val):
    """ fl_set_counter_value(pObject, val)
    """

    _fl_set_counter_value = cfuncproto(
            load_so_libforms(), "fl_set_counter_value",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_counter_value(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_counter_value(pObject, fval)


def fl_set_counter_bounds(pObject, minbound, maxbound):
    """ fl_set_counter_bounds(pObject, minbound, maxbound)
    """

    _fl_set_counter_bounds = cfuncproto(
            load_so_libforms(), "fl_set_counter_bounds",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_counter_bounds(FL_OBJECT * ob, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_counter_bounds(pObject, fminbound, fmaxbound)


def fl_set_counter_step(pObject, s, l):
    """ fl_set_counter_step(pObject, s, l)
    """

    _fl_set_counter_step = cfuncproto(
            load_so_libforms(), "fl_set_counter_step",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_counter_step(FL_OBJECT * ob, double s, double l)
            """)
    fs = convert_to_double(s)
    fl = convert_to_double(l)
    keep_elem_refs(pObject, s, l, fs, fl)
    _fl_set_counter_step(pObject, fs, fl)


def fl_set_counter_precision(pObject, prec):
    """ fl_set_counter_precision(pObject, prec)
    """

    _fl_set_counter_precision = cfuncproto(
            load_so_libforms(), "fl_set_counter_precision",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_counter_precision(FL_OBJECT * ob, int prec)
            """)
    iprec = convert_to_int(prec)
    keep_elem_refs(pObject, prec, iprec)
    _fl_set_counter_precision(pObject, iprec)


def fl_get_counter_precision(pObject):
    """ fl_get_counter_precision(pObject) -> num.
    """

    _fl_get_counter_precision = cfuncproto(
            load_so_libforms(), "fl_get_counter_precision",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_counter_precision(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_counter_precision(pObject)
    return retval


def fl_set_counter_return(pObject, how):
    """ fl_set_counter_return(pObject, how)
    """

    _fl_set_counter_return = cfuncproto(
            load_so_libforms(), "fl_set_counter_return",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_counter_return(FL_OBJECT * ob, int how)
            """)
    ihow = convert_to_int(how)
    keep_elem_refs(pObject, how, ihow)
    _fl_set_counter_return(pObject, ihow)


def fl_get_counter_value(pObject):
    """ fl_get_counter_value(pObject) -> num.
    """

    _fl_get_counter_value = cfuncproto(
            load_so_libforms(), "fl_get_counter_value",
            cty.c_double, [cty.POINTER(FL_OBJECT)],
            """double fl_get_counter_value(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_counter_value(pObject)
    return retval


#def fl_get_counter_bounds(pObject, minbound, maxbound)
def fl_get_counter_bounds(pObject):
    """ fl_get_counter_bounds(pObject) -> minbound, maxbound
    """

    _fl_get_counter_bounds = cfuncproto(
            load_so_libforms(), "fl_get_counter_bounds",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_counter_bounds(FL_OBJECT * ob, double * min,
               double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_counter_bounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


#def fl_get_counter_step(pObject, s, l)
def fl_get_counter_step(pObject):
    """ fl_get_counter_step(pObject) -> s, l
    """

    _fl_get_counter_step = cfuncproto(
            load_so_libforms(), "fl_get_counter_step",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_counter_step(FL_OBJECT * ob, double * s,
               double * l)
            """)
    s, ps = make_double_and_pointer()
    l, pl = make_double_and_pointer()
    keep_elem_refs(pObject, s, l, ps, pl)
    _fl_get_counter_step(pObject, ps, pl)
    return s, l


FL_VAL_FILTER = cty.CFUNCTYPE(STRING, cty.POINTER(FL_OBJECT), cty.c_double, \
                              cty.c_int)

def fl_set_counter_filter(pObject, py_ValFilter):
    """ fl_set_counter_filter(pObject, ValFilter)
    """

    _fl_set_counter_filter = cfuncproto(
            load_so_libforms(), "fl_set_counter_filter",
            None, [cty.POINTER(FL_OBJECT), FL_VAL_FILTER],
            """void fl_set_counter_filter(FL_OBJECT * ob,
               FL_VAL_FILTER filter)
            """)
    c_ValFilter = FL_VAL_FILTER(py_ValFilter)
    keep_cfunc_refs(c_ValFilter, py_ValFilter)
    keep_elem_refs(pObject)
    _fl_set_counter_filter(pObject, c_ValFilter)


# Functions to set and get the timeout value used by the
# counter code to control modification of the counter value.

def fl_get_counter_repeat(pObject):
    """ fl_get_counter_repeat(pObject) -> num.
    """

    _fl_get_counter_repeat = cfuncproto(
            load_so_libforms(), "fl_get_counter_repeat",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_counter_repeat(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_counter_repeat(pObject)
    return retval


def fl_set_counter_repeat(pObject, msec):
    """ fl_set_counter_repeat(pObject, msec)
    """

    _fl_set_counter_repeat = cfuncproto(
            load_so_libforms(), "fl_set_counter_repeat",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_counter_repeat(FL_OBJECT * ob, int millisec)
            """)
    imsec = convert_to_int(msec)
    keep_elem_refs(pObject, msec, imsec)
    _fl_set_counter_repeat(pObject, imsec)


def fl_get_counter_min_repeat(pObject):
    """ fl_get_counter_min_repeat(pObject) -> num.
    """

    _fl_get_counter_min_repeat = cfuncproto(
            load_so_libforms(), "fl_get_counter_min_repeat",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_counter_min_repeat(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_counter_min_repeat(pObject)
    return retval


def fl_set_counter_min_repeat(pObject, msec):
    """ fl_set_counter_min_repeat(pObject, msec)
    """

    _fl_set_counter_min_repeat = cfuncproto(
            load_so_libforms(), "fl_set_counter_min_repeat",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_counter_min_repeat(FL_OBJECT * ob, int millisec)
            """)
    imsec = convert_to_int(msec)
    keep_elem_refs(pObject, msec, imsec)
    _fl_set_counter_min_repeat(pObject, imsec)


def fl_get_counter_speedjump(pObject):
    """ fl_get_counter_speedjump(pObject) -> num.
    """

    _fl_get_counter_speedjump = cfuncproto(
            load_so_libforms(), "fl_get_counter_speedjump",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_counter_speedjump(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_counter_speedjump(pObject)
    return retval


def fl_set_counter_speedjump(pObject, yesno):
    """ fl_set_counter_speedjump(pObject, yesno)
    """

    _fl_set_counter_speedjump = cfuncproto(
            load_so_libforms(), "fl_set_counter_speedjump",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_counter_speedjump(FL_OBJECT * ob, int yes_no)
            """)
    iyesno = convert_to_int(yesno)
    keep_elem_refs(pObject, yesno, iyesno)
    _fl_set_counter_speedjump(pObject, iyesno)



#############################
# forms.h (cursor.h)
# Cursor defs and prototypes
#############################

def fl_set_cursor(win, numb):
    """ fl_set_cursor(win, numb)
    """

    _fl_set_cursor = cfuncproto(
            load_so_libforms(), "fl_set_cursor",
            None, [Window, cty.c_int],
            """void fl_set_cursor(Window win, int name)
            """)
    ulwin = convert_to_Window(win)
    inumb = convert_to_int(numb)
    keep_elem_refs(win, numb, ulwin, inumb)
    _fl_set_cursor(ulwin, inumb)


def fl_set_cursor_color(numb, fgcolr, bgcolr):
    """ fl_set_cursor_color(numb, fgcolr, bgcolr)
    """

    _fl_set_cursor_color = cfuncproto(
            load_so_libforms(), "fl_set_cursor_color",
            None, [cty.c_int, FL_COLOR, FL_COLOR],
            """void fl_set_cursor_color(int name, FL_COLOR fg, FL_COLOR bg)
            """)
    inumb = convert_to_int(numb)
    ulfgcolr = convert_to_FL_COLOR(fgcolr)
    ulbgcolr = convert_to_FL_COLOR(bgcolr)
    keep_elem_refs(numb, fgcolr, bgcolr, inumb, ulfgcolr, ulbgcolr)
    _fl_set_cursor_color(inumb, ulfgcolr, ulbgcolr)


def fl_create_bitmap_cursor(source, maskstr, w, h, hotx, hoty):
    """ fl_create_bitmap_cursor(source, maskstr, w, h, hotx, hoty) -> num.
    """

    _fl_create_bitmap_cursor = cfuncproto(
            load_so_libforms(), "fl_create_bitmap_cursor",
            cty.c_int, [STRING, STRING, cty.c_int, cty.c_int, cty.c_int,
            cty.c_int],
            """int fl_create_bitmap_cursor(const char * source,
               const char * mask, int w, int h, int hotx, int hoty)
            """)
    ssource = convert_to_string(source)
    smaskstr = convert_to_string(maskstr)
    iw = convert_to_int(w)
    ih = convert_to_FL_Coord(h)
    ihotx = convert_to_int(hotx)
    ihoty = convert_to_int(hoty)
    keep_elem_refs(source, maskstr, w, h, hotx, hoty, ssource, smaskstr,
                   iw, ih, ihotx, ihoty)
    retval = _fl_create_bitmap_cursor(ssource, smaskstr, iw, ih, ihotx, ihoty)
    return retval


def fl_create_animated_cursor(curnames, timeout):
    """ fl_create_animated_cursor(curnames, timeout) -> num.
    """

    _fl_create_animated_cursor = cfuncproto(
            load_so_libforms(), "fl_create_animated_cursor",
            cty.c_int, [cty.POINTER(cty.c_int), cty.c_int],
            """int fl_create_animated_cursor(int * cur_names, int timeout)
            """)
    pcurnames = cty.cast(curnames, cty.POINTER(cty.c_int))
    itimeout = convert_to_int(timeout)
    keep_elem_refs(curnames, timeout, pcurnames, itimeout)
    retval = _fl_create_animated_cursor(pcurnames, itimeout)
    return retval


def fl_get_cursor_byname(numb):
    """ fl_get_cursor_byname(numb) -> cursor
    """

    _fl_get_cursor_byname = cfuncproto(
            load_so_libforms(), "fl_get_cursor_byname",
            Cursor, [cty.c_int],
            """Cursor fl_get_cursor_byname(int name)
            """)
    inumb = convert_to_int(numb)
    keep_elem_refs(numb, inumb)
    retval = _fl_get_cursor_byname(inumb)
    return retval



###################
# forms.h (dial.h)
###################

# Routines

def fl_create_dial(dialtype, x, y, w, h, label):
    """ fl_create_dial(dialtype, x, y, w, h, label) -> pObject
    """

    _fl_create_dial = cfuncproto(
            load_so_libforms(), "fl_create_dial",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_dial(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(dialtype, DIALTYPE_list)
    idialtype = convert_to_int(dialtype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(dialtype, x, y, w, h, label, idialtype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_dial(idialtype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_dial(dialtype, x, y, w, h, label):
    """ fl_add_dial(dialtype, x, y, w, h, label) -> pObject
    """

    _fl_add_dial = cfuncproto(
            load_so_libforms(), "fl_add_dial",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_dial(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(dialtype, DIALTYPE_list)
    idialtype = convert_to_int(dialtype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(dialtype, x, y, w, h, label, idialtype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_dial(idialtype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_dial_value(pObject, val):
    """ fl_set_dial_value(pObject, val)
    """

    _fl_set_dial_value = cfuncproto(
            load_so_libforms(), "fl_set_dial_value",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_dial_value(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_dial_value(pObject, fval)


def fl_get_dial_value(pObject):
    """ fl_get_dial_value(pObject) -> num.
    """

    _fl_get_dial_value = cfuncproto(
            load_so_libforms(), "fl_get_dial_value",
            cty.c_double, [cty.POINTER(FL_OBJECT)],
            """double fl_get_dial_value(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_dial_value(pObject)
    return retval


def fl_set_dial_bounds(pObject, minbound, maxbound):
    """ fl_set_dial_bounds(pObject, minbound, maxbound)
    """

    _fl_set_dial_bounds = cfuncproto(
            load_so_libforms(), "fl_set_dial_bounds",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_dial_bounds(FL_OBJECT * ob, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_dial_bounds(pObject, fminbound, fmaxbound)


#def fl_get_dial_bounds(pObject, minbound, maxbound)
def fl_get_dial_bounds(pObject):
    """ fl_get_dial_bounds(pObject) -> minbound, maxbound
    """

    _fl_get_dial_bounds = cfuncproto(
            load_so_libforms(), "fl_get_dial_bounds",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_dial_bounds(FL_OBJECT * ob, double * min,
               double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_dial_bounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_set_dial_step(pObject, value):
    """ fl_set_dial_step(pObject, value)
    """

    _fl_set_dial_step = cfuncproto(
            load_so_libforms(), "fl_set_dial_step",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_dial_step(FL_OBJECT * ob, double value)
            """)
    fvalue = convert_to_double(value)
    keep_elem_refs(pObject, value, fvalue)
    _fl_set_dial_step(pObject, fvalue)


def fl_set_dial_return(pObject, value):
    """ fl_set_dial_return(pObject, value)
    """

    _fl_set_dial_return = cfuncproto(
            load_so_libforms(), "fl_set_dial_return",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_dial_return(FL_OBJECT * ob, int value)
            """)
    ivalue = convert_to_int(value)
    keep_elem_refs(pObject, value, ivalue)
    _fl_set_dial_return(pObject, ivalue)


def fl_set_dial_angles(pObject, angmin, angmax):
    """ fl_set_dial_angles(pObject, angmin, angmax)
    """

    _fl_set_dial_angles = cfuncproto(
            load_so_libforms(), "fl_set_dial_angles",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_dial_angles(FL_OBJECT * ob, double amin,
               double amax)
            """)
    fangmin = convert_to_double(angmin)
    fangmax = convert_to_double(angmax)
    keep_elem_refs(pObject, angmin, angmax, fangmin, fangmax)
    _fl_set_dial_angles(pObject, fangmin, fangmax)


def fl_set_dial_cross(pObject, flag):
    """ fl_set_dial_cross(pObject, flag)
    """

    _fl_set_dial_cross = cfuncproto(
            load_so_libforms(), "fl_set_dial_cross",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_dial_cross(FL_OBJECT * ob, int flag)
            """)
    iflag = convert_to_int(flag)
    keep_elem_refs(pObject, flag, iflag)
    _fl_set_dial_cross(pObject, iflag)


fl_set_dial_crossover = fl_set_dial_cross


def fl_set_dial_direction(pObject, directn):
    """ fl_set_dial_direction(pObject, directn)
    """

    _fl_set_dial_direction = cfuncproto(
            load_so_libforms(), "fl_set_dial_direction",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_dial_direction(FL_OBJECT * ob, int dir)
            """)
    idirectn = convert_to_int(directn)
    keep_elem_refs(pObject, directn, idirectn)
    _fl_set_dial_direction(pObject, idirectn)



############################################
# forms.h (filesys.h)
# Convenience functions to read a directory
############################################

# read dir with pattern filtering. All dirs read might be cached.
# must not change dirlist in anyway.

#def fl_get_dirlist(directory, pattern, n, rescan)
def fl_get_dirlist(directory, pattern, rescan):
    """ fl_get_dirlist(directory, pattern, rescan) -> pDirList, n
    """

    _fl_get_dirlist = cfuncproto(
            load_so_libforms(), "fl_get_dirlist",
            cty.POINTER(FL_Dirlist), [STRING, STRING, cty.POINTER(cty.c_int),
            cty.c_int],
            """const char * fl_get_dirlist(const char * dir,
               const char * pattern, int * n, int rescan)
            """)
    sdirectory = convert_to_string(directory)
    spattern = convert_to_string(pattern)
    n, pn = make_int_and_pointer()
    irescan = convert_to_int(rescan)
    keep_elem_refs(directory, pattern, n, rescan, sdirectory, spattern,
                   pn, irescan)
    retval = _fl_get_dirlist(sdirectory, spattern, pn, irescan)
    return retval, n


FL_DIRLIST_FILTER = cty.CFUNCTYPE(cty.c_int, STRING, cty.c_int)

def fl_set_dirlist_filter(py_DirFilter):
    """ fl_set_dirlist_filter(py_DirFilter) -> dirlist_filter func.
    """

    _fl_set_dirlist_filter = cfuncproto(
            load_so_libforms(), "fl_set_dirlist_filter",
            FL_DIRLIST_FILTER, [FL_DIRLIST_FILTER],
            """FL_DIRLIST_FILTER fl_set_dirlist_filter( \
               FL_DIRLIST_FILTER filter)
            """)
    c_DirFilter = FL_DIRLIST_FILTER(py_DirFilter)
    keep_cfunc_refs(c_DirFilter, py_DirFilter)
    retval = _fl_set_dirlist_filter(c_DirFilter)
    return retval


def fl_set_dirlist_sort(method):
    """ fl_set_dirlist_sort(method) -> num.
    """

    _fl_set_dirlist_sort = cfuncproto(
            load_so_libforms(), "fl_set_dirlist_sort",
            cty.c_int, [cty.c_int],
            """int fl_set_dirlist_sort(int method)
            """)
    imethod = convert_to_int(method)
    keep_elem_refs(method, imethod)
    retval = _fl_set_dirlist_sort(imethod)
    return retval


def fl_set_dirlist_filterdir(yes):
    """ fl_set_dirlist_filterdir(yes) -> num.
    """

    _fl_set_dirlist_filterdir = cfuncproto(
            load_so_libforms(), "fl_set_dirlist_filterdir",
            cty.c_int, [cty.c_int],
            """int fl_set_dirlist_filterdir(int yes)
            """)
    iyes = convert_to_int(yes)
    keep_elem_refs(yes, iyes)
    retval = _fl_set_dirlist_filterdir(iyes)
    return retval


def fl_free_dirlist(pDirList):
    """ fl_free_dirlist(pDirList)
    """

    _fl_free_dirlist = cfuncproto(
            load_so_libforms(), "fl_free_dirlist",
            None, [cty.POINTER(FL_Dirlist)],
            """void fl_free_dirlist(FL_Dirlist * dl)
            """)
    keep_elem_refs(pDirList)
    _fl_free_dirlist(pDirList)


# Free all directory caches

def fl_free_all_dirlist():
    """ fl_free_all_dirlist()
    """

    _fl_free_all_dirlist = cfuncproto(
            load_so_libforms(), "fl_free_all_dirlist",
            None, [],
            """void fl_free_all_dirlist()
            """)
    _fl_free_all_dirlist()


def fl_is_valid_dir(name):
    """ fl_is_valid_dir(name) -> num.
    """

    _fl_is_valid_dir = cfuncproto(
            load_so_libforms(), "fl_is_valid_dir",
            cty.c_int, [STRING],
            """int fl_is_valid_dir(const char * name)
            """)
    sname = convert_to_string(name)
    keep_elem_refs(name, sname)
    retval = _fl_is_valid_dir(sname)
    return retval


def fl_fmtime(timestr):
    """ fl_fmtime(timestr) -> num.
    """

    _fl_fmtime = cfuncproto(
            load_so_libforms(), "fl_fmtime",
            cty.c_ulong, [STRING],
            """long unsigned int fl_fmtime(const char * s)
            """)
    stimestr = convert_to_string(timestr)
    keep_elem_refs(timestr, stimestr)
    retval = _fl_fmtime(stimestr)
    return retval


def fl_fix_dirname(directory):
    """ fl_fix_dirname(directory) -> dirname string
    """

    _fl_fix_dirname = cfuncproto(
            load_so_libforms(), "fl_fix_dirname",
            STRING, [STRING],
            """char * fl_fix_dirname(char * dir)
            """)
    sdirectory = convert_to_string(directory)
    keep_elem_refs(directory, sdirectory)
    retval = _fl_fix_dirname(sdirectory)
    return retval



###################
# forms.h (flps.h)
###################

# postscript stuff

def flps_init():
    """ flps_init() -> flps_control class
    """

    _flps_init = cfuncproto(
            load_so_libflimage(), "flps_init",
            cty.POINTER(FLPS_CONTROL), [],
            """)FLPS_CONTROL * flps_init()
            """)
    retval = _flps_init()
    return retval


def fl_object_ps_dump(pObject, fname):
    """ fl_object_ps_dump(pObject, fname) -> num.
    """

    _fl_object_ps_dump = cfuncproto(
            load_so_libflimage(), "fl_object_ps_dump",
            cty.c_int, [cty.POINTER(FL_OBJECT), STRING],
            """int fl_object_ps_dump(FL_OBJECT * ob, const char * fname)
            """)
    sfname = convert_to_string(fname)
    keep_elem_refs(pObject, fname, sfname)
    retval = _fl_object_ps_dump(pObject, sfname)
    return retval



##########################
# forms.h (formbrowser.h)
##########################

def fl_addto_formbrowser(pObject, pForm):
    """ fl_addto_formbrowser(pObject, pForm) -> num.
    """

    _fl_addto_formbrowser = cfuncproto(
            load_so_libforms(), "fl_addto_formbrowser",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_FORM)],
            """int fl_addto_formbrowser(FL_OBJECT * ob, FL_FORM * form)
            """)
    keep_elem_refs(pObject, pForm)
    retval = _fl_addto_formbrowser(pObject, pForm)
    return retval


def fl_delete_formbrowser_bynumber(pObject, num):
    """ fl_delete_formbrowser_bynumber(pObject, num) -> pForm
    """

    _fl_delete_formbrowser_bynumber = cfuncproto(
            load_so_libforms(), "fl_delete_formbrowser_bynumber",
            cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT), cty.c_int],
            """FL_FORM * fl_delete_formbrowser_bynumber(FL_OBJECT * ob,
               int num)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    retval = _fl_delete_formbrowser_bynumber(pObject, inum)
    return retval


def fl_delete_formbrowser(pObject, pFormCandidate):
    """ fl_delete_formbrowser(pObject, pFormCandidate) -> num.
    """

    _fl_delete_formbrowser = cfuncproto(
            load_so_libforms(), "fl_delete_formbrowser",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_FORM)],
            """int fl_delete_formbrowser(FL_OBJECT * ob,
               FL_FORM * candidate_form)
            """)
    keep_elem_refs(pObject, pFormCandidate)
    retval = _fl_delete_formbrowser(pObject, pFormCandidate)
    return retval


def fl_replace_formbrowser(pObject, num, pForm):
    """ fl_replace_formbrowser(pObject, num, pForm)
    """

    _fl_replace_formbrowser = cfuncproto(
            load_so_libforms(), "fl_replace_formbrowser",
            cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT), cty.c_int,
            cty.POINTER(FL_FORM)],
            """FL_FORM * fl_replace_formbrowser(FL_OBJECT * ob, int num,
               FL_FORM * form)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, pForm, inum)
    retval = _fl_replace_formbrowser(pObject, inum, pForm)
    return retval


def fl_insert_formbrowser(pObject, line, pFormNew):
    """ fl_insert_formbrowser(pObject, line, pFormNew) -> num.
    """

    _fl_insert_formbrowser = cfuncproto(
            load_so_libforms(), "fl_insert_formbrowser",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int, \
            cty.POINTER(FL_FORM)],
            """int fl_insert_formbrowser(FL_OBJECT * ob, int line,
               FL_FORM * new_form)
            """)
    iline = convert_to_int(line)
    keep_elem_refs(pObject, line, iline, pFormNew)
    retval = _fl_insert_formbrowser(pObject, iline, pFormNew)
    return retval


#def fl_get_formbrowser_area(pObject, x, y, w, h):
def fl_get_formbrowser_area(pObject):
    """ fl_get_formbrowser_area(pObject) -> num., x, y, w, h
    """

    _fl_get_formbrowser_area = cfuncproto(
            load_so_libforms(), "fl_get_formbrowser_area",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int), \
            cty.POINTER(cty.c_int)],
            """int fl_get_formbrowser_area(FL_OBJECT * ob, int * x, int * y,
               int * w, int * h)
            """)
    x, px = make_int_and_pointer()
    y, py = make_int_and_pointer()
    w, pw = make_int_and_pointer()
    h, ph = make_int_and_pointer()
    keep_elem_refs(pObject, x, y, w, h, px, py, pw, ph)
    retval = _fl_get_formbrowser_area(pObject, px, py, pw, ph)
    return retval, x, y, w, h


def fl_set_formbrowser_scroll(pObject, how):
    """ fl_set_formbrowser_scroll(pObject, how)
    """

    _fl_set_formbrowser_scroll = cfuncproto(
            load_so_libforms(), "fl_set_formbrowser_scroll",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_formbrowser_scroll(FL_OBJECT * ob, int how)
            """)
    ihow = convert_to_int(how)
    keep_elem_refs(pObject, how, ihow)
    _fl_set_formbrowser_scroll(pObject, ihow)


def fl_set_formbrowser_hscrollbar(pObject, how):
    """ fl_set_formbrowser_hscrollbar(pObject, how)
    """

    _fl_set_formbrowser_hscrollbar = cfuncproto(
            load_so_libforms(), "fl_set_formbrowser_hscrollbar",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_formbrowser_hscrollbar(FL_OBJECT * ob, int how)
            """)
    ihow = convert_to_int(how)
    keep_elem_refs(pObject, how, ihow)
    _fl_set_formbrowser_hscrollbar(pObject, ihow)


def fl_set_formbrowser_vscrollbar(pObject, how):
    """ fl_set_formbrowser_vscrollbar(pObject, how)
    """

    _fl_set_formbrowser_vscrollbar = cfuncproto(
            load_so_libforms(), "fl_set_formbrowser_vscrollbar",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_formbrowser_vscrollbar(FL_OBJECT * ob, int how)
            """)
    ihow = convert_to_int(how)
    keep_elem_refs(pObject, how, ihow)
    _fl_set_formbrowser_vscrollbar(pObject, ihow)


def fl_get_formbrowser_topform(pObject):
    """ fl_get_formbrowser_topform(pObject) -> pForm
    """

    _fl_get_formbrowser_topform = cfuncproto(
            load_so_libforms(), "fl_get_formbrowser_topform",
            cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT)],
            """FL_FORM * fl_get_formbrowser_topform(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_formbrowser_topform(pObject)
    return retval


def fl_set_formbrowser_topform(pObject, pForm):
    """ fl_set_formbrowser_topform(pObject, pForm) -> num.
    """

    _fl_set_formbrowser_topform = cfuncproto(
            load_so_libforms(), "fl_set_formbrowser_topform",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_FORM)],
            """int fl_set_formbrowser_topform(FL_OBJECT * ob, FL_FORM * form)
            """)
    keep_elem_refs(pObject, pForm)
    retval = _fl_set_formbrowser_topform(pObject, pForm)
    return retval


def fl_set_formbrowser_topform_bynumber(pObject, n):
    """ fl_set_formbrowser_topform_bynumber(pObject, n) -> pForm
    """

    _fl_set_formbrowser_topform_bynumber = cfuncproto(
            load_so_libforms(), "fl_set_formbrowser_topform_bynumber",
            cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT), cty.c_int],
            """FL_FORM * fl_set_formbrowser_topform_bynumber( \
               FL_OBJECT * ob, int n)
            """)
    inum = convert_to_int(n)
    keep_elem_refs(pObject, n, inum)
    retval = _fl_set_formbrowser_topform_bynumber(pObject, inum)
    return retval


def fl_set_formbrowser_xoffset(pObject, offset):
    """
        fl_set_formbrowser_xoffset(pObject, offset) -> num.

        Scrolls within a formbrowser in horizontal direction.

        @param pObject : pointer to formbrowser object
        @param offset : positive number, measuring in pixels the offset
           from the the natural position from the left
    """

    _fl_set_formbrowser_xoffset = cfuncproto(
            load_so_libforms(), "fl_set_formbrowser_xoffset",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_set_formbrowser_xoffset(FL_OBJECT * ob, int offset)
            """)
    ioffset = convert_to_int(offset)
    keep_elem_refs(pObject, offset, ioffset)
    retval = _fl_set_formbrowser_xoffset(pObject, ioffset)
    return retval


def fl_set_formbrowser_yoffset(pObject, offset):
    """
        fl_set_formbrowser_yoffset(pObject, offset) -> num.

        Scrolls within a formbrowser in vertical direction.

        @param pObject : pointer to formbrowser object
        @param offset : positive number, measuring in pixels the offset
           from the the natural position from the top
    """

    _fl_set_formbrowser_yoffset = cfuncproto(
            load_so_libforms(), "fl_set_formbrowser_yoffset",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_set_formbrowser_yoffset(FL_OBJECT * ob, int offset)
            """)
    ioffset = convert_to_int(offset)
    keep_elem_refs(pObject, offset, ioffset)
    retval = _fl_set_formbrowser_yoffset(pObject, ioffset)
    return retval


def fl_get_formbrowser_xoffset(pObject):
    """
        fl_get_formbrowser_xoffset(pObject) -> num.

        Returns the current horizontal offset from left in pixel of a
        formbrowser.

        @param pObject : pointer to formbrowser object
    """

    _fl_get_formbrowser_xoffset = cfuncproto(
            load_so_libforms(), "fl_get_formbrowser_xoffset",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_formbrowser_xoffset(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_formbrowser_xoffset(pObject)
    return retval


def fl_get_formbrowser_yoffset(pObject):
    """
        fl_get_formbrowser_yoffset(pObject) -> num.

        Returns the current vertical offset from top in pixel of a
        formbrowser.

        @param pObject : pointer to formbrowser object
    """

    _fl_get_formbrowser_yoffset = cfuncproto(
            load_so_libforms(), "fl_get_formbrowser_yoffset",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_formbrowser_yoffset(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_formbrowser_yoffset(pObject)
    return retval


def fl_find_formbrowser_form_number(pObject, pFormCandidate):
    """ fl_find_formbrowser_form_number(pObject, pFormCandidate) -> num.
    """

    _fl_find_formbrowser_form_number = cfuncproto(
            load_so_libforms(), "fl_find_formbrowser_form_number",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_FORM)],
            """int fl_find_formbrowser_form_number(FL_OBJECT * ob,
               FL_FORM * candidate_form)
            """)
    keep_elem_refs(pObject, pFormCandidate)
    retval = _fl_find_formbrowser_form_number(pObject, pFormCandidate)
    return retval


def fl_add_formbrowser(frmbrwstype, x, y, w, h, label):
    """ fl_add_formbrowser(frmbrwstype, x, y, w, h, label) -> pObject
    """

    _fl_add_formbrowser = cfuncproto(
            load_so_libforms(), "fl_add_formbrowser",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord,
            FL_Coord, FL_Coord, STRING],
            """FL_OBJECT * fl_add_formbrowser(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(frmbrwstype, FORMBRWSTYPE_list)
    ifrmbrwstype = convert_to_int(frmbrwstype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(frmbrwstype, x, y, w, h, label, ifrmbrwstype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_formbrowser(ifrmbrwstype, ix, iy, iw, ih, slabel)
    return retval


def fl_create_formbrowser(frmbrwstype, x, y, w, h, label):
    """ fl_create_formbrowser(frmbrwstype, x, y, w, h, label) -> pObject
    """

    _fl_create_formbrowser = cfuncproto(
            load_so_libforms(), "fl_create_formbrowser",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord,
            FL_Coord, FL_Coord, STRING],
            """FL_OBJECT * fl_create_formbrowser(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(frmbrwstype, FORMBRWSTYPE_list)
    ifrmbrwstype = convert_to_int(frmbrwstype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(frmbrwstype, x, y, w, h, label, ifrmbrwstype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_formbrowser(ifrmbrwstype, ix, iy, iw, ih, slabel)
    return retval


def fl_get_formbrowser_numforms(pObject):
    """ fl_get_formbrowser_numforms(pObject) -> forms num.
    """

    _fl_get_formbrowser_numforms = cfuncproto(
            load_so_libforms(), "fl_get_formbrowser_numforms",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_formbrowser_numforms(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_formbrowser_numforms(pObject)
    return retval


def fl_get_formbrowser_form(pObject, n):
    """ fl_get_formbrowser_form(pObject, n) -> pForm
    """

    _fl_get_formbrowser_form = cfuncproto(
            load_so_libforms(), "fl_get_formbrowser_form",
            cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT), cty.c_int],
            """FL_FORM * fl_get_formbrowser_form(FL_OBJECT * ob, int n)
            """)
    inum = convert_to_int(n)
    keep_elem_refs(pObject, n, inum)
    retval = _fl_get_formbrowser_form(pObject, inum)
    return retval



####################
# forms.h (frame.h)
####################

def fl_create_frame(frametype, x, y, w, h, label):
    """ fl_create_frame(frametype, x, y, w, h, label) -> pObject
    """

    _fl_create_frame = cfuncproto(
            load_so_libforms(), "fl_create_frame",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_frame(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(frametype, FRAMETYPE_list)
    iframetype = convert_to_int(frametype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(frametype, x, y, w, h, label, iframetype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_frame(iframetype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_frame(frametype, x, y, w, h, label):
    """ fl_add_frame(frametype, x, y, w, h, label) -> pObject
    """

    _fl_add_frame = cfuncproto(
            load_so_libforms(), "fl_add_frame",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_frame(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(frametype, FRAMETYPE_list)
    iframetype = convert_to_int(frametype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(frametype, x, y, w, h, label, iframetype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_frame(iframetype, ix, iy, iw, ih, slabel)
    return retval


# labeld frame

def fl_create_labelframe(frametype, x, y, w, h, label):
    """ fl_create_labelframe(frametype, x, y, w, h, label) -> pObject
    """

    _fl_create_labelframe = cfuncproto(
            load_so_libforms(), "fl_create_labelframe",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_labelframe(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    iframetype = convert_to_int(frametype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(frametype, x, y, w, h, label, iframetype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_labelframe(iframetype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_labelframe(frametype, x, y, w, h, label):
    """ fl_add_labelframe(frametype, x, y, w, h, label) -> pObject
    """

    _fl_add_labelframe = cfuncproto(
            load_so_libforms(), "fl_add_labelframe",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_labelframe(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    iframetype = convert_to_int(frametype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(frametype, x, y, w, h, label, iframetype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_labelframe(iframetype, ix, iy, iw, ih, slabel)
    return retval



#####################
# forms.h (free.h)
# Object Class: Free
#####################

def fl_create_free(freetype, x, y, w, h, label, py_HandlePtr):
    """ fl_create_free(freetype, x, y, w, h, label, py_HandlePtr) -> pObject
    """

    _fl_create_free = cfuncproto(
            load_so_libforms(), "fl_create_free",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING, FL_HANDLEPTR],
            """FL_OBJECT * fl_create_free(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label,
               FL_HANDLEPTR handle)
            """)
    check_admitted_listvalues(freetype, FREETYPE_list)
    ifreetype = convert_to_int(freetype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    c_HandlePtr = FL_HANDLEPTR(py_HandlePtr)
    keep_cfunc_refs(c_HandlePtr, py_HandlePtr)
    keep_elem_refs(freetype, x, y, w, h, label, ifreetype, ix, iy, iw, ih,
                   slabel)
    retval = _fl_create_free(ifreetype, ix, iy, iw, ih, slabel, c_HandlePtr)
    return retval


def fl_add_free(freetype, x, y, w, h, label, py_HandlePtr):
    """ fl_add_free(freetype, x, y, w, h, label, py_HandlePtr) -> pObject
    """

    _fl_add_free = cfuncproto(
            load_so_libforms(), "fl_add_free",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING, FL_HANDLEPTR],
            """FL_OBJECT * fl_add_free(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label,
               FL_HANDLEPTR handle)
            """)
    check_admitted_listvalues(freetype, FREETYPE_list)
    ifreetype = convert_to_int(freetype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    c_HandlePtr = FL_HANDLEPTR(py_HandlePtr)
    keep_cfunc_refs(c_HandlePtr, py_HandlePtr)
    keep_elem_refs(freetype, x, y, w, h, label, ifreetype, ix, iy, iw, ih,
                   slabel)
    retval = _fl_add_free(ifreetype, ix, iy, iw, ih, slabel, c_HandlePtr)
    return retval



######################
# forms.h (goodies.h)
######################

# Resources and misc. goodie routines

def fl_set_goodies_font(style, size):
    """ fl_set_goodies_font(style, size)
    """

    _fl_set_goodies_font = cfuncproto(
            load_so_libforms(), "fl_set_goodies_font",
            None, [cty.c_int, cty.c_int],
            """void fl_set_goodies_font(int style, int size)
            """)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    keep_elem_refs(style, size, istyle, isize)
    _fl_set_goodies_font(istyle, isize)


# messages and questions

def fl_show_message(msgtxt1, msgtxt2, msgtxt3):
    """
        fl_show_message(msgtxt1, msgtxt2, msgtxt3)

        Shows a message.

        @param msgtxt1 : first message to show
        @param msgtxt2 : second message to show
        @param msgtxt3 : third message to show
    """

    _fl_show_message = cfuncproto(
            load_so_libforms(), "fl_show_message",
            None, [STRING, STRING, STRING],
            """void fl_show_message(const char * p1, const char * p2,
               const char * p3)
            """)
    smsgtxt1 = convert_to_string(msgtxt1)
    smsgtxt2 = convert_to_string(msgtxt2)
    smsgtxt3 = convert_to_string(msgtxt3)
    keep_elem_refs(msgtxt1, msgtxt2, msgtxt3, smsgtxt1, smsgtxt2, smsgtxt3)
    _fl_show_message(smsgtxt1, smsgtxt2, smsgtxt3)


def fl_show_messages(p1):
    """ fl_show_messages(p1)
    """

    _fl_show_messages = cfuncproto(
            load_so_libforms(), "fl_show_messages",
            None, [STRING],
            """void fl_show_messages(const char * p1)
            """)
    sp1 = convert_to_string(p1)
    keep_elem_refs(p1, sp1)
    _fl_show_messages(sp1)


def fl_show_msg(fmttxt):
    """
        fl_show_msg(fmttxt)

        Shows a text message.

        @param fmttxt : text message to show (with format parameters, e.g.
           %s, %d, %f etc..)
    """

    _fl_show_msg = cfuncproto(
            load_so_libforms(), "fl_show_msg",
            None, [STRING],
            """void fl_show_msg(const char * p1)
            """)
    sfmttxt = convert_to_string(fmttxt)
    keep_elem_refs(fmttxt, sfmttxt)
    _fl_show_msg(sfmttxt)


def fl_hide_message():
    """
        fl_hide_message()

        Hides a text message already shown.
    """

    _fl_hide_message = cfuncproto(
            load_so_libforms(), "fl_hide_message",
            None, [],
            """void fl_hide_message()
            """)
    _fl_hide_message()


fl_hide_msg = fl_hide_message
fl_hide_messages = fl_hide_message


def fl_show_question(questmsg, p2):
    """
        fl_show_question(questmsg, p2) -> num.

        Shows a question message.

        @param questmsg : text of question message to show
        @param p2 : ?
    """

    _fl_show_question = cfuncproto(
            load_so_libforms(), "fl_show_question",
            cty.c_int, [STRING, cty.c_int],
            """int fl_show_question(const char * p1, int p2)
            """)
    squestmsg = convert_to_string(questmsg)
    ip2 = convert_to_int(p2)
    keep_elem_refs(questmsg, p2, squestmsg, ip2)
    retval = _fl_show_question(squestmsg, ip2)
    return retval


def fl_hide_question():
    """
        fl_hide_question()

        Hides a question message already shown.
    """

    _fl_hide_question = cfuncproto(
            load_so_libforms(), "fl_hide_question",
            None, [],
            """void fl_hide_question()
            """)
    _fl_hide_question()


def fl_show_alert(p1, p2, p3, p4):
    """ fl_show_alert(p1, p2, p3, p4)
    """

    _fl_show_alert = cfuncproto(
            load_so_libforms(), "fl_show_alert",
            None, [STRING, STRING, STRING, cty.c_int],
            """void fl_show_alert(const char * p1, const char * p2,
               const char * p3, int p4)
            """)
    sp1 = convert_to_string(p1)
    sp2 = convert_to_string(p2)
    sp3 = convert_to_string(p3)
    ip4 = convert_to_int(p4)
    keep_elem_refs(p1, p2, p3, p4, sp1, sp2, sp3, ip4)
    _fl_show_alert(sp1, sp2, sp3, ip4)


def fl_show_alert2(c, fmt):
    """ fl_show_alert2(c, fmt)
    """

    _fl_show_alert2 = cfuncproto(
            load_so_libforms(), "fl_show_alert2",
            None, [cty.c_int, STRING],
            """void fl_show_alert2(int c, const char * fmt)
            """)
    ic = convert_to_int(c)
    sfmt = convert_to_string(fmt)
    keep_elem_refs(c, fmt, ic, sfmt)
    _fl_show_alert2(ic, sfmt)


def fl_hide_alert():
    """ fl_hide_alert()
    """

    _fl_hide_alert = cfuncproto(
            load_so_libforms(), "fl_hide_alert",
            None, [],
            """void fl_hide_alert()
            """)
    _fl_hide_alert()


def fl_show_input(p1, p2):
    """ fl_show_input(p1, p2) -> input string
    """

    _fl_show_input = cfuncproto(
            load_so_libforms(), "fl_show_input",
            STRING, [STRING, STRING],
            """const char * fl_show_input(const char * p1, const char * p2)
            """)
    sp1 = convert_to_string(p1)
    sp2 = convert_to_string(p2)
    keep_elem_refs(p1, p2, sp1, sp2)
    retval = _fl_show_input(sp1, sp2)
    return retval


def fl_hide_input():
    """ fl_hide_input()
    """

    _fl_hide_input = cfuncproto(
            load_so_libforms(), "fl_hide_input",
            None, [],
            """void fl_hide_input()
            """)
    _fl_hide_input()


def fl_show_simple_input(msgtxt, defstr):
    """
        fl_show_simple_input(msgtxt, defstr) -> input string

        Asks the user for textual input.

        @param msgtxt : text message
        @param defstr : default user answer in input
    """

    _fl_show_simple_input = cfuncproto(
            load_so_libforms(), "fl_show_simple_input",
            STRING, [STRING, STRING],
            """const char * fl_show_simple_input(const char * p1,
               const char * p2)
            """)
    smsgtxt = convert_to_string(msgtxt)
    sdefstr = convert_to_string(defstr)
    keep_elem_refs(msgtxt, defstr, smsgtxt, sdefstr)
    retval = _fl_show_simple_input(smsgtxt, sdefstr)
    return retval


def fl_show_colormap(oldcolr):
    """ fl_show_colormap(oldcolr) -> colormap num.
        Shows a colormap color selector from which the user can select a color.
        <oldcolr> : color num.
    """

    _fl_show_colormap = cfuncproto(
            load_so_libforms(), "fl_show_colormap",
            cty.c_int, [cty.c_int],
            """int fl_show_colormap(int p1)
            """)
    ioldcolr = convert_to_int(oldcolr)
    keep_elem_refs(oldcolr, ioldcolr)
    retval = _fl_show_colormap(ioldcolr)
    return retval


# choices

def fl_show_choices(p1, p2, p3, p4, p5, p6):
    """ fl_show_choices(p1, p2, p3, p4, p5, p6) -> num.
    """

    _fl_show_choices = cfuncproto(
            load_so_libforms(), "fl_show_choices",
            cty.c_int, [STRING, cty.c_int, STRING, STRING, STRING,
            cty.c_int],
            """int fl_show_choices(const char * p1, int p2,
               const char * p3, const char * p4, const char * p5, int p6)
            """)
    sp1 = convert_to_string(p1)
    ip2 = convert_to_int(p2)
    sp3 = convert_to_string(p3)
    sp4 = convert_to_string(p4)
    sp5 = convert_to_string(p5)
    ip6 = convert_to_int(p6)
    keep_elem_refs(p1, p2, p3, p4, p5, p6, sp1, ip2, sp3, sp4, sp5, ip6)
    retval = _fl_show_choices(sp1, ip2, sp3, sp4, sp5, ip6)
    return retval


def fl_show_choice(p1, p2, p3, p4, p5, p6, p7, p8):
    """ fl_show_choice(p1, p2, p3, p4, p5, p6, p7, p8) -> num.
    """

    _fl_show_choice = cfuncproto(
            load_so_libforms(), "fl_show_choice",
            cty.c_int, [STRING, STRING, STRING, cty.c_int, STRING, STRING,
            STRING, cty.c_int],
            """int fl_show_choice(const char * p1, const char * p2,
               const char * p3, int p4, const char * p5, const char * p6,
               const char * p7, int p8)
            """)
    sp1 = convert_to_string(p1)
    sp2 = convert_to_string(p2)
    sp3 = convert_to_string(p3)
    ip4 = convert_to_int(p4)
    sp5 = convert_to_string(p5)
    sp6 = convert_to_string(p6)
    sp7 = convert_to_string(p7)
    ip8 = convert_to_int(p8)
    keep_elem_refs(sp1, sp2, sp3, ip4, sp5, sp6, sp7, ip8)
    retval = _fl_show_choice(sp1, sp2, sp3, ip4, sp5, sp6, sp7, ip8)
    return retval


def fl_hide_choice():
    """ fl_hide_choice()
    """

    _fl_hide_choice = cfuncproto(
            load_so_libforms(), "fl_hide_choice",
            None, [],
            """void fl_hide_choice()
            """)
    _fl_hide_choice()


def fl_set_choices_shortcut(p1, p2, p3):
    """ fl_set_choices_shortcut(p1, p2, p3)
    """

    _fl_set_choices_shortcut = cfuncproto(
            load_so_libforms(), "fl_set_choices_shortcut",
            None, [STRING, STRING, STRING],
            """void fl_set_choices_shortcut(const char * p1, const char * p2,
               const char * p3)
            """)
    sp1 = convert_to_string(p1)
    sp2 = convert_to_string(p2)
    sp3 = convert_to_string(p3)
    keep_elem_refs(p1, p2, p3, sp1, sp2, sp3)
    _fl_set_choices_shortcut(sp1, sp2, sp3)


fl_set_choice_shortcut = fl_set_choices_shortcut


# one liner

def fl_show_oneliner(p1, p2, p3):
    """ fl_show_oneliner(p1, p2, p3)
    """

    _fl_show_oneliner = cfuncproto(
            load_so_libforms(), "fl_show_oneliner",
            None, [STRING, FL_Coord, FL_Coord],
            """void fl_show_oneliner(const char * p1, FL_Coord p2,
               FL_Coord p3)
            """)
    sp1 = convert_to_string(p1)
    ip2 = convert_to_FL_Coord(p2)
    ip3 = convert_to_FL_Coord(p3)
    keep_elem_refs(p1, p2, p3, sp1, ip2, ip3)
    _fl_show_oneliner(sp1, ip2, ip3)


def fl_hide_oneliner():
    """ fl_hide_oneliner()
    """

    _fl_hide_oneliner = cfuncproto(
            load_so_libforms(), "fl_hide_oneliner",
            None, [],
            """void fl_hide_oneliner()
            """)
    _fl_hide_oneliner()


def fl_set_oneliner_font(p1, p2):
    """ fl_set_oneliner_font(p1, p2)
    """

    _fl_set_oneliner_font = cfuncproto(
            load_so_libforms(), "fl_set_oneliner_font",
            None, [cty.c_int, cty.c_int],
            """void fl_set_oneliner_font(int p1, int p2)
            """)
    ip1 = convert_to_int(p1)
    ip2 = convert_to_int(p2)
    keep_elem_refs(p1, p2, ip1, ip2)
    _fl_set_oneliner_font(ip1, ip2)


def fl_set_oneliner_color(p1, p2):
    """ fl_set_oneliner_color(p1, p2)
    """

    _fl_set_oneliner_color = cfuncproto(
            load_so_libforms(), "fl_set_oneliner_color",
            None, [FL_COLOR, FL_COLOR],
            """void fl_set_oneliner_color(FL_COLOR p1, FL_COLOR p2)
            """)
    ulp1 = convert_to_FL_COLOR(p1)
    ulp2 = convert_to_FL_COLOR(p2)
    keep_elem_refs(p1, p2, ulp1, ulp2)
    _fl_set_oneliner_color(ulp1, ulp2)


def fl_set_tooltip_font(p1, p2):
    """ fl_set_tooltip_font(p1, p2)
    """

    _fl_set_tooltip_font = cfuncproto(
            load_so_libforms(), "fl_set_tooltip_font",
            None, [cty.c_int, cty.c_int],
            """void fl_set_tooltip_font(int p1, int p2)
            """)
    ip1 = convert_to_int(p1)
    ip2 = convert_to_int(p2)
    keep_elem_refs(p1, p2, ip1, ip2)
    _fl_set_tooltip_font(ip1, ip2)


def fl_set_tooltip_color(p1, p2):
    """ fl_set_tooltip_color(p1, p2)
    """

    _fl_set_tooltip_color = cfuncproto(
            load_so_libforms(), "fl_set_tooltip_color",
            None, [FL_COLOR, FL_COLOR],
            """void fl_set_tooltip_color(FL_COLOR p1, FL_COLOR p2)
            """)
    ulp1 = convert_to_FL_COLOR(p1)
    ulp2 = convert_to_FL_COLOR(p2)
    keep_elem_refs(p1, p2, ulp1, ulp2)
    _fl_set_tooltip_color(ulp1, ulp2)


def fl_set_tooltip_boxtype(p1):
    """ fl_set_tooltip_boxtype(p1)
    """

    _fl_set_tooltip_boxtype = cfuncproto(
            load_so_libforms(), "fl_set_tooltip_boxtype",
            None, [cty.c_int],
            """void fl_set_tooltip_boxtype(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    _fl_set_tooltip_boxtype(ip1)


def fl_set_tooltip_lalign(p1):
    """ fl_set_tooltip_lalign(p1)
    """

    _fl_set_tooltip_lalign = cfuncproto(
            load_so_libforms(), "fl_set_tooltip_lalign",
            None, [cty.c_int],
            """void fl_set_tooltip_lalign(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    _fl_set_tooltip_lalign(ip1)


def fl_exe_command(p1, p2):
    """ fl_exe_command(p1, p2) -> num.
    """

    _fl_exe_command = cfuncproto(
            load_so_libforms(), "fl_exe_command",
            cty.c_long, [STRING, cty.c_int],
            """long int fl_exe_command(const char * p1, int p2)
            """)
    sp1 = convert_to_string(p1)
    ip2 = convert_to_int(p2)
    keep_elem_refs(p1, sp1, p2, ip2)
    retval = _fl_exe_command(sp1, ip2)
    return retval


def fl_end_command(p1):
    """ fl_end_command(p1) -> num.
    """

    _fl_end_command = cfuncproto(
            load_so_libforms(), "fl_end_command",
            cty.c_int, [cty.c_long],
            """int fl_end_command(long int p1)
            """)
    lp1 = convert_to_long(p1)
    keep_elem_refs(p1, lp1)
    retval = _fl_end_command(lp1)
    return retval


def fl_check_command(p1):
    """ fl_check_command(p1) -> num.
    """

    _fl_check_command = cfuncproto(
            load_so_libforms(), "fl_check_command",
            cty.c_int, [cty.c_long],
            """int fl_check_command(long int p1)
            """)
    lp1 = convert_to_long(p1)
    keep_elem_refs(p1, lp1)
    retval = _fl_check_command(lp1)
    return retval


def fl_popen(p1, p2):
    """ fl_popen(p1, p2) -> FILE ptr.
    """

    _fl_popen = cfuncproto(
            load_so_libforms(), "fl_popen",
            cty.POINTER(FILE), [STRING, STRING],
            """FILE * fl_popen(const char * p1, const char * p2)
            """)
    sp1 = convert_to_string(p1)
    sp2 = convert_to_string(p2)
    keep_elem_refs(p1, p2, sp1, sp2)
    retval = _fl_popen(sp1, sp2)
    return retval


def fl_pclose(p1):
    """ fl_pclose(p1) -> num.
    """

    _fl_pclose = cfuncproto(
            load_so_libforms(), "fl_pclose",
            cty.c_int, [cty.POINTER(FILE)],
            """int fl_pclose(FILE * p1)
            """)
    keep_elem_refs(p1)
    retval = _fl_pclose(p1)
    return retval


def fl_end_all_command():
    """ fl_end_all_command() -> num.
    """

    _fl_end_all_command = cfuncproto(
            load_so_libforms(), "fl_end_all_command",
            cty.c_int, [],
            """int fl_end_all_command()
            """)
    retval = _fl_end_all_command()
    return retval


def fl_show_command_log(p1):
    """ fl_show_command_log(p1)
    """

    _fl_show_command_log = cfuncproto(
            load_so_libforms(), "fl_show_command_log",
            None, [cty.c_int],
            """void fl_show_command_log(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    _fl_show_command_log(ip1)


def fl_hide_command_log():
    """ fl_hide_command_log()
    """

    _fl_hide_command_log = cfuncproto(
            load_so_libforms(), "fl_hide_command_log",
            None, [],
            """void fl_hide_command_log()
            """)
    _fl_hide_command_log()


def fl_clear_command_log():
    """ fl_clear_command_log()
    """

    _fl_clear_command_log = cfuncproto(
            load_so_libforms(), "fl_clear_command_log",
            None, [],
            """void fl_clear_command_log()
            """)
    _fl_clear_command_log()


def fl_addto_command_log(p1):
    """ fl_addto_command_log(p1)
    """

    _fl_addto_command_log = cfuncproto(
            load_so_libforms(), "fl_addto_command_log",
            None, [STRING],
            """void fl_addto_command_log(const char * p1)
            """)
    sp1 = convert_to_string(p1)
    keep_elem_refs(p1, sp1)
    _fl_addto_command_log(sp1)


def fl_set_command_log_position(p1, p2):
    """ fl_set_command_log_position(p1, p2)
    """

    _fl_set_command_log_position = cfuncproto(
            load_so_libforms(), "fl_set_command_log_position",
            None, [cty.c_int, cty.c_int],
            """void fl_set_command_log_position(int p1, int p2)
            """)
    ip1 = convert_to_int(p1)
    ip2 = convert_to_int(p2)
    keep_elem_refs(p1, p2, ip1, ip2)
    _fl_set_command_log_position(ip1, ip2)


def fl_get_command_log_fdstruct():
    """ fl_get_command_log_fdstruct() -> pCmdlog
    """

    _fl_get_command_log_fdstruct = cfuncproto(
            load_so_libforms(), "fl_get_command_log_fdstruct",
            cty.POINTER(FD_CMDLOG), [],
            """)FD_CMDLOG * fl_get_command_log_fdstruct()
            """)
    retval = _fl_get_command_log_fdstruct()
    return retval


# aliases
fl_open_command = fl_exe_command
fl_close_command = fl_end_command


# file selector

def fl_use_fselector(p1):
    """ fl_use_fselector(p1) -> num.
    """

    _fl_use_fselector = cfuncproto(
            load_so_libforms(), "fl_use_fselector",
            cty.c_int, [cty.c_int],
            """int fl_use_fselector(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    retval = _fl_use_fselector(ip1)
    return retval


def fl_show_fselector(p1, p2, p3, p4):
    """ fl_show_fselector(p1, p2, p3, p4) -> fselector string
    """

    _fl_show_fselector = cfuncproto(
            load_so_libforms(), "fl_show_fselector",
            STRING, [STRING, STRING, STRING, STRING],
            """const char * fl_show_fselector(const char * p1,
               const char * p2, const char * p3, const char * p4)
            """)
    sp1 = convert_to_string(p1)
    sp2 = convert_to_string(p2)
    sp3 = convert_to_string(p3)
    sp4 = convert_to_string(p4)
    keep_elem_refs(p1, p2, p3, p4, sp1, sp2, sp3, sp4)
    retval = _fl_show_fselector(sp1, sp2, sp3, sp4)
    return retval


def fl_set_fselector_fontsize(p1):
    """ fl_set_fselector_fontsize(p1)
    """

    _fl_set_fselector_fontsize = cfuncproto(
            load_so_libforms(), "fl_set_fselector_fontsize",
            None, [cty.c_int],
            """void fl_set_fselector_fontsize(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    _fl_set_fselector_fontsize(ip1)


def fl_set_fselector_fontstyle(p1):
    """ fl_set_fselector_fontstyle(p1)
    """

    _fl_set_fselector_fontstyle = cfuncproto(
            load_so_libforms(), "fl_set_fselector_fontstyle",
            None, [cty.c_int],
            """void fl_set_fselector_fontstyle(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    _fl_set_fselector_fontstyle(ip1)


def fl_set_fselector_placement(p1):
    """ fl_set_fselector_placement(p1)
    """

    _fl_set_fselector_placement = cfuncproto(
            load_so_libforms(), "fl_set_fselector_placement",
            None, [cty.c_int],
            """void fl_set_fselector_placement(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    _fl_set_fselector_placement(ip1)


def fl_set_fselector_border(p1):
    """ fl_set_fselector_border(p1)
    """

    _fl_set_fselector_border = cfuncproto(
            load_so_libforms(), "fl_set_fselector_border",
            None, [cty.c_int],
            """void fl_set_fselector_border(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    _fl_set_fselector_border(ip1)


def fl_set_fselector_transient(b):
    if b:
        argval = FL_TRANSIENT
    else:
        argval = FL_FULLBORDER
    fl_set_fselector_border(argval)


FL_FSCB = cty.CFUNCTYPE(cty.c_int, STRING, cty.c_void_p)

def fl_set_fselector_callback(py_FSCB, data):
    """
        fl_set_fselector_callback(py_FSCB, data)
    """

    _fl_set_fselector_callback = cfuncproto(
            load_so_libforms(), "fl_set_fselector_callback",
            None, [FL_FSCB, cty.c_void_p],
            """void fl_set_fselector_callback(FL_FSCB p1, void * p2)
            """)
    c_FSCB = FL_FSCB(py_FSCB)
    keep_cfunc_refs(c_FSCB, py_FSCB)
    keep_elem_refs(data)
    _fl_set_fselector_callback(c_FSCB, data)


def fl_get_filename():
    """ fl_get_filename() -> filename string
    """

    _fl_get_filename = cfuncproto(
            load_so_libforms(), "fl_get_filename",
            STRING, [],
            """const char * fl_get_filename()
            """)
    retval = _fl_get_filename()
    return retval


def fl_get_directory():
    """ fl_get_directory() -> directory string
    """

    _fl_get_directory = cfuncproto(
            load_so_libforms(), "fl_get_directory",
            STRING, [],
            """const char * fl_get_directory()
            """)
    retval = _fl_get_directory()
    return retval


def fl_get_pattern():
    """ fl_get_pattern() -> pattern string
    """

    _fl_get_pattern = cfuncproto(
            load_so_libforms(), "fl_get_pattern",
            STRING, [],
            """const char * fl_get_pattern()
            """)
    retval = _fl_get_pattern()
    return retval


def fl_set_directory(p1):
    """ fl_set_directory(p1) -> num.
    """

    _fl_set_directory = cfuncproto(
            load_so_libforms(), "fl_set_directory",
            cty.c_int, [STRING],
            """int fl_set_directory(const char * p1)
            """)
    sp1 = convert_to_string(p1)
    keep_elem_refs(p1, sp1)
    retval = _fl_set_directory(sp1)
    return retval


def fl_set_pattern(p1):
    """ fl_set_pattern(p1)
    """

    _fl_set_pattern = cfuncproto(
            load_so_libforms(), "fl_set_pattern",
            None, [STRING],
            """void fl_set_pattern(const char * p1)
            """)
    sp1 = convert_to_string(p1)
    keep_elem_refs(p1, sp1)
    _fl_set_pattern(sp1)


def fl_refresh_fselector():
    """ fl_refresh_fselector()
    """

    _fl_refresh_fselector = cfuncproto(
            load_so_libforms(), "fl_refresh_fselector",
            None, [],
            """void fl_refresh_fselector()
            """)
    _fl_refresh_fselector()


# c function prototype for _fl_add_fselector_appbutton
cfunc_none_voidp = cty.CFUNCTYPE(None, cty.c_void_p)

def fl_add_fselector_appbutton(p1, py_fn, p3):
    """ fl_add_fselector_appbutton(p1, py_fn, p3)
    """

    _fl_add_fselector_appbutton = cfuncproto(
            load_so_libforms(), "fl_add_fselector_appbutton",
            None, [STRING, cfunc_none_voidp, cty.c_void_p],
            """void fl_add_fselector_appbutton(const char * p1,
               const char * p2, void * p3)
            """)
    sp1 = convert_to_string(p1)
    c_fn = cfunc_none_voidp(py_fn)
    keep_cfunc_refs(c_fn, py_fn)
    keep_elem_refs(p1, p3, sp1)
    _fl_add_fselector_appbutton(sp1, c_fn, p3)


def fl_remove_fselector_appbutton(p1):
    """ fl_remove_fselector_appbutton(p1)
    """

    _fl_remove_fselector_appbutton = cfuncproto(
            load_so_libforms(), "fl_remove_fselector_appbutton",
            None, [STRING],
            """void fl_remove_fselector_appbutton(const char * p1)
            """)
    sp1 = convert_to_string(p1)
    keep_elem_refs(p1, sp1)
    _fl_remove_fselector_appbutton(sp1)


def fl_disable_fselector_cache(p1):
    """ fl_disable_fselector_cache(p1)
    """

    _fl_disable_fselector_cache = cfuncproto(
            load_so_libforms(), "fl_disable_fselector_cache",
            None, [cty.c_int],
            """void fl_disable_fselector_cache(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    _fl_disable_fselector_cache(ip1)


def fl_invalidate_fselector_cache():
    """ fl_invalidate_fselector_cache()
    """

    _fl_invalidate_fselector_cache = cfuncproto(
            load_so_libforms(), "fl_invalidate_fselector_cache",
            None, [],
            """void fl_invalidate_fselector_cache()
            """)
    _fl_invalidate_fselector_cache()


def fl_get_fselector_form():
    """ fl_get_fselector_form() -> pForm
    """

    _fl_get_fselector_form = cfuncproto(
            load_so_libforms(), "fl_get_fselector_form",
            cty.POINTER(FL_FORM), [],
            """FL_FORM * fl_get_fselector_form()
            """)
    retval = _fl_get_fselector_form()
    return retval


def fl_get_fselector_fdstruct():
    """ fl_get_fselector_fdstruct() -> fselector class
    """

    _fl_get_fselector_fdstruct = cfuncproto(
            load_so_libforms(), "fl_get_fselector_fdstruct",
            cty.POINTER(FD_FSELECTOR), [],
            """FD_FSELECTOR * fl_get_fselector_fdstruct()
            """)
    retval = _fl_get_fselector_fdstruct()
    return retval


def fl_hide_fselector():
    """ fl_hide_fselector()
    """

    _fl_hide_fselector = cfuncproto(
            load_so_libforms(), "fl_hide_fselector",
            None, [],
            """void fl_hide_fselector()
            """)
    _fl_hide_fselector()


def fl_set_fselector_filetype_marker(p1, p2, p3, p4, p5):
    """ fl_set_fselector_filetype_marker(p1, p2, p3, p4, p5)
    """

    _fl_set_fselector_filetype_marker = cfuncproto(
            load_so_libforms(), "fl_set_fselector_filetype_marker",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int],
            """void fl_set_fselector_filetype_marker(int p1, int p2, int p3,
               int p4, int p5)
            """)
    ip1 = convert_to_int(p1)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    ip4 = convert_to_int(p4)
    ip5 = convert_to_int(p5)
    keep_elem_refs(p1, p2, p3, p4, p5, ip1, ip2, ip3, ip4, ip5)
    _fl_set_fselector_filetype_marker(ip1, ip2, ip3, ip4, ip5)


fl_show_file_selector = fl_show_fselector
fl_set_fselector_cb = fl_set_fselector_callback


def fl_set_fselector_title(s):
    fl_set_form_title(fl_get_fselector_form(), s)


def fl_goodies_atclose(pForm, p2):
    """ fl_goodies_atclose(pForm, p2) -> num.
    """

    _fl_goodies_atclose = cfuncproto(
            load_so_libforms(), "fl_goodies_atclose",
            cty.c_int, [cty.POINTER(FL_FORM), cty.c_void_p],
            """int fl_goodies_atclose(FL_FORM * p1, void * p2)
            """)
    keep_elem_refs(pForm, p2)
    retval = _fl_goodies_atclose(pForm, p2)
    return retval



####################
# forms.h (input.h)
####################

# Routines

def fl_create_input(inputtype, x, y, w, h, label):
    """ fl_create_input(inputtype, x, y, w, h, label) -> pObject
    """

    _fl_create_input = cfuncproto(
            load_so_libforms(), "fl_create_input",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_input(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(inputtype, INPUTTYPE_list)
    iinputtype = convert_to_int(inputtype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(inputtype, x, y, w, h, label, iinputtype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_input(iinputtype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_input(inputtype, x, y, w, h, label):
    """ fl_add_input(inputtype, x, y, w, h, label) -> pObject
    """

    _fl_add_input = cfuncproto(
            load_so_libforms(), "fl_add_input",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_input(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(inputtype, INPUTTYPE_list)
    iinputtype = convert_to_int(inputtype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(inputtype, x, y, w, h, label, iinputtype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_input(iinputtype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_input(pObject, inputstr):
    """ fl_set_input(pObject, inputstr)
    """

    _fl_set_input = cfuncproto(
            load_so_libforms(), "fl_set_input",
            None, [cty.POINTER(FL_OBJECT), STRING],
            """void fl_set_input(FL_OBJECT * ob, const char * str)
            """)
    sinputstr = convert_to_string(inputstr)
    keep_elem_refs(pObject, inputstr, sinputstr)
    _fl_set_input(pObject, sinputstr)


def fl_set_input_return(pObject, value):
    """ fl_set_input_return(pObject, value)
    """

    _fl_set_input_return = cfuncproto(
            load_so_libforms(), "fl_set_input_return",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_input_return(FL_OBJECT * ob, int value)
            """)
    ivalue = convert_to_int(value)
    keep_elem_refs(pObject, value, ivalue)
    _fl_set_input_return(pObject, ivalue)


def fl_set_input_color(pObject, textcolr, curscolr):
    """ fl_set_input_color(pObject, textcolr, curscolr)
    """

    _fl_set_input_color = cfuncproto(
            load_so_libforms(), "fl_set_input_color",
            None, [cty.POINTER(FL_OBJECT), FL_COLOR, FL_COLOR],
            """void fl_set_input_color(FL_OBJECT * ob, FL_COLOR textcol,
               FL_COLOR curscol)
            """)
    ultextcolr = convert_to_FL_COLOR(textcolr)
    ulcurscolr = convert_to_FL_COLOR(curscolr)
    keep_elem_refs(pObject, textcolr, curscolr, ultextcolr, ulcurscolr)
    _fl_set_input_color(pObject, ultextcolr, ulcurscolr)


#def fl_get_input_color(pObject, textcolr, curscolr)
def fl_get_input_color(pObject):
    """ fl_get_input_color(pObject) -> textcolr, curscolr
    """

    _fl_get_input_color = cfuncproto(
            load_so_libforms(), "fl_get_input_color",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_COLOR),
            cty.POINTER(FL_COLOR)],
            """void fl_get_input_color(FL_OBJECT * ob, FL_COLOR * textcol,
               FL_COLOR * curscol)
            """)
    textcolr, ptextcolr = make_ulong_and_pointer()
    curscolr, pcurscolr = make_ulong_and_pointer()
    keep_elem_refs(pObject, textcolr, curscolr)
    _fl_get_input_color(pObject, ptextcolr, pcurscolr)
    return textcolr, curscolr


def fl_set_input_scroll(pObject, yes):
    """ fl_set_input_scroll(pObject, yes)
    """

    _fl_set_input_scroll = cfuncproto(
            load_so_libforms(), "fl_set_input_scroll",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_input_scroll(FL_OBJECT * ob, int yes)
            """)
    iyes = convert_to_int(yes)
    keep_elem_refs(pObject, yes, iyes)
    _fl_set_input_scroll(pObject, iyes)


def fl_set_input_cursorpos(pObject, xpos, ypos):
    """ fl_set_input_cursorpos(pObject, xpos, ypos)
    """

    _fl_set_input_cursorpos = cfuncproto(
            load_so_libforms(), "fl_set_input_cursorpos",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_input_cursorpos(FL_OBJECT * ob, int xpos, int ypos)
            """)
    ixpos = convert_to_int(xpos)
    iypos = convert_to_int(ypos)
    keep_elem_refs(pObject, xpos, ypos, ixpos, iypos)
    _fl_set_input_cursorpos(pObject, ixpos, iypos)


def fl_set_input_selected(pObject, yes):
    """ fl_set_input_selected(pObject, yes)
    """

    _fl_set_input_selected = cfuncproto(
            load_so_libforms(), "fl_set_input_selected",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_input_selected(FL_OBJECT * ob, int yes)
            """)
    iyes = convert_to_int(yes)
    keep_elem_refs(pObject, yes, iyes)
    _fl_set_input_selected(pObject, iyes)


def fl_set_input_selected_range(pObject, begin, end):
    """ fl_set_input_selected_range(pObject, begin, end)
    """

    _fl_set_input_selected_range = cfuncproto(
            load_so_libforms(), "fl_set_input_selected_range",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_input_selected_range(FL_OBJECT * ob,
               int begin, int end)
            """)
    ibegin = convert_to_int(begin)
    iend = convert_to_int(end)
    keep_elem_refs(pObject, begin, end, ibegin, iend)
    _fl_set_input_selected_range(pObject, ibegin, iend)


#def fl_get_input_selected_range(pObject, begin, end)
def fl_get_input_selected_range(pObject):
    """ fl_get_input_selected_range(pObject) -> string, begin, end
    """

    _fl_get_input_selected_range = cfuncproto(
            load_so_libforms(), "fl_get_input_selected_range",
            STRING, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """const char * fl_get_input_selected_range(FL_OBJECT * ob,
               int * begin, int * end)
            """)
    begin, pbegin = make_int_and_pointer()
    end, pend = make_int_and_pointer()
    keep_elem_refs(pObject, begin, end, pbegin, pend)
    retval = _fl_get_input_selected_range(pObject, pbegin, pend)
    return retval, begin, end


def fl_set_input_maxchars(pObject, maxchars):
    """ fl_set_input_maxchars(pObject, maxchars)
    """

    _fl_set_input_maxchars = cfuncproto(
            load_so_libforms(), "fl_set_input_maxchars",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_input_maxchars(FL_OBJECT * ob, int maxchars)
            """)
    imaxchars = convert_to_int(maxchars)
    keep_elem_refs(pObject, maxchars, imaxchars)
    _fl_set_input_maxchars(pObject, imaxchars)


def fl_set_input_format(pObject, fmt, sep):
    """ fl_set_input_format(pObject, fmt, sep)
    """

    _fl_set_input_format = cfuncproto(
            load_so_libforms(), "fl_set_input_format",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_input_format(FL_OBJECT * ob, int fmt, int sep)
            """)
    ifmt = convert_to_int(fmt)
    isep = convert_to_int(sep)
    keep_elem_refs(pObject, fmt, sep, ifmt, isep)
    _fl_set_input_format(pObject, ifmt, isep)


def fl_set_input_hscrollbar(pObject, pref):
    """ fl_set_input_hscrollbar(pObject, pref)
    """

    _fl_set_input_hscrollbar = cfuncproto(
            load_so_libforms(), "fl_set_input_hscrollbar",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_input_hscrollbar(FL_OBJECT * ob, int pref)
            """)
    ipref = convert_to_int(pref)
    keep_elem_refs(pObject, pref, ipref)
    _fl_set_input_hscrollbar(pObject, ipref)


def fl_set_input_vscrollbar(pObject, pref):
    """ fl_set_input_vscrollbar(pObject, pref)
    """

    _fl_set_input_vscrollbar = cfuncproto(
            load_so_libforms(), "fl_set_input_vscrollbar",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_input_vscrollbar(FL_OBJECT * ob, int pref)
            """)
    ipref = convert_to_int(pref)
    keep_elem_refs(pObject, pref, ipref)
    _fl_set_input_vscrollbar(pObject, ipref)


def fl_set_input_topline(pObject, top):
    """ fl_set_input_topline(pObject, top)
    """

    _fl_set_input_topline = cfuncproto(
            load_so_libforms(), "fl_set_input_topline",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_input_topline(FL_OBJECT * ob, int top)
            """)
    itop = convert_to_int(top)
    keep_elem_refs(pObject, top, itop)
    _fl_set_input_topline(pObject, itop)


def fl_set_input_scrollbarsize(pObject, hh, vw):
    """ fl_set_input_scrollbarsize(pObject, hh, vw)
    """

    _fl_set_input_scrollbarsize = cfuncproto(
            load_so_libforms(), "fl_set_input_scrollbarsize",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_input_scrollbarsize(FL_OBJECT * ob, int hh, int vw)
            """)
    ihh = convert_to_int(hh)
    ivw = convert_to_int(vw)
    keep_elem_refs(pObject, hh, vw, ihh, ivw)
    _fl_set_input_scrollbarsize(pObject, ihh, ivw)


#def fl_get_input_scrollbarsize(pObject, hh, vw)
def fl_get_input_scrollbarsize(pObject):
    """ fl_get_input_scrollbarsize(pObject) -> hh, vw
    """

    _fl_get_input_scrollbarsize = cfuncproto(
            load_so_libforms(), "fl_get_input_scrollbarsize",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """void fl_get_input_scrollbarsize(FL_OBJECT * ob,
               int * hh, int * vw)
            """)
    hh, phh = make_int_and_pointer()
    vw, pvw = make_int_and_pointer()
    keep_elem_refs(pObject, hh, vw)
    _fl_get_input_scrollbarsize(pObject, phh, pvw)
    return hh, vw


def fl_set_input_xoffset(pObject, xoff):
    """ fl_set_input_xoffset(pObject, xoff)
    """

    _fl_set_input_xoffset = cfuncproto(
            load_so_libforms(), "fl_set_input_xoffset",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_input_xoffset(FL_OBJECT * ob, int xoff)
            """)
    ixoff = convert_to_int(xoff)
    keep_elem_refs(pObject, xoff, ixoff)
    _fl_set_input_xoffset(pObject, ixoff)


def fl_get_input_xoffset(pObject):
    """ fl_get_input_xoffset(pObject) -> num.
    """

    _fl_get_input_xoffset = cfuncproto(
            load_so_libforms(), "fl_get_input_xoffset",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_input_xoffset(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_input_xoffset(pObject)
    return retval


def fl_set_input_fieldchar(pObject, fldchar):
    """ fl_set_input_fieldchar(pObject, fldchar) -> num.
    """

    _fl_set_input_fieldchar = cfuncproto(
            load_so_libforms(), "fl_set_input_fieldchar",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_set_input_fieldchar(FL_OBJECT * ob, int fchar)
            """)
    ifldchar = convert_to_int(fldchar)
    keep_elem_refs(pObject, fldchar, ifldchar)
    retval = _fl_set_input_fieldchar(pObject, ifldchar)
    return retval


def fl_get_input_topline(pObject):
    """ fl_get_input_topline(pObject) -> num.
    """

    _fl_get_input_topline = cfuncproto(
            load_so_libforms(), "fl_get_input_topline",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_input_topline(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_input_topline(pObject)
    return retval


def fl_get_input_screenlines(pObject):
    """ fl_get_input_screenlines(pObject) -> num.
    """

    _fl_get_input_screenlines = cfuncproto(
            load_so_libforms(), "fl_get_input_screenlines",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_input_screenlines(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_input_screenlines(pObject)
    return retval


#def fl_get_input_cursorpos(pObject, x, y)
def fl_get_input_cursorpos(pObject):
    """ fl_get_input_cursorpos(pObject) -> num., x, y
    """

    _fl_get_input_cursorpos = cfuncproto(
            load_so_libforms(), "fl_get_input_cursorpos",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """int fl_get_input_cursorpos(FL_OBJECT * ob, int * x, int * y)
            """)
    x, px = make_int_and_pointer()
    y, py = make_int_and_pointer()
    keep_elem_refs(pObject, x, y)
    retval = _fl_get_input_cursorpos(pObject, px, py)
    return retval, x, y


def fl_set_input_cursor_visible(pObject, visible):
    """ fl_set_input_cursor_visible(pObject, visible)
    """

    _fl_set_input_cursor_visible = cfuncproto(
            load_so_libforms(), "fl_set_input_cursor_visible",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_input_cursor_visible(FL_OBJECT * ob, int visible)
            """)
    ivisible = convert_to_int(visible)
    keep_elem_refs(pObject, visible, ivisible)
    _fl_set_input_cursor_visible(pObject, ivisible)


def fl_get_input_numberoflines(pObject):
    """ fl_get_input_numberoflines(pObject) -> lines num.
    """

    _fl_get_input_numberoflines = cfuncproto(
            load_so_libforms(), "fl_get_input_numberoflines",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_input_numberoflines(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_input_numberoflines(pObject)
    return retval


#def fl_get_input_format(pObject, fmt, sep)
def fl_get_input_format(pObject):
    """ fl_get_input_format(pObject) -> fmt, sep
    """

    _fl_get_input_format = cfuncproto(
            load_so_libforms(), "fl_get_input_format",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """void fl_get_input_format(FL_OBJECT * ob, int * fmt, int * sep)
            """)
    fmt, pfmt = make_int_and_pointer()
    sep, psep = make_int_and_pointer()
    keep_elem_refs(pObject, fmt, sep, pfmt, psep)
    _fl_get_input_format(pObject, pfmt, psep)
    return fmt, sep


def fl_get_input(pObject):
    """ fl_get_input(pObject) -> input string
    """

    _fl_get_input = cfuncproto(
            load_so_libforms(), "fl_get_input",
            STRING, [cty.POINTER(FL_OBJECT)],
            """const char * fl_get_input(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_input(pObject)
    return retval


FL_INPUTVALIDATOR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), STRING,
                                  STRING, cty.c_int)

def fl_set_input_filter(pObject, py_InputValidator):
    """
        fl_set_input_filter(pObject, py_InputValidator) -> input_filter func.
    """

    _fl_set_input_filter = cfuncproto(
            load_so_libforms(), "fl_set_input_filter",
            FL_INPUTVALIDATOR, [cty.POINTER(FL_OBJECT), FL_INPUTVALIDATOR],
            """FL_INPUTVALIDATOR fl_set_input_filter(FL_OBJECT * ob,
               FL_INPUTVALIDATOR validate)
            """)
    c_InputValidator = FL_INPUTVALIDATOR(py_InputValidator)
    keep_cfunc_refs(c_InputValidator, py_InputValidator)
    keep_elem_refs(pObject)
    retval = _fl_set_input_filter(pObject, c_InputValidator)
    return retval


def fl_validate_input(pObject):
    """ fl_validate_input(pObject) -> num.
    """

    _fl_validate_input = cfuncproto(
            load_so_libforms(), "fl_validate_input",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_validate_input(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_validate_input(pObject)
    return retval


fl_set_input_shortcut = fl_set_object_shortcut


# edit keys

def fl_set_input_editkeymap(pEditKeymap):
    """ fl_set_input_editkeymap(pEditKeymap)
    """

    _fl_set_input_editkeymap = cfuncproto(
            load_so_libforms(), "fl_set_input_editkeymap",
            None, [cty.POINTER(FL_EditKeymap)],
            """void fl_set_input_editkeymap(const char * keymap)
            """)
    keep_elem_refs(pEditKeymap)
    _fl_set_input_editkeymap(pEditKeymap)



#####################
# forms.h (menu.h)
# Object Class: Menu
#####################

# Routines

def fl_create_menu(menutype, x, y, w, h, label):
    """ fl_create_menu(menutype, x, y, w, h, label) -> pObject
    """

    _fl_create_menu = cfuncproto(
            load_so_libforms(), "fl_create_menu",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_menu(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(menutype, MENUTYPE_list)
    imenutype = convert_to_int(menutype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(menutype, x, y, w, h, label, imenutype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_menu(imenutype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_menu(menutype, x, y, w, h, label):
    """ fl_add_menu(menutype, x, y, w, h, label) -> pObject
    """

    _fl_add_menu = cfuncproto(
            load_so_libforms(), "fl_add_menu",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_menu(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)    DEPRECATED
            """)
    check_admitted_listvalues(menutype, MENUTYPE_list)
    imenutype = convert_to_int(menutype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(menutype, x, y, w, h, label, imenutype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_menu(imenutype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_menu(pObject):
    """ fl_clear_menu(pObject)
    """

    _fl_clear_menu = cfuncproto(
            load_so_libforms(), "fl_clear_menu",
            None, [cty.POINTER(FL_OBJECT)],
            """void fl_clear_menu(FL_OBJECT * ob)    DEPRECATED
            """)
    keep_elem_refs(pObject)
    _fl_clear_menu(pObject)


def fl_set_menu(pObject, menustr):
    """
        fl_set_menu(pObject, menustr)

        Sets the menu to a particular menu string.

        @param pObject : pointer to menu object
        @param menustr : text string of menu
    """

    _fl_set_menu = cfuncproto(
            load_so_libforms(), "fl_set_menu",
            None, [cty.POINTER(FL_OBJECT), STRING],
            """void fl_set_menu(FL_OBJECT * ob, const char * menustr)    DEPRECATED
            """)
    smenustr = convert_to_string(menustr)
    keep_elem_refs(pObject, menustr, smenustr)
    _fl_set_menu(pObject, smenustr)


def fl_addto_menu(pObject, menustr):
    """ fl_addto_menu(pObject, menustr) -> num.
    """

    _fl_addto_menu = cfuncproto(
            load_so_libforms(), "fl_addto_menu",
            cty.c_int, [cty.POINTER(FL_OBJECT), STRING],
            """int fl_addto_menu(FL_OBJECT * ob, const char * menustr)    DEPRECATED
            """)
    smenustr = convert_to_string(menustr)
    keep_elem_refs(pObject, menustr, smenustr)
    retval = _fl_addto_menu(pObject, smenustr)
    return retval


def fl_replace_menu_item(pObject, numb, itemstr):
    """ fl_replace_menu_item(pObject, numb, itemstr)
    """

    _fl_replace_menu_item = cfuncproto(
            load_so_libforms(), "fl_replace_menu_item",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, STRING],
            """void fl_replace_menu_item(FL_OBJECT * ob, int numb,
               const char * str)    DEPRECATED
            """)
    inumb = convert_to_int(numb)
    sitemstr = convert_to_string(itemstr)
    keep_elem_refs(pObject, numb, itemstr, inumb, sitemstr)
    _fl_replace_menu_item(pObject, inumb, sitemstr)


def fl_delete_menu_item(pObject, numb):
    """ fl_delete_menu_item(pObject, numb)
    """

    _fl_delete_menu_item = cfuncproto(
            load_so_libforms(), "fl_delete_menu_item",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_delete_menu_item(FL_OBJECT * ob, int numb)    DEPRECATED
            """)
    inumb = convert_to_int(numb)
    keep_elem_refs(pObject, numb, inumb)
    _fl_delete_menu_item(pObject, inumb)


#already defined in xfdata
FL_PUP_CB = cty.CFUNCTYPE(cty.c_int, cty.c_int)

def fl_set_menu_item_callback(pObject, numb, py_PupCb):
    """ fl_set_menu_item_callback(pObject, numb, py_PupCb) -> callback
    """

    _fl_set_menu_item_callback = cfuncproto(
            load_so_libforms(), "fl_set_menu_item_callback",
            FL_PUP_CB, [cty.POINTER(FL_OBJECT), cty.c_int, FL_PUP_CB],
            """FL_PUP_CB fl_set_menu_item_callback(FL_OBJECT * ob, int numb,
               FL_PUP_CB cb)
            """)
    inumb = convert_to_int(numb)
    c_PupCb = FL_PUP_CB(py_PupCb)
    keep_cfunc_refs(c_PupCb, py_PupCb)
    keep_elem_refs(pObject, numb, inumb)
    retval = _fl_set_menu_item_callback(pObject, inumb, c_PupCb)
    return retval


def fl_set_menu_item_shortcut(pObject, itemnum, textsc):
    """
        fl_set_menu_item_shortcut(pObject, itemnum, textsc)

        Sets the shortcut of a menu item.

        @param pObject : pointer to menu object
        @param itemnum : number of item to be operated on
        @param textsc : text of shortcut to be set
    """

    _fl_set_menu_item_shortcut = cfuncproto(
            load_so_libforms(), "fl_set_menu_item_shortcut",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, STRING],
            """void fl_set_menu_item_shortcut(FL_OBJECT * ob, int numb,
               const char * str)   DEPRECATED
            """)
    iitemnum = convert_to_int(itemnum)
    stextsc = convert_to_string(textsc)
    keep_elem_refs(pObject, itemnum, stextsc, itemnum, stextsc)
    _fl_set_menu_item_shortcut(pObject, itemnum, stextsc)


def fl_set_menu_item_mode(pObject, itemnum, mode):
    """
        fl_set_menu_item_mode(pObject, itemnum, mode)

        Sets the mode of a menu item.

        @param pObject : pointer to menu object
        @param itemnum : id of an item to be operated on
        @param mode : mode to be set
    """

    _fl_set_menu_item_mode = cfuncproto(
            load_so_libforms(), "fl_set_menu_item_mode",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_uint],
            """void fl_set_menu_item_mode(FL_OBJECT * ob, int numb,
               unsigned int mode)   DEPRECATED
            """)
    iitemnum = convert_to_int(itemnum)
    uimode = convert_to_uint(mode)
    keep_elem_refs(pObject, itemnum, mode, iitemnum, uimode)
    _fl_set_menu_item_mode(pObject, iitemnum, uimode)


def fl_show_menu_symbol(pObject, showflag):
    """
        fl_show_menu_symbol(pObject, showflag)

        Makes the menu symbol visible or not.

        @param pObject : pointer to menu object
        @param showflag : flag to show menu or not (1|0)
    """

    _fl_show_menu_symbol = cfuncproto(
            load_so_libforms(), "fl_show_menu_symbol",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_show_menu_symbol(FL_OBJECT * ob, int show)   DEPRECATED
            """)
    ishowflag = convert_to_int(showflag)
    keep_elem_refs(pObject, showflag, ishowflag)
    _fl_show_menu_symbol(pObject, ishowflag)


def fl_set_menu_popup(pObject, pup):
    """ fl_set_menu_popup(pObject, pup)
    """

    _fl_set_menu_popup = cfuncproto(
            load_so_libforms(), "fl_set_menu_popup",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_menu_popup(FL_OBJECT * ob, int pup)   DEPRECATED
            """)
    ipup = convert_to_int(pup)
    keep_elem_refs(pObject, pup, ipup)
    _fl_set_menu_popup(pObject, ipup)


def fl_get_menu_popup(pObject):
    """ fl_get_menu_popup(pObject) -> num.
    """

    _fl_get_menu_popup = cfuncproto(
            load_so_libforms(), "fl_get_menu_popup",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_menu_popup(FL_OBJECT * ob)   DEPRECATED
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_menu_popup(pObject)
    return retval


def fl_get_menu(pObject):
    """ fl_get_menu(pObject) -> num.
    """

    _fl_get_menu = cfuncproto(
            load_so_libforms(), "fl_get_menu",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_menu(FL_OBJECT * ob)    DEPRECATED
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_menu(pObject)
    return retval


def fl_get_menu_item_text(pObject, numb):
    """ fl_get_menu_item_text(pObject, numb) -> text string
    """

    _fl_get_menu_item_text = cfuncproto(
            load_so_libforms(), "fl_get_menu_item_text",
            STRING, [cty.POINTER(FL_OBJECT), cty.c_int],
            """const char * fl_get_menu_item_text(FL_OBJECT * ob, int numb)    DEPRECATED
            """)
    inumb = convert_to_int(numb)
    keep_elem_refs(pObject, numb, inumb)
    retval = _fl_get_menu_item_text(pObject, inumb)
    return retval


def fl_get_menu_maxitems(pObject):
    """ fl_get_menu_maxitems(pObject) -> items num.
    """

    _fl_get_menu_maxitems = cfuncproto(
            load_so_libforms(), "fl_get_menu_maxitems",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_menu_maxitems(FL_OBJECT * ob)    DEPRECATED
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_menu_maxitems(pObject)
    return retval


def fl_get_menu_item_mode(pObject, numb):
    """ fl_get_menu_item_mode(pObject, numb) -> mode num.
    """

    _fl_get_menu_item_mode = cfuncproto(
            load_so_libforms(), "fl_get_menu_item_mode",
            cty.c_uint, [cty.POINTER(FL_OBJECT), cty.c_int],
            """unsigned int fl_get_menu_item_mode(FL_OBJECT * ob, int numb)   DEPRECATED
            """)
    inumb = convert_to_int(numb)
    keep_elem_refs(pObject, numb, inumb)
    retval = _fl_get_menu_item_mode(pObject, inumb)
    return retval


def fl_get_menu_text(pObject):
    """ fl_get_menu_text(pObject) -> text string
    """

    _fl_get_menu_text = cfuncproto(
            load_so_libforms(), "fl_get_menu_text",
            STRING, [cty.POINTER(FL_OBJECT)],
            """const char * fl_get_menu_text(FL_OBJECT * ob)    DEPRECATED
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_menu_text(pObject)
    return retval


def fl_set_menu_entries(pObject, pPopupEntry):
    """ fl_set_menu_entries(pObject, pPopupEntry) -> num.
    """

    _fl_set_menu_entries = cfuncproto(
            load_so_libforms(), "fl_set_menu_entries",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_PUP_ENTRY)],
            """int fl_set_menu_entries(FL_OBJECT * ob, FL_PUP_ENTRY * ent)    DEPRECATED
            """)
    keep_elem_refs(pObject, pPopupEntry)
    retval = _fl_set_menu_entries(pObject, pPopupEntry)
    return retval


def fl_set_menu_notitle(pObject, off):
    """ fl_set_menu_notitle(pObject, off) -> num.
    """

    _fl_set_menu_notitle = cfuncproto(
            load_so_libforms(), "fl_set_menu_notitle",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_set_menu_notitle(FL_OBJECT * ob, int off)   DEPRECATED?
            """)
    ioff = convert_to_int(off)
    keep_elem_refs(pObject, off, ioff)
    retval = _fl_set_menu_notitle(pObject, ioff)
    return retval


def fl_set_menu_item_id(pObject, item, idnum):
    """ fl_set_menu_item_id(pObject, item, idnum) -> num.
    """

    _fl_set_menu_item_id = cfuncproto(
            load_so_libforms(), "fl_set_menu_item_id",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
            """int fl_set_menu_item_id(FL_OBJECT * ob, int item, int id)
            """)
    iitem = convert_to_int(item)
    iidnum = convert_to_int(idnum)
    keep_elem_refs(pObject, item, idnum, iitem, iidnum)
    retval = _fl_set_menu_item_id(pObject, iitem, iidnum)
    return retval



# Nmenu object types

def fl_create_nmenu(nmenutype, x, y, w, h, label):
    """
        fl_create_nmenu(nmenutype, x, y, w, h, label) -> pObject

        Creates a nmenu object.

        @param nmenutype : type of nmenu
        @param x : horizontal position of nmenu (upper-left corner)
        @param y : vertical position of nmenu (upper-left corner)
        @param w : width of nmenu object in pixel
        @param h : height of nmenu object in pixel
        @param label : text label of nmenu object
    """

    _fl_create_nmenu = cfuncproto(
            load_so_libforms(), "fl_create_nmenu",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_nmenu(int p1, FL_Coord p2, FL_Coord p3,
               FL_Coord p4, FL_Coord p5, const char * p6)
            """)
    check_admitted_listvalues(nmenutype, NMENUTYPE_list)
    inmenutype = convert_to_int(nmenutype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(nmenutype, x, y, w, h, label, inmenutype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_nmenu(inmenutype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_nmenu(nmenutype, x, y, w, h, label):
    """
        fl_add_nmenu(nmenutype, x, y, w, h, label) -> pObject

        Adds a nmenu object.

        @param nmenutype : type of nmenu object
        @param x : horizontal position of nmenu (upper-left corner)
        @param y : vertical position of nmenu (upper-left corner)
        @param w : width of nmenu object in pixel
        @param h : height of nmenu object in pixel
        @param label : text label of nmenu object
    """

    _fl_add_nmenu = cfuncproto(
            load_so_libforms(), "fl_add_nmenu",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_nmenu(int p1, FL_Coord p2, FL_Coord p3,
               FL_Coord p4, FL_Coord p5, const char * p6)
            """)
    check_admitted_listvalues(nmenutype, NMENUTYPE_list)
    inmenutype = convert_to_int(nmenutype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(nmenutype, x, y, w, h, label, inmenutype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_nmenu(inmenutype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_nmenu(pObject):
    """ fl_clear_nmenu(pObject) -> num.
    """

    _fl_clear_nmenu = cfuncproto(
            load_so_libforms(), "fl_clear_nmenu",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_clear_nmenu(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    retval = _fl_clear_nmenu(pObject)
    return retval


def fl_add_nmenu_items(pObject, itemstr):
    """ fl_add_nmenu_items(pObject, itemstr) -> pPopupEntry
    """

    _fl_add_nmenu_items = cfuncproto(
            load_so_libforms(), "fl_add_nmenu_items",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), STRING],
            """FL_POPUP_ENTRY * fl_add_nmenu_items(FL_OBJECT * p1,
               const char * p2)
            """)
    sitemstr = convert_to_string(itemstr)
    keep_elem_refs(pObject, itemstr, sitemstr)
    retval = _fl_add_nmenu_items(pObject, sitemstr)
    return retval


def fl_insert_nmenu_items(pObject, pPopupEntry, itemstr):
    """ fl_insert_nmenu_items(pObject, pPopupEntry, itemstr) -> pPopupEntry
    """

    _fl_insert_nmenu_items = cfuncproto(
            load_so_libforms(), "fl_insert_nmenu_items",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT),
            cty.POINTER(FL_POPUP_ENTRY), STRING],
            """FL_POPUP_ENTRY * fl_insert_nmenu_items(FL_OBJECT * p1,
               FL_POPUP_ENTRY * p2, const char * p3)
            """)
    sitemstr = convert_to_string(itemstr)
    keep_elem_refs(pObject, pPopupEntry, itemstr, sitemstr)
    retval = _fl_insert_nmenu_items(pObject, pPopupEntry, sitemstr)
    return retval


def fl_replace_nmenu_item(pObject, pPopupEntry, itemstr):
    """ fl_replace_nmenu_item(pObject, pPopupEntry, itemstr) -> pPopupEntry
    """

    _fl_replace_nmenu_item = cfuncproto(
            load_so_libforms(), "fl_replace_nmenu_item",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT),
            cty.POINTER(FL_POPUP_ENTRY), STRING],
            """FL_POPUP_ENTRY * fl_replace_nmenu_item(FL_OBJECT * p1,
               FL_POPUP_ENTRY * p2, const char * p3)
            """)
    sitemstr = convert_to_string(itemstr)
    keep_elem_refs(pObject, pPopupEntry, itemstr, sitemstr)
    retval = _fl_replace_nmenu_item(pObject, pPopupEntry, sitemstr)
    return retval


def fl_delete_nmenu_item(pObject, pPopupEntry):
    """ fl_delete_nmenu_item(pObject, pPopupEntry) -> num.
    """

    _fl_delete_nmenu_item = cfuncproto(
            load_so_libforms(), "fl_delete_nmenu_item",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_POPUP_ENTRY)],
            """int fl_delete_nmenu_item(FL_OBJECT * p1, FL_POPUP_ENTRY * p2)
            """)
    keep_elem_refs(pObject, pPopupEntry)
    retval = _fl_delete_nmenu_item(pObject, pPopupEntry)
    return retval


def fl_set_nmenu_items(pObject, pPopupItem):
    """ fl_set_nmenu_items(pObject, pPopupItem) -> pPopupEntry
    """

    _fl_set_nmenu_items = cfuncproto(
            load_so_libforms(), "fl_set_nmenu_items",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT),
            cty.POINTER(FL_POPUP_ITEM)],
            """FL_POPUP_ENTRY * fl_set_nmenu_items(FL_OBJECT * p1,
               FL_POPUP_ITEM * p2)
            """)
    keep_elem_refs(pObject, pPopupItem)
    retval = _fl_set_nmenu_items(pObject, pPopupItem)
    return retval


def fl_get_nmenu_popup(pObject):
    """ fl_get_nmenu_popup(pObject) -> pPopup
    """

    _fl_get_nmenu_popup = cfuncproto(
            load_so_libforms(), "fl_get_nmenu_popup",
            cty.POINTER(FL_POPUP), [cty.POINTER(FL_OBJECT)],
            """FL_POPUP * fl_get_nmenu_popup(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_nmenu_popup(pObject)
    return retval


def fl_set_nmenu_popup(pObject, pPopup):
    """ fl_set_nmenu_popup(pObject, pPopup) -> num.
    """

    _fl_set_nmenu_popup = cfuncproto(
            load_so_libforms(), "fl_set_nmenu_popup",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_POPUP)],
            """int fl_set_nmenu_popup(FL_OBJECT * p1, FL_POPUP * p2)
            """)
    keep_elem_refs(pObject, pPopup)
    retval = _fl_set_nmenu_popup(pObject, pPopup)
    return retval


def fl_get_nmenu_item(pObject):
    """ fl_get_nmenu_item(pObject) -> pPopupReturn
    """

    _fl_get_nmenu_item = cfuncproto(
            load_so_libforms(), "fl_get_nmenu_item",
            cty.POINTER(FL_POPUP_RETURN), [cty.POINTER(FL_OBJECT)],
            """FL_POPUP_RETURN * fl_get_nmenu_item(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_nmenu_item(pObject)
    return retval


def fl_get_nmenu_item_by_value(pObject, value):
    """ fl_get_nmenu_item_by_value(pObject, value) -> pPopupEntry
    """

    _fl_get_nmenu_item_by_value = cfuncproto(
            load_so_libforms(), "fl_get_nmenu_item_by_value",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), cty.c_long],
            """FL_POPUP_ENTRY * fl_get_nmenu_item_by_value(FL_OBJECT * p1,
               long int p2)
            """)
    lvalue = convert_to_long(value)
    keep_elem_refs(pObject, value, lvalue)
    retval = _fl_get_nmenu_item_by_value(pObject, lvalue)
    return retval


def fl_get_nmenu_item_by_label(pObject, label):
    """ fl_get_nmenu_item_by_label(pObject, label) -> pPopupEntry
    """

    _fl_get_nmenu_item_by_label = cfuncproto(
            load_so_libforms(), "fl_get_nmenu_item_by_label",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), STRING],
            """FL_POPUP_ENTRY * fl_get_nmenu_item_by_label(FL_OBJECT * p1,
               const char * p2)
            """)
    slabel = convert_to_string(label)
    keep_elem_refs(pObject, label, slabel)
    retval = _fl_get_nmenu_item_by_label(pObject, slabel)
    return retval


def fl_get_nmenu_item_by_text(pObject, text):
    """ fl_get_nmenu_item_by_text(pObject, text) -> pPopupEntry
    """

    _fl_get_nmenu_item_by_text = cfuncproto(
            load_so_libforms(), "fl_get_nmenu_item_by_text",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), STRING],
            """FL_POPUP_ENTRY * fl_get_nmenu_item_by_text(FL_OBJECT * p1,
               const char * p2)
            """)
    stext = convert_to_string(text)
    keep_elem_refs(pObject, text, stext)
    retval = _fl_get_nmenu_item_by_text(pObject, stext)
    return retval


def fl_set_nmenu_policy(pObject, num):
    """ fl_set_nmenu_policy(pObject, num) -> num.
    """

    _fl_set_nmenu_policy = cfuncproto(
            load_so_libforms(), "fl_set_nmenu_policy",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_set_nmenu_policy(FL_OBJECT * p1, int p2)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    retval = _fl_set_nmenu_policy(pObject, inum)
    return retval


def fl_set_nmenu_hl_text_color(pObject, colr):
    """ fl_set_nmenu_hl_text_color(pObject, colr) -> color
    """

    _fl_set_nmenu_hl_text_color = cfuncproto(
            load_so_libforms(), "fl_set_nmenu_hl_text_color",
            FL_COLOR, [cty.POINTER(FL_OBJECT), FL_COLOR],
            """FL_COLOR fl_set_nmenu_hl_text_color(FL_OBJECT * p1,
               FL_COLOR p2)
            """)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, colr, ulcolr)
    retval = _fl_set_nmenu_hl_text_color(pObject, ulcolr)
    return retval



#########################
# forms.h (positioner.h)
#########################

# Routines

def fl_create_positioner(postype, x, y, w, h, label):
    """ fl_create_positioner(postype, x, y, w, h, label) -> pObject
    """

    _fl_create_positioner = cfuncproto(
            load_so_libforms(), "fl_create_positioner",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_positioner(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(postype, POSITIONERTYPE_list)
    ipostype = convert_to_int(postype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(postype, x, y, w, h, label, ipostype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_positioner(ipostype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_positioner(postype, x, y, w, h, label):
    """ fl_add_positioner(postype, x, y, w, h, label) -> pObject
    """

    _fl_add_positioner = cfuncproto(
            load_so_libforms(), "fl_add_positioner",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_positioner(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(postype, POSITIONERTYPE_list)
    ipostype = convert_to_int(postype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(postype, x, y, w, h, label, ipostype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_positioner(ipostype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_positioner_xvalue(pObject, val):
    """ fl_set_positioner_xvalue(pObject, val)
    """

    _fl_set_positioner_xvalue = cfuncproto(
            load_so_libforms(), "fl_set_positioner_xvalue",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_positioner_xvalue(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_positioner_xvalue(pObject, fval)


def fl_get_positioner_xvalue(pObject):
    """ fl_get_positioner_xvalue(pObject) -> floatnum
    """

    _fl_get_positioner_xvalue = cfuncproto(
            load_so_libforms(), "fl_get_positioner_xvalue",
            cty.c_double, [cty.POINTER(FL_OBJECT)],
            """double fl_get_positioner_xvalue(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_positioner_xvalue(pObject)
    return retval


def fl_set_positioner_xbounds(pObject, minbound, maxbound):
    """ fl_set_positioner_xbounds(pObject, minbound, maxbound)
    """

    _fl_set_positioner_xbounds = cfuncproto(
            load_so_libforms(), "fl_set_positioner_xbounds",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_positioner_xbounds(FL_OBJECT * ob, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_positioner_xbounds(pObject, fminbound, fmaxbound)


#def fl_get_positioner_xbounds(pObject, minbound, maxbound)
def fl_get_positioner_xbounds(pObject):
    """ fl_get_positioner_xbounds(pObject) -> minbound, maxbound
    """

    _fl_get_positioner_xbounds = cfuncproto(
            load_so_libforms(), "fl_get_positioner_xbounds",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_positioner_xbounds(FL_OBJECT * ob, double * min,
            double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_positioner_xbounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_set_positioner_yvalue(pObject, val):
    """ fl_set_positioner_yvalue(pObject, val)
    """

    _fl_set_positioner_yvalue = cfuncproto(
            load_so_libforms(), "fl_set_positioner_yvalue",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_positioner_yvalue(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_positioner_yvalue(pObject, fval)


def fl_get_positioner_yvalue(pObject):
    """ fl_get_positioner_yvalue(pObject) -> floatnum
    """

    _fl_get_positioner_yvalue = cfuncproto(
            load_so_libforms(), "fl_get_positioner_yvalue",
            cty.c_double, [cty.POINTER(FL_OBJECT)],
            """double fl_get_positioner_yvalue(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_positioner_yvalue(pObject)
    return retval


def fl_set_positioner_ybounds(pObject, minbound, maxbound):
    """ fl_set_positioner_ybounds(pObject, minbound, maxbound)
    """

    _fl_set_positioner_ybounds = cfuncproto(
            load_so_libforms(), "fl_set_positioner_ybounds",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_positioner_ybounds(FL_OBJECT * ob, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_positioner_ybounds(pObject, fminbound, fmaxbound)


#def fl_get_positioner_ybounds(pObject, minbound, maxbound)
def fl_get_positioner_ybounds(pObject):
    """ fl_get_positioner_ybounds(pObject) -> minbound, maxbound
    """

    _fl_get_positioner_ybounds = cfuncproto(
            load_so_libforms(), "fl_get_positioner_ybounds",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_positioner_ybounds(FL_OBJECT * ob, double * min,
               double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_positioner_ybounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_set_positioner_xstep(pObject, value):
    """ fl_set_positioner_xstep(pObject, value)
    """

    _fl_set_positioner_xstep = cfuncproto(
            load_so_libforms(), "fl_set_positioner_xstep",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_positioner_xstep(FL_OBJECT * ob, double value)
            """)
    fvalue = convert_to_double(value)
    keep_elem_refs(pObject, value, fvalue)
    _fl_set_positioner_xstep(pObject, fvalue)


def fl_set_positioner_ystep(pObject, value):
    """ fl_set_positioner_ystep(pObject, value)
    """

    _fl_set_positioner_ystep = cfuncproto(
            load_so_libforms(), "fl_set_positioner_ystep",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_positioner_ystep(FL_OBJECT * ob, double value)
            """)
    fvalue = convert_to_double(value)
    keep_elem_refs(pObject, value, fvalue)
    _fl_set_positioner_ystep(pObject, fvalue)


def fl_set_positioner_return(pObject, value):
    """ fl_set_positioner_return(pObject, value)
    """

    _fl_set_positioner_return = cfuncproto(
            load_so_libforms(), "fl_set_positioner_return",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_positioner_return(FL_OBJECT * ob, int value)
            """)
    ivalue = convert_to_int(value)
    keep_elem_refs(pObject, value, ivalue)
    _fl_set_positioner_return(pObject, ivalue)


def fl_create_scrollbar(scrolltype, x, y, w, h, label):
    """ fl_create_scrollbar(scrolltype, x, y, w, h, label) -> pObject
    """

    _fl_create_scrollbar = cfuncproto(
            load_so_libforms(), "fl_create_scrollbar",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_scrollbar(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(scrolltype, SCROLLTYPE_list)
    iscrolltype = convert_to_int(scrolltype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(scrolltype, x, y, w, h, label, iscrolltype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_scrollbar(iscrolltype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_scrollbar(scrolltype, x, y, w, h, label):
    """
        fl_add_scrollbar(scrolltype, x, y, w, h, label) -> pObject

        Adds a scrollbar to a form.

        @param scrolltype : type of scrollbar
        @param x : horizontal position (upper-left corner)
        @param y : vertical position (upper-left corner)
        @param w : width of the scrollbar
        @param h : height of the scrollbar
        @param label : label text of the scrollbar
    """

    _fl_add_scrollbar = cfuncproto(
            load_so_libforms(), "fl_add_scrollbar",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_scrollbar(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(scrolltype, SCROLLTYPE_list)
    iscrolltype = convert_to_int(scrolltype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(scrolltype, x, y, w, h, label, iscrolltype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_scrollbar(iscrolltype, ix, iy, iw, ih, slabel)
    return retval


def fl_get_scrollbar_value(pObject):
    """
        fl_get_scrollbar_value(pObject) -> value[float]

        Returns the value of a scrollbar.

        @param pObject : pointer to object
    """

    _fl_get_scrollbar_value = cfuncproto(
            load_so_libforms(), "fl_get_scrollbar_value",
            cty.c_double, [cty.POINTER(FL_OBJECT)],
            """double fl_get_scrollbar_value(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_scrollbar_value(pObject)
    return retval


def fl_set_scrollbar_value(pObject, val):
    """
        fl_set_scrollbar_value(pObject, val)

        Sets the value of a scrollbar.

        @param pObject : pointer to object
        @param val : value of the scrollbar to be set
    """

    _fl_set_scrollbar_value = cfuncproto(
            load_so_libforms(), "fl_set_scrollbar_value",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_scrollbar_value(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_scrollbar_value(pObject, fval)


def fl_set_scrollbar_size(pObject, val):
    """ fl_set_scrollbar_size(pObject, val)
    """

    _fl_set_scrollbar_size = cfuncproto(
            load_so_libforms(), "fl_set_scrollbar_size",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_scrollbar_size(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_scrollbar_size(pObject, fval)


def fl_set_scrollbar_increment(pObject, leftbtnval, midlbtnval):
    """
        fl_set_scrollbar_increment(pObject, leftbtnval, midlbtnval)

        Sets the size of the steps of a scrollbar jump.

        @param pObject : pointer to object
        @param leftbtnval : value to increment if the left mouse button is
           pressed
        @param midlbtnval : value to increment if the middle mouse button is
           pressed
    """

    _fl_set_scrollbar_increment = cfuncproto(
            load_so_libforms(), "fl_set_scrollbar_increment",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_scrollbar_increment(FL_OBJECT * ob, double l,
               double r)
            """)
    fleftbtnval = convert_to_double(leftbtnval)
    fmidlbtnval = convert_to_double(midlbtnval)
    keep_elem_refs(pObject, leftbtnval, midlbtnval, fleftbtnval, \
                   fmidlbtnval)
    _fl_set_scrollbar_increment(pObject, fleftbtnval, fmidlbtnval)


#def fl_get_scrollbar_increment(pObject, leftbtnval, valmidlbtnval)
def fl_get_scrollbar_increment(pObject):
    """
        fl_get_scrollbar_increment(pObject) -> leftbtnval[double], midlbtnval[double]

        Returns the increment of size of a scrollbar for left and middle mouse
        buttons.

        @param pObject : pointer to object
    """

    _fl_get_scrollbar_increment = cfuncproto(
            load_so_libforms(), "fl_get_scrollbar_increment",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_scrollbar_increment(FL_OBJECT * ob, double * a,
               double * b)
            """)
    leftbtnval, pleftbtnval = make_double_and_pointer()
    midlbtnval, pmidlbtnval = make_double_and_pointer()
    keep_elem_refs(pObject, leftbtnval, midlbtnval, pleftbtnval, pmidlbtnval)
    _fl_get_scrollbar_increment(pObject, pleftbtnval, pmidlbtnval)
    return leftbtnval, midlbtnval


def fl_set_scrollbar_bounds(pObject, minbound, maxbound):
    """
        fl_set_scrollbar_bounds(pObject, minbound, maxbound)

        Sets the bounds/limits of a scrollbar.

        @param pObject : pointer to object
        @param minbound : minimum bound of scrollbar
        @param maxbound : maximum bound of scrollbar
    """

    _fl_set_scrollbar_bounds = cfuncproto(
            load_so_libforms(), "fl_set_scrollbar_bounds",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_scrollbar_bounds(FL_OBJECT * ob, double b1, double b2)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_scrollbar_bounds(pObject, fminbound, fmaxbound)


#def fl_get_scrollbar_bounds(pObject, b1, b2)
def fl_get_scrollbar_bounds(pObject):
    """
        fl_get_scrollbar_bounds(pObject) -> minbound, maxbound

        Returns the bounds/limits of a scrollbar.

        @param pObject : pointer to scrollbar object
    """

    _fl_get_scrollbar_bounds = cfuncproto(
            load_so_libforms(), "fl_get_scrollbar_bounds",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_scrollbar_bounds(FL_OBJECT * ob, double * b1,
               double * b2)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, pminbound, maxbound, pmaxbound)
    _fl_get_scrollbar_bounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_set_scrollbar_return(pObject, returnnum):
    """
        fl_set_scrollbar_return(pObject, returnnum)

        Sets the type of return of a scrollbar.

        @param pObject : pointer to scrollbar object
        @param returnnum : value of return type
    """

    _fl_set_scrollbar_return = cfuncproto(
            load_so_libforms(), "fl_set_scrollbar_return",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_scrollbar_return(FL_OBJECT * ob, int ret)
            """)
    check_admitted_listvalues(returnnum, RETURN_list)
    ireturnnum = convert_to_int(returnnum)
    keep_elem_refs(pObject, returnnum, ireturnnum)
    _fl_set_scrollbar_return(pObject, ireturnnum)


def fl_set_scrollbar_step(pObject, step):
    """ fl_set_scrollbar_step(pObject, step)
    """

    _fl_set_scrollbar_step = cfuncproto(
            load_so_libforms(), "fl_set_scrollbar_step",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_scrollbar_step(FL_OBJECT * ob, double step)
            """)
    fstep = convert_to_double(step)
    keep_elem_refs(pObject, step, fstep)
    _fl_set_scrollbar_step(pObject, fstep)



#####################
# forms.h (select.h)
#####################

# Select object types

def fl_create_select(selecttype, x, y, w, h, label):
    """ fl_create_select(selecttype, x, y, w, h, label) -> pObject
    """

    _fl_create_select = cfuncproto(
            load_so_libforms(), "fl_create_select",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_select(int p1, FL_Coord p2, FL_Coord p3,
               FL_Coord p4, FL_Coord p5, const char * p6)
            """)
    check_admitted_listvalues(selecttype, SELECTTYPE_list)
    iselecttype = convert_to_int(selecttype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(selecttype, x, y, w, h, label, iselecttype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_select(iselecttype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_select(selecttype, x, y, w, h, label):
    """ fl_add_select(selecttype, x, y, w, h, label) -> pObject
    """

    _fl_add_select = cfuncproto(
            load_so_libforms(), "fl_add_select",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_select(int p1, FL_Coord p2, FL_Coord p3,
               FL_Coord p4, FL_Coord p5, const char * p6)
            """)
    check_admitted_listvalues(selecttype, SELECTTYPE_list)
    iselecttype = convert_to_int(selecttype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(selecttype, x, y, w, h, label, iselecttype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_select(iselecttype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_select(pObject):
    """ fl_clear_select(pObject)

        @param pObject : pointer to select object
    """

    _fl_clear_select = cfuncproto(
            load_so_libforms(), "fl_clear_select",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_clear_select(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    _fl_clear_select(pObject)


def fl_add_select_items(pObject, itemstr):
    """ fl_add_select_items(pObject, itemstr) -> pPopupEntry
    """

    _fl_add_select_items = cfuncproto(
            load_so_libforms(), "fl_add_select_items",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), STRING],
            """FL_POPUP_ENTRY * fl_add_select_items(FL_OBJECT * p1,
               const char * p2)
            """)
    sitemstr = convert_to_string(itemstr)
    keep_elem_refs(pObject, itemstr, sitemstr)
    retval = _fl_add_select_items(pObject, sitemstr)
    return retval


def fl_insert_select_items(pObject, pPopupEntry, itemstr):
    """ fl_insert_select_items(pObject, pPopupEntry, itemstr) -> pPopupEntry
    """

    _fl_insert_select_items = cfuncproto(
            load_so_libforms(), "fl_insert_select_items",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT),
            cty.POINTER(FL_POPUP_ENTRY), STRING],
            """FL_POPUP_ENTRY * fl_insert_select_items(FL_OBJECT * p1,
               FL_POPUP_ENTRY * p2, const char * p3)
            """)
    sitemstr = convert_to_string(itemstr)
    keep_elem_refs(pObject, pPopupEntry, itemstr, sitemstr)
    retval = _fl_insert_select_items(pObject, pPopupEntry, sitemstr)
    return retval


def fl_replace_select_item(pObject, pPopupEntry, itemstr):
    """ fl_replace_select_item(pObject, pPopupEntry, itemstr) -> pPopupEntry
    """

    _fl_replace_select_item = cfuncproto(
            load_so_libforms(), "fl_replace_select_item",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT),
            cty.POINTER(FL_POPUP_ENTRY), STRING],
            """FL_POPUP_ENTRY * fl_replace_select_item(FL_OBJECT * p1,
               FL_POPUP_ENTRY * p2, const char * p3)
            """)
    sitemstr = convert_to_string(itemstr)
    keep_elem_refs(pObject, pPopupEntry, itemstr, sitemstr)
    retval = _fl_replace_select_item(pObject, pPopupEntry, sitemstr)
    return retval


def fl_delete_select_item(pObject, pPopupEntry):
    """ fl_delete_select_item(pObject, pPopupEntry) -> num.
    """

    _fl_delete_select_item = cfuncproto(
            load_so_libforms(), "fl_delete_select_item",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_POPUP_ENTRY)],
            """int fl_delete_select_item(FL_OBJECT * p1, FL_POPUP_ENTRY * p2)
            """)
    keep_elem_refs(pObject, pPopupEntry)
    retval = _fl_delete_select_item(pObject, pPopupEntry)
    return retval


def fl_set_select_items(pObject, pPopupItem):
    """
        fl_set_select_items(pObject, pPopupItem) -> num.

        Repopulates a select object popup.

        @param pObject : pointer to select object
        @param pPopupItem : pointer to xfc.FL_POPUP_ITEM structure
    """

    _fl_set_select_items = cfuncproto(
            load_so_libforms(), "fl_set_select_items",
            cty.c_long, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_POPUP_ITEM)],
            """long int fl_set_select_items(FL_OBJECT * p1,
               FL_POPUP_ITEM * p2)
            """)
    #pPopupItem.callback = FL_POPUP_CB()
    keep_elem_refs(pObject, pPopupItem)
    retval = _fl_set_select_items(pObject, pPopupItem)
    return retval


def fl_get_select_popup(pObject):
    """ fl_get_select_popup(pObject) -> pPopup
    """

    _fl_get_select_popup = cfuncproto(
            load_so_libforms(), "fl_get_select_popup",
            cty.POINTER(FL_POPUP), [cty.POINTER(FL_OBJECT)],
            """FL_POPUP * fl_get_select_popup(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_select_popup(pObject)
    return retval


def fl_set_select_popup(pObject, pPopup):
    """ fl_set_select_popup(pObject, pPopup) -> num.
    """

    _fl_set_select_popup = cfuncproto(
            load_so_libforms(), "fl_set_select_popup",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_POPUP)],
            """int fl_set_select_popup(FL_OBJECT * p1, FL_POPUP * p2)
            """)
    keep_elem_refs(pObject, pPopup)
    retval = _fl_set_select_popup(pObject, pPopup)
    return retval


def fl_get_select_item(pObject):
    """ fl_get_select_item(pObject) -> pPopupReturn
    """

    _fl_get_select_item = cfuncproto(
            load_so_libforms(), "fl_get_select_item",
            cty.POINTER(FL_POPUP_RETURN), [cty.POINTER(FL_OBJECT)],
            """FL_POPUP_RETURN * fl_get_select_item(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_select_item(pObject)
    return retval


def fl_set_select_item(pObject, pPopupEntry):
    """ fl_set_select_item(pObject, pPopupEntry) -> pPopupReturn
    """

    _fl_set_select_item = cfuncproto(
            load_so_libforms(), "fl_set_select_item",
            cty.POINTER(FL_POPUP_RETURN), [cty.POINTER(FL_OBJECT),
            cty.POINTER(FL_POPUP_ENTRY)],
            """FL_POPUP_RETURN * fl_set_select_item(FL_OBJECT * p1,
               FL_POPUP_ENTRY * p2)
            """)
    keep_elem_refs(pObject, pPopupEntry)
    retval = _fl_set_select_item(pObject, pPopupEntry)
    return retval


def fl_get_select_item_by_value(pObject, value):
    """ fl_get_select_item_by_value(pObject, value) -> pPopupEntry
    """

    _fl_get_select_item_by_value = cfuncproto(
            load_so_libforms(), "fl_get_select_item_by_value",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), cty.c_long],
            """FL_POPUP_ENTRY * fl_get_select_item_by_value(FL_OBJECT * p1,
               long int p2)
            """)
    lvalue = convert_to_long(value)
    keep_elem_refs(pObject, value, lvalue)
    retval = _fl_get_select_item_by_value(pObject, lvalue)
    return retval


def fl_get_select_item_by_label(pObject, label):
    """ fl_get_select_item_by_label(pObject, label) -> pPopupEntry
    """

    _fl_get_select_item_by_label = cfuncproto(
            load_so_libforms(), "fl_get_select_item_by_label",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), STRING],
            """FL_POPUP_ENTRY * fl_get_select_item_by_label(FL_OBJECT * p1,
               const char * p2)
            """)
    slabel = convert_to_string(label)
    keep_elem_refs(pObject, label, slabel)
    retval = _fl_get_select_item_by_label(pObject, slabel)
    return retval


def fl_get_select_item_by_text(pObject, txtstr):
    """ fl_get_select_item_by_text(pObject, txtstr) -> pPopupEntry
    """

    _fl_get_select_item_by_text = cfuncproto(
            load_so_libforms(), "fl_get_select_item_by_text",
            cty.POINTER(FL_POPUP_ENTRY), [cty.POINTER(FL_OBJECT), STRING],
            """FL_POPUP_ENTRY * fl_get_select_item_by_text(FL_OBJECT * p1,
               const char * p2)
            """)
    stxtstr = convert_to_string(txtstr)
    keep_elem_refs(pObject, txtstr, stxtstr)
    retval = _fl_get_select_item_by_text(pObject, stxtstr)
    return retval


def fl_get_select_text_color(pObject):
    """ fl_get_select_text_color(pObject) -> color
    """

    _fl_get_select_text_color = cfuncproto(
            load_so_libforms(), "fl_get_select_text_color",
            FL_COLOR, [cty.POINTER(FL_OBJECT)],
            """FL_COLOR fl_get_select_text_color(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_select_text_color(pObject)
    return retval


def fl_set_select_text_color(pObject, colr):
    """ fl_set_select_text_color(pObject, colr) -> color
    """

    _fl_set_select_text_color = cfuncproto(
            load_so_libforms(), "fl_set_select_text_color",
            FL_COLOR, [cty.POINTER(FL_OBJECT), FL_COLOR],
            """FL_COLOR fl_set_select_text_color(FL_OBJECT * p1, FL_COLOR p2)
            """)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, colr, ulcolr)
    retval = _fl_set_select_text_color(pObject, ulcolr)
    return retval


#def fl_get_select_text_font(pObject, p2, p3)
def fl_get_select_text_font(pObject):
    """ fl_get_select_text_font(pObject) -> num, num1, num2
    """

    _fl_get_select_text_font = cfuncproto(
            load_so_libforms(), "fl_get_select_text_font",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """int fl_get_select_text_font(FL_OBJECT * p1, int * p2, int * p3)
            """)
    num1, pnum1 = make_int_and_pointer()
    num2, pnum2 = make_int_and_pointer()
    keep_elem_refs(pObject, num1, num2, pnum1, pnum2)
    retval = _fl_get_select_text_font(pObject, pnum2, pnum2)
    return retval, num1, num2


def fl_set_select_text_font(pObject, p2, p3):
    """ fl_set_select_text_font(pObject, p2, p3) -> font num.
    """

    _fl_set_select_text_font = cfuncproto(
            load_so_libforms(), "fl_set_select_text_font",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
            """int fl_set_select_text_font(FL_OBJECT * p1, int p2, int p3)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    keep_elem_refs(pObject, p2, p3, ip2, ip3)
    retval = _fl_set_select_text_font(pObject, ip2, ip3)
    return retval


def fl_get_select_text_align(pObject):
    """ fl_get_select_text_align(pObject) -> num.
    """

    _fl_get_select_text_align = cfuncproto(
            load_so_libforms(), "fl_get_select_text_align",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_select_text_align(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_select_text_align(pObject)
    return retval


def fl_set_select_text_align(pObject, p2):
    """ fl_set_select_text_align(pObject, p2) -> num.
    """

    _fl_set_select_text_align = cfuncproto(
            load_so_libforms(), "fl_set_select_text_align",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_set_select_text_align(FL_OBJECT * p1, int p2)
            """)
    ip2 = convert_to_int(p2)
    keep_elem_refs(pObject, p2, ip2)
    retval = _fl_set_select_text_align(pObject, ip2)
    return retval


def fl_set_select_policy(pObject, num):
    """ fl_set_select_policy(pObject, num) -> num.
    """

    _fl_set_select_policy = cfuncproto(
            load_so_libforms(), "fl_set_select_policy",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_set_select_policy(FL_OBJECT * p1, int p2)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    retval = _fl_set_select_policy(pObject, inum)
    return retval



#######################
# forms.h (slider.h)
# Object Class: Slider
#######################

# Routines

def fl_create_slider(slidertype, x, y, w, h, label):
    """ fl_create_slider(slidertype, x, y, w, h, label) -> pObject
    """

    _fl_create_slider = cfuncproto(
            load_so_libforms(), "fl_create_slider",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_slider(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(slidertype, SLIDERTYPE_list)
    islidertype = convert_to_int(slidertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(slidertype, x, y, w, h, label, islidertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_slider(islidertype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_slider(slidertype, x, y, w, h, label):
    """
        fl_add_slider(slidertype, x, y, w, h, label) -> pObject

        Adds a slider to a form. No value is displayed.

        @param slidertype : type of the slider
        @param x : horizontal position (upper-left corner)
        @param y : vertical position (upper-left corner)
        @param w : width of the slider
        @param h : height of the slider
        @param label : label of the slider (placed below it by default)
    """

    _fl_add_slider = cfuncproto(
            load_so_libforms(), "fl_add_slider",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_slider(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(slidertype, SLIDERTYPE_list)
    islidertype = convert_to_int(slidertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(slidertype, x, y, w, h, label, islidertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_slider(islidertype, ix, iy, iw, ih, slabel)
    return retval


def fl_create_valslider(slidertype, x, y, w, h, label):
    """ fl_create_valslider(slidertype, x, y, w, h, label) -> pObject
    """

    _fl_create_valslider = cfuncproto(
            load_so_libforms(), "fl_create_valslider",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_valslider(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(slidertype, SLIDERTYPE_list)
    islidertype = convert_to_int(slidertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(slidertype, x, y, w, h, label, islidertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_valslider(islidertype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_valslider(slidertype, x, y, w, h, label):
    """
        fl_add_valslider(slidertype, x, y, w, h, label) -> pObject

        Adds a slider to a form. Its value is displayed above or to the
        left of the slider.

        @param slidertype : type of the slider
        @param x : horizontal position (upper-left corner)
        @param y : vertical position (upper-left corner)
        @param w : width of the slider
        @param h : height of the slider
        @param label : label of the slider (placed below it by default)
    """

    _fl_add_valslider = cfuncproto(
            load_so_libforms(), "fl_add_valslider",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_valslider(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(slidertype, SLIDERTYPE_list)
    islidertype = convert_to_int(slidertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(slidertype, x, y, w, h, label, islidertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_valslider(islidertype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_slider_value(pObject, val):
    """
        fl_set_slider_value(pObject, val)

        Changes the value of a slider.

        @param pObject : pointer to object
        @param val : new value of slider
    """

    _fl_set_slider_value = cfuncproto(
            load_so_libforms(), "fl_set_slider_value",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_slider_value(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_slider_value(pObject, fval)


def fl_get_slider_value(pObject):
    """
        fl_get_slider_value(pObject) -> value[float]

        Returns value of a slider.

        @param pObject : pointer to object
    """

    _fl_get_slider_value = cfuncproto(
            load_so_libforms(), "fl_get_slider_value",
            cty.c_double, [cty.POINTER(FL_OBJECT)],
            """double fl_get_slider_value(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_slider_value(pObject)
    return retval


def fl_set_slider_bounds(pObject, minbound, maxbound):
    """
        fl_set_slider_bounds(pObject, minbound, maxbound)

        Sets bounds/limits of a slider.

        @param pObject : pointer to object
        @param minbound : minimum bound of slider
        @param maxbound : maximum bound of slider
    """

    _fl_set_slider_bounds = cfuncproto(
            load_so_libforms(), "fl_set_slider_bounds",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_slider_bounds(FL_OBJECT * ob, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_slider_bounds(pObject, fminbound, fmaxbound)


#def fl_get_slider_bounds(pObject, minbound, maxbound)
def fl_get_slider_bounds(pObject):
    """
        fl_get_slider_bounds(pObject) -> minbound[float], maxbound[float]

        Returns bounds/limits of a slider.

        @param pObject : pointer to object
    """

    _fl_get_slider_bounds = cfuncproto(
            load_so_libforms(), "fl_get_slider_bounds",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_slider_bounds(FL_OBJECT * ob, double * min,
               double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_slider_bounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_set_slider_return(pObject, returnnum):
    """
        fl_set_slider_return(pObject, returnnum)

        Sets the return value of a slider.

        @param pObject : pointer to object
        @param returnnum : value of return (e.g. xfc.FL_RETURN_NONE, etc..)
    """

    _fl_set_slider_return = cfuncproto(
            load_so_libforms(), "fl_set_slider_return",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_slider_return(FL_OBJECT * ob, int value)
            """)
    check_admitted_listvalues(returnnum, RETURN_list)
    ireturnnum = convert_to_int(returnnum)
    keep_elem_refs(pObject, returnnum, ireturnnum)
    _fl_set_slider_return(pObject, ireturnnum)


def fl_set_slider_step(pObject, value):
    """ fl_set_slider_step(pObject, value)
    """

    _fl_set_slider_step = cfuncproto(
            load_so_libforms(), "fl_set_slider_step",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_slider_step(FL_OBJECT * ob, double value)
            """)
    fvalue = convert_to_double(value)
    keep_elem_refs(pObject, value, fvalue)
    _fl_set_slider_step(pObject, fvalue)


def fl_set_slider_increment(pObject, leftbtnval, midlbtnval):
    """ fl_set_slider_increment(pObject, leftbtnval, midlbtnval)
    """

    _fl_set_slider_increment = cfuncproto(
            load_so_libforms(), "fl_set_slider_increment",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_slider_increment(FL_OBJECT * ob, double l,
               double r)
            """)
    fleftbtnval = convert_to_double(leftbtnval)
    fmidlbtnval = convert_to_double(midlbtnval)
    keep_elem_refs(pObject, leftbtnval, midlbtnval, fleftbtnval, fmidlbtnval)
    _fl_set_slider_increment(pObject, fleftbtnval, fmidlbtnval)


#def fl_get_slider_increment(pObject, leftbtnval, midlbtnval)
def fl_get_slider_increment(pObject):
    """ fl_get_slider_increment(pObject) -> leftbtnval, midlbtnval
    """

    _fl_get_slider_increment = cfuncproto(
            load_so_libforms(), "fl_get_slider_increment",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)], \
            """void fl_get_slider_increment(FL_OBJECT * ob, double * l,
               double * r)
            """)
    leftbtnval, pleftbtnval = make_double_and_pointer()
    midlbtnval, pmidlbtnval = make_double_and_pointer()
    keep_elem_refs(pObject, leftbtnval, midlbtnval, pleftbtnval, pmidlbtnval)
    _fl_get_slider_increment(pObject, pleftbtnval, pmidlbtnval)
    return leftbtnval, midlbtnval


def fl_set_slider_size(pObject, size):
    """
        fl_set_slider_size(pObject, size)

        Sets the size of a slider.

        @param pObject : pointer to object
        @param size : value of size of the slider
    """

    _fl_set_slider_size = cfuncproto(
            load_so_libforms(), "fl_set_slider_size",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_slider_size(FL_OBJECT * ob, double size)
            """)
    fsize = convert_to_double(size)
    keep_elem_refs(pObject, size, fsize)
    _fl_set_slider_size(pObject, fsize)


def fl_set_slider_precision(pObject, precnum):
    """
        fl_set_slider_precision(pObject, precnum)

        Sets precision with which value a valslider is shown.

        @param pObject : pointer to object
        @param precnum : precision of shown value
    """

    _fl_set_slider_precision = cfuncproto(
            load_so_libforms(), "fl_set_slider_precision",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_slider_precision(FL_OBJECT * ob, int prec)
            """)
    iprecnum = convert_to_int(precnum)
    keep_elem_refs(pObject, precnum, iprecnum)
    _fl_set_slider_precision(pObject, iprecnum)


def fl_set_slider_filter(pObject, py_ValFilter):
    """
        fl_set_slider_filter(pObject, py_ValFilter)

        Overrides the default (slider value shown in floating point format)
        by registering a filter function.

        @param pObject : pointer to oject
        @param py_ValFilter : python function, fn(pObject, valfloat,
           intprecis) -> string
    """

    _fl_set_slider_filter = cfuncproto(
            load_so_libforms(), "fl_set_slider_filter",
            None, [cty.POINTER(FL_OBJECT), FL_VAL_FILTER],
            """void fl_set_slider_filter(FL_OBJECT * ob, FL_VAL_FILTER filter)
            """)
    c_ValFilter = FL_VAL_FILTER(py_ValFilter)
    keep_cfunc_refs(c_ValFilter, py_ValFilter)
    keep_elem_refs(pObject)
    _fl_set_slider_filter(pObject, c_ValFilter)


def fl_create_spinner(spinnertype, x, y, w, h, label):
    """ fl_create_spinner(spinnertype, x, y, w, h, label) -> pObject
    """

    _fl_create_spinner = cfuncproto(
            load_so_libforms(), "fl_create_spinner",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_spinner(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(spinnertype, SPINNERTYPE_list)
    ispinnertype = convert_to_int(spinnertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(spinnertype, x, y, w, h, label, ispinnertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_spinner(ispinnertype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_spinner(spinnertype, x, y, w, h, label):
    """ fl_add_spinner(spinnertype, x, y, w, h, label) -> pObject
    """

    _fl_add_spinner = cfuncproto(
            load_so_libforms(), "fl_add_spinner",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_spinner(int type, FL_Coord x, FL_Coord y,
            FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(spinnertype, SPINNERTYPE_list)
    ispinnertype = convert_to_int(spinnertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(spinnertype, x, y, w, h, label, ispinnertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_spinner(ispinnertype, ix, iy, iw, ih, slabel)
    return retval


def fl_get_spinner_value(pObject):
    """ fl_get_spinner_value(pObject) -> floatval
    """

    _fl_get_spinner_value = cfuncproto(
            load_so_libforms(), "fl_get_spinner_value",
            cty.c_double, [cty.POINTER(FL_OBJECT)],
            """double fl_get_spinner_value(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_spinner_value(pObject)
    return retval


def fl_set_spinner_value(pObject, val):
    """ fl_set_spinner_value(pObject, val) -> num.
    """

    _fl_set_spinner_value = cfuncproto(
            load_so_libforms(), "fl_set_spinner_value",
            cty.c_double, [cty.POINTER(FL_OBJECT), cty.c_double],
            """double fl_set_spinner_value(FL_OBJECT * obj, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_spinner_value(pObject, fval)


def fl_set_spinner_bounds(pObject, minbound, maxbound):
    """ fl_set_spinner_bounds(pObject, minbound, maxbound)
    """

    _fl_set_spinner_bounds = cfuncproto(
            load_so_libforms(), "fl_set_spinner_bounds",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_spinner_bounds(FL_OBJECT * obj, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_spinner_bounds(pObject, fminbound, fmaxbound)


#def fl_get_spinner_bounds(pObject, minbound, maxbound):
def fl_get_spinner_bounds(pObject):
    """ fl_get_spinner_bounds(pObject) -> minbound, maxbound
    """

    _fl_get_spinner_bounds = cfuncproto(
            load_so_libforms(), "fl_get_spinner_bounds",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)], \
            """void fl_get_spinner_bounds(FL_OBJECT * obj, double * min,
               double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_spinner_bounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_set_spinner_step(pObject, step):
    """ fl_set_spinner_step(pObject, step)
    """

    _fl_set_spinner_step = cfuncproto(
            load_so_libforms(), "fl_set_spinner_step",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_spinner_step(FL_OBJECT * obj, double step)
            """)
    fstep = convert_to_double(step)
    keep_elem_refs(pObject, step, fstep)
    _fl_set_spinner_step(pObject, fstep)


def fl_get_spinner_step(pObject):
    """ fl_get_spinner_step(pObject) -> num.
    """

    _fl_get_spinner_step = cfuncproto(
            load_so_libforms(), "fl_get_spinner_step",
            cty.c_double, [cty.POINTER(FL_OBJECT)],
            """double fl_get_spinner_step(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_spinner_step(pObject)
    return retval


def fl_set_spinner_precision(pObject, precnum):
    """ fl_set_spinner_precision(pObject, precnum)
    """

    _fl_set_spinner_precision = cfuncproto(
            load_so_libforms(), "fl_set_spinner_precision",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_spinner_precision(FL_OBJECT * obj, int prec)
            """)
    iprecnum = convert_to_int(precnum)
    keep_elem_refs(pObject, precnum, iprecnum)
    _fl_set_spinner_precision(pObject, iprecnum)


def fl_get_spinner_precision(pObject):
    """ fl_get_spinner_precision(pObject) -> num.
    """

    _fl_get_spinner_precision = cfuncproto(
            load_so_libforms(), "fl_get_spinner_precision",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_spinner_precision(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_spinner_precision(pObject)
    return retval


def fl_get_spinner_input(pObject):
    """ fl_get_spinner_input(pObject) -> pObject
    """

    _fl_get_spinner_input = cfuncproto(
            load_so_libforms(), "fl_get_spinner_input",
            cty.POINTER(FL_OBJECT), [cty.POINTER(FL_OBJECT)],
            """FL_OBJECT * fl_get_spinner_input(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_spinner_input(pObject)
    return retval


def fl_get_spinner_up_button(pObject):
    """ fl_get_spinner_up_button(pObject) -> pObject
    """

    _fl_get_spinner_up_button = cfuncproto(
            load_so_libforms(), "fl_get_spinner_up_button",
            cty.POINTER(FL_OBJECT), [cty.POINTER(FL_OBJECT)],
            """FL_OBJECT * fl_get_spinner_up_button(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_spinner_up_button(pObject)
    return retval


def fl_get_spinner_down_button(pObject):
    """ fl_get_spinner_down_button(pObject) -> pObject
    """

    _fl_get_spinner_down_button = cfuncproto(
            load_so_libforms(), "fl_get_spinner_down_button",
            cty.POINTER(FL_OBJECT), [cty.POINTER(FL_OBJECT)],
            """FL_OBJECT * fl_get_spinner_down_button(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_spinner_down_button(pObject)
    return retval



########################
# forms.h (tabfolder.h)
########################

def fl_create_tabfolder(foldertype, x, y, w, h, label):
    """ fl_create_tabfolder(foldertype, x, y, w, h, label) -> pObject
    """

    _fl_create_tabfolder = cfuncproto(
            load_so_libforms(), "fl_create_tabfolder",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_tabfolder(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(foldertype, TABFOLDERTYPE_list)
    ifoldertype = convert_to_int(foldertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(foldertype, x, y, w, h, label, ifoldertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_tabfolder(ifoldertype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_tabfolder(foldertype, x, y, w, h, label):
    """ fl_add_tabfolder(foldertype, x, y, w, h, label) -> pObject
    """

    _fl_add_tabfolder = cfuncproto(
            load_so_libforms(), "fl_add_tabfolder",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_tabfolder(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(foldertype, TABFOLDERTYPE_list)
    ifoldertype = convert_to_int(foldertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(foldertype, x, y, w, h, label, ifoldertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_tabfolder(ifoldertype, ix, iy, iw, ih, slabel)
    return retval


def fl_addto_tabfolder(pObject, title, pForm):
    """ fl_addto_tabfolder(pObject, title, pForm) -> pObject
    """

    _fl_addto_tabfolder = cfuncproto(
            load_so_libforms(), "fl_addto_tabfolder",
            cty.POINTER(FL_OBJECT), [cty.POINTER(FL_OBJECT), STRING,
            cty.POINTER(FL_FORM)],
            """FL_OBJECT * fl_addto_tabfolder(FL_OBJECT * ob,
               const char * title, FL_FORM * form)
            """)
    stitle = convert_to_string(title)
    keep_elem_refs(pObject, title, pForm, stitle)
    retval = _fl_addto_tabfolder(pObject, stitle, pForm)
    return retval


def fl_get_tabfolder_folder_bynumber(pObject, num):
    """ fl_get_tabfolder_folder_bynumber(pObject, num) -> pForm
    """

    _fl_get_tabfolder_folder_bynumber = cfuncproto(
            load_so_libforms(), "fl_get_tabfolder_folder_bynumber",
            cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT), cty.c_int],
            """FL_FORM * fl_get_tabfolder_folder_bynumber(FL_OBJECT * ob,
               int num)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    retval = _fl_get_tabfolder_folder_bynumber(pObject, inum)
    return retval


def fl_get_tabfolder_folder_byname(pObject, name):
    """ fl_get_tabfolder_folder_byname(pObject, name) -> pForm
    """

    _fl_get_tabfolder_folder_byname = cfuncproto(
            load_so_libforms(), "fl_get_tabfolder_folder_byname",
            cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT), STRING],
            """FL_FORM * fl_get_tabfolder_folder_byname(FL_OBJECT * ob,
               const char * name)
            """)
    sname = convert_to_string(name)
    keep_elem_refs(pObject, name, sname)
    retval = _fl_get_tabfolder_folder_byname(pObject, sname)
    return retval


def fl_delete_folder(pObject, pForm):
    """ fl_delete_folder(pObject, pForm)
    """

    _fl_delete_folder = cfuncproto(
            load_so_libforms(), "fl_delete_folder",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_FORM)],
            """void fl_delete_folder(FL_OBJECT * ob, FL_FORM * form)
            """)
    keep_elem_refs(pObject, pForm)
    _fl_delete_folder(pObject, pForm)


def fl_delete_folder_bynumber(pObject, num):
    """ fl_delete_folder_bynumber(pObject, num)
    """

    _fl_delete_folder_bynumber = cfuncproto(
            load_so_libforms(), "fl_delete_folder_bynumber",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_delete_folder_bynumber(FL_OBJECT * ob, int num)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    _fl_delete_folder_bynumber(pObject, inum)


def fl_delete_folder_byname(pObject, name):
    """ fl_delete_folder_byname(pObject, name)
    """

    _fl_delete_folder_byname = cfuncproto(
            load_so_libforms(), "fl_delete_folder_byname",
            None, [cty.POINTER(FL_OBJECT), STRING],
            """void fl_delete_folder_byname(FL_OBJECT * ob, const char * name)
            """)
    sname = convert_to_string(name)
    keep_elem_refs(pObject, name, sname)
    _fl_delete_folder_byname(pObject, sname)


def fl_set_folder(pObject, pForm):
    """ fl_set_folder(pObject, pForm)
    """

    _fl_set_folder = cfuncproto(
            load_so_libforms(), "fl_set_folder",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_FORM)],
            """void fl_set_folder(FL_OBJECT * ob, FL_FORM * form)
            """)
    keep_elem_refs(pObject, pForm)
    _fl_set_folder(pObject, pForm)


def fl_set_folder_byname(pObject, name):
    """ fl_set_folder_byname(pObject, name)
    """

    _fl_set_folder_byname = cfuncproto(
            load_so_libforms(), "fl_set_folder_byname",
            None, [cty.POINTER(FL_OBJECT), STRING],
            """void fl_set_folder_byname(FL_OBJECT * ob, const char * name)
            """)
    sname = convert_to_string(name)
    keep_elem_refs(pObject, name, sname)
    _fl_set_folder_byname(pObject, name)


def fl_set_folder_bynumber(pObject, num):
    """ fl_set_folder_bynumber(pObject, num)
    """

    _fl_set_folder_bynumber = cfuncproto(
            load_so_libforms(), "fl_set_folder_bynumber",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_folder_bynumber(FL_OBJECT * ob, int num)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    _fl_set_folder_bynumber(pObject, inum)


def fl_get_folder(pObject):
    """
        fl_get_folder(pObject) -> pForm

        @param pObject : pointer to object
    """

    _fl_get_folder = cfuncproto(
            load_so_libforms(), "fl_get_folder",
            cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT)],
            """FL_FORM * fl_get_folder(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_folder(pObject)
    return retval


def fl_get_folder_number(pObject):
    """
        fl_get_folder_number(pObject) -> folder num.

        @param pObject : pointer to object
    """

    _fl_get_folder_number = cfuncproto(
            load_so_libforms(), "fl_get_folder_number",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_folder_number(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_folder_number(pObject)
    return retval


def fl_get_folder_name(pObject):
    """
        fl_get_folder_name(pObject) -> name string

        @param pObject : pointer to object
    """

    _fl_get_folder_name = cfuncproto(
            load_so_libforms(), "fl_get_folder_name",
            STRING, [cty.POINTER(FL_OBJECT)],
            """const char * fl_get_folder_name(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_folder_name(pObject)
    return retval


def fl_get_tabfolder_numfolders(pObject):
    """
        fl_get_tabfolder_numfolders(pObject) -> num.

        @param pObject : pointer to object
    """

    _fl_get_tabfolder_numfolders = cfuncproto(
            load_so_libforms(), "fl_get_tabfolder_numfolders",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_tabfolder_numfolders(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_tabfolder_numfolders(pObject)
    return retval


def fl_get_active_folder(pObject):
    """
        fl_get_active_folder(pObject) -> pForm

        @param pObject : pointer to object
    """

    _fl_get_active_folder = cfuncproto(
            load_so_libforms(), "fl_get_active_folder",
            cty.POINTER(FL_FORM), [cty.POINTER(FL_OBJECT)],
            """FL_FORM * fl_get_active_folder(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_active_folder(pObject)
    return retval


def fl_get_active_folder_number(pObject):
    """
        fl_get_active_folder_number(pObject) -> num.

        @param pObject : pointer to object
    """

    _fl_get_active_folder_number = cfuncproto(
            load_so_libforms(), "fl_get_active_folder_number",
            cty.c_int, [cty.POINTER(FL_OBJECT)],
            """int fl_get_active_folder_number(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_active_folder_number(pObject)
    return retval


def fl_get_active_folder_name(pObject):
    """
        fl_get_active_folder_name(pObject) -> name string

        @param pObject : pointer to object
    """

    _fl_get_active_folder_name = cfuncproto(
            load_so_libforms(), "fl_get_active_folder_name",
            STRING, [cty.POINTER(FL_OBJECT)],
            """const char * fl_get_active_folder_name(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_active_folder_name(pObject)
    return retval


#def fl_get_folder_area(pObject, x, y, w, h)
def fl_get_folder_area(pObject):
    """
        fl_get_folder_area(pObject) -> x, y, w, h

        @param pObject : pointer to object
    """

    _fl_get_folder_area = cfuncproto(
            load_so_libforms(), "fl_get_folder_area",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(FL_Coord),
            cty.POINTER(FL_Coord), cty.POINTER(FL_Coord),
            cty.POINTER(FL_Coord)],
            """void fl_get_folder_area(FL_OBJECT * ob, FL_Coord * x,
               FL_Coord * y, FL_Coord * w, FL_Coord * h)
            """)
    x, px = make_int_and_pointer()
    y, py = make_int_and_pointer()
    w, pw = make_int_and_pointer()
    h, ph = make_int_and_pointer()
    keep_elem_refs(pObject, x, y, w, h, px, py, pw, ph)
    _fl_get_folder_area(pObject, px, py, pw, ph)
    return x, y, w, h


def fl_replace_folder_bynumber(pObject, num, pForm):
    """
        fl_replace_folder_bynumber(pObject, num, pForm)

        @param pObject : pointer to object
    """

    _fl_replace_folder_bynumber = cfuncproto(
            load_so_libforms(), "fl_replace_folder_bynumber",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.POINTER(FL_FORM)],
            """void fl_replace_folder_bynumber(FL_OBJECT * ob, int num,
               FL_FORM * form)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, pForm, inum)
    _fl_replace_folder_bynumber(pObject, inum, pForm)


def fl_set_tabfolder_autofit(pObject, num):
    """
        fl_set_tabfolder_autofit(pObject, num) -> num.

        @param pObject : pointer to object
    """

    _fl_set_tabfolder_autofit = cfuncproto(
            load_so_libforms(), "fl_set_tabfolder_autofit",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_set_tabfolder_autofit(FL_OBJECT * ob, int y)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    retval = _fl_set_tabfolder_autofit(pObject, inum)
    return retval


def fl_set_default_tabfolder_corner(npixels):
    """
        fl_set_default_tabfolder_corner(npixels) -> old pixels num.

        Adjusts the corner pixels, changing appearance of the tabs.

        @param npixels : number of corner pixels (default 3)
    """

    _fl_set_default_tabfolder_corner = cfuncproto(
            load_so_libforms(), "fl_set_default_tabfolder_corner",
            cty.c_int, [cty.c_int],
            """int fl_set_default_tabfolder_corner(int n):
            """)
    ipixels = convert_to_int(npixels)
    keep_elem_refs(npixels, ipixels)
    retval = _fl_set_default_tabfolder_corner(ipixels)
    return retval


def fl_set_tabfolder_offset(pObject, offset):
    """
        fl_set_tabfolder_offset(pObject, offset) -> num.

        @param pObject : pointer to tabfolder object
    """

    _fl_set_tabfolder_offset = cfuncproto(
            load_so_libforms(), "fl_set_tabfolder_offset",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_set_tabfolder_offset(FL_OBJECT * ob, int offset)
            """)
    ioffset = convert_to_int(offset)
    keep_elem_refs(pObject, offset, ioffset)
    retval = _fl_set_tabfolder_offset(pObject, ioffset)
    return retval



###################
# forms.h (text.h)
###################

def fl_create_text(texttype, x, y, w, h, label):
    """
        fl_create_text(texttype, x, y, w, h, label) -> pObject
    """

    _fl_create_text = cfuncproto(
            load_so_libforms(), "fl_create_text",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_text(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(texttype, TEXTTYPE_list)
    itexttype = convert_to_int(texttype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(texttype, x, y, w, h, label, itexttype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_text(itexttype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_text(texttype, x, y, w, h, label):
    """
        fl_add_text(texttype, x, y, w, h, label) -> pObject
    """

    _fl_add_text = cfuncproto(
            load_so_libforms(), "fl_add_text",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_text(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(texttype, TEXTTYPE_list)
    itexttype = convert_to_int(texttype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(texttype, x, y, w, h, label, itexttype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_text(itexttype, ix, iy, iw, ih, slabel)
    return retval



#########################
# forms.h (thumbwheel.h)
#########################

def fl_get_thumbwheel_value(pObject):
    """
        fl_get_thumbwheel_value(pObject) -> num.

        @param pObject : pointer to object
    """

    _fl_get_thumbwheel_value = cfuncproto(
            load_so_libforms(), "fl_get_thumbwheel_value",
            cty.c_double, [cty.POINTER(FL_OBJECT)],
            """double fl_get_thumbwheel_value(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_thumbwheel_value(pObject)
    return retval


def fl_set_thumbwheel_value(pObject, value):
    """
        fl_set_thumbwheel_value(pObject, value)

        @param pObject : pointer to object
    """

    _fl_set_thumbwheel_value = cfuncproto(
            load_so_libforms(), "fl_set_thumbwheel_value",
            cty.c_double, [cty.POINTER(FL_OBJECT), cty.c_double],
            """double fl_set_thumbwheel_value(FL_OBJECT * ob, double value)
            """)
    fvalue = convert_to_double(value)
    keep_elem_refs(pObject, value, fvalue)
    retval = _fl_set_thumbwheel_value(pObject, fvalue)
    return retval


def fl_get_thumbwheel_step(pObject):
    """
        fl_get_thumbwheel_step(pObject) -> num.

        @param pObject : pointer to object
    """

    _fl_get_thumbwheel_step = cfuncproto(
            load_so_libforms(), "fl_get_thumbwheel_step",
            cty.c_double, [cty.POINTER(FL_OBJECT)],
            """double fl_get_thumbwheel_step(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_thumbwheel_step(pObject)
    return retval


def fl_set_thumbwheel_step(pObject, step):
    """
        fl_set_thumbwheel_step(pObject, step) -> num.

        @param pObject : pointer to object
    """

    _fl_set_thumbwheel_step = cfuncproto(
            load_so_libforms(), "fl_set_thumbwheel_step",
            cty.c_double, [cty.POINTER(FL_OBJECT), cty.c_double],
            """double fl_set_thumbwheel_step(FL_OBJECT * ob, double step)
            """)
    fstep = convert_to_double(step)
    keep_elem_refs(pObject, step, fstep)
    retval = _fl_set_thumbwheel_step(pObject, fstep)
    return retval


def fl_set_thumbwheel_return(pObject, when):
    """
        fl_set_thumbwheel_return(pObject, when) -> num.

        @param pObject : pointer to object
    """

    _fl_set_thumbwheel_return = cfuncproto(
            load_so_libforms(), "fl_set_thumbwheel_return",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_set_thumbwheel_return(FL_OBJECT * ob, int how)
            """)
    check_admitted_listvalues(when, RETURN_list)
    iwhen = convert_to_int(when)
    keep_elem_refs(pObject, when, iwhen)
    retval = _fl_set_thumbwheel_return(pObject, when)
    return retval


def fl_set_thumbwheel_crossover(pObject, flag):
    """
        fl_set_thumbwheel_crossover(pObject, flag) -> num.

        @param pObject : pointer to object
    """

    _fl_set_thumbwheel_crossover = cfuncproto(
            load_so_libforms(), "fl_set_thumbwheel_crossover",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_set_thumbwheel_crossover(FL_OBJECT * ob, int flag)
            """)
    iflag = convert_to_int(flag)
    keep_elem_refs(pObject, flag, iflag)
    retval = _fl_set_thumbwheel_crossover(pObject, iflag)
    return retval


def fl_set_thumbwheel_bounds(pObject, minbound, maxbound):
    """
        fl_set_thumbwheel_bounds(pObject, minbound, maxbound)

        @param pObject : pointer to object
    """

    _fl_set_thumbwheel_bounds = cfuncproto(
            load_so_libforms(), "fl_set_thumbwheel_bounds",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_thumbwheel_bounds(FL_OBJECT * ob, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_thumbwheel_bounds(pObject, fminbound, fmaxbound)


#def fl_get_thumbwheel_bounds(pObject, minbound, maxbound)
def fl_get_thumbwheel_bounds(pObject):
    """
        fl_get_thumbwheel_bounds(pObject) -> minbound, maxbound

        @param pObject : pointer to thumbwheel object
    """

    _fl_get_thumbwheel_bounds = cfuncproto(
            load_so_libforms(), "fl_get_thumbwheel_bounds",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_thumbwheel_bounds(FL_OBJECT * ob, double * min,
               double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_thumbwheel_bounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_create_thumbwheel(wheeltype, x, y, w, h, label):
    """
        fl_create_thumbwheel(wheeltype, x, y, w, h, label) -> pObject
    """

    _fl_create_thumbwheel = cfuncproto(
            load_so_libforms(), "fl_create_thumbwheel",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_thumbwheel(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(wheeltype, THUMBWHEELTYPE_list)
    iwheeltype = convert_to_int(wheeltype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(wheeltype, x, y, w, h, label, iwheeltype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_thumbwheel(iwheeltype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_thumbwheel(wheeltype, x, y, w, h, label):
    """
        fl_add_thumbwheel(wheeltype, x, y, w, h, label) -> pObject
    """

    _fl_add_thumbwheel = cfuncproto(
            load_so_libforms(), "fl_add_thumbwheel",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_thumbwheel(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(wheeltype, THUMBWHEELTYPE_list)
    iwheeltype = convert_to_int(wheeltype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(wheeltype, x, y, w, h, label, iwheeltype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_thumbwheel(iwheeltype, ix, iy, iw, ih, slabel)
    return retval



######################
# forms.h (timer.h)
# Object Class: Timer
######################

# Routines

def fl_create_timer(timertype, x, y, w, h, label):
    """
        fl_create_timer(timertype, x, y, w, h, label) -> pObject
    """

    _fl_create_timer = cfuncproto(
            load_so_libforms(), "fl_create_timer",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_timer(int type, FL_Coord x, FL_Coord y,
            FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(timertype, TIMERTYPE_list)
    itimertype = convert_to_int(timertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(timertype, x, y, w, h, label, itimertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_timer(itimertype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_timer(timertype, x, y, w, h, label):
    """
        fl_add_timer(timertype, x, y, w, h, label) -> pObject
    """

    _fl_add_timer = cfuncproto(
            load_so_libforms(), "fl_add_timer",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_timer(int type, FL_Coord x, FL_Coord y,
            FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(timertype, TIMERTYPE_list)
    itimertype = convert_to_int(timertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(timertype, x, y, w, h, label, itimertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_timer(itimertype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_timer(pObject, total):
    """
        fl_set_timer(pObject, total)

        @param pObject : pointer to object
    """

    _fl_set_timer = cfuncproto(
            load_so_libforms(), "fl_set_timer",
            None, [cty.POINTER(FL_OBJECT), cty.c_double],
            """void fl_set_timer(FL_OBJECT * ob, double total)
            """)
    ftotal = convert_to_double(total)
    keep_elem_refs(pObject, total, ftotal)
    _fl_set_timer(pObject, ftotal)


def fl_get_timer(pObject):
    """
        fl_get_timer(pObject) -> num.

        @param pObject : pointer to object
    """

    _fl_get_timer = cfuncproto(
            load_so_libforms(), "fl_get_timer",
            cty.c_double, [cty.POINTER(FL_OBJECT)],
            """double fl_get_timer(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_timer(pObject)
    return retval


def fl_set_timer_countup(pObject, yes):
    """
        fl_set_timer_countup(pObject, yes)

        @param pObject : pointer to object
    """

    _fl_set_timer_countup = cfuncproto(
            load_so_libforms(), "fl_set_timer_countup",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_timer_countup(FL_OBJECT * ob, int yes)
            """)
    iyes = convert_to_int(yes)
    keep_elem_refs(pObject, yes, iyes)
    _fl_set_timer_countup(pObject, iyes)


FL_TIMER_FILTER = cty.CFUNCTYPE(STRING, cty.POINTER(FL_OBJECT), cty.c_double)

def fl_set_timer_filter(pObject, py_TimerFilter):
    """
        fl_set_timer_filter(pObject, py_TimerFilter) -> timer_filter func.

        @param pObject : pointer to object
        @param py_TimerFilter : python function, fn(pObject, valfloat) ->
           string
    """

    _fl_set_timer_filter = cfuncproto(
            load_so_libforms(), "fl_set_timer_filter",
            FL_TIMER_FILTER, [cty.POINTER(FL_OBJECT), FL_TIMER_FILTER],
            """FL_TIMER_FILTER fl_set_timer_filter(FL_OBJECT * ob,
               FL_TIMER_FILTER filter)
            """)
    c_TimerFilter = FL_TIMER_FILTER(py_TimerFilter)
    keep_cfunc_refs(c_TimerFilter, py_TimerFilter)
    keep_elem_refs(pObject)
    retval = _fl_set_timer_filter(pObject, c_TimerFilter)
    return retval


def fl_suspend_timer(pObject):
    """
        fl_suspend_timer(pObject)

        @param pObject : pointer to object
    """

    _fl_suspend_timer = cfuncproto(
            load_so_libforms(), "fl_suspend_timer",
            None, [cty.POINTER(FL_OBJECT)],
            """void fl_suspend_timer(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_suspend_timer(pObject)


def fl_resume_timer(pObject):
    """
        fl_resume_timer(pObject)

        Resume timer previously paused.

        @param pObject : pointer to timer object
    """

    _fl_resume_timer = cfuncproto(
            load_so_libforms(), "fl_resume_timer",
            None, [cty.POINTER(FL_OBJECT)],
            """void fl_resume_timer(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_resume_timer(pObject)



###############################
# forms.h (xpopup.h)
# Prototypes for xpop-up menus
###############################

def fl_setpup_entries(popupid, pPopupEntry):
    """
        fl_setpup_entries(popupid, pPopupEntry) -> num.
    """

    _fl_setpup_entries = cfuncproto(
            load_so_libforms(), "fl_setpup_entries",
            cty.c_int, [cty.c_int, cty.POINTER(FL_PUP_ENTRY)],
            """int fl_setpup_entries(int nm, FL_PUP_ENTRY * entries)
            """)
    ipopupid = convert_to_int(popupid)
    keep_elem_refs(popupid, pPopupEntry, ipopupid)
    retval = _fl_setpup_entries(ipopupid, pPopupEntry)
    return retval


def fl_newpup(win):
    """
        fl_newpup(win) -> num.
    """

    _fl_newpup = cfuncproto(
            load_so_libforms(), "fl_newpup",
            cty.c_int, [Window],
            """int fl_newpup(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    retval = _fl_newpup(ulwin)
    return retval


def fl_defpup(win, pupstr):
    """
        fl_defpup(win, pupstr) -> num.
    """

    _fl_defpup = cfuncproto(
            load_so_libforms(), "fl_defpup",
            cty.c_int, [Window, STRING],
            """int fl_defpup(Window win, const char * str):
            """)
    ulwin = convert_to_Window(win)
    spupstr = convert_to_string(pupstr)
    keep_elem_refs(win, pupstr, ulwin, spupstr)
    retval = _fl_defpup(ulwin, spupstr)
    return retval


def fl_addtopup(popupid, pupstr):
    """
        fl_addtopup(popupid, pupstr) -> num.
    """

    _fl_addtopup = cfuncproto(
            load_so_libforms(), "fl_addtopup",
            cty.c_int, [cty.c_int, STRING],
            """int fl_addtopup(int n, const char * str)
            """)
    ipopupid = convert_to_int(popupid)
    spupstr = convert_to_string(pupstr)
    keep_elem_refs(popupid, pupstr, ipopupid, spupstr)
    retval = _fl_addtopup(ipopupid, spupstr)
    return retval


def fl_setpup_mode(popupid, itemval, mode):
    """
        fl_setpup_mode(popupid, itemval, mode) -> num.
    """

    _fl_setpup_mode = cfuncproto(
            load_so_libforms(), "fl_setpup_mode",
            cty.c_int, [cty.c_int, cty.c_int, cty.c_uint],
            """int fl_setpup_mode(int nm, int ni, unsigned int mode)
            """)
    ipopupid = convert_to_int(popupid)
    iitemval = convert_to_int(itemval)
    uimode = convert_to_uint(mode)
    keep_elem_refs(popupid, itemval, mode, ipopupid, iitemval, uimode)
    retval = _fl_setpup_mode(ipopupid, iitemval, uimode)
    return retval


def fl_freepup(popupid):
    """
        fl_freepup(popupid)
    """

    _fl_freepup = cfuncproto(
            load_so_libforms(), "fl_freepup",
            None, [cty.c_int],
            """void fl_freepup(int n)
            """)
    ipopupid = convert_to_int(popupid)
    keep_elem_refs(popupid, ipopupid)
    _fl_freepup(ipopupid)


def fl_dopup(popupid):
    """
        fl_dopup(popupid) -> num.
    """

    _fl_dopup = cfuncproto(
            load_so_libforms(), "fl_dopup",
            cty.c_int, [cty.c_int],
            """int fl_dopup(int n)
            """)
    ipopupid = convert_to_int(popupid)
    keep_elem_refs(popupid, ipopupid)
    retval = _fl_dopup(ipopupid)
    return retval


def fl_setpup_default_cursor(cursor):
    """
        fl_setpup_default_cursor(cursor) -> cursor
    """

    _fl_setpup_default_cursor = cfuncproto(
            load_so_libforms(), "fl_setpup_default_cursor",
            Cursor, [cty.c_int],
            """Cursor fl_setpup_default_cursor(int cursor):
            """)
    icursor = convert_to_int(cursor)
    keep_elem_refs(cursor, icursor)
    retval = _fl_setpup_default_cursor(icursor)
    return retval


def fl_setpup_default_color(fgcolr, bgcolr):
    """
        fl_setpup_default_color(fgcolr, bgcolr)
    """

    _fl_setpup_default_color = cfuncproto(
            load_so_libforms(), "fl_setpup_default_color",
            None, [FL_COLOR, FL_COLOR],
            """void fl_setpup_default_color(FL_COLOR fg, FL_COLOR bg)
            """)
    ulfgcolr = convert_to_FL_COLOR(fgcolr)
    ulbgcolr = convert_to_FL_COLOR(bgcolr)
    keep_elem_refs(fgcolr, bgcolr, ulfgcolr, ulbgcolr)
    _fl_setpup_default_color(ulfgcolr, ulbgcolr)


def fl_setpup_default_pup_checked_color(colr):
    """
        fl_setpup_default_pup_checked_color(colr):
    """

    _fl_setpup_default_pup_checked_color = cfuncproto(
            load_so_libforms(), "fl_setpup_default_pup_checked_color",
            None, [FL_COLOR],
            """void fl_setpup_default_pup_checked_color(FL_COLOR col)
            """)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(colr, ulcolr)
    _fl_setpup_default_pup_checked_color(ulcolr)


def fl_setpup_default_fontsize(size):
    """
        fl_setpup_default_fontsize(size) -> num.
    """

    _fl_setpup_default_fontsize = cfuncproto(
            load_so_libforms(), "fl_setpup_default_fontsize",
            cty.c_int, [cty.c_int],
            """int fl_setpup_default_fontsize(int size)    DEPRECATED?
            """)
    isize = convert_to_int(size)
    keep_elem_refs(size, isize)
    retval = _fl_setpup_default_fontsize(isize)
    return retval


def fl_setpup_default_fontstyle(style):
    """
        fl_setpup_default_fontstyle(style) -> num.
    """

    _fl_setpup_default_fontstyle = cfuncproto(
            load_so_libforms(), "fl_setpup_default_fontstyle",
            cty.c_int, [cty.c_int],
            """int fl_setpup_default_fontstyle(int style)
            """)
    istyle = convert_to_int(style)
    keep_elem_refs(style, istyle)
    retval = _fl_setpup_default_fontstyle(istyle)
    return retval


fl_setpup_fontsize = fl_setpup_default_fontsize
fl_setpup_fontstyle = fl_setpup_default_fontstyle
fl_setpup_color = fl_setpup_default_color
fl_setpup_default_checkcolor = fl_setpup_default_pup_checked_color
fl_setpup_checkcolor = fl_setpup_default_pup_checked_color


def fl_setpup_default_bw(bw):
    """
        fl_setpup_default_bw(bw) -> num.
    """

    _fl_setpup_default_bw = cfuncproto(
            load_so_libforms(), "fl_setpup_default_bw",
            cty.c_int, [cty.c_int],
            """int fl_setpup_default_bw(int bw):
            """)
    ibw = convert_to_int(bw)
    keep_elem_refs(bw, ibw)
    retval = _fl_setpup_default_bw(ibw)
    return retval


def fl_setpup_shortcut(popupid, itemval, hotkeystxt):
    """
        fl_setpup_shortcut(popupid, itemval, hotkeystxt)
    """

    _fl_setpup_shortcut = cfuncproto(
            load_so_libforms(), "fl_setpup_shortcut",
            None, [cty.c_int, cty.c_int, STRING],
            """void fl_setpup_shortcut(int nm, int ni, const char * sc)
            """)
    ipopupid = convert_to_int(popupid)
    iitemval = convert_to_int(itemval)
    shotkeystxt = convert_to_string(hotkeystxt)
    keep_elem_refs(popupid, itemval, hotkeystxt, ipopupid, iitemval, \
                   shotkeystxt)
    _fl_setpup_shortcut(ipopupid, iitemval, shotkeystxt)


def fl_setpup_position(x, y):
    """
        fl_setpup_position(x, y)
    """

    _fl_setpup_position = cfuncproto(
            load_so_libforms(), "fl_setpup_position",
            None, [cty.c_int, cty.c_int],
            """void fl_setpup_position(int x, int y)
            """)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    keep_elem_refs(x, y, ix, iy)
    _fl_setpup_position(ix, iy)


def fl_setpup_selection(popupid, itemval):
    """
        fl_setpup_selection(popupid, itemval)
    """

    _fl_setpup_selection = cfuncproto(
            load_so_libforms(), "fl_setpup_selection",
            None, [cty.c_int, cty.c_int],
            """void fl_setpup_selection(int nm, int ni)
            """)
    ipopupid = convert_to_int(popupid)
    iitemval = convert_to_int(itemval)
    keep_elem_refs(popupid, itemval, ipopupid, iitemval)
    _fl_setpup_selection(ipopupid, iitemval)


def fl_setpup_shadow(popupid, flag):
    """
        fl_setpup_shadow(popupid, flag)
    """

    _fl_setpup_shadow = cfuncproto(
            load_so_libforms(), "fl_setpup_shadow",
            None, [cty.c_int, cty.c_int],
            """void fl_setpup_shadow(int n, int y)
            """)
    ipopupid = convert_to_int(popupid)
    iflag = convert_to_int(flag)
    keep_elem_refs(popupid, flag, ipopupid, iflag)
    _fl_setpup_shadow(ipopupid, iflag)


def fl_setpup_softedge(popupid, flag):
    """
        fl_setpup_softedge(popupid, flag)
    """

    _fl_setpup_softedge = cfuncproto(
            load_so_libforms(), "fl_setpup_softedge",
            None, [cty.c_int, cty.c_int],
            """void fl_setpup_softedge(int n, int y)
            """)
    ipopupid = convert_to_int(popupid)
    iflag = convert_to_int(flag)
    keep_elem_refs(popupid, flag, ipopupid, iflag)
    _fl_setpup_softedge(ipopupid, iflag)


def fl_setpup_bw(popupid, bw):
    """
        fl_setpup_bw(popupid, bw)
    """

    _fl_setpup_bw = cfuncproto(
            load_so_libforms(), "fl_setpup_bw",
            None, [cty.c_int, cty.c_int],
            """void fl_setpup_bw(int n, int bw)
            """)
    ipopupid = convert_to_int(popupid)
    ibw = convert_to_int(bw)
    keep_elem_refs(popupid, bw, ipopupid, ibw)
    _fl_setpup_bw(ipopupid, ibw)


def fl_setpup_title(popupid, title):
    """
        fl_setpup_title(popupid, title)
    """

    _fl_setpup_title = cfuncproto(
            load_so_libforms(), "fl_setpup_title",
            None, [cty.c_int, STRING],
            """void fl_setpup_title(int nm, const char * title)
            """)
    ipopupid = convert_to_int(popupid)
    stitle = convert_to_string(title)
    keep_elem_refs(popupid, title, ipopupid, stitle)
    _fl_setpup_title(ipopupid, stitle)


FL_PUP_ENTERCB = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)

def fl_setpup_entercb(popupid, py_PupEnterCb, data):
    """
        fl_setpup_entercb(popupid, py_PupEnterCb, data) -> pup_entercb
    """

    _fl_setpup_entercb = cfuncproto(
            load_so_libforms(), "fl_setpup_entercb",
            FL_PUP_ENTERCB, [cty.c_int, FL_PUP_ENTERCB, cty.c_void_p],
            """FL_PUP_ENTERCB fl_setpup_entercb(int nm, FL_PUP_ENTERCB cb,
               void * data)
            """)
    ipopupid = convert_to_int(popupid)
    c_PupEnterCb = FL_PUP_ENTERCB(py_PupEnterCb)
    pdata = cty.cast(data, cty.c_void_p)
    keep_cfunc_refs(c_PupEnterCb, py_PupEnterCb)
    keep_elem_refs(popupid, data, ipopupid, pdata)
    retval = _fl_setpup_entercb(ipopupid, c_PupEnterCb, pdata)
    return retval


FL_PUP_LEAVECB = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)

def fl_setpup_leavecb(popupid, py_LeaveCb, data):
    """
        fl_setpup_leavecb(popupid, py_LeaveCb, data) -> pup_leavecb
    """

    _fl_setpup_leavecb = cfuncproto(
            load_so_libforms(), "fl_setpup_leavecb",
            FL_PUP_LEAVECB, [cty.c_int, FL_PUP_LEAVECB, cty.c_void_p],
            """FL_PUP_LEAVECB fl_setpup_leavecb(int nm, FL_PUP_LEAVECB cb,
               void * data)
            """)
    ipopupid = convert_to_int(popupid)
    c_LeaveCb = FL_PUP_LEAVECB(py_LeaveCb)
    pdata = cty.cast(data, cty.c_void_p)
    keep_cfunc_refs(c_LeaveCb, py_LeaveCb)
    keep_elem_refs(popupid, data, ipopupid, pdata)
    retval = _fl_setpup_leavecb(ipopupid, c_LeaveCb, pdata)
    return retval


def fl_setpup_pad(popupid, padw, padh):
    """
        fl_setpup_pad(popupid, padw, padh)
    """

    _fl_setpup_pad = cfuncproto(
            load_so_libforms(), "fl_setpup_pad",
            None, [cty.c_int, cty.c_int, cty.c_int],
            """void fl_setpup_pad(int n, int padw, int padh)
            """)
    ipopupid = convert_to_int(popupid)
    ipadw = convert_to_int(padw)
    ipadh = convert_to_int(padh)
    keep_elem_refs(popupid, padw, padh, ipopupid, ipadw, ipadh)
    _fl_setpup_pad(ipopupid, ipadw, ipadh)


def fl_setpup_cursor(popupid, cursor):
    """
        fl_setpup_cursor(popupid, cursor) -> cursor
    """

    _fl_setpup_cursor = cfuncproto(
            load_so_libforms(), "fl_setpup_cursor",
            Cursor, [cty.c_int, cty.c_int],
            """Cursor fl_setpup_cursor(int nm, int cursor)
            """)
    ipopupid = convert_to_int(popupid)
    icursor = convert_to_int(cursor)
    keep_elem_refs(popupid, cursor, ipopupid, icursor)
    retval = _fl_setpup_cursor(ipopupid, icursor)
    return retval


def fl_setpup_maxpup(newmaxnum):
    """
        fl_setpup_maxpup(newmaxnum) -> num.
    """

    _fl_setpup_maxpup = cfuncproto(
            load_so_libforms(), "fl_setpup_maxpup",
            cty.c_int, [cty.c_int],
            """int fl_setpup_maxpup(int n)
            """)
    inewmaxnum = convert_to_int(newmaxnum)
    keep_elem_refs(newmaxnum, inewmaxnum)
    retval = _fl_setpup_maxpup(inewmaxnum)
    return retval


def fl_getpup_mode(popupid, itemval):
    """
        fl_getpup_mode(popupid, itemval) -> num.
    """

    _fl_getpup_mode = cfuncproto(
            load_so_libforms(), "fl_getpup_mode",
            cty.c_uint, [cty.c_int, cty.c_int],
            """unsigned int fl_getpup_mode(int nm, int ni)
            """)
    ipopupid = convert_to_int(popupid)
    iitemval = convert_to_int(itemval)
    keep_elem_refs(popupid, itemval, ipopupid, iitemval)
    retval = _fl_getpup_mode(ipopupid, iitemval)
    return retval


def fl_getpup_text(popupid, itemval):
    """
        fl_getpup_text(popupid, itemval) -> text string
    """

    _fl_getpup_text = cfuncproto(
            load_so_libforms(), "fl_getpup_text",
            STRING, [cty.c_int, cty.c_int],
            """const char * fl_getpup_text(int nm, int ni)
            """)
    ipopupid = convert_to_int(popupid)
    iitemval = convert_to_int(itemval)
    keep_elem_refs(popupid, itemval, ipopupid, iitemval)
    retval = _fl_getpup_text(ipopupid, iitemval)
    return retval


def fl_showpup(popupid):
    """
        fl_showpup(popupid)
    """

    _fl_showpup = cfuncproto(
            load_so_libforms(), "fl_showpup",
            None, [cty.c_int],
            """void fl_showpup(int n)
            """)
    ipopupid = convert_to_int(popupid)
    keep_elem_refs(popupid, ipopupid)
    _fl_showpup(ipopupid)


def fl_hidepup(popupid):
    """
        fl_hidepup(popupid)
    """

    _fl_hidepup = cfuncproto(
            load_so_libforms(), "fl_hidepup",
            None, [cty.c_int],
            """void fl_hidepup(int n)
            """)
    ipopupid = convert_to_int(popupid)
    keep_elem_refs(popupid, ipopupid)
    _fl_hidepup(ipopupid)


def fl_getpup_items(popupid):
    """
        fl_getpup_items(popupid) -> num.
    """

    _fl_getpup_items = cfuncproto(
            load_so_libforms(), "fl_getpup_items",
            cty.c_int, [cty.c_int],
            """int fl_getpup_items(int n)
            """)
    ipopupid = convert_to_int(popupid)
    keep_elem_refs(popupid, ipopupid)
    retval = _fl_getpup_items(ipopupid)
    return retval


def fl_current_pup():
    """
        fl_current_pup() -> num.
    """

    _fl_current_pup = cfuncproto(
            load_so_libforms(), "fl_current_pup",
            cty.c_int, [],
            """int fl_current_pup()
            """)
    retval = _fl_current_pup()
    return retval


def fl_setpup_itemcb(popupid, itemval, py_PupCb):
    """
        fl_setpup_itemcb(popupid, itemval, py_PupCb) -> pup_cb
    """

    _fl_setpup_itemcb = cfuncproto(
            load_so_libforms(), "fl_setpup_itemcb",
            FL_PUP_CB, [cty.c_int, cty.c_int, FL_PUP_CB],
            """FL_PUP_CB fl_setpup_itemcb(int nm, int ni, FL_PUP_CB cb)
            """)
    ipopupid = convert_to_int(popupid)
    iitemval = convert_to_int(itemval)
    c_PupCb = FL_PUP_CB(py_PupCb)
    keep_cfunc_refs(c_PupCb, py_PupCb)
    keep_elem_refs(popupid, itemval, ipopupid, iitemval)
    retval = _fl_setpup_itemcb(ipopupid, iitemval, c_PupCb)
    return retval


def fl_setpup_menucb(popupid, py_PupCb):
    """ fl_setpup_menucb(popupid, py_PupCb) -> pup_cb func.
    """

    _fl_setpup_menucb = cfuncproto(
            load_so_libforms(), "fl_setpup_menucb",
            FL_PUP_CB, [cty.c_int, FL_PUP_CB],
            """FL_PUP_CB fl_setpup_menucb(int nm, FL_PUP_CB cb)
            """)
    ipopupid = convert_to_int(popupid)
    c_PupCb = FL_PUP_CB(py_PupCb)
    keep_cfunc_refs(c_PupCb, py_PupCb)
    keep_elem_refs(popupid, ipopupid)
    retval = _fl_setpup_menucb(ipopupid, c_PupCb)
    return retval


def fl_setpup_submenu(popupid, itemval, subpopupid):
    """
        fl_setpup_submenu(popupid, itemval, subpopupid)
    """

    _fl_setpup_submenu = cfuncproto(
            load_so_libforms(), "fl_setpup_submenu",
            None, [cty.c_int, cty.c_int, cty.c_int],
            """void fl_setpup_submenu(int m, int i, int subm)
            """)
    ipopupid = convert_to_int(popupid)
    iitemval = convert_to_int(itemval)
    isubpopupid = convert_to_int(subpopupid)
    keep_elem_refs(popupid, itemval, subpopupid, ipopupid, iitemval, \
                   isubpopupid)
    _fl_setpup_submenu(ipopupid, iitemval, isubpopupid)


fl_setpup = fl_setpup_mode


# Others

def fl_create_xyplot(plottype, x, y, w, h, label):
    """
        fl_create_xyplot(plottype, x, y, w, h, label) -> pObject
    """

    _fl_create_xyplot = cfuncproto(
            load_so_libforms(), "fl_create_xyplot",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_create_xyplot(int t, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(plottype, XYPLOTTYPE_list)
    iplottype = convert_to_int(plottype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(plottype, x, y, w, h, label, iplottype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_create_xyplot(iplottype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_xyplot(plottype, x, y, w, h, label):
    """
        fl_add_xyplot(plottype, x, y, w, h, label) -> pObject
    """

    _fl_add_xyplot = cfuncproto(
            load_so_libforms(), "fl_add_xyplot",
            cty.POINTER(FL_OBJECT), [cty.c_int, FL_Coord, FL_Coord, FL_Coord,
            FL_Coord, STRING],
            """FL_OBJECT * fl_add_xyplot(int t, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(plottype, XYPLOTTYPE_list)
    iplottype = convert_to_int(plottype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(plottype, x, y, w, h, label, iplottype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_xyplot(iplottype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_xyplot_data(pObject, xlist, ylist, n, title, xlabel, ylabel):
    """ fl_set_xyplot_data(pObject, xlist, ylist, n, title, xlabel, ylabel)

    @param pObject : pointer to object
    """

    _fl_set_xyplot_data = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_data",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float), cty.c_int, STRING, STRING, STRING],
            """void fl_set_xyplot_data(FL_OBJECT * ob, float * x, float * y,
               int n, const char * title, const char * xlabel,
               const char * ylabel)
            """)
    #px = cty.cast(x, cty.POINTER(cty.c_float))
    print xlist, xlist[0]
    fx = []
    for a in range(xlist):
        fx[a] = convert_to_float(xlist[a])
    px = cty.pointer(fx)
    print "x, fx, px", xlist, fx, px
    #py = cty.cast(y, cty.POINTER(cty.c_float))
    fy = []
    for a in range(ylist):
        fy[a] = convert_to_float(ylist[a])
    py = cty.pointer(fy)
    print "y, fy, py", ylist, fy, py
    inum = convert_to_int(n)
    stitle = convert_to_string(title)
    sxlabel = convert_to_string(xlabel)
    sylabel = convert_to_string(ylabel)
    keep_elem_refs(pObject, xlist, ylist, n, fx, fy, px, py, title, \
                   xlabel, ylabel, inum, stitle, sxlabel, sylabel)
    _fl_set_xyplot_data(pObject, px, py, inum, stitle, sxlabel, sylabel)


def fl_set_xyplot_data_double(pObject, x, y, n, title, xlabel, ylabel):
    """ fl_set_xyplot_data_double(pObject, x, y, n, title, xlabel, ylabel)

    @param pObject : pointer to object
    """

    _fl_set_xyplot_data_double = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_data_double",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double), cty.c_int, STRING, STRING, STRING],
            """void fl_set_xyplot_data_double(FL_OBJECT * ob, double * x,
               double * y, int n, const char * title, const char * xlabel,
               const char * ylabel)
            """)
    px = cty.cast(x, cty.POINTER(cty.c_double))
    py = cty.cast(y, cty.POINTER(cty.c_double))
    inum = convert_to_int(n)
    stitle = convert_to_string(title)
    sxlabel = convert_to_string(xlabel)
    sylabel = convert_to_string(ylabel)
    keep_elem_refs(pObject, x, y, n, title, xlabel, ylabel, px, py, inum, \
                   stitle, sxlabel, sylabel)
    _fl_set_xyplot_data_double(pObject, px, py, n, title, \
                                        xlabel, ylabel, inum, stitle, \
                                        sxlabel, sylabel)


def fl_set_xyplot_file(pObject, f, title, xl, yl):
    """ fl_set_xyplot_file(pObject, f, title, xl, yl) -> num.

    @param pObject : pointer to object
    """

    _fl_set_xyplot_file = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_file",
            cty.c_int, [cty.POINTER(FL_OBJECT), STRING, STRING, STRING,
            STRING],
            """int fl_set_xyplot_file(FL_OBJECT * ob, const char * f,
               const char * title, const char * xl, const char * yl)
            """)
    sf = convert_to_string(f)
    stitle = convert_to_string(title)
    sxl = convert_to_string(xl)
    syl = convert_to_string(yl)
    keep_elem_refs(pObject, f, title, xl, yl, sf, stitle, sxl, syl)
    retval = _fl_set_xyplot_file(pObject, sf, stitle, sxl, syl)
    return retval


def fl_insert_xyplot_data(pObject, idnum, n, valx, valy):
    """ fl_insert_xyplot_data(pObject, idnum, n, valx, valy)

    @param pObject : pointer to object
    """

    _fl_insert_xyplot_data = cfuncproto(
            load_so_libforms(), "fl_insert_xyplot_data",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int, cty.c_double,
            cty.c_double],
            """void fl_insert_xyplot_data(FL_OBJECT * ob, int id, int n,
               double x, double y)
            """)
    iidnum = convert_to_int(idnum)
    inum = convert_to_int(n)
    fvalx = convert_to_double(valx)
    fvaly = convert_to_double(valy)
    keep_elem_refs(pObject, idnum, n, valx, valy, iidnum, inum, fvalx, fvaly)
    _fl_insert_xyplot_data(pObject, iidnum, inum, fvalx, fvaly)


def fl_add_xyplot_text(pObject, valx, valy, text, al, colr):
    """ fl_add_xyplot_text(pObject, valx, valy, text, al, colr)

    @param pObject : pointer to object
    """

    _fl_add_xyplot_text = cfuncproto(
            load_so_libforms(), "fl_add_xyplot_text",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double, STRING,
            cty.c_int, FL_COLOR],
            """void fl_add_xyplot_text(FL_OBJECT * ob, double x, double y,
               const char * text, int al, FL_COLOR col)
            """)
    fvalx = convert_to_double(valx)
    fvaly = convert_to_double(valy)
    stext = convert_to_string(text)
    ial = convert_to_int(al)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, valx, valy, text, al, colr, fvalx, fvaly, \
                   stext, ial, ulcolr)
    _fl_add_xyplot_text(pObject, fvalx, fvaly, stext, ial, ulcolr)


def fl_delete_xyplot_text(pObject, text):
    """ fl_delete_xyplot_text(pObject, text)

    @param pObject : pointer to object
    """

    _fl_delete_xyplot_text = cfuncproto(
            load_so_libforms(), "fl_delete_xyplot_text",
            None, [cty.POINTER(FL_OBJECT), STRING],
            """void fl_delete_xyplot_text(FL_OBJECT * ob, const char * text)
            """)
    stext = convert_to_string(text)
    keep_elem_refs(pObject, text, stext)
    _fl_delete_xyplot_text(pObject, stext)


def fl_set_xyplot_maxoverlays(pObject, maxover):
    """ fl_set_xyplot_maxoverlays(pObject, maxover) -> num.

    @param pObject : pointer to object
    """

    _fl_set_xyplot_maxoverlays = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_maxoverlays",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_set_xyplot_maxoverlays(FL_OBJECT * ob, int maxover)
            """)
    imaxover = convert_to_int(maxover)
    keep_elem_refs(pObject, maxover, imaxover)
    retval = _fl_set_xyplot_maxoverlays(pObject, imaxover)
    return retval


def fl_add_xyplot_overlay(pObject, idnum, x, y, n, colr):
    """ fl_add_xyplot_overlay(pObject, idnum, x, y, n, colr)

    @param pObject : pointer to object
    """

    _fl_add_xyplot_overlay = cfuncproto(
            load_so_libforms(), "fl_add_xyplot_overlay",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float), cty.c_int, FL_COLOR],
            """void fl_add_xyplot_overlay(FL_OBJECT * ob, int id, float * x,
               float * y, int n, FL_COLOR col)
            """)
    iidnum = convert_to_int(idnum)
    px = cty.cast(x, cty.POINTER(cty.c_float))
    py = cty.cast(y, cty.POINTER(cty.c_float))
    inum = convert_to_int(n)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, idnum, x, y, n, colr, iidnum, px, py, inum, \
                   ulcolr)
    _fl_add_xyplot_overlay(pObject, iidnum, px, py, inum, ulcolr)


def fl_add_xyplot_overlay_file(pObject, idnum, f, colr):
    """ fl_add_xyplot_overlay_file(pObject, idnum, f, colr) -> num.

    @param pObject : pointer to object
    """

    _fl_add_xyplot_overlay_file = cfuncproto(
            load_so_libforms(), "fl_add_xyplot_overlay_file",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int, STRING, FL_COLOR],
            """int fl_add_xyplot_overlay_file(FL_OBJECT * ob, int id,
            const char * f, FL_COLOR c)
            """)
    iidnum = convert_to_int(idnum)
    sf = convert_to_string(f)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, idnum, f, colr, iidnum, sf, ulcolr)
    retval = _fl_add_xyplot_overlay_file(pObject, iidnum, sf, ulcolr)
    return retval


def fl_set_xyplot_return(pObject, when):
    """ fl_set_xyplot_return(pObject, when)

    @param pObject : pointer to object
    """

    _fl_set_xyplot_return = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_return",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_xyplot_return(FL_OBJECT * ob, int when)
            """)
    iwhen = convert_to_int(when)
    keep_elem_refs(pObject, when, iwhen)
    _fl_set_xyplot_return(pObject, iwhen)


def fl_set_xyplot_xtics(pObject, major, minor):
    """ fl_set_xyplot_xtics(pObject, major, minor)

    @param pObject : pointer to object
    """

    _fl_set_xyplot_xtics = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_xtics",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_xyplot_xtics(FL_OBJECT * ob, int major, int minor)
            """)
    imajor = convert_to_int(major)
    iminor = convert_to_int(minor)
    keep_elem_refs(pObject, major, minor, imajor, iminor)
    _fl_set_xyplot_xtics(pObject, imajor, iminor)


def fl_set_xyplot_ytics(pObject, major, minor):
    """ fl_set_xyplot_ytics(pObject, major, minor)

    @param pObject : pointer to object
    """

    _fl_set_xyplot_ytics = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_ytics",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_xyplot_ytics(FL_OBJECT * ob, int major, int minor)
            """)
    imajor = convert_to_int(major)
    iminor = convert_to_int(minor)
    keep_elem_refs(pObject, major, minor, imajor, iminor)
    _fl_set_xyplot_ytics(pObject, imajor, iminor)


def fl_set_xyplot_xbounds(pObject, minbound, maxbound):
    """ fl_set_xyplot_xbounds(pObject, minbound, maxbound)

    @param pObject : pointer to object
    """

    _fl_set_xyplot_xbounds = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_xbounds",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_xyplot_xbounds(FL_OBJECT * ob, double xmin,
               double xmax)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_xyplot_xbounds(pObject, fminbound, fmaxbound)


def fl_set_xyplot_ybounds(pObject, minbound, maxbound):
    """ fl_set_xyplot_ybounds(pObject, minbound, maxbound)

    @param pObject : pointer to object
    """

    _fl_set_xyplot_ybounds = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_ybounds",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_xyplot_ybounds(FL_OBJECT * ob, double ymin,
               double ymax)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_xyplot_ybounds(pObject, fminbound, fmaxbound)


#def fl_get_xyplot_xbounds(pObject, minbound, maxbound)
def fl_get_xyplot_xbounds(pObject):
    """ fl_get_xyplot_xbounds(pObject) -> minbound, maxbound

    @param pObject : pointer to object
    """

    _fl_get_xyplot_xbounds = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_xbounds",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float)],
            """void fl_get_xyplot_xbounds(FL_OBJECT * ob, float * xmin,
               float * xmax)
            """)
    minbound, pminbound = make_float_and_pointer()
    maxbound, pmaxbound = make_float_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_xyplot_xbounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


#def fl_get_xyplot_ybounds(pObject, minbound, maxbound)
def fl_get_xyplot_ybounds(pObject):
    """ fl_get_xyplot_ybounds(pObject) -> minbound, maxbound

    @param pObject : pointer to object
    """

    _fl_get_xyplot_ybounds = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_ybounds",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float)],
            """void fl_get_xyplot_ybounds(FL_OBJECT * ob, float * ymin,
               float * ymax)
            """)
    minbound, pminbound = make_float_and_pointer()
    maxbound, pmaxbound = make_float_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_xyplot_ybounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


#def fl_get_xyplot(pObject, x, y, i)
def fl_get_xyplot(pObject):
    """
        fl_get_xyplot(pObject) -> x, y, i

        @param pObject : pointer to object
    """

    _fl_get_xyplot = cfuncproto(
            load_so_libforms(), "fl_get_xyplot",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
            """void fl_get_xyplot(FL_OBJECT * ob, float * x, float * y,
               int * i)
            """)
    x, px = make_float_and_pointer()
    y, py = make_float_and_pointer()
    i, pi = make_int_and_pointer()
    keep_elem_refs(pObject, x, y, i, px, py, pi)
    _fl_get_xyplot(pObject, px, py, pi)
    return x, y, i


#def fl_get_xyplot_data(pObject, x, y, n)
def fl_get_xyplot_data(pObject):
    """ fl_get_xyplot_data(pObject) -> x, y, n

    @param pObject : pointer to object
    """

    _fl_get_xyplot_data = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_data",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
            """void fl_get_xyplot_data(FL_OBJECT * ob, float * x, float * y,
               int * n)
            """)
    x, px = make_float_and_pointer()
    y, py = make_float_and_pointer()
    n, pn = make_int_and_pointer()
    keep_elem_refs(pObject, x, y, n, px, py, pn)
    _fl_get_xyplot_data(pObject, px, py, pn)
    return x, y, n


#def fl_get_xyplot_data_pointer(pObject, idnum, x, y, n)
def fl_get_xyplot_data_pointer(pObject, idnum):
    """ fl_get_xyplot_data_pointer(pObject, idnum) -> x, y, n

    @param pObject : pointer to object
    """

    _fl_get_xyplot_data_pointer = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_data_pointer",
            None, [cty.POINTER(FL_OBJECT), cty.c_int,
            cty.POINTER(cty.POINTER(cty.c_float)),
            cty.POINTER(cty.POINTER(cty.c_float)), cty.POINTER(cty.c_int)],
            """void fl_get_xyplot_data_cty.POINTER(FL_OBJECT * ob, int id,
               float * * x, float * * y, int * n)
            """)
    iidnum = convert_to_int(idnum)
    x, px = make_float_and_pointer()
    y, py = make_float_and_pointer()
    n, pn = make_int_and_pointer()
    keep_elem_refs(pObject, idnum, iidnum, x, y, n, px, py, pn)
    _fl_get_xyplot_data_pointer(pObject, iidnum, px, py, pn)
    return x, y, n


#def fl_get_xyplot_overlay_data(pObject, idnum, x, y, n)
def fl_get_xyplot_overlay_data(pObject, idnum):
    """ fl_get_xyplot_overlay_data(pObject, idnum) -> x, y, n

    @param pObject : pointer to object
    """

    _fl_get_xyplot_overlay_data = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_overlay_data",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
            """void fl_get_xyplot_overlay_data(FL_OBJECT * ob, int id,
               float * x, float * y, int * n)
            """)
    iidnum = convert_to_int(idnum)
    x, px = make_float_and_pointer()
    y, py = make_float_and_pointer()
    n, pn = make_int_and_pointer()
    keep_elem_refs(pObject, idnum, iidnum, x, y, n, px, py, pn)
    _fl_get_xyplot_overlay_data(pObject, iidnum, px, py, pn)
    return x, y, n


def fl_set_xyplot_overlay_type(pObject, idnum, plottype):
    """ fl_set_xyplot_overlay_type(pObject, idnum, plottype)

    @param pObject : pointer to object
    """

    _fl_set_xyplot_overlay_type = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_overlay_type",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_xyplot_overlay_type(FL_OBJECT * ob, int id,
               int type)
            """)
    iidnum = convert_to_int(idnum)
    iplottype = convert_to_int(plottype)
    keep_elem_refs(pObject, idnum, plottype, iidnum, iplottype)
    _fl_set_xyplot_overlay_type(pObject, iidnum, iplottype)


def fl_delete_xyplot_overlay(pObject, idnum):
    """ fl_delete_xyplot_overlay(pObject, idnum)

    @param pObject : pointer to object
    """

    _fl_delete_xyplot_overlay = cfuncproto(
            load_so_libforms(), "fl_delete_xyplot_overlay",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_delete_xyplot_overlay(FL_OBJECT * ob, int id)
            """)
    iidnum = convert_to_int(idnum)
    keep_elem_refs(pObject, idnum, iidnum)
    _fl_delete_xyplot_overlay(pObject, iidnum)


def fl_set_xyplot_interpolate(pObject, idnum, deg, grid):
    """
        fl_set_xyplot_interpolate(pObject, idnum, deg, grid)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_interpolate = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_interpolate",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int,
            cty.c_double],
            """void fl_set_xyplot_interpolate(FL_OBJECT * ob, int id,
               int deg, double grid)
            """)
    iidnum = convert_to_int(idnum)
    ideg = convert_to_int(deg)
    fgrid = convert_to_double(grid)
    keep_elem_refs(pObject, idnum, deg, grid, iidnum, ideg, fgrid)
    _fl_set_xyplot_interpolate(pObject, iidnum, ideg, fgrid)


def fl_set_xyplot_inspect(pObject, yes):
    """
        fl_set_xyplot_inspect(pObject, yes)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_inspect = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_inspect",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_xyplot_inspect(FL_OBJECT * ob, int yes)
            """)
    iyes = convert_to_int(yes)
    keep_elem_refs(pObject, yes, iyes)
    _fl_set_xyplot_inspect(pObject, iyes)


def fl_set_xyplot_symbolsize(pObject, n):
    """
        fl_set_xyplot_symbolsize(pObject, n)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_symbolsize = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_symbolsize",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_xyplot_symbolsize(FL_OBJECT * ob, int n)
            """)
    inum = convert_to_int(n)
    keep_elem_refs(pObject, n, inum)
    _fl_set_xyplot_symbolsize(pObject, inum)


def fl_replace_xyplot_point(pObject, i, valx, valy):
    """
        fl_replace_xyplot_point(pObject, i, valx, valy)

        @param pObject : pointer to object
    """

    _fl_replace_xyplot_point = cfuncproto(
            load_so_libforms(), "fl_replace_xyplot_point",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_double,
            cty.c_double],
            """void fl_replace_xyplot_point(FL_OBJECT * ob, int i,
               double x, double y)
            """)
    ii = convert_to_int(i)
    fvalx = convert_to_double(valx)
    fvaly = convert_to_double(valy)
    keep_elem_refs(pObject, i, valx, valy, ii, fvalx, fvaly)
    _fl_replace_xyplot_point(pObject, ii, fvalx, fvaly)


# Replace the value of a particular point in dataset setID,
# where setID=0 is the first data set.
# This routine is an extension of fl_replace_xyplot_point
# which acts on the first dataset only.

def fl_replace_xyplot_point_in_overlay(pObject, i, setID, valx, valy):
    """
        fl_replace_xyplot_point_in_overlay(pObject, i, setID, valx, valy)

        @param pObject : pointer to object
    """

    _fl_replace_xyplot_point_in_overlay = cfuncproto(
            load_so_libforms(), "fl_replace_xyplot_point_in_overlay",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int, \
            cty.c_double, cty.c_double],
            """void fl_replace_xyplot_point_in_overlay(FL_OBJECT * ob,
               int i, int setID, double x, double y)
            """)
    ii = convert_to_int(i)
    isetID = convert_to_int(setID)
    fvalx = convert_to_double(valx)
    fvaly = convert_to_double(valy)
    keep_elem_refs(pObject, i, setID, valx, valy, ii, isetID, fvalx, fvaly)
    _fl_replace_xyplot_point_in_overlay(pObject, ii, isetID, fvalx, fvaly)


#def fl_get_xyplot_xmapping(pObject, a, b):
def fl_get_xyplot_xmapping(pObject):
    """
        fl_get_xyplot_xmapping(pObject) -> a, b

        @param pObject : pointer to object
    """

    _fl_get_xyplot_xmapping = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_xmapping",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float)],
            """void fl_get_xyplot_xmapping(FL_OBJECT * ob, float * a,
               float * b)
            """)
    a, pa = make_float_and_pointer()
    b, pb = make_float_and_pointer()
    keep_elem_refs(pObject, a, b, pa, pb)
    _fl_get_xyplot_xmapping(pObject, pa, pb)
    return a, b


#def fl_get_xyplot_ymapping(pObject, a, b):
def fl_get_xyplot_ymapping(pObject):
    """
        fl_get_xyplot_ymapping(pObject) -> a, b

        @param pObject : pointer to object
    """

    _fl_get_xyplot_ymapping = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_ymapping",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float)],
            """void fl_get_xyplot_ymapping(FL_OBJECT * ob, float * a,
               float * b)
            """)
    a, pa = make_float_and_pointer()
    b, pb = make_float_and_pointer()
    keep_elem_refs(pObject, a, b, pa, pb)
    _fl_get_xyplot_ymapping(pObject, pa, pb)
    return a, b


def fl_set_xyplot_keys(pObject, keys, valx, valy, align):
    """
        fl_set_xyplot_keys(pObject, keys, valx, valy, align)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_keys = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_keys",
            None, [cty.POINTER(FL_OBJECT), cty.POINTER(STRING), cty.c_float,
            cty.c_float, cty.c_int],
            """void fl_set_xyplot_keys(FL_OBJECT * ob, char * * keys, float x,
               float y, int align)
            """)
    fvalx = convert_to_float(valx)
    fvaly = convert_to_float(valy)
    ialign = convert_to_int(align)
    keep_elem_refs(pObject, keys, valx, valy, align, fvalx, fvaly, ialign)
    _fl_set_xyplot_keys(pObject, keys, fvalx, fvaly, ialign)


def fl_set_xyplot_key(pObject, idnum, keytxt):
    """
        fl_set_xyplot_key(pObject, idnum, keytxt)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_key = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_key",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, STRING],
            """void fl_set_xyplot_key(FL_OBJECT * ob, int id,
               const char * key)
            """)
    iidnum = convert_to_int(idnum)
    skeytxt = convert_to_string(keytxt)
    keep_elem_refs(pObject, idnum, keytxt, iidnum, skeytxt)
    _fl_set_xyplot_key(pObject, iidnum, skeytxt)


def fl_set_xyplot_key_position(pObject, valx, valy, align):
    """
        fl_set_xyplot_key_position(pObject, valx, valy, align)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_key_position = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_key_position",
            None, [cty.POINTER(FL_OBJECT), cty.c_float, cty.c_float,
            cty.c_int],
            """void fl_set_xyplot_key_position(FL_OBJECT * ob, float x,
               float y, int align)
            """)
    fvalx = convert_to_float(valx)
    fvaly = convert_to_float(valy)
    ialign = convert_to_int(align)
    keep_elem_refs(pObject, valx, valy, align, fvalx, fvaly, ialign)
    _fl_set_xyplot_key_position(pObject, fvalx, fvaly, ialign)


def fl_set_xyplot_key_font(pObject, style, size):
    """
        fl_set_xyplot_key_font(pObject, style, size)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_key_font = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_key_font",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_xyplot_key_font(FL_OBJECT * ob, int style,
               int size)
            """)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    keep_elem_refs(pObject, style, size, istyle, isize)
    _fl_set_xyplot_key_font(pObject, istyle, isize)


def fl_get_xyplot_numdata(pObject, idnum):
    """
        fl_get_xyplot_numdata(pObject, idnum) -> num.

        @param pObject : pointer to object
    """

    _fl_get_xyplot_numdata = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_numdata",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_get_xyplot_numdata(FL_OBJECT * ob, int id)
            """)
    iidnum = convert_to_int(idnum)
    keep_elem_refs(pObject, idnum, iidnum)
    retval = _fl_get_xyplot_numdata(pObject, iidnum)
    return retval


# The following two functions will be removed.
# Use fl_set_object_l[size|style] for the functionalities

def fl_set_xyplot_fontsize(pObject, size):
    """
        fl_set_xyplot_fontsize(pObject, size)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_fontsize = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_fontsize",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_xyplot_fontsize(FL_OBJECT * ob, int size) DEPRECATED
            """)
    warn_deprecated_function("Use fl_set_lsize, instead.")
    isize = convert_to_int(size)
    keep_elem_refs(pObject, size, isize)
    _fl_set_xyplot_fontsize(pObject, isize)


def fl_set_xyplot_fontstyle(pObject, style):
    """
        fl_set_xyplot_fontstyle(pObject, style)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_fontstyle = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_fontstyle",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_xyplot_fontstyle(FL_OBJECT * ob, int style) DEPRECATED
            """)
    warn_deprecated_function("Use fl_set_lstyle, instead.")
    istyle = convert_to_int(style)
    keep_elem_refs(pObject, style, istyle)
    _fl_set_xyplot_fontstyle(pObject, istyle)


def fl_xyplot_s2w(pObject, sx, sy, wx, wy):
    """
        fl_xyplot_s2w(pObject, sx, sy, wx, wy)

        @param pObject : pointer to object
    """

    _fl_xyplot_s2w = cfuncproto(
            load_so_libforms(), "fl_xyplot_s2w",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double,
            cty.POINTER(cty.c_float), cty.POINTER(cty.c_float)],
            """void fl_xyplot_s2w(FL_OBJECT * ob, double sx, double sy,
               float * wx, float * wy)
            """)
    fsx = convert_to_double(sx)
    fsy = convert_to_double(sy)
    keep_elem_refs(pObject, sx, sy, wx, wy, fsx, fsy)
    _fl_xyplot_s2w(pObject, fsx, fsy, wx, wy)


def fl_xyplot_w2s(pObject, wx, wy, sx, sy):
    """
        fl_xyplot_w2s(pObject, wx, wy, sx, sy)

        @param pObject : pointer to object
    """

    _fl_xyplot_w2s = cfuncproto(
            load_so_libforms(), "fl_xyplot_w2s",
            None, [cty.POINTER(FL_OBJECT), cty.c_double, cty.c_double,
            cty.POINTER(cty.c_float), cty.POINTER(cty.c_float)],
            """void fl_xyplot_w2s(FL_OBJECT * ob, double wx, double wy,
               float * sx, float * sy)
            """)
    fwx = convert_to_double(wx)
    fwy = convert_to_double(wy)
    keep_elem_refs(pObject, wx, wy, sx, sy, fwx, fwy)
    _fl_xyplot_w2s(pObject, fwx, fwy, sx, sy)


def fl_set_xyplot_xscale(pObject, scale, base):
    """
        fl_set_xyplot_xscale(pObject, scale, base)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_xscale = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_xscale",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_double],
            """void fl_set_xyplot_xscale(FL_OBJECT * ob, int scale,
               double base)
            """)
    iscale = convert_to_int(scale)
    fbase = convert_to_double(base)
    keep_elem_refs(pObject, scale, base, iscale, fbase)
    _fl_set_xyplot_xscale(pObject, iscale, fbase)


def fl_set_xyplot_yscale(pObject, scale, base):
    """
        fl_set_xyplot_yscale(pObject, scale, base)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_yscale = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_yscale",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_double],
            """void fl_set_xyplot_yscale(FL_OBJECT * ob, int scale,
               double base)
            """)
    iscale = convert_to_int(scale)
    fbase = convert_to_double(base)
    keep_elem_refs(pObject, scale, base, iscale, fbase)
    _fl_set_xyplot_yscale(pObject, iscale, fbase)


def fl_clear_xyplot(pObject):
    """
        fl_clear_xyplot(pObject)

        @param pObject : pointer to object
    """

    _fl_clear_xyplot = cfuncproto(
            load_so_libforms(), "fl_clear_xyplot",
            None, [cty.POINTER(FL_OBJECT)],
            """void fl_clear_xyplot(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_clear_xyplot(pObject)


def fl_set_xyplot_linewidth(pObject, idnum, lw):
    """
        fl_set_xyplot_linewidth(pObject, idnum, lw)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_linewidth = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_linewidth",
            None, [cty.POINTER(FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_xyplot_linewidth(FL_OBJECT * ob, int id, int lw)
            """)
    iidnum = convert_to_int(idnum)
    ilw = convert_to_int(lw)
    keep_elem_refs(pObject, idnum, lw, iidnum, ilw)
    _fl_set_xyplot_linewidth(pObject, iidnum, ilw)


def fl_set_xyplot_xgrid(pObject, xgrid):
    """
        fl_set_xyplot_xgrid(pObject, xgrid)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_xgrid = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_xgrid",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_xyplot_xgrid(FL_OBJECT * ob, int xgrid)
            """)
    ixgrid = convert_to_int(xgrid)
    keep_elem_refs(pObject, xgrid, ixgrid)
    _fl_set_xyplot_xgrid(pObject, ixgrid)


def fl_set_xyplot_ygrid(pObject, ygrid):
    """
        fl_set_xyplot_ygrid(pObject, ygrid)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_ygrid = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_ygrid",
            None, [cty.POINTER(FL_OBJECT), cty.c_int],
            """void fl_set_xyplot_ygrid(FL_OBJECT * ob, int ygrid)
            """)
    iygrid = convert_to_int(ygrid)
    keep_elem_refs(pObject, ygrid, iygrid)
    _fl_set_xyplot_ygrid(pObject, iygrid)


def fl_set_xyplot_grid_linestyle(pObject, style):
    """
        fl_set_xyplot_grid_linestyle(pObject, style) -> num.

        @param pObject : pointer to object
    """

    _fl_set_xyplot_grid_linestyle = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_grid_linestyle",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_set_xyplot_grid_linestyle(FL_OBJECT * ob, int style)
            """)
    istyle = convert_to_int(style)
    keep_elem_refs(pObject, style, istyle)
    retval = _fl_set_xyplot_grid_linestyle(pObject, istyle)
    return retval


def fl_set_xyplot_alphaxtics(pObject, m, s):
    """
        fl_set_xyplot_alphaxtics(pObject, m, s)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_alphaxtics = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_alphaxtics",
            None, [cty.POINTER(FL_OBJECT), STRING, STRING],
            """void fl_set_xyplot_alphaxtics(FL_OBJECT * ob, const char * m,
               const char * s)
            """)
    sm = convert_to_string(m)
    ss = convert_to_string(s)
    keep_elem_refs(pObject, m, s, sm, ss)
    _fl_set_xyplot_alphaxtics(pObject, sm, ss)


def fl_set_xyplot_alphaytics(pObject, m, s):
    """
        fl_set_xyplot_alphaytics(pObject, m, s)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_alphaytics = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_alphaytics",
            None, [cty.POINTER(FL_OBJECT), STRING, STRING],
            """void fl_set_xyplot_alphaytics(FL_OBJECT * ob, const char * m,
               const char * s)
            """)
    sm = convert_to_string(m)
    ss = convert_to_string(s)
    keep_elem_refs(pObject, m, s, sm, ss)
    _fl_set_xyplot_alphaytics(pObject, sm, ss)


def fl_set_xyplot_fixed_xaxis(pObject, lm, rm):
    """
        fl_set_xyplot_fixed_xaxis(pObject, lm, rm)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_fixed_xaxis = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_fixed_xaxis",
            None, [cty.POINTER(FL_OBJECT), STRING, STRING],
            """void fl_set_xyplot_fixed_xaxis(FL_OBJECT * ob, const char * lm,
               const char * rm)
            """)
    slm = convert_to_string(lm)
    srm = convert_to_string(rm)
    keep_elem_refs(pObject, lm, rm, slm, srm)
    _fl_set_xyplot_fixed_xaxis(pObject, slm, srm)


def fl_set_xyplot_fixed_yaxis(pObject, bm, tm):
    """
        fl_set_xyplot_fixed_yaxis(pObject, bm, tm)

        @param pObject : pointer to object
    """

    _fl_set_xyplot_fixed_yaxis = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_fixed_yaxis",
            None, [cty.POINTER(FL_OBJECT), STRING, STRING],
            """void fl_set_xyplot_fixed_yaxis(FL_OBJECT * ob, const char * bm,
               const char * tm)
            """)
    sbm = convert_to_string(bm)
    stm = convert_to_string(tm)
    keep_elem_refs(pObject, bm, tm, sbm, stm)
    _fl_set_xyplot_fixed_yaxis(pObject, sbm, stm)


def fl_interpolate(wx, wy, nin, x, y, grid, ndeg):
    """ fl_interpolate(wx, wy, nin, x, y, grid, ndeg) -> num.
    """

    _fl_interpolate = cfuncproto(
            load_so_libforms(), "fl_interpolate",
            cty.c_int, [cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
            cty.c_int, cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
            cty.c_double, cty.c_int],
            """int fl_interpolate(const char * wx, const char * wy, int nin,
               float * x, float * y, double grid, int ndeg)
            """)
    inin = convert_to_int(nin)
    fgrid = convert_to_double(grid)
    indeg = convert_to_int(ndeg)
    keep_elem_refs(wx, wy, nin, x, y, grid, ndeg, inin, fgrid, indeg)
    retval = _fl_interpolate(wx, wy, inin, x, y, fgrid, indeg)
    return retval


def fl_spline_interpolate(wx, wy, nin, x, y, grid):
    """ fl_spline_interpolate(wx, wy, nin, x, y, grid) -> num.
    """

    _fl_spline_interpolate = cfuncproto(
            load_so_libforms(), "fl_spline_interpolate",
            cty.c_int, [cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
            cty.c_int, cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
            cty.c_double],
            """int fl_spline_interpolate(const char * wx, const char * wy,
               int nin, float * x, float * y, double grid)
            """)
    inin = convert_to_int(nin)
    fgrid = convert_to_double(grid)
    keep_elem_refs(wx, wy, nin, x, y, grid, inin, fgrid)
    retval = _fl_spline_interpolate(wx, wy, inin, x, y, fgrid)
    return retval


FL_XYPLOT_SYMBOL = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_int,
            cty.POINTER(FL_POINT), cty.c_int, cty.c_int, cty.c_int)

def fl_set_xyplot_symbol(pObject, idnum, py_XyPlotSymbol):
    """
        fl_set_xyplot_symbol(pObject, idnum, py_XyPlotSymbol) -> xyplot_symbol func.

        @param pObject : pointer to object
    """

    _fl_set_xyplot_symbol = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_symbol",
            FL_XYPLOT_SYMBOL, [cty.POINTER(FL_OBJECT), cty.c_int,
            FL_XYPLOT_SYMBOL],
            """FL_XYPLOT_SYMBOL fl_set_xyplot_symbol(FL_OBJECT * ob, int id,
               FL_XYPLOT_SYMBOL symbol)
            """)
    iidnum = convert_to_int(idnum)
    c_XyPlotSymbol = FL_XYPLOT_SYMBOL(py_XyPlotSymbol)
    keep_cfunc_refs(c_XyPlotSymbol, py_XyPlotSymbol)
    keep_elem_refs(pObject, idnum, iidnum)
    retval = _fl_set_xyplot_symbol(pObject, iidnum, c_XyPlotSymbol)
    return retval


def fl_set_xyplot_mark_active(pObject, y):
    """
        fl_set_xyplot_mark_active(pObject, y) -> num.

        @param pObject : pointer to object
    """

    _fl_set_xyplot_mark_active = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_mark_active",
            cty.c_int, [cty.POINTER(FL_OBJECT), cty.c_int],
            """int fl_set_xyplot_mark_active(FL_OBJECT * ob, int y)
            """)
    iy = convert_to_int(y)
    keep_elem_refs(pObject, y, iy)
    retval = _fl_set_xyplot_mark_active(pObject, iy)
    return retval


# the following (fl_fheight) etc. were never documented and were
# removed from V0.89, but apparently this broke some applications that
# were using them. Put them back in 10/22/00

def fl_gc_():
    """ fl_gc_() -> gc
    """

    _fl_gc_ = cfuncproto(
            load_so_libforms(), "fl_gc_",
            GC, [],
            """GC fl_gc_()
            """)
    retval = _fl_gc_()
    return retval


def fl_textgc_():
    """ fl_textgc_() -> gc
    """

    _fl_textgc_ = cfuncproto(
            load_so_libforms(), "fl_textgc_",
            GC, [],
            """)GC fl_textgc_()
            """)
    retval = _fl_textgc_()
    return retval


def fl_fheight_():
    """ fl_fheight_() -> num.
    """

    _fl_fheight_ = cfuncproto(
            load_so_libforms(), "fl_fheight_",
            cty.c_int, [],
            """int fl_fheight_()
            """)
    retval = _fl_fheight_()
    return retval


def fl_fdesc_():
    """ fl_fdesc_() -> num.
    """

    _fl_fdesc_ = cfuncproto(
            load_so_libforms(), "fl_fdesc_",
            cty.c_int, [],
            """int fl_fdesc_()
            """)
    retval = _fl_fdesc_()
    return retval


def fl_cur_win_():
    """ fl_cur_win_() -> window
    """

    _fl_cur_win_ = cfuncproto(
            load_so_libforms(), "fl_cur_win_",
            Window, [],
            """Window fl_cur_win_()
            """)
    retval = _fl_cur_win_()
    return retval


def fl_cur_fs_():
    """ fl_cur_fs_() -> XFontStruct class
    """

    _fl_cur_fs_ = cfuncproto(
            load_so_libforms(), "fl_cur_fs_",
            cty.POINTER(XFontStruct), [],
            """XFontStruct * fl_cur_fs_()
            """)
    retval = _fl_cur_fs_()
    return retval


# commented to prevent a SegmentationFault during installation --LK
#fl_textgc = fl_textgc_()
fl_textgc = fl_textgc_
#fl_gc = fl_gc_()
fl_gc = fl_gc_
#fl_cur_win = fl_cur_win_()
fl_cur_win = fl_cur_win_
#fl_fheight = fl_fheight_()
fl_fheight = fl_fheight_
#fl_fdesc = fl_fdesc_()
fl_fdesc = fl_fdesc_
#fl_cur_fs = fl_cur_fs_()
fl_cur_fs = fl_cur_fs_


def fl_display_():
    """ fl_display_() -> pDisplay
    """

    _fl_display_ = cfuncproto(
            load_so_libforms(), "fl_display_",
            cty.POINTER(Display), [],
            """Display * fl_display_()
            """)
    retval = _fl_display_()
    return retval



#########################
# flimage.h
# Image related routines
#########################

# low-level, maybe unused in python --LK
#def fl_safe_free(p):
#    if p:
#        fl_free(p)
#        p = None        # UNSURE

def FL_RGB2GRAY(r, g, b):
    return cty.c_uint((78 * (r) + 150 * (g) + 28 * (b)) >> 8)


# if PCBITS is not 8, we need to apply the RGBmask

def FL_GETR(packed):
    return (packed & FL_RMASK)

def FL_IsRGB(im):
    return (im.type == FL_IMAGE_RGB)

def FL_IsPacked(im):
    return (im.type == FL_IMAGE_PACKED)


def flimage_setup(pImageSetup):
    """ flimage_setup(setup)
    """

    _flimage_setup = cfuncproto(
            load_so_libflimage(), "flimage_setup",
            None, [cty.POINTER(FLIMAGE_SETUP)],
            """void flimage_setup(FLIMAGE_SETUP * setup)
            """)
    keep_elem_refs(pImageSetup)
    _flimage_setup(pImageSetup)


# basic IO routines

def flimage_load(filename):
    """ flimage_load(filename) -> pImage
    """

    _flimage_load = cfuncproto(
            load_so_libflimage(), "flimage_load",
            cty.POINTER(FL_IMAGE), [STRING],
            """FL_IMAGE * flimage_load(const char * file)
            """)
    sfilename = convert_to_string(filename)
    keep_elem_refs(filename, sfilename)
    retval = _flimage_load(sfilename)
    return retval


def flimage_read(pImage):
    """ flimage_read(pImage) -> pImage
    """

    _flimage_read = cfuncproto(
            load_so_libflimage(), "flimage_read",
            cty.POINTER(FL_IMAGE), [cty.POINTER(FL_IMAGE)],
            """FL_IMAGE * flimage_read(FL_IMAGE * im)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_read(pImage)
    return retval


def flimage_dump(pImage, p2, p3):
    """ flimage_dump(pImage, p2, p3) -> num.
    """

    _flimage_dump = cfuncproto(
            load_so_libflimage(), "flimage_dump",
            cty.c_int, [cty.POINTER(FL_IMAGE), STRING, STRING],
            """int flimage_dump(FL_IMAGE * p1, const char * p2,
               const char * p3)
            """)
    sp2 = convert_to_string(p2)
    sp3 = convert_to_string(p3)
    keep_elem_refs(pImage, p2, p3, sp2, sp3)
    retval = _flimage_dump(pImage, sp2, sp3)
    return retval


def flimage_close(pImage):
    """ flimage_close(pImage) -> num.
    """

    _flimage_close = cfuncproto(
            load_so_libflimage(), "flimage_close",
            cty.c_int, [cty.POINTER(FL_IMAGE)],
            """int flimage_close(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_close(pImage)
    return retval


def flimage_alloc():
    """ flimage_alloc() -> pImage
    """

    _flimage_alloc = cfuncproto(
            load_so_libflimage(), "flimage_alloc",
            cty.POINTER(FL_IMAGE), [],
            """FL_IMAGE * flimage_alloc()
            """)
    retval = _flimage_alloc()
    return retval


def flimage_getmem(pImage):
    """ flimage_getmem(pImage) -> num.
    """

    _flimage_getmem = cfuncproto(
            load_so_libflimage(), "flimage_getmem",
            cty.c_int, [cty.POINTER(FL_IMAGE)],
            """int flimage_getmem(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_getmem(pImage)
    return retval


def flimage_is_supported(p1):
    """ flimage_is_supported(p1) -> num.
    """

    _flimage_is_supported = cfuncproto(
            load_so_libflimage(), "flimage_is_supported",
            cty.c_int, [STRING],
            """int flimage_is_supported(const char * p1)
            """)
    sp1 = convert_to_string(p1)
    keep_elem_refs(p1, sp1)
    retval = _flimage_is_supported(sp1)
    return retval


def flimage_description_via_filter(pImage, p2, p3, p4):
    """ flimage_description_via_filter(pImage, p2, p3, p4) -> num.
    """

    _flimage_description_via_filter = cfuncproto(
            load_so_libflimage(), "flimage_description_via_filter",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.POINTER(STRING), STRING,
            cty.c_int],
            """int flimage_description_via_filter(FL_IMAGE * p1,
               const char * p2, const char * p3, int p4)
            """)
    sp3 = convert_to_string(p3)
    ip4 = convert_to_string(p4)
    keep_elem_refs(pImage, p2, p3, p4, sp3, ip4)
    retval = _flimage_description_via_filter(pImage, p2, sp3, ip4)
    return retval


def flimage_write_via_filter(pImage, p2, p3, p4):
    """ flimage_write_via_filter(pImage, p2, p3, p4) -> num.
    """

    _flimage_write_via_filter = cfuncproto(
            load_so_libflimage(), "flimage_write_via_filter",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.POINTER(STRING),
            cty.POINTER(STRING), cty.c_int],
            """int flimage_write_via_filter(FL_IMAGE * p1, const char * p2,
               const char * p3, int p4)
            """)
    ip4 = convert_to_int(p4)
    keep_elem_refs(pImage, p2, p3, p4, ip4)
    retval = _flimage_write_via_filter(pImage, p2, p3, ip4)
    return retval


def flimage_free(pImage):
    """ flimage_free(pImage) -> num.
    """

    _flimage_free = cfuncproto(
            load_so_libflimage(), "flimage_free",
            cty.c_int, [cty.POINTER(FL_IMAGE)],
            """int flimage_free(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_free(pImage)
    return retval


def flimage_display(pImage, win):
    """ flimage_display(pImage, win) -> num.
    """

    _flimage_display = cfuncproto(
            load_so_libflimage(), "flimage_display",
            cty.c_int, [cty.POINTER(FL_IMAGE), Window],
            """int flimage_display(FL_IMAGE * p1, Window p2)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(pImage, win, ulwin)
    retval = _flimage_display(pImage, ulwin)
    return retval


def flimage_sdisplay(pImage, win):
    """ flimage_sdisplay(pImage, win) -> num.
    """

    _flimage_sdisplay = cfuncproto(
            load_so_libflimage(), "flimage_sdisplay",
            cty.c_int, [cty.POINTER(FL_IMAGE), Window],
            """int flimage_sdisplay(FL_IMAGE * p1, Window p2)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(pImage, win, ulwin)
    retval = _flimage_sdisplay(pImage, ulwin)
    return retval


def flimage_convert(pImage, p2, p3):
    """ flimage_convert(pImage, p2, p3) -> num.
    """

    _flimage_convert = cfuncproto(
            load_so_libflimage(), "flimage_convert",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_int, cty.c_int],
            """int flimage_convert(FL_IMAGE * p1, int p2, int p3)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    keep_elem_refs(pImage, p2, p3, ip2, ip3)
    retval = _flimage_convert(pImage, ip2, ip3)
    return retval


def flimage_type_name(flimagetype):
    """ flimage_type_name(flimagetype) -> name string
    """

    _flimage_type_name = cfuncproto(
            load_so_libflimage(), "flimage_type_name",
            STRING, [cty.c_int],
            """const char * flimage_type_name(int type)
            """)
    iflimagetype = convert_to_int(flimagetype)
    keep_elem_refs(flimagetype, iflimagetype)
    retval = _flimage_type_name(iflimagetype)
    return retval


def flimage_add_text(pImage, text, p3, p4, p5, p6, p7, p8, p9, p10, p11):
    """ flimage_add_text(pImage, text, p3, p4, p5, p6, p7, p8, p9, p10, p11) -> num.
    """

    _flimage_add_text = cfuncproto(
            load_so_libflimage(), "flimage_add_text",
            cty.c_int, [cty.POINTER(FL_IMAGE), STRING, cty.c_int, cty.c_int,
            cty.c_int, cty.c_uint, cty.c_uint, cty.c_int, cty.c_double,
            cty.c_double, cty.c_int],
            """int flimage_add_text(FL_IMAGE * p1, const char * p2, int p3,
               int p4, int p5, unsigned int p6, unsigned int p7, int p8,
               double p9, double p10, int p11)
            """)
    stext = convert_to_string(text)
    ip3 = convert_to_int(p3)
    ip4 = convert_to_int(p4)
    ip5 = convert_to_int(p5)
    uip6 = convert_to_uint(p6)
    uip7 = convert_to_uint(p7)
    ip8 = convert_to_int(p8)
    fp9 = convert_to_double(p9)
    fp10 = convert_to_double(p10)
    ip11 = convert_to_int(p11)
    keep_elem_refs(pImage, text, p3, p4, p5, p6, p7, p8, p9, p10, p11,
                   stext, ip3, ip4, ip5, uip6, uip7, ip8, fp9, fp10, ip11)
    retval = _flimage_add_text(pImage, stext, ip3, ip4, ip5, uip6, uip7,
                               ip8, fp9, fp10, ip11)
    return retval


def flimage_add_text_struct(pImage, pImageText):
    """ flimage_add_text_struct(pImage, pImageText) -> num.
    """

    _flimage_add_text_struct = cfuncproto(
            load_so_libflimage(), "flimage_add_text_struct",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.POINTER(FLIMAGE_TEXT)],
            """int flimage_add_text_struct(FL_IMAGE * p1, const char * p2)
            """)
    keep_elem_refs(pImage, pImageText)
    retval = _flimage_add_text_struct(pImage, pImageText)
    return retval


def flimage_delete_all_text(pImage):
    """ flimage_delete_all_text(pImage)
    """

    _flimage_delete_all_text = cfuncproto(
            load_so_libflimage(), "flimage_delete_all_text",
            None, [cty.POINTER(FL_IMAGE)],
            """void flimage_delete_all_text(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_delete_all_text(pImage)


def flimage_add_marker(pImage, text, p3, p4, p5, p6, p7, p8, p9, p10, p11):
    """ flimage_add_marker(pImage, text, p3, p4, p5, p6, p7, p8, p9, p10, p11) -> num.
    """

    _flimage_add_marker = cfuncproto(
            load_so_libflimage(), "flimage_add_marker",
            cty.c_int, [cty.POINTER(FL_IMAGE), STRING, cty.c_double,
            cty.c_double, cty.c_double, cty.c_double, cty.c_int, cty.c_int,
            cty.c_int, cty.c_uint, cty.c_uint],
            """int flimage_add_marker(FL_IMAGE * p1, const char * p2,
               double p3, double p4, double p5, double p6, int p7,
               int p8, int p9, unsigned int p10, unsigned int p11)
            """)
    stext = convert_to_string(text)
    fp3 = convert_to_double(p3)
    fp4 = convert_to_double(p4)
    fp5 = convert_to_double(p5)
    fp6 = convert_to_double(p6)
    ip7 = convert_to_int(p7)
    ip8 = convert_to_int(p8)
    ip9 = convert_to_int(p9)
    uip10 = convert_to_uint(p10)
    uip11 = convert_to_uint(p11)
    keep_elem_refs(pImage, text, p3, p4, p5, p6, p7, p8, p9, p10, p11,
                   stext, fp3, fp4, fp5, fp6, ip7, ip8, ip9, uip10, uip11)
    retval = _flimage_add_marker(pImage, stext, fp3, fp4, fp5, fp6, ip7,
                                 ip8, ip9, uip10, uip11)
    return retval


def flimage_add_marker_struct(pImage, pImageMarker):
    """ flimage_add_marker_struct(pImage, pImageMarker) -> num.
    """

    _flimage_add_marker_struct = cfuncproto(
            load_so_libflimage(), "flimage_add_marker_struct",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.POINTER(FLIMAGE_MARKER)],
            """int flimage_add_marker_struct(FL_IMAGE * p1, const char * p2)
            """)
    keep_elem_refs(pImage, pImageMarker)
    retval = _flimage_add_marker_struct(pImage, pImageMarker)
    return retval


def flimage_define_marker(text1, pImageMarker, text2):
    """ flimage_define_marker(text1, pImageMarker, text2) -> num.
    """

    _flimage_define_marker = cfuncproto(
            load_so_libflimage(), "flimage_define_marker",
            cty.c_int, [STRING, cty.POINTER(FLIMAGE_MARKER), STRING],
            """int flimage_define_marker(const char *, void ( * )
               (FLIMAGE_MARKER *), const char *)
            """)
    stext1 = convert_to_string(text1)
    stext2 = convert_to_string(text2)
    keep_elem_refs(text1, pImageMarker, text2, stext1, stext2)
    retval = _flimage_define_marker(stext1, pImageMarker, stext2)
    return retval


def flimage_delete_all_markers(pImage):
    """ flimage_delete_all_markers(pImage)
    """

    _flimage_delete_all_markers = cfuncproto(
            load_so_libflimage(), "flimage_delete_all_markers",
            None, [cty.POINTER(FL_IMAGE)],
            """void flimage_delete_all_markers(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_delete_all_markers(pImage)


def flimage_render_annotation(pImage, win):
    """ flimage_render_annotation(pImage, win) -> num.
    """

    _flimage_render_annotation = cfuncproto(
            load_so_libflimage(), "flimage_render_annotation",
            cty.c_int, [cty.POINTER(FL_IMAGE), FL_WINDOW],
            """int flimage_render_annotation(FL_IMAGE * p1, FL_WINDOW p2)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(pImage, win, ulwin)
    retval = _flimage_render_annotation(pImage, ulwin)
    return retval


def flimage_error(pImage, text):
    """ flimage_error(pImage, text)
    """

    _flimage_error = cfuncproto(
            load_so_libflimage(), "flimage_error",
            None, [cty.POINTER(FL_IMAGE), STRING],
            """void flimage_error(FL_IMAGE * p1, const char * p2)
            """)
    stext = convert_to_Window(text)
    keep_elem_refs(pImage, text, stext)
    _flimage_error(pImage, stext)


# built-in format supports

def flimage_enable_pnm():
    """ flimage_enable_pnm()
    """

    _flimage_enable_pnm = cfuncproto(
            load_so_libflimage(), "flimage_enable_pnm",
            None, [],
            """void flimage_enable_pnm()
            """)
    _flimage_enable_pnm()


def flimage_set_fits_bits(p1):
    """ flimage_set_fits_bits(p1) -> num.
    """

    _flimage_set_fits_bits = cfuncproto(
            load_so_libflimage(), "flimage_set_fits_bits",
            cty.c_int, [cty.c_int],
            """int flimage_set_fits_bits(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    retval = _flimage_set_fits_bits(ip1)
    return retval


def flimage_jpeg_output_options(pImageJpegOption):
    """ flimage_jpeg_output_options(pImageJpegOption)
    """

    _flimage_jpeg_output_options = cfuncproto(
            load_so_libflimage(), "flimage_jpeg_output_options",
            None, [cty.POINTER(FLIMAGE_JPEG_OPTION)],
            """void flimage_jpeg_output_options(FLIMAGE_JPEG_OPTION * p1)
            """)
    keep_elem_refs(pImageJpegOption)
    _flimage_jpeg_output_options(pImageJpegOption)


def flimage_pnm_output_options(p1):
    """ flimage_pnm_output_options(p1)
    """

    _flimage_pnm_output_options = cfuncproto(
            load_so_libflimage(), "flimage_pnm_output_options",
            None, [cty.c_int],
            """void flimage_pnm_output_options(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    _flimage_pnm_output_options(ip1)


def flimage_gif_output_options(p1):
    """ flimage_gif_output_options(p1)
    """

    _flimage_gif_output_options = cfuncproto(
            load_so_libflimage(), "flimage_gif_output_options",
            None, [cty.c_int],
            """void flimage_gif_output_options(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    _flimage_gif_output_options(ip1)


def flimage_ps_options():
    """ flimage_ps_options() -> flps_control class
    """

    _flimage_ps_options = cfuncproto(
            load_so_libflimage(), "flimage_ps_options",
            cty.POINTER(FLPS_CONTROL), [],
            """FLPS_CONTROL * flimage_ps_options()
            """)
    retval = _flimage_ps_options()
    return retval


flimage_jpeg_options = flimage_jpeg_output_options
flimage_pnm_options = flimage_pnm_output_options
flimage_gif_options = flimage_gif_output_options


def flimage_get_number_of_formats():
    """ flimage_get_number_of_formats() -> num.
    """

    _flimage_get_number_of_formats = cfuncproto(
            load_so_libflimage(), "flimage_get_number_of_formats",
            cty.c_int, [],
            """int flimage_get_number_of_formats()
            """)
    retval = _flimage_get_number_of_formats()
    return retval


def flimage_get_format_info(p1):
    """ flimage_get_format_info(p1) -> format_info class instance
    """

    _flimage_get_format_info = cfuncproto(
            load_so_libflimage(), "flimage_get_format_info",
            cty.POINTER(FLIMAGE_FORMAT_INFO), [cty.c_int],
            """const char * flimage_get_format_info(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    retval = _flimage_get_format_info(ip1)
    return retval


def fl_get_matrix(p1, p2, p3):
    """ fl_get_matrix(p1, p2, p3) -> ?
    """

    _fl_get_matrix = cfuncproto(
            load_so_libflimage(), "fl_get_matrix",
            cty.c_void_p, [cty.c_int, cty.c_int, cty.c_uint],
            """void * fl_get_matrix(int p1, int p2, unsigned int p3)
            """)
    ip1 = convert_to_int(p1)
    ip2 = convert_to_int(p2)
    uip3 = convert_to_uint(p3)
    keep_elem_refs(p1, p2, p3, ip1, ip2, uip3)
    retval = _fl_get_matrix(ip1, ip2, uip3)
    return retval


def fl_make_matrix(p1, p2, p3, p4):
    """ fl_make_matrix(p1, p2, p3, p4) -> ?
    """

    _fl_make_matrix = cfuncproto(
            load_so_libflimage(), "fl_make_matrix",
            cty.c_void_p, [cty.c_int, cty.c_int, cty.c_uint, cty.c_void_p],
            """void * fl_make_matrix(int p1, int p2, unsigned int p3,
               void * p4)
            """)
    ip1 = convert_to_int(p1)
    ip2 = convert_to_int(p2)
    uip3 = convert_to_uint(p3)
    vp4 = cty.cast(p4, cty.c_void_p)
    keep_elem_refs(p1, p2, p3, p4, ip1, ip2, uip3, vp4)
    retval = _fl_make_matrix(ip1, ip2, uip3, vp4)
    return retval


def fl_free_matrix(p1):
    """ fl_free_matrix(p1)
    """

    _fl_free_matrix = cfuncproto(
            load_so_libflimage(), "fl_free_matrix",
            None, [cty.c_void_p],
            """void fl_free_matrix(void * p1)
            """)
    keep_elem_refs(p1)
    _fl_free_matrix(p1)


# This function is retained for compatibility reasons only.
# It returns 1 always.
def fl_init_RGBdatabase(text):
    """ fl_init_RGBdatabase(text) -> num.
    """

    _fl_init_RGBdatabase = cfuncproto(
            load_so_libflimage(), "fl_init_RGBdatabase",
            cty.c_int, [STRING],
            """int fl_init_RGBdatabase(const char * p1)
            """)
    stext = convert_to_string(text)
    keep_elem_refs(text, stext)
    retval = _fl_init_RGBdatabase(stext)
    return retval


def fl_lookup_RGBcolor(text, p2, p3, p4):
    """ fl_lookup_RGBcolor(text, p2, p3, p4) -> num.
    """

    _fl_lookup_RGBcolor = cfuncproto(
            load_so_libflimage(), "fl_lookup_RGBcolor",
            cty.c_int, [STRING, cty.POINTER(cty.c_int), \
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
            """int fl_lookup_RGBcolor(const char * p1, int * p2,
               int * p3, int * p4)
            """)
    stext = convert_to_string(text)
    keep_elem_refs(text, p2, p3, p4)
    retval = _fl_lookup_RGBcolor(stext, p2, p3, p4)
    return retval


FLIMAGE_Identify = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FILE))
FLIMAGE_Description = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))
FLIMAGE_Read_Pixels = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))
FLIMAGE_Write_Image = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))

def flimage_add_format(p1, p2, p3, p4, py_ImageIdentify, py_ImageDescription,
                       py_ImageReadPixels, py_ImageWriteImage):
    """ flimage_add_format(p1, p2, p3, p4, py_ImageIdentify,
        py_ImageDescription, py_ImageReadPixels, py_ImageWriteImage) -> num.
    """

    _flimage_add_format = cfuncproto(
            load_so_libflimage(), "flimage_add_format",
            cty.c_int, [STRING, STRING, STRING, cty.c_int, FLIMAGE_Identify,
            FLIMAGE_Description, FLIMAGE_Read_Pixels, FLIMAGE_Write_Image],
            """int flimage_add_format(const char * p1, const char * p2,
               const char * p3, int p4, FLIMAGE_Identify p5,
               FLIMAGE_Description p6, FLIMAGE_Read_Pixels p7,
               FLIMAGE_Write_Image p8)
            """)
    sp1 = convert_to_string(p1)
    sp2 = convert_to_string(p2)
    sp3 = convert_to_string(p3)
    ip4 = convert_to_int(p4)
    c_ImageIdentify = FLIMAGE_Identify(py_ImageIdentify)
    c_ImageDescription = FLIMAGE_Description(py_ImageDescription)
    c_ImageReadPixels = FLIMAGE_Read_Pixels(py_ImageReadPixels)
    c_ImageWriteImage = FLIMAGE_Write_Image(py_ImageWriteImage)
    keep_cfunc_refs(c_ImageIdentify, py_ImageIdentify, c_ImageDescription, \
                    py_ImageDescription, c_ImageReadPixels, py_ImageReadPixels,
                    c_ImageWriteImage, py_ImageWriteImage)
    keep_elem_refs(p1, p2, p3, p4, sp1, sp2, sp3, ip4)
    retval = _flimage_add_format(sp1, sp2, sp3, ip4, c_ImageIdentify, \
                                 c_ImageDescription, c_ImageReadPixels, \
                                 c_ImageWriteImage)
    return retval


def flimage_set_annotation_support(p1, p2):
    """ flimage_set_annotation_support(p1, p2)
    """

    _flimage_set_annotation_support = cfuncproto(
            load_so_libflimage(), "flimage_set_annotation_support",
            None, [cty.c_int, cty.c_int],
            """void flimage_set_annotation_support(int p1, int p2)
            """)
    ip1 = convert_to_int(p1)
    ip2 = convert_to_int(p2)
    keep_elem_refs(p1, p2, ip1, ip2)
    _flimage_set_annotation_support(ip1, ip2)


def flimage_getcolormap(pImage):
    """ flimage_getcolormap(pImage) -> num.
    """

    _flimage_getcolormap = cfuncproto(
            load_so_libflimage(), "flimage_getcolormap",
            cty.c_int, [cty.POINTER(FL_IMAGE)],
            """int flimage_getcolormap(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_getcolormap(pImage)
    return retval


# it seems not to be defined --LK
#def fl_select_octree_quantizer():
#   """ fl_select_octree_quantizer()
#   """
#
#   _fl_select_octree_quantizer = cfuncproto(
#           so_libflimage, "fl_select_octree_quantizer",
#           None, [],
#           """void fl_select_octree_quantizer()
#           """)
#   fl_select_octree_quantizer()


def fl_select_mediancut_quantizer():
    """ fl_select_mediancut_quantizer()
    """

    _fl_select_mediancut_quantizer = cfuncproto(
            load_so_libflimage(), "fl_select_mediancut_quantizer",
            None, [],
            """void fl_select_mediancut_quantizer()
            """)
    _fl_select_mediancut_quantizer()


# simple image processing routines

def flimage_convolve(pImage, p2, p3, p4):
    """ flimage_convolve(pImage, p2, p3, p4) -> num.
    """

    _flimage_convolve = cfuncproto(
            load_so_libflimage(), "flimage_convolve",
            cty.c_int, [cty.POINTER(FL_IMAGE),
            cty.POINTER(cty.POINTER(cty.c_int)), cty.c_int, cty.c_int],
            """int flimage_convolve(FL_IMAGE * p1, int * * p2, int p3,
               int p4)
            """)
    ip3 = convert_to_int(p3)
    ip4 = convert_to_int(p4)
    keep_elem_refs(pImage, p2, p3, p4, ip3, ip4)
    retval = _flimage_convolve(pImage, p2, ip3, ip4)
    return retval


def flimage_convolvea(pImage, p2, p3, p4):
    """ flimage_convolvea(pImage, p2, p3, p4) -> num.
    """

    _flimage_convolvea = cfuncproto(
            load_so_libflimage(), "flimage_convolvea",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.POINTER(cty.c_int),
            cty.c_int, cty.c_int],
            """int flimage_convolvea(FL_IMAGE * p1, int * p2, int p3, int p4)
            """)
    keep_elem_refs(pImage, p2, p3, p4)
    retval = _flimage_convolvea(pImage, p2, p3, p4)
    return retval


def flimage_tint(pImage, p2, p3):
    """ flimage_tint(pImage, p2, p3) -> num.
    """

    _flimage_tint = cfuncproto(
            load_so_libflimage(), "flimage_tint",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_uint, cty.c_double],
            """int flimage_tint(FL_IMAGE * p1, unsigned int p2, double p3)
            """)
    keep_elem_refs(pImage, p2, p3)
    retval = _flimage_tint(pImage, p2, p3)
    return retval


def flimage_rotate(pImage, p2, p3):
    """ flimage_rotate(pImage, p2, p3) -> num.
    """

    _flimage_rotate = cfuncproto(
            load_so_libflimage(), "flimage_rotate",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_int, cty.c_int],
            """int flimage_rotate(FL_IMAGE * p1, int p2, int p3)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    keep_elem_refs(pImage, p2, p3, ip2, ip3)
    retval = _flimage_rotate(pImage, ip2, ip3)
    return retval


def flimage_flip(pImage, p2):
    """ flimage_flip(pImage, p2) -> num.
    """

    _flimage_flip = cfuncproto(
            load_so_libflimage(), "flimage_flip",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_int],
            """int flimage_flip(FL_IMAGE * p1, int p2)
            """)
    ip2 = convert_to_int(p2)
    keep_elem_refs(pImage, p2, ip2)
    retval = _flimage_flip(pImage, ip2)
    return retval


def flimage_scale(pImage, p2, p3, p4):
    """ flimage_scale(pImage, p2, p3, p4) -> num.
    """

    _flimage_scale = cfuncproto(
            load_so_libflimage(), "flimage_scale",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_int, cty.c_int,
            cty.c_int],
            """int flimage_scale(FL_IMAGE * p1, int p2, int p3, int p4)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    ip4 = convert_to_int(p4)
    keep_elem_refs(pImage, p2, p3, p4, ip2, ip3, ip4)
    retval = _flimage_scale(pImage, ip2, ip3, ip4)
    return retval


def flimage_warp(pImage, p2, p3, p4, p5):
    """ flimage_warp(pImage, p2, p3, p4, p5) -> num.
    """

    _flimage_warp = cfuncproto(
            load_so_libflimage(), "flimage_warp",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.POINTER(cty.c_float * 2),
            cty.c_int, cty.c_int, cty.c_int],
            """int flimage_warp(FL_IMAGE * p1, float * p2, int p3, int p4,
               int p5)
            """)
    ip3 = convert_to_int(p3)
    ip4 = convert_to_int(p4)
    ip5 = convert_to_int(p5)
    keep_elem_refs(pImage, p2, p3, p4, p5, ip3, ip4, ip5)
    retval = _flimage_warp(pImage, p2, ip3, ip4, ip5)
    return retval


def flimage_autocrop(pImage, p2):
    """ flimage_autocrop(pImage, p2) -> num.
    """

    _flimage_autocrop = cfuncproto(
            load_so_libflimage(), "flimage_autocrop",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_uint],
            """int flimage_autocrop(FL_IMAGE * p1, unsigned int p2)
            """)
    uip2 = convert_to_uint(p2)
    keep_elem_refs(pImage, p2, uip2)
    retval = _flimage_autocrop(pImage, uip2)
    return retval


#def flimage_get_autocrop(pImage, bk, xl, yt, xr, yb)
def flimage_get_autocrop(pImage, bk):
    """ flimage_get_autocrop(pImage, bk) -> num., xl, yt, xr, yb
    """

    _flimage_get_autocrop = cfuncproto(
            load_so_libflimage(), "flimage_get_autocrop",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_uint,
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
            """int flimage_get_autocrop(FL_IMAGE * p1, unsigned int p2,
               int * p3, int * p4, int * p5, int * p6)
            """)
    uibk = convert_to_uint(bk)
    xl, pxl = make_int_and_pointer()
    yt, pyt = make_int_and_pointer()
    xr, pxr = make_int_and_pointer()
    yb, pyb = make_int_and_pointer()
    keep_elem_refs(pImage, bk, uibk, xl, pxl, yt, pyt, xr, pxr, yb, pyb)
    retval = _flimage_get_autocrop(pImage, uibk, pxl, pyt, pxr, pyb)
    return retval, xl, yt, xr, yb


def flimage_crop(pImage, p2, p3, p4, p5):
    """ flimage_crop(pImage, p2, p3, p4, p5) -> num.
    """

    _flimage_crop = cfuncproto(
            load_so_libflimage(), "flimage_crop",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_int, cty.c_int,
            cty.c_int, cty.c_int],
            """int flimage_crop(FL_IMAGE * p1, int p2, int p3,
               int p4, int p5)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    ip4 = convert_to_int(p4)
    ip5 = convert_to_int(p5)
    keep_elem_refs(pImage, p2, p3, p4, p5, ip2, ip3, ip4, ip5)
    retval = _flimage_crop(pImage, ip2, ip3, ip4, ip5)
    return retval


def flimage_replace_pixel(pImage, p2, p3):
    """ flimage_replace_pixel(pImage, p2, p3) -> num.
    """

    _flimage_replace_pixel = cfuncproto(
            load_so_libflimage(), "flimage_replace_pixel",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_uint, cty.c_uint],
            """int flimage_replace_pixel(FL_IMAGE * p1, unsigned int p2,
               unsigned int p3)
            """)
    uip2 = convert_to_uint(p2)
    uip3 = convert_to_uint(p3)
    keep_elem_refs(pImage, p2, p3, uip2, uip3)
    retval = _flimage_replace_pixel(pImage, uip2, uip3)
    return retval


def flimage_transform_pixels(pImage, red, green, blue):
    """ flimage_transform_pixels(pImage, red, green, blue) -> num.
    """

    _flimage_transform_pixels = cfuncproto(
            load_so_libflimage(), "flimage_transform_pixels",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
            """int flimage_transform_pixels(FL_IMAGE * p1, int * p2,
               int * p3, int * p4)
            """)
    pred = cty.cast(red, cty.POINTER(cty.c_int))
    pgreen = cty.cast(green, cty.POINTER(cty.c_int))
    pblue = cty.cast(blue, cty.POINTER(cty.c_int))
    keep_elem_refs(pImage, red, green, blue, pred, pgreen, pblue)
    retval = _flimage_transform_pixels(pImage, pred, pgreen, pblue)
    return retval


def flimage_windowlevel(pImage, p2, p3):
    """ flimage_windowlevel(pImage, p2, p3) -> num.
    """

    _flimage_windowlevel = cfuncproto(
            load_so_libflimage(), "flimage_windowlevel",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_int, cty.c_int],
            """int flimage_windowlevel(FL_IMAGE * p1, int p2, int p3)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    keep_elem_refs(pImage, p2, p3, ip2, ip3)
    retval = _flimage_windowlevel(pImage, ip2, ip3)
    return retval


def flimage_enhance(pImage, p2):
    """ flimage_enhance(pImage, p2) -> num.
    """

    _flimage_enhance = cfuncproto(
            load_so_libflimage(), "flimage_enhance",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_int],
            """int flimage_enhance(FL_IMAGE * p1, int p2)
            """)
    ip2 = convert_to_int(p2)
    keep_elem_refs(pImage, p2, ip2)
    retval = _flimage_enhance(pImage, ip2)
    return retval


def flimage_from_pixmap(pImage, pixmap):
    """ flimage_from_pixmap(pImage, pixmap) -> num.
    """

    _flimage_from_pixmap = cfuncproto(
            load_so_libflimage(), "flimage_from_pixmap",
            cty.c_int, [cty.POINTER(FL_IMAGE), Pixmap],
            """int flimage_from_pixmap(FL_IMAGE * p1, Pixmap p2)
            """)
    ulpixmap = convert_to_Pixmap(pixmap)
    keep_elem_refs(pImage, pixmap, ulpixmap)
    retval = _flimage_from_pixmap(pImage, ulpixmap)
    return retval


def flimage_to_pixmap(pImage, win):
    """ flimage_to_pixmap(pImage, win) -> pixmap
    """

    _flimage_to_pixmap = cfuncproto(
            load_so_libflimage(), "flimage_to_pixmap",
            Pixmap, [cty.POINTER(FL_IMAGE), FL_WINDOW],
            """Pixmap flimage_to_pixmap(FL_IMAGE * p1, FL_WINDOW p2)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(pImage, win, ulwin)
    retval = _flimage_to_pixmap(pImage, ulwin)
    return retval


def flimage_dup(pImage):
    """ flimage_dup(pImage) -> pImage
    """

    _flimage_dup = cfuncproto(
            load_so_libflimage(), "flimage_dup",
            cty.POINTER(FL_IMAGE), [cty.POINTER(FL_IMAGE)],
            """FL_IMAGE * flimage_dup(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_dup(pImage)
    return retval


# Miscellaneous prototypes

def fl_get_submatrix(in_, rows, cols, r1, c1, rs, cs, esize):
    """ fl_get_submatrix(in_, rows, cols, r1, c1, rs, cs, esize) -> ?
    """

    _fl_get_submatrix = cfuncproto(
            load_so_libflimage(), "fl_get_submatrix",
            cty.c_void_p, [cty.c_void_p, cty.c_int, cty.c_int, cty.c_int,
            cty.c_int, cty.c_int, cty.c_int, cty.c_uint],
            """void * fl_get_submatrix(void * p1, int p2, int p3, int p4,
               int p5, int p6, int p7, unsigned int p8)
            """)
    irows = convert_to_int(rows)
    icols = convert_to_int(cols)
    ir1 = convert_to_int(r1)
    ic1 = convert_to_int(c1)
    irs = convert_to_int(rs)
    ics = convert_to_int(cs)
    uiesize = convert_to_uint(esize)
    keep_elem_refs(in_, rows, cols, r1, c1, rs, cs, esize, irows, icols, \
                   ir1, ic1, irs, ics, uiesize)
    retval = _fl_get_submatrix(in_, irows, icols, ir1, ic1, irs, ics, uiesize)
    return retval


def fl_j2pass_quantize_packed(p1, p2, p3, p4, p5, p6, p7, p8, p9, pImage):
    """ fl_j2pass_quantize_packed(p1, p2, p3, p4, p5, p6, p7, p8, p9, pImage) -> num.
    """

    _fl_j2pass_quantize_packed = cfuncproto(
            load_so_libflimage(), "fl_j2pass_quantize_packed",
            cty.c_int, [cty.POINTER(cty.POINTER(cty.c_uint)), cty.c_int,
            cty.c_int, cty.c_int, cty.POINTER(cty.POINTER(cty.c_ushort)),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(FL_IMAGE)],
            """int fl_j2pass_quantize_packed(unsigned int * * p1, int p2,
               int p3, int p4, short unsigned int * * p5, int * p6,
               int * p7, int * p8, int * p9, FL_IMAGE * p10)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    ip4 = convert_to_int(p4)
    keep_elem_refs(p1, p2, p3, p4, p5, p6, p7, p8, p9, pImage, ip2, ip3, ip4)
    retval = _fl_j2pass_quantize_packed(p1, ip2, ip3, ip4, p5, p6, p7, p8, \
                                        p9, pImage)
    return retval


def fl_j2pass_quantize_rgb(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, pImage):
    """ fl_j2pass_quantize_rgb(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, pImage) -> num.
    """

    _fl_j2pass_quantize_rgb = cfuncproto(
            load_so_libflimage(), "fl_j2pass_quantize_rgb",
            cty.c_int, [cty.POINTER(cty.POINTER(cty.c_ubyte)),
            cty.POINTER(cty.POINTER(cty.c_ubyte)),
            cty.POINTER(cty.POINTER(cty.c_ubyte)), cty.c_int, cty.c_int,
            cty.c_int, cty.POINTER(cty.POINTER(cty.c_ushort)),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(FL_IMAGE)],
            """int fl_j2pass_quantize_rgb(unsigned char * * p1,
               unsigned char * * p2, unsigned char * * p3, int p4, int p5,
               int p6, short unsigned int * * p7, int * p8, int * p9,
               int * p10, int * p11, FL_IMAGE * p12)
            """)
    ip4 = convert_to_int(p4)
    ip5 = convert_to_int(p5)
    ip6 = convert_to_int(p6)
    keep_elem_refs(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, pImage,
                   ip4, ip5, ip6)
    retval = _fl_j2pass_quantize_rgb(p1, p2, p3, ip4, ip5, ip6, p7, p8, p9, \
                                     p10, p11, pImage)
    return retval


def fl_make_submatrix(in_, rows, cols, r1, c1, rs, cs, esize):
    """ fl_make_submatrix(in_, rows, cols, r1, c1, rs, cs, esize) -> ?
    """

    _fl_make_submatrix = cfuncproto(
            load_so_libflimage(), "fl_make_submatrix",
            cty.c_void_p, [cty.c_void_p, cty.c_int, cty.c_int, cty.c_int,
            cty.c_int, cty.c_int, cty.c_int, cty.c_uint],
            """void * fl_make_submatrix(void * p1, int p2, int p3, int p4,
               int p5, int p6, int p7, unsigned int p8)
            """)
    irows = convert_to_int(rows)
    icols = convert_to_int(cols)
    ir1 = convert_to_int(r1)
    ic1 = convert_to_int(c1)
    irs = convert_to_int(rs)
    ics = convert_to_int(cs)
    uiesize = convert_to_uint(esize)
    keep_elem_refs(in_, rows, cols, r1, c1, rs, cs, esize, irows, icols, \
               ir1, ic1, irs, ics, uiesize)
    retval = _fl_make_submatrix(in_, irows, icols, ir1, ic1, irs, ics, \
                                uiesize)
    return retval


def fl_pack_bits(p1, p2, p3):
    """ fl_pack_bits(p1, p2, p3)
    """

    _fl_pack_bits = cfuncproto(
            load_so_libflimage(), "fl_pack_bits",
            None, [cty.POINTER(cty.c_ubyte), cty.POINTER(cty.c_ushort),
            cty.c_int],
            """void fl_pack_bits(unsigned char * p1, short unsigned int * p2,
               int p3)
            """)
    ip3 = convert_to_int(p3)
    keep_elem_refs(p1, p2, p3, ip3)
    _fl_pack_bits(p1, p2, ip3)


def fl_unpack_bits(p1, p2, p3):
    """ fl_unpack_bits(p1, p2, p3)
    """

    _fl_unpack_bits = cfuncproto(
            load_so_libflimage(), "fl_unpack_bits",
            None, [cty.POINTER(cty.c_ushort), cty.POINTER(cty.c_ubyte),
            cty.c_int],
            """void fl_unpack_bits(short unsigned int * p1,
               unsigned char * p2, int p3)
            """)
    ip3 = convert_to_int(p3)
    keep_elem_refs(p1, p2, p3, ip3)
    _fl_unpack_bits(p1, p2, ip3)


def fl_value_to_bits(p1):
    """ fl_value_to_bits(p1) -> num.
    """

    _fl_value_to_bits = cfuncproto(
            load_so_libflimage(), "fl_value_to_bits",
            cty.c_uint, [cty.c_uint],
            """)unsigned int fl_value_to_bits(unsigned int p1)
            """)
    uip1 = convert_to_uint(p1)
    keep_elem_refs(p1, uip1)
    retval = _fl_value_to_bits(uip1)
    return retval


def flimage_add_comments(pImage, p2, p3):
    """ flimage_add_comments(pImage, p2, p3)
    """

    _flimage_add_comments = cfuncproto(
            load_so_libflimage(), "flimage_add_comments",
            None, [cty.POINTER(FL_IMAGE), STRING, cty.c_int],
            """void flimage_add_comments(FL_IMAGE * p1, const char * p2,
               int p3)
            """)
    sp2 = convert_to_string(p2)
    ip3 = convert_to_int(p3)
    keep_elem_refs(pImage, p2, p3, sp2, ip3)
    _flimage_add_comments(pImage, sp2, ip3)


def flimage_color_to_pixel(pImage, p2, p3, p4, p5):
    """ flimage_color_to_pixel(pImage, p2, p3, p4, p5) -> num.
    """

    _flimage_color_to_pixel = cfuncproto(
            load_so_libflimage(), "flimage_color_to_pixel",
            cty.c_ulong, [cty.POINTER(FL_IMAGE), cty.c_int, cty.c_int,
            cty.c_int, cty.POINTER(cty.c_int)],
            """)long unsigned int flimage_color_to_pixel(FL_IMAGE * p1,
               int p2, int p3, int p4, int * p5)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    ip4 = convert_to_int(p4)
    keep_elem_refs(pImage, p2, p3, p4, p5, ip2, ip3, ip4)
    retval = _flimage_color_to_pixel(pImage, ip2, ip3, ip4, p5)
    return retval


def flimage_combine(pImage1, pImage2, p3):
    """ flimage_combine(pImage1, pImage2, p3) -> pImage
    """

    _flimage_combine = cfuncproto(
            load_so_libflimage(), "flimage_combine",
            cty.POINTER(FL_IMAGE), [cty.POINTER(FL_IMAGE),
            cty.POINTER(FL_IMAGE), cty.c_double],
            """FL_IMAGE * flimage_combine(FL_IMAGE * p1, FL_IMAGE * p2,
               double p3)
            """)
    fp3 = convert_to_double(p3)
    keep_elem_refs(pImage1, pImage2, p3, fp3)
    retval = _flimage_combine(pImage1, pImage2, fp3)
    return retval


def flimage_display_markers(pImage):
    """ flimage_display_markers(pImage)
    """

    _flimage_display_markers = cfuncproto(
            load_so_libflimage(), "flimage_display_markers",
            None, [cty.POINTER(FL_IMAGE)],
            """void flimage_display_markers(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_display_markers(pImage)


def flimage_dup_(pImage, p2):
    """ flimage_dup_(pImage, p2) -> pImage
    """

    _flimage_dup_ = cfuncproto(
            load_so_libflimage(), "flimage_dup_",
            cty.POINTER(FL_IMAGE), [cty.POINTER(FL_IMAGE), cty.c_int],
            """FL_IMAGE * flimage_dup_(FL_IMAGE * p1, int p2)
            """)
    ip2 = convert_to_int(p2)
    keep_elem_refs(pImage, p2, ip2)
    retval = _flimage_dup_(pImage, ip2)
    return retval


def flimage_enable_bmp():
    """ flimage_enable_bmp()
    """

    _flimage_enable_bmp = cfuncproto(
            load_so_libflimage(), "flimage_enable_bmp",
            None, [],
            """void flimage_enable_bmp()
            """)
    _flimage_enable_bmp()


def flimage_enable_fits():
    """ flimage_enable_fits()
    """

    _flimage_enable_fits = cfuncproto(
            load_so_libflimage(), "flimage_enable_fits",
            None, [],
            """void flimage_enable_fits()
            """)
    _flimage_enable_fits()


def flimage_enable_genesis():
    """ flimage_enable_genesis()
    """

    _flimage_enable_genesis = cfuncproto(
            load_so_libflimage(), "flimage_enable_genesis",
            None, [],
            """void flimage_enable_genesis()
            """)
    _flimage_enable_genesis()


def flimage_enable_gif():
    """ flimage_enable_gif()
    """

    _flimage_enable_gif = cfuncproto(
            load_so_libflimage(), "flimage_enable_gif",
            None, [],
            """void flimage_enable_gif()
            """)
    _flimage_enable_gif()


def flimage_enable_gzip():
    """ flimage_enable_gzip()
    """

    _flimage_enable_gzip = cfuncproto(
            load_so_libflimage(), "flimage_enable_gzip",
            None, [],
            """void flimage_enable_gzip()
            """)
    _flimage_enable_gzip()


def flimage_enable_jpeg():
    """ flimage_enable_jpeg()
    """

    _flimage_enable_jpeg = cfuncproto(
            load_so_libflimage(), "flimage_enable_jpeg",
            None, [],
            """void flimage_enable_jpeg()
            """)
    _flimage_enable_jpeg()


def flimage_enable_png():
    """ flimage_enable_png()
    """

    _flimage_enable_png = cfuncproto(
            load_so_libflimage(), "flimage_enable_png",
            None, [],
            """void flimage_enable_png()
            """)
    _flimage_enable_png()


def flimage_enable_ps():
    """ flimage_enable_ps()
    """

    _flimage_enable_ps = cfuncproto(
            load_so_libflimage(), "flimage_enable_ps",
            None, [],
            """void flimage_enable_ps()
            """)
    _flimage_enable_ps()


def flimage_enable_sgi():
    """ flimage_enable_sgi()
    """

    _flimage_enable_sgi = cfuncproto(
            load_so_libflimage(), "flimage_enable_sgi",
            None, [],
            """void flimage_enable_sgi()
            """)
    _flimage_enable_sgi()


def flimage_enable_tiff():
    """ flimage_enable_tiff()
    """

    _flimage_enable_tiff = cfuncproto(
            load_so_libflimage(), "flimage_enable_tiff",
            None, [],
            """void flimage_enable_tiff()
            """)
    _flimage_enable_tiff()


def flimage_enable_xbm():
    """ flimage_enable_xbm()
    """

    _flimage_enable_xbm = cfuncproto(
            load_so_libflimage(), "flimage_enable_xbm",
            None, [],
            """void flimage_enable_xbm()
            """)
    _flimage_enable_xbm()


def flimage_enable_xpm():
    """ flimage_enable_xpm()
    """

    _flimage_enable_xpm = cfuncproto(
            load_so_libflimage(), "flimage_enable_xpm",
            None, [],
            """void flimage_enable_xpm()
            """)
    _flimage_enable_xpm()


def flimage_enable_xwd():
    """ flimage_enable_xwd()
    """

    _flimage_enable_xwd = cfuncproto(
            load_so_libflimage(), "flimage_enable_xwd",
            None, [],
            """void flimage_enable_xwd()
            """)
    _flimage_enable_xwd()


def flimage_free_ci(pImage):
    """ flimage_free_ci(pImage)
    """

    _flimage_free_ci = cfuncproto(
            load_so_libflimage(), "flimage_free_ci",
            None, [cty.POINTER(FL_IMAGE)],
            """void flimage_free_ci(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_free_ci(pImage)


def flimage_free_gray(pImage):
    """ flimage_free_gray(pImage)
    """

    _flimage_free_gray = cfuncproto(
            load_so_libflimage(), "flimage_free_gray",
            None, [cty.POINTER(FL_IMAGE)],
            """void flimage_free_gray(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_free_gray(pImage)


def flimage_free_linearlut(pImage):
    """ flimage_free_linearlut(pImage)
    """

    _flimage_free_linearlut = cfuncproto(
            load_so_libflimage(), "flimage_free_linearlut",
            None, [cty.POINTER(FL_IMAGE)],
            """void flimage_free_linearlut(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_free_linearlut(pImage)


def flimage_free_rgb(pImage):
    """ flimage_free_rgb(pImage)
    """

    _flimage_free_rgb = cfuncproto(
            load_so_libflimage(), "flimage_free_rgb",
            None, [cty.POINTER(FL_IMAGE)],
            """void flimage_free_rgb(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_free_rgb(pImage)


def flimage_freemem(pImage):
    """ flimage_freemem(pImage)
    """

    _flimage_freemem = cfuncproto(
            load_so_libflimage(), "flimage_freemem",
            None, [cty.POINTER(FL_IMAGE)],
            """void flimage_freemem(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_freemem(pImage)


def flimage_get_closest_color_from_map(pImage, p2):
    """ flimage_get_closest_color_from_map(pImage, p2) -> num.
    """

    _flimage_get_closest_color_from_map = cfuncproto(
            load_so_libflimage(), "flimage_get_closest_color_from_map",
            cty.c_int, [cty.POINTER(FL_IMAGE), cty.c_uint],
            """int flimage_get_closest_color_from_map(FL_IMAGE * p1,
               unsigned int p2)
            """)
    uip2 = convert_to_uint(p2)
    keep_elem_refs(pImage, p2, uip2)
    retval = _flimage_get_closest_color_from_map(pImage, uip2)
    return retval


def flimage_get_linearlut(pImage):
    """ flimage_get_linearlut(pImage) -> num.
    """

    _flimage_get_linearlut = cfuncproto(
            load_so_libflimage(), "flimage_get_linearlut",
            cty.c_int, [cty.POINTER(FL_IMAGE)],
            """int flimage_get_linearlut(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_get_linearlut(pImage)
    return retval


def flimage_invalidate_pixels(pImage):
    """ flimage_invalidate_pixels(pImage)
    """

    _flimage_invalidate_pixels = cfuncproto(
            load_so_libflimage(), "flimage_invalidate_pixels",
            None, [cty.POINTER(FL_IMAGE)],
            """void flimage_invalidate_pixels(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_invalidate_pixels(pImage)


def flimage_open(filename):
    """ flimage_open(filename) -> pImage
    """

    _flimage_open = cfuncproto(
            load_so_libflimage(), "flimage_open",
            cty.POINTER(FL_IMAGE), [STRING],
            """FL_IMAGE * flimage_open(const char * p1)
            """)
    sfilename = convert_to_string(filename)
    keep_elem_refs(filename, sfilename)
    retval = _flimage_open(sfilename)
    return retval


def flimage_read_annotation(pImage):
    """ flimage_read_annotation(pImage) -> num.
    """

    _flimage_read_annotation = cfuncproto(
            load_so_libflimage(), "flimage_read_annotation",
            cty.c_int, [cty.POINTER(FL_IMAGE)],
            """int flimage_read_annotation(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_read_annotation(pImage)
    return retval


def flimage_replace_image(pImage, p2, p3, p4, p5, p6):
    """ flimage_replace_image(pImage, p2, p3, p4, p5, p6)
    """

    _flimage_replace_image = cfuncproto(
            load_so_libflimage(), "flimage_replace_image",
            None, [cty.POINTER(FL_IMAGE), cty.c_int, cty.c_int, cty.c_void_p,
            cty.c_void_p, cty.c_void_p],
            """void flimage_replace_image(FL_IMAGE * p1, int p2, int p3,
               void * p4, void * p5, void * p6)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    keep_elem_refs(pImage, p2, p3, p4, p5, p6, ip2, ip3)
    _flimage_replace_image(pImage, ip2, ip3, p4, p5, p6)


def flimage_swapbuffer(pImage):
    """ flimage_swapbuffer(pImage) -> num.
    """

    _flimage_swapbuffer = cfuncproto(
            load_so_libflimage(), "flimage_swapbuffer",
            cty.c_int, [cty.POINTER(FL_IMAGE)],
            """int flimage_swapbuffer(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_swapbuffer(pImage)
    return retval


def flimage_to_ximage(pImage, win, pXWindowAttributes):
    """ flimage_to_ximage(pImage, win, pXWindowAttributes) -> num.
    """

    _flimage_to_ximage = cfuncproto(
            load_so_libflimage(), "flimage_to_ximage",
            cty.c_int, [cty.POINTER(FL_IMAGE), FL_WINDOW,
            cty.POINTER(XWindowAttributes)],
            """int flimage_to_ximage(FL_IMAGE * p1, FL_WINDOW p2,
               XWindowAttributes * p3)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(pImage, win, pXWindowAttributes, ulwin)
    retval = _flimage_to_ximage(pImage, ulwin, pXWindowAttributes)
    return retval


def flimage_write_annotation(pImage):
    """ flimage_write_annotation(pImage) -> num.
    """

    _flimage_write_annotation = cfuncproto(
            load_so_libflimage(), "flimage_write_annotation",
            cty.c_int, [cty.POINTER(FL_IMAGE)],
            """int flimage_write_annotation(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_write_annotation(pImage)
    return retval


def flps_apply_gamma(p1):
    """ flps_apply_gamma(p1)
    """

    _flps_apply_gamma = cfuncproto(
            load_so_libflimage(), "flps_apply_gamma",
            None, [cty.c_float],
            """void flps_apply_gamma(float p1)
            """)
    fp1 = convert_to_float(p1)
    keep_elem_refs(p1, fp1)
    _flps_apply_gamma(fp1)


def flps_arc(fill, x, y, r, t1, t2, colr):
    """ flps_arc(p1, p2, p3, p4, p5, p6, p7)
    """

    _flps_arc = cfuncproto(
            load_so_libflimage(), "flps_arc",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
            cty.c_int, cty.c_long],
            """void flps_arc(int p1, int p2, int p3, int p4, int p5, int p6,
               long int p7)
            """)
    ifill = convert_to_int(fill)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    ir = convert_to_int(r)
    it1 = convert_to_int(t1)
    it2 = convert_to_int(t2)
    lcolr = convert_to_long(colr)
    keep_elem_refs(fill, x, y, r, t1, t2, colr, ifill, ix, iy, ir, it1, \
                   it2, lcolr)
    _flps_arc(ifill, ix, iy, ir, it1, it2, lcolr)


def flps_circ(fill, x, y, r, colr):
    """ flps_circ(fill, x, y, r, colr)
    """

    _flps_circ = cfuncproto(
            load_so_libflimage(), "flps_circ",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_long],
            """void flps_circ(int p1, int p2, int p3, int p4, long int p5)
            """)
    ifill = convert_to_int(fill)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    ir = convert_to_int(r)
    lcolr = convert_to_long(colr)
    keep_elem_refs(fill, x, y, r, colr, ifill, ix, iy, ir, lcolr)
    _flps_circ(fill, x, y, r, colr, ifill, ix, iy, ir, lcolr)


def flps_color(colr):
    """ flps_color(colr)
    """

    _flps_color = cfuncproto(
            load_so_libflimage(), "flps_color",
            None, [cty.c_long],
            """void flps_color(long int p1)
            """)
    lcolr = convert_to_long(colr)
    keep_elem_refs(colr, lcolr)
    _flps_color(lcolr)


def flps_draw_box(style, x, y, w, h, colr, bwIn):
    """ flps_draw_box(style, x, y, w, h, colr, bwIn)
    """

    _flps_draw_box = cfuncproto(
            load_so_libflimage(), "flps_draw_box",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
            cty.c_long, cty.c_int],
            """void flps_draw_box(int p1, int p2, int p3, int p4, int p5,
               long int p6, int p7)
            """)
    istyle = convert_to_int(style)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    lcolr = convert_to_long(colr)
    ibwIn = convert_to_int(bwIn)
    keep_elem_refs(style, x, y, w, h, colr, bwIn, istyle, ix, iy, iw, ih, \
                   lcolr, ibwIn)
    _flps_draw_box(istyle, ix, iy, iw, ih, lcolr, ibwIn)


def flps_draw_checkbox(boxtype, x, y, w, h, colr, bw):
    """ flps_draw_checkbox(boxtype, x, y, w, h, colr, bw)
    """

    _flps_draw_checkbox = cfuncproto(
            load_so_libflimage(), "flps_draw_checkbox",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
            cty.c_long, cty.c_int],
            """void flps_draw_checkbox(int p1, int p2, int p3, int p4,
               int p5, long int p6, int p7)
            """)
    iboxtype = convert_to_int(boxtype)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    lcolr = convert_to_long(colr)
    ibw = convert_to_int(bw)
    keep_elem_refs(boxtype, x, y, w, h, colr, bw, iboxtype, ix, iy, iw, ih, \
                   lcolr, ibw)
    _flps_draw_checkbox(iboxtype, ix, iy, iw, ih, lcolr, ibw)


def flps_draw_frame(style, x, y, w, h, colr, bw):
    """ flps_draw_frame(style, x, y, w, h, colr, bw)
    """

    _flps_draw_frame = cfuncproto(
            load_so_libflimage(), "flps_draw_frame",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
            cty.c_long, cty.c_int],
            """void flps_draw_frame(int p1, int p2, int p3, int p4, int p5,
               long int p6, int p7)
            """)
    istyle = convert_to_int(style)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    lcolr = convert_to_long(colr)
    ibw = convert_to_int(bw)
    keep_elem_refs(style, x, y, w, h, colr, bw, istyle, ix, iy, iw, ih, \
                   lcolr, ibw)
    _flps_draw_frame(istyle, ix, iy, iw, ih, lcolr, ibw)


def flps_draw_symbol(label, x, y, w, h, colr):
    """ flps_draw_symbol(label, x, y, w, h, colr) -> num.
    """

    _flps_draw_symbol = cfuncproto(
            load_so_libflimage(), "flps_draw_symbol",
            cty.c_int, [STRING, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
            cty.c_long],
            """int flps_draw_symbol(const char * p1, int p2, int p3, int p4,
               int p5, long int p6)
            """)
    slabel = convert_to_string(label)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    lcolr = convert_to_long(colr)
    keep_elem_refs(label, x, y, w, h, colr, slabel, ix, iy, iw, ih, lcolr)
    retval = _flps_draw_symbol(slabel, ix, iy, iw, ih, lcolr)
    return retval


def flps_draw_tbox(style, x, y, w, h, colr, bw):
    """ flps_draw_tbox(style, x, y, w, h, colr, bw)
    """

    _flps_draw_tbox = cfuncproto(
            load_so_libflimage(), "flps_draw_tbox",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
            cty.c_long, cty.c_int],
            """void flps_draw_tbox(int p1, int p2, int p3, int p4, int p5,
               long int p6, int p7)
            """)
    istyle = convert_to_int(style)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    lcolr = convert_to_long(colr)
    ibw = convert_to_int(bw)
    keep_elem_refs(style, x, y, w, h, colr, bw, istyle, ix, iy, iw, ih, lcolr, ibw)
    _flps_draw_tbox(istyle, ix, iy, iw, ih, lcolr, ibw)


def flps_draw_text(align, x, y, w, h, colr, style, size, text):
    """ flps_draw_text(align, x, y, w, h, colr, style, size, text)
    """

    _flps_draw_text = cfuncproto(
            load_so_libflimage(), "flps_draw_text",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
            cty.c_long, cty.c_int, cty.c_int, STRING],
            """void flps_draw_text(int p1, int p2, int p3, int p4, int p5,
               long int p6, int p7, int p8, const char * p9)
            """)
    ialign = convert_to_int(align)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    lcolr = convert_to_long(colr)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    stext = convert_to_string(text)
    keep_elem_refs(align, x, y, w, h, colr, style, size, text, ialign, \
                   ix, iy, iw, ih, lcolr, istyle, isize, stext)
    _flps_draw_text(ialign, ix, iy, iw, ih, lcolr, istyle, isize, stext)


def flps_draw_text_beside(align, x, y, w, h, colr, style, size, text):
    """ flps_draw_text_beside(align, x, y, w, h, colr, style, size, text)
    """

    _flps_draw_text_beside = cfuncproto(
            load_so_libflimage(), "flps_draw_text_beside",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
            cty.c_long, cty.c_int, cty.c_int, STRING],
            """void flps_draw_text_beside(int p1, int p2, int p3, int p4,
               int p5, long int p6, int p7, int p8, const char * p9)
            """)
    ialign = convert_to_int(align)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    lcolr = convert_to_long(colr)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    stext = convert_to_string(text)
    keep_elem_refs(align, x, y, w, h, colr, style, size, text, ialign, \
                   ix, iy, iw, ih, lcolr, istyle, isize, stext)
    _flps_draw_text_beside(ialign, ix, iy, iw, ih, lcolr, istyle, isize, \
                           stext)


def flps_emit_header(title, npages, xi, yi, xf, yf):
    """ flps_emit_header(title, npages, xi, yi, xf, yf)
    """

    _flps_emit_header = cfuncproto(
            load_so_libflimage(), "flps_emit_header",
            None, [STRING, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
            cty.c_int],
            """void flps_emit_header(const char * p1, int p2, int p3,
               int p4, int p5, int p6)
            """)
    stitle = convert_to_string(title)
    inpages = convert_to_int(npages)
    ixi = convert_to_int(xi)
    iyi = convert_to_int(yi)
    ixf = convert_to_int(xf)
    iyf = convert_to_int(yf)
    keep_elem_refs(title, npages, xi, yi, xf, yf, stitle, inpages, ixi, \
                   iyi, ixf, iyf)
    _flps_emit_header(stitle, inpages, ixi, iyi, ixf, iyf)


def flps_emit_prolog():
    """ flps_emit_prolog()
    """

    _flps_emit_prolog = cfuncproto(
            load_so_libflimage(), "flps_emit_prolog",
            None, [],
            """void flps_emit_prolog()
            """)
    _flps_emit_prolog()


def flps_get_gray255(colr):
    """ flps_get_gray255(colr) -> num.
    """

    _flps_get_gray255 = cfuncproto(
            load_so_libflimage(), "flps_get_gray255",
            cty.c_int, [cty.c_long],
            """int flps_get_gray255(long int p1)
            """)
    lcolr = convert_to_long(colr)
    keep_elem_refs(colr, lcolr)
    retval = _flps_get_gray255(lcolr)
    return retval


def flps_get_linestyle():
    """ flps_get_linestyle() -> num.
    """

    _flps_get_linestyle = cfuncproto(
            load_so_libflimage(), "flps_get_linestyle",
            cty.c_int, [],
            """int flps_get_linestyle()
            """)
    retval = _flps_get_linestyle()
    return retval


def flps_get_linewidth():
    """ flps_get_linewidth() -> width num.
    """

    _flps_get_linewidth = cfuncproto(
            load_so_libflimage(), "flps_get_linewidth",
            cty.c_int, [],
            """int flps_get_linewidth()
            """)
    retval = _flps_get_linewidth()
    return retval


def flps_get_namedcolor(colrname):
    """ flps_get_namedcolor(colrname) -> num.
    """

    _flps_get_namedcolor = cfuncproto(
            load_so_libflimage(), "flps_get_namedcolor",
            cty.c_int, [STRING],
            """int flps_get_namedcolor(const char * p1)
            """)
    scolrname = convert_to_string(colrname)
    keep_elem_refs(colrname, scolrname)
    retval = _flps_get_namedcolor(scolrname)
    return retval


def flps_invalidate_color_cache():
    """ flps_invalidate_color_cache()
    """

    _flps_invalidate_color_cache = cfuncproto(
            load_so_libflimage(), "flps_invalidate_color_cache",
            None, [],
            """void flps_invalidate_color_cache()
            """)
    _flps_invalidate_color_cache()


def flps_invalidate_font_cache():
    """ flps_invalidate_font_cache()
    """

    _flps_invalidate_font_cache = cfuncproto(
            load_so_libflimage(), "flps_invalidate_font_cache",
            None, [],
            """void flps_invalidate_font_cache()
            """)
    _flps_invalidate_font_cache()


def flps_invalidate_linewidth_cache():
    """ flps_invalidate_linewidth_cache()
    """

    _flps_invalidate_linewidth_cache = cfuncproto(
            load_so_libflimage(), "flps_invalidate_linewidth_cache",
            None, [],
            """void flps_invalidate_linewidth_cache()
            """)
    _flps_invalidate_linewidth_cache()


def flps_invalidate_symbol_cache():
    """ flps_invalidate_symbol_cache()
    """

    _flps_invalidate_symbol_cache = cfuncproto(
            load_so_libflimage(), "flps_invalidate_symbol_cache",
            None, [],
            """void flps_invalidate_symbol_cache()
            """)
    _flps_invalidate_symbol_cache()


def flps_line(xi, yi, xf, yf, colr):
    """ flps_line(xi, yi, xf, yf, colr)
    """

    _flps_line = cfuncproto(
            load_so_libflimage(), "flps_line",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_long],
            """void flps_line(int p1, int p2, int p3, int p4, long int p5)
            """)
    ixi = convert_to_int(xi)
    iyi = convert_to_int(yi)
    ixf = convert_to_int(xf)
    iyf = convert_to_int(yf)
    lcolr = convert_to_long(colr)
    keep_elem_refs(xi, yi, xf, yf, colr, ixi, iyi, ixf, iyf, lcolr)
    _flps_line(ixi, iyi, ixf, iyf, lcolr)


def flps_lines(pPoint, num, colr):
    """ flps_lines(pPoint, num, colr)
    """

    _flps_lines = cfuncproto(
            load_so_libflimage(), "flps_lines",
            None, [cty.POINTER(FL_POINT), cty.c_int, cty.c_long],
            """void flps_lines(FL_POINT * p1, int p2, long int p3)
            """)
    inum = convert_to_int(num)
    lcolr = convert_to_long(colr)
    keep_elem_refs(pPoint, num, colr, inum, lcolr)
    _flps_lines(pPoint, inum, lcolr)


def flps_linestyle(linestyle):
    """ flps_linestyle(linestyle)
    """

    _flps_linestyle = cfuncproto(
            load_so_libflimage(), "flps_linestyle",
            None, [cty.c_int],
            """void flps_linestyle(int p1)
            """)
    check_admitted_listvalues(linestyle, LINE_list)
    ilinestyle = convert_to_int(linestyle)
    keep_elem_refs(linestyle, ilinestyle)
    _flps_linestyle(ilinestyle)


def flps_linewidth(linewidth):
    """ flps_linewidth(linewidth)
    """

    _flps_linewidth = cfuncproto(
            load_so_libflimage(), "flps_linewidth",
            None, [cty.c_int],
            """void flps_linewidth(int p1)
            """)
    ilinewidth = convert_to_int(linewidth)
    keep_elem_refs(linewidth, ilinewidth)
    _flps_linewidth(ilinewidth)


def flps_log(text):
    """ flps_log(text)
    """

    _flps_log = cfuncproto(
            load_so_libflimage(), "flps_log",
            None, [STRING],
            """void flps_log(const char * p1)
            """)
    stext = convert_to_string(text)
    keep_elem_refs(text, stext)
    _flps_log(stext)


def flps_output(fmt):
    """ flps_output(fmt)
    """

    _flps_output = cfuncproto(
            load_so_libflimage(), "flps_output",
            None, [STRING],
            """void flps_output(const char * p1)
            """)
    sfmt = convert_to_string(fmt)
    keep_elem_refs(fmt, sfmt)
    _flps_output(sfmt)


def flps_oval(fill, x, y, w, h, colr):
    """ flps_oval(fill, x, y, w, h, colr)
    """

    _flps_oval = cfuncproto(
            load_so_libflimage(), "flps_oval",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
            cty.c_long],
            """void flps_oval(int p1, int p2, int p3, int p4, int p5,
               long int p6)
            """)
    ifill = convert_to_int(fill)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    lcolr = convert_to_long(colr)
    keep_elem_refs(fill, x, y, w, h, colr, ifill, ix, iy, iw, ih, lcolr)
    _flps_oval(ifill, ix, iy, iw, ih, lcolr)


def flps_pieslice(fill, x, y, w, h, t1, t2, colr):
    """ flps_pieslice(fill, x, y, w, h, t1, t2, colr)
    """

    _flps_pieslice = cfuncproto(
            load_so_libflimage(), "flps_pieslice",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
            cty.c_int, cty.c_int, cty.c_long],
            """void flps_pieslice(int p1, int p2, int p3, int p4, int p5,
               int p6, int p7, long int p8)
            """)
    ifill = convert_to_int(fill)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    it1 = convert_to_int(t1)
    it2 = convert_to_int(t2)
    lcolr = convert_to_long(colr)
    keep_elem_refs(fill, x, y, w, h, t1, t2, colr, ifill, ix, iy, iw, \
                   ih, it1, it2, lcolr)
    _flps_pieslice(ifill, ix, iy, iw, ih, it1, it2, lcolr)


def flps_poly(fill, pPoint, num, colr):
    """ flps_poly(fill, pPoint, num, colr)
    """

    _flps_poly = cfuncproto(
            load_so_libflimage(), "flps_poly",
            None, [cty.c_int, cty.POINTER(FL_POINT), cty.c_int, cty.c_long],
            """void flps_poly(int p1, FL_POINT * p2, int p3, long int p4)
            """)
    ifill = convert_to_int(fill)
    inum = convert_to_int(num)
    lcolr = convert_to_long(colr)
    keep_elem_refs(fill, pPoint, num, colr, ifill, inum, lcolr)
    _flps_poly(ifill, pPoint, inum, lcolr)


def flps_rectangle(fill, x, y, w, h, colr):
    """ flps_rectangle(fill, x, y, w, h, colr)
    """

    _flps_rectangle = cfuncproto(
            load_so_libflimage(), "flps_rectangle",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
            cty.c_long],
            """void flps_rectangle(int p1, int p2, int p3, int p4, int p5,
               long int p6)
            """)
    ifill = convert_to_int(fill)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    lcolr = convert_to_long(colr)
    keep_elem_refs(fill, x, y, w, h, colr, ifill, ix, iy, iw, ih, lcolr)
    _flps_rectangle(ifill, ix, iy, iw, ih, lcolr)


def flps_reset_cache():
    """ flps_reset_cache()
    """

    _flps_reset_cache = cfuncproto(
            load_so_libflimage(), "flps_reset_cache",
            None, [],
            """void flps_reset_cache()
            """)
    _flps_reset_cache()


def flps_reset_linewidth():
    """ flps_reset_linewidth()
    """

    _flps_reset_linewidth = cfuncproto(
            load_so_libflimage(), "flps_reset_linewidth",
            None, [],
            """void flps_reset_linewidth()
            """)
    _flps_reset_linewidth()


def flps_restore_flps():
    """ flps_restore_flps()
    """

    _flps_restore_flps = cfuncproto(
            load_so_libflimage(), "flps_restore_flps",
            None, [],
            """void flps_restore_flps()
            """)
    _flps_restore_flps()


def flps_rgbcolor(r, g, b):
    """ flps_rgbcolor(r, g, b)
    """

    _flps_rgbcolor = cfuncproto(
            load_so_libflimage(), "flps_rgbcolor",
            None, [cty.c_int, cty.c_int, cty.c_int],
            """void flps_rgbcolor(int p1, int p2, int p3)
            """)
    ir = convert_to_int(r)
    ig = convert_to_int(g)
    ib = convert_to_int(b)
    keep_elem_refs(r, g, b, ir, ig, ib)
    _flps_rgbcolor(ir, ig, ib)


def flps_roundrectangle(fill, x, y, w, h, colr):
    """ flps_roundrectangle(fill, x, y, w, h, colr)
    """

    _flps_roundrectangle = cfuncproto(
            load_so_libflimage(), "flps_roundrectangle",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,
            cty.c_long],
            """void flps_roundrectangle(int p1, int p2, int p3, int p4,
               int p5, long int p6)
            """)
    ifill = convert_to_int(fill)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    lcolr = convert_to_long(colr)
    keep_elem_refs(fill, x, y, w, h, colr, ifill, ix, iy, iw, ih, lcolr)
    _flps_roundrectangle(ifill, ix, iy, iw, ih, lcolr)


def flps_set_clipping(x, y, w, h):
    """ flps_set_clipping(x, y, w, h)
    """

    _flps_set_clipping = cfuncproto(
            load_so_libflimage(), "flps_set_clipping",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int],
            """void flps_set_clipping(int p1, int p2, int p3, int p4)
            """)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    keep_elem_refs(x, y, w, h, ix, iy, iw, ih)
    _flps_set_clipping(ix, iy, iw, ih)


def flps_set_font(style, size):
    """ flps_set_font(style, size)
    """

    _flps_set_font = cfuncproto(
            load_so_libflimage(), "flps_set_font",
            None, [cty.c_int, cty.c_int],
            """void flps_set_font(int p1, int p2)
            """)
    check_admitted_listvalues(style, TEXTSTYLE_list)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    keep_elem_refs(style, size, istyle, isize)
    _flps_set_font(istyle, isize)


def flps_unset_clipping():
    """ flps_unset_clipping()
    """

    _flps_unset_clipping = cfuncproto(
            load_so_libflimage(), "flps_unset_clipping",
            None, [],
            """void flps_unset_clipping()
            """)
    _flps_unset_clipping()


# /usr/include/X11/Xlib.h 2118
def XClearWindow(pDisplay, win):
    """ XClearWindow(pDisplay, win) -> num.
    """

    _XClearWindow = cfuncproto(
            load_so_libx11(), "XClearWindow", \
            cty.c_int, [cty.POINTER(Display), Window], \
            """int XClearWindow(Display * display, Window w)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(pDisplay, win, ulwin)
    retval = _XClearWindow(pDisplay, ulwin)
    return retval

