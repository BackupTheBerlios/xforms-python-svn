#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    *****************************************************************
    xforms-python
    *****************************************************************

    Python wrapper for XForms (X11) GUI C toolkit library using ctypes

    Copyright (C) 2009  Luca Lazzaroni "LukenShiro"  <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.

    *****************************************************************


    @newfield example: Example
"""


__docformat__ = "epytext en"    # to be used with epydoc doc


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
import ctypes.util as ctyutil
import warnings
import xfdata as xfc       # data types and constants from XForms


# xforms-python version
__mainversion__ = "0.3.5"               # real version
__vers_against_xforms__ = "1.0.93pre3"   # xforms version to be built against
__version__ = __mainversion__ + "_" + __vers_against_xforms__


header_filename = "/usr/include/forms.h"


def get_xforms_version():
    """ Returns version string of installed XForms library/header """

    complete_xf_version = ""
    try:
        formsh = open(header_filename, "r")
    except IOError:
        raise XFormsLoadError("XForms library toolkit header file is" \
                              " not installed properly")
    else:
        try:
            # a reasonable size to catch version values
            fconten = formsh.read(2500)
        except IOError:
            raise XFormsLoadError("XForms library toolkit header is" \
                                  "not installed properly")
        else:
            formsh.close()
            listconten = fconten.split("\n")
            for singline in listconten:
                idx_ver = singline.find("FL_VERSION")
                if idx_ver != -1:
                    strg_ver1 = singline[idx_ver:len(singline)]
                    strg_ver = strg_ver1.replace("FL_VERSION", "").strip(" ")
                    break
            for singline in listconten:
                idx_rev = singline.find("FL_REVISION")
                if idx_rev != -1:
                    strg_rev1 = singline[idx_rev:len(singline)]
                    strg_rev = strg_rev1.replace("FL_REVISION", "").strip(" ")
                    break
            for singline in listconten:
                idx_fix = singline.find("FL_FIXLEVEL")
                if idx_fix != -1:
                    strg_fix1 = singline[idx_fix:len(singline)]
                    strg_fix = strg_fix1.replace("FL_FIXLEVEL", \
                                                 "").strip(" ").strip('"')
                    break
            complete_xf_version = strg_ver + "." + strg_rev + "." + strg_fix

    return complete_xf_version


def verify_version_compatibility():
    """ verify compatibility between xforms-python and XForms versions """

    xforms_vers = get_xforms_version()
    if __vers_against_xforms__ != xforms_vers:      # no match
        warningmsg = "xforms-python is implemented against XForms version " \
                    "%s and does not match XForms installed version (%s)." \
                    "Some compatibility problems may arise if XForms" \
                    " public interface has been modified." % \
                    (__vers_against_xforms__, xforms_vers)
        warnings.warn(warningmsg, UserWarning)


class XFormsLoadError(OSError):
    """ Error in loading shared object library """

    pass


class XFormsTypeError(TypeError):
    """ Generic error for type mismatch """

    pass


def func_notexisting_placeholder(cfunction):
    """ Print a warning if called function doesn't exist """

    warningmsg = "C function %s does NOT exist, hence it is not " \
                 "wrappable and callable in python and its call " \
                 "is ignored. Maybe removed or disabled?" % cfunction
    warnings.warn(warningmsg, UserWarning)
    return None


# placeholders to keep reference to c functions
# keeps global to avoid garbage collector's' unpredictable behaviour
_cfunc_refs = []
# just in case, maintains elements used as parameters, too
_elem_refs = []


def keep_cfunc_refs(*cfunclist):
    """ Adds a reference for _cfunc_refs list of values """

    for singvalue in cfunclist:
        _cfunc_refs.append(singvalue)


def keep_elem_refs(*elemlist):
    """ Adds a reference for _elem_refs list of values """

    for singvalue in elemlist:
        _elem_refs.append(singvalue)


loaded_xlibraries = {'libforms' : None, 'libflimage' : None, \
                    'libformsgl' : None, 'libx11' : None}


def load_so_libforms():
    """ Load libforms.so else raise an error -> library instance """

    if loaded_xlibraries['libforms'] is None:
        libfbase = ctyutil.find_library("forms")
        if not libfbase:    # not installed
            raise XFormsLoadError("XForms library toolkit (libforms.so) is"
                                  " not installed properly")
        else:
            loaded_xlibraries['libforms'] = cty.cdll.LoadLibrary(libfbase)
    return loaded_xlibraries['libforms']


def load_so_libflimage():
    """ Load libflimage.so else raise an error -> library instance """

    if loaded_xlibraries['libflimage'] is None:
        libfimg = ctyutil.find_library("flimage")
        if not libfimg:    # not installed
            raise XFormsLoadError("XForms library toolkit (libflimage.so) is"
                                  " not installed properly")
        else:
            loaded_xlibraries['libflimage'] = cty.cdll.LoadLibrary(libfimg)
    return loaded_xlibraries['libflimage']


def load_so_libformsgl():
    """ Load libformsGL.so else raise an error -> library instance """

    if loaded_xlibraries['libformsgl'] is None:
        libfgl = ctyutil.find_library("formsGL")
        if not libfgl:    # not installed
            raise XFormsLoadError("XForms library toolkit (libformsGL.so) " \
                                  "is not installed properly. Did you " \
                                  "compile it without OpenGL support?")
        else:
            loaded_xlibraries['libformsgl'] = cty.cdll.LoadLibrary(libfgl)
    return loaded_xlibraries['libformsgl']


def load_so_libx11():
    """ Load libX11.so.6 else raise an error -> library instance """

    if loaded_xlibraries['libx11'] is None:
        libx11 = ctyutil.find_library("X11")
        if not libx11:    # not installed
            raise XFormsLoadError("X11 libraries (libx11.so) are not" \
                                  " installed properly")
        else:
            loaded_xlibraries['libx11'] = cty.cdll.LoadLibrary(libx11)
    return loaded_xlibraries['libx11']


def cfuncproto(library, cfuncname, retval, arglist, doc=""):
    """ Prototype for C functions to be wrapped in python """

    loadedfunc = None
    try:
        loadedfunc = getattr(library, cfuncname)
    except AttributeError:
        # function doesn't exist
        loadedfunc = func_notexisting_placeholder(cfuncname)
    else:
        loadedfunc.restype = retval
        loadedfunc.argtypes = arglist
        loadedfunc.__doc__ = doc

    return loadedfunc


# functions to convert a parameter into a python type then into the
# equivalent ctypes type

def convert_to_string(paramname):
    """ Converts paramname to python str and to ctypes c_char_p """

    try:
        retv0 = str(paramname)
    except ValueError:
        raise XFormsTypeError("Parameter cannot be converted into" \
                              " 'str'/'c_char_p'")
    retv = cty.c_char_p(retv0)
    return retv


def convert_to_int(paramname):
    """ Converts paramname to python int and to ctypes c_int """

    if not isinstance(paramname, cty.c_int):
        try:
            retv0 = int(paramname)
        except ValueError:
            raise XFormsTypeError("Parameter cannot be converted into" \
                                  " 'int'/'c_int'")
        retv = cty.c_int(retv0)
        return retv
    else:
        return paramname


convert_to_FL_Coord = convert_to_int


def convert_to_uint(paramname):
    """ Converts paramname to python int and to ctypes c_uint """

    if not isinstance(paramname, cty.c_int):
        try:
            retv0 = int(paramname)
        except ValueError:
            raise XFormsTypeError("Parameter cannot be converted into" \
                                  " 'int'/'c_uint'")
        else:
            retv = cty.c_uint(retv0)
            return retv
    else:
        return paramname


def convert_to_long(paramname):
    """ Converts paramname to python long and to ctypes c_long """

    if not isinstance(paramname, cty.c_long):
        try:
            retv0 = long(paramname)
        except ValueError:
            raise XFormsTypeError("Parameter cannot be converted into" \
                                  " 'long'/'c_long'")
        else:
            retv = cty.c_long(retv0)
            return retv
    else:
        return paramname


def convert_to_ulong(paramname):
    """ Converts paramname to python long and to ctypes c_ulong """

    if not isinstance(paramname, cty.c_ulong):
        try:
            retv0 = long(paramname)
        except ValueError:
            raise XFormsTypeError("Parameter cannot be converted into" \
                                  " 'long'/'c_ulong'")
        else:
            retv = cty.c_ulong(retv0)
            return retv
    else:
        return paramname


convert_to_FL_COLOR = convert_to_ulong
convert_to_Window = convert_to_ulong
convert_to_Pixmap = convert_to_ulong


def convert_to_double(paramname):
    """ Converts paramname to python float and to ctypes c_double """

    if not isinstance(paramname, cty.c_double):
        try:
            retv0 = float(paramname)
        except ValueError:
            raise XFormsTypeError("Parameter cannot be converted into" \
                                  " 'float'/'c_double'")
        else:
            retv = cty.c_double(retv0)
            #print "double", paramname, retv0, retv
            return retv
    else:
        return paramname


def convert_to_float(paramname):
    """ Converts paramname to python float and to ctypes c_float """

    if not isinstance(paramname, cty.c_float):
        try:
            retv0 = float(paramname)
        except ValueError:
            raise XFormsTypeError("Parameter cannot be converted into" \
                                  " 'float'/'c_float'")
        else:
            retv = cty.c_float(retv0)
            #print "float", paramname, retv0, retv
            return retv
    else:
        return paramname


def convert_to_ubyte(paramname):
    """ Converts paramname to ctypes c_ubyte """

    retv = cty.c_ubyte(paramname)
    return retv


def make_int_and_pointer():
    """ Makes a ctypes c_int and its pointer, and returns both """

    baseval = cty.c_int()
    ptrbaseval = cty.byref(baseval)
    return baseval, ptrbaseval


make_FL_Coord_and_pointer = make_int_and_pointer


def make_uint_and_pointer():
    """ Makes a ctypes c_uint and its pointer, and returns both """

    baseval = cty.c_uint()
    ptrbaseval = cty.byref(baseval)
    return baseval, ptrbaseval


def make_long_and_pointer():
    """ Makes a ctypes c_long and its pointer, and returns both """

    baseval = cty.c_long()
    ptrbaseval = cty.byref(baseval)
    return baseval, ptrbaseval


def make_ulong_and_pointer():
    """ Makes a ctypes c_ulong and its pointer, and returns both """

    baseval = cty.c_ulong()
    ptrbaseval = cty.byref(baseval)
    return baseval, ptrbaseval


make_Pixmap_and_pointer = make_ulong_and_pointer
make_FL_COLOR_and_pointer = make_ulong_and_pointer


def make_float_and_pointer():
    """ Makes a ctypes c_float and its pointer, and returns both """

    baseval = cty.c_float()
    ptrbaseval = cty.byref(baseval)
    return baseval, ptrbaseval


def make_double_and_pointer():
    """ Makes a ctypes c_double and its pointer, and returns both """

    baseval = cty.c_double()
    ptrbaseval = cty.byref(baseval)
    return baseval, ptrbaseval


def check_admitted_listvalues(paramname, *valueslist):
    """ Check if paramname value is valid in accordance to a list
        of admissible values.
    """

    if isinstance(valueslist, list):
        if paramname not in valueslist:
            raise XFormsTypeError("Parameter value must be included in " \
                                  "list %s." % valueslist)


def donothing_popupcb(pPopupReturn):
    """ It replaces a callback function not defined for class instances
        as e.g. xfdata.FL_POPUP_ITEM    *temporary*
    """

    return 0


def make_pPopupItem_from_dict(dictofpopupitems):
    """ make_pPopupItem_from_dict(dictofpopupitems) -> pPopupItem

        Taking a python dict (for one dict item ONLY) with a structure similar
        to xfdata.FL_POPUP_ITEM prepares and returns a C-compatible pointer
        to xfdata.FL_POPUP_ITEM.
    """

    if not isinstance(dictofpopupitems, dict):
        raise XFormsTypeError("Parameter must be a dict")
        return None, None

    pyclstext = dictofpopupitems['text']
    spitext = convert_to_string(pyclstext)
    pyclscallback = dictofpopupitems['callback']
    c_picallback = xfc.FL_POPUP_CB(pyclscallback)
    pyclsshortcut = dictofpopupitems['shortcut']
    spishortcut = convert_to_string(pyclsshortcut)
    pyclstype = dictofpopupitems['type']
    check_admitted_listvalues(pyclstype, xfc.POPUPTYPE_list)
    ipitype = convert_to_int(pyclstype)
    pyclsstate = dictofpopupitems['state']
    check_admitted_listvalues(pyclstype, xfc.POPUPSTATE_list)
    ipistate = convert_to_int(pyclsstate)

    popupitem = (xfc.FL_POPUP_ITEM * 2)()
    popupitem[0].text = spitext
    popupitem[0].callback = c_picallback
    popupitem[0].shortcut = spishortcut
    popupitem[0].type = ipitype
    popupitem[0].state = ipistate
    popupitem[1].text = None        # this ends the array, preventing SegFault

    ppopupitem = cty.pointer(popupitem[0])
    keep_cfunc_refs(pyclscallback, c_picallback)
    keep_elem_refs(dictofpopupitems, pyclsshortcut, pyclstype,
                   pyclstext, spitext, pyclsshortcut,
                   spishortcut, pyclstype, ipitype, pyclsstate,
                   ipistate, popupitem, ppopupitem)
    return ppopupitem


def make_pPopupItem_from_list(listofpopupitems):
    """ make_pPopupItem_from_list(listofpopupitems) -> pPopupItem

        Taking a python single list/several lists of popup items, with
        elements in the same order as xfdata.FL_POPUP_ITEM prepares and
        returns a C-compatible pointer to xfdata.FL_POPUP_ITEM.
    """

    # hack to manage both single list and several lists passed as arguments
    try:
        tmpval = listofpopupitems[1][0]
        tmpval = tmpval

    except TypeError:
        # only one list passed (array of 2 member)
        popupitem = (xfc.FL_POPUP_ITEM * 2)()   # 1 list and 1 None

        spitext = convert_to_string(listofpopupitems[0])
        popupitem[0].text = spitext
        c_picallback = xfc.FL_POPUP_CB(listofpopupitems[1])
        popupitem[0].callback = c_picallback
        spishortcut = convert_to_string(listofpopupitems[2])
        popupitem[0].shortcut = spishortcut
        check_admitted_listvalues(listofpopupitems[3], xfc.POPUPTYPE_list)
        ipitype = convert_to_int(listofpopupitems[3])
        popupitem[0].type = ipitype
        check_admitted_listvalues(listofpopupitems[4], xfc.POPUPSTATE_list)
        ipistate = convert_to_int(listofpopupitems[4])
        popupitem[0].state = ipistate

        popupitem[1].text = None       # ends the array, preventing SegFault

        keep_cfunc_refs(listofpopupitems[1], c_picallback)
        keep_elem_refs(popupitem, spitext, spishortcut,
                       ipitype, ipistate)

        ppopupitem = cty.pointer(popupitem[0])
        keep_elem_refs(listofpopupitems, popupitem, ppopupitem)
        return ppopupitem
        # end of 1 list

    else:
        # serie of lists passed (array of n+1 members)
        numarray = len(listofpopupitems)
        lngarray = numarray + 1         # consider final None
        popupitem = (xfc.FL_POPUP_ITEM * lngarray)()
        curitem = 0

        for indx in range(0, numarray):
            spitext = convert_to_string(listofpopupitems[indx][0])
            popupitem[indx].text = spitext
            c_picallback = xfc.FL_POPUP_CB(listofpopupitems[indx][1])
            popupitem[indx].callback = c_picallback
            spishortcut = convert_to_string(listofpopupitems[indx][2])
            popupitem[indx].shortcut = spishortcut
            check_admitted_listvalues(listofpopupitems[indx][3], \
                                      xfc.POPUPTYPE_list)
            ipitype = convert_to_int(listofpopupitems[indx][3])
            popupitem[indx].type = ipitype
            check_admitted_listvalues(listofpopupitems[indx][4], \
                                      xfc.POPUPSTATE_list)
            ipistate = convert_to_int(listofpopupitems[indx][4])
            popupitem[indx].state = ipistate

            keep_cfunc_refs(listofpopupitems[indx][1], c_picallback)
            keep_elem_refs(popupitem[indx], spitext, spishortcut,
                       ipitype, ipistate)
            curitem = indx

        curitem += 1
        popupitem[curitem].text = None       # ends the array, preventing SegFault
        ppopupitem = cty.pointer(popupitem[0])
        keep_elem_refs(listofpopupitems, popupitem, ppopupitem)
        return ppopupitem
        # end of serie of lists




# exported variables
FL_EVENT = (cty.POINTER(xfc.FL_OBJECT)).in_dll(load_so_libforms(), 'FL_EVENT')
fl_current_form = (cty.POINTER(xfc.FL_FORM)).in_dll(load_so_libforms(), \
                   'fl_current_form')
fl_display = (cty.POINTER(xfc.Display)).in_dll(load_so_libforms(), 'fl_display')
fl_screen = (cty.c_int).in_dll(load_so_libforms(), 'fl_screen')
# root window
fl_root = (xfc.Window).in_dll(load_so_libforms(), 'fl_root')
# virtual root window
fl_vroot = (xfc.Window).in_dll(load_so_libforms(), 'fl_vroot')
# screen dimension in pixels
fl_scrh = (cty.c_int).in_dll(load_so_libforms(), 'fl_scrh')
fl_scrw = (cty.c_int).in_dll(load_so_libforms(), 'fl_scrw')
fl_vmode = (cty.c_int).in_dll(load_so_libforms(), 'fl_vmode')
fl_state = (cty.POINTER(xfc.FL_State)).in_dll(load_so_libforms(), 'fl_state')
fl_ul_magic_char = (xfc.STRING).in_dll(load_so_libforms(), 'fl_state')


########################################
# forms.h (Basic.h)
#  Basic definitions and limits.
#  Window system independent prototypes
#  Modify with care
########################################


def FL_IS_UPBOX(boxtype):
    if (boxtype == xfc.FL_UP_BOX) or \
        (boxtype == xfc.FL_OVAL3D_UPBOX) or \
        (boxtype == xfc.FL_ROUNDED3D_UPBOX):
        return True
    else:
        return False


def FL_IS_DOWNBOX(boxtype):
    if (boxtype == xfc.FL_DOWN_BOX) or \
        (boxtype == xfc.FL_OVAL3D_DOWNBOX) or \
        (boxtype == xfc.FL_ROUNDED3D_DOWNBOX):
        return True
    else:
        return False


def FL_TO_DOWNBOX(boxtype):
    if boxtype == xfc.FL_UP_BOX:
        t1 = xfc.FL_DOWN_BOX
    elif boxtype == xfc.FL_ROUNDED3D_UPBOX:
        t1 = xfc.FL_ROUNDED3D_DOWNBOX
    elif boxtype == xfc.FL_OVAL3D_UPBOX:
        t1 = xfc.FL_OVAL3D_DOWNBOX
    else:
        t1 = boxtype
    return t1


def special_style(style):
    if (style >= xfc.FL_SHADOW_STYLE) and \
     (style <= (xfc.FL_EMBOSSED_STYLE + xfc.FL_MAXFONTS)):
        return True
    else:
        return False



# Macro for getting at the object handlers return value

def fl_object_returned(pObject):
    return pObject.contents.returned


# IO other than XEvent Q

FL_IO_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
""" FL_IO_CALLBACK(num, ptr_void)

    prototype for handling IO callback - no return
"""

def fl_add_io_callback(fd, mask, py_IoCallback, vdata):
    """ fl_add_io_callback(fd, mask, py_IoCallback, vdata)

        Registers an input callback function when input is available from fd.

        @param fd: a valid file descriptor in a unix system (int_num)
        @param mask: under what circumstance the input callback
                     should be invoked (int_num)
        @type mask: (from xfdata module) FL_READ, FL_WRITE, FL_EXCEPT
        @param py_IoCallback: python function to be invoked - no return
        @type py_IoCallback: __ funcname (num, ptr_void) __
        @param vdata: user data argument to be passed to function (pointer to
                      void)

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_add_io_callback = cfuncproto(
            load_so_libforms(), "fl_add_io_callback", \
            None, [cty.c_int, cty.c_uint, FL_IO_CALLBACK, cty.c_void_p], \
            """void fl_add_io_callback(int fd, unsigned int mask,
               FL_IO_CALLBACK callback, void * data)
            """)
    ifd = convert_to_int(fd)
    uimask = convert_to_uint(mask)
    c_IoCallback = FL_IO_CALLBACK(py_IoCallback)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_cfunc_refs(c_IoCallback, py_IoCallback)
    keep_elem_refs(fd, ifd, mask, uimask, vdata, pvdata)
    _fl_add_io_callback(ifd, uimask, c_IoCallback, pvdata)


def fl_remove_io_callback(fd, mask, py_IoCallback):
    """ fl_remove_io_callback(fd, mask, py_IoCallback)

        Removes the registered callback function when input is available
        from fd.

        @param fd: a valid file descriptor in a unix system (int_num)
        @param mask: under what circumstance the input callback should
                     be removed (int_num)
        @type mask: (from xfdata module) FL_READ, FL_WRITE, FL_EXCEPT
        @param py_IoCallback: python function to be removed - no return
        @type py_IoCallback: __ funcname (num, ptr_void) __

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_remove_io_callback = cfuncproto(
            load_so_libforms(), "fl_remove_io_callback", \
            None, [cty.c_int, cty.c_uint, FL_IO_CALLBACK], \
            """void fl_remove_io_callback(int fd, unsigned int mask,
               FL_IO_CALLBACK cb)
            """)
    check_admitted_listvalues(mask, xfc.ASYNCIO_list)
    ifd = convert_to_int(fd)
    uimask = convert_to_uint(mask)
    c_IoCallback = FL_IO_CALLBACK(py_IoCallback)
    keep_cfunc_refs(c_IoCallback, py_IoCallback)
    keep_elem_refs(fd, ifd, mask, uimask)
    _fl_remove_io_callback(ifd, uimask, c_IoCallback)


# signals

FL_SIGNAL_HANDLER = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
""" FL_SIGNAL_HANDLER(num, ptr_void)

    prototype for handling signal callback - no return
"""

def fl_add_signal_callback(sglnum, py_SignalHandler, data):
    """ fl_add_signal_callback(sglnum, py_SignalHandler, data)

        Handles the receipt of a signal by registering a callback function
        that gets called when a signal is caught (only 1 function per signal)

        @param sglnum: signal number (int_num)
        @type sglnum: (from signal module) SIGALRM, SIGINT, ...
        @param py_SignalHandler: python function to be invoked after
                                 catching the signal - no return
        @type py_SignalHandler: __ funcname (num, ptr_void) __
        @param data: argument to be passed to function (pointer to void)

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_add_signal_callback = cfuncproto(
            load_so_libforms(), "fl_add_signal_callback", \
            None, [cty.c_int, FL_SIGNAL_HANDLER, cty.c_void_p], \
            """void fl_add_signal_callback(int s, FL_SIGNAL_HANDLER cb,
               void * data)
            """)
    isglnum = convert_to_int(sglnum)
    c_SignalHandler = FL_SIGNAL_HANDLER(py_SignalHandler)
    pdata = cty.cast(data, cty.c_void_p)
    keep_cfunc_refs(c_SignalHandler, py_SignalHandler)
    keep_elem_refs(sglnum, isglnum, data, pdata)
    _fl_add_signal_callback(isglnum, c_SignalHandler, pdata)


def fl_remove_signal_callback(sglnum):
    """ fl_remove_signal_callback(sglnum)

        Removes a previously registered callback function related to a signal.

        @param sglnum: signal number (int_num)
        @type sglnum: (from signal module) SIGALRM, SIGINT, ...

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_remove_signal_callback = cfuncproto(
            load_so_libforms(), "fl_remove_signal_callback", \
            None, [cty.c_int], \
            """void fl_remove_signal_callback(int s)
            """)
    isglnum = convert_to_int(sglnum)
    keep_elem_refs(sglnum, isglnum)
    _fl_remove_signal_callback(isglnum)


def fl_signal_caught(sglnum):
    """ fl_signal_caught(sglnum)

        Informs the main loop of the delivery of the signal signum, the
        signal is received by the application program.

        @param sglnum: signal number (int_num)
        @type sglnum: (from signal module) SIGALRM, SIGINT, ...

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_signal_caught = cfuncproto(
            load_so_libforms(), "fl_signal_caught", \
            None, [cty.c_int], \
            """void fl_signal_caught(int s)
            """)
    isglnum = convert_to_int(sglnum)
    keep_elem_refs(sglnum, isglnum)
    _fl_signal_caught(isglnum)


def fl_app_signal_direct(flag):
    """ fl_app_signal_direct(flag)

        Changes the default behavior of the built-in signal facilities
        (to be called with a true value for flag prior to any use of
        fl_add_signal_callback)

        @param flag: flag to disable/enable (int_num)
        @type flag: 0 (disabled) or 1 (enabled)

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_app_signal_direct = cfuncproto(
            load_so_libforms(), "fl_app_signal_direct", \
            None, [cty.c_int], \
            """void fl_app_signal_direct(int y)
            """)
    iflag = convert_to_int(flag)
    keep_elem_refs(flag, iflag)
    _fl_app_signal_direct(iflag)


# timeouts

FL_TIMEOUT_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
""" FL_TIMEOUT_CALLBACK(num, ptr_void)

    prototype for handling timeout callback
"""

def fl_add_timeout(msec, py_TimeoutCallback, vdata):
    """ fl_add_timeout(msec, py_TimeoutCallback, vdata) -> timer_id

        Adds a timeout callback after a specified elapsed time.

        @param msec: time elapsed in milliseconds (<long>)
        @param py_TimeoutCallback: python function to be invoked - no return
        @type py_TimeoutCallback: __ funcname (num, ptr_void) __
        @param vdata: user data to be passed to function (<pointer to void>)

        @return: timer number id (<int>)

        @example: 

        @status: Tested + Doc + Demo = OK
    """

    _fl_add_timeout = cfuncproto(
            load_so_libforms(), "fl_add_timeout", \
            cty.c_int, [cty.c_long, FL_TIMEOUT_CALLBACK, cty.c_void_p], \
            """int fl_add_timeout(long int msec,
               FL_TIMEOUT_CALLBACK callback, void * data)
            """)
    lmsec = convert_to_long(msec)
    pvdata = cty.cast(vdata, cty.c_void_p)
    c_TimeoutCallback = FL_TIMEOUT_CALLBACK(py_TimeoutCallback)
    keep_cfunc_refs(c_TimeoutCallback, py_TimeoutCallback)
    keep_elem_refs(msec, lmsec, vdata, pvdata)
    retval = _fl_add_timeout(lmsec, c_TimeoutCallback, pvdata)
    return retval


def fl_remove_timeout(idnum):
    """ fl_remove_timeout(idnum)

        Removes a timeout callback function (created with fl_add_timeout).

        @param idnum: timeout number id (<int>)

        @example: 

        @status: Tested + Doc + Demo = OK
    """

    _fl_remove_timeout = cfuncproto(
            load_so_libforms(), "fl_remove_timeout", \
            None, [cty.c_int], \
            """void fl_remove_timeout(int id)
            """)
    iidnum = convert_to_int(idnum)
    keep_elem_refs(idnum, iidnum)
    _fl_remove_timeout(iidnum)


# Basic public routine prototypes

def fl_library_version():
    """ fl_library_version() -> version_rev_id, ver, rev

        Returns consolidated, major and minor version informations.

        @return: (<int>, <int>, <int>) version_rev (computed as 1000 * version
                 + revision), version (e.g. 1 in 1.x.yy), revision (e.g. 0 in
                 x.0.yy)

        @example: 

        @attention: API change from XForms - upstream was
                    fl_library_version(ver, rev)

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_library_version = cfuncproto(
            load_so_libforms(), "fl_library_version", \
            cty.c_int, [cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)], \
            """int fl_library_version(int * ver, int * rev)
            """)
    ver, pver = make_int_and_pointer()
    rev, prev = make_int_and_pointer()
    keep_elem_refs(ver, rev, pver, prev)
    retval = _fl_library_version(pver, prev)
    return retval, ver, rev


# Generic routines that deal with FORMS

def fl_bgn_form(formtype, w, h):
    """ fl_bgn_form(formtype, w, h) -> pForm

        Starts the definition of a form call.

        @param formtype: type of box that is used as a background (<int>)
        @type formtype: (from xfdata module) FL_NO_BOX, FL_UP_BOX,
                        FL_DOWN_BOX, FL_BORDER_BOX, FL_SHADOW_BOX,
                        FL_FRAME_BOX, FL_ROUNDED_BOX, FL_EMBOSSED_BOX,
                        FL_FLAT_BOX, FL_RFLAT_BOX, FL_RSHADOW_BOX,
                        FL_OVAL_BOX, FL_ROUNDED3D_UPBOX, FL_ROUNDED3D_DOWNBOX,
                        FL_OVAL3D_UPBOX, FL_OVAL3D_DOWNBOX, FL_OVAL3D_FRAMEBOX,
                        FL_OVAL3D_EMBOSSEDBOX
        @param w: width of the new form (<int>)
        @param h: height of the new form (<int>)

        @return: form to define (<pointer to xfdata.FL_FORM>)

        @example: 

        @status: Tested + Doc + Demo = OK
    """

    _fl_bgn_form = cfuncproto(
            load_so_libforms(), "fl_bgn_form", \
            cty.POINTER(xfc.FL_FORM), [cty.c_int, xfc.FL_Coord, xfc.FL_Coord],
            """FL_FORM * fl_bgn_form(int type, FL_Coord w, FL_Coord h)
            """)
    check_admitted_listvalues(formtype, xfc.BOXTYPE_list)
    iformtype = convert_to_int(formtype)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(formtype, iformtype, w, iw, h, ih)
    retval = _fl_bgn_form(iformtype, iw, ih)
    return retval


def fl_end_form():
    """
        fl_end_form()

        Ends the definition for a form call, after all required objects
        have been added to a form call.

        @example: 

        @status: Tested + Doc + Demo = OK
    """

    _fl_end_form = cfuncproto(
            load_so_libforms(), "fl_end_form", \
            None, [], \
            """void fl_end_form()
            """)
    _fl_end_form()


def fl_do_forms():
    """
        fl_do_forms() -> pObject

        Starts the main loop of the program and returns only when the state
        of a xfdata.FL_OBJECT changes that has no callback bound to it.

        @return: object changed (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Tested + Doc + Demo = OK
    """

    _fl_do_forms = cfuncproto(
            load_so_libforms(), "fl_do_forms", \
            cty.POINTER(xfc.FL_OBJECT), [], \
            """FL_OBJECT * fl_do_forms()
            """)
    retval = _fl_do_forms()
    return retval


def fl_check_forms():
    """
        fl_check_forms() -> pObject

        Returns None immediately unless the state of one of FL_OBJECT
        (without a callback bound to it) changed.

        @return: object changed (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_check_forms = cfuncproto(
            load_so_libforms(), "fl_check_forms", \
            cty.POINTER(xfc.FL_OBJECT), [], \
            """FL_OBJECT * fl_check_forms()
            """)
    retval = _fl_check_forms()
    return retval


def fl_do_only_forms():
    """
        fl_do_only_forms() -> pObject

        Starts the main loop of the program and returns only when the state
        of an object changes that has no callback bound to it. It does not
        handle user events generated by application windows opened via
        fl_winopen() or similar routines.

        @return: object changed (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_do_only_forms = cfuncproto(
            load_so_libforms(), "fl_do_only_forms", \
            cty.POINTER(xfc.FL_OBJECT), [], \
            """FL_OBJECT * fl_do_only_forms()
            """)
    retval = _fl_do_only_forms()
    return retval


def fl_check_only_forms():
    """
        fl_check_only_forms() -> pObject

        Returns None immediately unless the state of one of the object
        (without a callback bound to it) changed. It does not handle user
        events generated by application windows opened via fl_winopen()
        or similar routines.

        @return: object changed (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_check_only_forms = cfuncproto(
            load_so_libforms(), "fl_check_only_forms", \
            cty.POINTER(xfc.FL_OBJECT), [], \
            """FL_OBJECT * fl_check_only_forms()
            """)
    retval = _fl_check_only_forms()
    return retval


def fl_freeze_form(pForm):
    """
        fl_freeze_form(pForm)

        It does not temporarily redraw a form while changes are being made,
        so all changes made are instead buffered internally.

        @param pForm: form not to be re-drawn temporarily
                      (<pointer to xfdata.FL_FORM>)

        @example: 

        @status: Tested + Doc + Demo = OK
    """

    _fl_freeze_form = cfuncproto(
            load_so_libforms(), "fl_freeze_form", \
            None, [cty.POINTER(xfc.FL_FORM)], \
            """void fl_freeze_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_freeze_form(pForm)


def fl_set_focus_object(pForm, pObject):
    """
        fl_set_focus_object(pForm, pObject)

        Sets the input focus in form to object pObject.

        @param pForm: form whose object has to be focused
                      (<pointer to xfdata.FL_FORM>)
        @param pObject: object to be focused
                        (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_set_focus_object = cfuncproto(
            load_so_libforms(), "fl_set_focus_object", \
            None, [cty.POINTER(xfc.FL_FORM), cty.POINTER(xfc.FL_OBJECT)], \
            """void fl_set_focus_object(FL_FORM * form, FL_OBJECT * obj)
            """)
    keep_elem_refs(pForm, pObject)
    _fl_set_focus_object(pForm, pObject)


fl_set_object_focus = fl_set_focus_object


def fl_get_focus_object(pForm):
    """
        fl_get_focus_object(pForm) -> pObject

        Obtains the object that has the focus on a form.

        @param pForm: form that has a focused object in
                      (<pointer to xfdata.FL_FORM>)

        @return: focused object (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_get_focus_object = cfuncproto(
            load_so_libforms(), "fl_get_focus_object", \
            cty.POINTER(xfc.FL_OBJECT), [cty.POINTER(xfc.FL_FORM)], \
            """FL_OBJECT * fl_get_focus_object(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    retval = _fl_get_focus_object(pForm)
    return retval


def fl_reset_focus_object(pObject):
    """
        fl_reset_focus_object(pObject)

        Resets focus on current object, overriding the FL_UNFOCUS event.

        @param pObject: object towards applying event
                        (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_reset_focus_object = cfuncproto(
            load_so_libforms(), "fl_reset_focus_object", \
            None, [cty.POINTER(xfc.FL_OBJECT)], \
            """void fl_reset_focus_object(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_reset_focus_object(pObject)


#already defined in xfdata
FL_FORM_ATCLOSE = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfc.FL_FORM), cty.c_void_p)
""" FL_FORM_ATCLOSE(pForm, ptr_void) -> num.

    prototype when a form is closed
"""

def fl_set_form_atclose(pForm, py_FormAtclose, vdata):
    """
        fl_set_form_atclose(pForm, py_FormAtclose, vdata) -> FormAtclose func.

        Calls a callback function before closing the form.

        @param pForm: form that receives the message
                      (<pointer to xfdata.FL_FORM>)
        @param py_FormAtclose: python callback function to be called, with
                               returning value
        @type py_FormAtclose: __ funcname (pForm, ptr_void) -> num __
        @param vdata: user data to be passed to function (<pointer to void>)

        @return: xfdata.FL_FORM_ATCLOSE function

        @example: 

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_set_form_atclose = cfuncproto(
            load_so_libforms(), "fl_set_form_atclose", \
            xfc.FL_FORM_ATCLOSE, [cty.POINTER(xfc.FL_FORM), 
            xfc.FL_FORM_ATCLOSE, cty.c_void_p], \
            """FL_FORM_ATCLOSE fl_set_form_atclose(FL_FORM * form,
               FL_FORM_ATCLOSE fmclose, void * data)
            """)
    c_FormAtclose = xfc.FL_FORM_ATCLOSE(py_FormAtclose)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_cfunc_refs(c_FormAtclose, py_FormAtclose)
    keep_elem_refs(pForm, vdata, pvdata)
    retval = _fl_set_form_atclose(pForm, c_FormAtclose, pvdata)
    return retval


def fl_set_atclose(py_FormAtclose, vdata):
    """
        fl_set_atclose(py_FormAtclose, vdata) -> FormAtclose func.

        Calls a callback function before terminating the application.

        @param py_FormAtclose: python callback function to be called, with
                               returning value
        @type py_FormAtclose: __ funcname (pForm, ptr_void) -> num __
        @param vdata: user data to be passed to function (<pointer to void>)

        @return: xfdata.FL_FORM_ATCLOSE function

        @example: def atclose(pform, vdata):
                  > ... ; return 0
                  atclosefunc = fl_set_atclose(atclose, None)

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_set_atclose = cfuncproto(
            load_so_libforms(), "fl_set_atclose", \
            xfc.FL_FORM_ATCLOSE, [xfc.FL_FORM_ATCLOSE, cty.c_void_p], \
            """FL_FORM_ATCLOSE fl_set_atclose(FL_FORM_ATCLOSE fmclose,
               void * data)
            """)
    c_FormAtclose = xfc.FL_FORM_ATCLOSE(py_FormAtclose)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_cfunc_refs(c_FormAtclose, py_FormAtclose)
    keep_elem_refs(vdata, pvdata)
    retval = _fl_set_atclose(c_FormAtclose, pvdata)
    return retval


#already defined in xfdata
FL_FORM_ATACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(xfc.FL_FORM), cty.c_void_p)
""" FL_FORM_ATACTIVATE(pForm, ptr_void)

    prototype when a form is activated
"""

def fl_set_form_atactivate(pForm, py_FormAtactivate, vdata):
    """
        fl_set_form_atactivate(pForm, py_FormAtactivate, vdata) -> FormAtactivate func.

        Register a callback that is called when activation status of a forms
        is enabled,

        @param pForm: activated form (<pointer to xfdata.FL_FORM>)
        @param py_FormAtactivate: python callback function called - no return
        @type py_FormAtactivate: __ funcname (pForm, ptr_void) __
        @param vdata: user data to be passed to function (<pointer to void>)

        @return: xfdata.FL_FORM_ATACTIVATE function

        @example: def atactcb(pform, vdata):
                  > ...
                  activfunc = xf.fl_set_form_atdeactivate(pform, atactcb,
                  None)

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_set_form_atactivate = cfuncproto(
            load_so_libforms(), "fl_set_form_atactivate", \
            xfc.FL_FORM_ATACTIVATE, [cty.POINTER(xfc.FL_FORM),
            xfc.FL_FORM_ATACTIVATE, cty.c_void_p], \
            """FL_FORM_ATACTIVATE fl_set_form_atactivate(FL_FORM * form,
               FL_FORM_ATACTIVATE cb, void * data)
            """)
    c_FormAtactivate = xfc.FL_FORM_ATACTIVATE(py_FormAtactivate)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_cfunc_refs(c_FormAtactivate, py_FormAtactivate)
    keep_elem_refs(pForm, vdata, pvdata)
    retval = _fl_set_form_atactivate(pForm, c_FormAtactivate, pvdata)
    return retval


#already defined in xfdata
FL_FORM_ATDEACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(xfc.FL_FORM), cty.c_void_p)
""" FL_FORM_ATDEACTIVATE(pForm, ptr_void)

    prototype when a form is deactivated
"""

def fl_set_form_atdeactivate(pForm, py_FormAtdeactivate, vdata):
    """
        fl_set_form_atdeactivate(pForm, py_FormAtdeactivate, vdata) -> FormAtdeactivate func.

        Register a callback that is called when activation status of a forms
        is disabled.

        @param pForm: de-activated form (<pointer to xfdata.FL_FORM>)
        @param py_FormAtdeactivate: python callback function called - no return
        @type py_FormAtdeactivate: __ funcname (pForm, ptr_void) __
        @param vdata: user data to be passed to function (<pointer to void>)

        @return: xfdata.FL_FORM_ATDEACTIVATE function

        @example: def atdeactcb(pform, vdata):
                  > ...
                  atdeactivfunc = xf.fl_set_form_atdeactivate(pform, 
                  atdeactiatecb, None)

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_set_form_atdeactivate = cfuncproto(
            load_so_libforms(), "fl_set_form_atdeactivate", \
            xfc.FL_FORM_ATDEACTIVATE, [cty.POINTER(xfc.FL_FORM),
            xfc.FL_FORM_ATDEACTIVATE, cty.c_void_p], \
            """FL_FORM_ATDEACTIVATE fl_set_form_atdeactivate(FL_FORM * form,
               FL_FORM_ATDEACTIVATE cb, void * data)
            """)
    c_FormAtdeactivate = xfc.FL_FORM_ATDEACTIVATE(py_FormAtdeactivate)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_cfunc_refs(c_FormAtdeactivate, py_FormAtdeactivate)
    keep_elem_refs(pForm, vdata, pvdata)
    retval = _fl_set_form_atdeactivate(pForm, c_FormAtdeactivate, pvdata)
    return retval


def fl_unfreeze_form(pForm):
    """
        fl_unfreeze_form(pForm)

        Reverts previous freeze set with fl_freeze_form function, all
        changes made in the meantime in a form are drawn at once.

        @param pForm: form to be re-drawn after freezing
                      (<pointer to xfdata.FL_FORM)

        @example: fl_unfreeze_form(pform)

        @status: Tested + Doc + Demo = OK
    """

    _fl_unfreeze_form = cfuncproto(
            load_so_libforms(), "fl_unfreeze_form", \
            None, [cty.POINTER(xfc.FL_FORM)], \
            """void fl_unfreeze_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_unfreeze_form(pForm)


def fl_deactivate_form(pForm):
    """
        fl_deactivate_form(pForm)

        Deactivates form temporarily, without hiding it, but not allowing
        a user to interact with elements contained in form (buttons, etc.).

        @param pForm: form to be de-activated
                      (<pointer to xfdata.FL_FORM)

        @example: fl_deactivate_form(pform)

        @status: Tested + Doc + Demo = OK
    """

    _fl_deactivate_form = cfuncproto(
            load_so_libforms(), "fl_deactivate_form", \
            None, [cty.POINTER(xfc.FL_FORM)], \
            """void fl_deactivate_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_deactivate_form(pForm)


def fl_activate_form(pForm):
    """
        fl_activate_form(pForm)

        (Re)activates form (deactivated with fl_deactivate_form),
        allowing the user to interact again with elements contained in
        form (buttons, etc.).

        @param pForm: form to be re-activated
                      (<pointer to xfdata.FL_FORM)

        @example: fl_activate_form(pform)

        @status: Tested + Doc + Demo = OK
    """

    _fl_activate_form = cfuncproto(
            load_so_libforms(), "fl_activate_form", \
            None, [cty.POINTER(xfc.FL_FORM)], \
            """void fl_activate_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_activate_form(pForm)


def fl_deactivate_all_forms():
    """
        fl_deactivate_all_forms()

        De-activates all current forms, forbidding any event/user
        interaction.

        @example: fl_deactivate_all_forms()

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_deactivate_all_forms = cfuncproto(
            load_so_libforms(), "fl_deactivate_all_forms", \
            None, [], \
            """void fl_deactivate_all_forms()
            """)
    _fl_deactivate_all_forms()


def fl_activate_all_forms():
    """
        fl_activate_all_forms()

        (Re)activates all current forms, allowing event/user interaction.

        @example: fl_activate_all_forms()

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_activate_all_forms = cfuncproto(
            load_so_libforms(), "fl_activate_all_forms", \
            None, [], \
            """void fl_activate_all_forms()
            """)
    _fl_activate_all_forms()


def fl_freeze_all_forms():
    """
        fl_freeze_all_forms()

        All current forms are not temporarily redrawn, while changes are
        being made and are instead buffered internally.

        @example: fl_freeze_all_forms()

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_freeze_all_forms = cfuncproto(
            load_so_libforms(), "fl_freeze_all_forms", \
            None, [], \
            """void fl_freeze_all_forms()
            """)
    _fl_freeze_all_forms()


def fl_unfreeze_all_forms():
    """
        fl_unfreeze_all_forms()

        All changes made in the meantime in all current forms are drawn
        at once, reverting previous freeze.

        @example: fl_unfreeze_all_forms()

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_unfreeze_all_forms = cfuncproto(
            load_so_libforms(), "fl_unfreeze_all_forms", \
            None, [], \
            """void fl_unfreeze_all_forms()
            """)
    _fl_unfreeze_all_forms()


def fl_scale_form(pForm, xsc, ysc):
    """
        fl_scale_form(pForm, xsc, ysc)

        Scales a form and the objects on it in size and position, indicating
        a scaling factor in x- and y-direction (1.1 = 110 percent, 0.5 = 50,
        etc.) with respect to the current size, and reshapes the window.

        @param pForm: form to be scaled
                      (<pointer to xfdata.FL_FORM>)
        @param xsc: scaling factor in horizontal direction (<float>)
        @param ysc: scaling factor in vertical direction (<float>)

        @example: fl_scale_form(pform, 0.8, 1.2)

        @status: Tested + Doc + Demo = OK
    """

    _fl_scale_form = cfuncproto(
            load_so_libforms(), "fl_scale_form", \
            None, [cty.POINTER(xfc.FL_FORM), cty.c_double, cty.c_double], \
            """void fl_scale_form(FL_FORM * form, double xsc, double ysc)
            """)
    fxsc = convert_to_double(xsc)
    fysc = convert_to_double(ysc)
    keep_elem_refs(pForm, xsc, fxsc, ysc, fysc)
    _fl_scale_form(pForm, fxsc, fysc)


def fl_set_form_position(pForm, x, y):
    """
        fl_set_form_position(pForm, x, y)

        Sets position of form, when placing a form on the screen with
        xfdata.FL_PLACE_GEOMETRY as place argument.

        @param pForm: form whose position is to be set
                      (<pointer to xfdata.FL_FORM>)
        @param x: horizontal position (upper-left corner) (<int>)
        @param y: vertical position (upper-left corner) (<int>)

        @example: fl_set_form_position(pform, 125, 250)

        @status: Tested + Doc + Demo = OK
    """

    _fl_set_form_position = cfuncproto(
            load_so_libforms(), "fl_set_form_position", \
            None, [cty.POINTER(xfc.FL_FORM), xfc.FL_Coord, xfc.FL_Coord], \
            """void fl_set_form_position(FL_FORM * form, FL_Coord x,
               FL_Coord y)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    keep_elem_refs(pForm, x, ix, y, iy)
    _fl_set_form_position(pForm, ix, iy)


def fl_set_form_title(pForm, title):
    """
        fl_set_form_title(pForm, title)

        Changes the form title (and the icon name) after it is shown.

        @param pForm: form whose title has to be changed
                      (<pointer to xfdata.FL_FORM>)
        @param title: new title text for the form (<string>)

        @example: fl_set_form_title(pform, "My great form")

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_set_form_title = cfuncproto(
            load_so_libforms(), "fl_set_form_title", \
            None, [cty.POINTER(xfc.FL_FORM), xfc.STRING], \
            """void fl_set_form_title(FL_FORM * form, const char * name)
            """)
    stitle = convert_to_string(title)
    keep_elem_refs(pForm, title, stitle)
    _fl_set_form_title(pForm, stitle)


def fl_set_app_mainform(pForm):
    """
        fl_set_app_mainform(pForm)

        Designates the main form. By default, the main form is set
        automatically by the library to the first full-bordered form shown.

        @param pForm: form to be set as main one
                      (<pointer to xfdata.FL_FORM>)

        @example: fl_set_app_mainform(pform2)

        @status: Tested + Doc + Demo = OK
    """

    _fl_set_app_mainform = cfuncproto(
            load_so_libforms(), "fl_set_app_mainform",
            None, [cty.POINTER(xfc.FL_FORM)], \
            """void fl_set_app_mainform(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_set_app_mainform(pForm)


def fl_get_app_mainform():
    """
        fl_get_app_mainform() -> pForm

        Return the current mainform.

        @return: main form (<pointer to xfdata.FL_FORM>)

        @example: fl_get_app_mainform()

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_get_app_mainform = cfuncproto(
            load_so_libforms(), "fl_get_app_mainform",
            cty.POINTER(xfc.FL_FORM), [], \
            """FL_FORM * fl_get_app_mainform()
            """)
    retval = _fl_get_app_mainform()
    return retval


def fl_set_app_nomainform(flag):
    """
        fl_set_app_nomainform(flag)

        In some situations, either because the concept of an application main
        form does not apply (for example, an application might have multiple
        full-bordered windows), or under some (buggy) window managers, the
        designation of a main form may cause stacking order problems. To
        workaround these, it can disable the designation of a main form
        (must be called before any full-bordered form is shown)
 
        @param flag: flag to disable/enable mainform designation (<int>)
        @type flag: 1 (to disable designation) or 1 (to enable designation)

        @example: fl_set_app_nomainform(1)

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_set_app_nomainform = cfuncproto(
            load_so_libforms(), "fl_set_app_nomainform",
            None, [cty.c_int], \
            """void fl_set_app_nomainform(int flag)
            """)
    iflag = convert_to_int(flag)
    keep_elem_refs(flag, iflag)
    _fl_set_app_nomainform(iflag)


#already defined in xfdata
#FL_FORMCALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(xfc.FL_OBJECT), cty.c_void_p)

def fl_set_form_callback(pForm, py_FormCallbackPtr, vdata):
    """
        fl_set_form_callback(pForm, py_FormCallbackPtr, vdata)

        Sets the callback function bound to an entire form. Whenever
        fl_do_forms() or fl_check_forms() would return an object in form they
        call the routine callback instead, with the object as an argument. So
        With each form you can associate its own callback routine. For
        objects that have their own callbacks, the object callbacks have
        priority over the form callback.

        @param pForm: form whose callback has to be set
                      (<pointer to xfdata.FL_FORM>)
        @param py_FormCallbackPtr: python callback to be set - no return
        @type py_FormCallbackPtr: __ funcname (pObject, ptr_void) __
        @param vdata: user data to be passed to function (<pointer to void>))

        @example: def formcb(pobj, vdata):
                  > ...
                  fl_set_form_callback(pform, formcb, None)

        @status: Tested + Doc + Demo = OK
    """

    _fl_set_form_callback = cfuncproto(
            load_so_libforms(), "fl_set_form_callback", \
            None, [cty.POINTER(xfc.FL_FORM), xfc.FL_FORMCALLBACKPTR, \
            cty.c_void_p], \
            """void fl_set_form_callback(FL_FORM * form,
               FL_FORMCALLBACKPTR callback, void * d)
            """)
    c_FormCallbackPtr = xfc.FL_FORMCALLBACKPTR(py_FormCallbackPtr)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_cfunc_refs(c_FormCallbackPtr, py_FormCallbackPtr)
    keep_elem_refs(pForm, vdata, pvdata)
    _fl_set_form_callback(pForm, c_FormCallbackPtr, pvdata)


fl_set_form_call_back = fl_set_form_callback


def fl_set_form_size(pForm, w, h):
    """
        fl_set_form_size(pForm, w, h)

        Sets the size of form.

        @param pForm: form whose size has to be set
                      (<pointer to xfdata.FL_FORM>)
        @param w: width of form in coord units (<int>)
        @param h: height of form in coord units (<int>)

        @example: fl_set_form_size(pform, 200, 200)

        @status: Tested + Doc + Demo = OK
    """

    _fl_set_form_size = cfuncproto(
            load_so_libforms(), "fl_set_form_size", \
            None, [cty.POINTER(xfc.FL_FORM), xfc.FL_Coord, xfc.FL_Coord], \
            """void fl_set_form_size(FL_FORM * form, FL_Coord w, FL_Coord h)
            """)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(pForm, w, iw, h, ih)
    _fl_set_form_size(pForm, iw, ih)


def fl_set_form_hotspot(pForm, x, y):
    """
        fl_set_form_hotspot(pForm, x, y)

        Sets the position of the hotspot, for showing a form so that a
        particular point is under the mouse. You have to use
        xfdata.FL_PLACE_HOTSPOT as place argument in fl_show_form().

        @param pForm: form to be set
                      (<pointer to xfdata.FL_FORM>)
        @param x: horizontal position (upper-left corner) (<int>)
        @param y: vertical position (upper-left corner) (<int>)

        @example: fl_set_form_hotspot(pform, 300, 50)

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_set_form_hotspot = cfuncproto(
            load_so_libforms(), "fl_set_form_hotspot", \
            None, [cty.POINTER(xfc.FL_FORM), xfc.FL_Coord, xfc.FL_Coord], \
            """void fl_set_form_hotspot(FL_FORM * form, FL_Coord x,
               FL_Coord y)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    keep_elem_refs(pForm, x, ix, y, iy)
    _fl_set_form_hotspot(pForm, ix, iy)


def fl_set_form_hotobject(pForm, pObject):
    """
        fl_set_form_hotobject(pForm, pObject)

        Sets the hotspot for showing a form so that a particular object is
        under the mouse. You have to use xfdata.FL_PLACE_HOTSPOT as place
        argument in fl_show_form().

        @param pForm: form whose object has to be set
                      (<pointer to xfdata.FL_FORM>)
        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)

        @example: fl_set_form_hotobject(pform, pobj)

        @status: Tested + Doc + Demo = OK
    """

    _fl_set_form_hotobject = cfuncproto(
            load_so_libforms(), "fl_set_form_hotobject", \
            None, [cty.POINTER(xfc.FL_FORM), cty.POINTER(xfc.FL_OBJECT)], \
            """void fl_set_form_hotobject(FL_FORM * form, FL_OBJECT * ob)
            """)
    keep_elem_refs(pForm, pObject)
    _fl_set_form_hotobject(pForm, pObject)


def fl_set_form_minsize(pForm, w, h):
    """
        fl_set_form_minsize(pForm, w, h)

        Sets the minimum size a form can have, if interactive resizing is
        allowed (e.g., by showing the form with xfdata.FL_PLACE_POSITION).

        @param pForm: form
                      (<pointer to xfdata.FL_FORM>)
        @param w: width of form in coord units (<int>)
        @param h: height of form in coord units (<int>)

        @example: fl_set_form_minsize(pform, 200, 300)

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_set_form_minsize = cfuncproto(
            load_so_libforms(), "fl_set_form_minsize", \
            None, [cty.POINTER(xfc.FL_FORM), xfc.FL_Coord, xfc.FL_Coord], \
            """void fl_set_form_minsize(FL_FORM * form, FL_Coord w, FL_Coord h)
            """)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(pForm, w, iw, h, ih)
    _fl_set_form_minsize(pForm, iw, ih)


def fl_set_form_maxsize(pForm, w, h):
    """
        fl_set_form_maxsize(pForm, w, h)

        Sets the maximum size a form can have, if interactive resizing is
        allowed (e.g., by showing the form with xfdata.FL_PLACE_POSITION).

        @param pForm: form whose size has to be set
                      (<pointer to xdata.FL_FORM>)
        @param w: width of form in coord units (<int>)
        @param h: height of form in coord units (<int>)

        @example: fl_set_form_maxsize(pform, 400, 450)

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_set_form_maxsize = cfuncproto(
            load_so_libforms(), "fl_set_form_maxsize", \
            None, [cty.POINTER(xfc.FL_FORM), xfc.FL_Coord, xfc.FL_Coord], \
            """void fl_set_form_maxsize(FL_FORM * form, FL_Coord w,
               FL_Coord h)
            """)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(pForm, w, iw, h, ih)
    _fl_set_form_maxsize(pForm, iw, ih)


# TODO: find if key mask hae to be included
def fl_set_form_event_cmask(pForm, cmask):
    """
        fl_set_form_event_cmask(pForm, cmask)

        Sets the event compress mask a form can react to.

        @param pForm: form
                      (<pointer to xfdata.FL_FORM>)
        @param cmask: event compress mask for form (<long_pos>)
        @type cmask: (from xfdata module) one or more OR-ed between
                     NoEventMask, KeyPressMask, KeyReleaseMask, ButtonPressMask
                     ButtonReleaseMask, EnterWindowMask, LeaveWindowMask,
                     PointerMotionMask, PointerMotionHintMask,
                     Button1MotionMask, Button2MotionMask, Button3MotionMask,
                     Button4MotionMask, Button5MotionMask, ButtonMotionMask,
                     KeymapStateMask, ExposureMask, VisibilityChangeMask,
                     StructureNotifyMask, ResizeRedirectMask,
                     SubstructureNotifyMask, SubstructureRedirectMask,
                     FocusChangeMask, ColormapChangeMask, OwnerGrabButtonMask,
                     FL_ALL_EVENT, ... ?

        @example: fl_set_form_event_cmask(pform, FL_ALL_EVENT)

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_set_form_event_cmask = cfuncproto(
            load_so_libforms(), "fl_set_form_event_cmask", \
            None, [cty.POINTER(xfc.FL_FORM), cty.c_ulong], \
            """void fl_set_form_event_cmask(FL_FORM * form,
               long unsigned int cmask)
            """)
    ulcmask = convert_to_ulong(cmask)
    keep_elem_refs(pForm, cmask, ulcmask)
    _fl_set_form_event_cmask(pForm, ulcmask)


def fl_get_form_event_cmask(pForm):
    """
        fl_get_form_event_cmask(pForm) -> compress mask ID

        Returns event compress mask a form can react to.

        @param pForm: pointer to form
                      (<pointer to xfdata.FL_FORM>)

        @return: event mask <long_pos>

        @example: cmaskid = fl_get_form_event_cmask(pform)

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_get_form_event_cmask = cfuncproto(
            load_so_libforms(), "fl_get_form_event_cmask", \
            cty.c_ulong, [cty.POINTER(xfc.FL_FORM)], \
            """long unsigned int fl_get_form_event_cmask(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    retval = _fl_get_form_event_cmask(pForm)
    return retval


def fl_set_form_geometry(pForm, x, y, w, h):
    """
        fl_set_form_geometry(pForm, x, y, w, h)

        Sets the geometry (position and size) of a form.

        @param pForm: pointer to form to be set
                      (<pointer to xfdata.FL_FORM>)
        @param x: horizontal position (upper-left corner) (<int>)
        @param y: vertical position (upper-left corner) (<int>)
        @param w: width of form in coord units (<int>)
        @param h: height of form in coord units (<int>)

        @example: fl_set_form_geometry(pform, 300, 400, 150, 150)

        @status: Tested + Doc + Demo = OK
    """

    _fl_set_form_geometry = cfuncproto(
            load_so_libforms(), "fl_set_form_geometry", \
            None, [cty.POINTER(xfc.FL_FORM), xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord], \
            """void fl_set_form_geometry(FL_FORM * form, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(pForm, x, ix, y, iy, w, iw, h, ih)
    _fl_set_form_geometry(pForm, ix, iy, iw, ih)


fl_set_initial_placement = fl_set_form_geometry


def fl_show_form(pForm, place, border, title):
    """
        fl_show_form(pForm, place, border, title) -> win

        Shows the form.

        @param pForm: form to be shown
                      (<pointer to xfdata.FL_FORM>)
        @param place: where form has to be placed (<int>)
        @type place: (from xfdata module) FL_PLACE_FREE, FL_PLACE_MOUSE,
                     FL_PLACE_CENTER, FL_PLACE_POSITION, FL_PLACE_SIZE,
                     FL_PLACE_GEOMETRY, FL_PLACE_ASPECT, FL_PLACE_FULLSCREEN,
                     FL_PLACE_HOTSPOT, FL_PLACE_ICONIC, FL_FREE_SIZE,
                     FL_PLACE_FREE_CENTER, FL_PLACE_CENTERFREE
        @param border: window manager decoration (<int>)
        @type border: (from xfdata module) FL_FULLBORDER, FL_TRANSIENT,
                      FL_NOBORDER
        @param title: title of form (<string>)

        @returns: window id (<long_pos>)

        @example: wind = fl_show_form(pform, FL_PLACE_FREE, FL_FULLBORDER,
                  "MyForm")

        @status: Tested + Doc + Demo = OK
    """

    _fl_show_form = cfuncproto(
            load_so_libforms(), "fl_show_form",
            xfc.Window, [cty.POINTER(xfc.FL_FORM), cty.c_int, cty.c_int,
            xfc.STRING], \
            """Window fl_show_form(FL_FORM * form, int place, int border,
               const char * name)
            """)
    check_admitted_listvalues(place, xfc.PLACE_list)
    check_admitted_listvalues(border, xfc.DECORATION_list)
    iplace = convert_to_int(place)
    iborder = convert_to_int(border)
    stitle = convert_to_string(title)
    keep_elem_refs(pForm, place, iplace, border, iborder, title, stitle)
    retval = _fl_show_form(pForm, iplace, iborder, stitle)
    return retval


def fl_hide_form(pForm):
    """
        fl_hide_form(pForm)

        Hides the form.

        @param pForm: form to be hidden
                      (<pointer to xfdata.FL_FORM>)

        @example: fl_hide_form(pform)

        @status: Tested + Doc + Demo = OK
    """

    _fl_hide_form = cfuncproto(
            load_so_libforms(), "fl_hide_form",
            None, [cty.POINTER(xfc.FL_FORM)], \
            """void fl_hide_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_hide_form(pForm)


def fl_free_form(pForm):
    """
        fl_free_form(pForm)

        Frees the memory used by a form, hiding and deleting it together
        with all its objects.

        @param pForm: form to be freed
                      (<pointer to xfdata.FL_FORM>)

        @example: fl_free_form(pform)

        @status: Tested + Doc + Demo = OK
    """

    _fl_free_form = cfuncproto(
            load_so_libforms(), "fl_free_form",
            None, [cty.POINTER(xfc.FL_FORM)], \
            """void fl_free_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_free_form(pForm)


def fl_redraw_form(pForm):
    """
        fl_redraw_form(pForm)

        (Re)draws an entire form.

        @param pForm: form to redraw
                      (<pointer to xfdata.FL_FORM>)

        @example: fl_redraw_form(pform)

        @status: Tested + Doc + Demo = OK
    """

    _fl_redraw_form = cfuncproto(
            load_so_libforms(), "fl_redraw_form",
            None, [cty.POINTER(xfc.FL_FORM)], \
            """void fl_redraw_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    _fl_redraw_form(pForm)


def fl_set_form_dblbuffer(pForm, flag):
    """
        fl_set_form_dblbuffer(pForm, flag)

        @param pForm: form to set
                      (<pointer to xfdata.FL_FORM>)
        @param flag: flag to disable/enable doublebuffer (<int>)
        @type flag: 0 (disabled) or 1 (enabled)

        @example: 

        @status: Tested + Doc + Demo = OK
    """

    _fl_set_form_dblbuffer = cfuncproto(
            load_so_libforms(), "fl_set_form_dblbuffer", \
            None, [cty.POINTER(xfc.FL_FORM), cty.c_int], \
            """void fl_set_form_dblbuffer(FL_FORM * form, int y)
            """)
    iflag = convert_to_int(flag)
    keep_elem_refs(pForm, flag, iflag)
    _fl_set_form_dblbuffer(pForm, iflag)


def fl_prepare_form_window(pForm, place, border, title):
    """
        fl_prepare_form_window(pForm, place, border, title) -> win

        Creates a window that obeys any and all constraints just as
        fl_show_form() does but remains unmapped (not shown), returning
        its window handle. You need fl_show_form_window after to show it.

        @param pForm: form to display
                      (<pointer to xfdata.FL_FORM>)
        @param place: where has to be placed (<int>)
        @type place: (from xfdata module) FL_PLACE_FREE, FL_PLACE_MOUSE,
                     FL_PLACE_CENTER, FL_PLACE_POSITION, FL_PLACE_SIZE,
                     FL_PLACE_GEOMETRY, FL_PLACE_ASPECT, FL_PLACE_FULLSCREEN,
                     FL_PLACE_HOTSPOT, FL_PLACE_ICONIC, FL_FREE_SIZE,
                     FL_PLACE_FREE_CENTER, FL_PLACE_CENTERFREE
        @param border: window manager decoration (<int>)
        @type border: (from xfdata module) FL_FULLBORDER, FL_TRANSIENT,
                      FL_NOBORDER
        @param title: text title of form (<string>)

        @returns: window id (<long_pos>)

        @example: wind = fl_prepare_form_window(pform, FL_PLACE_FREE,
                  FL_FULLBORDER, "MyForm")


        @status: Tested + Doc + NoDemo = OK
    """

    _fl_prepare_form_window = cfuncproto(
            load_so_libforms(), "fl_prepare_form_window", \
            xfc.Window, [cty.POINTER(xfc.FL_FORM), cty.c_int, cty.c_int,
            xfc.STRING], \
            """Window fl_prepare_form_window(FL_FORM * form, int place,
               int border, const char * name)
            """)
    check_admitted_listvalues(place, xfc.PLACE_list)
    check_admitted_listvalues(border, xfc.DECORATION_list)
    iplace = convert_to_int(place)
    iborder = convert_to_int(border)
    stitle = convert_to_string(title)
    keep_elem_refs(pForm, place, iplace, border, iborder, title, stitle)
    retval = _fl_prepare_form_window(pForm, iplace, iborder, stitle)
    return retval


def fl_show_form_window(pForm):
    """
        fl_show_form_window(pForm) -> win

        Maps (shows) a window of form that has been created before with
        fl_prepare_form_window().

        @param pForm: form whose window has to be shown
                      (<pointer to xfdata.FL_FORM>)

        @returns: window id (<long_pos>)

        @example: fl_show_form_window(pform)

        @status: Tested + Doc + Demo = OK
    """

    _fl_show_form_window = cfuncproto(
            load_so_libforms(), "fl_show_form_window", \
            xfc.Window, [cty.POINTER(xfc.FL_FORM)], \
            """Window fl_show_form_window(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    retval = _fl_show_form_window(pForm)
    return retval


def fl_adjust_form_size(pForm):
    """
        fl_adjust_form_size(pForm) -> maxfact

        Similar to fl_fit_object_label, but will do it for all objects and
        has a smaller threshold. Mainly intended for compensation for font
        size variations.

        @param pForm: form whose size ha to be adjusted
                      (<pointer to xfdata.FL_FORM>)

        @returns: max factor id (<float>)

        @example: fl_adjust_form_size(pform)

        @status: Tested + Doc + Demo = OK
    """

    _fl_adjust_form_size = cfuncproto(
            load_so_libforms(), "fl_adjust_form_size", \
            cty.c_double, [cty.POINTER(xfc.FL_FORM)], \
            """double fl_adjust_form_size(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    retval = _fl_adjust_form_size(pForm)
    return retval


def fl_form_is_visible(pForm):
    """
        fl_form_is_visible(pForm) -> state

        Returns if form is visible (non zero) or not (zero).

        @param pForm: form to evaluate
                      (<pointer to xfdata.FL_FORM>)

        @returns: visibility state (0 invisible, else visible) (<int>)

        @example: visib = fl_form_is_visible(pform)

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_form_is_visible = cfuncproto(
            load_so_libforms(), "fl_form_is_visible", \
            cty.c_int, [cty.POINTER(xfc.FL_FORM)], \
            """int fl_form_is_visible(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    retval = _fl_form_is_visible(pForm)
    return retval


def fl_form_is_iconified(pForm):
    """
        fl_form_is_iconified(pForm) -> state

        Returns if a form's window is in iconified state (non-zero) or not.

        @param pForm: form to evaluate
                      (<pointer to xfdata.FL_FORM>)

        @returns: iconic state (0 not iconified, else iconified)

        @example: iconif = fl_form_is_iconified(pform)

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_form_is_iconified = cfuncproto(
            load_so_libforms(), "fl_form_is_iconified", \
            cty.c_int, [cty.POINTER(xfc.FL_FORM)], \
            """int fl_form_is_iconified(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    retval = _fl_form_is_iconified(pForm)
    return retval


# TODO: verify if all events are included
def fl_register_raw_callback(pForm, mask, py_RawCallback):
    """
        fl_register_raw_callback(pForm, mask, py_RawCallback) -> old raw_callback func.

        Register pre-emptive event handlers.

        @param pForm: form
                      (<pointer to xfdata.FL_FORM>)
        @param mask: key/button/window event mask (press, release, motion,
                     enter, leave etc..) (<long_pos>)
        @type mask: (from xfdata module) NoEventMask, KeyPressMask,
                    KeyReleaseMask, ButtonPressMask, ButtonReleaseMask,
                    EnterWindowMask, LeaveWindowMask, PointerMotionMask,
                    PointerMotionHintMask, Button1MotionMask,
                    Button2MotionMask, Button3MotionMask, Button4MotionMask,
                    Button5MotionMask, ButtonMotionMask, KeymapStateMask,
                    ExposureMask, VisibilityChangeMask, StructureNotifyMask,
                    ResizeRedirectMask, SubstructureNotifyMask,
                    SubstructureRedirectMask, FocusChangeMask,
                    ColormapChangeMask, OwnerGrabButtonMask, ShiftMask,
                    LockMask, ControlMask, Mod1Mask, Mod2Mask, Mod3Mask,
                    Mod4Mask, Mod5Mask, Button1Mask, Button2Mask, Button3Mask,
                    Button4Mask, Button5Mask, AnyModifier, FL_ALL_EVENT
        @param py_RawCallback: python callback function, with return value
        @type py_RawCallback: __ funcname (pForm, pXEvent) -> num __

        @return: xfdata.FL_RAW_CALLBACK old function

        @example: def rawcb(pform, xev):
                  > ... ; return 0
                  oldrawcb = fl_register_callback()

        @status: Tested + Doc + Demo = OK
    """

    #FL_RAW_CALLBACK = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfc.FL_FORM), \
    #                                 cty.POINTER(xfc.XEvent))
    _fl_register_raw_callback = cfuncproto(
            load_so_libforms(), "fl_register_raw_callback", \
            xfc.FL_RAW_CALLBACK, [cty.POINTER(xfc.FL_FORM), cty.c_ulong,
            xfc.FL_RAW_CALLBACK], \
            """FL_RAW_CALLBACK fl_register_raw_callback(FL_FORM * form,
               long unsigned int mask, FL_RAW_CALLBACK rcb)
            """)
    ulmask = convert_to_ulong(mask)
    c_RawCallback = xfc.FL_RAW_CALLBACK(py_RawCallback)
    keep_cfunc_refs(c_RawCallback, py_RawCallback)
    keep_elem_refs(pForm, mask, ulmask)
    retval = _fl_register_raw_callback(pForm, ulmask, c_RawCallback)
    return retval


fl_register_call_back = fl_register_raw_callback


def fl_bgn_group():
    """
        fl_bgn_group() -> pObject

        Starts a group of objects definition. Usage cases are e.g. to define
        a serie of objects to be hidden or deactivated or a serie of radio
        buttons.

        @returns: group started (<pointer to xfdata.FL_OBJECT>)

        @example: group = fl_bgn_group()

        @status: Tested + Doc + Demo = OK
    """

    _fl_bgn_group = cfuncproto(
            load_so_libforms(), "fl_bgn_group", \
            cty.POINTER(xfc.FL_OBJECT), [], \
            """FL_OBJECT * fl_bgn_group()
            """)
    retval = _fl_bgn_group()
    return retval


def fl_end_group():
    """
        fl_end_group()

        Ends a group definition.

        @example: fl_end_group()

        @status: Tested + Doc + Demo = OK
    """

    _fl_end_group = cfuncproto(
            load_so_libforms(), "fl_end_group", \
            None, [], \
            """void fl_end_group()
            """)
    _fl_end_group()


def fl_addto_group(pObject):
    """
        fl_addto_group(pObject) -> pForm

        Reopens a group (after fl_end_group) to allow addition of further
        objects.

        @param pObject: group object to reopen
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: form (<pointer to xfdata.FL_FORM>) or None (on failure)

        @example: group = fl_addto_group(closedgroup)

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_addto_group = cfuncproto(
            load_so_libforms(), "fl_addto_group", \
            cty.POINTER(xfc.FL_OBJECT), [cty.POINTER(xfc.FL_OBJECT)], \
            """FL_OBJECT * fl_addto_group(xfc.FL_OBJECT * group)
            """)
    keep_elem_refs(pObject)
    retval = _fl_addto_group(pObject)
    return retval


# Routines that deal with FL_OBJECTS

def fl_get_object_objclass(pObject):
    """
        fl_get_object_objclass(pObject) -> id

        Return the object class (button, lightbutton, box, nmenu, counter,
        etc.) of an object.

        @param pObject: object to evaluate
                        (<pointer to xfc.FL_OBJECT>)

        @returns: objclass id (<int>)

        @example: obcls = fl_get_object_objclass(pobj)

        @status: Tested + Doc + NoDemo = OK
    """

    _fl_get_object_objclass = cfuncproto(
            load_so_libforms(), "fl_get_object_objclass", \
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)], \
            """int fl_get_object_objclass(xfc.FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_object_objclass(pObject)
    return retval


def fl_get_object_type(pObject):
    """
        fl_get_object_type(pObject) -> type id

        Return the type () of an object.

        @param pObject: object to evaluate
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: type id (<int>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_object_type = cfuncproto(
            load_so_libforms(), "fl_get_object_type", \
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)], \
            """int fl_get_object_type(xfc.FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_object_type(pObject)
    return retval


def fl_set_object_boxtype(pObject, boxtype):
    """
        fl_set_object_boxtype(pObject, boxtype)

        Sets the shape of box of an object. Not all possible boxtypes are
        suitable for all types of objects.

        @param pObject: object whose boxtype has to be set
                        (<pointer to xfdata.FL_OBJECT>)
        @param boxtype: type of the box to be set (<int>)
        @type boxtype: (from xfdata module) FL_NO_BOX, FL_UP_BOX, FL_DOWN_BOX,
                       FL_BORDER_BOX, FL_SHADOW_BOX, FL_FRAME_BOX,
                       FL_ROUNDED_BOX, FL_EMBOSSED_BOX, FL_FLAT_BOX,
                       FL_RFLAT_BOX, FL_RSHADOW_BOX, FL_OVAL_BOX,
                       FL_ROUNDED3D_UPBOX, FL_ROUNDED3D_DOWNBOX,
                       FL_OVAL3D_UPBOX, FL_OVAL3D_DOWNBOX, FL_OVAL3D_FRAMEBOX,
                       FL_OVAL3D_EMBOSSEDBOX

        @example: 

        @status: Tested + Doc + Demo = OK
    """

    _fl_set_object_boxtype = cfuncproto(
            load_so_libforms(), "fl_set_object_boxtype", \
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int], \
            """void fl_set_object_boxtype(xfc.FL_OBJECT * ob, int boxtype)
            """)
    check_admitted_listvalues(boxtype, xfc.BOXTYPE_list)
    iboxtype = convert_to_int(boxtype)
    keep_elem_refs(pObject, boxtype, iboxtype)
    _fl_set_object_boxtype(pObject, iboxtype)


def fl_get_object_boxtype(pObject):
    """
        fl_get_object_boxtype(pObject) -> boxtype id

        Returns the current boxtype of an object.

        @param pObject: object to evaluate
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: boxtype id (<int>)

        @example: 

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_get_object_boxtype = cfuncproto(
            load_so_libforms(), "fl_get_object_boxtype", \
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)], \
            """int fl_get_object_boxtype(xfc.FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_object_boxtype(pObject)
    return retval


def fl_set_object_bw(pObject, bw):
    """
        fl_set_object_bw(pObject, bw)

        Sets the borderwidth of an object. If requested borderwidth is 0
        -1 is used.

        @param pObject: pointer to object
                        (<pointer to xfdata.FL_OBJECT>)
        @param bw: borderwidth of object (<int>)

        @example: fl_set_object_bw(obj, 2)

        @status: Tested + Doc + Demo = OK
    """

    _fl_set_object_bw = cfuncproto(
            load_so_libforms(), "fl_set_object_bw", \
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int], \
            """void fl_set_object_bw(xfc.FL_OBJECT * ob, int bw)
            """)
    ibw = convert_to_int(bw)
    keep_elem_refs(pObject, bw, ibw)
    _fl_set_object_bw(pObject, ibw)


def fl_get_object_bw(pObject):
    """
        fl_get_object_bw(pObject) -> bw

        Returns the borderwidth of an object.

        @param pObject: object to evaluate
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: borderwidth (<int>)

        @example: bw = fl_get_object_bw(obj)

        @attention: API change from XForms - upstream was
                    fl_get_object_bw(pObject, bw)

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_get_object_bw = cfuncproto(
            load_so_libforms(), "fl_get_object_bw", \
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_int)], \
            """void fl_get_object_bw(xfc.FL_OBJECT * ob, int * bw)
            """)
    bw, pbw = make_int_and_pointer()
    keep_elem_refs(pObject, bw, pbw)
    _fl_get_object_bw(pObject, pbw)
    return bw


def fl_set_object_resize(pObject, what):
    """
        fl_set_object_resize(pObject, what)

        Sets the resize property of an object.

        @param pObject: object to set
                        (<pointer to xfdata.FL_OBJECT>)
        @param what: resize property (<int_pos>)
        @type what: (from xfdata module) FL_RESIZE_NONE, FL_RESIZE_X,
                    FL_RESIZE_Y, FL_RESIZE_ALL

        @example: fl_set_object_resize(obj, FL_RESIZE_ALL)

        @status: Tested + Doc + Demo = OK
    """

    _fl_set_object_resize = cfuncproto(
            load_so_libforms(), "fl_set_object_resize", \
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_uint], \
            """void fl_set_object_resize(xfc.FL_OBJECT * ob, unsigned int what)
            """)
    check_admitted_listvalues(what, xfc.RESIZE_list)
    uiwhat = convert_to_uint(what)
    keep_elem_refs(pObject, what, uiwhat)
    _fl_set_object_resize(pObject, uiwhat)


def fl_get_object_resize(pObject):
    """
        fl_get_object_resize(pObject) -> what

        Returns the resize property of an object.

        @param pObject: object to evaluate
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: resize property (<int_pos>)

        @attention: API change from upstream
                    fl_get_object_resize(pObject, what)

        @example: resize = fl_get_object_resize(obj)

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_get_object_resize = cfuncproto(
            load_so_libforms(), "fl_get_object_resize", \
             None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_uint)], \
            """void fl_get_object_resize(xfc.FL_OBJECT * ob,
               unsigned int * what)
            """)
    what, pwhat = make_uint_and_pointer()
    keep_elem_refs(pObject, what, pwhat)
    _fl_get_object_resize(pObject, pwhat)
    return what


def fl_set_object_gravity(pObject, nw, se):
    """
        fl_set_object_gravity(pObject, nw, se)

        Sets the gravity properties of an object.

        @param pObject: object to be set
                        (<pointer to xfdata.FL_OBJECT>)
        @param nw: gravity property for NorthWest (<int_pos>)
        @type nw: (from xfdata module) FL_North, FL_NorthEast, FL_NorthWest,
                  FL_South, FL_SouthEast, FL_SouthWest, FL_East, FL_West,
                  FL_NoGravity, FL_ForgetGravity
        @param se: gravity property for SouthEast (<int_pos>)
        @type se: (from xfdata module) FL_North, FL_NorthEast, FL_NorthWest,
                  FL_South, FL_SouthEast, FL_SouthWest, FL_East, FL_West,
                  FL_NoGravity, FL_ForgetGravity

        @example: fl_set_object_gravity(obj, FL_North, FL_East)

        @status: Tested + Doc + Demo = OK
    """

    _fl_set_object_gravity = cfuncproto(
            load_so_libforms(), "fl_set_object_gravity", \
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_uint, cty.c_uint], \
            """void fl_set_object_gravity(xfc.FL_OBJECT * ob, unsigned int nw,
               unsigned int se)
            """)
    check_admitted_listvalues(nw, xfc.GRAVITY_list)
    check_admitted_listvalues(se, xfc.GRAVITY_list)
    uinw = convert_to_uint(nw)
    uise = convert_to_uint(se)
    keep_elem_refs(pObject, nw, uinw, se, uise)
    _fl_set_object_gravity(pObject, uinw, uise)


def fl_get_object_gravity(pObject):
    """
        fl_get_object_gravity(pObject) -> nw, se

        Returns the gravity properties of an object.

        @param pObject: object to set
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: NorthWest and SouthEast gravity (<int_pos>, <int_pos>)

        @attention: API change from XForms - upstream was
                    fl_get_object_gravity(pObject, nw, se)

        @example: nowe, soea = fl_get_object_gravity(obj)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_object_gravity = cfuncproto(
            load_so_libforms(), "fl_get_object_gravity", \
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_uint),
            cty.POINTER(cty.c_uint)], \
            """void fl_get_object_gravity(xfc.FL_OBJECT * ob,
               unsigned int * nw, unsigned int * se)
            """)
    nw, pnw = make_uint_and_pointer()
    se, pse = make_uint_and_pointer()
    keep_elem_refs(pObject, nw, se, pnw, pse)
    _fl_get_object_gravity(pObject, pnw, pse)
    return nw, se


def fl_set_object_lsize(pObject, size):
    """
        fl_set_object_lsize(pObject, size)

        Sets the label size of an object.

        @param pObject: object to be set
                        (<pointer to xfdata.FL_OBJECT>)
        @param size: label size (<int>)
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE, 
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE

        @example: fl_set_object_lsize(obj, FL_MEDIUM_SIZE)

        @status: Tested + Doc + Demo = OK
    """

    _fl_set_object_lsize = cfuncproto(
            load_so_libforms(), "fl_set_object_lsize", \
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int], \
            """void fl_set_object_lsize(xfc.FL_OBJECT * ob, int lsize)
            """)
    check_admitted_listvalues(size, xfc.FONTSIZE_list)
    isize = convert_to_int(size)
    keep_elem_refs(pObject, size, isize)
    _fl_set_object_lsize(pObject, isize)


def fl_get_object_lsize(pObject):
    """
        fl_get_object_lsize(pObject) -> size

        Returns the label size of an object.

        @param pObject: object to evaluate
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: label size (<int>)

        @example: lsize = fl_get_object_lsize(obj)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_object_lsize = cfuncproto(
            load_so_libforms(), "fl_get_object_lsize", \
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)], \
            """int fl_get_object_lsize(xfc.FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_object_lsize(pObject)
    return retval


def fl_set_object_lstyle(pObject, style):
    """
        fl_set_object_lstyle(pObject, style)

        Sets the label style of an object.

        @param pObject: object ot be set
                        (<pointer to xfdata.FL_OBJECT>)
        @param style: label style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE

        @example: fl_set_object_lstyle(obj, FL_TIMESITALIC_STYLE)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_object_lstyle = cfuncproto(
            load_so_libforms(), "fl_set_object_lstyle", \
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int], \
            """void fl_set_object_lstyle(xfc.FL_OBJECT * ob, int lstyle)
            """)
    check_admitted_listvalues(style, xfc.TEXTSTYLE_list)
    istyle = convert_to_int(style)
    keep_elem_refs(pObject, style, istyle)
    _fl_set_object_lstyle(pObject, istyle)


def fl_get_object_lstyle(pObject):
    """
        fl_get_object_lstyle(pObject) -> style

        Returns the label style of an object.

        @param pObject: object to evaluate
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: label style (<int>)

        @example: lstyle = fl_get_object_lstyle(obj)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_object_lstyle = cfuncproto(
            load_so_libforms(), "fl_get_object_lstyle", \
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)], \
            """int fl_get_object_lstyle(xfc.FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_object_lstyle(pObject)
    return retval


def fl_set_object_lcol(pObject, colr):
    """
        fl_set_object_lcol(pObject, colr)

        Sets the label color of an object.

        @param pObject: object to be set
                        (<pointer to xfdata.FL_OBJECT>)
        @param colr: label color <long_pos>

        @example: fl_set_object_lcol(obj, FL_BLUE)

        @status: Tested + Doc + Demo = OK
    """

    _fl_set_object_lcol = cfuncproto(
            load_so_libforms(), "fl_set_object_lcol", \
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_COLOR], \
            """void fl_set_object_lcol(xfc.FL_OBJECT * ob, FL_COLOR lcol)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, colr, ulcolr)
    _fl_set_object_lcol(pObject, ulcolr)


fl_set_object_lcolor = fl_set_object_lcol


def fl_get_object_lcol(pObject):
    """
        fl_get_object_lcol(pObject) -> color

        Returns the label color of an object.

        @param pObject: pointer to object
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: color value (<long_pos>)

        @example: obcolor = fl_get_object_lcol(pobj)

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_get_object_lcol = cfuncproto(
            load_so_libforms(), "fl_get_object_lcol", \
            xfc.FL_COLOR, [cty.POINTER(xfc.FL_OBJECT)], \
            """FL_COLOR fl_set_object_lcol(xfc.FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_object_lcol(pObject)
    return retval


def fl_set_object_return(pObject, when):
    """
        fl_set_object_return(pObject, when) -> ID num

        Sets the conditions under which an object gets returned (or its
        callback invoked). If the object has to do additional work on
        setting te condition (e.g. it has child objects that also need
        to be set) it has to set up it's own function that then will
        called in the end. This should only be called once an object
        has been created completely! Not all return types make sense
        for all objects.

        @param pObject: pointer to object
                        (<pointer to xfdata.FL_OBJECT>)
        @param when: return type (when it returns) (<int_pos>)
        @type when: (from xfdata module) FL_RETURN_NONE, FL_RETURN_CHANGED,
                    FL_RETURN_END, FL_RETURN_END_CHANGED, FL_RETURN_SELECTION,
                    FL_RETURN_DESELECTION, FL_RETURN_TRIGGERED,
                    FL_RETURN_ALWAYS

        @returns: return type id (<int>)

        @example: fl_set_object_return(pobj, FL_RETURN_CHANGED)

        @status: Tested + Doc + Demo = OK
    """

    _fl_set_object_return = cfuncproto(
            load_so_libforms(), "fl_set_object_return", \
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_uint], \
            """int fl_set_object_return(xfc.FL_OBJECT * ob, unsigned int when)
            """)
    check_admitted_listvalues(when, xfc.RETURN_list)
    uiwhen = convert_to_uint(when)
    keep_elem_refs(pObject, when, uiwhen)
    retval = _fl_set_object_return(pObject, uiwhen)
    return retval


def fl_notify_object(pObject, cause):
    """
        fl_notify_object(pObject, cause)

        @param pObject: pointer to object
                        (<pointer to xfdata.FL_OBJECT>)
        @param cause: (<int>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_notify_object = cfuncproto(
            load_so_libforms(), "fl_notify_object", \
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int], \
            """void fl_notify_object(xfc.FL_OBJECT * obj, int cause)
            """)
    icause = convert_to_int(cause)
    keep_elem_refs(pObject, cause, icause)
    _fl_notify_object(pObject, icause)


def fl_set_object_lalign(pObject, align):
    """
        fl_set_object_lalign(pObject, align)

        Sets alignment of an object.

        @param pObject: object to be set
                        (<pointer to xfdata.FL_OBJECT>)
        @param align: alignment of object (<int>)
        @type align: (from xfdata module) FL_ALIGN_CENTER, FL_ALIGN_TOP,
                     FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
                     FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP,
                     FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM,
                     FL_ALIGN_INSIDE, FL_ALIGN_VERT

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_object_lalign = cfuncproto(
            load_so_libforms(), "fl_set_object_lalign", \
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int], \
            """void fl_set_object_lalign(xfc.FL_OBJECT * ob, int align)
            """)
    check_admitted_listvalues(align, xfc.ALIGN_list)
    ialign = convert_to_int(align)
    keep_elem_refs(pObject, align, ialign)
    _fl_set_object_lalign(pObject, ialign)


def fl_get_object_lalign(pObject):
    """
        fl_get_object_lalign(pObject) -> align num.

        Returns alignment of an object.

        @param pObject: object to be set
                        (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_object_lalign = cfuncproto(
            load_so_libforms(), "fl_get_object_lalign", \
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)], \
            """int fl_set_object_lalign(xfc.FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_object_lalign(pObject)
    return retval


fl_set_object_align = fl_set_object_lalign


def fl_set_object_shortcut(pObject, shctxt, showit):
    """
        fl_set_object_shortcut(pObject, shctxt, showit)

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)
        @param shctxt: shortcut text to be set (<string>)
        @param showit: flag to show shortcut or not
        @type showit: 0 (not shown) or 1 (shown)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_object_shortcut = cfuncproto(
            load_so_libforms(), "fl_set_object_shortcut", \
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING, cty.c_int], \
            """void fl_set_object_shortcut(xfc.FL_OBJECT * obj,
               const char * sstr, int showit)
            """)
    sshctxt = convert_to_string(shctxt)
    ishowit = convert_to_int(showit)
    keep_elem_refs(pObject, shctxt, sshctxt, showit, ishowit)
    _fl_set_object_shortcut(pObject, sshctxt, ishowit)


def fl_set_object_shortcutkey(pObject, keysym):
    """
        fl_set_object_shortcutkey(pObject, keysym)

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)
        @param keysym: key symbolic num. (<int_pos>)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_object_shortcutkey = cfuncproto(
            load_so_libforms(), "fl_set_object_shortcutkey",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_uint], \
            """void fl_set_object_shortcutkey(xfc.FL_OBJECT * obj,
               unsigned int keysym)
            """)
    uikeysym = convert_to_uint(keysym)
    keep_elem_refs(pObject, keysym, uikeysym)
    _fl_set_object_shortcutkey(pObject, uikeysym)


def fl_set_object_dblbuffer(pObject, flag):
    """
        fl_set_object_dblbuffer(pObject, flag)

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)
        @param flag: flag to disable/enable double buffer (<int>)
        @type flag: 0 (disabled) or 1 (enabled)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_object_dblbuffer = cfuncproto(
            load_so_libforms(), "fl_set_object_dblbuffer", \
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int], \
            """void fl_set_object_dblbuffer(xfc.FL_OBJECT * ob, int y)
            """)
    iflag = convert_to_int(flag)
    keep_elem_refs(pObject, flag, iflag)
    _fl_set_object_dblbuffer(pObject, iflag)


def fl_set_object_color(pObject, fgcolr, bgcolr):
    """
        fl_set_object_color(pObject, fgcolr, bgcolr)

        Sets the color of an object.

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)
        @param fgcolr: foreground color value (<long_pos>)
        @param bgcolr: background color value (<long_pos>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_object_color = cfuncproto(
            load_so_libforms(), "fl_set_object_color", \
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_COLOR, xfc.FL_COLOR], \
            """void fl_set_object_color(xfc.FL_OBJECT * ob, FL_COLOR col1,
               FL_COLOR col2)
            """)
    check_admitted_listvalues(fgcolr, xfc.COLOR_list)
    check_admitted_listvalues(bgcolr, xfc.COLOR_list)
    ulfgcolr = convert_to_FL_COLOR(fgcolr)
    ulbgcolr = convert_to_FL_COLOR(bgcolr)
    keep_elem_refs(pObject, fgcolr, ulfgcolr, bgcolr, ulbgcolr)
    _fl_set_object_color(pObject, ulfgcolr, ulbgcolr)


def fl_get_object_color(pObject):
    """
        fl_set_object_color(pObject) -> fgcolr, bgcolr

        Returns the foreground and background colors of an object.

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: foreground and background color values
                  (<long_pos>, <long_pos>)

        @example: 

        @attention: API change from XForms - upstream was
                    fl_set_object_color(pObject, fgcolr, bgcolr)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_object_color = cfuncproto(
            load_so_libforms(), "fl_get_object_color", \
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_COLOR), \
            cty.POINTER(xfc.FL_COLOR)], \
            """void fl_get_object_color(xfc.FL_OBJECT * ob, FL_COLOR * col1,
               FL_COLOR * col2)
            """)
    fgcolr, pfgcolr = make_FL_COLOR_and_pointer()
    bgcolr, pbgcolr = make_FL_COLOR_and_pointer()
    keep_elem_refs(pObject, fgcolr, pfgcolr, bgcolr, pbgcolr)
    _fl_get_object_color(pObject, pfgcolr, pbgcolr)
    return fgcolr, bgcolr


def fl_set_object_label(pObject, label):
    """
        fl_set_object_label(pObject, label)

        Sets the label of an object.

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)
        @param label: text label of object (<string>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_object_label = cfuncproto(
            load_so_libforms(), "fl_set_object_label", \
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING], \
            """void fl_set_object_label(xfc.FL_OBJECT * ob, const char * label)
            """)
    slabel = convert_to_string(label)
    keep_elem_refs(pObject, label, slabel)
    _fl_set_object_label(pObject, slabel)


def fl_get_object_label(pObject):
    """
        fl_get_object_label(pObject) -> label

        Returns the label of an object.

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: text of label (<string>)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_object_label = cfuncproto(
            load_so_libforms(), "fl_get_object_label", \
            xfc.STRING, [cty.POINTER(xfc.FL_OBJECT)], \
            """const char * fl_set_object_label(xfc.FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_object_label(pObject)
    return retval


def fl_set_object_helper(pObject, tip):
    """
        fl_set_object_helper(pObject, tip)

        Sets the tooltip of an object.

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)
        @param tip: tooltip text for object (<string>)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_object_helper = cfuncproto(
            load_so_libforms(), "fl_set_object_helper", \
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING], \
            """void fl_set_object_helper(xfc.FL_OBJECT * ob, const char * tip)
            """)
    stip = convert_to_string(tip)
    keep_elem_refs(pObject, tip, stip)
    _fl_set_object_helper(pObject, stip)


def fl_set_object_position(pObject, x, y):
    """
        fl_set_object_position(pObject, x, y)

        Sets position of an object.

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)
        @param x: horizontal position (upper-left corner) (<int>))
        @param y: vertical position (upper-left corner) (<int>)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_object_position = cfuncproto(
            load_so_libforms(), "fl_set_object_position", \
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_Coord, xfc.FL_Coord], \
            """void fl_set_object_position(xfc.FL_OBJECT * obj, FL_Coord x,
               FL_Coord y)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    keep_elem_refs(pObject, x, ix, y, iy)
    _fl_set_object_position(pObject, ix, iy)


def fl_get_object_size(pObject):
    """
        fl_get_object_size(pObject) -> width, height

        Returns the size of an object.

        @param pObject: object to evaluate
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: width and height in coord units (<int>, <int>)

        @attention: API change from XForms - upstream was
                    fl_get_object_size(pObject, w, h)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_object_size = cfuncproto(
            load_so_libforms(), "fl_get_object_size", \
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_Coord),
            cty.POINTER(xfc.FL_Coord)], \
            """void fl_get_object_size(xfc.FL_OBJECT * obj, FL_Coord * w,
               FL_Coord * h)
            """)
    w, pw = make_FL_Coord_and_pointer()
    h, ph = make_FL_Coord_and_pointer()
    keep_elem_refs(pObject, w, h, pw, ph)
    _fl_get_object_size(pObject, pw, ph)
    return w, h


def fl_set_object_size(pObject, w, h):
    """
        fl_set_object_size(pObject, w, h)

        Sets the size of an object.

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)
        @param w: width of object in coord units (<int>)
        @param h: height of object in coord units (<int>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_object_size = cfuncproto(
            load_so_libforms(), "fl_set_object_size", \
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_Coord, xfc.FL_Coord], \
            """void fl_set_object_size(xfc.FL_OBJECT * obj, FL_Coord w,
               FL_Coord h)
            """)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(pObject, w, iw, h, ih)
    _fl_set_object_size(pObject, iw, ih)


def fl_set_object_automatic(pObject, flag):
    """
        fl_set_object_automatic(pObject, flag)

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)
        @param flag: flag if automatic or not (<int>)
        @type flag: 0 (not automatic) or 1 (automatic)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_object_automatic = cfuncproto(
            load_so_libforms(), "fl_set_object_automatic",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int], \
            """void fl_set_object_automatic(xfc.FL_OBJECT * ob, int flag)
            """)
    iflag = convert_to_int(flag)
    keep_elem_refs(pObject, flag, iflag)
    _fl_set_object_automatic(pObject, iflag)


def fl_object_is_automatic(pObject):
    """
        fl_object_is_automatic(pObject) -> flag num.

        @param pObject: object to evaluate
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: flag if it's automatic (1) or not (0) (<int>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_object_is_automatic = cfuncproto(
            load_so_libforms(), "fl_object_is_automatic",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)], \
            """int fl_object_is_automatic(xfc.FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_object_is_automatic(pObject)
    return retval


def fl_draw_object_label(pObject):
    """
        fl_draw_object_label(pObject)

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_draw_object_label = cfuncproto(
            load_so_libforms(), "fl_draw_object_label", \
            None, [cty.POINTER(xfc.FL_OBJECT)], \
            """void fl_draw_object_label(xfc.FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_draw_object_label(pObject)


def fl_draw_object_label_outside(pObject):
    """
        fl_draw_object_label_outside(pObject)

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_draw_object_label_outside = cfuncproto(
            load_so_libforms(), "fl_draw_object_label_outside",
            None, [cty.POINTER(xfc.FL_OBJECT)], \
            """void fl_draw_object_label_outside(xfc.FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_draw_object_label_outside(pObject)


fl_draw_object_outside_label = fl_draw_object_label_outside


def fl_get_object_component(pObject, objclass, compontype, num):
    """
        fl_get_object_component(pObject, objclass, compontype, num) -> pObject

        @param pObject: composite object
                        (<pointer to xfdata.FL_OBJECT>)
        @param objclass: (<int>)
        @param compontype: (<int>)
        @param num: (<int>)

        @returns: component object (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_object_component = cfuncproto(
            load_so_libforms(), "fl_get_object_component",
            cty.POINTER(xfc.FL_OBJECT), [cty.POINTER(xfc.FL_OBJECT), cty.c_int,
            cty.c_int, cty.c_int], \
            """FL_OBJECT * fl_get_object_component(xfc.FL_OBJECT * composite,
               int objclass, int type, int numb)
            """)
    iobjclass = convert_to_int(objclass)
    icompontype = convert_to_int(compontype)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, objclass, iobjclass, compontype, icompontype, num, inum)
    retval = _fl_get_object_component(pObject, iobjclass, icompontype, inum)
    return retval


# cfunction for _fl_for_all_objects
cfunc_int_pobject_pvoid = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfc.FL_OBJECT), \
                                        cty.c_void_p)

def fl_for_all_objects(pForm, py_cb, vdata):
    """
        fl_for_all_objects(pForm, py_cb, vdata)

        @param pForm: form
                      (<pointer to xfdata.FL_FORM>)
        @param py_cb: python callback function, returning value
        @type py_cb: __ funcname (pObject, ptr_void) -> num __
        @param vdata: user data to be passed (<pointer to void>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_for_all_objects = cfuncproto(
            load_so_libforms(), "fl_for_all_objects", \
            None, [cty.POINTER(xfc.FL_FORM), cfunc_int_pobject_pvoid, \
            cty.c_void_p], \
            """void fl_for_all_objects(FL_FORM * form, int ( * cb ) \
               ( FL_OBJECT *, void * ), void * v)
            """)
    c_cb = cfunc_int_pobject_pvoid(py_cb)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_cfunc_refs(c_cb, py_cb)
    keep_elem_refs(pForm, vdata, pvdata)
    _fl_for_all_objects(pForm, c_cb, pvdata)


def fl_set_object_dblclick(pObject, timeout):
    """
        fl_set_object_dblclick(pObject, timeout)

        Sets double click timeout value of an object.

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)
        @param timeout: timeout value for double click (<long_pos>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_object_dblclick = cfuncproto(
            load_so_libforms(), "fl_set_object_dblclick", \
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_ulong], \
            """void fl_set_object_dblclick(xfc.FL_OBJECT *obj, unsigned \
               long timeout)
            """)
    ultimeout = convert_to_ulong(timeout)
    keep_elem_refs(pObject, timeout, ultimeout)
    _fl_set_object_dblclick(pObject, ultimeout)


def fl_get_object_dblclick(pObject):
    """
        fl_get_object_dblclick(pObject) -> timeout

        Return double click timeout value of an object.

        @param pObject: object to evaluate
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: timeout value (<long_pos>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_object_dblclick = cfuncproto(
            load_so_libforms(), "fl_get_object_dblclick", \
            cty.c_ulong, [cty.POINTER(xfc.FL_OBJECT)], \
            """unsigned long fl_get_object_dblclick(xfc.FL_OBJECT *obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_object_dblclick(pObject)
    return retval


def fl_set_object_geometry(pObject, x, y, w, h):
    """
        fl_set_object_geometry(pObject, x, y, w, h)

        Sets the geometry (position and size) of an object.

        @param pObject: object to modify
                        (<pointer to xfdata.FL_OBJECT>)
        @param x: horizontal position (upper-left corner) (<int>)
        @param y: vertical position (upper-left corner) (<int>)
        @param w: width in coord units (<int>)
        @param h: height in coord units (<int>)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_object_geometry = cfuncproto(
            load_so_libforms(), "fl_set_object_geometry", \
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord], \
            """void fl_set_object_geometry(FL_OBJECT * obj, FL_Coord x,
            FL_Coord y, FL_Coord w, FL_Coord h)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(pObject, x, ix, y, iy, w, iw, h, ih)
    _fl_set_object_geometry(pObject, ix, iy, iw, ih)


def fl_move_object(pObject, x, y):
    """
        fl_move_object(pObject, x, y)

        Moves an object to a new position.

        @param pObject: object to be moved
                        (<pointer to xfdata.FL_OBJECT>)
        @param x: new horizontal position (upper-left corner) (<int>)
        @param y: new vertical position (upper-left corner) (<int>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_move_object = cfuncproto(
            load_so_libforms(), "fl_move_object", \
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_Coord, xfc.FL_Coord], \
            """void fl_move_object(xfc.FL_OBJECT * obj, FL_Coord dx,
               FL_Coord dy)
            """)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    keep_elem_refs(pObject, x, ix, y, iy)
    _fl_move_object(pObject, ix, iy)


def fl_fit_object_label(pObject, xmargin, ymargin):
    """
        fl_fit_object_label(pObject, xmargin, ymargin)

        Checks if the label of an object fits into it (after x- and
        y-margin have been added). If not, all objects and the form
        are enlarged by the necessary factor (but never by more than
        a factor of 1.5).

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)
        @param xmargin: horizontal margin of label in coord units (<int>)
        @param ymargin: vertical margin of label in coord units (<int>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_fit_object_label = cfuncproto(
            load_so_libforms(), "fl_fit_object_label",\
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_Coord, xfc.FL_Coord],\
            """void fl_fit_object_label(xfc.FL_OBJECT * obj, FL_Coord xmargin,
               FL_Coord ymargin)
            """)
    ixmargin = convert_to_int(xmargin)
    iymargin = convert_to_int(ymargin)
    keep_elem_refs(pObject, xmargin, ixmargin, ymargin, iymargin)
    _fl_fit_object_label(pObject, ixmargin, iymargin)


def fl_get_object_geometry(pObject):
    """
        fl_get_object_geometry(pObject) -> x, y, w, h

        Returns the geometry (position and size) of an object.

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: horizontal, vertical position, width, height
                  (<int>, <int>, <int>, <int>)

        @example: 

        @attention: API change from XForms - upstream was
                    fl_get_object_geometry(pObject, x, y, w, h)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_object_geometry = cfuncproto(
            load_so_libforms(), "fl_get_object_geometry",\
        None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_Coord),\
        cty.POINTER(xfc.FL_Coord), cty.POINTER(xfc.FL_Coord), cty.POINTER(xfc.FL_Coord)],
        """void fl_get_object_geometry(xfc.FL_OBJECT * ob, FL_Coord * x,
           FL_Coord * y, FL_Coord * w, FL_Coord * h)
        """)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    w, pw = make_FL_Coord_and_pointer()
    h, ph = make_FL_Coord_and_pointer()
    keep_elem_refs(pObject, x, px, y, py, w, pw, h, ph)
    _fl_get_object_geometry(pObject, px, py, pw, ph)
    return x, y, w,h


def fl_get_object_position(pObject):
    """
        fl_get_object_position(pObject) -> x, y

        Returns the position of an object.

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: horizontal and vertical position (<int>, <int>)

        @example: 

        @attention: API change from XForms - upstream was
                    fl_get_object_position(pObject, x, y)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_object_position = cfuncproto(
            load_so_libforms(), "fl_get_object_position",\
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_Coord),
            cty.POINTER(xfc.FL_Coord)],\
            """void fl_get_object_position(xfc.FL_OBJECT * ob, FL_Coord * x,
               FL_Coord * y)
            """)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    keep_elem_refs(pObject, x, px, y, py)
    _fl_get_object_position(pObject, px, py)
    return x,y


# this one takes into account the label

def fl_get_object_bbox(pObject):
    """
        fl_get_object_bbox(pObject) -> x, y, w, h

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: horizontal, vertical position, width, height
                  (<int>, <int>, <int>, <int>)

        @example: 

        @attention: API change from XForms - upstream was
                    fl_get_object_bbox(pObject, x, y, w, h)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_object_bbox = cfuncproto(
            load_so_libforms(), "fl_get_object_bbox",\
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_Coord),\
            cty.POINTER(xfc.FL_Coord), cty.POINTER(xfc.FL_Coord),
            cty.POINTER(xfc.FL_Coord)],\
            """void fl_get_object_bbox(xfc.FL_OBJECT * obj, FL_Coord * x,
               FL_Coord * y, FL_Coord * w, FL_Coord * h)
            """)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    w, pw = make_FL_Coord_and_pointer()
    h, ph = make_FL_Coord_and_pointer()
    keep_elem_refs(pObject, x, y, w, h, px, py, pw, ph)
    _fl_get_object_bbox(pObject, px, py, pw, ph)
    return x, y, w,h


fl_compute_object_geometry = fl_get_object_bbox


def fl_call_object_callback(pObject):
    """ fl_call_object_callback(pObject)

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_call_object_callback = cfuncproto(
            load_so_libforms(), "fl_call_object_callback",\
            None, [cty.POINTER(xfc.FL_OBJECT)],\
            """void fl_call_object_callback(xfc.FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_call_object_callback(pObject)


#already defined in xfdata
#FL_HANDLEPTR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfc.FL_OBJECT), cty.c_int, \
#                FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)

def fl_set_object_prehandler(pObject, py_HandlerPtr):
    """ fl_set_object_prehandler(pObject, py_HandlerPtr) ->  pHandlerPtr

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)
        @param py_HandlerPtr: python callback function, returning value
        @type py_HandlerPtr: __ funcname (pObject, num, coord, coord, num,
                             ptr_void) -> num __

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_object_prehandler = cfuncproto(
            load_so_libforms(), "fl_set_object_prehandler",
            xfc.FL_HANDLEPTR, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_HANDLEPTR],\
            """FL_HANDLEPTR fl_set_object_prehandler(xfc.FL_OBJECT * ob,
               FL_HANDLEPTR phandler)
            """)
    c_HandlerPtr = xfc.FL_HANDLEPTR(py_HandlerPtr)
    keep_cfunc_refs(c_HandlerPtr, py_HandlerPtr)
    keep_elem_refs(pObject)
    retval = _fl_set_object_prehandler(pObject, c_HandlerPtr)
    return retval


def fl_set_object_posthandler(pObject, py_HandlerPtr):
    """ fl_set_object_posthandler(pObject, py_HandlerPtr) -> pHandlerPtr

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)
        @param py_HandlerPtr: python callback function, returning value
        @type py_HandlerPtr: __ funcname (pObject, num, coord, coord, num,
                             ptr_void) -> num __

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_object_posthandler = cfuncproto(
            load_so_libforms(), "fl_set_object_posthandler",
            xfc.FL_HANDLEPTR, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_HANDLEPTR],\
            """FL_HANDLEPTR fl_set_object_posthandler(xfc.FL_OBJECT * ob,
               FL_HANDLEPTR post)
            """)
    c_HandlerPtr = xfc.FL_HANDLEPTR(py_HandlerPtr)
    keep_cfunc_refs(c_HandlerPtr, py_HandlerPtr)
    keep_elem_refs(pObject)
    retval = _fl_set_object_posthandler(pObject, c_HandlerPtr)
    return retval


#already defined in xfdata
#FL_CALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(xfc.FL_OBJECT), cty.c_long)

def fl_set_object_callback(pObject, py_CallbackPtr, data):
    """ fl_set_object_callback(pObject, py_CallbackPtr, data) -> c_callback func.

        Calls a callback function bound to an object, if a condition is met.

        @param pObject: object the callback is bound to
                        (<pointer to xfdata.FL_OBJECT>)
        @param py_CallbackPtr: a python function with no () and no args to
                               be used as callback, no return
        @type py_CallbackPtr: __ funcname (pObject, longnum) __
        @param data: argument being passed to function <long>

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_object_callback = cfuncproto(
            load_so_libforms(), "fl_set_object_callback",\
            xfc.FL_CALLBACKPTR, [cty.POINTER(xfc.FL_OBJECT),
            xfc.FL_CALLBACKPTR, cty.c_long],
            """FL_CALLBACKPTR fl_set_object_callback(xfc.FL_OBJECT * obj,\
               FL_CALLBACKPTR callback, long int argument)
            """)
    ldata = convert_to_long(data)
    c_CallbackPtr = xfc.FL_CALLBACKPTR(py_CallbackPtr)
    keep_cfunc_refs(c_CallbackPtr, py_CallbackPtr)
    keep_elem_refs(pObject, data, ldata)
    retval = _fl_set_object_callback(pObject, c_CallbackPtr, ldata)
    return retval


fl_set_call_back = fl_set_object_callback


def fl_redraw_object(pObject):
    """ fl_redraw_object(pObject)

        Redraws the particular object. If it is a group it redraws the
        complete group. Normally you should never need this routine because
        all library routines take care of redrawing objects when necessary,
        but there might be situations in which an explicit redraw is required.

        @param pObject: object to redraw
                        (<pointer to xfdata.FL_OBJECT>)

        @example: fl_redraw_object(pobj)

        @status: Tested + Doc + Demo = OK
    """

    _fl_redraw_object = cfuncproto(
            load_so_libforms(), "fl_redraw_object",\
            None, [cty.POINTER(xfc.FL_OBJECT)],\
            """void fl_redraw_object(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    _fl_redraw_object(pObject)


def fl_scale_object(pObject, xs, ys):
    """ fl_scale_object(pObject, xs, ys)

        Scales (shrinking or enlarging) an object.

        @param pObject: object to be scaled
                        (<pointer to xfdata.FL_OBJECT>)
        @param xs: new horizontal factor (<float>)
        @param ys: new vertical factor (<float>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_scale_object = cfuncproto(
            load_so_libforms(), "fl_scale_object",\
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],\
            """void fl_scale_object(FL_OBJECT * ob, double xs, double ys)
            """)
    fxs = convert_to_double(xs)
    fys = convert_to_double(ys)
    keep_elem_refs(pObject, xs, fxs, ys, fys)
    _fl_scale_object(pObject, fxs, fys)


def fl_show_object(pObject):
    """ fl_show_object(pObject)

        Shows an (hidden) object.

        @param pObject: object to be shown
                        (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_object = cfuncproto(
            load_so_libforms(), "fl_show_object",\
            None, [cty.POINTER(xfc.FL_OBJECT)],\
            """void fl_show_object(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_show_object(pObject)


def fl_hide_object(pObject):
    """ fl_hide_object(pObject)

        Hides a shown object.

        @param pObject: object to be hidden
                        (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_hide_object = cfuncproto(
            load_so_libforms(), "fl_hide_object",\
            None, [cty.POINTER(xfc.FL_OBJECT)],\
            """void fl_hide_object(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_hide_object(pObject)


def fl_object_is_visible(pObject):
    """ fl_object_is_visible(pObject) -> flag

        Returns if an object is visible or not.

        @param pObject: object to evaluate
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: flag 0 (invisible) or non-zero (visible)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_object_is_visible = cfuncproto(
            load_so_libforms(), "fl_object_is_visible",\
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],\
            """int fl_object_is_visible(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_object_is_visible(pObject)
    return retval


def fl_free_object(pObject):
    """ fl_free_object(pObject)

        Frees the object and finally destroys it (if necessary deletes 
        the object first).

        @param pObject: object to free
                        (<pointer to xfdata.FL_OBJECT>)

        @example: fl_free_object(obj)

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_free_object = cfuncproto(
            load_so_libforms(), "fl_free_object",\
            None, [cty.POINTER(xfc.FL_OBJECT)],\
            """void fl_free_object(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    _fl_free_object(pObject)


def fl_delete_object(pObject):
    """ fl_delete_object(pObject)

        Deletes an object, breaking its connection to the form, but not
        destroying it.

        @param pObject: object to delete
                        (<pointer to xfdata.FL_OBJECT>)

        @example: fl_delete_object(obj)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_delete_object = cfuncproto(
            load_so_libforms(), "fl_delete_object",\
            None, [cty.POINTER(xfc.FL_OBJECT)],\
            """void fl_delete_object(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    _fl_delete_object(pObject)


def fl_get_object_return_state(pObject):
    """ fl_get_object_return_state(pObject) -> ID num

        @param pObject: object to evaluate
                        (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_object_return_state = cfuncproto(
            load_so_libforms(), "fl_get_object_return_state",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],\
            """int fl_get_object_return_state(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_object_return_state(pObject)
    return retval


def fl_trigger_object(pObject):
    """ fl_trigger_object(pObject)

        @param pObject: object
                        (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_trigger_object = cfuncproto(
            load_so_libforms(), "fl_trigger_object",\
            None, [cty.POINTER(xfc.FL_OBJECT)],\
            """void fl_trigger_object(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    _fl_trigger_object(pObject)


def fl_activate_object(pObject):
    """ fl_activate_object(pObject)

        @param pObject: object to activate
                        (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_activate_object = cfuncproto(
            load_so_libforms(), "fl_activate_object",\
            None, [cty.POINTER(xfc.FL_OBJECT)],\
            """void fl_activate_object(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_activate_object(pObject)


def fl_deactivate_object(pObject):
    """ fl_deactivate_object(pObject)

        @param pObject: object to deactivate
                        (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_deactivate_object = cfuncproto(
            load_so_libforms(), "fl_deactivate_object",\
            None, [cty.POINTER(xfc.FL_OBJECT)],\
            """void fl_deactivate_object(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_deactivate_object(pObject)


def fl_object_is_active(pObject):
    """ fl_object_is_active(pObject) -> flag

        Returns if object is active and reacting to
        events, or not.

        @param pObject: object to evaluate
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: flag 0 (not active) or non-zero (active)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_object_is_active = cfuncproto(
            load_so_libforms(), "fl_object_is_active",\
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],\
            """int fl_object_is_active(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_object_is_active(pObject)
    return retval


# cfunction for _fl_enumerate_fonts
cfunc_none_string = cty.CFUNCTYPE(None, xfc.STRING)

def fl_enumerate_fonts(py_output, shortform):
    """ fl_enumerate_fonts(py_output, shortform) -> num

        Lists built-in fonts.

        @param py_output: python callback function - no return
        @type py_output: __ funcname (string) __
        @param shortform: flag to use short form or not (<int>)
        @type shortform: 0 (long form used) or non-zero (short form used)

        @returns: number of listed fonts (<int>)

        @example: def pyoutput(strng):
                  > print strng
                  numfonts = fl_enumerate(pyoutput, 0)

        @status: Tested + Doc + Demo = OK
    """

    _fl_enumerate_fonts = cfuncproto(
            load_so_libforms(), "fl_enumerate_fonts",\
            cty.c_int, [cfunc_none_string, cty.c_int],\
            """int fl_enumerate_fonts(void ( * output )( const char *s ), \
               int shortform)
            """)
    ishortform = convert_to_int(shortform)
    c_output = cfunc_none_string(py_output)
    keep_cfunc_refs(c_output, py_output)
    keep_elem_refs(shortform, ishortform)
    retval = _fl_enumerate_fonts(c_output, ishortform)
    return retval


def fl_set_font_name(fontnum, name):
    """ fl_set_font_name(fontnum, name) -> ID num

        Add a new font (indexed by n) or change an existing font.
        Preferably the font name constains a '?' in the size position so
        different sizes can be used. Redraw of all forms is required to
        actually see the change for visible form.

        @param fontnum: font number (<int>)
        @type fontnum: value between 0 and xfdata.FL_MAXFONTS -1 
        @param name: font name (<string>)

        @returns: (<int>) -1 (on errors) or 0 or 1

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_font_name = cfuncproto(
            load_so_libforms(), "fl_set_font_name",\
            cty.c_int, [cty.c_int, xfc.STRING],\
            """int fl_set_font_name(int n, const char * name)
            """)
    ifontnum = convert_to_int(fontnum)
    sname = convert_to_string(name)
    keep_elem_refs(fontnum, ifontnum, name, sname)
    retval = _fl_set_font_name(ifontnum, sname)
    return retval


def fl_set_font(fontnum, size):
    """ fl_set_font(fontnum, size)

        @param fontnum: font number (<int>)
        @param size: font size (<int>)
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE, 
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_font = cfuncproto(
            load_so_libforms(), "fl_set_font",\
            None, [cty.c_int, cty.c_int],\
            """void fl_set_font(int numb, int size)
            """)
    check_admitted_listvalues(size, xfc.FONTSIZE_list)
    ifontnum = convert_to_int(fontnum)
    isize = convert_to_int(size)
    keep_elem_refs(fontnum, ifontnum, size, isize)
    _fl_set_font(ifontnum, isize)


# routines that facilitate free object

def fl_get_char_height(style, size):
    """ fl_get_char_height(style, size) -> h, asc, desc

        @param style: font style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        @param size: font size (<int>)
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE, 
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE

        @returns: height, ascendent and descendent (<int>, <int>, <int>)

        @example: 

        @attention: API change from XForms - upstream was
                    fl_get_char_height(style, size, asc, desc)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_char_height = cfuncproto(
            load_so_libforms(), "fl_get_char_height",\
            cty.c_int, [cty.c_int, cty.c_int, cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],\
            """int fl_get_char_height(int style, int size, int * asc,
               int * desc)
            """)
    check_admitted_listvalues(style, xfc.TEXTSTYLE_list)
    check_admitted_listvalues(size, xfc.FONTSIZE_list)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    asc, pasc = make_int_and_pointer()
    desc, pdesc = make_int_and_pointer()
    keep_elem_refs(style, istyle, size, isize, asc, desc, pasc, pdesc)
    retval = _fl_get_char_height(istyle, isize, pasc, pdesc)
    return retval, asc, desc


def fl_get_char_width(style, size):
    """ fl_get_char_width(style, size) -> w

        @param style: font style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        @param size: font size (<int>)
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE, 
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE

        @returns: width (<int>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_char_width = cfuncproto(
            load_so_libforms(), "fl_get_char_width",\
            cty.c_int, [cty.c_int, cty.c_int],\
            """int fl_get_char_width(int style, int size)
            """)
    check_admitted_listvalues(style, xfc.TEXTSTYLE_list)
    check_admitted_listvalues(size, xfc.FONTSIZE_list)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    keep_elem_refs(style, istyle, size, isize)
    retval = _fl_get_char_width(istyle, isize)
    return retval


def fl_get_string_height(style, size, strng, strglen):
    """ fl_get_string_height(style, size, strng, strglen) -> h, asc, desc

        @param style: font style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        @param size: font size (<int>)
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE, 
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE
        @param strng: (<string>)
        @param strglen: length of string (<int>)

        @returns: height, ascendent and descendent (<int>, <int>, <int>)

        @example:

        @attention: API change from XForms - upstream was
                    fl_get_string_height(style, size, strng, strglen,
                    asc, desc)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_string_height = cfuncproto(
            load_so_libforms(), "fl_get_string_height",\
            cty.c_int, [cty.c_int, cty.c_int, xfc.STRING, cty.c_int,
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
            """int fl_get_string_height(int style, int size, const char * s,
               int len, int * asc, int * desc)
            """)
    check_admitted_listvalues(style, xfc.TEXTSTYLE_list)
    check_admitted_listvalues(size, xfc.FONTSIZE_list)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    sstrng = convert_to_string(strng)
    istrglen = convert_to_int(strglen)
    asc, pasc = make_int_and_pointer()
    desc, pdesc = make_int_and_pointer()
    keep_elem_refs(style, istyle, size, isize, strng, sstrng, strglen,\
                   istrglen, asc, desc, pasc, pdesc)
    retval = _fl_get_string_height(istyle, isize, sstrng, istrglen,\
                                   pasc, pdesc)
    return retval, asc, desc


def fl_get_string_width(style, size, strng, strglen):
    """ fl_get_string_width(style, size, strng, strglen) -> w

        @param style: font style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        @param size: font size (<int>)
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE, 
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE
        @param strng: (<string>)
        @param strglen: length of string (<int>)

        @returns: width (<int>)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_string_width = cfuncproto(
            load_so_libforms(), "fl_get_string_width",\
            cty.c_int, [cty.c_int, cty.c_int, xfc.STRING, cty.c_int],\
            """int fl_get_string_width(int style, int size, const char * s,
               int len)
            """)
    check_admitted_listvalues(style, xfc.TEXTSTYLE_list)
    check_admitted_listvalues(size, xfc.FONTSIZE_list)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    sstrng = convert_to_string(strng)
    istrglen = convert_to_int(strglen)
    keep_elem_refs(style, istyle, size, isize, strng, sstrng, strglen,
                   istrglen)
    retval = _fl_get_string_width(istyle, isize, sstrng, istrglen)
    return retval


def fl_get_string_widthTAB(style, size, strng, strglen):
    """ fl_get_string_widthTAB(style, size, strng, strglen) -> w

        @param style: font style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        @param size: font size (<int>)
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE, 
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE
        @param strng: (<string>)
        @param strglen: length of string (<int>)

        @returns: width (<int>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_string_widthTAB = cfuncproto(
            load_so_libforms(), "fl_get_string_widthTAB",\
            cty.c_int, [cty.c_int, cty.c_int, xfc.STRING, cty.c_int],\
            """int fl_get_string_widthTAB(int style, int size, const char * s,
               int len)
            """)
    check_admitted_listvalues(style, xfc.TEXTSTYLE_list)
    check_admitted_listvalues(size, xfc.FONTSIZE_list)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    sstrng = convert_to_string(strng)
    istrglen = convert_to_int(strglen)
    keep_elem_refs(style, istyle, size, isize, strng, sstrng, strglen, 
                   istrglen)
    retval = _fl_get_string_widthTAB(istyle, isize, sstrng, istrglen)
    return retval


def fl_get_string_dimension(style, size, strng, strglen):
    """ fl_get_string_dimension(style, size, strng, strglen) -> w, h

        @param style: font style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        @param size: font size (<int>)
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE, 
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE
        @param strng: (<string>)
        @param strglen: length of string (<int>)

        @returns: width and height (<int>, <int>)

        @example: 

        @attention: API change from upstream
                    fl_get_string_dimension(fntstyle, fntsize, strng, strglen,
                    w, h)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_string_dimension = cfuncproto(
            load_so_libforms(), "fl_get_string_dimension",\
            None, [cty.c_int, cty.c_int, xfc.STRING, cty.c_int,
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
            """void fl_get_string_dimension(int fntstyle, int fntsize,
               const char * s, int len, int * width, int * height)
            """)
    check_admitted_listvalues(style, xfc.TEXTSTYLE_list)
    check_admitted_listvalues(size, xfc.FONTSIZE_list)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    sstrng = convert_to_string(strng)
    istrglen = convert_to_int(strglen)
    width, pwidth = make_int_and_pointer()
    height, pheight = make_int_and_pointer()
    keep_elem_refs(style, istyle, size, isize, strng, sstrng,
                   strglen, istrglen, width, height, pwidth, pheight)
    _fl_get_string_dimension(istyle, isize, sstrng, istrglen, pwidth,
                             pheight)
    return width, height


fl_get_string_size = fl_get_string_dimension


def fl_get_align_xy(align, x, y, w, h, xsize, ysize, xoff, yoff):
    """ fl_get_align_xy(align, x, y, w, h, xsize, ysize, xoff, yoff) -> xx, yy

        @param align: alignment (<int>)
        @type align: (from xfdata module) FL_ALIGN_CENTER, FL_ALIGN_TOP,
                     FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
                     FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP,
                     FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM,
                     FL_ALIGN_INSIDE, FL_ALIGN_VERT
        @param x: horizontal position (upper-left corner) (<int>)
        @param y: vertical position (upper-left corner) (<int>)
        @param w: width in coord units (<int>)
        @param h: height in coord units (<int>)
        @param xsize: (<int>)
        @param ysize: (<int>)
        @param xoff: (<int>)
        @param yoff: (<int>)

        @returns: xx and yy (<int>, <int>)

        @example: 

        @attention: API change from upstream
                    fl_get_align_xy(align, x, y, w, h, xsize, ysize, xoff,
                    yoff, xx, yy)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_align_xy = cfuncproto(
            load_so_libforms(), "fl_get_align_xy",\
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,\
            cty.c_int, cty.c_int, cty.c_int, cty.c_int,
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
            """void fl_get_align_xy(int align, int x, int y, int w, int h,
            int xsize, int ysize, int xoff, int yoff, int * xx, int * yy)
            """)
    check_admitted_listvalues(align, xfc.ALIGN_list)
    ialign = convert_to_int(align)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    ixsize = convert_to_int(xsize)
    iysize = convert_to_int(ysize)
    ixoff = convert_to_int(xoff)
    iyoff = convert_to_int(yoff)
    xx, pxx = make_int_and_pointer()
    yy, pyy = make_int_and_pointer()
    keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, xsize, ixsize,
                   ysize, iysize, xoff, ixoff, yoff, iyoff, xx, yy, pxx, pyy)
    _fl_get_align_xy(ialign, ix, iy, iw, ih, ixsize, iysize, ixoff,
                     iyoff, pxx, pyy)
    return xx, yy


def fl_drw_text(align, x, y, w, h, colr, style, size, txtstr):
    """ fl_drw_text(align, x, y, w, h, colr, style, size, txtstr)

        @param align: alignment of text (<int>)
        @type align: (from xfdata module) FL_ALIGN_CENTER, FL_ALIGN_TOP,
                     FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
                     FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP,
                     FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM,
                     FL_ALIGN_INSIDE, FL_ALIGN_VERT
        @param x: horizontal position (upper-left corner) (<int>)
        @param y: vertical position (upper-left corner) (<int>)
        @param w: width in coord units (<int>)
        @param h: height in coord units (<int>)
        @param colr: color value (<long_pos>)
        @param style: font style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        @param size: font size (<int>)
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE, 
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE
        @param txtstr: text to draw (<string>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_drw_text = cfuncproto(
            load_so_libforms(), "fl_drw_text",\
            None, [cty.c_int, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_COLOR, cty.c_int, cty.c_int, xfc.STRING],
            """void fl_drw_text(int align, FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h, FL_COLOR c, int style, int size, const char * istr)
            """)
    check_admitted_listvalues(align, xfc.ALIGN_list)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    check_admitted_listvalues(style, xfc.TEXTSTYLE_list)
    check_admitted_listvalues(size, xfc.FONTSIZE_list)
    ialign = convert_to_int(align)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    stxtstr = convert_to_string(txtstr)
    keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, style, istyle, size, isize, txtstr, stxtstr)
    _fl_drw_text(ialign, ix, iy, iw, ih, ulcolr, istyle, isize,
                 stxtstr)


def fl_drw_text_beside(align, x, y, w, h, colr, style, size, txtstr):
    """ fl_drw_text_beside(align, x, y, w, h, colr, style, size, txtstr)

        @param align: alignment of text (<int>)
        @type align: (from xfdata module) FL_ALIGN_CENTER, FL_ALIGN_TOP,
                     FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
                     FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP,
                     FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM,
                     FL_ALIGN_INSIDE, FL_ALIGN_VERT
        @param x: horizontal position (upper-left corner) (<int>)
        @param y: vertical position (upper-left corner) (<int>)
        @param w: width in coord units (<int>)
        @param h: height in coord units (<int>)
        @param colr: color value (<long_pos>)
        @param style: font style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        @param size: font size (<int>)
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE, 
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE
        @param txtstr: text to draw (<string>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_drw_text_beside = cfuncproto(
            load_so_libforms(), "fl_drw_text_beside",\
            None, [cty.c_int, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_COLOR, cty.c_int, cty.c_int, xfc.STRING],
            """void fl_drw_text_beside(int align, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, FL_COLOR c, int style, int size,
               const char * str)
            """)
    check_admitted_listvalues(align, xfc.ALIGN_list)
    check_admitted_listvalues(align, xfc.COLOR_list)
    check_admitted_listvalues(style, xfc.TEXTSTYLE_list)
    check_admitted_listvalues(size, xfc.FONTSIZE_list)
    ialign = convert_to_int(align)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    s_txtstr = convert_to_string(txtstr)
    keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, style, istyle, size, isize, txtstr, s_txtstr)
    _fl_drw_text_beside(ialign, ix, iy, iw, ih, ulcolr, istyle,
                        isize, s_txtstr)


def fl_drw_text_cursor(align, x, y, w, h, colr, style, size, txtstr, cc, pos):
    """ fl_drw_text_cursor(align, x, y, w, h, colr, style, size, txtstr, cc, pos)

        @param align: alignment (<int>)
        @type align: (from xfdata module) FL_ALIGN_CENTER, FL_ALIGN_TOP,
                     FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
                     FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP,
                     FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM,
                     FL_ALIGN_INSIDE, FL_ALIGN_VERT
        @param x: horizontal position (upper-left corner) (<int>)
        @param y: vertical position (upper-left corner) (<int>)
        @param w: width in coord units (<int>)
        @param h: height in coord units (<int>)
        @param colr: color value (<long_pos>)
        @param style: font style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        @param size: font size (<int>)
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE, 
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE
        @param txtstr: text to draw (<string>)
        @param cc: (<int>)
        @param pos: (<int>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_drw_text_cursor = cfuncproto(
            load_so_libforms(), "fl_drw_text_cursor",\
            None, [cty.c_int, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_COLOR, cty.c_int, cty.c_int, xfc.STRING, 
            cty.c_int, cty.c_int],
            """void fl_drw_text_cursor(int align, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, FL_COLOR c, int style, int size,
               const char * str, int cc, int pos)
            """)
    check_admitted_listvalues(align, xfc.ALIGN_list)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    check_admitted_listvalues(style, xfc.TEXTSTYLE_list)
    check_admitted_listvalues(size, xfc.FONTSIZE_list)
    ialign = convert_to_int(align)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    stxtstr = convert_to_string(txtstr)
    icc = convert_to_int(cc)
    ipos = convert_to_int(pos)
    keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, style, istyle, size, isize, txtstr, stxtstr,
                   cc, icc, pos, ipos)
    _fl_drw_text_cursor(ialign, ix, iy, iw, ih, ulcolr, istyle,
                        isize, stxtstr, icc, ipos)


def fl_drw_box(style, x, y, w, h, colr, bwIn):
    """ fl_drw_box(style, x, y, w, h, colr, bwIn)

        @param style: font style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        @param x: horizontal position (upper-left corner) (<int>)
        @param y: vertical position (upper-left corner) (<int>)
        @param w: width in coord units (<int>)
        @param h: height in coord units (<int>)
        @param colr: color value (<long_pos>)
        @param bwIn: borderwidth (<int>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_drw_box = cfuncproto(
            load_so_libforms(), "fl_drw_box",\
            None, [cty.c_int, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_COLOR, cty.c_int],\
            """void fl_drw_box(int style, FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h, FL_COLOR c, int bw_in)
            """)
    check_admitted_listvalues(style, xfc.TEXTSTYLE_list)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    istyle = convert_to_int(style)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    ibwIn = convert_to_int(bwIn)
    keep_elem_refs(style, istyle, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, bwIn, ibwIn)
    _fl_drw_box(style, x, y, w, h, ulcolr, ibwIn)


FL_DRAWPTR = cty.CFUNCTYPE(None, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
                           xfc.FL_Coord, cty.c_int, xfc.FL_COLOR)

def fl_add_symbol(name, py_DrawPtr, scalable):
    """ fl_add_symbol(name, py_DrawPtr, scalable) -> num.

        Adds a symbol.

        @param name: name of a symbol
        @param py_DrawPtr: python function to draw symbol, fn(coord, coord,
                           coord, coord, num, colr)
        @param scalable: not used

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK

    """

    _fl_add_symbol = cfuncproto(
            load_so_libforms(), "fl_add_symbol",\
            cty.c_int, [xfc.STRING, FL_DRAWPTR, cty.c_int],\
            """int fl_add_symbol(const char * name, FL_DRAWPTR drawit,
               int scalable)
            """)
    sname = convert_to_string(name)
    iscalable = convert_to_int(scalable)
    c_DrawPtr = FL_DRAWPTR(py_DrawPtr)
    keep_cfunc_refs(c_DrawPtr, py_DrawPtr)
    keep_elem_refs(name, sname, scalable, iscalable)
    retval = _fl_add_symbol(sname, c_DrawPtr, iscalable)
    return retval


def fl_draw_symbol(label, x, y, w, h, colr):
    """ fl_draw_symbol(label, x, y, w, h, colr) -> num.

        @param label: label of symbol (<string>)
        @param x: horizontal position (upper-left corner) (<int>)
        @param y: vertical position (upper-left corner) (<int>)
        @param w: width in coord units (<int>)
        @param h: height in coord units (<int>)
        @param colr: color value (<long_pos>)

        @returns: (<int>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_draw_symbol = cfuncproto(
            load_so_libforms(), "fl_draw_symbol",\
            cty.c_int, [xfc.STRING, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_COLOR],\
            """int fl_draw_symbol(const char * label, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    slabel = convert_to_string(label)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(label, slabel, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr)
    retval = _fl_draw_symbol(slabel, ix, iy, iw, ih, ulcolr)
    return retval


def fl_mapcolor(colr, r, g, b):
    """ fl_mapcolor(colr, r, g, b) -> color

        Maps a new color using specific values for red, green and blue.

        @param colr: new color value to be mapped (<long_pos>)
        @param r: value for red (<int>)
        @param g: value for green (<int>)
        @param b: value for blue (<int>)

        @returns: color value (<long_pos>)

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_mapcolor = cfuncproto(
            load_so_libforms(), "fl_mapcolor",\
            cty.c_ulong, [xfc.FL_COLOR, cty.c_int, cty.c_int, cty.c_int],
            """unsigned long fl_mapcolor(FL_COLOR col, int r, int g, int b)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    ir = convert_to_int(r)
    ig = convert_to_int(g)
    ib = convert_to_int(b)
    keep_elem_refs(colr, ulcolr, r, ir, g, ig, b, ib)
    retval = _fl_mapcolor(ulcolr, ir, ig, ib)
    return retval


def fl_mapcolorname(colr, name):
    """ fl_mapcolorname(colr, name) -> num.

        @param colr: color value to be mapped (<long_pos>)
        @param name: name of mapped color (<string>)

        @returns: (<long>) 

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_mapcolorname = cfuncproto(
            load_so_libforms(), "fl_mapcolorname",\
            cty.c_long, [xfc.FL_COLOR, xfc.STRING],\
            """long int fl_mapcolorname(FL_COLOR col, const char * name)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    sname = convert_to_string(name)
    keep_elem_refs(colr, ulcolr, name, sname)
    retval = _fl_mapcolorname(ulcolr, sname)
    return retval


fl_mapcolor_name = fl_mapcolorname


def fl_free_colors(colr, num):
    """ fl_free_colors(colr, num)

        @param colr: color value (<long_pos>)
        @param num: number (<int>)

        @example:

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_free_colors = cfuncproto(
            load_so_libforms(), "fl_free_colors",\
            None, [cty.POINTER(xfc.FL_COLOR), cty.c_int],\
            """void fl_free_colors(FL_COLOR * c, int n)
            """)
    pcolr = cty.cast(colr, cty.POINTER(xfc.FL_COLOR))
    inum = convert_to_int(num)
    keep_elem_refs(colr, pcolr, num, inum)
    _fl_free_colors(pcolr, inum)


def fl_free_pixels(pix, num):
    """
        fl_free_pixels(pix, num)

        @param pix: pixel number (<long_pos>)
        @param num: number (<int>)

        @example:

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_free_pixels = cfuncproto(
            load_so_libforms(), "fl_free_pixels",\
            None, [cty.POINTER(cty.c_ulong), cty.c_int],\
            """void fl_free_pixels(long unsigned int * pix, int n)
            """)
    ppix = cty.cast(pix, cty.POINTER(cty.c_ulong))
    inum = convert_to_int(num)
    keep_elem_refs(pix, ppix, num, inum)
    _fl_free_pixels(ppix, inum)


def fl_set_color_leak(y):
    """ fl_set_color_leak(y)

        @param y: (<int>)

        @example:

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_color_leak = cfuncproto(
            load_so_libforms(), "fl_set_color_leak",\
            None, [cty.c_int],\
            """void fl_set_color_leak(int y)
            """)
    iy = convert_to_int(y)
    keep_elem_refs(y, iy)
    _fl_set_color_leak(iy)


def fl_getmcolor(colr):
    """ fl_getmcolor(colr) -> num., r, g, b

        @param colr: color value (<long_pos>)

        @returns: color, red, green, blue (<long_pos>, <int>, <int>, <int>)

        @example: 

        @attention: API change from XForms - upstream was
                    fl_getmcolor(colr, r, g, b)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_getmcolor = cfuncproto(
            load_so_libforms(), "fl_getmcolor",\
            cty.c_ulong, [xfc.FL_COLOR, cty.POINTER(cty.c_int),\
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
            """long unsigned int fl_getmcolor(FL_COLOR i, int * r, int * g,
               int * b)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    r, pr = make_int_and_pointer()
    g, pg = make_int_and_pointer()
    b, pb = make_int_and_pointer()
    keep_elem_refs(colr, ulcolr, r, g, b, pr, pg, pb)
    retval = _fl_getmcolor(ulcolr, pr, pg, pb)
    return retval, r, g,b


def fl_get_pixel(colr):
    """ fl_get_pixel(colr) -> pixel num.

        @param colr: color value (<long_pos>)

        @returns: pixel <long_pos>

        @example:

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_pixel = cfuncproto(
            load_so_libforms(), "fl_get_pixel",\
            cty.c_ulong, [xfc.FL_COLOR],\
            """long unsigned int fl_get_pixel(FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(colr, ulcolr)
    retval = _fl_get_pixel(ulcolr)
    return retval


fl_get_flcolor = fl_get_pixel


def fl_get_icm_color(colr):
    """ fl_get_icm_color(colr) -> r, g, b

        @param colr: color value (<long_pos>)

        @returns: red, green, blue (<int>, <int>, <int>)

        @example: 

        @attention: API change from XForms - upstream was
                    fl_get_icm_color(colr, r, g, b)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_icm_color = cfuncproto(
            load_so_libforms(), "fl_get_icm_color",\
            None, [xfc.FL_COLOR, cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
            """void fl_get_icm_color(FL_COLOR col, int * r, int * g, int * b)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    r, pr = make_int_and_pointer()
    g, pg = make_int_and_pointer()
    b, pb = make_int_and_pointer()
    keep_elem_refs(colr, ulcolr, r, g, b, pr, pg, pb)
    _fl_get_icm_color(ulcolr, pr, pg, pb)
    return r, g,b


def fl_set_icm_color(colr, r, g, b):
    """ fl_set_icm_color(colr, r, g, b)

        @param colr: color value (<long_pos>)
        @param r: red value (<int>)
        @param g: green value (<int>)
        @param b: blue value (<int>)

        @example:

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_icm_color = cfuncproto(
            load_so_libforms(), "fl_set_icm_color",\
            None, [xfc.FL_COLOR, cty.c_int, cty.c_int, cty.c_int],\
            """void fl_set_icm_color(FL_COLOR col, int r, int g, int b)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    ir = convert_to_int(r)
    ig = convert_to_int(g)
    ib = convert_to_int(b)
    keep_elem_refs(colr, ulcolr, r, g, b, ir, ig, ib)
    _fl_set_icm_color(ulcolr, ir, ig, ib)


def fl_color(colr):
    """ fl_color(colr)

        @param colr: color value (<long_pos>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_color = cfuncproto(
            load_so_libforms(), "fl_color",\
            None, [xfc.FL_COLOR],\
            """void fl_color(FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(colr, ulcolr)
    _fl_color(ulcolr)


def fl_bk_color(colr):
    """ fl_bk_color(colr)

        @param colr: color value (<long_pos>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_bk_color = cfuncproto(
            load_so_libforms(), "fl_bk_color",\
            None, [xfc.FL_COLOR],\
            """void fl_bk_color(FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(colr, ulcolr)
    _fl_bk_color(ulcolr)


def fl_textcolor(colr):
    """ fl_textcolor(colr)

        @param colr: color value (<long_pos>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_textcolor = cfuncproto(
            load_so_libforms(), "fl_textcolor",\
            None, [xfc.FL_COLOR],\
            """void fl_textcolor(FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(colr, ulcolr)
    _fl_textcolor(ulcolr)


def fl_bk_textcolor(colr):
    """ fl_bk_textcolor(colr)

        @param colr: color value (<long_pos>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_bk_textcolor = cfuncproto(
            load_so_libforms(), "fl_bk_textcolor",\
            None, [xfc.FL_COLOR],\
            """void fl_bk_textcolor(FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(colr, ulcolr)
    _fl_bk_textcolor(ulcolr)


def fl_set_gamma(r, g, b):
    """ fl_set_gamma(r, g, b)

        @param r: value for red (<float>)
        @param g: value for green (<float>)
        @param b: value for blue (<float>)

        @example:

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_gamma = cfuncproto(
            load_so_libforms(), "fl_set_gamma",\
            None, [cty.c_double, cty.c_double, cty.c_double],\
            """void fl_set_gamma(double r, double g, double b)
            """)
    fr = convert_to_double(r)
    fg = convert_to_double(g)
    fb = convert_to_double(b)
    keep_elem_refs(r, fr, g, fg, b, fb)
    _fl_set_gamma(fr, fg, fb)


# fl_show_errors(y) function placeholder (backwards)


# Some macros

def FL_max(a, b):
    if (a > b):
        return a
    else:
        return b


def FL_min(a, b):
    if (a < b):
        return a
    else:
        return b


def FL_abs(a):
    if (a > 0):
        return a
    else:
        return (-a)


def FL_nint(a):
    if int(a) > 0:
        return (a + 0.5)
    else:
        return (a - 0.5)


def FL_clamp(a, amin, amax):
    if (a < amin):
        return amin
    elif (a > amax):
        return amax
    else:
        return a


def FL_crnd(a):
    if a > 0:             # xfc.FL_Coord(a)
        return (a + 0.5)
    else:
        return (a - 0.5)


# utilities for new objects

def fl_add_object(pForm, pObject):
    """ fl_add_object(pForm, pObject)

        Adds an object.

        @param pForm: form
                      (<pointer to xfdata.FL_FORM>)
        @param pObject: object to be added
                        (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_object = cfuncproto(
            load_so_libforms(), "fl_add_object",\
            None, [cty.POINTER(xfc.FL_FORM), cty.POINTER(xfc.FL_OBJECT)],
            """void fl_add_object(FL_FORM * form, FL_OBJECT * obj)
            """)
    keep_elem_refs(pForm, pObject)
    _fl_add_object(pForm, pObject)


def fl_addto_form(pForm):
    """ fl_addto_form(pForm) -> pForm

        Reopens a form (after fl_end_form) for adding further objects to it.

        @param pForm: form
                      (<pointer to xfdata.FL_FORM>)

        @returns: form (<pointer to xfdata.FL_FORM>) or None (on failure)

        @example: form = fl_addto_form(closedform)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_addto_form = cfuncproto(
            load_so_libforms(), "fl_addto_form",
            cty.POINTER(xfc.FL_FORM), [cty.POINTER(xfc.FL_FORM)],\
            """FL_FORM * fl_addto_form(FL_FORM * form)
            """)
    keep_elem_refs(pForm)
    retval = _fl_addto_form(pForm)
    return retval


def fl_make_object(objclass, objtype, x, y, w, h, label, py_HandlePtr):
    """ fl_make_object(objclass, objtype, x, y, w, h, label, py_HandlePtr) -> pObject

        Makes a custom object.

        @param objclass: class type of object to be made (<int>)
        @param objtype: type of the object to be made (<int>)
        @param x: horizontal position of object (upper-left corner) (<int>)
        @param y: vertical position of object (upper-left corner) (<int>)
        @param w: width in coord units (<int>)
        @param h: height coord units (<int>)
        @param label: text label of object (<string>)
        @param py_HandlePtr: python function for handling object, with
                             returning value
        @type py_HandlePtr: __ funcname (pObject, num) -> num __

        @returns: object made (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_make_object = cfuncproto(
            load_so_libforms(), "fl_make_object",\
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING,
            xfc.FL_HANDLEPTR],
            """FL_OBJECT * fl_make_object(int objclass, int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label,
               FL_HANDLEPTR handle)
            """)
    check_admitted_listvalues(objclass, xfc.OBJCLASS_list)
    iobjclass = convert_to_int(objclass)
    iobjtype = convert_to_int(objtype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    c_HandlePtr = xfc.FL_HANDLEPTR(py_HandlePtr)
    keep_cfunc_refs(c_HandlePtr, py_HandlePtr)
    keep_elem_refs(objclass, objtype, x, y, w, h, label, iobjclass,
                   iobjtype, ix, iy, iw, ih, slabel)
    retval = _fl_make_object(iobjclass, iobjtype, ix, iy, iw,
                             ih, slabel, c_HandlePtr)
    return retval


def fl_add_child(pObject1, pObject2):
    """ fl_add_child(pObject1, pObject2)

        @param pObject1: father object
                         (<pointer to xfdata.FL_OBJECT>)
        @param pObject2: child object to add
                         (<pointer to xfdata.FL_OBJECT>)

        @example: 

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_child = cfuncproto(
            load_so_libforms(), "fl_add_child",\
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_OBJECT)],
            """void fl_add_child(FL_OBJECT * p1, FL_OBJECT * p2)
            """)
    keep_elem_refs(pObject1, pObject2)
    _fl_add_child(pObject1, pObject2)


def fl_set_coordunit(unit):
    """ fl_set_coordunit(unit)

        Sets the unit for screen coordinates, instead of default (pixel).

        @param unit: coord unit type to set (<int>)
        @type unit: (from xfdata module) FL_COORD_PIXEL, FL_COORD_MM,
                    FL_COORD_POINT, FL_COORD_centiMM, FL_COORD_centiPOINT

        @example: 

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_coordunit = cfuncproto(
            load_so_libforms(), "fl_set_coordunit",\
            None, [cty.c_int],\
            """void fl_set_coordunit(int u)
            """)
    check_admitted_listvalues(unit, xfc.COORDUNIT_list)
    iunit = convert_to_int(unit)
    keep_elem_refs(unit, iunit)
    _fl_set_coordunit(iunit)


def fl_set_border_width(bw):
    """ fl_set_border_width(bw)

        Sets the width of the border.

        @param bw: width value of border (<int>)

        @example:

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_border_width = cfuncproto(
            load_so_libforms(), "fl_set_border_width",\
            None, [cty.c_int],\
            """void fl_set_border_width(int bw)
            """)
    ibw = convert_to_int(bw)
    keep_elem_refs(bw, ibw)
    _fl_set_border_width(ibw)


def fl_set_scrollbar_type(sbtype):
    """ fl_set_scrollbar_type(sbtype)

        Sets the type of a scrollbar.

        @param sbtype: type of scrollbar (<int>)
        @type sbtype: (from xfdata module) FL_VERT_SCROLLBAR,
                      FL_HOR_SCROLLBAR, FL_VERT_THIN_SCROLLBAR,
                      FL_HOR_THIN_SCROLLBAR, FL_VERT_NICE_SCROLLBAR,
                      FL_HOR_NICE_SCROLLBAR, FL_VERT_PLAIN_SCROLLBAR,
                      FL_HOR_PLAIN_SCROLLBAR, FL_HOR_BASIC_SCROLLBAR,
                      FL_VERT_BASIC_SCROLLBAR, FL_NORMAL_SCROLLBAR,
                      FL_THIN_SCROLLBAR, FL_NICE_SCROLLBAR, FL_PLAIN_SCROLLBAR

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_scrollbar_type = cfuncproto(
            load_so_libforms(), "fl_set_scrollbar_type",\
            None, [cty.c_int],\
            """void fl_set_scrollbar_type(int t)
            """)
    check_admitted_listvalues(sbtype, xfc.SCROLLTYPE_list)
    isbtype = convert_to_int(sbtype)
    keep_elem_refs(sbtype, isbtype)
    _fl_set_scrollbar_type(isbtype)


def fl_set_thinscrollbar(flag):
    """ fl_set_thinscrollbar(flag)

        Sets if scrollbar type is thin or normal.

        @param flag: flag (1 for thin or 0 for normal)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    if flag:
        sbtype = xfc.FL_THIN_SCROLLBAR
    else:
        sbtype = xfc.FL_NORMAL_SCROLLBAR
    fl_set_scrollbar_type(sbtype)


def fl_flip_yorigin():
    """ fl_flip_yorigin()

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_flip_yorigin = cfuncproto(
            load_so_libforms(), "fl_flip_yorigin",\
            None, [],\
            """void fl_flip_yorigin()
            """)
    _fl_flip_yorigin()


def fl_get_coordunit():
    """ fl_get_coordunit() -> coord_unit num.

        Returns the unit used for screen coordinates.

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_coordunit = cfuncproto(
            load_so_libforms(), "fl_get_coordunit",\
            cty.c_int, [],\
            """int fl_get_coordunit()
            """)
    retval = _fl_get_coordunit()
    return retval


def fl_get_border_width():
    """ fl_get_border_width() -> width num.

        Returns the width of border.

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_border_width = cfuncproto(
            load_so_libforms(), "fl_get_border_width",\
            cty.c_int, [],\
            """int fl_get_border_width()
            """)
    retval = _fl_get_border_width()
    return retval


# misc. routines

def fl_ringbell(percent):
    """ fl_ringbell(percent)

        Sounds the keyboard ringbell (if capable).

        @param percent: volume value for the bell, min -100 (off), 
                        max  100, 0 is default.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_ringbell = cfuncproto(
            load_so_libforms(), "fl_ringbell",\
            None, [cty.c_int],\
            """void fl_ringbell(int percent)
            """)
    ipercent = convert_to_int(percent)
    keep_elem_refs(percent, ipercent)
    _fl_ringbell(ipercent)


def fl_gettime():
    """ fl_gettime() -> sec, usec

        Returns the current time, expressed in seconds and microseconds
        since 00:00 GMT January, 1970. It is most useful for computing
        time differences.

        @attention: API change from XForms - upstream was
                    fl_gettime(sec, usec)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_gettime = cfuncproto(
            load_so_libforms(), "fl_gettime",\
            None, [cty.POINTER(cty.c_long), cty.POINTER(cty.c_long)],\
            """void fl_gettime(long int * sec, long int * usec)
            """)
    sec, psec = make_long_and_pointer()
    usec, pusec = make_long_and_pointer()
    keep_elem_refs(sec, usec, psec, pusec)
    _fl_gettime(psec, pusec)
    return sec, usec


def fl_now():
    """ fl_now() -> string

        Returns a string form of the current date and time. The format of
        the string is of the form "Wed Jun 30 21:49:08 1993"

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_now = cfuncproto(
            load_so_libforms(), "fl_now",\
            xfc.STRING, [],\
            """const char * fl_now()
            """)
    retval = _fl_now()
    return retval


def fl_whoami():
    """ fl_whoami() -> string

        Returns the user name who is running the application.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_whoami = cfuncproto(
            load_so_libforms(), "fl_whoami",\
            xfc.STRING, [],\
            """const char * fl_whoami()
            """)
    retval = _fl_whoami()
    return retval


def fl_mouse_button():
    """ fl_mouse_button() -> num.

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_mouse_button = cfuncproto(
            load_so_libforms(), "fl_mouse_button",\
            cty.c_long, [],\
            """long int fl_mouse_button()
            """)
    retval = _fl_mouse_button()
    return retval

fl_mousebutton = fl_mouse_button



def fl_strdup(strng):
    """ fl_strdup(strng) -> string

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_strdup = cfuncproto(
            load_so_libforms(), "fl_strdup",\
            xfc.STRING, [xfc.STRING],\
            """char * fl_strdup(const char * s)
            """)
    sstrng = convert_to_string(strng)
    keep_elem_refs(strng, sstrng)
    retval = _fl_strdup(sstrng)
    return retval


def fl_set_err_logfp(pFile):
    """ fl_set_err_logfp(pFile)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_err_logfp = cfuncproto(
            load_so_libforms(), "fl_set_err_logfp",\
            None, [cty.POINTER(xfc.FILE)],\
            """void fl_set_err_logfp(FILE * fp)
            """)
    keep_elem_refs(pFile)
    _fl_set_err_logfp(pFile)


# fl_set_error_logfp placeholder (backwards)


#already defined in xfdata
# FL_ERROR_FUNC = xty.CFUNCTYPE(...)

def fl_set_error_handler(py_ErrorFunc):
    """ fl_set_error_handler(py_ErrorFunc)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_error_handler = cfuncproto(
            load_so_libforms(), "fl_set_error_handler",\
            None, [xfc.FL_ERROR_FUNC],\
            """void fl_set_error_handler(FL_ERROR_FUNC user_func)
            """)
    c_ErrorFunc = xfc.FL_ERROR_FUNC(py_ErrorFunc)
    keep_cfunc_refs(c_ErrorFunc, py_ErrorFunc)
    retval = _fl_set_error_handler(c_ErrorFunc)
    return retval


def fl_get_cmdline_args(numargs):
    """ fl_get_cmdline_args(numargs) -> pointer to string

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_cmdline_args = cfuncproto(
            load_so_libforms(), "fl_get_cmdline_args",\
            cty.POINTER(xfc.STRING), [cty.POINTER(cty.c_int)],\
            """)char * * fl_get_cmdline_args(int * p1)
            """)
    keep_elem_refs(numargs)
    retval = _fl_get_cmdline_args(numargs)
    return retval


# fl_free function placeholder (low-level)

# cfunction for _fl_malloc
cfunc_none_sizet = cty.CFUNCTYPE(cty.c_void_p, xfc.size_t)

# fl_malloc function placeholder (low-level)

# cfunction for _fl_calloc
cfunc_none_sizet_sizet = cty.CFUNCTYPE(cty.c_void_p, xfc.size_t, xfc.size_t)

# fl_calloc function placeholder (low-level)

# cfunction for _fl_realloc
cfunc_voidp_voidp_sizet = cty.CFUNCTYPE(cty.c_void_p, cty.c_void_p, xfc.size_t)

# fl_realloc function placeholder (low-level)


def fl_msleep(msec):
    """ fl_msleep(msec) -> num.

        Waits for a number of milliseconds (with the best resolution
        possible on your system)

        @param msec: milliseconds to sleep

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_msleep = cfuncproto(
            load_so_libforms(), "fl_msleep",\
            cty.c_int, [cty.c_ulong],\
            """int fl_msleep(long unsigned int msec)
            """)
    ulmsec = convert_to_ulong(msec)
    keep_elem_refs(msec, ulmsec)
    retval = _fl_msleep(ulmsec)
    return retval


def fl_is_same_object(pObject1, pObject2):
    """ fl_is_same_object(pObject1, pObject2) -> num.

        Does a comparison between two objects (returns non-zero is they are
        the same, zero if not).

        @param pObject1: pointer to 1st object to compare
        @type pObject1: pointer to xfdata.FL_OBJECT
        @param pObject2: pointer to 2nd object to compare
        @type pObject2: pointer to xfdata.FL_OBJECT

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_is_same_object = cfuncproto(
            load_so_libforms(), "fl_is_same_object", \
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT),
            cty.POINTER(xfc.FL_OBJECT)], \
            """int fl_is_same_object(FL_OBJECT * obj1, FL_OBJECT * obj2)
            """)
    keep_elem_refs(pObject1, pObject2)
    retval = _fl_is_same_object(pObject1, pObject2)
    return retval



###########################
# forms.h (XBasic.h)
# X Window dependent stuff
###########################

def FL_is_gray(v):
    if (v == xfc.GrayScale) or (v == xfc.StaticGray):
        return True
    else:
        return False


def FL_is_rgb(v):
    if (v == xfc.TrueColor) or (v == xfc.DirectColor):
        return True
    else:
        return False


# Current version only runs in single visual mode
def fl_get_vclass():
    return fl_vmode


def fl_get_form_vclass(a):
    return fl_vmode


def fl_get_gc():
    return fl_state[fl_vmode].gc[0]


def fl_mode_capable(mode, warn):
    """ fl_mode_capable(mode, warn) -> mode num.

        Determines the visual classes the system is capable of. It returns
        1 if the system is capable of displaying in this visual class and
        0 otherwise.

        @param mode: visual mode (i.e. xfc.GrayScale, xfc.StaticGray,
                     xfc.PseudoColor, xfc.StaticColor, xfc.DirectColor and
                     xfc.TrueColor)
        @param warn: warning (0|1), if set a warning is printed out in case
                     the capability asked for isn't available

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_mode_capable = cfuncproto(
            load_so_libforms(), "fl_mode_capable",\
            cty.c_int, [cty.c_int, cty.c_int],\
            """int fl_mode_capable(int mode, int warn)
            """)
    imode = convert_to_int(mode)
    iwarn = convert_to_int(warn)
    keep_elem_refs(mode, warn, imode, iwarn)
    retval = _fl_mode_capable(imode, iwarn)
    return retval


def fl_default_win():
    return fl_state[fl_vmode].trailblazer


def fl_default_window():
    return fl_state[fl_vmode].trailblazer


# Some basic drawing routines

# Rectangles

def fl_rectangle(fill, x, y, w, h, colr):
    """ fl_rectangle(fill, x, y, w, h, colr)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_rectangle = cfuncproto(
            load_so_libforms(), "fl_rectangle",\
            None, [cty.c_int, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_COLOR],\
            """void fl_rectangle(int fill, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ifill = convert_to_int(fill)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(fill, x, y, w, h, colr, ifill, ix, iy, iw, ih,
                   ulcolr)
    _fl_rectangle(ifill, ix, iy, iw, ih, ulcolr)


def fl_rectbound(x, y, w, h, colr):
    """ fl_rectbound(x, y, w, h, colr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_rectbound = cfuncproto(
            load_so_libforms(), "fl_rectbound",\
            None, [xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_COLOR],\
            """void fl_rectbound(FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(x, y, w, h, colr, ix, iy, iw, ih, ulcolr)
    _fl_rectbound(ix, iy, iw, ih, ulcolr)


def fl_rectf(x, y, w, h, colr):
    """ fl_rectf(x, y, w, h, colr)

        @status: Tested + NoDoc + Demo = OK
    """

    fl_rectangle(1, x, y, w, h, colr)


def fl_rect(x, y, w, h, colr):
    """ fl_rect(x, y, w, h, colr)

        @status: Tested + NoDoc + Demo = OK
    """

    fl_rectangle(0, x, y, w, h, colr)


# Rectangle with rounded-corners

def fl_roundrectangle(fill, x, y, w, h, colr):
    """ fl_roundrectangle(fill, x, y, w, h, colr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_roundrectangle = cfuncproto(
            load_so_libforms(), "fl_roundrectangle",\
            None, [cty.c_int, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_COLOR],\
            """void fl_roundrectangle(int fill, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ifill = convert_to_int(fill)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(fill, x, y, w, h, colr, ifill, ix, iy, iw, ih,
                   ulcolr)
    _fl_roundrectangle(ifill, ix, iy, iw, ih, ulcolr)


def fl_roundrectf(x, y, w, h, colr):
    """ fl_roundrectf(x, y, w, h, colr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    fl_roundrectangle(1, x, y, w, h, colr)


def fl_roundrect(x, y, w, h, colr):
    """ fl_roundrect(x, y, w, h, colr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    fl_roundrectangle(0, x, y, w, h, colr)


# General polygon and polylines

def fl_polygon(fill, Point, numpt, colr):
    """ fl_polygon(fill, Point, numpt, colr)

        @param fill: if polygon has to be filled or not (1|0)
        @param Point: an array of xfc.FL_POINT class instance
        @param numpt: number of points
        @param colr: value of color to be set

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_polygon = cfuncproto(
            load_so_libforms(), "fl_polygon",\
            None, [cty.c_int, cty.POINTER(xfc.FL_POINT), cty.c_int,
            xfc.FL_COLOR],
            """void fl_polygon(int fill, FL_POINT * xp, int n, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ifill = convert_to_int(fill)
    pPoint = cty.cast(Point, cty.POINTER(xfc.FL_POINT))
    inumpt = convert_to_int(numpt)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(fill, Point, numpt, colr, ifill, pPoint, inumpt, ulcolr)
    _fl_polygon(ifill, pPoint, inumpt, ulcolr)


def fl_polyf(Point, numpt, colr):
    """ fl_polyf(Point, numpt, colr)

        @param Point: an array of xfc.FL_POINT class instance
        @param numpt: number of points
        @param colr: value of color to be set

        @status: Tested + NoDoc + Demo = OK
    """

    fl_polygon(1, Point, numpt, colr)


def fl_polyl(Point, numpt, colr):
    """ fl_polyl(Point, numpt, colr)

        @param Point: an array of xfc.FL_POINT class instance
        @param numpt: number of points
        @param colr: value of color to be set

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    fl_polygon(0, Point, numpt, colr)


def fl_polybound(Point, numpt, colr):
    """ fl_polyl(Point, numpt, colr)

        @param Point: an array of xfc.FL_POINT class instance
        @param numpt: number of points
        @param colr: value of color to be set

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    fl_polygon(1, Point, numpt, colr)
    fl_polygon(0, Point, numpt, xfc.FL_BLACK)


def fl_lines(Point, numpt, colr):
    """ fl_lines(Point, numpt, colr)

        @param Point: an array of xfc.FL_POINT class instance
        @param numpt: number of points
        @param colr: value of color to be set

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_lines = cfuncproto(
            load_so_libforms(), "fl_lines",\
            None, [cty.POINTER(xfc.FL_POINT), cty.c_int, xfc.FL_COLOR],\
            """void fl_lines(FL_POINT * xp, int n, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    pPoint = cty.cast(Point, cty.POINTER(xfc.FL_POINT))
    inumpt = convert_to_int(numpt)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(Point, numpt, colr, inumpt, ulcolr)
    _fl_lines(pPoint, inumpt, ulcolr)


def fl_line(xi, yi, xf, yf, colr):
    """ fl_line(xi, yi, xf, yf, colr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_line = cfuncproto(
            load_so_libforms(), "fl_line",\
            None, [xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_COLOR],\
            """void fl_line(FL_Coord xi, FL_Coord yi, FL_Coord xf,
               FL_Coord yf, FL_COLOR c)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ixi = convert_to_int(xi)
    iyi = convert_to_int(yi)
    ixf = convert_to_int(xf)
    iyf = convert_to_int(yf)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(xi, yi, xf, yf, colr, ixi, iyi, ixf, iyf, ulcolr)
    _fl_line(ixi, iyi, ixf, iyf, ulcolr)


fl_simple_line = fl_line


def fl_point(x, y, colr):
    """
        fl_point(x, y, colr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_point = cfuncproto(
            load_so_libforms(), "fl_point",\
            None, [xfc.FL_Coord, xfc.FL_Coord, xfc.FL_COLOR],\
            """void fl_point(FL_Coord x, FL_Coord y, FL_COLOR c)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(x, y, colr, ix, iy, ulcolr)
    _fl_point(ix, iy, ulcolr)


def fl_points(Point, numpt, colr):
    """ fl_points(Point, numpt, colr)

        @param Point: an array of xfc.FL_POINT class instance
        @param numpt: number of points
        @param colr: value of color to be set

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_points = cfuncproto(
            load_so_libforms(), "fl_points",\
            None, [cty.POINTER(xfc.FL_POINT), cty.c_int, xfc.FL_COLOR],
            """void fl_points(FL_POINT * p, int np, FL_COLOR c)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    pPoint = cty.cast(Point, cty.POINTER(xfc.FL_POINT))
    inumpt = convert_to_int(numpt)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(Point, numpt, colr, pPoint, inumpt, ulcolr)
    _fl_points(pPoint, inumpt, ulcolr)


def fl_dashedlinestyle(dash, ndash):
    """
        fl_dashedlinestyle(dash, ndash)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_dashedlinestyle = cfuncproto(
            load_so_libforms(), "fl_dashedlinestyle",\
            None, [xfc.STRING, cty.c_int],\
            """void fl_dashedlinestyle(const char * dash, int ndash)
            """)
    sdash = convert_to_string(dash)
    indash = convert_to_int(ndash)
    keep_elem_refs(dash, ndash, sdash, indash)
    _fl_dashedlinestyle(sdash, indash)


def fl_update_display(block):
    """
        fl_update_display(block)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_update_display = cfuncproto(
            load_so_libforms(), "fl_update_display",\
            None, [cty.c_int],\
            """void fl_update_display(int block)
            """)
    iblock = convert_to_int(block)
    keep_elem_refs(block, iblock)
    _fl_update_display(iblock)


def fl_diagline(x, y, w, h, colr):
    """
        fl_diagline(x, y, w, h, colr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    fl_line(x, y, (x) + (w) - 1, (y) + (h) - 1, colr)


# Line attributes

def fl_linewidth(w):
    """
        fl_linewidth(w)

        @param w: width of line in coord units
        @type w: num./int

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_linewidth = cfuncproto(
            load_so_libforms(), "fl_linewidth",\
            None, [cty.c_int],\
            """void fl_linewidth(int n)
            """)
    iw = convert_to_int(w)
    keep_elem_refs(w, iw)
    _fl_linewidth(iw)


fl_set_linewidth = fl_linewidth


def fl_linestyle(linestyle):
    """
        fl_linestyle(linestyle)

        @param linestyle: style of the line to draw
        @type linestyle: [num./int] from xfdata module FL_SOLID, FL_USERDASH,
                         FL_USERDOUBLEDASH, FL_DOT, FL_DOTDASH, FL_DASH,
                         FL_LONGDASH

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_linestyle = cfuncproto(
            load_so_libforms(), "fl_linestyle",\
            None, [cty.c_int],\
            """void fl_linestyle(int n)
            """)
    check_admitted_listvalues(linestyle, xfc.LINESTYLE_list)
    ilinestyle = convert_to_int(linestyle)
    keep_elem_refs(linestyle, ilinestyle)
    _fl_linestyle(ilinestyle)


fl_set_linestyle = fl_linestyle


def fl_drawmode(request):
    """ fl_drawmode(request)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_drawmode = cfuncproto(
            load_so_libforms(), "fl_drawmode",\
            None, [cty.c_int],\
            """void fl_drawmode(int request)
            """)
    irequest = convert_to_int(request)
    keep_elem_refs(request, irequest)
    _fl_drawmode(irequest)


def fl_get_linewidth():
    """ fl_get_linewidth() -> width num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_linewidth = cfuncproto(
            load_so_libforms(), "fl_get_linewidth",\
            cty.c_int, [],\
            """int fl_get_linewidth()
            """)
    retval = _fl_get_linewidth()
    return retval


def fl_get_linestyle():
    """ fl_get_linestyle() -> style num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_linestyle = cfuncproto(
            load_so_libforms(), "fl_get_linestyle",\
            cty.c_int, [],\
            """int fl_get_linestyle()
            """)
    retval = _fl_get_linestyle()
    return retval


def fl_get_drawmode():
    """ fl_get_drawmode() -> mode num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_drawmode = cfuncproto(
            load_so_libforms(), "fl_get_drawmode",\
            cty.c_int, [],\
            """int fl_get_drawmode()
            """)
    retval = _fl_get_drawmode()
    return retval


fl_set_drawmode = fl_drawmode


# Ellipses

def fl_oval(fill, x, y, w, h, colr):
    """ fl_oval(fill, x, y, w, h, colr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_oval = cfuncproto(
            load_so_libforms(), "fl_oval",\
            None, [cty.c_int, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_COLOR], \
            """void fl_oval(int fill, FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ifill = convert_to_int(fill)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(fill, x, y, w, h, colr, ifill, ix, iy, iw, ih,
                   ulcolr)
    _fl_oval(ifill, ix, iy, iw, ih, ulcolr)


def fl_ovalbound(x, y, w, h, colr):
    """ fl_ovalbound(x, y, w, h, colr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_ovalbound = cfuncproto(
            load_so_libforms(), "fl_ovalbound",\
            None, [xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_COLOR],\
            """void fl_ovalbound(FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(x, y, w, h, colr, ix, iy, iw, ih, ulcolr)
    _fl_ovalbound(ix, iy, iw, ih, ulcolr)


def fl_ovalarc(fill, x, y, w, h, t0, dt, colr):
    """ fl_ovalarc(fill, x, y, w, h, t0, dt, colr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_ovalarc = cfuncproto(
            load_so_libforms(), "fl_ovalarc",\
            None, [cty.c_int, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, cty.c_int, cty.c_int, xfc.FL_COLOR],
            """void fl_ovalarc(int fill, FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h, int t0, int dt, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ifill = convert_to_int(fill)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    it0 = convert_to_int(t0)
    idt = convert_to_int(dt)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(fill, x, y, w, h, t0, dt, colr, ifill, ix, iy, iw,
                   ih, it0, idt, ulcolr)
    _fl_ovalarc(ifill, ix, iy, iw, ih, it0, idt, ulcolr)


def fl_ovalf(x, y, w, h, colr):
    """ fl_ovalf(x, y, w, h, colr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    fl_oval(1, x, y, w, h, colr)


def fl_ovall(x, y, w, h, colr):
    """ fl_ovall(x, y, w, h, colr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    fl_oval(0, x, y, w, h, colr)


fl_oval_bound = fl_ovalbound


def fl_circf(x, y, r, colr):
    """ fl_circf(x, y, r, colr)

        @status: Tested + NoDoc + Demo = OK
    """

    fl_oval(1, (x) - (r), (y) - (r), 2 * (r), 2 * (r), colr)


def fl_circ(x, y, r, colr):
    """ fl_circ()x, y, r, colr

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    fl_oval(0, (x) - (r), (y) - (r), 2 * (r), 2 * (r), colr)


# Arcs

def fl_pieslice(fill, x, y, w, h, a1, a2, colr):
    """ fl_pieslice(fill, x, y, w, h, a1, a2, colr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_pieslice = cfuncproto(
            load_so_libforms(), "fl_pieslice",\
            None, [cty.c_int, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, cty.c_int, cty.c_int, xfc.FL_COLOR],
            """void fl_pieslice(int fill, FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h, int a1, int a2, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ifill = convert_to_int(fill)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ia1 = convert_to_int(a1)
    ia2 = convert_to_int(a2)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(fill, x, y, w, h, a1, a2, colr, ifill, ix, iy, iw,
                   ih, ia1, ia2, ulcolr)
    _fl_pieslice(ifill, ix, iy, iw, ih, ia1, ia2, ulcolr)


def fl_arcf(x, y, r, a1, a2, colr):
    """ fl_arcf(x, y, r, a1, a2, colr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    fl_pieslice(1, (x - r), (y - r), (2 * r), (2 * r), a1, a2, colr)


def fl_arc(x, y, r, a1, a2, colr):
    """ fl_arc(x, y, r, a1, a2, colr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    fl_pieslice(0, (x - r), (y - r), (2 * r), (2 * r), a1, a2, colr)


# High level drawing routines

def fl_drw_frame(style, x, y, w, h, colr, bw):
    """ fl_drw_frame(style, x, y, w, h, colr, bw)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_drw_frame = cfuncproto(
            load_so_libforms(), "fl_drw_frame",\
            None, [cty.c_int, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_COLOR, cty.c_int],
            """void fl_drw_frame(int style, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, FL_COLOR c, int bw)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    istyle = convert_to_int(style)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    ibw = convert_to_int(bw)
    keep_elem_refs(style, x, y, w, h, colr, bw, istyle, ix, iy, iw,
                   ih, ulcolr, ibw)
    _fl_drw_frame(istyle, ix, iy, iw, ih, ulcolr, ibw)


def fl_drw_checkbox(boxtype, x, y, w, h, colr, bw):
    """ fl_drw_checkbox(boxtype, x, y, w, h, colr, bw)

        @param boxtype: type of checkbox to draw
        @param boxtype: type of the box to be added (<int>)
        @type boxtype: (from xfdata module) FL_NO_BOX, FL_UP_BOX, FL_DOWN_BOX,
                       FL_BORDER_BOX, FL_SHADOW_BOX, FL_FRAME_BOX,
                       FL_ROUNDED_BOX, FL_EMBOSSED_BOX, FL_FLAT_BOX,
                       FL_RFLAT_BOX, FL_RSHADOW_BOX, FL_OVAL_BOX,
                       FL_ROUNDED3D_UPBOX, FL_ROUNDED3D_DOWNBOX,
                       FL_OVAL3D_UPBOX, FL_OVAL3D_DOWNBOX, FL_OVAL3D_FRAMEBOX,
                       FL_OVAL3D_EMBOSSEDBOX

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_drw_checkbox = cfuncproto(
            load_so_libforms(), "fl_drw_checkbox",\
            None, [cty.c_int, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_COLOR, cty.c_int],
            """void fl_drw_checkbox(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, FL_COLOR col, int bw)
            """)
    check_admitted_listvalues(boxtype, xfc.BOXTYPE_list)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    iboxtype = convert_to_int(boxtype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    ulcolr = convert_to_FL_COLOR(colr)
    ibw = convert_to_int(bw)
    keep_elem_refs(boxtype, x, y, w, h, colr, bw, iboxtype, ix, iy, iw,
                   ih, ulcolr, ibw)
    _fl_drw_checkbox(iboxtype, ix, iy, iw, ih, ulcolr, ibw)


# Interfaces

def fl_get_fontstruct(style, size):
    """ fl_get_fontstruct(style, size) -> XFontStruct class

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_fontstruct = cfuncproto(
            load_so_libforms(), "fl_get_fontstruct",\
            cty.POINTER(xfc.XFontStruct), [cty.c_int, cty.c_int],\
            """)XFontStruct * fl_get_fontstruct(int style, int size)
            """)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    keep_elem_refs(style, size, istyle, isize)
    retval = _fl_get_fontstruct(istyle, isize)
    return retval


fl_get_font_struct = fl_get_fontstruct
fl_get_fntstruct = fl_get_font_struct


def fl_get_mouse():
    """ fl_get_mouse() -> window, x, y, keymask

        @attention: API change from XForms - upstream was
                    fl_get_mouse(x, y, keymask)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_mouse = cfuncproto(
            load_so_libforms(), "fl_get_mouse",\
            xfc.Window, [cty.POINTER(xfc.FL_Coord), cty.POINTER(xfc.FL_Coord),
            cty.POINTER(cty.c_uint)],\
            """Window fl_get_mouse(FL_Coord * x, FL_Coord * y,
              unsigned int * keymask)
            """)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    keymask, pkeymask = make_uint_and_pointer()
    keep_elem_refs(x, y, keymask, px, py, pkeymask)
    retval = _fl_get_mouse(px, py, pkeymask)
    return retval, x, y, keymask


def fl_set_mouse(mx, my):
    """ fl_set_mouse(mx, my)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_mouse = cfuncproto(
            load_so_libforms(), "fl_set_mouse",\
            None, [xfc.FL_Coord, xfc.FL_Coord],\
            """void fl_set_mouse(FL_Coord mx, FL_Coord my)
            """)
    imx = convert_to_FL_Coord(mx)
    imy = convert_to_FL_Coord(my)
    keep_elem_refs(mx, my, imx, imy)
    _fl_set_mouse(imx, imy)


def fl_get_win_mouse(win):
    """ fl_get_win_mouse(win) -> window, x, y, keymask

        @attention: API change from XForms - upstream was
                    fl_get_win_mouse(win, x, y, keymask)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_win_mouse = cfuncproto(
            load_so_libforms(), "fl_get_win_mouse",\
            xfc.Window, [xfc.Window, cty.POINTER(xfc.FL_Coord),
            cty.POINTER(xfc.FL_Coord), cty.POINTER(cty.c_uint)],\
            """Window fl_get_win_mouse(Window win, FL_Coord * x, FL_Coord * y,
            unsigned int * keymask)
            """)
    ulwin = convert_to_Window(win)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    keymask, pkeymask = make_uint_and_pointer()
    keep_elem_refs(win, x, y, keymask, ulwin, px, py, pkeymask)
    retval = _fl_get_win_mouse(ulwin, px, py, pkeymask)
    return retval, x, y, keymask


def fl_get_form_mouse(pForm):
    """ fl_get_form_mouse(pForm) -> window, x, y, keymask

        @param pForm: pointer to form

        @attention: API change from XForms - upstream was
                    fl_get_form_mouse(fm, x, y, keymask)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_form_mouse = cfuncproto(
            load_so_libforms(), "fl_get_form_mouse",\
            xfc.Window, [cty.POINTER(xfc.FL_FORM), cty.POINTER(xfc.FL_Coord),
            cty.POINTER(xfc.FL_Coord), cty.POINTER(cty.c_uint)],\
            """Window fl_get_form_mouse(FL_FORM * fm, FL_Coord * x,
               FL_Coord * y, unsigned int * keymask)
            """)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    keymask, pkeymask = make_uint_and_pointer()
    keep_elem_refs(pForm, x, y, keymask)
    retval = _fl_get_form_mouse(pForm, px, py, pkeymask)
    return retval, x, y, keymask


def fl_win_to_form(win):
    """ fl_win_to_form(win) -> pForm

        Returns the form that is shown in win.

        @param win : window id whose form is shown

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_win_to_form = cfuncproto(
            load_so_libforms(), "fl_win_to_form",
            cty.POINTER(xfc.FL_FORM), [xfc.Window],\
            """FL_FORM * fl_win_to_form(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    retval = _fl_win_to_form(ulwin)
    return retval


def fl_set_form_icon(pForm, icon, mask):
    """ fl_set_form_icon(pForm, icon, mask)

        @param pForm: pointer to form

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_form_icon = cfuncproto(
            load_so_libforms(), "fl_set_form_icon",\
            None, [cty.POINTER(xfc.FL_FORM), xfc.Pixmap, xfc.Pixmap],\
            """void fl_set_form_icon(FL_FORM * form, Pixmap p, Pixmap m)
            """)
    ulicon = convert_to_Pixmap(icon)
    ulmask = convert_to_Pixmap(mask)
    keep_elem_refs(pForm, icon, mask, ulicon, ulmask)
    _fl_set_form_icon(pForm, ulicon, ulmask)


def fl_get_decoration_sizes(pForm):
    """ fl_get_decoration_sizes(pForm) -> num., top, right, bottom, left

        Returns the sizes of the "decorations" the window manager puts around
        a form's window. Returns 0 on success and 1 if the form isn't visible
        or it's a form embedded into another form.

        @param pForm: pointer to form

        @attention: API change from XForms - upstream was
           fl_get_decoration_sizes(pForm, top, right, bottom, left)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_decoration_sizes = cfuncproto(
            load_so_libforms(), "fl_get_decoration_sizes",
            cty.c_int, [cty.POINTER(xfc.FL_FORM), cty.POINTER(cty.c_int),\
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],\
            """int fl_get_decoration_sizes(FL_FORM * form, int * top,
               int * right, int * bottom, int * left)
            """)
    top, ptop = make_int_and_pointer()
    right, pright = make_int_and_pointer()
    bottom, pbottom = make_int_and_pointer()
    left, pleft = make_int_and_pointer()
    keep_elem_refs(pForm, top, right, bottom, left, ptop, pright, pbottom,
                   pleft)
    retval = _fl_get_decoration_sizes(pForm, ptop, pright, pbottom, pleft)
    return retval, top, right, bottom, left


def fl_raise_form(pForm):
    """ fl_raise_form(pForm)

        @param pForm: pouinter to form to be raised

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_raise_form = cfuncproto(
            load_so_libforms(), "fl_raise_form",\
            None, [cty.POINTER(xfc.FL_FORM)],\
            """void fl_raise_form(FL_FORM * p1)
            """)
    keep_elem_refs(pForm)
    _fl_raise_form(pForm)


def fl_lower_form(pForm):
    """ fl_lower_form(pForm)

        @param pForm: pointer to form to be lowered

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_lower_form = cfuncproto(
            load_so_libforms(), "fl_lower_form",\
            None, [cty.POINTER(xfc.FL_FORM)],\
            """void fl_lower_form(FL_FORM * p1)
            """)
    keep_elem_refs(pForm)
    _fl_lower_form(pForm)


def fl_set_foreground(gc, colr):
    """ fl_set_foreground(gc, colr)

        @param gc: ?
        @param colr: color value to be set as foreground

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_foreground = cfuncproto(
            load_so_libforms(), "fl_set_foreground",\
            None, [xfc.GC, xfc.FL_COLOR],\
            """void fl_set_foreground(GC gc, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(gc, colr, ulcolr)
    _fl_set_foreground(gc, ulcolr)


def fl_set_background(gc, colr):
    """ fl_set_background(gc, colr)

        @param gc: ?
        @param colr: color value to be set as background

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_background = cfuncproto(
            load_so_libforms(), "fl_set_background",\
            None, [xfc.GC, xfc.FL_COLOR],\
            """void fl_set_background(GC gc, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(gc, colr, ulcolr)
    _fl_set_background(gc, ulcolr)


# General windowing support

def fl_wincreate(title):
    """ fl_wincreate(title) -> window ID

        Creates a window with a specified title.

        @param title: title of the window

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_wincreate = cfuncproto(
            load_so_libforms(), "fl_wincreate",\
            xfc.Window, [xfc.STRING],\
            """Window fl_wincreate(const char * label)
            """)
    stitle = convert_to_string(title)
    keep_elem_refs(title, stitle)
    retval = _fl_wincreate(stitle)
    return retval


def fl_winshow(win):
    """ fl_winshow(win) -> window

        Shows the window (created with fl_wincreate)

        @param win: window id to show

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winshow = cfuncproto(
            load_so_libforms(), "fl_winshow",\
            xfc.Window, [xfc.Window],\
            """Window fl_winshow(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    retval = _fl_winshow(ulwin)
    return retval


def fl_winopen(title):
    """ fl_winopen(title) -> window

        Opens (creates and shows) a toplevel window with the specified
        title.

        @param title: title of the window

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_winopen = cfuncproto(
            load_so_libforms(), "fl_winopen", \
            xfc.Window, [xfc.STRING], \
            """Window fl_winopen(const char * label)
            """)
    stitle = convert_to_string(title)
    keep_elem_refs(title, stitle)
    retval = _fl_winopen(stitle)
    return retval


def fl_winhide(win):
    """ fl_winhide(win)

        Hides a window.

        @param win: window id
    """

    _fl_winhide = cfuncproto(
            load_so_libforms(), "fl_winhide", \
            None, [xfc.Window], \
            """void fl_winhide(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    _fl_winhide(ulwin)


def fl_winclose(win):
    """ fl_winclose(win)

        Closes a window.

        @param win: window id

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winclose = cfuncproto(
            load_so_libforms(), "fl_winclose", \
            None, [xfc.Window], \
            """void fl_winclose(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    _fl_winclose(win, ulwin)


def fl_winset(win):
    """ fl_winset(win)

        @param win: window id

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_winset = cfuncproto(
            load_so_libforms(), "fl_winset", \
            None, [xfc.Window], \
            """void fl_winset(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    _fl_winset(ulwin)


def fl_winreparent(win, winnewparent):
    """ fl_winreparent(win, winnewparent) -> num.

        Makes a toplevel window a subwindow of another (new parent) window;
        both the window and the parent window must be valid ones.

        @param win: window to be made a subwindow
        @param winnewparent: window to become its new parent window

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winreparent = cfuncproto(
            load_so_libforms(), "fl_winreparent", \
            cty.c_int, [xfc.Window, xfc.Window], \
            """int fl_winreparent(Window win, Window new_parent)
            """)
    ulwin = convert_to_Window(win)
    ulwinnewparent = convert_to_Window(winnewparent)
    keep_elem_refs(win, winnewparent, ulwin, ulwinnewparent)
    retval = _fl_winreparent(ulwin, ulwinnewparent)
    return retval


def fl_winfocus(win):
    """ fl_winfocus(win)

        @param win: window id

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winfocus = cfuncproto(
            load_so_libforms(), "fl_winfocus", \
            None, [xfc.Window], \
            """void fl_winfocus(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    _fl_winfocus(ulwin)


def fl_winget():
    """ fl_winget() -> window

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winget = cfuncproto(
            load_so_libforms(), "fl_winget", \
            xfc.Window, [], \
            """Window fl_winget()
            """)
    retval = _fl_winget()
    return retval


def fl_iconify(win):
    """ fl_iconify(win) -> num.

        @param win: window id

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_iconify = cfuncproto(
            load_so_libforms(), "fl_iconify", \
            cty.c_int, [xfc.Window], \
            """int fl_iconify(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    retval = _fl_iconify(ulwin)
    return retval


def fl_winresize(win, neww, newh):
    """ fl_winresize(win, neww, newh)

        Resizes a window.

        @param win: window to resize
        @param neww: new width
        @param newh: new height

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winresize = cfuncproto(
            load_so_libforms(), "fl_winresize", \
            None, [xfc.Window, xfc.FL_Coord, xfc.FL_Coord], \
            """void fl_winresize(Window win, FL_Coord neww, FL_Coord newh)
            """)
    ulwin = convert_to_Window(win)
    ineww = convert_to_int(neww)
    inewh = convert_to_int(newh)
    keep_elem_refs(win, neww, newh, ulwin, ineww, inewh)
    _fl_winresize(ulwin, ineww, inewh)


def fl_winmove(win, dx, dy):
    """ fl_winmove(win, dx, dy)

        Moves a window to a new position.

        @param win: window to move to a new position
        @param dx: new horizontal position
        @param dy: new vertical position

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winmove = cfuncproto(
            load_so_libforms(), "fl_winmove", \
            None, [xfc.Window, xfc.FL_Coord, xfc.FL_Coord], \
            """void fl_winmove(Window win, FL_Coord dx, FL_Coord dy)
            """)
    ulwin = convert_to_Window(win)
    idx = convert_to_int(dx)
    idy = convert_to_int(dy)
    keep_elem_refs(win, dx, dy, ulwin, idx, idy)
    _fl_winmove(ulwin, idx, idy)


def fl_winreshape(win, dx, dy, w, h):
    """ fl_winreshape(win, dx, dy, w, h)

        Reshapes (resizes and moves) a window.

        @param win: window to reshape
        @param dx: new horizontal position (upper-left corner)
        @param dy: new vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winreshape = cfuncproto(
            load_so_libforms(), "fl_winreshape", \
            None, [xfc.Window, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord], \
            """void fl_winreshape(Window win, FL_Coord dx, FL_Coord dy,
               FL_Coord w, FL_Coord h)
            """)
    ulwin = convert_to_Window(win)
    idx = convert_to_int(dx)
    idy = convert_to_int(dy)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(win, dx, dy, w, h, ulwin, idx, idy, iw, ih)
    _fl_winreshape(ulwin, idx, idy, iw, ih)


def fl_winicon(win, icon, mask):
    """ fl_winicon(win, icon, mask)

        Installs an icon for the window.

        @param win: window
        @param icon: pixmap icon to be installed in window
        @param mask: mask

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winicon = cfuncproto(
            load_so_libforms(), "fl_winicon", \
            None, [xfc.Window, xfc.Pixmap, xfc.Pixmap], \
            """void fl_winicon(Window win, Pixmap p, Pixmap m)
            """)
    ulwin = convert_to_Window(win)
    ulicon = convert_to_Pixmap(icon)
    ulmask = convert_to_Pixmap(mask)
    keep_elem_refs(win, icon, mask, ulwin, ulicon, ulmask)
    _fl_winicon(ulwin, ulicon, ulmask)


def fl_winbackground(win, bkcolr):
    """ fl_winbackground(win, bkcolr)

        Sets the background of window to a certain color.

        @param win: window id
        @param bkcolr: background color to be set

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_winbackground = cfuncproto(
            load_so_libforms(), "fl_winbackground", \
            None, [xfc.Window, xfc.FL_COLOR], \
            """void fl_winbackground(Window win, FL_COLOR bk)
            """)
    check_admitted_listvalues(bkcolr, xfc.COLOR_list)
    ulwin = convert_to_Window(win)
    ulbkcolr = convert_to_FL_COLOR(bkcolr)
    keep_elem_refs(win, bkcolr, ulwin, ulbkcolr)
    _fl_winbackground(ulwin, ulbkcolr)


fl_win_background = fl_winbackground


def fl_winstepsize(win, dx, dy):
    """ fl_winstepsize(win, dx, dy)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winstepsize = cfuncproto(
            load_so_libforms(), "fl_winstepsize", \
            None, [xfc.Window, xfc.FL_Coord, xfc.FL_Coord], \
            """void fl_winstepsize(Window win, FL_Coord dx, FL_Coord dy)
            """)
    ulwin = convert_to_Window(win)
    idx = convert_to_int(dx)
    idy = convert_to_int(dy)
    keep_elem_refs(win, dx, dy, ulwin, idx, idy)
    _fl_winstepsize(ulwin, idx, idy)


fl_winstepunit = fl_winstepsize
fl_set_winstepunit = fl_winstepsize
fl_set_winstepunit = fl_winstepunit


def fl_winisvalid(win):
    """ fl_winisvalid(win) -> num.

        Returns if a window is a valid one.

        @param win: window to evaluate

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winisvalid = cfuncproto(
            load_so_libforms(), "fl_winisvalid", \
            cty.c_int, [xfc.Window], \
            """int fl_winisvalid(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    retval = _fl_winisvalid(ulwin)
    return retval


def fl_wintitle(win, title):
    """ fl_wintitle(win, title)

        Changes the window title (and its associated icon title).

        @param win: window
        @param title: window title to be set

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_wintitle = cfuncproto(
            load_so_libforms(), "fl_wintitle", \
            None, [xfc.Window, xfc.STRING], \
            """void fl_wintitle(Window win, const char * title)
            """)
    ulwin = convert_to_Window(win)
    stitle = convert_to_string(title)
    keep_elem_refs(win, title, ulwin, stitle)
    _fl_wintitle(ulwin, stitle)


def fl_winicontitle(win, title):
    """ fl_winicontitle(win, title)

        Changes only the icon title for the window.

        @param win: window
        @param title: icon title to be set

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winicontitle = cfuncproto(
            load_so_libforms(), "fl_winicontitle", \
            None, [xfc.Window, xfc.STRING], \
            """void fl_winicontitle(Window win, const char * title)
            """)
    ulwin = convert_to_Window(win)
    stitle = convert_to_string(title)
    keep_elem_refs(win, title, ulwin, stitle)
    _fl_winicontitle(ulwin, stitle)


def fl_winposition(x, y):
    """ fl_winposition(x, y)

        Sets the position of a window to be opened.

        @param x: horizontal position of the window (upper-left corner)
        @param y: vertical position of the window (upper-left corner)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winposition = cfuncproto(
            load_so_libforms(), "fl_winposition",
            None, [xfc.FL_Coord, xfc.FL_Coord],
            """void fl_winposition(FL_Coord x, FL_Coord y)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    keep_elem_refs(x, y, ix, iy)
    _fl_winposition(ix, iy)


fl_pref_winposition = fl_winposition


def fl_winminsize(win, w, h):
    """ fl_winminsize(win, w, h)

        Sets a constraint for a resizable window whose size will be within a
        range not less than minumum (to be used before calling fl_winopen).

        @param win: window to be set
        @param w: minimum width of window
        @param h: minimum height of window

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winminsize = cfuncproto(
            load_so_libforms(), "fl_winminsize",
            None, [xfc.Window, xfc.FL_Coord, xfc.FL_Coord],
            """void fl_winminsize(Window win, FL_Coord w, FL_Coord h)
            """)
    ulwin = convert_to_Window(win)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(win, w, h, ulwin, iw, ih)
    _fl_winminsize(ulwin, iw, ih)


def fl_winmaxsize(win, w, h):
    """ fl_winmaxsize(win, w, h)

        Sets a constraint for a resizable window whose size will be within a
        range not bigger than maximum (before calling fl_winopen).

        @param win: window to be set
        @param w: maximum width of window
        @param h: maximum height of window

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winmaxsize = cfuncproto(
            load_so_libforms(), "fl_winmaxsize",
            None, [xfc.Window, xfc.FL_Coord, xfc.FL_Coord],
            """void fl_winmaxsize(Window win, FL_Coord w, FL_Coord h)
            """)
    ulwin = convert_to_Window(win)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(win, w, h, ulwin, iw, ih)
    _fl_winmaxsize(ulwin, iw, ih)


def fl_winaspect(win, x, y):
    """ fl_winaspect(win, x, y)

        Sets the aspect ratio of the window for later interactive resizing.

        @param win: window to be set
        @param x: horizontal aspect ratio
        @param y: vertical aspect ratio

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winaspect = cfuncproto(
            load_so_libforms(), "fl_winaspect",
            None, [xfc.Window, xfc.FL_Coord, xfc.FL_Coord],
            """void fl_winaspect(Window win, FL_Coord x, FL_Coord y)
            """)
    ulwin = convert_to_Window(win)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    keep_elem_refs(win, x, y, ulwin, ix, iy)
    _fl_winaspect(ulwin, ix, iy)


def fl_reset_winconstraints(win):
    """ fl_reset_winconstraints(win)

        @param win: window to be reset

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_reset_winconstraints = cfuncproto(
            load_so_libforms(), "fl_reset_winconstraints",
            None, [xfc.Window],
            """void fl_reset_winconstraints(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win)
    _fl_reset_winconstraints(ulwin)


def fl_winsize(w, h):
    """ fl_winsize(w, h)

        Sets the preferred window size (before calling fl_winopen), and makes
        the window non-resizeable.

        @param w: width in coord units
        @param h: height in coord units

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_winsize = cfuncproto(
            load_so_libforms(), "fl_winsize",
            None, [xfc.FL_Coord, xfc.FL_Coord],
            """void fl_winsize(FL_Coord w, FL_Coord h)
            """)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(w, h, iw, ih)
    _fl_winsize(iw, ih)


fl_pref_winsize = fl_winsize


def fl_initial_winsize(w, h):
    """ fl_initial_winsize(w, h)

        Sets the preferred window size (before calling fl_winopen).

        @param w: width in coord units
        @param h: height in coord units

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_initial_winsize = cfuncproto(
            load_so_libforms(), "fl_initial_winsize",
            None, [xfc.FL_Coord, xfc.FL_Coord],
            """void fl_initial_winsize(FL_Coord w, FL_Coord h)
            """)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(w, h, iw, ih)
    _fl_initial_winsize(iw, ih)


def fl_initial_winstate(state):
    """ fl_initial_winstate(state)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_initial_winstate = cfuncproto(
            load_so_libforms(), "fl_initial_winstate",
            None, [cty.c_int],
            """void fl_initial_winstate(int state)
            """)
    istate = convert_to_int(state)
    keep_elem_refs(state, istate)
    _fl_initial_winstate(istate)


def fl_create_colormap(pXVisualInfo, nfill):
    """ fl_create_colormap(pXVisualInfo, nfill) -> colormap

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_create_colormap = cfuncproto(
            load_so_libforms(), "fl_create_colormap",
            xfc.Colormap, [cty.POINTER(xfc.XVisualInfo), cty.c_int],
            """Colormap fl_create_colormap(XVisualInfo * xv, int nfill)
            """)
    infill = convert_to_int(nfill)
    keep_elem_refs(pXVisualInfo, nfill, infill)
    retval = _fl_create_colormap(pXVisualInfo, infill)
    return retval


def fl_wingeometry(x, y, w, h):
    """ fl_wingeometry(x, y, w, h)

        Sets the initial geometry (position and size) of the window to be
        opened; the window will not be resizable.

        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_wingeometry = cfuncproto(
            load_so_libforms(), "fl_wingeometry",
            None, [xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord],
            """void fl_wingeometry(FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(x, y, w, h, ix, iy, iw, ih)
    _fl_wingeometry(ix, iy, iw, ih)


fl_pref_wingeometry = fl_wingeometry


def fl_initial_wingeometry(x, y, w, h):
    """ fl_initial_wingeometry(x, y, w, h)

        Sets the initial geometry (position and size) of the window to be
        opened.

        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_initial_wingeometry = cfuncproto(
            load_so_libforms(), "fl_initial_wingeometry",
            None, [xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord],
            """void fl_initial_wingeometry(FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(x, y, w, h, ix, iy, iw, ih)
    _fl_initial_wingeometry(ix, iy, iw, ih)


def fl_noborder():
    """ fl_noborder()

        Suppresses the window manager's decoration (before creating the
        window).

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_noborder = cfuncproto(
            load_so_libforms(), "fl_noborder",
            None, [],
            """void fl_noborder()
            """)
    _fl_noborder()


def fl_transient():
    """ fl_transient()

        Makes a window a transient one (before creating the window).

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_transient = cfuncproto(
            load_so_libforms(), "fl_transient",
            None, [], \
            """void fl_transient()
            """)
    _fl_transient()


def fl_get_winsize(win):
    """ fl_get_winsize(win) -> width, height

        @param win: window

        @attention: API change from XForms - upstream was
                    fl_get_winsize(win, w, h)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_winsize = cfuncproto(
            load_so_libforms(), "fl_get_winsize",
            None, [xfc.Window, cty.POINTER(xfc.FL_Coord),
            cty.POINTER(xfc.FL_Coord)],
            """void fl_get_winsize(Window win, FL_Coord * w, FL_Coord * h)
            """)
    ulwin = convert_to_Window(win)
    iw, pw = make_int_and_pointer()
    ih, ph = make_int_and_pointer()
    keep_elem_refs(win, ulwin, iw, ih, pw, ph)
    _fl_get_winsize(ulwin, pw, ph)
    return iw, ih


def fl_get_winorigin(win):
    """ fl_get_winorigin(win) -> x, y

        @param win: window

        @attention: API change from XForms - upstream was
                    fl_get_winorigin(win, x, y)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_winorigin = cfuncproto(
            load_so_libforms(), "fl_get_winorigin",
            None, [xfc.Window, cty.POINTER(xfc.FL_Coord),
            cty.POINTER(xfc.FL_Coord)],
            """void fl_get_winorigin(Window win, FL_Coord * x, FL_Coord * y)
            """)
    ulwin = convert_to_Window(win)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    keep_elem_refs(win, ulwin, x, y, px, py)
    _fl_get_winorigin(win, px, py)
    return x, y


def fl_get_wingeometry(win):
    """ fl_get_wingeometry(win) -> x, y, w, h

        Returns geometry (position and size) of a window.

        @param win: window

        @attention: API change from XForms - upstream was
           fl_get_wingeometry(win, x, y, w, h)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_wingeometry = cfuncproto(
            load_so_libforms(), "fl_get_wingeometry",
            None, [xfc.Window, cty.POINTER(xfc.FL_Coord),
            cty.POINTER(xfc.FL_Coord), cty.POINTER(xfc.FL_Coord),
            cty.POINTER(xfc.FL_Coord)],
            """void fl_get_wingeometry(Window win, FL_Coord * x, FL_Coord * y,
               FL_Coord * w, FL_Coord * h)
            """)
    ulwin = convert_to_Window(win)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    w, pw = make_FL_Coord_and_pointer()
    h, ph = make_FL_Coord_and_pointer()
    keep_elem_refs(win, x, y, w, h, ulwin, px, py, pw, ph)
    _fl_get_wingeometry(ulwin, px, py, pw, ph)
    return x, y, w, h


# fl_get_win_size placeholder (backwards)
# fl_get_win_origin (backwards)
# fl_get_win_geometry (backwards)
# fl_initial_winposition (backwards)


def fl_get_display():
    return fl_display


# undocumented data maybe dismissed --LK
#def FL_FormDisplay(pForm):
#    return fl_display


# undocumented data maybe dismissed --LK
#def FL_ObjectDisplay(pObject):
#    return fl_display


def FL_IS_CANVAS(pObject):
    if (fl_get_object_objclass(pObject) == xfc.FL_CANVAS) or \
        (fl_get_object_objclass(pObject) == xfc.FL_GLCANVAS):
        return True
    else:
        return False


# The window an object belongs to - for drawing
def FL_ObjWin(pObject):
    """ FL_ObjWin(pObject)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    if FL_IS_CANVAS(pObject):
        return fl_get_canvas_id(pObject)
    else:
        return pObject.contents.form.contents.window


def fl_get_real_object_window(pObject):
    """
        fl_get_real_object_window(pObject) -> window

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_real_object_window = cfuncproto(
            load_so_libforms(), "fl_get_real_object_window",
            xfc.Window, [cty.POINTER(xfc.FL_OBJECT)],
            """Window fl_get_real_object_window(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_real_object_window(pObject)
    return retval


FL_OBJECT_WID = FL_ObjWin


# Replacements for X functions that access the event queue

def fl_XNextEvent(pXEvent):
    """ fl_XNextEvent(pXEvent) -> event num.

        @param pXEvent: pointer to XEvent

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_XNextEvent = cfuncproto(
            load_so_libforms(), "fl_XNextEvent",
            cty.c_int, [cty.POINTER(xfc.XEvent)],
            """int fl_XNextEvent(XEvent * xev)
            """)
    keep_elem_refs(pXEvent)
    retval = _fl_XNextEvent(pXEvent)
    return retval


def fl_XPeekEvent(pXEvent):
    """ fl_XPeekEvent(pXEvent) -> event num.

        @param pXEvent: pointer to XEvent

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_XPeekEvent = cfuncproto(
            load_so_libforms(), "fl_XPeekEvent",
            cty.c_int, [cty.POINTER(xfc.XEvent)],
            """int fl_XPeekEvent(XEvent * xev)
            """)
    keep_elem_refs(pXEvent)
    retval = _fl_XPeekEvent(pXEvent)
    return retval


def fl_XEventsQueued(mode):
    """ fl_XEventsQueued(mode) -> event num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_XEventsQueued = cfuncproto(
            load_so_libforms(), "fl_XEventsQueued",
            cty.c_int, [cty.c_int],
            """int fl_XEventsQueued(int mode)
            """)
    imode = convert_to_int(mode)
    keep_elem_refs(mode, imode)
    retval = _fl_XEventsQueued(imode)
    return retval


def fl_XPutBackEvent(pXEvent):
    """ fl_XPutBackEvent(pXEvent)

        @param pXEvent: pointer to XEvent

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_XPutBackEvent = cfuncproto(
            load_so_libforms(), "fl_XPutBackEvent",
            None, [cty.POINTER(xfc.XEvent)],
            """void fl_XPutBackEvent(XEvent * xev)
            """)
    keep_elem_refs(pXEvent)
    _fl_XPutBackEvent(pXEvent)


def fl_last_event():
    """ fl_last_event() -> pXEvent

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_last_event = cfuncproto(
            load_so_libforms(), "fl_last_event",
            cty.POINTER(xfc.XEvent), [],
            """const char * fl_last_event()
            """)
    retval = _fl_last_event()
    return retval


FL_APPEVENT_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfc.XEvent),
                               cty.c_void_p)

def fl_set_event_callback(py_AppEventCb, vdata):
    """ fl_set_event_callback(py_AppEventCb, vdata) -> event callback

        @param py_AppEventCb: python function callback, returning value
        @type py_AppEventCb: fn(pXEvent, ptr_void) -> num.
        @param vdata: user data

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_event_callback = cfuncproto(
            load_so_libforms(), "fl_set_event_callback",
            FL_APPEVENT_CB, [FL_APPEVENT_CB, cty.c_void_p],
            """FL_APPEVENT_CB fl_set_event_callback(FL_APPEVENT_CB callback,
               void * user_data)
            """)
    c_AppEventCb = FL_APPEVENT_CB(py_AppEventCb)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_cfunc_refs(c_AppEventCb, py_AppEventCb)
    keep_elem_refs(vdata, pvdata)
    retval = _fl_set_event_callback(c_AppEventCb, pvdata)
    return retval


def fl_set_idle_callback(py_AppEventCb, vdata):
    """ fl_set_idle_callback(py_AppEventCb, vdata) -> event callback func.

        Registers an idle callback. Interaction with it  can used for periodic
        tasks, e.g. rotating an image, checking the status of some external
        device or application state etc.
        An idle callback is an application function that is registered with
        the system and is called whenever there are no events pending for
        forms (or application windows). If called with a donothing function
        as callback it removes idle callback.

        @param py_AppEventCb: python function callback, returning unused value
        @type py_AppEventCb: __ funcname (pXEvent, ptr_void) -> num __
        @param vdata: user data (<pointer to void>)

        @example: def idlecb(xev, userdata):
                  > ... ; return 0
                  appevtcb = fl_set_idle_callback(idlecb, None)
                  def donothing_idlecb(xev, userdata):
                  > pass
                  removedcb = fl_set_idle_callback(donothing_idlecb, None)

        @status: Tested + Doc + NoDemo = NOT OK
    """

    _fl_set_idle_callback = cfuncproto(
            load_so_libforms(), "fl_set_idle_callback",
            FL_APPEVENT_CB, [FL_APPEVENT_CB, cty.c_void_p],
            """FL_APPEVENT_CB fl_set_idle_callback(FL_APPEVENT_CB callback,
               void * user_data)
            """)
    c_AppEventCb = FL_APPEVENT_CB(py_AppEventCb)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_cfunc_refs(c_AppEventCb, py_AppEventCb)
    keep_elem_refs(vdata, pvdata)
    retval = _fl_set_idle_callback(c_AppEventCb, pvdata)
    return retval


def fl_addto_selected_xevent(win, mask):
    """ fl_addto_selected_xevent(win, mask) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_addto_selected_xevent = cfuncproto(
            load_so_libforms(), "fl_addto_selected_xevent",
            cty.c_long, [xfc.Window, cty.c_long],
            """long int fl_addto_selected_xevent(Window win, long int mask)
            """)
    ulwin = convert_to_Window(win)
    lmask = convert_to_long(mask)
    keep_elem_refs(win, mask, ulwin, lmask)
    retval = _fl_addto_selected_xevent(ulwin, lmask)
    return retval


def fl_remove_selected_xevent(win, mask):
    """ fl_remove_selected_xevent(win, mask) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_remove_selected_xevent = cfuncproto(
            load_so_libforms(), "fl_remove_selected_xevent",
            cty.c_long, [xfc.Window, cty.c_long],
            """long int fl_remove_selected_xevent(Window win, long int mask)
            """)
    ulwin = convert_to_Window(win)
    lmask = convert_to_long(mask)
    keep_elem_refs(win, mask, ulwin, lmask)
    retval = _fl_remove_selected_xevent(ulwin, lmask)
    return retval


fl_add_selected_xevent = fl_addto_selected_xevent


def fl_set_idle_delta(delta):
    """ fl_set_idle_delta(delta)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_idle_delta = cfuncproto(
            load_so_libforms(), "fl_set_idle_delta",
            None, [cty.c_long],
            """void fl_set_idle_delta(long int delta)
            """)
    ldelta = convert_to_long(delta)
    keep_elem_refs(delta, ldelta)
    _fl_set_idle_delta(ldelta)


def fl_add_event_callback(win, ev, py_AppEventCb, vdata):
    """ fl_add_event_callback(win, ev, py_AppEventCb, vdata) -> event callback

        Adds an event handler for a window.

        @param win: window id to add event handler to
        @param ev: event number
        @param py_AppEventCb: python function callback, returning value
        @type py_AppEventCb: fn(pXEvent, ptr_void) -> num.
        @param vdata: user data

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_event_callback = cfuncproto(
            load_so_libforms(), "fl_add_event_callback",
            FL_APPEVENT_CB, [xfc.Window, cty.c_int, FL_APPEVENT_CB,
            cty.c_void_p],
            """FL_APPEVENT_CB fl_add_event_callback(Window win, int ev,
               FL_APPEVENT_CB wincb, void * user_data)
            """)
    ulwin = convert_to_Window(win)
    iev = convert_to_int(ev)
    c_AppEventCb = FL_APPEVENT_CB(py_AppEventCb)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_cfunc_refs(c_AppEventCb, py_AppEventCb)
    keep_elem_refs(win, ev, vdata, ulwin, iev, pvdata)
    retval = _fl_add_event_callback(ulwin, iev, c_AppEventCb, pvdata)
    return retval


def fl_remove_event_callback(win, ev):
    """ fl_remove_event_callback(win, ev)

        Removes one or all event callbacks for a window. May be called
        with for a window for which no event callbacks have been set.

        @param win: window id
        @param ev: event number

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_remove_event_callback = cfuncproto(
            load_so_libforms(), "fl_remove_event_callback",
            None, [xfc.Window, cty.c_int],
            """void fl_remove_event_callback(Window win, int ev)
            """)
    ulwin = convert_to_Window(win)
    iev = convert_to_int(ev)
    keep_elem_refs(win, ev, ulwin, iev)
    _fl_remove_event_callback(ulwin, iev)


def fl_activate_event_callbacks(win):
    """ fl_activate_event_callbacks(win)

        @param win: window whose events are referred to

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_activate_event_callbacks = cfuncproto(
            load_so_libforms(), "fl_activate_event_callbacks",
            None, [xfc.Window],
            """void fl_activate_event_callbacks(Window win)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(win, ulwin)
    _fl_activate_event_callbacks(ulwin)


def fl_print_xevent_name(where, pXEvent):
    """ fl_print_xevent_name(where, pXEvent) -> pXEvent

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_print_xevent_name = cfuncproto(
            load_so_libforms(), "fl_print_xevent_name",
            cty.POINTER(xfc.XEvent), [xfc.STRING, cty.POINTER(xfc.XEvent)],
            """XEvent * fl_print_xevent_name(const char * where,
               const Xevent * xev)
            """)
    swhere = convert_to_string(where)
    keep_elem_refs(where, pXEvent, swhere)
    retval = _fl_print_xevent_name(swhere, pXEvent)
    return retval


def fl_XFlush():
    """ fl_XFlush()

        Convenience replacement for x11 XFlush()

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_XFlush = cfuncproto(
            load_so_libforms(), "fl_XFlush",
            None, [],
            """void fl_XFlush(void)
            """)
    _fl_XFlush()


def metakey_down(mask):
    return (mask & xfc.Mod1Mask)


def shiftkey_down(mask):
    return (mask & xfc.ShiftMask)


def controlkey_down(mask):
    return (mask & xfc.ControlMask)


def button_down(mask):
    if (mask & xfc.Button1Mask) or (mask & xfc.Button2Mask) or \
     (mask & xfc.Button3Mask) or (mask & xfc.Button4Mask) or \
     (mask & xfc.Button5Mask):
        return True
    else:
        return False


# Resources

def fl_initialize(lsysargv, sysargv, appclass, appopt, nappopt):
    """ fl_initialize(numargs, args, applclass, apploptions, numapplopts) -> pDisplay

        @status: HalfTested + NoDoc + Demo = NOT OK (command line args)
    """

    _fl_initialize = cfuncproto(
            load_so_libforms(), "fl_initialize",
            cty.POINTER(xfc.Display), [cty.POINTER(cty.c_int),
            cty.POINTER(xfc.STRING), xfc.STRING,
            cty.POINTER(xfc.XrmOptionDescRec), cty.c_int],
            """Display * fl_initialize(int * na, char * * arg,
               const char * appclass, FL_CMD_OPT * appopt, int nappopt)
            """)
    verify_version_compatibility()      # verify if installed XForms
                                        # is compatible with this one
    lsysargv = 1
    cliargsnr = convert_to_int(lsysargv)
    pcliargsnr = cty.byref(cliargsnr)
    argum = "".join(sysargv)
    scliargs = convert_to_string(argum)
    sappclass = convert_to_string(appclass)
    structopts = cty.POINTER(xfc.FL_CMD_OPT)()
    keep_elem_refs(pcliargsnr, scliargs, appclass, sappclass, structopts,
                   nappopt)
    retval = _fl_initialize(pcliargsnr, scliargs, sappclass, structopts,
                            nappopt)
    return retval


def fl_finish():
    """ fl_finish()

        It is a final cleanup routine, restores all X server defaults, shuts
        down the connection and frees dynamically allocated memory.

        @example: fl_finish()

        @status: Tested + Doc + Demo = OK
    """

    _fl_finish = cfuncproto(
            load_so_libforms(), "fl_finish",
            None, [],
            """void fl_finish()
            """)
    _fl_finish()


def fl_get_resource(rname, cname, dtype, defval, val, size):
    """ fl_get_resource(rname, cname, dtype, defval, val, size) -> string

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_resource = cfuncproto(
            load_so_libforms(), "fl_get_resource",
            xfc.STRING, [xfc.STRING, xfc.STRING, xfc.FL_RTYPE, xfc.STRING,
            cty.c_void_p, cty.c_int],
            """const char * fl_get_resource(const char * rname,
               const char * cname, FL_RTYPE dtype, const char * defval,
               void * val, int size)
            """)
    srname = convert_to_string(rname)
    scname = convert_to_string(cname)
    idtype = convert_to_int(dtype)
    sdefval = convert_to_string(defval)
    pval = cty.cast(val, cty.c_void_p)
    isize = convert_to_int(size)
    keep_elem_refs(rname, cname, dtype, defval, val, size, srname, scname,
                   idtype, sdefval, pval, isize)
    retval = _fl_get_resource(srname, scname, idtype, sdefval, pval, isize)
    return retval


def fl_set_resource(resstr, val):
    """ fl_set_resource(resstr, val)

        @param resstr: resource name
        @param val: new string value for resource

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_resource = cfuncproto(
            load_so_libforms(), "fl_set_resource",
            None, [xfc.STRING, xfc.STRING],
            """void fl_set_resource(const char * str, const char * val)
            """)
    sresstr = convert_to_string(resstr)
    sval = convert_to_string(val)
    keep_elem_refs(resstr, val, sresstr, sval)
    _fl_set_resource(sresstr, sval)


def fl_get_app_resources(pResource, n):
    """ fl_get_app_resources(pResource, n)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_app_resources = cfuncproto(
            load_so_libforms(), "fl_get_app_resources",
            None, [cty.POINTER(xfc.FL_RESOURCE), cty.c_int],
            """void fl_get_app_resources(FL_RESOURCE * appresource, int n)
            """)
    inum = convert_to_int(n)
    keep_elem_refs(pResource, n, inum)
    _fl_get_app_resources(pResource, inum)


def fl_set_graphics_mode(mode, doublebuf):
    """ fl_set_graphics_mode(mode, doublebuf)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_graphics_mode = cfuncproto(
            load_so_libforms(), "fl_set_graphics_mode",
            None, [cty.c_int, cty.c_int],
            """void fl_set_graphics_mode(int mode, int doublebuf)
            """)
    imode = convert_to_int(mode)
    idoublebuf = convert_to_int(doublebuf)
    keep_elem_refs(mode, doublebuf, imode, idoublebuf)
    _fl_set_graphics_mode(imode, idoublebuf)


def fl_set_visualID(idnum):
    """ fl_set_visualID(idnum)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_visualID = cfuncproto(
            load_so_libforms(), "fl_set_visualID",
            None, [cty.c_long],
            """void fl_set_visualID(long int id)
            """)
    lidnum = convert_to_long(idnum)
    keep_elem_refs(idnum, lidnum)
    _fl_set_visualID(lidnum)


def fl_keysym_pressed(keysym):
    """ fl_keysym_pressed(keysym) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_keysym_pressed = cfuncproto(
            load_so_libforms(), "fl_keysym_pressed",
            cty.c_int, [xfc.KeySym],
            """int fl_keysym_pressed(KeySym k)
            """)
    ulkeysym = convert_to_ulong(keysym)
    keep_elem_refs(keysym, ulkeysym)
    retval = _fl_keysym_pressed(ulkeysym)
    return retval


fl_keypressed = fl_keysym_pressed


# Program default masks

def fl_set_defaults(mask, pIopt):
    """ fl_set_defaults(mask, pIopt)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_defaults = cfuncproto(
            load_so_libforms(), "fl_set_defaults",
            None, [cty.c_ulong, cty.POINTER(xfc.FL_IOPT)],
            """void fl_set_defaults(long unsigned int mask, FL_IOPT * cntl):
            """)
    ulmask = convert_to_ulong(mask)
    keep_elem_refs(mask, pIopt, ulmask)
    _fl_set_defaults(ulmask, pIopt)


def fl_set_tabstop(s):
    """ fl_set_tabstop(s)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_tabstop = cfuncproto(
            load_so_libforms(), "fl_set_tabstop",
            None, [xfc.STRING],
            """void fl_set_tabstop(const char * s)
            """)
    ss = convert_to_string(s)
    keep_elem_refs(s, ss)
    _fl_set_tabstop(ss)


def fl_get_defaults():
    """ fl_get_defaults() -> Iopt

        @attention: API change from XForms - upstream was
                    fl_get_defaults(pIopt)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_defaults = cfuncproto(
            load_so_libforms(), "fl_get_defaults",
            None, [cty.POINTER(xfc.FL_IOPT)],
            """void fl_get_defaults(FL_IOPT * cntl)
            """)
    Iopt = xfc.FL_IOPT()
    pIopt = cty.byref(Iopt)
    keep_elem_refs(pIopt, Iopt)
    _fl_get_defaults(pIopt)
    return Iopt


def fl_get_visual_depth():
    """ fl_get_visual_depth() -> depth num.

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_visual_depth = cfuncproto(
            load_so_libforms(), "fl_get_visual_depth",
            cty.c_int, [],
            """int fl_get_visual_depth()
            """)
    retval = _fl_get_visual_depth()
    return retval


def fl_vclass_name(n):
    """ fl_vclass_name(n) -> name string

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_vclass_name = cfuncproto(
            load_so_libforms(), "fl_vclass_name",
            xfc.STRING, [cty.c_int],
            """const char * fl_vclass_name(int n)
            """)
    inum = convert_to_int(n)
    keep_elem_refs(n, inum)
    _fl_vclass_name(inum)


def fl_vclass_val(val):
    """ fl_vclass_val(val) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_vclass_val = cfuncproto(
            load_so_libforms(), "fl_vclass_val",
            cty.c_int, [xfc.STRING],
            """int fl_vclass_val(const char * v)
            """)
    sval = convert_to_string(val)
    keep_elem_refs(val, sval)
    retval = _fl_vclass_val(sval)
    return retval


def fl_set_ul_property(prop, thickness):
    """ fl_set_ul_property(prop, thickness)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_ul_property = cfuncproto(
            load_so_libforms(), "fl_set_ul_property",
            None, [cty.c_int, cty.c_int],
            """void fl_set_ul_property(int prop, int thickness)
            """)
    iprop = convert_to_int(prop)
    ithickness = convert_to_int(thickness)
    keep_elem_refs(prop, thickness, iprop, ithickness)
    _fl_set_ul_property(iprop, ithickness)


def fl_set_clipping(x, y, w, h):
    """ fl_set_clipping(x, y, w, h)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_clipping = cfuncproto(
            load_so_libforms(), "fl_set_clipping",
            None, [xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord],
            """void fl_set_clipping(FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(x, y, w, h, ix, iy, iw, ih)
    _fl_set_clipping(ix, iy, iw, ih)


def fl_set_gc_clipping(gc, x, y, w, h):
    """ fl_set_gc_clipping(gc, x, y, w, h)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_gc_clipping = cfuncproto(
            load_so_libforms(), "fl_set_gc_clipping",
            None, [xfc.GC, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord],
            """void fl_set_gc_clipping(GC gc, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(gc, x, y, w, h, ix, iy, iw, ih)
    _fl_set_gc_clipping(gc, ix, iy, iw, ih)


def fl_unset_gc_clipping(gc):
    """ fl_unset_gc_clipping(gc)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_unset_gc_clipping = cfuncproto(
            load_so_libforms(), "fl_unset_gc_clipping",
            None, [xfc.GC],
            """void fl_unset_gc_clipping(GC gc)
            """)
    keep_elem_refs(gc)
    _fl_unset_gc_clipping(gc)


def fl_set_clippings(pRect, n):
    """ fl_set_clippings(pRect, n)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_clippings = cfuncproto(
            load_so_libforms(), "fl_set_clippings",
            None, [cty.POINTER(xfc.FL_RECT), cty.c_int],
            """void fl_set_clippings(FL_RECT * xrect, int n)
            """)
    inum = convert_to_int(n)
    keep_elem_refs(pRect, n, inum)
    _fl_set_clippings(pRect, inum)


def fl_unset_clipping():
    """ fl_unset_clipping()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_unset_clipping = cfuncproto(
            load_so_libforms(), "fl_unset_clipping",
            None, [],
            """void fl_unset_clipping()
            """)
    _fl_unset_clipping()


def fl_set_text_clipping(x, y, w, h):
    """ fl_set_text_clipping(x, y, w, h)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_text_clipping = cfuncproto(
            load_so_libforms(), "fl_set_text_clipping",
            None, [xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord],
            """void fl_set_text_clipping(FL_Coord x, FL_Coord y, FL_Coord w,
               FL_Coord h)
            """)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    keep_elem_refs(x, y, w, h, ix, iy, iw, ih)
    _fl_set_text_clipping(ix, iy, iw, ih)


def fl_unset_text_clipping():
    """ fl_unset_text_clipping()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_unset_text_clipping = cfuncproto(
            load_so_libforms(), "fl_unset_text_clipping",
            None, [],
            """void fl_unset_text_clipping()
            """)
    _fl_unset_text_clipping()


# How we pack and unpack colors

def FL_PCCLAMP(a):
    if (a > xfc.FL_PCMAX):
        return xfc.FL_PCMAX
    elif (a < 0):
        return 0
    else:
        return a


# If PCBITS is not 8, we need to apply the RGBmask

def FL_GETR(packed):
    return ((packed >> xfc.FL_RSHIFT) & xfc.FL_RMASK)

# maybe unused in python?
def FL_GETG(packed):
    return ((packed) >> xfc.FL_GSHIFT) & xfc.FL_PCMAX

# maybe unused in python?
def FL_GETB(packed):
    return ((packed) >> xfc.FL_BSHIFT) & xfc.FL_PCMAX

# maybe unused in python?
def FL_GETA(packed):
    return ((packed) >> xfc.FL_ASHIFT) & xfc.FL_PCMAX

# maybe unused in python?
def FL_PACK3(r, g, b ):
    return (r<<xfc.FL_RSHIFT) | (g<<xfc.FL_GSHIFT) | (b<<xfc.FL_BSHIFT)

# maybe unused in python?
FL_PACK = FL_PACK3

# maybe unused in python?
def FL_PACK4(r, g, b, a):
    return (FL_PACK3(r, g, b) | (a<<xfc.FL_ASHIFT))

# maybe unused in python?
def FL_UNPACK(p, r, g, b):
    r = FL_GETR(p)
    g = FL_GETG(p)
    b = FL_GETB(p)
    return r, g, b

# maybe unused in python?
FL_UNPACK3 = FL_UNPACK

# maybe unused in python?
def FL_UNPACK4(p, r, g, b, a):
    r, g, b = FL_UNPACK3(p, r, g, b)
    a = FL_GETA(p)
    return r, g, b, a


def fl_popup_add(win, title):
    """ fl_popup_add(win, title) -> pPopup

        @param win: window
        @param title: text of title shown at the top of the popup
                      in a framed box

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_add = cfuncproto(
            load_so_libforms(), "fl_popup_add",
            cty.POINTER(xfc.FL_POPUP), [xfc.Window, xfc.STRING],
            """FL_POPUP * fl_popup_add(Window p1, const char * p2)
            """)
    ulwin = convert_to_Window(win)
    stitle = convert_to_string(title)
    keep_elem_refs(win, title, ulwin, stitle)
    retval = _fl_popup_add(ulwin, stitle)
    return retval


def fl_popup_add_entries(pPopup, entrytxt):
    """ fl_popup_add_entries(pPopup, entrytxt) -> pPopupEntry

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_add_entries = cfuncproto(
            load_so_libforms(), "fl_popup_add_entries",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_POPUP), xfc.STRING],
            """FL_POPUP_ENTRY * fl_popup_add_entries(FL_POPUP * p1,
               const char * p2)
            """)
    sentrytxt = convert_to_string(entrytxt)
    keep_elem_refs(pPopup, entrytxt, sentrytxt)
    retval = _fl_popup_add_entries(pPopup, sentrytxt)
    return retval


def fl_popup_insert_entries(pPopup, pPopupEntry, entrytxt):
    """ fl_popup_insert_entries(pPopup, pPopupEntry, entrytxt) -> pPopupEntry

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_insert_entries = cfuncproto(
            load_so_libforms(), "fl_popup_insert_entries",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_POPUP),
            cty.POINTER(xfc.FL_POPUP_ENTRY), xfc.STRING],
            """FL_POPUP_ENTRY * fl_popup_insert_entries(FL_POPUP * p1,
               FL_POPUP_ENTRY * p2, const char * p3)
            """)
    sentrytxt = convert_to_string(entrytxt)
    keep_elem_refs(pPopup, pPopupEntry, entrytxt, sentrytxt)
    retval = _fl_popup_insert_entries(pPopup, pPopupEntry, sentrytxt)
    return retval


def fl_popup_create(win, text, pPopupItem):
    """ fl_popup_create(win, text, pPopupItem) -> pPopup

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_create = cfuncproto(
            load_so_libforms(), "fl_popup_create",
                cty.POINTER(xfc.FL_POPUP), [xfc.Window, xfc.STRING,
                cty.POINTER(xfc.FL_POPUP_ITEM)],
            """FL_POPUP * fl_popup_create(Window p1, const char * p2,
               FL_POPUP_ITEM * p3)
            """)
    ulwin = convert_to_Window(win)
    stext = convert_to_string(text)
    keep_elem_refs(win, text, pPopupItem, ulwin, stext)
    retval = _fl_popup_create(ulwin, stext, pPopupItem)
    return retval


def fl_popup_add_items(pPopup, pPopupItem):
    """ fl_popup_add_items(pPopup, pPopupItem) -> pPopupEntry

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_add_items = cfuncproto(
            load_so_libforms(), "fl_popup_add_items",
                cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_POPUP),
                cty.POINTER(xfc.FL_POPUP_ITEM)],
            """FL_POPUP_ENTRY * fl_popup_add_items(FL_POPUP * p1,
               FL_POPUP_ITEM * p2)
            """)
    keep_elem_refs(pPopup, pPopupItem)
    retval = _fl_popup_add_items(pPopup, pPopupItem)
    return retval


def fl_popup_insert_items(pPopup, pPopupEntry, pPopupItem):
    """ fl_popup_insert_items(pPopup, pPopupEntry, pPopupItem) -> pPopupEntry

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_insert_items = cfuncproto(
            load_so_libforms(), "fl_popup_insert_items",
                cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_POPUP),
                cty.POINTER(xfc.FL_POPUP_ENTRY), cty.POINTER(xfc.FL_POPUP_ITEM)],
            """FL_POPUP_ENTRY * fl_popup_insert_items(FL_POPUP * p1,
               FL_POPUP_ENTRY * p2, FL_POPUP_ITEM * p3)
            """)
    keep_elem_refs(pPopup, pPopupEntry, pPopupItem)
    retval = _fl_popup_insert_items(pPopup, pPopupEntry, pPopupItem)
    return retval


def fl_popup_delete(pPopup):
    """ fl_popup_delete(pPopup) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_delete = cfuncproto(
            load_so_libforms(), "fl_popup_delete",
            cty.c_int, [cty.POINTER(xfc.FL_POPUP)],
            """int fl_popup_delete(FL_POPUP * p1)
            """)
    keep_elem_refs(pPopup)
    retval = _fl_popup_delete(pPopup)
    return retval


def fl_popup_entry_delete(pPopupEntry):
    """ fl_popup_entry_delete(pPopupEntry) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_delete = cfuncproto(
            load_so_libforms(), "fl_popup_entry_delete",
            cty.c_int, [cty.POINTER(xfc.FL_POPUP_ENTRY)],
            """int fl_popup_entry_delete(FL_POPUP_ENTRY * p1)
            """)
    keep_elem_refs(pPopupEntry)
    retval = _fl_popup_entry_delete(pPopupEntry)
    return retval


def fl_popup_do(pPopup):
    """ fl_popup_do(pPopup) -> pPopupReturn

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_do = cfuncproto(
            load_so_libforms(), "fl_popup_do",
            cty.POINTER(xfc.FL_POPUP_RETURN), [cty.POINTER(xfc.FL_POPUP)],
            """FL_POPUP_RETURN * fl_popup_do(FL_POPUP * p1)
            """)
    keep_elem_refs(pPopup)
    retval = _fl_popup_do(pPopup)
    return retval


def fl_popup_set_position(pPopup, x, y):
    """ fl_popup_set_position(pPopup, x, y)

        Sets position where the popup is supposed to appear (if never called
        the popup appears at the mouse position)

        @param pPopup: pointer to Popup
        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_set_position = cfuncproto(
            load_so_libforms(), "fl_popup_set_position",
            None, [cty.POINTER(xfc.FL_POPUP), cty.c_int, cty.c_int],
            """void fl_popup_set_position(FL_POPUP * p1, int p2, int p3)
            """)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    keep_elem_refs(pPopup, x, y, ix, iy)
    _fl_popup_set_position(pPopup, ix, iy)


def fl_popup_get_policy(pPopup):
    """ fl_popup_get_policy(pPopup) -> num.

        @param pPopup: pointer to Popup

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_get_policy = cfuncproto(
            load_so_libforms(), "fl_popup_get_policy",
            cty.c_int, [cty.POINTER(xfc.FL_POPUP)],
            """int fl_popup_get_policy(FL_POPUP * p1)
            """)
    keep_elem_refs(pPopup)
    retval = _fl_popup_get_policy(pPopup)
    return retval


def fl_popup_set_policy(pPopup, policy):
    """ fl_popup_set_policy(pPopup, policy) -> num.

        Sets policy of handling the popup (i.e. does it get closed when the
        user releases the mouse button outside an active entry or not?)

        @param pPopup: pointer to Popup 
        @param policy: policy to be set

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_set_policy = cfuncproto(
            load_so_libforms(), "fl_popup_set_policy",
            cty.c_int, [cty.POINTER(xfc.FL_POPUP), cty.c_int],
            """int fl_popup_set_policy(FL_POPUP * p1, int p2)
            """)
    check_admitted_listvalues(policy, xfc.POPUPPOLICY_list)
    ipolicy = convert_to_int(policy)
    keep_elem_refs(pPopup, policy, ipolicy)
    retval = _fl_popup_set_policy(pPopup, ipolicy)
    return retval


# already defined in xfdata
#FL_POPUP_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfc.FL_POPUP_RETURN))

def fl_popup_set_callback(pPopup, py_PopupCb):
    """ fl_popup_set_callback(pPopup, py_PopupCb) -> popup callback func.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_set_callback = cfuncproto(
            load_so_libforms(), "fl_popup_set_callback",
            xfc.FL_POPUP_CB, [cty.POINTER(xfc.FL_POPUP), xfc.FL_POPUP_CB],
            """FL_POPUP_CB fl_popup_set_callback(FL_POPUP * p1,
               FL_POPUP_CB p2)
            """)
    c_PopupCb = xfc.FL_POPUP_CB(py_PopupCb)
    keep_cfunc_refs(c_PopupCb, py_PopupCb)
    keep_elem_refs(pPopup)
    retval = _fl_popup_set_callback(pPopup, c_PopupCb)
    return retval


def fl_popup_get_title_font(pPopup):
    """ fl_popup_get_title_font(pPopup) -> style, size

        @attention: API change from XForms - upstream was
                    fl_popup_get_title_font(pPopup, style, size)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_get_title_font = cfuncproto(
            load_so_libforms(), "fl_popup_get_title_font",
            None, [cty.POINTER(xfc.FL_POPUP), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """void fl_popup_get_title_font(FL_POPUP * p1, int * p2,
               int * p3)
            """)
    style, pstyle = make_int_and_pointer()
    size, psize = make_int_and_pointer()
    keep_elem_refs(pPopup, style, size, pstyle, psize)
    _fl_popup_get_title_font(pPopup, pstyle, psize)
    return style, size


def fl_popup_set_title_font(pPopup, style, size):
    """ fl_popup_set_title_font(pPopup, style, size)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_popup_set_title_font = cfuncproto(
            load_so_libforms(), "fl_popup_set_title_font",
            None, [cty.POINTER(xfc.FL_POPUP), cty.c_int, cty.c_int],
            """void fl_popup_set_title_font(FL_POPUP * p1, int p2, int p3)
            """)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    keep_elem_refs(pPopup, style, size, istyle, isize)
    _fl_popup_set_title_font(pPopup, istyle, isize)


def fl_popup_entry_get_font(pPopup):
    """ fl_popup_entry_get_font(pPopup) -> style, size

        @attention: API change from XForms - upstream was
                    fl_popup_entry_get_font(pPopup, style, size)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_get_font = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_font",
            None, [cty.POINTER(xfc.FL_POPUP), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """void fl_popup_entry_get_font(FL_POPUP * p1, int * p2, int * p3)
            """)
    style, pstyle = make_int_and_pointer()
    size, psize = make_int_and_pointer()
    keep_elem_refs(pPopup, style, size, pstyle, psize)
    _fl_popup_entry_get_font(pPopup, pstyle, psize)
    return style, size


def fl_popup_entry_set_font(pPopup, style, size):
    """ fl_popup_entry_set_font(pPopup, style, size)

        Sets the font of a popup entry.

        @param pPopup: pointer to Popup
        @param style: style of the popup entry
        @param size: size of the popup entry

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_set_font = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_font",
            None, [cty.POINTER(xfc.FL_POPUP), cty.c_int, cty.c_int],
            """void fl_popup_entry_set_font(FL_POPUP * p1, int p2, int p3)
            """)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    keep_elem_refs(pPopup, style, size, istyle, isize)
    _fl_popup_entry_set_font(pPopup, istyle, isize)


def fl_popup_get_bw(pPopup):
    """ fl_popup_get_bw(pPopup) -> borderwidth

        Returns the border width of a popup.

        @param pPopup: pointer to popup

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_get_bw = cfuncproto(
            load_so_libforms(), "fl_popup_get_bw",
            cty.c_int, [cty.POINTER(xfc.FL_POPUP)],
            """int fl_popup_get_bw(FL_POPUP * p1)
            """)
    keep_elem_refs(pPopup)
    retval = _fl_popup_get_bw(pPopup)
    return retval


def fl_popup_set_bw(pPopup, bw):
    """ fl_popup_set_bw(pPopup, bw) -> num.

        Sets the border width of a popup.

        @param pPopup: pointer to popup
        @param bw: border width value to be set

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_popup_set_bw = cfuncproto(
            load_so_libforms(), "fl_popup_set_bw",
            cty.c_int, [cty.POINTER(xfc.FL_POPUP), cty.c_int],
            """int fl_popup_set_bw(FL_POPUP * p1, int p2)
            """)
    ibw = convert_to_int(bw)
    keep_elem_refs(pPopup, bw, ibw)
    retval = _fl_popup_set_bw(pPopup, ibw)
    return retval


def fl_popup_get_color(pPopup, colrpos):
    """ fl_popup_get_color(pPopup, colrpos) -> color

        @type colrpos: [num./int] from xfdata module FL_POPUP_BACKGROUND_COLOR,
                       FL_POPUP_HIGHLIGHT_COLOR, FL_POPUP_TITLE_COLOR,
                       FL_POPUP_TEXT_COLOR, FL_POPUP_HIGHLIGHT_TEXT_COLOR,
                       FL_POPUP_DISABLED_TEXT_COLOR, FL_POPUP_RADIO_COLOR

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_get_color = cfuncproto(
            load_so_libforms(), "fl_popup_get_color",
            xfc.FL_COLOR, [cty.POINTER(xfc.FL_POPUP), cty.c_int],
            """FL_COLOR fl_popup_get_color(FL_POPUP * p1, int p2)
            """)
    check_admitted_listvalues(colrpos, xfc.POPUPCOLOR_list)
    icolrpos = convert_to_int(colrpos)
    keep_elem_refs(pPopup, colrpos, icolrpos)
    retval = _fl_popup_get_color(pPopup, icolrpos)
    return retval


def fl_popup_set_color(pPopup, colrpos, colr):
    """ fl_popup_set_color(pPopup, colrpos, colr) -> color

        @param colrpos: popup color type
        @type colrpos: [num./int] from xfdata module FL_POPUP_BACKGROUND_COLOR,
                       FL_POPUP_HIGHLIGHT_COLOR, FL_POPUP_TITLE_COLOR,
                       FL_POPUP_TEXT_COLOR, FL_POPUP_HIGHLIGHT_TEXT_COLOR,
                       FL_POPUP_DISABLED_TEXT_COLOR, FL_POPUP_RADIO_COLOR
        @param colr: color value to be set

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_set_color = cfuncproto(
            load_so_libforms(), "fl_popup_set_color",
            xfc.FL_COLOR, [cty.POINTER(xfc.FL_POPUP), cty.c_int, xfc.FL_COLOR],
            """FL_COLOR fl_popup_set_color(FL_POPUP * p1, int p2, FL_COLOR p3)
            """)
    check_admitted_listvalues(colrpos, xfc.POPUPCOLOR_list)
    check_admitted_listvalues(colrpos, xfc.COLOR_list)
    icolrpos = convert_to_int(colrpos)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pPopup, colrpos, colr, icolrpos, ulcolr)
    retval = _fl_popup_set_color(pPopup, icolrpos, ulcolr)
    return retval


def fl_popup_set_cursor(pPopup, cursnum):
    """ fl_popup_set_cursor(pPopup, cursnum)

        Changes the cursor displayed when a popup is shown.

        @param pPopup: pointer to FL_POPUP
        @param cursnum: id of a symbolic cursor shapes' names

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_set_cursor = cfuncproto(
            load_so_libforms(), "fl_popup_set_cursor",
            None, [cty.POINTER(xfc.FL_POPUP), cty.c_int],
            """void fl_popup_set_cursor(FL_POPUP * p1, int p2)
            """)
    icursnum = convert_to_int(cursnum)
    keep_elem_refs(pPopup, cursnum, icursnum)
    _fl_popup_set_cursor(pPopup, icursnum)


def fl_popup_get_title(pPopup):
    """ fl_popup_get_title(pPopup) -> title string

        Returns the title of a popup.

        @param pPopup: pointer to popup

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_get_title = cfuncproto(
            load_so_libforms(), "fl_popup_get_title",
            xfc.STRING, [cty.POINTER(xfc.FL_POPUP)],
            """const char * fl_popup_get_title(FL_POPUP * p1)
            """)
    keep_elem_refs(pPopup)
    retval = _fl_popup_get_title(pPopup)
    return retval


def fl_popup_set_title(pPopup, title):
    """ fl_popup_set_title(pPopup, title) -> popup

        Sets the title of a popup.

        @param pPopup: pointer to popup
        @param title: title of the popup

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_set_title = cfuncproto(
            load_so_libforms(), "fl_popup_set_title",
            cty.POINTER(xfc.FL_POPUP), [cty.POINTER(xfc.FL_POPUP), xfc.STRING],
            """FL_POPUP * fl_popup_set_title(FL_POPUP * p1, const char * p2)
            """)
    stitle = convert_to_string(title)
    keep_elem_refs(pPopup, title, stitle)
    retval = _fl_popup_set_title(pPopup, stitle)
    return retval


def fl_popup_entry_set_callback(pPopupEntry, py_PopupCb):
    """ fl_popup_entry_set_callback(pPopupEntry, py_PopupCb) -> popup_callback

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_popup_entry_set_callback = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_callback",
            xfc.FL_POPUP_CB, [cty.POINTER(xfc.FL_POPUP_ENTRY),
            xfc.FL_POPUP_CB],
            """FL_POPUP_CB fl_popup_entry_set_callback(FL_POPUP_ENTRY * p1,
               FL_POPUP_CB p2)
            """)
    c_PopupCb = xfc.FL_POPUP_CB(py_PopupCb)
    keep_cfunc_refs(c_PopupCb, py_PopupCb)
    keep_elem_refs(pPopupEntry)
    retval = _fl_popup_entry_set_callback(pPopupEntry, c_PopupCb)
    return retval


def fl_popup_entry_set_enter_callback(pPopupEntry, py_PopupCb):
    """ fl_popup_entry_set_enter_callback(pPopupEntry, py_PopupCb) -> popup_callback

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_set_enter_callback = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_enter_callback",
            xfc.FL_POPUP_CB, [cty.POINTER(xfc.FL_POPUP_ENTRY),
            xfc.FL_POPUP_CB],
            """FL_POPUP_CB fl_popup_entry_set_enter_callback(
               FL_POPUP_ENTRY * p1, FL_POPUP_CB p2)
            """)
    c_PopupCb = xfc.FL_POPUP_CB(py_PopupCb)
    keep_cfunc_refs(c_PopupCb, py_PopupCb)
    keep_elem_refs(pPopupEntry)
    retval = _fl_popup_entry_set_enter_callback(pPopupEntry, c_PopupCb)
    return retval


def fl_popup_entry_set_leave_callback(pPopupEntry, py_PopupCb):
    """ fl_popup_entry_set_leave_callback(pPopupEntry, py_PopupCb) -> popup_callback

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_set_leave_callback = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_leave_callback",
            xfc.FL_POPUP_CB, [cty.POINTER(xfc.FL_POPUP_ENTRY),
            xfc.FL_POPUP_CB],
            """FL_POPUP_CB fl_popup_entry_set_leave_callback(
               FL_POPUP_ENTRY * p1, FL_POPUP_CB p2)
            """)
    c_PopupCb = xfc.FL_POPUP_CB(py_PopupCb)
    keep_cfunc_refs(c_PopupCb, py_PopupCb)
    keep_elem_refs(pPopupEntry)
    retval = _fl_popup_entry_set_leave_callback(pPopupEntry, c_PopupCb)
    return retval


def fl_popup_entry_get_state(pPopupEntry):
    """ fl_popup_entry_get_state(pPopupEntry) -> state num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_get_state = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_state",
            cty.c_uint, [cty.POINTER(xfc.FL_POPUP_ENTRY)],
            """unsigned int fl_popup_entry_get_state(FL_POPUP_ENTRY * p1)
            """)
    keep_elem_refs(pPopupEntry)
    retval = _fl_popup_entry_get_state(pPopupEntry)
    return retval


def fl_popup_entry_set_state(pPopupEntry, state):
    """ fl_popup_entry_set_state(pPopupEntry, state) -> state num.

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_popup_entry_set_state = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_state",
            cty.c_uint, [cty.POINTER(xfc.FL_POPUP_ENTRY), cty.c_uint],
            """unsigned int fl_popup_entry_set_state(FL_POPUP_ENTRY * p1,
               unsigned int p2)
            """)
    uistate = convert_to_uint(state)
    keep_elem_refs(pPopupEntry, state, uistate)
    retval = _fl_popup_entry_set_state(pPopupEntry, uistate)
    return retval


def fl_popup_entry_clear_state(pPopupEntry, state):
    """ fl_popup_entry_clear_state(pPopupEntry, state) -> state num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_clear_state = cfuncproto(
            load_so_libforms(), "fl_popup_entry_clear_state",
            cty.c_uint, [cty.POINTER(xfc.FL_POPUP_ENTRY), cty.c_uint],
            """unsigned int fl_popup_entry_clear_state(FL_POPUP_ENTRY * p1,
               unsigned int p2)
            """)
    uistate = convert_to_uint(state)
    keep_elem_refs(pPopupEntry, state, uistate)
    retval = _fl_popup_entry_clear_state(pPopupEntry, uistate)
    return retval


def fl_popup_entry_raise_state(pPopupEntry, state):
    """ fl_popup_entry_raise_state(pPopupEntry, state) -> state num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_raise_state = cfuncproto(
            load_so_libforms(), "fl_popup_entry_raise_state",
            cty.c_uint, [cty.POINTER(xfc.FL_POPUP_ENTRY), cty.c_uint],
            """unsigned int fl_popup_entry_raise_state(FL_POPUP_ENTRY * p1,
               unsigned int p2)
            """)
    uistate = convert_to_uint(state)
    keep_elem_refs(pPopupEntry, state, uistate)
    retval = _fl_popup_entry_raise_state(pPopupEntry, uistate)
    return retval


def fl_popup_entry_toggle_state(pPopupEntry, state):
    """ fl_popup_entry_toggle_state(pPopupEntry, state) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_toggle_state = cfuncproto(
            load_so_libforms(), "fl_popup_entry_toggle_state",
            cty.c_uint, [cty.POINTER(xfc.FL_POPUP_ENTRY), cty.c_uint],
            """unsigned int fl_popup_entry_toggle_state(FL_POPUP_ENTRY * p1,
               unsigned int p2)
            """)
    uistate = convert_to_uint(state)
    keep_elem_refs(pPopupEntry, state, uistate)
    retval = _fl_popup_entry_toggle_state(pPopupEntry, uistate)
    return retval


def fl_popup_entry_set_text(pPopupEntry, text):
    """ fl_popup_entry_set_text(p1, txtstr) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_set_text = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_text",
            cty.c_int, [cty.POINTER(xfc.FL_POPUP_ENTRY), xfc.STRING],
            """int fl_popup_entry_set_text(FL_POPUP_ENTRY * p1,
               const char * p2)
            """)
    stext = convert_to_string(text)
    keep_elem_refs(pPopupEntry, text, stext)
    retval = _fl_popup_entry_set_text(pPopupEntry, stext)
    return retval


def fl_popup_entry_set_shortcut(pPopupEntry, textsc):
    """ fl_popup_entry_set_shortcut(pPopupEntry, textsc)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_popup_entry_set_shortcut = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_shortcut",
            None, [cty.POINTER(xfc.FL_POPUP_ENTRY), xfc.STRING],
            """void fl_popup_entry_set_shortcut(FL_POPUP_ENTRY * p1,
               const char * p2)
            """)
    stextsc = convert_to_string(textsc)
    keep_elem_refs(pPopupEntry, textsc, stextsc)
    _fl_popup_entry_set_shortcut(pPopupEntry, stextsc)


def fl_popup_entry_set_value(pPopupEntry, val):
    """ fl_popup_entry_set_value(pPopupEntry, p2) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_set_value = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_value",
            cty.c_long, [cty.POINTER(xfc.FL_POPUP_ENTRY), cty.c_long],
            """long int fl_popup_entry_set_value(FL_POPUP_ENTRY * p1,
               long int p2)
            """)
    lval = convert_to_long(val)
    keep_elem_refs(pPopupEntry, val, lval)
    retval = _fl_popup_entry_set_value(pPopupEntry, lval)
    return retval


def fl_popup_entry_set_user_data(pPopupEntry, vdata):
    """ fl_popup_entry_set_user_data(pPopupEntry, vdata) -> ??

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_set_user_data = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_user_data",
            cty.c_void_p, [cty.POINTER(xfc.FL_POPUP_ENTRY), cty.c_void_p],
            """void * fl_popup_entry_set_user_data(FL_POPUP_ENTRY * p1,
               void * p2)
            """)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_elem_refs(pPopupEntry, vdata, pvdata)
    retval = _fl_popup_entry_set_user_data(pPopupEntry, pvdata)
    return retval


def fl_popup_entry_get_by_position(pPopup, numpos):
    """ fl_popup_entry_get_by_position(pPopup, numpos) -> pPopupEntry

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_get_by_position = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_by_position",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_POPUP), cty.c_int],
            """FL_POPUP_ENTRY * fl_popup_entry_get_by_position(FL_POPUP * p1,
               int p2)
            """)
    inumpos = convert_to_int(numpos)
    keep_elem_refs(pPopup, numpos, inumpos)
    retval = _fl_popup_entry_get_by_position(pPopup, inumpos)
    return retval


def fl_popup_entry_get_by_value(pPopup, val):
    """ fl_popup_entry_get_by_value(pPopup, val) -> pPopupEntry

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_get_by_value = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_by_value",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_POPUP), cty.c_long],
            """FL_POPUP_ENTRY * fl_popup_entry_get_by_value(FL_POPUP * p1,
               long int p2)
            """)
    lval = convert_to_long(val)
    keep_elem_refs(pPopup, val, lval)
    retval = _fl_popup_entry_get_by_value(pPopup, lval)
    return retval


def fl_popup_entry_get_by_user_data(pPopup, vdata):
    """ fl_popup_entry_get_by_user_data(pPopup, vdata) -> pPopupEntry

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_get_by_user_data = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_by_user_data",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_POPUP), cty.c_void_p],
            """FL_POPUP_ENTRY * fl_popup_entry_get_by_user_data(FL_POPUP * p1,
               void * p2)
            """)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_elem_refs(pPopup, vdata, pvdata)
    retval = _fl_popup_entry_get_by_user_data(pPopup, pvdata)
    return retval


def fl_popup_entry_get_by_text(pPopup, text):
    """ fl_popup_entry_get_by_text(pPopup, text) -> pPopupEntry

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_get_by_text = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_by_text",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_POPUP),
            xfc.STRING],
            """FL_POPUP_ENTRY * fl_popup_entry_get_by_text(FL_POPUP * p1,
               const char * p2)
            """)
    stext = convert_to_string(text)
    keep_elem_refs(pPopup, text, stext)
    retval = _fl_popup_entry_get_by_text(pPopup, stext)
    return retval


def fl_popup_entry_get_by_label(pPopup, label):
    """ fl_popup_entry_get_by_label(pPopup, label) -> pPopupEntry

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_get_by_label = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_by_label",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_POPUP),
            xfc.STRING],
            """FL_POPUP_ENTRY * fl_popup_entry_get_by_label(FL_POPUP * p1,
               const char * p2)
            """)
    slabel = convert_to_string(label)
    keep_elem_refs(pPopup, label, slabel)
    retval = _fl_popup_entry_get_by_label(pPopup, slabel)
    return retval


def fl_popup_entry_get_group(pPopupEntry):
    """ fl_popup_entry_get_group(pPopupEntry) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_get_group = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_group",
            cty.c_int, [cty.POINTER(xfc.FL_POPUP_ENTRY)],
            """int fl_popup_entry_get_group(FL_POPUP_ENTRY * p1)
            """)
    keep_elem_refs(pPopupEntry)
    retval = _fl_popup_entry_get_group(pPopupEntry)
    return retval


def fl_popup_entry_set_group(pPopupEntry, num):
    """ fl_popup_entry_set_group(pPopupEntry, num) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_set_group = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_group",
            cty.c_int, [cty.POINTER(xfc.FL_POPUP_ENTRY), cty.c_int],
            """int fl_popup_entry_set_group(FL_POPUP_ENTRY * p1, int p2)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pPopupEntry, num, inum)
    retval = _fl_popup_entry_set_group(pPopupEntry, inum)
    return retval


def fl_popup_entry_get_subpopup(pPopupEntry):
    """ fl_popup_entry_get_subpopup(pPopupEntry) -> pPopup

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_get_subpopup = cfuncproto(
            load_so_libforms(), "fl_popup_entry_get_subpopup",
            cty.POINTER(xfc.FL_POPUP), [cty.POINTER(xfc.FL_POPUP_ENTRY)],
            """FL_POPUP * fl_popup_entry_get_subpopup(FL_POPUP_ENTRY * p1)
            """)
    keep_elem_refs(pPopupEntry)
    retval = _fl_popup_entry_get_subpopup(pPopupEntry)
    return retval


def fl_popup_entry_set_subpopup(pPopupEntry, pPopup):
    """ fl_popup_entry_set_subpopup(pPopupEntry, pPopup) -> pPopup

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_entry_set_subpopup = cfuncproto(
            load_so_libforms(), "fl_popup_entry_set_subpopup",
            cty.POINTER(xfc.FL_POPUP), [cty.POINTER(xfc.FL_POPUP_ENTRY),
            cty.POINTER(xfc.FL_POPUP)],
            """FL_POPUP * fl_popup_entry_set_subpopup(FL_POPUP_ENTRY * p1,
               FL_POPUP * p2)
            """)
    keep_elem_refs(pPopupEntry, pPopup)
    retval = _fl_popup_entry_set_subpopup(pPopupEntry, pPopup)
    return retval


def fl_popup_get_size(pPopup):
    """ fl_popup_get_size(pPopup) -> size num., width, height

        @attention: API change from XForms - upstream was
                    fl_popup_get_size(pPopup, w, h)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_get_size = cfuncproto(
            load_so_libforms(), "fl_popup_get_size",
            cty.c_int, [cty.POINTER(xfc.FL_POPUP), cty.POINTER(cty.c_uint),
            cty.POINTER(cty.c_uint)],
            """int fl_popup_get_size(FL_POPUP * p1, unsigned int * p2,
               unsigned int * p3)
            """)
    w, pw = make_uint_and_pointer()
    h, ph = make_uint_and_pointer()
    keep_elem_refs(pPopup, w, h, pw, ph)
    retval = _fl_popup_get_size(pPopup, pw, ph)
    return retval, w, h


def fl_popup_get_min_width(pPopup):
    """ fl_popup_get_min_width(pPopup) -> width num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_get_min_width = cfuncproto(
            load_so_libforms(), "fl_popup_get_min_width",
            cty.c_int, [cty.POINTER(xfc.FL_POPUP)],
            """int fl_popup_get_min_width(FL_POPUP * p1)
            """)
    keep_elem_refs(pPopup)
    retval = _fl_popup_get_min_width(pPopup)
    return retval


def fl_popup_set_min_width(pPopup, minwidth):
    """ fl_popup_set_min_width(pPopup, minwidth) -> width num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popup_set_min_width = cfuncproto(
            load_so_libforms(), "fl_popup_set_min_width",
            cty.c_int, [cty.POINTER(xfc.FL_POPUP), cty.c_int],
            """int fl_popup_set_min_width(FL_POPUP * p1, int p2)
            """)
    iminwidth = convert_to_int(minwidth)
    keep_elem_refs(pPopup, minwidth, iminwidth)
    retval = _fl_popup_set_min_width(pPopup, iminwidth)
    return retval



#######################
# forms.h (bitmap.h)
# Object Class: Bitmap
#######################


# Routines

# fl_create_bitmap function placeholder (internal)


def fl_add_bitmap(bitmaptype, x, y, w, h, label):
    """ fl_add_bitmap(bitmaptype, x, y, w, h, label) -> pObject

        Adds a bitmap object.

        @param bitmaptype: type of bitmap to be added
        @type bitmaptype: [num./int] xfc.FL_NORMAL_BITMAP
        @param x: horizontal position (upper-left corner)
        @param y: vertical position of bitmap (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of bitmap

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_bitmap = cfuncproto(
            load_so_libforms(), "fl_add_bitmap",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_bitmap(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(bitmaptype, xfc.BITMAPTYPE_list)
    ibitmaptype = convert_to_int(bitmaptype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(bitmaptype, x, y, w, h, label, ibitmaptype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_bitmap(ibitmaptype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_bitmap_data(pObject, w, h, xbmcontents):
    """ fl_set_bitmap_data(pObject, w, h, xbmcontents)

        Fills the bitmap object with a bitmap.

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)
        @param w: width of bitmap in cood units
        @param h: height of bitmap in coord units
        @param xbmcontents: bitmap data used for contents in ubytes

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_bitmap_data = cfuncproto(
            load_so_libforms(), "fl_set_bitmap_data",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int,
            cty.POINTER(cty.c_ubyte)],
            """void fl_set_bitmap_data(FL_OBJECT * ob, int w, int h,
               unsigned char * data)
            """)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    pxbmcontents = cty.cast(xbmcontents, cty.POINTER(cty.c_ubyte))
    keep_elem_refs(pObject, w, h, xbmcontents, iw, ih, pxbmcontents)
    _fl_set_bitmap_data(pObject, iw, ih, pxbmcontents)


def fl_set_bitmap_file(pObject, fname):
    """ fl_set_bitmap_file(pObject, fname)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)
        @param fname: name of bitmap file

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_bitmap_file = cfuncproto(
            load_so_libforms(), "fl_set_bitmap_file",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING],
            """void fl_set_bitmap_file(FL_OBJECT * ob, const char * fname)
            """)
    sfname = convert_to_string(fname)
    keep_elem_refs(pObject, fname, sfname)
    _fl_set_bitmap_file(pObject, sfname)


fl_set_bitmapbutton_file = fl_set_bitmap_file
fl_set_bitmapbutton_datafile = fl_set_bitmapbutton_file

# fl_set_bitmap_datafile placeholder (backwards)


def fl_read_bitmapfile(win, filename, w, h, hotx, hoty):
    """ fl_read_bitmapfile(win, filename, w, h, hotx, hoty) -> pixmap

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_read_bitmapfile = cfuncproto(
            load_so_libforms(), "fl_read_bitmapfile",
            xfc.Pixmap, [xfc.Window, xfc.STRING, cty.POINTER(cty.c_uint),
            cty.POINTER(cty.c_uint), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """Pixmap fl_read_bitmapfile(Window win, const char * file,
               unsigned int * w, unsigned int * h, int * hotx, int * hoty)
            """)
    ulwin = convert_to_Window(win)
    sfilename = convert_to_string(filename)
    pw = cty.cast(w, cty.POINTER(cty.c_uint))
    ph = cty.cast(h, cty.POINTER(cty.c_uint))
    photx = cty.cast(hotx, cty.POINTER(cty.c_int))
    photy = cty.cast(hoty, cty.POINTER(cty.c_int))
    keep_elem_refs(win, filename, w, h, hotx, hoty, ulwin, sfilename,
                   pw, ph, photx, photy)
    retval = _fl_read_bitmapfile(ulwin, sfilename, pw, ph, photx, photy)
    return retval


def fl_create_from_bitmapdata(win, data, w, h):
    """ fl_create_from_bitmapdata(win, data, w, h) -> pixmap

        @param win: window
        @param data: bitmap data
        @param w: width in coord units
        @param h: height in coord units

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_create_from_bitmapdata = cfuncproto(
            load_so_libforms(), "fl_create_from_bitmapdata",
            xfc.Pixmap, [xfc.Window, xfc.STRING, cty.c_int, cty.c_int],
            """Pixmap fl_create_from_bitmapdata(Window win, const
               char * data, int width, int height)
            """)
    ulwin = convert_to_Window(win)
    sdata = convert_to_string(data)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    keep_elem_refs(win, data, w, h, ulwin, sdata, iw, ih)
    retval = _fl_create_from_bitmapdata(ulwin, sdata, iw, ih)
    return retval


# PIXMAP stuff

# fl_create_pixmap function placeholder (internal)


def fl_add_pixmap(pixmaptype, x, y, w, h, label):
    """ fl_add_pixmap(pixmaptype, x, y, w, h, label) -> pObject

        Adds a pixmap object.

        @param pixmaptype: type of pixmap to be added
        @type pixmaptype: [num./int] xfc.FL_NORMAL_PIXMAP
        @param x: horizontal position (upper-left corner)
        @param y: vertical position of bitmap (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of pixmap

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_pixmap = cfuncproto(
            load_so_libforms(), "fl_add_pixmap",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_pixmap(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(pixmaptype, xfc.PIXMAPTYPE_list)
    ipixmaptype = convert_to_int(pixmaptype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(pixmaptype, x, y, w, h, label, ipixmaptype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_pixmap(ipixmaptype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_pixmap_data(pObject, bits):
    """ fl_set_pixmap_data(pObject, bits)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)
        @param bits: bits contents of pixmap

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_pixmap_data = cfuncproto(
            load_so_libforms(), "fl_set_pixmap_data",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.STRING)],
            """void fl_set_pixmap_data(FL_OBJECT * ob, char * * bits)
            """)
    print "bits", bits
    sbits = convert_to_string(bits)
    print "sbits", sbits
    pbits = cty.pointer(sbits)     #cty.cast(bits, cty.POINTER(xfc.STRING))
    print "pbits", pbits
    keep_elem_refs(pObject, bits, sbits, pbits)
    _fl_set_pixmap_data(pObject, pbits)


def fl_set_pixmap_file(pObject, fname):
    """ fl_set_pixmap_file(pObject, fname)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)
        @param fname: name of the pixmap file

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_pixmap_file = cfuncproto(
            load_so_libforms(), "fl_set_pixmap_file",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING],
            """void fl_set_pixmap_file(FL_OBJECT * ob, const char * fname)
            """)
    sfname = convert_to_string(fname)
    keep_elem_refs(pObject, fname, sfname)
    _fl_set_pixmap_file(pObject, sfname)


fl_set_pixmapbutton_file = fl_set_pixmap_file
fl_set_pixmapbutton_datafile = fl_set_pixmapbutton_file


def fl_set_pixmap_align(pObject, align, xmargin, ymargin):
    """ fl_set_pixmap_align(pObject, align, xmargin, ymargin)

        @param pObject: pixmap object
                        (<pointer to xfdata.FL_OBJECT>)
        @param align: alignment of pixmap (<int>)
        @type align: (from xfdata module) FL_ALIGN_CENTER, FL_ALIGN_TOP,
                     FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
                     FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP,
                     FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM,
                     FL_ALIGN_INSIDE, FL_ALIGN_VERT

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_pixmap_align = cfuncproto(
            load_so_libforms(), "fl_set_pixmap_align",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int,
            cty.c_int],
            """void fl_set_pixmap_align(FL_OBJECT * ob, int align,
               int xmargin, int ymargin)
            """)
    check_admitted_listvalues(align, xfc.ALIGN_list)
    ialign = convert_to_int(align)
    ixmargin = convert_to_int(xmargin)
    iymargin = convert_to_int(ymargin)
    keep_elem_refs(pObject, align, xmargin, ymargin, ialign, ixmargin,
                   iymargin)
    _fl_set_pixmap_align(pObject, ialign, ixmargin, iymargin)


fl_set_pixmapbutton_align = fl_set_pixmap_align


def fl_set_pixmap_pixmap(pObject, idnum, mask):
    """ fl_set_pixmap_pixmap(pObject, idnum, mask)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_pixmap_pixmap = cfuncproto(
            load_so_libforms(), "fl_set_pixmap_pixmap",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.Pixmap, xfc.Pixmap],
            """void fl_set_pixmap_pixmap(FL_OBJECT * ob, Pixmap id,
               Pixmap mask)
            """)
    ulidnum = convert_to_ulong(idnum)
    ulmask = convert_to_ulong(mask)
    keep_elem_refs(pObject, idnum, mask, ulidnum, ulmask)
    _fl_set_pixmap_pixmap(pObject, ulidnum, ulmask)


fl_set_pixmapbutton_pixmap = fl_set_pixmap_pixmap


def fl_set_pixmap_colorcloseness(red, green, blue):
    """ fl_set_pixmap_colorcloseness(red, green, blue)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_pixmap_colorcloseness = cfuncproto(
            load_so_libforms(), "fl_set_pixmap_colorcloseness",
            None, [cty.c_int, cty.c_int, cty.c_int],
            """void fl_set_pixmap_colorcloseness(int red, int green, int blue)
            """)
    ired = convert_to_int(red)
    igreen = convert_to_int(green)
    iblue = convert_to_int(blue)
    keep_elem_refs(red, green, blue, ired, igreen, iblue)
    _fl_set_pixmap_colorcloseness(ired, igreen, iblue)


def fl_free_pixmap_pixmap(pObject):
    """ fl_free_pixmap_pixmap(pObject)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_free_pixmap_pixmap = cfuncproto(
            load_so_libforms(), "fl_free_pixmap_pixmap",
            None, [cty.POINTER(xfc.FL_OBJECT)],
            """void fl_free_pixmap_pixmap(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_free_pixmap_pixmap(pObject)


fl_free_pixmapbutton_pixmap = fl_free_pixmap_pixmap


def fl_get_pixmap_pixmap(pObject):
    """ fl_get_pixmap_pixmap(pObject) -> pixmap, pPixmap, pPixmap_mask

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @attention: API change from XForms - upstream was
                    fl_get_pixmap_pixmap(pObject, p, m)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_pixmap_pixmap = cfuncproto(
            load_so_libforms(), "fl_get_pixmap_pixmap",
            xfc.Pixmap, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.Pixmap),
            cty.POINTER(xfc.Pixmap)],
            """Pixmap fl_get_pixmap_pixmap(FL_OBJECT * ob, Pixmap * p,
               Pixmap * m)
            """)
    p, pp = make_ulong_and_pointer()
    m, pm = make_ulong_and_pointer()
    keep_elem_refs(pObject, p, m, pp, pm)
    retval = _fl_get_pixmap_pixmap(pObject, pp, pm)
    return retval, p, m


fl_get_pixmapbutton_pixmap = fl_get_pixmap_pixmap


def fl_read_pixmapfile(win, filename, tran):
    """ fl_read_pixmapfile(win, filename, tran) -> pixmap, w, h, shapemask, hotx, hoty

        @attention: API change from XForms - upstream was
                    fl_read_pixmapfile(win, filename, w, h, shape_mask,
                    hotx, hoty, tran)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_read_pixmapfile = cfuncproto(
            load_so_libforms(), "fl_read_pixmapfile",
            xfc.Pixmap, [xfc.Window, xfc.STRING, cty.POINTER(cty.c_uint),
            cty.POINTER(cty.c_uint), cty.POINTER(xfc.Pixmap),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int), xfc.FL_COLOR],
            """Pixmap fl_read_pixmapfile(Window win, const char * file,
               unsigned int * w, unsigned int * h, Pixmap * shape_mask,
               int * hotx, int * hoty, FL_COLOR tran)
            """)
    check_admitted_listvalues(tran, xfc.COLOR_list)
    ulwin = convert_to_Window(win)
    sfilename = convert_to_string(filename)
    ultran = convert_to_FL_COLOR(tran)
    w, pw = make_uint_and_pointer()
    h, ph = make_uint_and_pointer()
    shapemask, pshapemask = make_ulong_and_pointer()
    hotx, photx = make_int_and_pointer()
    hoty, photy = make_int_and_pointer()
    keep_elem_refs(win, filename, w, h, shapemask, hotx, hoty, tran, ulwin,
                   sfilename, ultran, pw, ph, pshapemask, photx, photy)
    retval = _fl_read_pixmapfile(ulwin, sfilename, pw, ph, pshapemask, \
                                 photx, photy, ultran)
    return retval, w, h, shapemask, hotx, hoty


def fl_create_from_pixmapdata(win, data, w, h, sm, hotx, hoty, tran):
    """ fl_create_from_pixmapdata(win, data, w, h, sm, hotx, hoty, tran) -> pixmap

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_create_from_pixmapdata = cfuncproto(
            load_so_libforms(), "fl_create_from_pixmapdata",
            xfc.Pixmap, [xfc.Window, cty.POINTER(xfc.STRING),
            cty.POINTER(cty.c_uint), cty.POINTER(cty.c_uint),
            cty.POINTER(xfc.Pixmap), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), xfc.FL_COLOR],
            """Pixmap fl_create_from_pixmapdata(Window win, char * * data,
            unsigned int * w, unsigned int * h, Pixmap * sm, int * hotx,
            int * hoty, FL_COLOR tran)
            """)
    check_admitted_listvalues(tran, xfc.COLOR_list)
    ulwin = convert_to_Window(win)
    ultran = convert_to_FL_COLOR(tran)
    keep_elem_refs(win, data, w, h, sm, hotx, hoty, tran, ulwin, ultran)
    retval = _fl_create_from_pixmapdata(ulwin, data, w, h, sm, hotx, hoty,
                                        ultran)
    return retval


def fl_free_pixmap(idnum):
    """ fl_free_pixmap(idnum)

        @param idnum: Pixmap id to be freed

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_free_pixmap = cfuncproto(
            load_so_libforms(), "fl_free_pixmap",
            None, [xfc.Pixmap],
            """void fl_free_pixmap(Pixmap id)
            """)
    ulidnum = convert_to_Pixmap(idnum)
    keep_elem_refs(idnum, ulidnum)
    _fl_free_pixmap(ulidnum)



##################
# forms.h (box.h)
##################

# fl_create_box function placeholder (internal)


def fl_add_box(boxtype, x, y, w, h, label):
    """ fl_add_box(boxtype, x, y, w, h, label) -> pObject

        Adds a box object.

        @param boxtype: type of the box to be added (<int>)
        @type boxtype: (from xfdata module) FL_NO_BOX, FL_UP_BOX, FL_DOWN_BOX,
                       FL_BORDER_BOX, FL_SHADOW_BOX, FL_FRAME_BOX,
                       FL_ROUNDED_BOX, FL_EMBOSSED_BOX, FL_FLAT_BOX,
                       FL_RFLAT_BOX, FL_RSHADOW_BOX, FL_OVAL_BOX,
                       FL_ROUNDED3D_UPBOX, FL_ROUNDED3D_DOWNBOX,
                       FL_OVAL3D_UPBOX, FL_OVAL3D_DOWNBOX, FL_OVAL3D_FRAMEBOX,
                       FL_OVAL3D_EMBOSSEDBOX
        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of box

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_box = cfuncproto(
            load_so_libforms(), "fl_add_box",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_box(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(boxtype, xfc.BOXTYPE_list)
    iboxtype = convert_to_int(boxtype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(boxtype, x, y, w, h, label, iboxtype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_box(iboxtype, ix, iy, iw, ih, slabel)
    return retval



#######################
# forms.h (browser.h)
# Object class Browser
#######################

# Routines

# fl_create_browser function placeholder (internal)


def fl_add_browser(browsertype, x, y, w, h, label):
    """ fl_add_browser(browsertype, x, y, w, h, label) -> pObject

        Adds a browser object.

        @param browsertype: type of the browser to be added
        @type browsertype: [num./int] xfc.FL_NORMAL_BROWSER,
                           xfc.FL_SELECT_BROWSER, xfc.FL_HOLD_BROWSER,
                           xfc.FL_MULTI_BROWSER
        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of browser

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_browser = cfuncproto(
            load_so_libforms(), "fl_add_browser",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_browser(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(browsertype, xfc.BROWSERTYPE_list)
    ibrowsertype = convert_to_int(browsertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(browsertype, x, y, w, h, label, ibrowsertype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_browser(ibrowsertype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_browser(pObject):
    """ fl_clear_browser(pObject)

        Clears contents of a browser object.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_clear_browser = cfuncproto(
            load_so_libforms(), "fl_clear_browser",
            None, [cty.POINTER(xfc.FL_OBJECT)],
            """void fl_clear_browser(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_clear_browser(pObject)


def fl_add_browser_line(pObject, newtext):
    """ fl_add_browser_line(pObject, newtext)

        Add a line to a browser object.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)
        @param newtext: line of text to be added

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_browser_line = cfuncproto(
            load_so_libforms(), "fl_add_browser_line",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING],
            """void fl_add_browser_line(FL_OBJECT * ob, const char * newtext)
            """)
    snewtext = convert_to_string(newtext)
    keep_elem_refs(pObject, newtext, snewtext)
    _fl_add_browser_line(pObject, snewtext)


def fl_addto_browser(pObject, newtext):
    """ fl_addto_browser(pObject, newtext)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_addto_browser = cfuncproto(
            load_so_libforms(), "fl_addto_browser",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING],
            """void fl_addto_browser(FL_OBJECT * ob, const char * newtext)
            """)
    snewtext = convert_to_string(newtext)
    keep_elem_refs(pObject, newtext, snewtext)
    _fl_addto_browser(pObject, snewtext)


def fl_addto_browser_chars(pObject, browsertext):
    """ fl_addto_browser_chars(pObject, browsertext)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_addto_browser_chars = cfuncproto(
            load_so_libforms(), "fl_addto_browser_chars",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING],
            """void fl_addto_browser_chars(FL_OBJECT * ob, const char * str)
            """)
    sbrowsertext = convert_to_string(browsertext)
    keep_elem_refs(pObject, browsertext, sbrowsertext)
    _fl_addto_browser_chars(pObject, sbrowsertext)


fl_append_browser = fl_addto_browser_chars


def fl_insert_browser_line(pObject, linenum, newtext):
    """ fl_insert_browser_line(pObject, linenum, newtext)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_insert_browser_line = cfuncproto(
            load_so_libforms(), "fl_insert_browser_line",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, xfc.STRING],
            """void fl_insert_browser_line(FL_OBJECT * ob, int linenumb,
               const char * newtext)
            """)
    ilinenum = convert_to_int(linenum)
    snewtext = convert_to_string(newtext)
    keep_elem_refs(pObject, linenum, newtext, ilinenum, snewtext)
    _fl_insert_browser_line(pObject, ilinenum, snewtext)


def fl_delete_browser_line(pObject, linenum):
    """ fl_delete_browser_line(pObject, linenum)

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)
        @param linenum: line number to delete

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_delete_browser_line = cfuncproto(
            load_so_libforms(), "fl_delete_browser_line",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_delete_browser_line(FL_OBJECT * ob, int linenumb)
            """)
    ilinenum = convert_to_int(linenum)
    keep_elem_refs(pObject, linenum, ilinenum)
    _fl_delete_browser_line(pObject, ilinenum)


def fl_replace_browser_line(pObject, linenum, newtext):
    """ fl_replace_browser_line(pObject, linenum, newtext)

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)
        @param linenum: line number to replace
        @param newtext: text line used as replacement

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_replace_browser_line = cfuncproto(
            load_so_libforms(), "fl_replace_browser_line",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, xfc.STRING],
            """void fl_replace_browser_line(FL_OBJECT * ob, int linenumb,
               const char * newtext)
            """)
    ilinenum = convert_to_int(linenum)
    snewtext = convert_to_string(newtext)
    keep_elem_refs(pObject, linenum, newtext, ilinenum, snewtext)
    _fl_replace_browser_line(pObject, ilinenum, snewtext)


def fl_get_browser_line(pObject, linenum):
    """ fl_get_browser_line(pObject, linenum) -> line string

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)
        @param linenum: line number to return

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_browser_line = cfuncproto(
            load_so_libforms(), "fl_get_browser_line",
            xfc.STRING, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """const char * fl_get_browser_line(FL_OBJECT * ob, int linenumb)
            """)
    ilinenum = convert_to_int(linenum)
    keep_elem_refs(pObject, linenum, ilinenum)
    retval = _fl_get_browser_line(pObject, ilinenum)
    return retval


def fl_load_browser(pObject, filename):
    """ fl_load_browser(pObject, filename) -> num.

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_load_browser = cfuncproto(
            load_so_libforms(), "fl_load_browser",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING],
            """int fl_load_browser(FL_OBJECT * ob, const char * filename)
            """)
    sfilename = convert_to_string(filename)
    keep_elem_refs(pObject, filename, sfilename)
    retval = _fl_load_browser(pObject, sfilename)
    return retval


def fl_select_browser_line(pObject, line):
    """ fl_select_browser_line(pObject, line)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_select_browser_line = cfuncproto(
            load_so_libforms(), "fl_select_browser_line",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_select_browser_line(FL_OBJECT * ob, int line)
            """)
    iline = convert_to_int(line)
    keep_elem_refs(pObject, line, iline)
    _fl_select_browser_line(pObject, iline)


def fl_deselect_browser_line(pObject, line):
    """ fl_deselect_browser_line(pObject, line)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_deselect_browser_line = cfuncproto(
            load_so_libforms(), "fl_deselect_browser_line",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_deselect_browser_line(FL_OBJECT * ob, int line)
            """)
    iline = convert_to_int(line)
    keep_elem_refs(pObject, line, iline)
    _fl_deselect_browser_line(pObject, iline)


def fl_deselect_browser(pObject):
    """ fl_deselect_browser(pObject)

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_deselect_browser = cfuncproto(
            load_so_libforms(), "fl_deselect_browser",
            None, [cty.POINTER(xfc.FL_OBJECT)],
            """void fl_deselect_browser(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_deselect_browser(pObject)


def fl_isselected_browser_line(pObject, line):
    """ fl_isselected_browser_line(pObject, line) -> num.

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_isselected_browser_line = cfuncproto(
            load_so_libforms(), "fl_isselected_browser_line",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """int fl_isselected_browser_line(FL_OBJECT * ob, int line)
            """)
    iline = convert_to_int(line)
    keep_elem_refs(pObject, line, iline)
    retval = _fl_isselected_browser_line(pObject, iline)
    return retval


def fl_get_browser_topline(pObject):
    """ fl_get_browser_topline(pObject) -> num.

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_topline = cfuncproto(
            load_so_libforms(), "fl_get_browser_topline",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_browser_topline(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_topline(pObject)
    return retval


def fl_get_browser(pObject):
    """ fl_get_browser(pObject) -> num.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_browser = cfuncproto(
            load_so_libforms(), "fl_get_browser",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_browser(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser(pObject)
    return retval


def fl_get_browser_maxline(pObject):
    """ fl_get_browser_maxline(pObject) -> line num.

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_maxline = cfuncproto(
            load_so_libforms(), "fl_get_browser_maxline",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_browser_maxline(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_maxline(pObject)
    return retval


def fl_get_browser_screenlines(pObject):
    """ fl_get_browser_screenlines(pObject) -> lines num.

        Returns an approximation of the number of lines shown in the
        browser.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_screenlines = cfuncproto(
            load_so_libforms(), "fl_get_browser_screenlines",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_browser_screenlines(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_screenlines(pObject)
    return retval


def fl_set_browser_topline(pObject, line):
    """ fl_set_browser_topline(pObject, line)

        Moves a line to the top of the browser.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)
        @param line: number of text line to be moved to top

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_topline = cfuncproto(
            load_so_libforms(), "fl_set_browser_topline",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_browser_topline(FL_OBJECT * ob, int line)
            """)
    iline = convert_to_int(line)
    keep_elem_refs(pObject, line, iline)
    _fl_set_browser_topline(pObject, iline)


def fl_set_browser_bottomline(pObject, line):
    """ fl_set_browser_bottomline(pObject, line)

        Moves a line to the bottom of the browser.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)
        @param line: number of text line to be moved to bottom

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_bottomline = cfuncproto(
            load_so_libforms(), "fl_set_browser_bottomline",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_browser_bottomline(FL_OBJECT * ob, int line)
            """)
    iline = convert_to_int(line)
    keep_elem_refs(pObject, line, iline)
    _fl_set_browser_bottomline(pObject, iline)


def fl_set_browser_fontsize(pObject, size):
    """ fl_set_browser_fontsize(pObject, size)

        Sets the font size of a browser object.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)
        @param size: font size to be set

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_browser_fontsize = cfuncproto(
            load_so_libforms(), "fl_set_browser_fontsize",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_browser_fontsize(FL_OBJECT * ob, int size)
            """)
    isize = convert_to_int(size)
    keep_elem_refs(pObject, size, isize)
    _fl_set_browser_fontsize(pObject, isize)


def fl_set_browser_fontstyle(pObject, style):
    """ fl_set_browser_fontstyle(pObject, style)

        Sets the font style of a browser object.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)
        @param style: font style to be set

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_fontstyle = cfuncproto(
            load_so_libforms(), "fl_set_browser_fontstyle",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_browser_fontstyle(FL_OBJECT * ob, int style)
            """)
    istyle = convert_to_int(style)
    keep_elem_refs(pObject, style, istyle)
    _fl_set_browser_fontstyle(pObject, istyle)


def fl_set_browser_specialkey(pObject, specialkey):
    """ fl_set_browser_specialkey(pObject, specialkey)

        Sets the escape key used in the text.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)
        @param specialkey: escape key to be set

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_specialkey = cfuncproto(
            load_so_libforms(), "fl_set_browser_specialkey",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_browser_specialkey(FL_OBJECT * ob, int specialkey)
            """)
    ispecialkey = convert_to_int(specialkey)
    keep_elem_refs(pObject, specialkey, ispecialkey)
    _fl_set_browser_specialkey(pObject, ispecialkey)


def fl_set_browser_vscrollbar(pObject, on):
    """ fl_set_browser_vscrollbar(pObject, on)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_browser_vscrollbar = cfuncproto(
            load_so_libforms(), "fl_set_browser_vscrollbar",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_browser_vscrollbar(FL_OBJECT * ob, int on)
            """)
    ion = convert_to_int(on)
    keep_elem_refs(pObject, on, ion)
    _fl_set_browser_vscrollbar(pObject, ion)


def fl_set_browser_hscrollbar(pObject, on):
    """ fl_set_browser_hscrollbar(pObject, on)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_hscrollbar = cfuncproto(
            load_so_libforms(), "fl_set_browser_hscrollbar",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_browser_hscrollbar(FL_OBJECT * ob, int on)
            """)
    ion = convert_to_int(on)
    keep_elem_refs(pObject, on, ion)
    _fl_set_browser_hscrollbar(pObject, ion)


def fl_set_browser_line_selectable(pObject, line, flag):
    """ fl_set_browser_line_selectable(pObject, line, flag)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_line_selectable = cfuncproto(
            load_so_libforms(), "fl_set_browser_line_selectable",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_browser_line_selectable(FL_OBJECT * ob, int line,
               int flag)
            """)
    iline = convert_to_int(line)
    iflag = convert_to_int(flag)
    keep_elem_refs(pObject, line, flag, iline, iflag)
    _fl_set_browser_line_selectable(pObject, iline, iflag)


def fl_get_browser_dimension(pObject):
    """ fl_get_browser_dimension(pObject) -> hor.xpos, ver.ypos, width, height

        Returns all dimensions of a browser object.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @attention: API change from XForms - upstream was
                    fl_get_browser_dimension(pObject, x, y, w, h)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_dimension = cfuncproto(
            load_so_libforms(), "fl_get_browser_dimension",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_Coord),
            cty.POINTER(xfc.FL_Coord), cty.POINTER(xfc.FL_Coord),
            cty.POINTER(xfc.FL_Coord)],
            """void fl_get_browser_dimension(FL_OBJECT * ob, FL_Coord * x,
               FL_Coord * y, FL_Coord * w, FL_Coord * h)
            """)
    x, px = make_FL_Coord_and_pointer()
    y, py = make_FL_Coord_and_pointer()
    w, pw = make_FL_Coord_and_pointer()
    h, ph = make_FL_Coord_and_pointer()
    keep_elem_refs(pObject, x, y, w, h, px, py, pw, ph)
    _fl_get_browser_dimension(pObject, px, py, pw, ph)
    return x, y, w, h


def fl_set_browser_dblclick_callback(pObject, py_CallbackPtr, argum):
    """ fl_set_browser_dblclick_callback(pObject, py_CallbackPtr, argum)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_dblclick_callback = cfuncproto(
            load_so_libforms(), "fl_set_browser_dblclick_callback",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_CALLBACKPTR, cty.c_long],
            """void fl_set_browser_dblclick_callback(FL_OBJECT * ob,
               FL_CALLBACKPTR cb, long int a)
            """)
    largum = convert_to_long(argum)
    c_CallbackPtr = xfc.FL_CALLBACKPTR(py_CallbackPtr)
    keep_cfunc_refs(c_CallbackPtr, py_CallbackPtr)
    keep_elem_refs(pObject, argum, largum)
    _fl_set_browser_dblclick_callback(pObject, c_CallbackPtr, largum)


def fl_get_browser_xoffset(pObject):
    """ fl_get_browser_xoffset(pObject) -> coord num.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_xoffset = cfuncproto(
            load_so_libforms(), "fl_get_browser_xoffset",
            xfc.FL_Coord, [cty.POINTER(xfc.FL_OBJECT)],
            """FL_Coord fl_get_browser_xoffset(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_xoffset(pObject)
    return retval


def fl_get_browser_rel_xoffset(pObject):
    """ fl_get_browser_rel_xoffset(pObject) -> num.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_rel_xoffset = cfuncproto(
            load_so_libforms(), "fl_get_browser_rel_xoffset",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT)],
            """double fl_get_browser_rel_xoffset(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_rel_xoffset(pObject)
    return retval


def fl_set_browser_xoffset(pObject, npixels):
    """ fl_set_browser_xoffset(pObject, npixels)

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_xoffset = cfuncproto(
            load_so_libforms(), "fl_set_browser_xoffset",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_Coord],
            """void fl_set_browser_xoffset(FL_OBJECT * ob, FL_Coord npixels)
            """)
    inpixels = convert_to_FL_Coord(npixels)
    keep_elem_refs(pObject, npixels, inpixels)
    _fl_set_browser_xoffset(pObject, inpixels)


def fl_set_browser_rel_xoffset(pObject, val):
    """ fl_set_browser_rel_xoffset(pObject, val)

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_rel_xoffset = cfuncproto(
            load_so_libforms(), "fl_set_browser_rel_xoffset",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_browser_rel_xoffset(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_browser_rel_xoffset(pObject, fval)


def fl_get_browser_yoffset(pObject):
    """ fl_get_browser_yoffset(pObject) -> coord num.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_browser_yoffset = cfuncproto(
            load_so_libforms(), "fl_get_browser_yoffset",
            xfc.FL_Coord, [cty.POINTER(xfc.FL_OBJECT)],
            """FL_Coord fl_get_browser_yoffset(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_yoffset(pObject)
    return retval


def fl_get_browser_rel_yoffset(pObject):
    """ fl_get_browser_rel_yoffset(pObject) -> num.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_rel_yoffset = cfuncproto(
            load_so_libforms(), "fl_get_browser_rel_yoffset",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT)],
            """double fl_get_browser_rel_yoffset(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_rel_yoffset(pObject)
    return retval


def fl_set_browser_yoffset(pObject, npixels):
    """ fl_set_browser_yoffset(pObject, npixels)

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_browser_yoffset = cfuncproto(
            load_so_libforms(), "fl_set_browser_yoffset",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_Coord],
            """void fl_set_browser_yoffset(FL_OBJECT * ob, FL_Coord npixels)
            """)
    inpixels = convert_to_FL_Coord(npixels)
    keep_elem_refs(pObject, npixels, inpixels)
    _fl_set_browser_yoffset(pObject, inpixels)


def fl_set_browser_rel_yoffset(pObject, val):
    """ fl_set_browser_rel_yoffset(pObject, val)

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_rel_yoffset = cfuncproto(
            load_so_libforms(), "fl_set_browser_rel_yoffset",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_browser_rel_yoffset(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_browser_rel_yoffset(pObject, fval)


def fl_set_browser_scrollbarsize(pObject, hh, vw):
    """ fl_set_browser_scrollbarsize(pObject, hh, vw)

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_scrollbarsize = cfuncproto(
            load_so_libforms(), "fl_set_browser_scrollbarsize",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_browser_scrollbarsize(FL_OBJECT * ob,
               int hh, int vw)
            """)
    ihh = convert_to_int(hh)
    ivw = convert_to_int(vw)
    keep_elem_refs(pObject, hh, vw, ihh, ivw)
    _fl_set_browser_scrollbarsize(pObject, ihh, ivw)


def fl_show_browser_line(pObject, line):
    """ fl_show_browser_line(pObject, line)

        Bring a browser line into view.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)
        @param line: line to show

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_show_browser_line = cfuncproto(
            load_so_libforms(), "fl_show_browser_line",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_show_browser_line(FL_OBJECT * ob, int j)
            """)
    iline = convert_to_int(line)
    keep_elem_refs(pObject, line, iline)
    _fl_show_browser_line(pObject, iline)


# fl_set_default_browser_maxlinelength function placeholder (deprecated)


FL_BROWSER_SCROLL_CALLBACK = cty.CFUNCTYPE(None, cty.POINTER(xfc.FL_OBJECT),
                cty.c_int, cty.c_void_p)

def fl_set_browser_hscroll_callback(pObject, py_BrowserScrollCallback, vdata):
    """ fl_set_browser_hscroll_callback(pObject, py_BrowserScrollCallback, vdata)

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)
        @param py_BrowserScrollCallback: python function callback
        @type py_BrowserScrollCallback: fn(pObject, num, data)
        @param vdata: user data argument

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_browser_hscroll_callback = cfuncproto(
            load_so_libforms(), "fl_set_browser_hscroll_callback",
            None, [cty.POINTER(xfc.FL_OBJECT), FL_BROWSER_SCROLL_CALLBACK,
            cty.c_void_p],
            """void fl_set_browser_hscroll_callback(FL_OBJECT * ob,
               FL_BROWSER_SCROLL_CALLBACK cb, void * data)
            """)
    c_BrowserScrollCallback = FL_BROWSER_SCROLL_CALLBACK( \
                                py_BrowserScrollCallback)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_cfunc_refs(c_BrowserScrollCallback, py_BrowserScrollCallback)
    keep_elem_refs(pObject, vdata, pvdata)
    _fl_set_browser_hscroll_callback(pObject, c_BrowserScrollCallback, pvdata)


def fl_set_browser_vscroll_callback(pObject, py_BrowserScrollCallback, vdata):
    """ fl_set_browser_vscroll_callback(pObject, py_BrowserScrollCallback, vdata)

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)
        @param py_BrowserScrollCallback: python function callback
        @type py_BrowserScrollCallback: fn(pObject, num, data)
        @param vdata: user data argument

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_browser_vscroll_callback = cfuncproto(
            load_so_libforms(), "fl_set_browser_vscroll_callback",
            None, [cty.POINTER(xfc.FL_OBJECT), FL_BROWSER_SCROLL_CALLBACK,
            cty.c_void_p],
            """void fl_set_browser_vscroll_callback(FL_OBJECT * ob,
               FL_BROWSER_SCROLL_CALLBACK cb, void * data)
            """)
    c_BrowserScrollCallback = FL_BROWSER_SCROLL_CALLBACK( \
                                py_BrowserScrollCallback)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_cfunc_refs(c_BrowserScrollCallback, py_BrowserScrollCallback)
    keep_elem_refs(pObject, vdata, pvdata)
    _fl_set_browser_vscroll_callback(pObject, c_BrowserScrollCallback, pvdata)


def fl_get_browser_line_yoffset(pObject, line):
    """ fl_get_browser_line_yoffset(pObject, line) -> num.

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_line_yoffset = cfuncproto(
            load_so_libforms(), "fl_get_browser_line_yoffset",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """int fl_get_browser_line_yoffset(FL_OBJECT * obj, int line)
            """)
    iline = convert_to_int(line)
    keep_elem_refs(pObject, line, iline)
    retval = _fl_get_browser_line_yoffset(pObject, iline)
    return retval


def fl_get_browser_hscroll_callback(pObject):
    """ fl_get_browser_hscroll_callback(pObject) -> callback

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_hscroll_callback = cfuncproto(
            load_so_libforms(), "fl_get_browser_hscroll_callback",
            FL_BROWSER_SCROLL_CALLBACK, [cty.POINTER(xfc.FL_OBJECT)],
            """FL_BROWSER_SCROLL_CALLBACK fl_get_browser_hscroll_callback(
               FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_hscroll_callback(pObject)
    return retval


def fl_get_browser_vscroll_callback(pObject):
    """ fl_get_browser_vscroll_callback(pObject) -> callback

        @param pObject: pointer to browser object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_browser_vscroll_callback = cfuncproto(
            load_so_libforms(), "fl_get_browser_vscroll_callback",
            FL_BROWSER_SCROLL_CALLBACK, [cty.POINTER(xfc.FL_OBJECT)],
            """FL_BROWSER_SCROLL_CALLBACK fl_get_browser_vscroll_callback(
               FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_browser_vscroll_callback(pObject)
    return retval



#############################################################
# forms.h (button.h)
# All Buttons: regular button, light button and round button
#############################################################

# Routines

# fl_create_button function placeholder (internal)

# fl_create_roundbutton function placeholder (internal)

# fl_create_round3dbutton function placeholder (internal)

# fl_create_lightbutton function placeholder (internal)

# fl_create_checkbutton function placeholder (internal)

# fl_create_bitmapbutton function placeholder (internal)

# fl_create_pixmapbutton function placeholder (internal)

# fl_create_scrollbutton function placeholder (internal)

# fl_create_labelbutton function placeholder (internal)


def fl_add_roundbutton(buttontype, x, y, w, h, label):
    """ fl_add_roundbutton(buttontype, x, y, w, h, label) -> pObject

        Adds a roundbutton object.

        @param buttontype: type of button object to be added
        @type buttontype: [num./int] from xfdata module FL_NORMAL_BUTTON,
                          FL_PUSH_BUTTON, FL_RADIO_BUTTON, FL_HIDDEN_BUTTON,
                          FL_TOUCH_BUTTON, FL_INOUT_BUTTON, FL_RETURN_BUTTON,
                          FL_HIDDEN_RET_BUTTON, FL_MENU_BUTTON,
                          FL_TOGGLE_BUTTON
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of button

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_roundbutton = cfuncproto(
            load_so_libforms(), "fl_add_roundbutton",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_roundbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, xfc.BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_roundbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_round3dbutton(buttontype, x, y, w, h, label):
    """ fl_add_round3dbutton(buttontype, x, y, w, h, label) -> pObject

        Adds a 3D roundbutton object.

        @param buttontype: type of button object to be added
        @type buttontype: [num./int] from xfdata module FL_NORMAL_BUTTON,
                          FL_PUSH_BUTTON, FL_RADIO_BUTTON, FL_HIDDEN_BUTTON,
                          FL_TOUCH_BUTTON, FL_INOUT_BUTTON, FL_RETURN_BUTTON,
                          FL_HIDDEN_RET_BUTTON, FL_MENU_BUTTON,
                          FL_TOGGLE_BUTTON
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of button

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_round3dbutton = cfuncproto(
            load_so_libforms(), "fl_add_round3dbutton",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_round3dbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, xfc.BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_round3dbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_lightbutton(buttontype, x, y, w, h, label):
    """ fl_add_lightbutton(buttontype, x, y, w, h, label) -> pObject

        Adds a lightbutton object (with an on/off light switch).

        @param buttontype: type of button to be added
        @type buttontype: [num./int] xfc.FL_NORMAL_BUTTON, xfc.FL_PUSH_BUTTON,
                          xfc.FL_RADIO_BUTTON, xfc.FL_HIDDEN_BUTTON,
                          xfc.FL_TOUCH_BUTTON, xfc.FL_INOUT_BUTTON,
                          xfc.FL_RETURN_BUTTON, xfc.FL_HIDDEN_RET_BUTTON,
                          xfc.FL_MENU_BUTTON, xfc.FL_TOGGLE_BUTTON
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of button

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_lightbutton = cfuncproto(
            load_so_libforms(), "fl_add_lightbutton",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_lightbutton(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, xfc.BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_lightbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_checkbutton(buttontype, x, y, w, h, label):
    """ fl_add_checkbutton(buttontype, x, y, w, h, label) -> pObject

        Adds a checkbutton object.

        @param buttontype: type of button object to be added
        @type buttontype: [num./int] xfc.FL_NORMAL_BUTTON, xfc.FL_PUSH_BUTTON,
                          xfc.FL_RADIO_BUTTON, xfc.FL_HIDDEN_BUTTON,
                          xfc.FL_TOUCH_BUTTON, xfc.FL_INOUT_BUTTON,
                          xfc.FL_RETURN_BUTTON, xfc.FL_HIDDEN_RET_BUTTON,
                          xfc.FL_MENU_BUTTON, xfc.FL_TOGGLE_BUTTON
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of button

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_checkbutton = cfuncproto(
            load_so_libforms(), "fl_add_checkbutton",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_checkbutton(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, xfc.BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_checkbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_button(buttontype, x, y, w, h, label):
    """ fl_add_button(buttontype, x, y, w, h, label) -> pObject

        Adds a button object to the current form.

        @param buttontype: type of button to be added
        @type buttontype: [num./int] xfc.FL_NORMAL_BUTTON, xfc.FL_PUSH_BUTTON,
                          xfc.FL_RADIO_BUTTON, xfc.FL_HIDDEN_BUTTON,
                          xfc.FL_TOUCH_BUTTON, xfc.FL_INOUT_BUTTON,
                          xfc.FL_RETURN_BUTTON, xfc.FL_HIDDEN_RET_BUTTON,
                          xfc.FL_MENU_BUTTON, xfc.FL_TOGGLE_BUTTON
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of button

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_button = cfuncproto(
            load_so_libforms(), "fl_add_button",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_button(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, xfc.BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_button(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_bitmapbutton(buttontype, x, y, w, h, label):
    """ fl_add_bitmapbutton(buttontype, x, y, w, h, label) -> pObject

        Adds a bitmapbutton object.

        @param buttontype: type of button to be added
        @type buttontype: [num./int] xfc.FL_NORMAL_BUTTON, xfc.FL_PUSH_BUTTON,
                          xfc.FL_RADIO_BUTTON, xfc.FL_HIDDEN_BUTTON,
                          xfc.FL_TOUCH_BUTTON, xfc.FL_INOUT_BUTTON,
                          xfc.FL_RETURN_BUTTON, xfc.FL_HIDDEN_RET_BUTTON,
                          xfc.FL_MENU_BUTTON, xfc.FL_TOGGLE_BUTTON
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of button

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_bitmapbutton = cfuncproto(
            load_so_libforms(), "fl_add_bitmapbutton",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_bitmapbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, xfc.BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_bitmapbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_scrollbutton(buttontype, x, y, w, h, label):
    """ fl_add_scrollbutton(buttontype, x, y, w, h, label) -> pObject

        Adds a scrollbutton object.

        @param buttontype: type of button to be added
        @type buttontype: [num./int] xfc.FL_NORMAL_BUTTON, xfc.FL_PUSH_BUTTON,
                          xfc.FL_RADIO_BUTTON, xfc.FL_HIDDEN_BUTTON,
                          xfc.FL_TOUCH_BUTTON, xfc.FL_INOUT_BUTTON,
                          xfc.FL_RETURN_BUTTON, xfc.FL_HIDDEN_RET_BUTTON,
                          xfc.FL_MENU_BUTTON, xfc.FL_TOGGLE_BUTTON
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of button

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_scrollbutton = cfuncproto(
            load_so_libforms(), "fl_add_scrollbutton",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_scrollbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, xfc.BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_scrollbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_labelbutton(buttontype, x, y, w, h, label):
    """ fl_add_labelbutton(buttontype, x, y, w, h, label) -> pObject

        Adds a labelbutton object.

        @param buttontype: type of button to be added
        @type buttontype: [num./int] xfc.FL_NORMAL_BUTTON, xfc.FL_PUSH_BUTTON,
                          xfc.FL_RADIO_BUTTON, xfc.FL_HIDDEN_BUTTON,
                          xfc.FL_TOUCH_BUTTON, xfc.FL_INOUT_BUTTON,
                          xfc.FL_RETURN_BUTTON, xfc.FL_HIDDEN_RET_BUTTON,
                          xfc.FL_MENU_BUTTON, xfc.FL_TOGGLE_BUTTON
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of button

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_labelbutton = cfuncproto(
            load_so_libforms(), "fl_add_labelbutton",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_labelbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, xfc.BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_labelbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_bitmapbutton_data(pObject, w, h, bits):
    """ fl_set_bitmapbutton_data(pObject, w, h, bits)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_bitmapbutton_data = cfuncproto(
            load_so_libforms(), "fl_set_bitmapbutton_data",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int,
            cty.POINTER(cty.c_ubyte)],
            """void fl_set_bitmapbutton_data(FL_OBJECT * ob, int w, int h,
               unsigned char * bits)
            """)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    pbits = cty.cast(bits, cty.POINTER(cty.c_ubyte))
    keep_elem_refs(pObject, w, h, bits, iw, ih, pbits)
    _fl_set_bitmapbutton_data(pObject, iw, ih, pbits)




def fl_add_pixmapbutton(buttontype, x, y, w, h, label):
    """ fl_add_pixmapbutton(buttontype, x, y, w, h, label) -> pObject

        Adds a pixmapbutton object.

        @param buttontype: type of button to be added
        @type buttontype: [num./int] xfc.FL_NORMAL_BUTTON, xfc.FL_PUSH_BUTTON,
                          xfc.FL_RADIO_BUTTON, xfc.FL_HIDDEN_BUTTON,
                          xfc.FL_TOUCH_BUTTON, xfc.FL_INOUT_BUTTON,
                          xfc.FL_RETURN_BUTTON, xfc.FL_HIDDEN_RET_BUTTON,
                          xfc.FL_MENU_BUTTON, xfc.FL_TOGGLE_BUTTON
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of button

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_pixmapbutton = cfuncproto(
            load_so_libforms(), "fl_add_pixmapbutton",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_pixmapbutton(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(buttontype, xfc.BUTTONTYPE_list)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_pixmapbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_pixmapbutton_focus_outline(pObject, yes):
    """ fl_set_pixmapbutton_focus_outline(pObject, yes)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_pixmapbutton_focus_outline = cfuncproto(
            load_so_libforms(), "fl_set_pixmapbutton_focus_outline",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_pixmapbutton_focus_outline(FL_OBJECT * ob, int yes)
            """)
    iyes = convert_to_int(yes)
    keep_elem_refs(pObject, yes, iyes)
    _fl_set_pixmapbutton_focus_outline(pObject, iyes)


fl_set_pixmapbutton_data = fl_set_pixmap_data
fl_set_pixmapbutton_show_focus = fl_set_pixmapbutton_focus_outline



def fl_set_pixmapbutton_focus_data(pObject, bits):
    """ fl_set_pixmapbutton_focus_data(pObject, bits)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_pixmapbutton_focus_data = cfuncproto(
            load_so_libforms(), "fl_set_pixmapbutton_focus_data",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.STRING)],
            """void fl_set_pixmapbutton_focus_data(FL_OBJECT * ob,
               char * * bits)
            """)
    keep_elem_refs(pObject, bits)
    _fl_set_pixmapbutton_focus_data(pObject, bits)


def fl_set_pixmapbutton_focus_file(pObject, fname):
    """ fl_set_pixmapbutton_focus_file(pObject, fname)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_pixmapbutton_focus_file = cfuncproto(
            load_so_libforms(), "fl_set_pixmapbutton_focus_file",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING],
            """void fl_set_pixmapbutton_focus_file(FL_OBJECT * ob,
               const char * fname)
            """)
    sfname = convert_to_string(fname)
    keep_elem_refs(pObject, fname, sfname)
    _fl_set_pixmapbutton_focus_file(pObject, sfname)


def fl_set_pixmapbutton_focus_pixmap(pObject, idnum, mask):
    """ fl_set_pixmapbutton_focus_pixmap(pObject, idnum, mask)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_pixmapbutton_focus_pixmap = cfuncproto(
            load_so_libforms(), "fl_set_pixmapbutton_focus_pixmap",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.Pixmap, xfc.Pixmap],
            """void fl_set_pixmapbutton_focus_pixmap(FL_OBJECT * ob,
               Pixmap id, Pixmap mask)
            """)
    ulidnum = convert_to_ulong(idnum)
    ulmask = convert_to_ulong(mask)
    keep_elem_refs(pObject, idnum, mask, ulidnum, ulmask)
    _fl_set_pixmapbutton_focus_pixmap(pObject, ulidnum, ulmask)


def fl_get_button(pObject):
    """ fl_get_button(pObject) -> num.

        Returns the value of the button.

        @param pObject: pointer to button object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_button = cfuncproto(
            load_so_libforms(), "fl_get_button",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_button(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_button(pObject)
    return retval


def fl_set_button(pObject, pushed):
    """ fl_set_button(pObject, pushed)

        Sets the button state (not pushed/pushed).

        @param pObject: pointer to button object
                (<pointer to xfdata.FL_OBJECT>)
        @param pushed: state of button to be set (0|1)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_button = cfuncproto(
            load_so_libforms(), "fl_set_button",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_button(FL_OBJECT * ob, int pushed)
            """)
    ipushed = convert_to_int(pushed)
    keep_elem_refs(pObject, pushed, ipushed)
    _fl_set_button(pObject, ipushed)


def fl_get_button_numb(pObject):
    """ fl_get_button_numb(pObject) -> num.

        Returns the number of the last used mouse button. fl_mouse_button
        function will also return the mouse number.

        @param pObject: pointer to button object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_button_numb = cfuncproto(
            load_so_libforms(), "fl_get_button_numb",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_button_numb(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_button_numb(pObject)
    return retval


fl_set_button_shortcut = fl_set_object_shortcut


def fl_create_generic_button(btnclass, buttontype, x, y, w, h, label):
    """ fl_create_generic_button(btnclass, buttontype, x, y, w, h, label) -> pObject

        Creates a generic button object.

        @param btnclass: value of a new button class
        @param buttontype: type of button to be created
        @type buttontype: [num./int] xfc.FL_NORMAL_BUTTON, xfc.FL_PUSH_BUTTON,
                          xfc.FL_RADIO_BUTTON, xfc.FL_HIDDEN_BUTTON,
                          xfc.FL_TOUCH_BUTTON, xfc.FL_INOUT_BUTTON,
                          xfc.FL_RETURN_BUTTON, xfc.FL_HIDDEN_RET_BUTTON,
                          xfc.FL_MENU_BUTTON, xfc.FL_TOGGLE_BUTTON
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of button

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_create_generic_button = cfuncproto(
            load_so_libforms(), "fl_create_generic_button",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_create_generic_button(int objclass, int type,
               FL_Coord x, FL_Coord y, FL_Coord w, FL_Coord h,
               const char * label)
            """)
    check_admitted_listvalues(buttontype, xfc.BUTTONTYPE_list)
    ibtnclass = convert_to_int(btnclass)
    ibuttontype = convert_to_int(buttontype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(btnclass, buttontype, x, y, w, h, label, ibtnclass,
                   ibuttontype, ix, iy, iw, ih, slabel)
    retval = _fl_create_generic_button(ibtnclass, ibuttontype, ix, iy,
                                       iw, ih, slabel)
    return retval


FL_DrawButton = cty.CFUNCTYPE(None, cty.POINTER(xfc.FL_OBJECT))
FL_CleanupButton = cty.CFUNCTYPE(None, cty.POINTER(xfc.FL_BUTTON_SPEC))

FL_DRAWBUTTON = FL_DrawButton
FL_CLEANUPBUTTON = FL_CleanupButton

def fl_add_button_class(btnclass, py_DrawButton, py_CleanupButton):
    """ fl_add_button_class(btnclass, py_DrawButton, py_CleanupButton)

        Associates a button class with a drawing function.

        @param btnclass: value of a new button class
        @param py_DrawButton: python function to draw button
        @type py_DrawButton: fn(pObject)
        @param py_CleanupButton: python function to cleanup button
        @type py_CleanupButton: fn(pButtonSpec)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_button_class = cfuncproto(
            load_so_libforms(), "fl_add_button_class",
            None, [cty.c_int, FL_DrawButton, FL_CleanupButton],
            """void fl_add_button_class(int bclass, FL_DrawButton drawit,
               FL_CleanupButton cleanup)
            """)
    ibtnclass = convert_to_int(btnclass)
    c_DrawButton = FL_DrawButton(py_DrawButton)
    c_CleanupButton = FL_CleanupButton(py_CleanupButton)
    keep_cfunc_refs(c_DrawButton, py_DrawButton, c_CleanupButton,
                    py_CleanupButton)
    keep_elem_refs(btnclass, ibtnclass)
    _fl_add_button_class(ibtnclass, c_DrawButton, c_CleanupButton)


def fl_set_button_mouse_buttons(pObject, buttons):
    """ fl_set_button_mouse_buttons(pObject, buttons)

        Function allows to set up to which mouse buttons the button object
        will react.

        @param pObject: pointer to button object
                (<pointer to xfdata.FL_OBJECT>)
        @param buttons: value of mouse buttons to be set

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_button_mouse_buttons = cfuncproto(
            load_so_libforms(), "fl_set_button_mouse_buttons",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_uint],
            """void fl_set_button_mouse_buttons(FL_OBJECT * ob,
               unsigned int buttons)
            """)
    ibuttons = convert_to_int(buttons)
    keep_elem_refs(pObject, buttons, ibuttons)
    _fl_set_button_mouse_buttons(pObject, ibuttons)


def fl_get_button_mouse_buttons(pObject):
    """ fl_get_button_mouse_buttons(pObject) -> buttons value

        Returns a value indicating which mouse buttons the button object
        will react to.

        @param pObject: pointer to button object
                (<pointer to xfdata.FL_OBJECT>)

        @attention: API change from XForms - upstream was
                    fl_get_button_mouse_buttons(pObject, buttons)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_button_mouse_buttons = cfuncproto(
            load_so_libforms(), "fl_get_button_mouse_buttons",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_uint)],
            """void fl_get_button_mouse_buttons(FL_OBJECT * ob,
               unsigned int * buttons)
            """)
    buttons, pbuttons = make_uint_and_pointer()
    keep_elem_refs(pObject, buttons, pbuttons)
    _fl_get_button_mouse_buttons(pObject, pbuttons)
    return buttons


#######################
# forms.h (canvas.h)
# Header for FL_CANVAS
#######################

# Interfaces

def fl_create_generic_canvas(canvasclass, canvastype, x, y, w, h, label):
    """ fl_create_generic_canvas(canvasclass, canvastype, x, y, w, h, label) -> pObject

        Creates a generic canvas object.

        @param canvasclass: value of a new canvas class
        @param canvastype: type of canvas to be created
        @type canvastype: [num./int] xfc.FL_NORMAL_CANVAS,
                          xfc.FL_SCROLLED_CANVAS
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of canvas

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_create_generic_canvas = cfuncproto(
            load_so_libforms(), "fl_create_generic_canvas",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_create_generic_canvas(int canvas_class,
               int type, FL_Coord x, FL_Coord y, FL_Coord w, FL_Coord h,
               const char * label)
            """)
    check_admitted_listvalues(canvastype, xfc.CANVASTYPE_list)
    icanvasclass = convert_to_int(canvasclass)
    icanvastype = convert_to_int(canvastype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(canvasclass, canvastype, x, y, w, h, label, icanvasclass,
                   icanvastype, ix, iy, iw, ih, slabel)
    retval = _fl_create_generic_canvas(icanvasclass, icanvastype, ix, iy, iw, ih,
                                  slabel)
    return retval


def fl_add_canvas(canvastype, x, y, w, h, label):
    """ fl_add_canvas(canvastype, x, y, w, h, label) -> pObject

        Adds a canvas object.

        @param canvastype: type of canvas to be added
        @type canvastype: [num./int] xfc.FL_NORMAL_CANVAS,
                          xfc.FL_SCROLLED_CANVAS
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of canvas

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_canvas = cfuncproto(
            load_so_libforms(), "fl_add_canvas",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_canvas(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(canvastype, xfc.CANVASTYPE_list)
    icanvastype = convert_to_int(canvastype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(canvastype, x, y, w, h, label, icanvastype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_canvas(icanvastype, ix, iy, iw, ih, slabel)
    return retval


# fl_create_canvas function placeholder (internal)

# fl_set_canvas_decoration placeholder (backwards)


def fl_set_canvas_colormap(pObject, colormap):
    """ fl_set_canvas_colormap(pObject, colormap)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_canvas_colormap = cfuncproto(
            load_so_libforms(), "fl_set_canvas_colormap",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.Colormap],
            """void fl_set_canvas_colormap(FL_OBJECT * ob, Colormap colormap)
            """)
    ulcolormap = convert_to_ulong(colormap)
    keep_elem_refs(pObject, colormap, ulcolormap)
    _fl_set_canvas_colormap(pObject, ulcolormap)


def fl_set_canvas_visual(pObject, pVisual):
    """ fl_set_canvas_visual(pObject, pVisual)

        @param pObject: pointer to canvas object
                (<pointer to xfdata.FL_OBJECT>)
        @param pVisual: pointer to Visual class instance

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_canvas_visual = cfuncproto(
            load_so_libforms(), "fl_set_canvas_visual",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.Visual)],
            """void fl_set_canvas_visual(FL_OBJECT * obj, Visual * vi)
            """)
    keep_elem_refs(pObject, pVisual)
    _fl_set_canvas_visual(pObject, pVisual)


def fl_set_canvas_depth(pObject, depth):
    """ fl_set_canvas_depth(pObject, depth)

        @param pObject: pointer to canvas object
                (<pointer to xfdata.FL_OBJECT>)
        @param depth: depth value of canvas

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_canvas_depth = cfuncproto(
            load_so_libforms(), "fl_set_canvas_depth",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_canvas_depth(FL_OBJECT * obj, int depth)
            """)
    idepth = convert_to_int(depth)
    keep_elem_refs(pObject, depth, idepth)
    _fl_set_canvas_depth(pObject, idepth)


def fl_set_canvas_attributes(pObject, mask, pXSetWindowAttributes):
    """ fl_set_canvas_attributes(pObject, mask, pXSetWindowAttributes)

        @param pObject: pointer to canvas object
                (<pointer to xfdata.FL_OBJECT>)
        @param mask: mask num.
        @param pXSetWindowAttributes: pointer to XSetWindowAttributes

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_canvas_attributes = cfuncproto(
            load_so_libforms(), "fl_set_canvas_attributes",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_uint,
            cty.POINTER(xfc.XSetWindowAttributes)],
            """void fl_set_canvas_attributes(FL_OBJECT * ob,
               unsigned int mask, XSetWindowAttributes * xswa)
            """)
    uimask = convert_to_uint(mask)
    keep_elem_refs(pObject, mask, pXSetWindowAttributes, uimask)
    _fl_set_canvas_attributes(pObject, uimask, pXSetWindowAttributes)


FL_HANDLE_CANVAS = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfc.FL_OBJECT),
                                 xfc.Window, cty.c_int, cty.c_int,
                                 cty.POINTER(xfc.XEvent), cty.c_void_p)

def fl_add_canvas_handler(pObject, ev, py_HandleCanvas, udata):
    """ fl_add_canvas_handler(pObject, ev, py_HandleCanvas, udata) -> canvas handler

        @param pObject: pointer to canvas object
                (<pointer to xfdata.FL_OBJECT>)
        @param ev: event number
        @param py_HandleCanvas: python function to handle canvas
        @type py_HandleCanvas: fn(pObject, win, num, num, pXEvent,
                               ptr_void) -> num

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_canvas_handler = cfuncproto(
            load_so_libforms(), "fl_add_canvas_handler",
            FL_HANDLE_CANVAS, [cty.POINTER(xfc.FL_OBJECT), cty.c_int,
            FL_HANDLE_CANVAS, cty.c_void_p],
            """FL_HANDLE_CANVAS fl_add_canvas_handler(FL_OBJECT * ob, int ev,
               FL_HANDLE_CANVAS h, void * udata)
            """)
    iev = convert_to_int(ev)
    c_HandleCanvas = FL_HANDLE_CANVAS(py_HandleCanvas)
    pudata = cty.cast(udata, cty.c_void_p)
    keep_cfunc_refs(c_HandleCanvas, py_HandleCanvas)
    keep_elem_refs(pObject, ev, udata, iev, pudata)
    retval = _fl_add_canvas_handler(pObject, iev, c_HandleCanvas, pudata)
    return retval


def fl_get_canvas_id(pObject):
    """ fl_get_canvas_id(pObject) -> window

        Returns the window ID of the canvas window.

        @param pObject: pointer to canvas object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_canvas_id = cfuncproto(
            load_so_libforms(), "fl_get_canvas_id",
            xfc.Window, [cty.POINTER(xfc.FL_OBJECT)],
            """Window fl_get_canvas_id(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_canvas_id(pObject)
    return retval


def fl_get_canvas_colormap(pObject):
    """ fl_get_canvas_colormap(pObject) -> colormap

        Returns the colormap of a canas object

        @param pObject: pointer to canvas object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_canvas_colormap = cfuncproto(
            load_so_libforms(), "fl_get_canvas_colormap",
            xfc.Colormap, [cty.POINTER(xfc.FL_OBJECT)],
            """Colormap fl_get_canvas_colormap(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_canvas_colormap(pObject)
    return retval


def fl_get_canvas_depth(pObject):
    """ fl_get_canvas_depth(pObject) -> depth num.

        Returns the depth of a canvas object.

        @param pObject: pointer to canvas object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_canvas_depth = cfuncproto(
            load_so_libforms(), "fl_get_canvas_depth",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_canvas_depth(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_canvas_depth(pObject)
    return retval


def fl_remove_canvas_handler(pObject, ev, py_HandleCanvas):
    """ fl_remove_canvas_handler(pObject, ev, py_HandleCanvas)

        Remove a particular handler for event ev. If ev is invalid, removes
        all handlers and their corresponding event mask.

        @param pObject: pointer to canvas object
                (<pointer to xfdata.FL_OBJECT>)
        @param ev: event number
        @param py_HandleCanvas: python function to handle canvas
        @type py_HandleCanvas: fn(pObject, win, num, num, pXEvent,
                               ptr_void) -> num

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_remove_canvas_handler = cfuncproto(
            load_so_libforms(), "fl_remove_canvas_handler",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, FL_HANDLE_CANVAS],
            """void fl_remove_canvas_handler(FL_OBJECT * ob, int ev,
               FL_HANDLE_CANVAS h)
            """)
    iev = convert_to_int(ev)
    c_HandleCanvas = FL_HANDLE_CANVAS(py_HandleCanvas)
    keep_cfunc_refs(c_HandleCanvas, py_HandleCanvas)
    keep_elem_refs(pObject, ev, iev)
    _fl_remove_canvas_handler(pObject, iev, c_HandleCanvas)


def fl_hide_canvas(pObject):
    """ fl_hide_canvas(pObject)

        Hides a canvas object.

        @param pObject: pointer to canvas object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_hide_canvas = cfuncproto(
            load_so_libforms(), "fl_hide_canvas",
            None, [cty.POINTER(xfc.FL_OBJECT)],
            """void fl_hide_canvas(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_hide_canvas(pObject)


def fl_share_canvas_colormap(pObject, colormap):
    """ fl_share_canvas_colormap(pObject, colormap)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_share_canvas_colormap = cfuncproto(
            load_so_libforms(), "fl_share_canvas_colormap",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.Colormap],
            """void fl_share_canvas_colormap(FL_OBJECT * ob, Colormap colormap)
            """)
    ulcolormap = convert_to_ulong(colormap)
    keep_elem_refs(pObject, colormap, ulcolormap)
    _fl_share_canvas_colormap(pObject, ulcolormap)


def fl_clear_canvas(pObject):
    """ fl_clear_canvas(pObject)

        Clears the canvas to the background color. If no background is
        defined uses black.

        @param pObject: pointer to canvas object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_clear_canvas = cfuncproto(
            load_so_libforms(), "fl_clear_canvas",
            None, [cty.POINTER(xfc.FL_OBJECT)],
            """void fl_clear_canvas(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_clear_canvas(pObject)


FL_MODIFY_CANVAS_PROP = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfc.FL_OBJECT))

def fl_modify_canvas_prop(pObject, py_initModifyCanvasProp,
     py_activateModifyCanvasProp, py_cleanupModifyCanvasProp):
    """ fl_modify_canvas_prop(pObject, py_initModifyCanvasProp,
        py_activateModifyCanvasProp, py_cleanupModifyCanvasProp)

        @param pObject: pointer to canvas object
                (<pointer to xfdata.FL_OBJECT>)
        @param py_initModifyCanvasProp: python function callback,
                                        returning value
        @param py_initModifyCanvasProp: fn(pObject) -> num.
        @param py_activateModifyCanvasProp: python function callback,
                                            returning value
        @param py_activateModifyCanvasProp: fn(pObject) -> num.
        @param py_cleanupModifyCanvasProp: python function callback,
                                           returning value
        @param py_cleanupModifyCanvasProp: fn(pObject) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_modify_canvas_prop = cfuncproto(
            load_so_libforms(), "fl_modify_canvas_prop",
            None, [cty.POINTER(xfc.FL_OBJECT), FL_MODIFY_CANVAS_PROP,
            FL_MODIFY_CANVAS_PROP, FL_MODIFY_CANVAS_PROP],
            """void fl_modify_canvas_prop(FL_OBJECT * obj,
               FL_MODIFY_CANVAS_PROP init, FL_MODIFY_CANVAS_PROP activate,
               FL_MODIFY_CANVAS_PROP cleanup)
            """)
    c_initModifyCanvasProp = FL_MODIFY_CANVAS_PROP(py_initModifyCanvasProp)
    c_activateModifyCanvasProp = FL_MODIFY_CANVAS_PROP( \
                py_activateModifyCanvasProp)
    c_cleanupModifyCanvasProp = FL_MODIFY_CANVAS_PROP( \
                py_cleanupModifyCanvasProp)
    keep_cfunc_refs(c_initModifyCanvasProp, py_initModifyCanvasProp, \
                c_activateModifyCanvasProp, py_activateModifyCanvasProp, \
                c_cleanupModifyCanvasProp, py_cleanupModifyCanvasProp)
    keep_elem_refs(pObject)
    _fl_modify_canvas_prop(pObject, c_initModifyCanvasProp,
                    c_activateModifyCanvasProp, c_cleanupModifyCanvasProp)


def fl_canvas_yield_to_shortcut(pObject, yes):
    """ fl_canvas_yield_to_shortcut(pObject, yes)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_canvas_yield_to_shortcut = cfuncproto(
            load_so_libforms(), "fl_canvas_yield_to_shortcut",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_canvas_yield_to_shortcut(FL_OBJECT * ob, int yes)
            """)
    iyes = convert_to_int(yes)
    keep_elem_refs(pObject, yes, iyes)
    _fl_canvas_yield_to_shortcut(pObject, iyes)



#############
# glcanvas.h
#############

# This is an attempt to maintain some sort of backwards compatibility
# with old code whilst also getting rid of the old, system-specific
# hack.

# OpenGL canvases

# fl_create_glcanvas function placeholder (internal)


def fl_add_glcanvas(canvastype, x, y, w, h, label):
    """ fl_add_glcanvas(canvastype, x, y, w, h, label) -> pObject

        Adds a glcanvas object to the form.

        @param canvastype: type of glcanvas to be added
        @type canvastype: [num./int] from xfdata FL_NORMAL_CANVAS,
                          FL_SCROLLED_CANVAS (not enabled)
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of glcanvas

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_glcanvas = cfuncproto(
            load_so_libformsgl(), "fl_add_glcanvas",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_glcanvas(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(canvastype, xfc.CANVASTYPE_list)
    icanvastype = convert_to_int(canvastype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(canvastype, x, y, w, h, label, icanvastype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_glcanvas(icanvastype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_glcanvas_defaults(config):
    """ fl_set_glcanvas_defaults(config)

        Modifies the global defaults for glcanvas.

        @param config: configuration settings

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_glcanvas_defaults = cfuncproto(
            load_so_libformsgl(), "fl_set_glcanvas_defaults",
            None, [cty.POINTER(cty.c_int)],
            """void fl_set_glcanvas_defaults(const int * config):
            """)
    pconfig = cty.cast(config, cty.POINTER(cty.c_int))
    keep_elem_refs(config, pconfig)
    _fl_set_glcanvas_defaults(pconfig)


def fl_get_glcanvas_defaults():
    """ fl_get_glcanvas_defaults() -> configuration settings

        Returns the global defaults for glcanvas.

        @attention: API change from XForms - upstream was
           fl_get_glcanvas_defaults(config)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_glcanvas_defaults = cfuncproto(
            load_so_libformsgl(), "fl_get_glcanvas_defaults",
            None, [cty.c_int],
            """void fl_get_glcanvas_defaults(int config[ ]):
            """)
    config, pconfig = make_int_and_pointer()
    keep_elem_refs(config, pconfig)
    _fl_get_glcanvas_defaults(pconfig)
    return config


def fl_set_glcanvas_attributes(pObject, config):
    """ fl_set_glcanvas_attributes(pObject, config)

        Modifies the default configuration of a particular glcanvas
        object.

        @param pObject: pointer to glcanvas object
                (<pointer to xfdata.FL_OBJECT>)
        @param config: configuration settings to be set

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_glcanvas_attributes = cfuncproto(
            load_so_libformsgl(), "fl_set_glcanvas_attributes",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_int)],
            """void fl_set_glcanvas_attributes(FL_OBJECT * ob,
               const int * config)
            """)
    pconfig = cty.cast(config, cty.POINTER(cty.c_int))
    keep_elem_refs(pObject, config, pconfig)
    _fl_set_glcanvas_attributes(pObject, pconfig)


def fl_get_glcanvas_attributes(pObject):
    """ fl_get_glcanvas_attributes(pObject) -> attributes

        Returns the attributes of a glcanvas object.

        @param pObject: pointer to glcanvas object
                (<pointer to xfdata.FL_OBJECT>)

        @attention: API change from XForms - upstream was
                    fl_get_glcanvas_attributes(pObject, attributes)
    """

    _fl_get_glcanvas_attributes = cfuncproto(
            load_so_libformsgl(), "fl_get_glcanvas_attributes",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_int)],
            """void fl_get_glcanvas_attributes(FL_OBJECT * ob,
               int * attributes)
            """)
    attributes, pattributes = make_int_and_pointer()
    keep_elem_refs(pObject, attributes, pattributes)
    _fl_get_glcanvas_attributes(pObject, pattributes)
    return attributes


def fl_set_glcanvas_direct(pObject, direct):
    """ fl_set_glcanvas_direct(pObject, direct)

        @param pObject: pointer to glcanvas object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_glcanvas_direct = cfuncproto(
            load_so_libformsgl(), "fl_set_glcanvas_direct",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_glcanvas_direct(FL_OBJECT * ob, int direct)
            """)
    idirect = convert_to_int(direct)
    keep_elem_refs(pObject, direct, idirect)
    _fl_set_glcanvas_direct(pObject, idirect)


def fl_activate_glcanvas(pObject):
    """ fl_activate_glcanvas(pObject)

        Activates a glcanvas object, allowing user interaction.

        @param pObject: pointer to glcanvas object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_activate_glcanvas = cfuncproto(
            load_so_libformsgl(), "fl_activate_glcanvas",
            None, [cty.POINTER(xfc.FL_OBJECT)],
            """void fl_activate_glcanvas(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_activate_glcanvas(pObject)


def fl_get_glcanvas_xvisualinfo(pObject):
    """ fl_get_glcanvas_xvisualinfo(pObject) -> xvisualinfo class

        Returns XVisualInfo strust of a glcanvas object.

        @param pObject: pointer to glcanvas object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_glcanvas_xvisualinfo = cfuncproto(
            load_so_libformsgl(), "fl_get_glcanvas_xvisualinfo",
            cty.POINTER(xfc.XVisualInfo), [cty.POINTER(xfc.FL_OBJECT)],
            """XVisualInfo * fl_get_glcanvas_xvisualinfo(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_glcanvas_xvisualinfo(pObject)
    return retval


def fl_get_glcanvas_context(pObject):
    """ fl_get_glcanvas_context(pObject) -> glxcontext class

        @param pObject: pointer to glcanvas object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_glcanvas_context = cfuncproto(
            load_so_libformsgl(), "fl_get_glcanvas_context",
            xfc.GLXContext, [cty.POINTER(xfc.FL_OBJECT)],
            """GLXContext fl_get_glcanvas_context(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_glcanvas_context(pObject)
    return retval


def fl_glwincreate(config, pGLXContext, w, h):
    """ fl_glwincreate(config, pGLXContext, w, h) -> window

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_glwincreate = cfuncproto(
            load_so_libformsgl(), "fl_glwincreate",
            xfc.Window, [cty.POINTER(cty.c_int), cty.POINTER(xfc.GLXContext),
            cty.c_int, cty.c_int],
            """Window fl_glwincreate(int * config, GLXContext * context,
               int w, int h)
            """)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    keep_elem_refs(config, pGLXContext, w, h, iw, ih)
    retval = _fl_glwincreate(config, pGLXContext, iw, ih)
    return retval


def fl_glwinopen(config, pGLXContext, w, h):
    """ fl_glwinopen(config, pGLXContext, w, h) -> window

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_glwinopen = cfuncproto(
            load_so_libformsgl(), "fl_glwinopen",
            xfc.Window, [cty.POINTER(cty.c_int), cty.POINTER(xfc.GLXContext),
            cty.c_int, cty.c_int],
            """Window fl_glwinopen(int * config, GLXContext * context,
               int w, int h
            """)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    keep_elem_refs(config, pGLXContext, w, h, iw, ih)
    retval = _fl_glwinopen(config, pGLXContext, iw, ih)
    return retval



#############################
# forms.h (chart.h)
# Object Class: Chart
#############################

# Routines

# fl_create_chart function placeholder (internal)


def fl_add_chart(charttype, x, y, w, h, label):
    """ fl_add_chart(charttype, x, y, w, h, label) -> pObject

        Adds a chart object.

        @param charttype: type of chart to be created
        @param charttype: [num./int] from xfdata module FL_BAR_CHART,
                          FL_HORBAR_CHART, FL_LINE_CHART, FL_FILL_CHART,
                          FL_SPIKE_CHART, FL_PIE_CHART, FL_SPECIALPIE_CHART
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of chart

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_chart = cfuncproto(
            load_so_libforms(), "fl_add_chart",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_chart(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(charttype, xfc.CHARTTYPE_list)
    icharttype = convert_to_int(charttype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(charttype, x, y, w, h, label, icharttype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_chart(icharttype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_chart(pObject):
    """ fl_clear_chart(pObject)

        Clears the contents of a chart.

        @param pObject: pointer to chart object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_clear_chart = cfuncproto(
            load_so_libforms(), "fl_clear_chart",
            None, [cty.POINTER(xfc.FL_OBJECT)],
            """void fl_clear_chart(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_clear_chart(pObject)


def fl_add_chart_value(pObject, val, label, colr):
    """ fl_add_chart_value(pObject, val, label, colr)

        Adds an item to the chart.

        @param pObject: pointer to chart object
                (<pointer to xfdata.FL_OBJECT>)
        @param val: value of chart item
        @param label: text label of chart object
        @param colr: color num.

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_chart_value = cfuncproto(
            load_so_libforms(), "fl_add_chart_value",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, xfc.STRING,
            xfc.FL_COLOR],
            """void fl_add_chart_value(FL_OBJECT * ob, double val,
               const char * str, FL_COLOR col)
            """)
    fval = convert_to_double(val)
    slabel = convert_to_string(label)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, val, label, colr, fval, slabel, ulcolr)
    _fl_add_chart_value(pObject, fval, slabel, ulcolr)


def fl_insert_chart_value(pObject, indx, val, label, colr):
    """ fl_insert_chart_value(pObject, indx, val, label, colr)

        Inserts an item before indx to the chart.

        @param pObject: pointer to chart object
                (<pointer to xfdata.FL_OBJECT>)
        @param indx: index position of previous item
        @param val: value of chart item
        @param label: text label of chart
        @param colr: color value

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_insert_chart_value = cfuncproto(
            load_so_libforms(), "fl_insert_chart_value",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_double,
            xfc.STRING, xfc.FL_COLOR],
            """void fl_insert_chart_value(FL_OBJECT * ob, int indx,
               double val, const char * str, FL_COLOR col)
            """)
    iindx = convert_to_int(indx)
    fval = convert_to_double(val)
    slabel = convert_to_string(label)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, indx, val, label, colr, iindx, fval,
                   slabel, ulcolr)
    _fl_insert_chart_value(pObject, iindx, fval, slabel, ulcolr)


def fl_replace_chart_value(pObject, indx, val, label, colr):
    """ fl_replace_chart_value(pObject, indx, val, label, colr)

        Replaces value in the chart.

        @param pObject: pointer to chart object
                (<pointer to xfdata.FL_OBJECT>)
        @param indx: index position of item to be replaced
        @param val: value of chart item
        @param label: text label of chart
        @param colr: color value

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_replace_chart_value = cfuncproto(
            load_so_libforms(), "fl_replace_chart_value",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_double,
            xfc.STRING, xfc.FL_COLOR],
            """void fl_replace_chart_value(FL_OBJECT * ob, int indx,
               double val, const char * str, FL_COLOR col)
            """)
    iindx = convert_to_int(indx)
    fval = convert_to_double(val)
    slabel = convert_to_string(label)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, indx, val, label, colr, iindx, fval,
                   slabel, ulcolr)
    _fl_replace_chart_value(pObject, iindx, fval, slabel, ulcolr)


def fl_set_chart_bounds(pObject, minbound, maxbound):
    """ fl_set_chart_bounds(pObject, minbound, maxbound)

        Sets the boundaries/limits for values of a chart object.

        @param pObject: pointer to chart object
                (<pointer to xfdata.FL_OBJECT>)
        @param minbound: minimum bounds to be set
        @param maxbound: maximum bounds to be set

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_chart_bounds = cfuncproto(
            load_so_libforms(), "fl_set_chart_bounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_chart_bounds(FL_OBJECT * ob, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_chart_bounds(pObject, fminbound, fmaxbound)


def fl_get_chart_bounds(pObject):
    """ fl_get_chart_bounds(pObject) -> minbound, maxbound

        Returns the boundaries/limits set for values of a chart object.

        @param pObject: pointer to chart object
                (<pointer to xfdata.FL_OBJECT>)

        @attention: API change from XForms - upstream was
                    fl_get_chart_bounds(pObject, minbound, maxbound)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_chart_bounds = cfuncproto(
            load_so_libforms(), "fl_get_chart_bounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_chart_bounds(FL_OBJECT * ob, double * min,
               double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_chart_bounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_set_chart_maxnumb(pObject, maxnum):
    """ fl_set_chart_maxnumb(pObject, maxnum)

        Sets the maximum number of values displayed in the chart.

        @param pObject: pointer to chart object
                (<pointer to xfdata.FL_OBJECT>)
        @param maxnum: maximum number of values to display

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_chart_maxnumb = cfuncproto(
            load_so_libforms(), "fl_set_chart_maxnumb",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_chart_maxnumb(FL_OBJECT * ob, int maxnumb)
            """)
    imaxnum = convert_to_int(maxnum)
    keep_elem_refs(pObject, maxnum, imaxnum)
    _fl_set_chart_maxnumb(pObject, imaxnum)


def fl_set_chart_autosize(pObject, autosize):
    """ fl_set_chart_autosize(pObject, autosize)

        Sets whether the chart should autosize along the x-axis.

        @param pObject: pointer to chart object
                (<pointer to xfdata.FL_OBJECT>)
        @param autosize: autosize flag is enabled/disabled (1|0)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_chart_autosize = cfuncproto(
            load_so_libforms(), "fl_set_chart_autosize",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_chart_autosize(FL_OBJECT * ob, int autosize)
            """)
    iautosize = convert_to_int(autosize)
    keep_elem_refs(pObject, autosize, iautosize)
    _fl_set_chart_autosize(pObject, iautosize)


def fl_set_chart_lstyle(pObject, lstyle):
    """ fl_set_chart_lstyle(pObject, lstyle)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_chart_lstyle = cfuncproto(
            load_so_libforms(), "fl_set_chart_lstyle",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_chart_lstyle(FL_OBJECT * ob, int lstyle)
            """)
    ilstyle = convert_to_int(lstyle)
    keep_elem_refs(pObject, lstyle, ilstyle)
    _fl_set_chart_lstyle(pObject, ilstyle)


def fl_set_chart_lsize(pObject, lsize):
    """ fl_set_chart_lsize(pObject, lsize)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_chart_lsize = cfuncproto(
            load_so_libforms(), "fl_set_chart_lsize",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_chart_lsize(FL_OBJECT * ob, int lsize)
            """)
    ilsize = convert_to_int(lsize)
    keep_elem_refs(pObject, lsize, ilsize)
    _fl_set_chart_lsize(pObject, ilsize)


def fl_set_chart_lcolor(pObject, colr):
    """ fl_set_chart_lcolor(pObject, colr)

        @param pObject: pointer to chart object
                (<pointer to xfdata.FL_OBJECT>)
        @param colr: color value

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_chart_lcolor = cfuncproto(
            load_so_libforms(), "fl_set_chart_lcolor",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_COLOR],
            """void fl_set_chart_lcolor(FL_OBJECT * ob, FL_COLOR lcol)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, colr, ulcolr)
    _fl_set_chart_lcolor(pObject, ulcolr)


def fl_set_chart_baseline(pObject, yesno):
    """ fl_set_chart_baseline(pObject, yesno)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_chart_baseline = cfuncproto(
            load_so_libforms(), "fl_set_chart_baseline",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_chart_baseline(FL_OBJECT * ob, int iYesNo)
            """)
    iyesno = convert_to_int(yesno)
    keep_elem_refs(pObject, yesno, iyesno)
    _fl_set_chart_baseline(pObject, iyesno)


fl_set_chart_lcol = fl_set_chart_lcolor



#####################
# forms.h (choice.h)
#####################

# fl_create_choice function placeholder (internal and deprecated)
# fl_add_choice function placeholder (deprecated)
# fl_clear_choice function placeholder (deprecated)
# fl_addto_choice function placeholder (deprecated)
# fl_replace_choice function placeholder (deprecated)
# fl_delete_choice function placeholder (deprecated)
# fl_set_choice function placeholder (deprecated)
# fl_set_choice_text function placeholder (deprecated)
# fl_get_choice function placeholder (deprecated)
# fl_get_choice_item_text function placeholder (deprecated)
# fl_get_choice_maxitems function placeholder (deprecated)
# fl_get_choice_text function placeholder (deprecated)
# fl_set_choice_fontsize function placeholder (deprecated)
# fl_set_choice_fontstyle function placeholder (deprecated)
# fl_set_choice_align function placeholder (deprecated)
# fl_get_choice_item_mode function placeholder (deprecated)
# fl_set_choice_item_mode function placeholder (deprecated)
# fl_set_choice_item_shortcut function placeholder (deprecated)
# fl_set_choice_item_entries function placeholder (deprecated)
# fl_set_choice_notitle function placeholder (deprecated)



#################################
# forms.h (clipbd.h)
# prototypes for clipboard stuff
#################################

FL_LOSE_SELECTION_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfc.FL_OBJECT),
                                     cty.c_long)
FL_LOSE_SELECTION_CALLBACK = FL_LOSE_SELECTION_CB

def fl_stuff_clipboard(pObject, clipbdtype, data, size, py_LoseSelectionCb):
    """ fl_stuff_clipboard(pObject, clipbdtype, data, size, py_LoseSelectionCb) -> num.

        @param pObject: pointer to clipboard object
                (<pointer to xfdata.FL_OBJECT>)
        @param clipbdtype: type of clipboard (not used)
        @type clipbdtype: num./long
        @param py_LoseSelectionCb: python function callback, returning value
        @type py_LoseSelectionCb: func(pObject, longnum) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_stuff_clipboard = cfuncproto(
            load_so_libforms(), "fl_stuff_clipboard",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_long, cty.c_void_p,
            cty.c_long, FL_LOSE_SELECTION_CB],
            """int fl_stuff_clipboard(FL_OBJECT * ob, long int type,
               const char * data, long int size,
               FL_LOSE_SELECTION_CB lose_callback)
            """)
    lclipbdtype = convert_to_long(clipbdtype)
    pdata = cty.cast(data, cty.c_void_p)
    lsize = convert_to_long(size)
    c_LoseSelectionCb = FL_LOSE_SELECTION_CB(py_LoseSelectionCb)
    keep_cfunc_refs(c_LoseSelectionCb, py_LoseSelectionCb)
    keep_elem_refs(pObject, clipbdtype, data, size, lclipbdtype, pdata, lsize)
    retval = _fl_stuff_clipboard(pObject, lclipbdtype, pdata, lsize,
                                 c_LoseSelectionCb)
    return retval


FL_SELECTION_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfc.FL_OBJECT),
                                cty.c_long, cty.c_void_p, cty.c_long)
FL_SELECTION_CALLBACK = FL_SELECTION_CB

def fl_request_clipboard(pObject, clipbdtype, py_SelectionCb):
    """ fl_request_clipboard(pObject, clipbdtype, py_SelectionCb) -> num.

        @param pObject: pointer to clipboard object
                (<pointer to xfdata.FL_OBJECT>)
        @param clipbdtype: type of clipboard (not used)
        @param py_SelectionCb: python function callback, returning value
        @type py_SelectionCb: func(pObject, longnum, ptr_void,
                              longnum) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_request_clipboard = cfuncproto(
            load_so_libforms(), "fl_request_clipboard",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_long,
            FL_SELECTION_CB],
            """int fl_request_clipboard(FL_OBJECT * ob, long int type,
               FL_SELECTION_CB got_it_callback)
            """)
    lclipbdtype = convert_to_long(clipbdtype)
    c_SelectionCb = FL_SELECTION_CB(py_SelectionCb)
    keep_cfunc_refs(c_SelectionCb, py_SelectionCb)
    keep_elem_refs(pObject, clipbdtype, lclipbdtype)
    retval = _fl_request_clipboard(pObject, lclipbdtype, c_SelectionCb)
    return retval



#################################
# forms.h (clock.h)
#################################

# fl_create_clock function placeholder (internal)


def fl_add_clock(clocktype, x, y, w, h, label):
    """ fl_add_clock(clocktype, x, y, w, h, label) -> pObject

        Adds a clock object.

        @param clocktype: type of clock to be added
        @type clocktype: [num./int] from xfdata module FL_ANALOG_CLOCK,
                         FL_DIGITAL_CLOCK
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of clock

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_clock = cfuncproto(
            load_so_libforms(), "fl_add_clock",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc. FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_clock(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * s)
            """)
    check_admitted_listvalues(clocktype, xfc.CLOCKTYPE_list)
    iclocktype = convert_to_int(clocktype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(clocktype, x, y, w, h, label, iclocktype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_clock(iclocktype, ix, iy, iw, ih, slabel)
    return retval


def fl_get_clock(pObject):
    """ fl_get_clock(pObject) -> hr, mn, sec

        Returns time values from a clock object.

        @param pObject: pointer to clock object
                (<pointer to xfdata.FL_OBJECT>)

        @attention: API change from XForms - upstream was
                    fl_get_clock(pObject, hr, mn, sec)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_clock = cfuncproto(
            load_so_libforms(), "fl_get_clock",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
            """void fl_get_clock(FL_OBJECT * ob, int * h, int * m, int * s)
            """)
    hr, phr = make_int_and_pointer()
    mn, pmn = make_int_and_pointer()
    sec, psec = make_int_and_pointer()
    keep_elem_refs(pObject, hr, mn, sec, phr, pmn, psec)
    _fl_get_clock(pObject, phr, pmn, psec)
    return hr, mn, sec


def fl_set_clock_adjustment(pObject, offset):
    """ fl_set_clock_adjustment(pObject, offset) -> num.

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_clock_adjustment = cfuncproto(
            load_so_libforms(), "fl_set_clock_adjustment",
            cty.c_long, [cty.POINTER(xfc.FL_OBJECT), cty.c_long],
            """long int fl_set_clock_adjustment(FL_OBJECT * ob,
               long int offset)
            """)
    loffset = convert_to_long(offset)
    keep_elem_refs(pObject, offset, loffset)
    retval = _fl_set_clock_adjustment(pObject, loffset)
    return retval


def fl_set_clock_ampm(pObject, y):
    """ fl_set_clock_ampm(pObject, y)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_clock_ampm = cfuncproto(
            load_so_libforms(), "fl_set_clock_ampm",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_clock_ampm(FL_OBJECT * ob, int y)
            """)
    iy = convert_to_int(y)
    keep_elem_refs(pObject, y, iy)
    _fl_set_clock_ampm(pObject, iy)



######################
# forms.h (counter.h)
######################

# Routines

# fl_create_counter function placeholder (internal)


def fl_add_counter(countertype, x, y, w, h, label):
    """ fl_add_counter(countertype, x, y, w, h, label) -> pObject

        Adds a counter object.

        @param countertype: type of counter to be added
        @type countertype: [num./int] from xfdata module FL_NORMAL_COUNTER,
                           FL_SIMPLE_COUNTER
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of counter

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_counter = cfuncproto(
            load_so_libforms(), "fl_add_counter",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_counter(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(countertype, xfc.COUNTERTYPE_list)
    icountertype = convert_to_int(countertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(countertype, x, y, w, h, label, icountertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_counter(icountertype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_counter_value(pObject, val):
    """ fl_set_counter_value(pObject, val)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_counter_value = cfuncproto(
            load_so_libforms(), "fl_set_counter_value",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_counter_value(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_counter_value(pObject, fval)


def fl_set_counter_bounds(pObject, minbound, maxbound):
    """ fl_set_counter_bounds(pObject, minbound, maxbound)

        @param pObject: pointer to counter object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_counter_bounds = cfuncproto(
            load_so_libforms(), "fl_set_counter_bounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_counter_bounds(FL_OBJECT * ob, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_counter_bounds(pObject, fminbound, fmaxbound)


def fl_set_counter_step(pObject, s, l):
    """ fl_set_counter_step(pObject, s, l)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_counter_step = cfuncproto(
            load_so_libforms(), "fl_set_counter_step",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_counter_step(FL_OBJECT * ob, double s, double l)
            """)
    fs = convert_to_double(s)
    fl = convert_to_double(l)
    keep_elem_refs(pObject, s, l, fs, fl)
    _fl_set_counter_step(pObject, fs, fl)


def fl_set_counter_precision(pObject, prec):
    """ fl_set_counter_precision(pObject, prec)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_counter_precision = cfuncproto(
            load_so_libforms(), "fl_set_counter_precision",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_counter_precision(FL_OBJECT * ob, int prec)
            """)
    iprec = convert_to_int(prec)
    keep_elem_refs(pObject, prec, iprec)
    _fl_set_counter_precision(pObject, iprec)


def fl_get_counter_precision(pObject):
    """ fl_get_counter_precision(pObject) -> num.

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_counter_precision = cfuncproto(
            load_so_libforms(), "fl_get_counter_precision",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_counter_precision(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_counter_precision(pObject)
    return retval


# fl_set_counter_return function placeholder (deprecated)


def fl_get_counter_value(pObject):
    """ fl_get_counter_value(pObject) -> num.

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_counter_value = cfuncproto(
            load_so_libforms(), "fl_get_counter_value",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT)],
            """double fl_get_counter_value(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_counter_value(pObject)
    return retval


def fl_get_counter_bounds(pObject):
    """ fl_get_counter_bounds(pObject) -> minbound, maxbound

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @attention: API change from XForms - upstream was
                    fl_get_counter_bounds(pObject, minbound, maxbound)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_counter_bounds = cfuncproto(
            load_so_libforms(), "fl_get_counter_bounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_counter_bounds(FL_OBJECT * ob, double * min,
               double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_counter_bounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_get_counter_step(pObject):
    """ fl_get_counter_step(pObject) -> s, l

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @attention: API change from XForms - upstream was
                    fl_get_counter_step(pObject, s, l)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_counter_step = cfuncproto(
            load_so_libforms(), "fl_get_counter_step",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_counter_step(FL_OBJECT * ob, double * s,
               double * l)
            """)
    s, ps = make_double_and_pointer()
    l, pl = make_double_and_pointer()
    keep_elem_refs(pObject, s, l, ps, pl)
    _fl_get_counter_step(pObject, ps, pl)
    return s, l


FL_VAL_FILTER = cty.CFUNCTYPE(xfc.STRING, cty.POINTER(xfc.FL_OBJECT),
                              cty.c_double, cty.c_int)

def fl_set_counter_filter(pObject, py_ValFilter):
    """ fl_set_counter_filter(pObject, py_ValFilter)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_counter_filter = cfuncproto(
            load_so_libforms(), "fl_set_counter_filter",
            None, [cty.POINTER(xfc.FL_OBJECT), FL_VAL_FILTER],
            """void fl_set_counter_filter(FL_OBJECT * ob,
               FL_VAL_FILTER filter)
            """)
    c_ValFilter = FL_VAL_FILTER(py_ValFilter)
    keep_cfunc_refs(c_ValFilter, py_ValFilter)
    keep_elem_refs(pObject)
    _fl_set_counter_filter(pObject, c_ValFilter)


# Functions to set and get the timeout value used by the
# counter code to control modification of the counter value.

def fl_get_counter_repeat(pObject):
    """ fl_get_counter_repeat(pObject) -> num.

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_counter_repeat = cfuncproto(
            load_so_libforms(), "fl_get_counter_repeat",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_counter_repeat(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_counter_repeat(pObject)
    return retval


def fl_set_counter_repeat(pObject, msec):
    """ fl_set_counter_repeat(pObject, msec)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_counter_repeat = cfuncproto(
            load_so_libforms(), "fl_set_counter_repeat",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_counter_repeat(FL_OBJECT * ob, int millisec)
            """)
    imsec = convert_to_int(msec)
    keep_elem_refs(pObject, msec, imsec)
    _fl_set_counter_repeat(pObject, imsec)


def fl_get_counter_min_repeat(pObject):
    """ fl_get_counter_min_repeat(pObject) -> num.

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_counter_min_repeat = cfuncproto(
            load_so_libforms(), "fl_get_counter_min_repeat",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_counter_min_repeat(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_counter_min_repeat(pObject)
    return retval


def fl_set_counter_min_repeat(pObject, msec):
    """ fl_set_counter_min_repeat(pObject, msec)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_counter_min_repeat = cfuncproto(
            load_so_libforms(), "fl_set_counter_min_repeat",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_counter_min_repeat(FL_OBJECT * ob, int millisec)
            """)
    imsec = convert_to_int(msec)
    keep_elem_refs(pObject, msec, imsec)
    _fl_set_counter_min_repeat(pObject, imsec)


def fl_get_counter_speedjump(pObject):
    """ fl_get_counter_speedjump(pObject) -> num.

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_counter_speedjump = cfuncproto(
            load_so_libforms(), "fl_get_counter_speedjump",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_counter_speedjump(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_counter_speedjump(pObject)
    return retval


def fl_set_counter_speedjump(pObject, yesno):
    """ fl_set_counter_speedjump(pObject, yesno)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_counter_speedjump = cfuncproto(
            load_so_libforms(), "fl_set_counter_speedjump",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_counter_speedjump(FL_OBJECT * ob, int yes_no)
            """)
    iyesno = convert_to_int(yesno)
    keep_elem_refs(pObject, yesno, iyesno)
    _fl_set_counter_speedjump(pObject, iyesno)



#############################
# forms.h (cursor.h)
# Cursor defs and prototypes
#############################

def fl_set_cursor(win, cursnum):
    """ fl_set_cursor(win, cursnum)

        Set cursor for window to provided cursor number name. Name
        is either the standard XC_ or Form defined.

        @param win: window
        @param cursnum: cursor number

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_cursor = cfuncproto(
            load_so_libforms(), "fl_set_cursor",
            None, [xfc.Window, cty.c_int],
            """void fl_set_cursor(Window win, int name)
            """)
    ulwin = convert_to_Window(win)
    icursnum = convert_to_int(cursnum)
    keep_elem_refs(win, cursnum, ulwin, icursnum)
    _fl_set_cursor(ulwin, icursnum)


def fl_set_cursor_color(cursnum, fgcolr, bgcolr):
    """ fl_set_cursor_color(cursnum, fgcolr, bgcolr)

        Sets foreground and background colors for cursor.

        @param cursnum: cursor number
        @param fgcolr: foreground color to be set
        @param bgcolr: background color to be set

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_cursor_color = cfuncproto(
            load_so_libforms(), "fl_set_cursor_color",
            None, [cty.c_int, xfc.FL_COLOR, xfc.FL_COLOR],
            """void fl_set_cursor_color(int name, FL_COLOR fg, FL_COLOR bg)
            """)
    check_admitted_listvalues(fgcolr, xfc.COLOR_list)
    check_admitted_listvalues(bgcolr, xfc.COLOR_list)
    icursnum = convert_to_int(cursnum)
    ulfgcolr = convert_to_FL_COLOR(fgcolr)
    ulbgcolr = convert_to_FL_COLOR(bgcolr)
    keep_elem_refs(cursnum, fgcolr, bgcolr, icursnum, ulfgcolr, ulbgcolr)
    _fl_set_cursor_color(icursnum, ulfgcolr, ulbgcolr)


def fl_create_bitmap_cursor(source, maskstr, w, h, hotx, hoty):
    """ fl_create_bitmap_cursor(source, maskstr, w, h, hotx, hoty) -> num.

        @status: HalfTested + NoDoc + Demo = NOT OK (bitmap after animated problematic)
    """

    _fl_create_bitmap_cursor = cfuncproto(
            load_so_libforms(), "fl_create_bitmap_cursor",
            cty.c_int, [xfc.STRING, xfc.STRING, cty.c_int, cty.c_int, cty.c_int,
            cty.c_int],
            """int fl_create_bitmap_cursor(const char * source,
               const char * mask, int w, int h, int hotx, int hoty)
            """)
    ssource = convert_to_string(source)
    smaskstr = convert_to_string(maskstr)
    iw = convert_to_int(w)
    ih = convert_to_FL_Coord(h)
    ihotx = convert_to_int(hotx)
    ihoty = convert_to_int(hoty)
    keep_elem_refs(source, maskstr, w, h, hotx, hoty, ssource, smaskstr,
                   iw, ih, ihotx, ihoty)
    retval = _fl_create_bitmap_cursor(ssource, smaskstr, iw, ih, ihotx, ihoty)
    return retval


def fl_create_animated_cursor(curnums, timeout):
    """ fl_create_animated_cursor(curnums, timeout) -> num.

        @status: HalfTested + NoDoc + Demo = NOT OK (curnums data problematic)
    """

    _fl_create_animated_cursor = cfuncproto(
            load_so_libforms(), "fl_create_animated_cursor",
            cty.c_int, [cty.POINTER(cty.c_int), cty.c_int],
            """int fl_create_animated_cursor(int * cur_names, int timeout)
            """)
    pcurnums = cty.cast(curnums, cty.POINTER(cty.c_int))
    #print "pcurnums", pcurnums
    itimeout = convert_to_int(timeout)
    keep_elem_refs(curnums, timeout, pcurnums, itimeout)
    retval = _fl_create_animated_cursor(pcurnums, itimeout)
    return retval


def fl_get_cursor_byname(cursnum):
    """ fl_get_cursor_byname(cursnum) -> cursor

        Return cursor corresponding to number.

        @param cursnum: cursor number

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_cursor_byname = cfuncproto(
            load_so_libforms(), "fl_get_cursor_byname",
            xfc.Cursor, [cty.c_int],
            """Cursor fl_get_cursor_byname(int name)
            """)
    icursnum = convert_to_int(cursnum)
    keep_elem_refs(cursnum, icursnum)
    retval = _fl_get_cursor_byname(icursnum)
    return retval


def fl_reset_cursor(win):
    """ Reset used cursor, reverting to default one.

        @param win: window

        @status: Tested + NoDoc + Demo = OK
    """

    fl_set_cursor(win, xfc.FL_DEFAULT_CURSOR)



###################
# forms.h (dial.h)
###################

# Routines

# fl_create_dial function placeholder (internal)


def fl_add_dial(dialtype, x, y, w, h, label):
    """ fl_add_dial(dialtype, x, y, w, h, label) -> pObject

        Adds a dial object.

        @param dialtype: type of dial to be added
        @type dialtype: [num./int] from xfdata module FL_NORMAL_DIAL,
                        FL_LINE_DIAL, FL_FILL_DIAL
        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of dial

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_dial = cfuncproto(
            load_so_libforms(), "fl_add_dial",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_dial(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(dialtype, xfc.DIALTYPE_list)
    idialtype = convert_to_int(dialtype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(dialtype, x, y, w, h, label, idialtype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_dial(idialtype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_dial_value(pObject, val):
    """ fl_set_dial_value(pObject, val)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_dial_value = cfuncproto(
            load_so_libforms(), "fl_set_dial_value",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_dial_value(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_dial_value(pObject, fval)


def fl_get_dial_value(pObject):
    """ fl_get_dial_value(pObject) -> num.

        @param pObject: pointer to dial object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_dial_value = cfuncproto(
            load_so_libforms(), "fl_get_dial_value",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT)],
            """double fl_get_dial_value(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_dial_value(pObject)
    return retval


def fl_set_dial_bounds(pObject, minbound, maxbound):
    """ fl_set_dial_bounds(pObject, minbound, maxbound)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_dial_bounds = cfuncproto(
            load_so_libforms(), "fl_set_dial_bounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_dial_bounds(FL_OBJECT * ob, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_dial_bounds(pObject, fminbound, fmaxbound)


def fl_get_dial_bounds(pObject):
    """ fl_get_dial_bounds(pObject) -> minbound, maxbound

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @attention: API change from XForms - upstream was
                    fl_get_dial_bounds(pObject, minbound, maxbound)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_dial_bounds = cfuncproto(
            load_so_libforms(), "fl_get_dial_bounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_dial_bounds(FL_OBJECT * ob, double * min,
               double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_dial_bounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_set_dial_step(pObject, value):
    """ fl_set_dial_step(pObject, value)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_dial_step = cfuncproto(
            load_so_libforms(), "fl_set_dial_step",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_dial_step(FL_OBJECT * ob, double value)
            """)
    fvalue = convert_to_double(value)
    keep_elem_refs(pObject, value, fvalue)
    _fl_set_dial_step(pObject, fvalue)


def fl_set_dial_return(pObject, value):
    """ fl_set_dial_return(pObject, value)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_dial_return = cfuncproto(
            load_so_libforms(), "fl_set_dial_return",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_uint],
            """void fl_set_dial_return(FL_OBJECT * ob, unsigned
               int value)
            """)
    uivalue = convert_to_uint(value)
    keep_elem_refs(pObject, value, uivalue)
    _fl_set_dial_return(pObject, uivalue)


def fl_set_dial_angles(pObject, angmin, angmax):
    """ fl_set_dial_angles(pObject, angmin, angmax)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_dial_angles = cfuncproto(
            load_so_libforms(), "fl_set_dial_angles",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_dial_angles(FL_OBJECT * ob, double amin,
               double amax)
            """)
    fangmin = convert_to_double(angmin)
    fangmax = convert_to_double(angmax)
    keep_elem_refs(pObject, angmin, angmax, fangmin, fangmax)
    _fl_set_dial_angles(pObject, fangmin, fangmax)


def fl_set_dial_cross(pObject, flag):
    """
        fl_set_dial_cross(pObject, flag)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_dial_cross = cfuncproto(
            load_so_libforms(), "fl_set_dial_cross",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_dial_cross(FL_OBJECT * ob, int flag)
            """)
    iflag = convert_to_int(flag)
    keep_elem_refs(pObject, flag, iflag)
    _fl_set_dial_cross(pObject, iflag)


fl_set_dial_crossover = fl_set_dial_cross


def fl_set_dial_direction(pObject, directn):
    """
        fl_set_dial_direction(pObject, directn)

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_dial_direction = cfuncproto(
            load_so_libforms(), "fl_set_dial_direction",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_dial_direction(FL_OBJECT * ob, int dir)
            """)
    idirectn = convert_to_int(directn)
    keep_elem_refs(pObject, directn, idirectn)
    _fl_set_dial_direction(pObject, idirectn)



############################################
# forms.h (filesys.h)
# Convenience functions to read a directory
############################################

# read dir with pattern filtering. All dirs read might be cached.
# must not change dirlist in anyway.

def fl_get_dirlist(directory, pattern, rescan):
    """
        fl_get_dirlist(directory, pattern, rescan) -> pDirList, n

        @attention: API change from XForms - upstream was
           fl_get_dirlist(directory, pattern, n, rescan)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_dirlist = cfuncproto(
            load_so_libforms(), "fl_get_dirlist",
            cty.POINTER(xfc.FL_Dirlist), [xfc.STRING, xfc.STRING,
            cty.POINTER(cty.c_int), cty.c_int],
            """const char * fl_get_dirlist(const char * dir,
               const char * pattern, int * n, int rescan)
            """)
    sdirectory = convert_to_string(directory)
    spattern = convert_to_string(pattern)
    n, pn = make_int_and_pointer()
    irescan = convert_to_int(rescan)
    keep_elem_refs(directory, pattern, n, rescan, sdirectory, spattern,
                   pn, irescan)
    retval = _fl_get_dirlist(sdirectory, spattern, pn, irescan)
    return retval, n


FL_DIRLIST_FILTER = cty.CFUNCTYPE(cty.c_int, xfc.STRING, cty.c_int)

def fl_set_dirlist_filter(py_DirFilter):
    """
        fl_set_dirlist_filter(py_DirFilter) -> dirlist_filter func.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_dirlist_filter = cfuncproto(
            load_so_libforms(), "fl_set_dirlist_filter",
            FL_DIRLIST_FILTER, [FL_DIRLIST_FILTER],
            """FL_DIRLIST_FILTER fl_set_dirlist_filter( \
               FL_DIRLIST_FILTER filter)
            """)
    c_DirFilter = FL_DIRLIST_FILTER(py_DirFilter)
    keep_cfunc_refs(c_DirFilter, py_DirFilter)
    retval = _fl_set_dirlist_filter(c_DirFilter)
    return retval


def fl_set_dirlist_sort(method):
    """
        fl_set_dirlist_sort(method) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_dirlist_sort = cfuncproto(
            load_so_libforms(), "fl_set_dirlist_sort",
            cty.c_int, [cty.c_int],
            """int fl_set_dirlist_sort(int method)
            """)
    imethod = convert_to_int(method)
    keep_elem_refs(method, imethod)
    retval = _fl_set_dirlist_sort(imethod)
    return retval


def fl_set_dirlist_filterdir(yes):
    """
        fl_set_dirlist_filterdir(yes) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_dirlist_filterdir = cfuncproto(
            load_so_libforms(), "fl_set_dirlist_filterdir",
            cty.c_int, [cty.c_int],
            """int fl_set_dirlist_filterdir(int yes)
            """)
    iyes = convert_to_int(yes)
    keep_elem_refs(yes, iyes)
    retval = _fl_set_dirlist_filterdir(iyes)
    return retval


def fl_free_dirlist(pDirList):
    """
        fl_free_dirlist(pDirList)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_free_dirlist = cfuncproto(
            load_so_libforms(), "fl_free_dirlist",
            None, [cty.POINTER(xfc.FL_Dirlist)],
            """void fl_free_dirlist(FL_Dirlist * dl)
            """)
    keep_elem_refs(pDirList)
    _fl_free_dirlist(pDirList)


# Free all directory caches

def fl_free_all_dirlist():
    """
        fl_free_all_dirlist()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_free_all_dirlist = cfuncproto(
            load_so_libforms(), "fl_free_all_dirlist",
            None, [],
            """void fl_free_all_dirlist()
            """)
    _fl_free_all_dirlist()


def fl_is_valid_dir(name):
    """
        fl_is_valid_dir(name) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_is_valid_dir = cfuncproto(
            load_so_libforms(), "fl_is_valid_dir",
            cty.c_int, [xfc.STRING],
            """int fl_is_valid_dir(const char * name)
            """)
    sname = convert_to_string(name)
    keep_elem_refs(name, sname)
    retval = _fl_is_valid_dir(sname)
    return retval


def fl_fmtime(timestr):
    """
        fl_fmtime(timestr) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_fmtime = cfuncproto(
            load_so_libforms(), "fl_fmtime",
            cty.c_ulong, [xfc.STRING],
            """long unsigned int fl_fmtime(const char * s)
            """)
    stimestr = convert_to_string(timestr)
    keep_elem_refs(timestr, stimestr)
    retval = _fl_fmtime(stimestr)
    return retval


def fl_fix_dirname(directory):
    """
        fl_fix_dirname(directory) -> dirname string

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_fix_dirname = cfuncproto(
            load_so_libforms(), "fl_fix_dirname",
            xfc.STRING, [xfc.STRING],
            """char * fl_fix_dirname(char * dir)
            """)
    sdirectory = convert_to_string(directory)
    keep_elem_refs(directory, sdirectory)
    retval = _fl_fix_dirname(sdirectory)
    return retval



###################
# forms.h (flps.h)
###################

# postscript stuff


def flps_init():
    """
        flps_init() -> flps_control class

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flps_init = cfuncproto(
            load_so_libflimage(), "flps_init",
            cty.POINTER(xfc.FLPS_CONTROL), [],
            """FLPS_CONTROL * flps_init()
            """)
    retval = _flps_init()
    return retval


def fl_object_ps_dump(pObject, fname):
    """
        fl_object_ps_dump(pObject, fname) -> num.

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_object_ps_dump = cfuncproto(
            load_so_libflimage(), "fl_object_ps_dump",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING],
            """int fl_object_ps_dump(FL_OBJECT * ob, const char * fname)
            """)
    sfname = convert_to_string(fname)
    keep_elem_refs(pObject, fname, sfname)
    retval = _fl_object_ps_dump(pObject, sfname)
    return retval



##########################
# forms.h (formbrowser.h)
##########################

def fl_addto_formbrowser(pObject, pForm):
    """
        fl_addto_formbrowser(pObject, pForm) -> num.

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_addto_formbrowser = cfuncproto(
            load_so_libforms(), "fl_addto_formbrowser",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_FORM)],
            """int fl_addto_formbrowser(FL_OBJECT * ob, FL_FORM * form)
            """)
    keep_elem_refs(pObject, pForm)
    retval = _fl_addto_formbrowser(pObject, pForm)
    return retval


def fl_delete_formbrowser_bynumber(pObject, num):
    """
        fl_delete_formbrowser_bynumber(pObject, num) -> pForm

        @param pObject: pointer to object
                (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_delete_formbrowser_bynumber = cfuncproto(
            load_so_libforms(), "fl_delete_formbrowser_bynumber",
            cty.POINTER(xfc.FL_FORM), [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """FL_FORM * fl_delete_formbrowser_bynumber(FL_OBJECT * ob,
               int num)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    retval = _fl_delete_formbrowser_bynumber(pObject, inum)
    return retval


def fl_delete_formbrowser(pObject, pForm):
    """
        fl_delete_formbrowser(pObject, pForm) -> num.

        @param pObject: object the formbrowser belongs to
                        (<pointer to xfdata.FL_OBJECT>)
        @param pForm: form candidate to deletion
                      (<pointer to xfdata.FL_FORM>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_delete_formbrowser = cfuncproto(
            load_so_libforms(), "fl_delete_formbrowser",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_FORM)],
            """int fl_delete_formbrowser(FL_OBJECT * ob,
               FL_FORM * candidate_form)
            """)
    keep_elem_refs(pObject, pForm)
    retval = _fl_delete_formbrowser(pObject, pForm)
    return retval


def fl_replace_formbrowser(pObject, num, pForm):
    """
        fl_replace_formbrowser(pObject, num, pForm)

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)
        @param num: formbrowser number to be replaced (<int>)
        @param pForm: form used as replacement
                      (<pointer to xfdata.FL_FORM>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_replace_formbrowser = cfuncproto(
            load_so_libforms(), "fl_replace_formbrowser",
            cty.POINTER(xfc.FL_FORM), [cty.POINTER(xfc.FL_OBJECT), cty.c_int,
            cty.POINTER(xfc.FL_FORM)],
            """FL_FORM * fl_replace_formbrowser(FL_OBJECT * ob, int num,
               FL_FORM * form)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, pForm, inum)
    retval = _fl_replace_formbrowser(pObject, inum, pForm)
    return retval


def fl_insert_formbrowser(pObject, line, pForm):
    """
        fl_insert_formbrowser(pObject, line, pForm) -> num.

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)
        @param line: line after which new form is inserted
        @param pForm: new form to insert
                      (<pointer to xfdata.FL_FORM>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_insert_formbrowser = cfuncproto(
            load_so_libforms(), "fl_insert_formbrowser",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, \
            cty.POINTER(xfc.FL_FORM)],
            """int fl_insert_formbrowser(FL_OBJECT * ob, int line,
               FL_FORM * new_form)
            """)
    iline = convert_to_int(line)
    keep_elem_refs(pObject, line, iline, pForm)
    retval = _fl_insert_formbrowser(pObject, iline, pForm)
    return retval


def fl_get_formbrowser_area(pObject):
    """
        fl_get_formbrowser_area(pObject) -> num., x, y, w, h

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)

        @attention: API change from XForms - upstream was
                    fl_get_formbrowser_area(pObject, x, y, w, h)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_formbrowser_area = cfuncproto(
            load_so_libforms(), "fl_get_formbrowser_area",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int), \
            cty.POINTER(cty.c_int)],
            """int fl_get_formbrowser_area(FL_OBJECT * ob, int * x, int * y,
               int * w, int * h)
            """)
    x, px = make_int_and_pointer()
    y, py = make_int_and_pointer()
    w, pw = make_int_and_pointer()
    h, ph = make_int_and_pointer()
    keep_elem_refs(pObject, x, y, w, h, px, py, pw, ph)
    retval = _fl_get_formbrowser_area(pObject, px, py, pw, ph)
    return retval, x, y, w, h


def fl_set_formbrowser_scroll(pObject, how):
    """
        fl_set_formbrowser_scroll(pObject, how)

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)
        @param how: ?

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_formbrowser_scroll = cfuncproto(
            load_so_libforms(), "fl_set_formbrowser_scroll",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_formbrowser_scroll(FL_OBJECT * ob, int how)
            """)
    ihow = convert_to_int(how)
    keep_elem_refs(pObject, how, ihow)
    _fl_set_formbrowser_scroll(pObject, ihow)


def fl_set_formbrowser_hscrollbar(pObject, how):
    """
        fl_set_formbrowser_hscrollbar(pObject, how)

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)
        @param how: ?

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_formbrowser_hscrollbar = cfuncproto(
            load_so_libforms(), "fl_set_formbrowser_hscrollbar",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_formbrowser_hscrollbar(FL_OBJECT * ob, int how)
            """)
    ihow = convert_to_int(how)
    keep_elem_refs(pObject, how, ihow)
    _fl_set_formbrowser_hscrollbar(pObject, ihow)


def fl_set_formbrowser_vscrollbar(pObject, how):
    """
        fl_set_formbrowser_vscrollbar(pObject, how)

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)
        @param how: ?

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_formbrowser_vscrollbar = cfuncproto(
            load_so_libforms(), "fl_set_formbrowser_vscrollbar",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_formbrowser_vscrollbar(FL_OBJECT * ob, int how)
            """)
    ihow = convert_to_int(how)
    keep_elem_refs(pObject, how, ihow)
    _fl_set_formbrowser_vscrollbar(pObject, ihow)


def fl_get_formbrowser_topform(pObject):
    """
        fl_get_formbrowser_topform(pObject) -> pForm

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_formbrowser_topform = cfuncproto(
            load_so_libforms(), "fl_get_formbrowser_topform",
            cty.POINTER(xfc.FL_FORM), [cty.POINTER(xfc.FL_OBJECT)],
            """FL_FORM * fl_get_formbrowser_topform(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_formbrowser_topform(pObject)
    return retval


def fl_set_formbrowser_topform(pObject, pForm):
    """
        fl_set_formbrowser_topform(pObject, pForm) -> num.

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)
        @param pForm: form
                      (<pointer to xfdata.FL_FORM>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_formbrowser_topform = cfuncproto(
            load_so_libforms(), "fl_set_formbrowser_topform",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_FORM)],
            """int fl_set_formbrowser_topform(FL_OBJECT * ob, FL_FORM * form)
            """)
    keep_elem_refs(pObject, pForm)
    retval = _fl_set_formbrowser_topform(pObject, pForm)
    return retval


def fl_set_formbrowser_topform_bynumber(pObject, num):
    """
        fl_set_formbrowser_topform_bynumber(pObject, num) -> pForm

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)
        @param num: ?

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_formbrowser_topform_bynumber = cfuncproto(
            load_so_libforms(), "fl_set_formbrowser_topform_bynumber",
            cty.POINTER(xfc.FL_FORM), [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """FL_FORM * fl_set_formbrowser_topform_bynumber( \
               FL_OBJECT * ob, int n)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    retval = _fl_set_formbrowser_topform_bynumber(pObject, inum)
    return retval


def fl_set_formbrowser_xoffset(pObject, offset):
    """
        fl_set_formbrowser_xoffset(pObject, offset) -> num.

        Scrolls within a formbrowser in horizontal direction.

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)
        @param offset: positive number, measuring in pixels the offset
                       from the the natural position from the left (<int>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_formbrowser_xoffset = cfuncproto(
            load_so_libforms(), "fl_set_formbrowser_xoffset",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """int fl_set_formbrowser_xoffset(FL_OBJECT * ob, int offset)
            """)
    ioffset = convert_to_int(offset)
    keep_elem_refs(pObject, offset, ioffset)
    retval = _fl_set_formbrowser_xoffset(pObject, ioffset)
    return retval


def fl_set_formbrowser_yoffset(pObject, offset):
    """
        fl_set_formbrowser_yoffset(pObject, offset) -> num.

        Scrolls within a formbrowser in vertical direction.

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)
        @param offset: positive number, measuring in pixels the offset
                       from the the natural position from the top (<int>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_formbrowser_yoffset = cfuncproto(
            load_so_libforms(), "fl_set_formbrowser_yoffset",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """int fl_set_formbrowser_yoffset(FL_OBJECT * ob, int offset)
            """)
    ioffset = convert_to_int(offset)
    keep_elem_refs(pObject, offset, ioffset)
    retval = _fl_set_formbrowser_yoffset(pObject, ioffset)
    return retval


def fl_get_formbrowser_xoffset(pObject):
    """
        fl_get_formbrowser_xoffset(pObject) -> num.

        Returns the current horizontal offset from left in pixel of a
        formbrowser.

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_formbrowser_xoffset = cfuncproto(
            load_so_libforms(), "fl_get_formbrowser_xoffset",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_formbrowser_xoffset(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_formbrowser_xoffset(pObject)
    return retval


def fl_get_formbrowser_yoffset(pObject):
    """
        fl_get_formbrowser_yoffset(pObject) -> num.

        Returns the current vertical offset from top in pixel of a
        formbrowser.

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_formbrowser_yoffset = cfuncproto(
            load_so_libforms(), "fl_get_formbrowser_yoffset",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_formbrowser_yoffset(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_formbrowser_yoffset(pObject)
    return retval


def fl_find_formbrowser_form_number(pObject, pFormCandidate):
    """
        fl_find_formbrowser_form_number(pObject, pFormCandidate) -> num.

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_find_formbrowser_form_number = cfuncproto(
            load_so_libforms(), "fl_find_formbrowser_form_number",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_FORM)],
            """int fl_find_formbrowser_form_number(FL_OBJECT * ob,
               FL_FORM * candidate_form)
            """)
    keep_elem_refs(pObject, pFormCandidate)
    retval = _fl_find_formbrowser_form_number(pObject, pFormCandidate)
    return retval


def fl_add_formbrowser(frmbrwstype, x, y, w, h, label):
    """
        fl_add_formbrowser(frmbrwstype, x, y, w, h, label) -> pObject

        Adds a formbrowser object.

        @param frmbrwstype: type of formbrowser to be added (<int>)
        @type frmbrwstype: xfdata.FL_NORMAL_FORMBROWSER
        @param x: horizontal position (upper-left corner) (<int>)
        @param y: vertical position (upper-left corner) (<int>)
        @param w: width in coord units (<int>)
        @param h: height in coord units (<int>)
        @param label: text label of formbrowser (<string>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_formbrowser = cfuncproto(
            load_so_libforms(), "fl_add_formbrowser",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_formbrowser(int type, FL_Coord x,
               FL_Coord y, FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(frmbrwstype, xfc.FORMBRWSTYPE_list)
    ifrmbrwstype = convert_to_int(frmbrwstype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(frmbrwstype, x, y, w, h, label, ifrmbrwstype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_formbrowser(ifrmbrwstype, ix, iy, iw, ih, slabel)
    return retval


# fl_create_formbrowser function placeholder (internal)


def fl_get_formbrowser_numforms(pObject):
    """
        fl_get_formbrowser_numforms(pObject) -> forms num.

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_formbrowser_numforms = cfuncproto(
            load_so_libforms(), "fl_get_formbrowser_numforms",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_formbrowser_numforms(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_formbrowser_numforms(pObject)
    return retval


def fl_get_formbrowser_form(pObject, num):
    """
        fl_get_formbrowser_form(pObject, num) -> pForm

        @param pObject: formbrowser object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_formbrowser_form = cfuncproto(
            load_so_libforms(), "fl_get_formbrowser_form",
            cty.POINTER(xfc.FL_FORM), [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """FL_FORM * fl_get_formbrowser_form(FL_OBJECT * ob, int n)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    retval = _fl_get_formbrowser_form(pObject, inum)
    return retval



####################
# forms.h (frame.h)
####################

# fl_create_frame function placeholder (internal)


def fl_add_frame(frametype, x, y, w, h, label):
    """
        fl_add_frame(frametype, x, y, w, h, label) -> pObject

        Adds a frame object.

        @param frametype: type of frame to be added
        @param frametype: [num./int] from xfdata module FL_NO_FRAME,
                          FL_UP_FRAME, FL_DOWN_FRAME, FL_BORDER_FRAME,
                          FL_SHADOW_FRAME, FL_ENGRAVED_FRAME, FL_ROUNDED_FRAME,
                          FL_EMBOSSED_FRAME, FL_OVAL_FRAME
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of frame

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_frame = cfuncproto(
            load_so_libforms(), "fl_add_frame",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_frame(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(frametype, xfc.FRAMETYPE_list)
    iframetype = convert_to_int(frametype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(frametype, x, y, w, h, label, iframetype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_frame(iframetype, ix, iy, iw, ih, slabel)
    return retval


# labeld frame

# fl_create_labelframe function placeholder (internal)


def fl_add_labelframe(frametype, x, y, w, h, label):
    """
        fl_add_labelframe(frametype, x, y, w, h, label) -> pObject

        Adds a labelframe object.

        @param frametype: type of labelframe to be added
        @param frametype: [num./int] from xfdata module FL_NO_FRAME,
                          FL_UP_FRAME, FL_DOWN_FRAME, FL_BORDER_FRAME,
                          FL_SHADOW_FRAME, FL_ENGRAVED_FRAME, FL_ROUNDED_FRAME,
                          FL_EMBOSSED_FRAME, FL_OVAL_FRAME
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of labelframe

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_labelframe = cfuncproto(
            load_so_libforms(), "fl_add_labelframe",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_labelframe(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(frametype, xfc.FRAMETYPE_list)
    iframetype = convert_to_int(frametype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(frametype, x, y, w, h, label, iframetype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_labelframe(iframetype, ix, iy, iw, ih, slabel)
    return retval



#####################
# forms.h (free.h)
# Object Class: Free
#####################

# fl_create_free function placeholder (internal)


def fl_add_free(freetype, x, y, w, h, label, py_HandlePtr):
    """
        fl_add_free(freetype, x, y, w, h, label, py_HandlePtr) -> pObject

        Adds a free object.

        @param freetype: type of free to be added
        @type freetype: [num./int] from xfdata module FL_NORMAL_FREE,
                        FL_INACTIVE_FREE, FL_INPUT_FREE, FL_CONTINUOUS_FREE,
                        FL_ALL_FREE, FL_SLEEPING_FREE
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of free

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_free = cfuncproto(
            load_so_libforms(), "fl_add_free",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING,
            xfc.FL_HANDLEPTR],
            """FL_OBJECT * fl_add_free(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label,
               FL_HANDLEPTR handle)
            """)
    check_admitted_listvalues(freetype, xfc.FREETYPE_list)
    ifreetype = convert_to_int(freetype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    c_HandlePtr = xfc.FL_HANDLEPTR(py_HandlePtr)
    keep_cfunc_refs(c_HandlePtr, py_HandlePtr)
    keep_elem_refs(freetype, x, y, w, h, label, ifreetype, ix, iy, iw, ih,
                   slabel)
    retval = _fl_add_free(ifreetype, ix, iy, iw, ih, slabel, c_HandlePtr)
    return retval



######################
# forms.h (goodies.h)
######################

# Resources and misc. goodie routines

def fl_set_goodies_font(style, size):
    """
        fl_set_goodies_font(style, size)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_goodies_font = cfuncproto(
            load_so_libforms(), "fl_set_goodies_font",
            None, [cty.c_int, cty.c_int],
            """void fl_set_goodies_font(int style, int size)
            """)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    keep_elem_refs(style, size, istyle, isize)
    _fl_set_goodies_font(istyle, isize)


# messages and questions

def fl_show_message(msgtxt1, msgtxt2, msgtxt3):
    """
        fl_show_message(msgtxt1, msgtxt2, msgtxt3)

        Shows a message.

        @param msgtxt1: first message to show
        @param msgtxt2: second message to show
        @param msgtxt3: third message to show

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_message = cfuncproto(
            load_so_libforms(), "fl_show_message",
            None, [xfc.STRING, xfc.STRING, xfc.STRING],
            """void fl_show_message(const char * p1, const char * p2,
               const char * p3)
            """)
    smsgtxt1 = convert_to_string(msgtxt1)
    smsgtxt2 = convert_to_string(msgtxt2)
    smsgtxt3 = convert_to_string(msgtxt3)
    keep_elem_refs(msgtxt1, msgtxt2, msgtxt3, smsgtxt1, smsgtxt2, smsgtxt3)
    _fl_show_message(smsgtxt1, smsgtxt2, smsgtxt3)


def fl_show_messages(p1):
    """
        fl_show_messages(p1)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_messages = cfuncproto(
            load_so_libforms(), "fl_show_messages",
            None, [xfc.STRING],
            """void fl_show_messages(const char * p1)
            """)
    sp1 = convert_to_string(p1)
    keep_elem_refs(p1, sp1)
    _fl_show_messages(sp1)


def fl_show_msg(fmttxt):
    """
        fl_show_msg(fmttxt)

        Shows a formatted text message.

        @param fmttxt: text message to show (with format parameters, e.g.
           %s, %d, %f etc..)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_show_msg = cfuncproto(
            load_so_libforms(), "fl_show_msg",
            None, [xfc.STRING],
            """void fl_show_msg(const char * p1)
            """)
    sfmttxt = convert_to_string(fmttxt)
    keep_elem_refs(fmttxt, sfmttxt)
    _fl_show_msg(sfmttxt)


def fl_hide_message():
    """
        fl_hide_message()

        Hides a text message already shown.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_hide_message = cfuncproto(
            load_so_libforms(), "fl_hide_message",
            None, [],
            """void fl_hide_message()
            """)
    _fl_hide_message()


fl_hide_msg = fl_hide_message
fl_hide_messages = fl_hide_message


def fl_show_question(questmsg, p2):
    """
        fl_show_question(questmsg, p2) -> num.

        Shows a question message.

        @param questmsg: text of question message to show
        @param p2: ?

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_question = cfuncproto(
            load_so_libforms(), "fl_show_question",
            cty.c_int, [xfc.STRING, cty.c_int],
            """int fl_show_question(const char * p1, int p2)
            """)
    squestmsg = convert_to_string(questmsg)
    ip2 = convert_to_int(p2)
    keep_elem_refs(questmsg, p2, squestmsg, ip2)
    retval = _fl_show_question(squestmsg, ip2)
    return retval


def fl_hide_question():
    """
        fl_hide_question()

        Hides a question message already shown.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_hide_question = cfuncproto(
            load_so_libforms(), "fl_hide_question",
            None, [],
            """void fl_hide_question()
            """)
    _fl_hide_question()


def fl_show_alert(title, msg1, msg2, centered):
    """
        fl_show_alert(title, msg1, msg2, centered)

        Shows an alert message.

        @param title: title of alert
        @param msg1: first message text
        @param msg2: other message text
        @param centered: if alert has to be displayed centered or not

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_alert = cfuncproto(
            load_so_libforms(), "fl_show_alert",
            None, [xfc.STRING, xfc.STRING, xfc.STRING, cty.c_int],
            """void fl_show_alert(const char * p1, const char * p2,
               const char * p3, int p4)
            """)
    stitle = convert_to_string(title)
    smsg1 = convert_to_string(msg1)
    smsg2 = convert_to_string(msg2)
    icentered = convert_to_int(centered)
    keep_elem_refs(title, msg1, msg2, centered, stitle, smsg1, smsg2,
                   icentered)
    _fl_show_alert(stitle, smsg1, smsg2, icentered)


def fl_show_alert2(centered, fmt):
    """
        fl_show_alert2(centered, fmt)

        Shows a formatted alert message.

        @param fmt: formatted message text
        @param centered: if alert has to be displayed centered or not

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_show_alert2 = cfuncproto(
            load_so_libforms(), "fl_show_alert2",
            None, [cty.c_int, xfc.STRING],
            """void fl_show_alert2(int c, const char * fmt)
            """)
    icentered = convert_to_int(centered)
    sfmt = convert_to_string(fmt)
    keep_elem_refs(centered, fmt, icentered, sfmt)
    _fl_show_alert2(icentered, sfmt)


def fl_hide_alert():
    """
        fl_hide_alert()

        Hides a previously shown alert message.

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_hide_alert = cfuncproto(
            load_so_libforms(), "fl_hide_alert",
            None, [],
            """void fl_hide_alert()
            """)
    _fl_hide_alert()


def fl_show_input(msgtxt, defstr):
    """
        fl_show_input(msgtxt, defstr) -> input string

        Obtains some text from user, showing a default text. It has OK and
        Cancel buttons.

        @param msgtxt: text used to ask for input
        @param defstr: default user answer to show

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_input = cfuncproto(
            load_so_libforms(), "fl_show_input",
            xfc.STRING, [xfc.STRING, xfc.STRING],
            """const char * fl_show_input(const char * p1, const char * p2)
            """)
    smsgtxt = convert_to_string(msgtxt)
    sdefstr = convert_to_string(defstr)
    keep_elem_refs(msgtxt, defstr, smsgtxt, sdefstr)
    retval = _fl_show_input(smsgtxt, sdefstr)
    return retval


def fl_hide_input():
    """
        fl_hide_input()

        Hides a previously shown input object.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_hide_input = cfuncproto(
            load_so_libforms(), "fl_hide_input",
            None, [],
            """void fl_hide_input()
            """)
    _fl_hide_input()


def fl_show_simple_input(msgtxt, defstr):
    """
        fl_show_simple_input(msgtxt, defstr) -> input string

        Asks the user for textual input. It has an OK button only.

        @param msgtxt: message used to ask for input
        @param defstr: default user answer in input

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_show_simple_input = cfuncproto(
            load_so_libforms(), "fl_show_simple_input",
            xfc.STRING, [xfc.STRING, xfc.STRING],
            """const char * fl_show_simple_input(const char * p1,
               const char * p2)
            """)
    smsgtxt = convert_to_string(msgtxt)
    sdefstr = convert_to_string(defstr)
    keep_elem_refs(msgtxt, defstr, smsgtxt, sdefstr)
    retval = _fl_show_simple_input(smsgtxt, sdefstr)
    return retval


def fl_show_colormap(oldcolr):
    """
        fl_show_colormap(oldcolr) -> colormap num.

        Shows a colormap color selector from which the user can select a
        color.

        @param oldcolr: color num. (Not FL_COLOR)
        @type oldcolr: num./int

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_colormap = cfuncproto(
            load_so_libforms(), "fl_show_colormap",
            cty.c_int, [cty.c_int],
            """int fl_show_colormap(int p1)
            """)
    ioldcolr = convert_to_int(oldcolr)
    keep_elem_refs(oldcolr, ioldcolr)
    retval = _fl_show_colormap(ioldcolr)
    return retval


# choices

def fl_show_choices(msgtxt, p2, p3, p4, p5, p6):
    """
        fl_show_choices(msgtxt, p2, p3, p4, p5, p6) -> num.

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_choices = cfuncproto(
            load_so_libforms(), "fl_show_choices",
            cty.c_int, [xfc.STRING, cty.c_int, xfc.STRING, xfc.STRING,
            xfc.STRING, cty.c_int],
            """int fl_show_choices(const char * p1, int p2,
               const char * p3, const char * p4, const char * p5, int p6)
            """)
    smsgtxt = convert_to_string(msgtxt)
    ip2 = convert_to_int(p2)
    sp3 = convert_to_string(p3)
    sp4 = convert_to_string(p4)
    sp5 = convert_to_string(p5)
    ip6 = convert_to_int(p6)
    keep_elem_refs(msgtxt, p2, p3, p4, p5, p6, smsgtxt, ip2, sp3, sp4, sp5, ip6)
    retval = _fl_show_choices(smsgtxt, ip2, sp3, sp4, sp5, ip6)
    return retval


def fl_show_choice(p1, p2, p3, p4, p5, p6, p7, p8):
    """
        fl_show_choice(p1, p2, p3, p4, p5, p6, p7, p8) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_show_choice = cfuncproto(
            load_so_libforms(), "fl_show_choice",
            cty.c_int, [xfc.STRING, xfc.STRING, xfc.STRING, cty.c_int,
            xfc.STRING, xfc.STRING, xfc.STRING, cty.c_int],
            """int fl_show_choice(const char * p1, const char * p2,
               const char * p3, int p4, const char * p5, const char * p6,
               const char * p7, int p8)
            """)
    sp1 = convert_to_string(p1)
    sp2 = convert_to_string(p2)
    sp3 = convert_to_string(p3)
    ip4 = convert_to_int(p4)
    sp5 = convert_to_string(p5)
    sp6 = convert_to_string(p6)
    sp7 = convert_to_string(p7)
    ip8 = convert_to_int(p8)
    keep_elem_refs(sp1, sp2, sp3, ip4, sp5, sp6, sp7, ip8)
    retval = _fl_show_choice(sp1, sp2, sp3, ip4, sp5, sp6, sp7, ip8)
    return retval


def fl_hide_choice():
    """
        fl_hide_choice()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_hide_choice = cfuncproto(
            load_so_libforms(), "fl_hide_choice",
            None, [],
            """void fl_hide_choice()
            """)
    _fl_hide_choice()


def fl_set_choices_shortcut(p1, p2, p3):
    """
        fl_set_choices_shortcut(p1, p2, p3)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_choices_shortcut = cfuncproto(
            load_so_libforms(), "fl_set_choices_shortcut",
            None, [xfc.STRING, xfc.STRING, xfc.STRING],
            """void fl_set_choices_shortcut(const char * p1, const char * p2,
               const char * p3)
            """)
    sp1 = convert_to_string(p1)
    sp2 = convert_to_string(p2)
    sp3 = convert_to_string(p3)
    keep_elem_refs(p1, p2, p3, sp1, sp2, sp3)
    _fl_set_choices_shortcut(sp1, sp2, sp3)


fl_set_choice_shortcut = fl_set_choices_shortcut


# one liner

def fl_show_oneliner(p1, p2, p3):
    """
        fl_show_oneliner(p1, p2, p3)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_oneliner = cfuncproto(
            load_so_libforms(), "fl_show_oneliner",
            None, [xfc.STRING, xfc.FL_Coord, xfc.FL_Coord],
            """void fl_show_oneliner(const char * p1, FL_Coord p2,
               FL_Coord p3)
            """)
    sp1 = convert_to_string(p1)
    ip2 = convert_to_FL_Coord(p2)
    ip3 = convert_to_FL_Coord(p3)
    keep_elem_refs(p1, p2, p3, sp1, ip2, ip3)
    _fl_show_oneliner(sp1, ip2, ip3)


def fl_hide_oneliner():
    """
        fl_hide_oneliner()

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_hide_oneliner = cfuncproto(
            load_so_libforms(), "fl_hide_oneliner",
            None, [],
            """void fl_hide_oneliner()
            """)
    _fl_hide_oneliner()


def fl_set_oneliner_font(style, size):
    """
        fl_set_oneliner_font(style, size)

        @param style: label style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        @param size: label size (<int>)
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE, 
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_oneliner_font = cfuncproto(
            load_so_libforms(), "fl_set_oneliner_font",
            None, [cty.c_int, cty.c_int],
            """void fl_set_oneliner_font(int p1, int p2)
            """)
    check_admitted_listvalues(style, xfc.TEXTSTYLE_list)
    check_admitted_listvalues(size, xfc.FONTSIZE_list)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    keep_elem_refs(style, size, istyle, isize)
    _fl_set_oneliner_font(istyle, isize)


def fl_set_oneliner_color(fgcolr, bgcolr):
    """
         fl_set_oneliner_color(fgcolr, bgcolr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_oneliner_color = cfuncproto(
            load_so_libforms(), "fl_set_oneliner_color",
            None, [xfc.FL_COLOR, xfc.FL_COLOR],
            """void fl_set_oneliner_color(FL_COLOR p1, FL_COLOR p2)
            """)
    check_admitted_listvalues(fgcolr, xfc.COLOR_list)
    check_admitted_listvalues(bgcolr, xfc.COLOR_list)
    ulfgcolr = convert_to_FL_COLOR(fgcolr)
    ulbgcolr = convert_to_FL_COLOR(bgcolr)
    keep_elem_refs(fgcolr, bgcolr, ulfgcolr, ulbgcolr)
    _fl_set_oneliner_color(ulfgcolr, ulbgcolr)


def fl_set_tooltip_font(style, size):
    """
        fl_set_tooltip_font(style, size)

        @param style: label style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        @param size: label size (<int>)
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE, 
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_tooltip_font = cfuncproto(
            load_so_libforms(), "fl_set_tooltip_font",
            None, [cty.c_int, cty.c_int],
            """void fl_set_tooltip_font(int p1, int p2)
            """)
    check_admitted_listvalues(style, xfc.TEXTSTYLE_list)
    check_admitted_listvalues(size, xfc.FONTSIZE_list)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    keep_elem_refs(style, size, istyle, isize)
    _fl_set_tooltip_font(istyle, isize)


def fl_set_tooltip_color(fgcolr, bgcolr):
    """
        fl_set_tooltip_color(fgcolr, bgcolr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_tooltip_color = cfuncproto(
            load_so_libforms(), "fl_set_tooltip_color",
            None, [xfc.FL_COLOR, xfc.FL_COLOR],
            """void fl_set_tooltip_color(FL_COLOR p1, FL_COLOR p2)
            """)
    check_admitted_listvalues(fgcolr, xfc.COLOR_list)
    check_admitted_listvalues(bgcolr, xfc.COLOR_list)
    ulfgcolr = convert_to_FL_COLOR(fgcolr)
    ulbgcolr = convert_to_FL_COLOR(bgcolr)
    keep_elem_refs(fgcolr, bgcolr, ulfgcolr, ulbgcolr)
    _fl_set_tooltip_color(ulfgcolr, ulbgcolr)


def fl_set_tooltip_boxtype(boxtype):
    """
        fl_set_tooltip_boxtype(boxtype)

        @param boxtype: type of the box to be added (<int>)
        @type boxtype: (from xfdata module) FL_NO_BOX, FL_UP_BOX, FL_DOWN_BOX,
                       FL_BORDER_BOX, FL_SHADOW_BOX, FL_FRAME_BOX,
                       FL_ROUNDED_BOX, FL_EMBOSSED_BOX, FL_FLAT_BOX,
                       FL_RFLAT_BOX, FL_RSHADOW_BOX, FL_OVAL_BOX,
                       FL_ROUNDED3D_UPBOX, FL_ROUNDED3D_DOWNBOX,
                       FL_OVAL3D_UPBOX, FL_OVAL3D_DOWNBOX, FL_OVAL3D_FRAMEBOX,
                       FL_OVAL3D_EMBOSSEDBOX

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_tooltip_boxtype = cfuncproto(
            load_so_libforms(), "fl_set_tooltip_boxtype",
            None, [cty.c_int],
            """void fl_set_tooltip_boxtype(int p1)
            """)
    check_admitted_listvalues(boxtype, xfc.BOXTYPE_list)
    iboxtype = convert_to_int(boxtype)
    keep_elem_refs(boxtype, iboxtype)
    _fl_set_tooltip_boxtype(iboxtype)


def fl_set_tooltip_lalign(align):
    """
        fl_set_tooltip_lalign(align)

        @param align: alignment of tooltip (<int>)
        @type align: (from xfdata module) FL_ALIGN_CENTER, FL_ALIGN_TOP,
                     FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
                     FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP,
                     FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM,
                     FL_ALIGN_INSIDE, FL_ALIGN_VERT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_tooltip_lalign = cfuncproto(
            load_so_libforms(), "fl_set_tooltip_lalign",
            None, [cty.c_int],
            """void fl_set_tooltip_lalign(int p1)
            """)
    check_admitted_listvalues(align, xfc.ALIGN_list)
    ialign = convert_to_int(align)
    keep_elem_refs(align, ialign)
    _fl_set_tooltip_lalign(ialign)


def fl_exe_command(command, block):
    """
        fl_exe_command(command, block) -> exit status

        Forks a new process that runs specified command 

        @param command: a shell command line
        @param block: blocking flag indicating if the function should
           wait for the child process to finish (non-zero) or not (zero).

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_exe_command = cfuncproto(
            load_so_libforms(), "fl_exe_command",
            cty.c_long, [xfc.STRING, cty.c_int],
            """long int fl_exe_command(const char * p1, int p2)
            """)
    scommand = convert_to_string(command)
    iblock = convert_to_int(block)
    keep_elem_refs(command, block, scommand, iblock)
    retval = _fl_exe_command(scommand, iblock)
    return retval


fl_open_command = fl_exe_command


def fl_end_command(pid):
    """
        fl_end_command(pid) -> exit status

        Suspends the current process and waits until the child process is
        completed, then it returns the exit status of the child process or
        -1 if an error has occurred.

        @param pid: process id returned by fl_exe_command()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_end_command = cfuncproto(
            load_so_libforms(), "fl_end_command",
            cty.c_int, [cty.c_long],
            """int fl_end_command(long int p1)
            """)
    lpid = convert_to_long(pid)
    keep_elem_refs(pid, lpid)
    retval = _fl_end_command(lpid)
    return retval


fl_close_command = fl_end_command


def fl_check_command(pid):
    """
        fl_check_command(pid) -> exit status

        Polls the status of a child process. Returns 0 if the child process is
        finished; 1 if the child process still exists (running or stopped) and
        -1 if an error has occurred inside the function.

        @param pid: process id returned by fl_exe_command()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_check_command = cfuncproto(
            load_so_libforms(), "fl_check_command",
            cty.c_int, [cty.c_long],
            """int fl_check_command(long int p1)
            """)
    lpid = convert_to_long(pid)
    keep_elem_refs(pid, lpid)
    retval = _fl_check_command(lpid)
    return retval


def fl_popen(command, otype):
    """
        fl_popen(command, otype) -> pFile

        Executes the command in a child process, and logs the stderr messages
        into the command log. If type is "w", stdout will also be logged into
        the command browser.

        @param command: filename to execute (<string>)
        @param otype: type for opening (e.g. w, r ..) (<string>)

        @returns: pointer to FILE opened

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_popen = cfuncproto(
            load_so_libforms(), "fl_popen",
            cty.POINTER(xfc.FILE), [xfc.STRING, xfc.STRING],
            """FILE * fl_popen(const char * p1, const char * p2)
            """)
    scommand = convert_to_string(command)
    sotype = convert_to_string(otype)
    keep_elem_refs(command, otype, scommand, sotype)
    retval = _fl_popen(scommand, sotype)
    return retval


def fl_pclose(pFile):
    """
        fl_pclose(pFile) -> num.

        Cleans up the child process executed.

        @param pFile: opened file stream returned by fl_popen()
                      [pointer to FILE]

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_pclose = cfuncproto(
            load_so_libforms(), "fl_pclose",
            cty.c_int, [cty.POINTER(xfc.FILE)],
            """int fl_pclose(FILE * p1)
            """)
    keep_elem_refs(pFile)
    retval = _fl_pclose(pFile)
    return retval


def fl_end_all_command():
    """
        fl_end_all_command() -> exit status

        Wait for all the child processes initiated by fl_exe_command()
        to complete. Returns the status of the last child process.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_end_all_command = cfuncproto(
            load_so_libforms(), "fl_end_all_command",
            cty.c_int, [],
            """int fl_end_all_command()
            """)
    retval = _fl_end_all_command()
    return retval


def fl_show_command_log(border):
    """
        fl_show_command_log(border)

        Shows the log of the command output.

        @param border: window manager decoration (<int>)
        @type border: (from xfdata module) FL_FULLBORDER, FL_TRANSIENT,
                      FL_NOBORDER

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_show_command_log = cfuncproto(
            load_so_libforms(), "fl_show_command_log",
            None, [cty.c_int],
            """void fl_show_command_log(int p1)
            """)
    check_admitted_listvalues(border, xfc.DECORATION_list)
    iborder = convert_to_int(border)
    keep_elem_refs(border, iborder)
    _fl_show_command_log(iborder)


def fl_hide_command_log():
    """
        fl_hide_command_log()

        Hides the log of the command output.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_hide_command_log = cfuncproto(
            load_so_libforms(), "fl_hide_command_log",
            None, [],
            """void fl_hide_command_log()
            """)
    _fl_hide_command_log()


def fl_clear_command_log():
    """
        fl_clear_command_log()

        Clears the browser and the logging output displayed within it.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_clear_command_log = cfuncproto(
            load_so_libforms(), "fl_clear_command_log",
            None, [],
            """void fl_clear_command_log()
            """)
    _fl_clear_command_log()


def fl_addto_command_log(txtstr):
    """
        fl_addto_command_log(txtstr)

        Adds arbitrary text to the command browser 

        @param txtstr: text line to be added <string>

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_addto_command_log = cfuncproto(
            load_so_libforms(), "fl_addto_command_log",
            None, [xfc.STRING],
            """void fl_addto_command_log(const char * p1)
            """)
    stxtstr = convert_to_string(txtstr)
    keep_elem_refs(txtstr, stxtstr)
    _fl_addto_command_log(stxtstr)


def fl_set_command_log_position(x, y):
    """
        fl_set_command_log_position(x, y)

        Changes the default placement of the command log.

        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_command_log_position = cfuncproto(
            load_so_libforms(), "fl_set_command_log_position",
            None, [cty.c_int, cty.c_int],
            """void fl_set_command_log_position(int p1, int p2)
            """)
    ix = convert_to_int(x)
    iy = convert_to_int(y)
    keep_elem_refs(x, y, ix, iy)
    _fl_set_command_log_position(ix, iy)


def fl_get_command_log_fdstruct():
    """
        fl_get_command_log_fdstruct() -> pCmdlog

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_command_log_fdstruct = cfuncproto(
            load_so_libforms(), "fl_get_command_log_fdstruct",
            cty.POINTER(xfc.FD_CMDLOG), [],
            """)FD_CMDLOG * fl_get_command_log_fdstruct()
            """)
    retval = _fl_get_command_log_fdstruct()
    return retval


# file selector

def fl_use_fselector(num):
    """
        fl_use_fselector(num) -> num.

        @param num: fselector number to use (<int>)
        @type num: between 0 and xfdata.FL_MAX_FSELECTOR - 1

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_use_fselector = cfuncproto(
            load_so_libforms(), "fl_use_fselector",
            cty.c_int, [cty.c_int],
            """int fl_use_fselector(int p1)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(num, inum)
    retval = _fl_use_fselector(inum)
    return retval


def fl_show_fselector(msgtxt, p2, p3, p4):
    """
        fl_show_fselector(msgtxt, p2, p3, p4) -> fselector string

        @param msgtxt: (<string>)
        @param p2: (<string>)
        @param p3: (<string>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_show_fselector = cfuncproto(
            load_so_libforms(), "fl_show_fselector",
            xfc.STRING, [xfc.STRING, xfc.STRING, xfc.STRING, xfc.STRING],
            """const char * fl_show_fselector(const char * p1,
               const char * p2, const char * p3, const char * p4)
            """)
    smsgtxt = convert_to_string(msgtxt)
    sp2 = convert_to_string(p2)
    sp3 = convert_to_string(p3)
    sp4 = convert_to_string(p4)
    keep_elem_refs(msgtxt, p2, p3, p4, smsgtxt, sp2, sp3, sp4)
    retval = _fl_show_fselector(smsgtxt, sp2, sp3, sp4)
    return retval


fl_show_file_selector = fl_show_fselector


def fl_set_fselector_fontsize(size):
    """
        fl_set_fselector_fontsize(size)

        @param size: label size [<int>]
        @type size: (from xfdata module) FL_TINY_SIZE, FL_SMALL_SIZE, 
                    FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
                    FL_HUGE_SIZE, FL_DEFAULT_SIZE

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_fselector_fontsize = cfuncproto(
            load_so_libforms(), "fl_set_fselector_fontsize",
            None, [cty.c_int],
            """void fl_set_fselector_fontsize(int p1)
            """)
    check_admitted_listvalues(size, xfc.FONTSIZE_list)
    isize = convert_to_int(size)
    keep_elem_refs(size, isize)
    _fl_set_fselector_fontsize(isize)


def fl_set_fselector_fontstyle(style):
    """
        fl_set_fselector_fontstyle(style)

        @param style: label style (<int>)
        @type style: (from xfdata module) FL_NORMAL_STYLE, FL_BOLD_STYLE,
                     FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                     FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                     FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                     FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                     FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                     FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
                     FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_fselector_fontstyle = cfuncproto(
            load_so_libforms(), "fl_set_fselector_fontstyle",
            None, [cty.c_int],
            """void fl_set_fselector_fontstyle(int p1)
            """)
    check_admitted_listvalues(style, xfc.TEXTSTYLE_list)
    istyle = convert_to_int(style)
    keep_elem_refs(style, istyle)
    _fl_set_fselector_fontstyle(istyle)


def fl_set_fselector_placement(place):
    """
        fl_set_fselector_placement(place)

        @param place: where to place it (<int>)
        @type place: (from xfdata module) FL_PLACE_FREE, FL_PLACE_MOUSE,
                     FL_PLACE_CENTER, FL_PLACE_POSITION, FL_PLACE_SIZE,
                     FL_PLACE_GEOMETRY, FL_PLACE_ASPECT, FL_PLACE_FULLSCREEN,
                     FL_PLACE_HOTSPOT, FL_PLACE_ICONIC, FL_FREE_SIZE,
                     FL_PLACE_FREE_CENTER, FL_PLACE_CENTERFREE

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_fselector_placement = cfuncproto(
            load_so_libforms(), "fl_set_fselector_placement",
            None, [cty.c_int],
            """void fl_set_fselector_placement(int p1)
            """)
    check_admitted_listvalues(place, xfc.PLACE_list)
    iplace = convert_to_int(place)
    keep_elem_refs(place, iplace)
    _fl_set_fselector_placement(iplace)


def fl_set_fselector_border(border):
    """
        fl_set_fselector_border(border)

        @param border: window manager decoration (<int>)
        @type border: (from xfdata module) FL_FULLBORDER, FL_TRANSIENT,
                      FL_NOBORDER

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_fselector_border = cfuncproto(
            load_so_libforms(), "fl_set_fselector_border",
            None, [cty.c_int],
            """void fl_set_fselector_border(int p1)
            """)
    check_admitted_listvalues(border, xfc.DECORATION_list)
    iborder = convert_to_int(border)
    keep_elem_refs(border, iborder)
    _fl_set_fselector_border(iborder)


def fl_set_fselector_transient(flag):
    """
        fl_set_fselector_transient(flag)

        @param flag: flag if transient or not (<int>)
        @type flag: 1 (transient) or 0 (not transient)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    if flag:
        argval = xfc.FL_TRANSIENT
    else:
        argval = xfc.FL_FULLBORDER
    fl_set_fselector_border(argval)


FL_FSCB = cty.CFUNCTYPE(cty.c_int, xfc.STRING, cty.c_void_p)

def fl_set_fselector_callback(py_FSCB, vdata):
    """
        fl_set_fselector_callback(py_FSCB, vdata)

        @param py_FSCB: python function callback, returning value
        @type py_FSCB: __ funcname (string, ptr_void) -> num __
        @param vdata: user data to be passed to function [pointer to void]

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_fselector_callback = cfuncproto(
            load_so_libforms(), "fl_set_fselector_callback",
            None, [FL_FSCB, cty.c_void_p],
            """void fl_set_fselector_callback(FL_FSCB p1, void * p2)
            """)
    c_FSCB = FL_FSCB(py_FSCB)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_cfunc_refs(c_FSCB, py_FSCB)
    keep_elem_refs(vdata, pvdata)
    _fl_set_fselector_callback(c_FSCB, pvdata)


fl_set_fselector_cb = fl_set_fselector_callback


def fl_get_filename():
    """
        fl_get_filename() -> fname

        @returns: name of file (<string>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_filename = cfuncproto(
            load_so_libforms(), "fl_get_filename",
            xfc.STRING, [],
            """const char * fl_get_filename()
            """)
    retval = _fl_get_filename()
    return retval


def fl_get_directory():
    """
        fl_get_directory() -> dirname

        @returns: name of directory (<string>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_directory = cfuncproto(
            load_so_libforms(), "fl_get_directory",
            xfc.STRING, [],
            """const char * fl_get_directory()
            """)
    retval = _fl_get_directory()
    return retval


def fl_get_pattern():
    """
        fl_get_pattern() -> pattern

        @returns: pattern text (<string>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_pattern = cfuncproto(
            load_so_libforms(), "fl_get_pattern",
            xfc.STRING, [],
            """const char * fl_get_pattern()
            """)
    retval = _fl_get_pattern()
    return retval


def fl_set_directory(dirname):
    """
        fl_set_directory(dirname) -> num.

        @param dirname: name of directory to be set (<string>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_directory = cfuncproto(
            load_so_libforms(), "fl_set_directory",
            cty.c_int, [xfc.STRING],
            """int fl_set_directory(const char * p1)
            """)
    sdirname = convert_to_string(dirname)
    keep_elem_refs(dirname, sdirname)
    retval = _fl_set_directory(sdirname)
    return retval


def fl_set_pattern(pattern):
    """
        fl_set_pattern(pattern)

        @param pattern: text of pattern (<string>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_pattern = cfuncproto(
            load_so_libforms(), "fl_set_pattern",
            None, [xfc.STRING],
            """void fl_set_pattern(const char * p1)
            """)
    spattern = convert_to_string(pattern)
    keep_elem_refs(pattern, spattern)
    _fl_set_pattern(spattern)


def fl_refresh_fselector():
    """
        fl_refresh_fselector()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_refresh_fselector = cfuncproto(
            load_so_libforms(), "fl_refresh_fselector",
            None, [],
            """void fl_refresh_fselector()
            """)
    _fl_refresh_fselector()


# c function prototype for _fl_add_fselector_appbutton
cfunc_none_voidp = cty.CFUNCTYPE(None, cty.c_void_p)

def fl_add_fselector_appbutton(label, py_fn, vdata):
    """
        fl_add_fselector_appbutton(label, py_fn, vdata)

        @param label: text of label (<string>)
        @param py_fn: python function callback - no return
        @type py_fn: __ funcname (ptr_void) __
        @param vdata: user data to be passed to function (<pointer to void>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_fselector_appbutton = cfuncproto(
            load_so_libforms(), "fl_add_fselector_appbutton",
            None, [xfc.STRING, cfunc_none_voidp, cty.c_void_p],
            """void fl_add_fselector_appbutton(const char * p1,
               const char * p2, void * p3)
            """)
    slabel = convert_to_string(label)
    c_fn = cfunc_none_voidp(py_fn)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_cfunc_refs(c_fn, py_fn)
    keep_elem_refs(label, vdata, slabel, pvdata)
    _fl_add_fselector_appbutton(slabel, c_fn, pvdata)


def fl_remove_fselector_appbutton(label):
    """
        fl_remove_fselector_appbutton(label)

        @param label: text of label (<string>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_remove_fselector_appbutton = cfuncproto(
            load_so_libforms(), "fl_remove_fselector_appbutton",
            None, [xfc.STRING],
            """void fl_remove_fselector_appbutton(const char * p1)
            """)
    slabel = convert_to_string(label)
    keep_elem_refs(label, slabel)
    _fl_remove_fselector_appbutton(slabel)


def fl_disable_fselector_cache(yes):
    """
        fl_disable_fselector_cache(yes)

        @param yes: (<int>)
        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_disable_fselector_cache = cfuncproto(
            load_so_libforms(), "fl_disable_fselector_cache",
            None, [cty.c_int],
            """void fl_disable_fselector_cache(int p1)
            """)
    iyes = convert_to_int(yes)
    keep_elem_refs(yes, iyes)
    _fl_disable_fselector_cache(iyes)


def fl_invalidate_fselector_cache():
    """
        fl_invalidate_fselector_cache()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_invalidate_fselector_cache = cfuncproto(
            load_so_libforms(), "fl_invalidate_fselector_cache",
            None, [],
            """void fl_invalidate_fselector_cache()
            """)
    _fl_invalidate_fselector_cache()


def fl_get_fselector_form():
    """
        fl_get_fselector_form() -> pForm

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_fselector_form = cfuncproto(
            load_so_libforms(), "fl_get_fselector_form",
            cty.POINTER(xfc.FL_FORM), [],
            """FL_FORM * fl_get_fselector_form()
            """)
    retval = _fl_get_fselector_form()
    return retval


def fl_get_fselector_fdstruct():
    """
        fl_get_fselector_fdstruct() -> fselector_cls

        @returns: pointer to xfdata.FD_FSELECTOR

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_fselector_fdstruct = cfuncproto(
            load_so_libforms(), "fl_get_fselector_fdstruct",
            cty.POINTER(xfc.FD_FSELECTOR), [],
            """FD_FSELECTOR * fl_get_fselector_fdstruct()
            """)
    retval = _fl_get_fselector_fdstruct()
    return retval


def fl_hide_fselector():
    """
        fl_hide_fselector()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_hide_fselector = cfuncproto(
            load_so_libforms(), "fl_hide_fselector",
            None, [],
            """void fl_hide_fselector()
            """)
    _fl_hide_fselector()


def fl_set_fselector_filetype_marker(p1, p2, p3, p4, p5):
    """ fl_set_fselector_filetype_marker(p1, p2, p3, p4, p5)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_fselector_filetype_marker = cfuncproto(
            load_so_libforms(), "fl_set_fselector_filetype_marker",
            None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int],
            """void fl_set_fselector_filetype_marker(int p1, int p2, int p3,
               int p4, int p5)
            """)
    ip1 = convert_to_int(p1)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    ip4 = convert_to_int(p4)
    ip5 = convert_to_int(p5)
    keep_elem_refs(p1, p2, p3, p4, p5, ip1, ip2, ip3, ip4, ip5)
    _fl_set_fselector_filetype_marker(ip1, ip2, ip3, ip4, ip5)


def fl_set_fselector_title(title):
    """ fl_set_fselector_title(title)

        @param title: title to be set (<string>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    fl_set_form_title(fl_get_fselector_form(), title)


def fl_goodies_atclose(pForm, vdata):
    """ fl_goodies_atclose(pForm, vdata) -> num.

        @param pForm: form
                      (<pointer to xfdata.FL_FORM>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_goodies_atclose = cfuncproto(
            load_so_libforms(), "fl_goodies_atclose",
            cty.c_int, [cty.POINTER(xfc.FL_FORM), cty.c_void_p],
            """int fl_goodies_atclose(FL_FORM * p1, void * p2)
            """)
    pvdata = cty.cast(vdata, cty.c_void_p)
    keep_elem_refs(pForm, vdata, pvdata)
    retval = _fl_goodies_atclose(pForm, pvdata)
    return retval



####################
# forms.h (input.h)
####################

# Routines

# fl_create_input function placeholder (internal)


def fl_add_input(inputtype, x, y, w, h, label):
    """
        fl_add_input(inputtype, x, y, w, h, label) -> pObject

        Adds an input object.

        @param inputtype: type of input to be added (<int>)
        @type inputtype: (from xfdata module) FL_NORMAL_INPUT, FL_FLOAT_INPUT,
                         FL_INT_INPUT, FL_DATE_INPUT, FL_MULTILINE_INPUT,
                         FL_HIDDEN_INPUT, FL_SECRET_INPUT
        @param x: horizontal position (upper-left corner) (<int>)
        @param x: vertical position (upper-left corner) (<int>)
        @param w: width in coord units (<int>)
        @param h: height in coord units (<int>)
        @param label: text label of input (<string>)

        @returns: object created (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + Doc + Demo = OK
    """

    _fl_add_input = cfuncproto(
            load_so_libforms(), "fl_add_input",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_input(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(inputtype, xfc.INPUTTYPE_list)
    iinputtype = convert_to_int(inputtype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(inputtype, x, y, w, h, label, iinputtype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_input(iinputtype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_input(pObject, text):
    """
        fl_set_input(pObject, text)

        Sets the particular input string, with no checks for validity.
        An empty string can be used to clear an input field. 

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)
        @param text: input text (<string>)

        @status: Tested + Doc + Demo = OK
    """

    _fl_set_input = cfuncproto(
            load_so_libforms(), "fl_set_input",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING],
            """void fl_set_input(FL_OBJECT * ob, const char * str)
            """)
    stext = convert_to_string(text)
    keep_elem_refs(pObject, text, stext)
    _fl_set_input(pObject, stext)


# fl_set_input_return function placeholder (internal)


def fl_set_input_color(pObject, txtcolr, curscolr):
    """
        fl_set_input_color(pObject, txtcolr, curscolr)

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)
        @param txtcolr: color value for text <long(pos)>
        @param curscolr: color value for cursor <long(pos)>

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_input_color = cfuncproto(
            load_so_libforms(), "fl_set_input_color",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_COLOR, xfc.FL_COLOR],
            """void fl_set_input_color(FL_OBJECT * ob, FL_COLOR textcol,
               FL_COLOR curscol)
            """)
    check_admitted_listvalues(txtcolr, xfc.COLOR_list)
    check_admitted_listvalues(curscolr, xfc.COLOR_list)
    ultxtcolr = convert_to_FL_COLOR(txtcolr)
    ulcurscolr = convert_to_FL_COLOR(curscolr)
    keep_elem_refs(pObject, txtcolr, curscolr, ultxtcolr, ulcurscolr)
    _fl_set_input_color(pObject, ultxtcolr, ulcurscolr)


def fl_get_input_color(pObject):
    """
        fl_get_input_color(pObject) -> txtcolr, curscolr

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: color value for text, color value for cursor
                  <long(pos), long(pos)>

        @attention: API change from XForms - upstream was
                    fl_get_input_color(pObject, textcolr, curscolr)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_input_color = cfuncproto(
            load_so_libforms(), "fl_get_input_color",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_COLOR),
            cty.POINTER(xfc.FL_COLOR)],
            """void fl_get_input_color(FL_OBJECT * ob, FL_COLOR * textcol,
               FL_COLOR * curscol)
            """)
    txtcolr, ptxtcolr = make_FL_COLOR_and_pointer()
    curscolr, pcurscolr = make_FL_COLOR_and_pointer()
    keep_elem_refs(pObject, txtcolr, curscolr)
    _fl_get_input_color(pObject, ptxtcolr, pcurscolr)
    return txtcolr, curscolr


def fl_set_input_scroll(pObject, yes):
    """
        fl_set_input_scroll(pObject, yes)

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)
        @param yes: (<int>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_input_scroll = cfuncproto(
            load_so_libforms(), "fl_set_input_scroll",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_input_scroll(FL_OBJECT * ob, int yes)
            """)
    iyes = convert_to_int(yes)
    keep_elem_refs(pObject, yes, iyes)
    _fl_set_input_scroll(pObject, iyes)


def fl_set_input_cursorpos(pObject, xpos, ypos):
    """
        fl_set_input_cursorpos(pObject, xpos, ypos)

        Moves the cursor within the input field.

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)
        @param xpos: horizontal cursor position in characters (<int>)
        @param ypos: vertical cursor position in lines (<int>)

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_set_input_cursorpos = cfuncproto(
            load_so_libforms(), "fl_set_input_cursorpos",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_input_cursorpos(FL_OBJECT * ob, int xpos, int ypos)
            """)
    ixpos = convert_to_int(xpos)
    iypos = convert_to_int(ypos)
    keep_elem_refs(pObject, xpos, ypos, ixpos, iypos)
    _fl_set_input_cursorpos(pObject, ixpos, iypos)


def fl_set_input_selected(pObject, flag):
    """
        fl_set_input_selected(pObject, flag)

        Selects or deselects the current input. It places the cursor at
        the end of the string when selected 

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)
        @param flag: flag to deselect/select (<int>)
        @type flag: 0 or 1

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_input_selected = cfuncproto(
            load_so_libforms(), "fl_set_input_selected",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_input_selected(FL_OBJECT * ob, int yes)
            """)
    iflag = convert_to_int(flag)
    keep_elem_refs(pObject, flag, iflag)
    _fl_set_input_selected(pObject, iflag)


def fl_set_input_selected_range(pObject, begin, end):
    """
        fl_set_input_selected_range(pObject, begin, end)

        Selects or deselects the current input of part of it. When begin is
        0 and end is the last character number, all input is selected. It
        places the cursor at the beginning of selected string.

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)
        @param begin: starting value in characters (<int>)
        @param end: ending value in characters (<int>)

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_set_input_selected_range = cfuncproto(
            load_so_libforms(), "fl_set_input_selected_range",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_input_selected_range(FL_OBJECT * ob,
               int begin, int end)
            """)
    ibegin = convert_to_int(begin)
    iend = convert_to_int(end)
    keep_elem_refs(pObject, begin, end, ibegin, iend)
    _fl_set_input_selected_range(pObject, ibegin, iend)


def fl_get_input_selected_range(pObject):
    """
        fl_get_input_selected_range(pObject) -> string, begin, end

        Obtains the currently selected range, either selected by the
        application or by the user.

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: selected string, starting and ending values of selection
                  in characters [string, int_num, int_num]

        @attention: API change from XForms - upstream was
                    fl_get_input_selected_range(pObject, begin, end)

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_get_input_selected_range = cfuncproto(
            load_so_libforms(), "fl_get_input_selected_range",
            xfc.STRING, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """const char * fl_get_input_selected_range(FL_OBJECT * ob,
               int * begin, int * end)
            """)
    begin, pbegin = make_int_and_pointer()
    end, pend = make_int_and_pointer()
    keep_elem_refs(pObject, begin, end, pbegin, pend)
    retval = _fl_get_input_selected_range(pObject, pbegin, pend)
    return retval, begin, end


def fl_set_input_maxchars(pObject, maxchars):
    """
        fl_set_input_maxchars(pObject, maxchars)

        Limits the number of characters per line for input fields of type
        xfdata.FL_NORMAL_INPUT. To reset the limit to infinite, set maxchars
        to 0. Note that input objects of types xfdata.FL_DATE_INPUT are
        limited to 10 characters per default and those of type
        xfdata.FL_SECRET_INPUT to 16.
 
        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)
        @param maxchars: maximum characters to be set (<int>)

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_set_input_maxchars = cfuncproto(
            load_so_libforms(), "fl_set_input_maxchars",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_input_maxchars(FL_OBJECT * ob, int maxchars)
            """)
    imaxchars = convert_to_int(maxchars)
    keep_elem_refs(pObject, maxchars, imaxchars)
    _fl_set_input_maxchars(pObject, imaxchars)


def fl_set_input_format(pObject, fmt, sep):
    """
        fl_set_input_format(pObject, fmt, sep)

        Sets the format used for an input object. Currently used only for
        xfdata.FL_DATE_INPUT objects.

        @param fmt: format for the input (<int>)
        @type fmt: (from xfdata module) FL_INPUT_DDMM, FL_INPUT_MMDD
        @param sep: printable single character used as separator
                    <int or char>

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_set_input_format = cfuncproto(
            load_so_libforms(), "fl_set_input_format",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_input_format(FL_OBJECT * ob, int fmt, int sep)
            """)
    check_admitted_listvalues(fmt, xfc.DATEFMT_list)
    if isinstance(sep, str):
        ordsep = ord(sep)        # workaround to let a character as int argument
    else:
        ordsep = sep
    ifmt = convert_to_int(fmt)
    isep = convert_to_int(ordsep)
    keep_elem_refs(pObject, fmt, sep, ordsep, ifmt, isep)
    _fl_set_input_format(pObject, ifmt, isep)


def fl_set_input_hscrollbar(pObject, pref):
    """
        fl_set_input_hscrollbar(pObject, pref)

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)
        @param pref: horizontal scrollbar flag (<int>)
        @type pref: (from xfdata module) FL_AUTO, FL_ON, FL_OFF

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_input_hscrollbar = cfuncproto(
            load_so_libforms(), "fl_set_input_hscrollbar",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_input_hscrollbar(FL_OBJECT * ob, int pref)
            """)
    check_admitted_listvalues(pref, xfc.SCROLLBARVAL_list)
    ipref = convert_to_int(pref)
    keep_elem_refs(pObject, pref, ipref)
    _fl_set_input_hscrollbar(pObject, ipref)


def fl_set_input_vscrollbar(pObject, pref):
    """
        fl_set_input_vscrollbar(pObject, pref)

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)
        @param pref: vertical scrollbar flag (<int>)
        @type pref: (from xfdata module) FL_AUTO, FL_ON, FL_OFF

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_input_vscrollbar = cfuncproto(
            load_so_libforms(), "fl_set_input_vscrollbar",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_input_vscrollbar(FL_OBJECT * ob, int pref)
            """)
    check_admitted_listvalues(pref, xfc.SCROLLBARVAL_list)
    ipref = convert_to_int(pref)
    keep_elem_refs(pObject, pref, ipref)
    _fl_set_input_vscrollbar(pObject, ipref)


def fl_set_input_topline(pObject, top):
    """
        fl_set_input_topline(pObject, top)

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)
        @param top: ? (<int>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_input_topline = cfuncproto(
            load_so_libforms(), "fl_set_input_topline",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_input_topline(FL_OBJECT * ob, int top)
            """)
    itop = convert_to_int(top)
    keep_elem_refs(pObject, top, itop)
    _fl_set_input_topline(pObject, itop)


def fl_set_input_scrollbarsize(pObject, hh, vw):
    """
        fl_set_input_scrollbarsize(pObject, hh, vw)

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_input_scrollbarsize = cfuncproto(
            load_so_libforms(), "fl_set_input_scrollbarsize",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_input_scrollbarsize(FL_OBJECT * ob, int hh, int vw)
            """)
    ihh = convert_to_int(hh)
    ivw = convert_to_int(vw)
    keep_elem_refs(pObject, hh, vw, ihh, ivw)
    _fl_set_input_scrollbarsize(pObject, ihh, ivw)


def fl_get_input_scrollbarsize(pObject):
    """
        fl_get_input_scrollbarsize(pObject) -> hh, vw


        @attention: API change from XForms - upstream was
                    fl_get_input_scrollbarsize(pObject, hh, vw)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_input_scrollbarsize = cfuncproto(
            load_so_libforms(), "fl_get_input_scrollbarsize",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """void fl_get_input_scrollbarsize(FL_OBJECT * ob,
               int * hh, int * vw)
            """)
    hh, phh = make_int_and_pointer()
    vw, pvw = make_int_and_pointer()
    keep_elem_refs(pObject, hh, vw)
    _fl_get_input_scrollbarsize(pObject, phh, pvw)
    return hh, vw


def fl_set_input_xoffset(pObject, xoff):
    """
        fl_set_input_xoffset(pObject, xoff)

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_input_xoffset = cfuncproto(
            load_so_libforms(), "fl_set_input_xoffset",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_input_xoffset(FL_OBJECT * ob, int xoff)
            """)
    ixoff = convert_to_int(xoff)
    keep_elem_refs(pObject, xoff, ixoff)
    _fl_set_input_xoffset(pObject, ixoff)


def fl_get_input_xoffset(pObject):
    """
        fl_get_input_xoffset(pObject) -> num.

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_input_xoffset = cfuncproto(
            load_so_libforms(), "fl_get_input_xoffset",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_input_xoffset(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_input_xoffset(pObject)
    return retval


def fl_set_input_fieldchar(pObject, fldchar):
    """
        fl_set_input_fieldchar(pObject, fldchar) -> num.

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_input_fieldchar = cfuncproto(
            load_so_libforms(), "fl_set_input_fieldchar",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """int fl_set_input_fieldchar(FL_OBJECT * ob, int fchar)
            """)
    ifldchar = convert_to_int(fldchar)
    keep_elem_refs(pObject, fldchar, ifldchar)
    retval = _fl_set_input_fieldchar(pObject, ifldchar)
    return retval


def fl_get_input_topline(pObject):
    """
        fl_get_input_topline(pObject) -> num.

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_input_topline = cfuncproto(
            load_so_libforms(), "fl_get_input_topline",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_input_topline(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_input_topline(pObject)
    return retval


def fl_get_input_screenlines(pObject):
    """
        fl_get_input_screenlines(pObject) -> num.

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_input_screenlines = cfuncproto(
            load_so_libforms(), "fl_get_input_screenlines",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_input_screenlines(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_input_screenlines(pObject)
    return retval


def fl_get_input_cursorpos(pObject):
    """
        fl_get_input_cursorpos(pObject) -> num., x, y

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)

        @attention: API change from XForms - upstream was
                    fl_get_input_cursorpos(pObject, x, y)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_input_cursorpos = cfuncproto(
            load_so_libforms(), "fl_get_input_cursorpos",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """int fl_get_input_cursorpos(FL_OBJECT * ob, int * x, int * y)
            """)
    x, px = make_int_and_pointer()
    y, py = make_int_and_pointer()
    keep_elem_refs(pObject, x, y)
    retval = _fl_get_input_cursorpos(pObject, px, py)
    return retval, x, y


def fl_set_input_cursor_visible(pObject, visible):
    """
        fl_set_input_cursor_visible(pObject, visible)

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_input_cursor_visible = cfuncproto(
            load_so_libforms(), "fl_set_input_cursor_visible",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_input_cursor_visible(FL_OBJECT * ob, int visible)
            """)
    ivisible = convert_to_int(visible)
    keep_elem_refs(pObject, visible, ivisible)
    _fl_set_input_cursor_visible(pObject, ivisible)


def fl_get_input_numberoflines(pObject):
    """
        fl_get_input_numberoflines(pObject) -> lines num.

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_input_numberoflines = cfuncproto(
            load_so_libforms(), "fl_get_input_numberoflines",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_input_numberoflines(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_input_numberoflines(pObject)
    return retval


def fl_get_input_format(pObject):
    """
        fl_get_input_format(pObject) -> fmt, sep

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)

        @attention: API change from XForms - upstream was
                    fl_get_input_format(pObject, fmt, sep)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_input_format = cfuncproto(
            load_so_libforms(), "fl_get_input_format",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """void fl_get_input_format(FL_OBJECT * ob, int * fmt, int * sep)
            """)
    fmt, pfmt = make_int_and_pointer()
    sep, psep = make_int_and_pointer()
    keep_elem_refs(pObject, fmt, sep, pfmt, psep)
    _fl_get_input_format(pObject, pfmt, psep)
    return fmt, sep


def fl_get_input(pObject):
    """
        fl_get_input(pObject) -> input string

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_input = cfuncproto(
            load_so_libforms(), "fl_get_input",
            xfc.STRING, [cty.POINTER(xfc.FL_OBJECT)],
            """const char * fl_get_input(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_input(pObject)
    return retval


FL_INPUTVALIDATOR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfc.FL_OBJECT),
                                  xfc.STRING, xfc.STRING, cty.c_int)

def fl_set_input_filter(pObject, py_InputValidator):
    """
        fl_set_input_filter(pObject, py_InputValidator) -> input_filter func.

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_input_filter = cfuncproto(
            load_so_libforms(), "fl_set_input_filter",
            FL_INPUTVALIDATOR, [cty.POINTER(xfc.FL_OBJECT), FL_INPUTVALIDATOR],
            """FL_INPUTVALIDATOR fl_set_input_filter(FL_OBJECT * ob,
               FL_INPUTVALIDATOR validate)
            """)
    c_InputValidator = FL_INPUTVALIDATOR(py_InputValidator)
    keep_cfunc_refs(c_InputValidator, py_InputValidator)
    keep_elem_refs(pObject)
    retval = _fl_set_input_filter(pObject, c_InputValidator)
    return retval


def fl_validate_input(pObject):
    """
        fl_validate_input(pObject) -> num.

        Tests if the value in an input field is valid. It returns
        xfdata.FL_VALID if the value is valid or if there is no validator
        function set for the input, otherwise xfdata.FL_INVALID. 

        @param pObject: input object
                        (<pointer to xfdata.FL_OBJECT>)

        @returns: (from xfdata module) FL_VALID or FL_INVALID (<int>)

        @status: Untested + Doc + NoDemo = NOT OK
    """

    _fl_validate_input = cfuncproto(
            load_so_libforms(), "fl_validate_input",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_validate_input(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_validate_input(pObject)
    return retval


fl_set_input_shortcut = fl_set_object_shortcut


# edit keys

def fl_set_input_editkeymap(pEditKeymap):
    """
        fl_set_input_editkeymap(pEditKeymap)

        @param pEditKeymap: EditKeyMap class
                            [pointer to xfdata.FL_EditKeymap]

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_input_editkeymap = cfuncproto(
            load_so_libforms(), "fl_set_input_editkeymap",
            None, [cty.POINTER(xfc.FL_EditKeymap)],
            """void fl_set_input_editkeymap(const char * keymap)
            """)
    keep_elem_refs(pEditKeymap)
    _fl_set_input_editkeymap(pEditKeymap)



#####################
# forms.h (menu.h)
# Object Class: Menu
#####################

# fl_create_menu function placeholder (internal and deprecated)
# fl_add_menu function placeholder (deprecated)
# fl_clear_menu function placeholder (deprecated)
# fl_set_menu function placeholder (deprecated)
# fl_addto_menu function placeholder (deprecated)
# fl_replace_menu function placeholder (deprecated)
# fl_delete_menu function placeholder (deprecated)
# fl_set_menu_item_callback function placeholder (deprecated)
# fl_set_menu_item_shortcut function placeholder (deprecated)
# fl_set_menu_item_mode function placeholder (deprecated)
# fl_show_menu_symbol function placeholder (deprecated)
# fl_set_menu_popup function placeholder (deprecated)
# fl_get_menu_popup function placeholder (deprecated)
# fl_get_menu function placeholder (deprecated)
# fl_get_menu_item_text function placeholder (deprecated)
# fl_get_menu_maxitems function placeholder (deprecated)
# fl_get_menu_item_mode function placeholder (deprecated)
# fl_get_menu_text function placeholder (deprecated)
# fl_set_menu_entries function placeholder (deprecated)
# fl_set_menu_notitle function placeholder (deprecated)
# fl_set_menu_item_id function placeholder (deprecated)




#####################
# forms.h (nmenu.h)
#####################

# Nmenu object types

# fl_create_nmenu function placeholder (internal)


def fl_add_nmenu(nmenutype, x, y, w, h, label):
    """
        fl_add_nmenu(nmenutype, x, y, w, h, label) -> pObject

        Adds a nmenu object.

        @param nmenutype: type of nmenu to be added
        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of nmenu object

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_nmenu = cfuncproto(
            load_so_libforms(), "fl_add_nmenu",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_nmenu(int p1, FL_Coord p2, FL_Coord p3,
               FL_Coord p4, FL_Coord p5, const char * p6)
            """)
    check_admitted_listvalues(nmenutype, xfc.NMENUTYPE_list)
    inmenutype = convert_to_int(nmenutype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(nmenutype, x, y, w, h, label, inmenutype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_nmenu(inmenutype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_nmenu(pObject):
    """
        fl_clear_nmenu(pObject) -> num.


        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_clear_nmenu = cfuncproto(
            load_so_libforms(), "fl_clear_nmenu",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_clear_nmenu(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    retval = _fl_clear_nmenu(pObject)
    return retval


def fl_add_nmenu_items(pObject, itemstr):
    """
        fl_add_nmenu_items(pObject, itemstr) -> pPopupEntry

        @param pObject: nmenu object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: HalfTested + NoDoc + Demo = NOT OK (sequence param.)
    """

    _fl_add_nmenu_items = cfuncproto(
            load_so_libforms(), "fl_add_nmenu_items",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT),
            xfc.STRING],
            """FL_POPUP_ENTRY * fl_add_nmenu_items(FL_OBJECT * p1,
               const char * p2)
            """)
    sitemstr = convert_to_string(itemstr)
    keep_elem_refs(pObject, itemstr, sitemstr)
    retval = _fl_add_nmenu_items(pObject, sitemstr)
    return retval


def fl_insert_nmenu_items(pObject, pPopupEntry, itemstr):
    """
        fl_insert_nmenu_items(pObject, pPopupEntry, itemstr) -> pPopupEntry

        @param pObject: nmenu object
                        (<pointer to xfdata.FL_OBJECT>)
        @param itemstr: text of the item (among special sequences only %S is
                        supported)

        @status: HalfTested + NoDoc + Demo = NOT OK (special sequences)
    """

    _fl_insert_nmenu_items = cfuncproto(
            load_so_libforms(), "fl_insert_nmenu_items",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT),
            cty.POINTER(xfc.FL_POPUP_ENTRY), xfc.STRING],
            """FL_POPUP_ENTRY * fl_insert_nmenu_items(FL_OBJECT * p1,
               FL_POPUP_ENTRY * p2, const char * p3)
            """)
    sitemstr = convert_to_string(itemstr)
    keep_elem_refs(pObject, pPopupEntry, itemstr, sitemstr)
    retval = _fl_insert_nmenu_items(pObject, pPopupEntry, sitemstr)
    return retval


def fl_replace_nmenu_item(pObject, pPopupEntry, itemstr):
    """
        fl_replace_nmenu_item(pObject, pPopupEntry, itemstr) -> pPopupEntry

        @param pObject: nmenu object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_replace_nmenu_item = cfuncproto(
            load_so_libforms(), "fl_replace_nmenu_item",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT),
            cty.POINTER(xfc.FL_POPUP_ENTRY), xfc.STRING],
            """FL_POPUP_ENTRY * fl_replace_nmenu_item(FL_OBJECT * p1,
               FL_POPUP_ENTRY * p2, const char * p3)
            """)
    sitemstr = convert_to_string(itemstr)
    keep_elem_refs(pObject, pPopupEntry, itemstr, sitemstr)
    retval = _fl_replace_nmenu_item(pObject, pPopupEntry, sitemstr)
    return retval


def fl_delete_nmenu_item(pObject, pPopupEntry):
    """
        fl_delete_nmenu_item(pObject, pPopupEntry) -> num.


        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_delete_nmenu_item = cfuncproto(
            load_so_libforms(), "fl_delete_nmenu_item",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT),
            cty.POINTER(xfc.FL_POPUP_ENTRY)],
            """int fl_delete_nmenu_item(FL_OBJECT * p1, FL_POPUP_ENTRY * p2)
            """)
    keep_elem_refs(pObject, pPopupEntry)
    retval = _fl_delete_nmenu_item(pObject, pPopupEntry)
    return retval


def fl_set_nmenu_items(pObject, pPopupItem):
    """
        fl_set_nmenu_items(pObject, pPopupItem) -> pPopupEntry


        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_nmenu_items = cfuncproto(
            load_so_libforms(), "fl_set_nmenu_items",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT),
            cty.POINTER(xfc.FL_POPUP_ITEM)],
            """FL_POPUP_ENTRY * fl_set_nmenu_items(FL_OBJECT * p1,
               FL_POPUP_ITEM * p2)
            """)
    keep_elem_refs(pObject, pPopupItem)
    retval = _fl_set_nmenu_items(pObject, pPopupItem)
    return retval


def fl_add_nmenu_items2(pObject, pPopupItem):
    """
        fl_add_nmenu_items2(pObject, pPopupItem) -> pPopupEntry

        @param pObject: nmenu object
                        (<pointer to xfdata.FL_OBJECT>)
        @param pPopupItem: pointer to xfc.FL_POPUP_ITEM; it needs to be
           prepared beforehand with make_pPopupItem_from_list(..) function
           for single or multiple lists, or with make_pPopupItem_from_dict(..)
           for a single dict.

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_nmenu_items2 = cfuncproto(
            load_so_libforms(), "fl_add_nmenu_items2",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT),
            cty.POINTER(xfc.FL_POPUP_ITEM)],
            """FL_POPUP_ENTRY * fl_add_nmenu_items2(FL_OBJECT * obj,
               FL_POPUP_ITEM * p2)
            """)
    keep_elem_refs(pObject, pPopupItem)
    retval = _fl_add_nmenu_items2(pObject, pPopupItem)
    return retval


def fl_insert_nmenu_items2(pObject, pPopupEntry, pPopupItem):
    """
        fl_insert_nmenu_items2(pObject, pPopupEntry, pPopupItem) -> pPopupEntry

        @param pObject: nmenu object
                        (<pointer to xfdata.FL_OBJECT>)
        @param pPopupItem: pointer to xfc.FL_POPUP_ITEM; it needs to be
           prepared beforehand with make_pPopupItem_from_list(..) function
           for single or multiple lists, or with make_pPopupItem_from_dict(..)
           for a single dict.

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_insert_nmenu_items2 = cfuncproto(
            load_so_libforms(), "fl_insert_nmenu_items2",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT),
            cty.POINTER(xfc.FL_POPUP_ENTRY), cty.POINTER(xfc.FL_POPUP_ITEM)],
            """FL_POPUP_ENTRY * fl_insert_nmenu_items2(FL_OBJECT * obj,
               FL_POPUP_ITEM * p2, FL_POPUP_ITEM * p3)
            """)
    keep_elem_refs(pObject, pPopupEntry, pPopupItem)
    retval = _fl_insert_nmenu_items2(pObject, pPopupEntry, pPopupItem)
    return retval


def fl_replace_nmenu_items2(pObject, pPopupEntry, pPopupItem):
    """
        fl_replace_nmenu_items2(pObject, pPopupEntry, pPopupItem) -> pPopupEntry

        @param pObject: nmenu object
                        (<pointer to xfdata.FL_OBJECT>)
        @param pPopupItem: pointer to xfc.FL_POPUP_ITEM; it needs to be
           prepared beforehand with make_pPopupItem_from_list(..) function for
           for single or multiple lists, or with make_pPopupItem_from_dict(..)
           for a single dict.

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_replace_nmenu_items2 = cfuncproto(
            load_so_libforms(), "fl_replace_nmenu_items2",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT),
            cty.POINTER(xfc.FL_POPUP_ENTRY), cty.POINTER(xfc.FL_POPUP_ITEM)],
            """FL_POPUP_ENTRY * fl_replace_nmenu_items2(FL_OBJECT * obj,
               FL_POPUP_ENTRY * p2, FL_POPUP_ITEM * p3)
            """)
    keep_elem_refs(pObject, pPopupEntry, pPopupItem)
    retval = _fl_replace_nmenu_items2(pObject, pPopupEntry, pPopupItem)
    return retval


def fl_get_nmenu_popup(pObject):
    """
        fl_get_nmenu_popup(pObject) -> pPopup

        @param pObject: nmenu object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_nmenu_popup = cfuncproto(
            load_so_libforms(), "fl_get_nmenu_popup",
            cty.POINTER(xfc.FL_POPUP), [cty.POINTER(xfc.FL_OBJECT)],
            """FL_POPUP * fl_get_nmenu_popup(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_nmenu_popup(pObject)
    return retval


def fl_set_nmenu_popup(pObject, pPopup):
    """
        fl_set_nmenu_popup(pObject, pPopup) -> num.

        @param pObject: nmenu object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_nmenu_popup = cfuncproto(
            load_so_libforms(), "fl_set_nmenu_popup",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_POPUP)],
            """int fl_set_nmenu_popup(FL_OBJECT * p1, FL_POPUP * p2)
            """)
    keep_elem_refs(pObject, pPopup)
    retval = _fl_set_nmenu_popup(pObject, pPopup)
    return retval


def fl_get_nmenu_item(pObject):
    """
        fl_get_nmenu_item(pObject) -> pPopupReturn

        @param pObject: nmenu object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_nmenu_item = cfuncproto(
            load_so_libforms(), "fl_get_nmenu_item",
            cty.POINTER(xfc.FL_POPUP_RETURN), [cty.POINTER(xfc.FL_OBJECT)],
            """FL_POPUP_RETURN * fl_get_nmenu_item(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_nmenu_item(pObject)
    return retval


def fl_get_nmenu_item_by_value(pObject, value):
    """
        fl_get_nmenu_item_by_value(pObject, value) -> pPopupEntry

        @param pObject: nmenu object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_nmenu_item_by_value = cfuncproto(
            load_so_libforms(), "fl_get_nmenu_item_by_value",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT), cty.c_long],
            """FL_POPUP_ENTRY * fl_get_nmenu_item_by_value(FL_OBJECT * p1,
               long int p2)
            """)
    lvalue = convert_to_long(value)
    keep_elem_refs(pObject, value, lvalue)
    retval = _fl_get_nmenu_item_by_value(pObject, lvalue)
    return retval


def fl_get_nmenu_item_by_label(pObject, label):
    """
        fl_get_nmenu_item_by_label(pObject, label) -> pPopupEntry

        @param pObject: nmenu object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_nmenu_item_by_label = cfuncproto(
            load_so_libforms(), "fl_get_nmenu_item_by_label",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT), xfc.STRING],
            """FL_POPUP_ENTRY * fl_get_nmenu_item_by_label(FL_OBJECT * p1,
               const char * p2)
            """)
    slabel = convert_to_string(label)
    keep_elem_refs(pObject, label, slabel)
    retval = _fl_get_nmenu_item_by_label(pObject, slabel)
    return retval


def fl_get_nmenu_item_by_text(pObject, text):
    """
        fl_get_nmenu_item_by_text(pObject, text) -> pPopupEntry

        @param pObject: nmenu object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_nmenu_item_by_text = cfuncproto(
            load_so_libforms(), "fl_get_nmenu_item_by_text",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT), xfc.STRING],
            """FL_POPUP_ENTRY * fl_get_nmenu_item_by_text(FL_OBJECT * p1,
               const char * p2)
            """)
    stext = convert_to_string(text)
    keep_elem_refs(pObject, text, stext)
    retval = _fl_get_nmenu_item_by_text(pObject, stext)
    return retval


def fl_set_nmenu_policy(pObject, num):
    """
        fl_set_nmenu_policy(pObject, num) -> num.

        @param pObject: nmenu object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_nmenu_policy = cfuncproto(
            load_so_libforms(), "fl_set_nmenu_policy",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """int fl_set_nmenu_policy(FL_OBJECT * p1, int p2)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    retval = _fl_set_nmenu_policy(pObject, inum)
    return retval


def fl_set_nmenu_hl_text_color(pObject, colr):
    """
        fl_set_nmenu_hl_text_color(pObject, colr) -> color

        @param pObject: nmenu object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_nmenu_hl_text_color = cfuncproto(
            load_so_libforms(), "fl_set_nmenu_hl_text_color",
            xfc.FL_COLOR, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_COLOR],
            """FL_COLOR fl_set_nmenu_hl_text_color(FL_OBJECT * p1,
               FL_COLOR p2)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, colr, ulcolr)
    retval = _fl_set_nmenu_hl_text_color(pObject, ulcolr)
    return retval



#########################
# forms.h (positioner.h)
#########################

# Routines

# fl_create_positioner function placeholder (internal)


def fl_add_positioner(postype, x, y, w, h, label):
    """
        fl_add_positioner(postype, x, y, w, h, label) -> pObject

        Adds a positioner object.

        @param postype: type of positioner to be added
        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of positioner

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_positioner = cfuncproto(
            load_so_libforms(), "fl_add_positioner",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_positioner(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(postype, xfc.POSITIONERTYPE_list)
    ipostype = convert_to_int(postype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(postype, x, y, w, h, label, ipostype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_positioner(ipostype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_positioner_xvalue(pObject, val):
    """
        fl_set_positioner_xvalue(pObject, val)

        @param pObject: positioner object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_positioner_xvalue = cfuncproto(
            load_so_libforms(), "fl_set_positioner_xvalue",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_positioner_xvalue(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_positioner_xvalue(pObject, fval)


def fl_get_positioner_xvalue(pObject):
    """
        fl_get_positioner_xvalue(pObject) -> floatnum

        @param pObject: positioner object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_positioner_xvalue = cfuncproto(
            load_so_libforms(), "fl_get_positioner_xvalue",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT)],
            """double fl_get_positioner_xvalue(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_positioner_xvalue(pObject)
    return retval


def fl_set_positioner_xbounds(pObject, minbound, maxbound):
    """
        fl_set_positioner_xbounds(pObject, minbound, maxbound)

        @param pObject: positioner object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_positioner_xbounds = cfuncproto(
            load_so_libforms(), "fl_set_positioner_xbounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_positioner_xbounds(FL_OBJECT * ob, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_positioner_xbounds(pObject, fminbound, fmaxbound)


def fl_get_positioner_xbounds(pObject):
    """
        fl_get_positioner_xbounds(pObject) -> minbound, maxbound

        @param pObject: positioner object
                        (<pointer to xfdata.FL_OBJECT>)

        @attention: API change from XForms - upstream was
                    fl_get_positioner_xbounds(pObject, minbound, maxbound)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_positioner_xbounds = cfuncproto(
            load_so_libforms(), "fl_get_positioner_xbounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_positioner_xbounds(FL_OBJECT * ob, double * min,
            double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_positioner_xbounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_set_positioner_yvalue(pObject, val):
    """
        fl_set_positioner_yvalue(pObject, val)

        @param pObject: positioner object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_positioner_yvalue = cfuncproto(
            load_so_libforms(), "fl_set_positioner_yvalue",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_positioner_yvalue(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_positioner_yvalue(pObject, fval)


def fl_get_positioner_yvalue(pObject):
    """
        fl_get_positioner_yvalue(pObject) -> floatnum

        @param pObject: positioner object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_positioner_yvalue = cfuncproto(
            load_so_libforms(), "fl_get_positioner_yvalue",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT)],
            """double fl_get_positioner_yvalue(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_positioner_yvalue(pObject)
    return retval


def fl_set_positioner_ybounds(pObject, minbound, maxbound):
    """
        fl_set_positioner_ybounds(pObject, minbound, maxbound)

        @param pObject: positioner object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_positioner_ybounds = cfuncproto(
            load_so_libforms(), "fl_set_positioner_ybounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_positioner_ybounds(FL_OBJECT * ob, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_positioner_ybounds(pObject, fminbound, fmaxbound)


def fl_get_positioner_ybounds(pObject):
    """
        fl_get_positioner_ybounds(pObject) -> minbound, maxbound

        @param pObject: positioner object
                        (<pointer to xfdata.FL_OBJECT>)

        @attention: API change from XForms - upstream was
                    fl_get_positioner_ybounds(pObject, minbound, maxbound)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_positioner_ybounds = cfuncproto(
            load_so_libforms(), "fl_get_positioner_ybounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_positioner_ybounds(FL_OBJECT * ob, double * min,
               double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_positioner_ybounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_set_positioner_xstep(pObject, value):
    """
        fl_set_positioner_xstep(pObject, value)

        @param pObject: positioner object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_positioner_xstep = cfuncproto(
            load_so_libforms(), "fl_set_positioner_xstep",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_positioner_xstep(FL_OBJECT * ob, double value)
            """)
    fvalue = convert_to_double(value)
    keep_elem_refs(pObject, value, fvalue)
    _fl_set_positioner_xstep(pObject, fvalue)


def fl_set_positioner_ystep(pObject, value):
    """
        fl_set_positioner_ystep(pObject, value)

        @param pObject: positioner object
                        (<pointer to xfdata.FL_OBJECT>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_positioner_ystep = cfuncproto(
            load_so_libforms(), "fl_set_positioner_ystep",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_positioner_ystep(FL_OBJECT * ob, double value)
            """)
    fvalue = convert_to_double(value)
    keep_elem_refs(pObject, value, fvalue)
    _fl_set_positioner_ystep(pObject, fvalue)


def fl_set_positioner_return(pObject, value):
    """
        fl_set_positioner_return(pObject, value)

        @param pObject: positioner object
                        (<pointer to xfdata.FL_OBJECT>)
        @param value: return type

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_positioner_return = cfuncproto(
            load_so_libforms(), "fl_set_positioner_return",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_uint],
            """void fl_set_positioner_return(FL_OBJECT * ob, unsigned
               int value)
            """)
    uivalue = convert_to_uint(value)
    keep_elem_refs(pObject, value, uivalue)
    _fl_set_positioner_return(pObject, uivalue)


# fl_create_scrollbar function placeholder (internal)


def fl_add_scrollbar(scrolltype, x, y, w, h, label):
    """
        fl_add_scrollbar(scrolltype, x, y, w, h, label) -> pObject

        Adds a scrollbar object to a form.

        @param scrolltype: type of scrollbar to be added
        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: label text of scrollbar

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_scrollbar = cfuncproto(
            load_so_libforms(), "fl_add_scrollbar",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_scrollbar(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(scrolltype, xfc.SCROLLTYPE_list)
    iscrolltype = convert_to_int(scrolltype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(scrolltype, x, y, w, h, label, iscrolltype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_scrollbar(iscrolltype, ix, iy, iw, ih, slabel)
    return retval


def fl_get_scrollbar_value(pObject):
    """
        fl_get_scrollbar_value(pObject) -> value[float]

        Returns the value of a scrollbar.

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_scrollbar_value = cfuncproto(
            load_so_libforms(), "fl_get_scrollbar_value",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT)],
            """double fl_get_scrollbar_value(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_scrollbar_value(pObject)
    return retval


def fl_set_scrollbar_value(pObject, val):
    """
        fl_set_scrollbar_value(pObject, val)

        Sets the value of a scrollbar.

        @param pObject: pointer to object
        @param val: value of the scrollbar to be set

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_scrollbar_value = cfuncproto(
            load_so_libforms(), "fl_set_scrollbar_value",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_scrollbar_value(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_scrollbar_value(pObject, fval)


def fl_set_scrollbar_size(pObject, val):
    """
        fl_set_scrollbar_size(pObject, val)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_scrollbar_size = cfuncproto(
            load_so_libforms(), "fl_set_scrollbar_size",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_scrollbar_size(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_scrollbar_size(pObject, fval)


def fl_set_scrollbar_increment(pObject, leftbtnval, midlbtnval):
    """
        fl_set_scrollbar_increment(pObject, leftbtnval, midlbtnval)

        Sets the size of the steps of a scrollbar jump.

        @param pObject: pointer to object
        @param leftbtnval: value to increment if the left mouse button is
           pressed
        @param midlbtnval: value to increment if the middle mouse button is
           pressed

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_scrollbar_increment = cfuncproto(
            load_so_libforms(), "fl_set_scrollbar_increment",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_scrollbar_increment(FL_OBJECT * ob, double l,
               double r)
            """)
    fleftbtnval = convert_to_double(leftbtnval)
    fmidlbtnval = convert_to_double(midlbtnval)
    keep_elem_refs(pObject, leftbtnval, midlbtnval, fleftbtnval, \
                   fmidlbtnval)
    _fl_set_scrollbar_increment(pObject, fleftbtnval, fmidlbtnval)


def fl_get_scrollbar_increment(pObject):
    """
        fl_get_scrollbar_increment(pObject) -> leftbtnval[double], midlbtnval[double]

        Returns the increment of size of a scrollbar for left and middle mouse
        buttons.

        @param pObject: pointer to object

        @attention: API change from XForms - upstream was
           fl_get_scrollbar_increment(pObject, leftbtnval, valmidlbtnval)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_scrollbar_increment = cfuncproto(
            load_so_libforms(), "fl_get_scrollbar_increment",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_scrollbar_increment(FL_OBJECT * ob, double * a,
               double * b)
            """)
    leftbtnval, pleftbtnval = make_double_and_pointer()
    midlbtnval, pmidlbtnval = make_double_and_pointer()
    keep_elem_refs(pObject, leftbtnval, midlbtnval, pleftbtnval, pmidlbtnval)
    _fl_get_scrollbar_increment(pObject, pleftbtnval, pmidlbtnval)
    return leftbtnval, midlbtnval


def fl_set_scrollbar_bounds(pObject, minbound, maxbound):
    """
        fl_set_scrollbar_bounds(pObject, minbound, maxbound)

        Sets the bounds/limits of a scrollbar.

        @param pObject: pointer to object
        @param minbound: minimum bound of scrollbar
        @param maxbound: maximum bound of scrollbar

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_scrollbar_bounds = cfuncproto(
            load_so_libforms(), "fl_set_scrollbar_bounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_scrollbar_bounds(FL_OBJECT * ob, double b1, double b2)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_scrollbar_bounds(pObject, fminbound, fmaxbound)


def fl_get_scrollbar_bounds(pObject):
    """
        fl_get_scrollbar_bounds(pObject) -> minbound, maxbound

        Returns the bounds/limits of a scrollbar.

        @param pObject: pointer to scrollbar object

        @attention: API change from XForms - upstream was
           fl_get_scrollbar_bounds(pObject, b1, b2)
    """

    _fl_get_scrollbar_bounds = cfuncproto(
            load_so_libforms(), "fl_get_scrollbar_bounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_scrollbar_bounds(FL_OBJECT * ob, double * b1,
               double * b2)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, pminbound, maxbound, pmaxbound)
    _fl_get_scrollbar_bounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


# fl_set_scrollbar_return function placeholder (internal)


def fl_set_scrollbar_step(pObject, step):
    """
        fl_set_scrollbar_step(pObject, step)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_scrollbar_step = cfuncproto(
            load_so_libforms(), "fl_set_scrollbar_step",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_scrollbar_step(FL_OBJECT * ob, double step)
            """)
    fstep = convert_to_double(step)
    keep_elem_refs(pObject, step, fstep)
    _fl_set_scrollbar_step(pObject, fstep)



#####################
# forms.h (select.h)
#####################

# Select object types

# fl_create_select function placeholder (internal)


def fl_add_select(selecttype, x, y, w, h, label):
    """
        fl_add_select(selecttype, x, y, w, h, label) -> pObject

        Adds a select object.

        @param selecttype: type of select to be added
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of select

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_select = cfuncproto(
            load_so_libforms(), "fl_add_select",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_select(int p1, FL_Coord p2, FL_Coord p3,
               FL_Coord p4, FL_Coord p5, const char * p6)
            """)
    check_admitted_listvalues(selecttype, xfc.SELECTTYPE_list)
    iselecttype = convert_to_int(selecttype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(selecttype, x, y, w, h, label, iselecttype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_select(iselecttype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_select(pObject):
    """
        fl_clear_select(pObject)

        @param pObject: pointer to select object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_clear_select = cfuncproto(
            load_so_libforms(), "fl_clear_select",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_clear_select(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    _fl_clear_select(pObject)


def fl_add_select_items(pObject, itemstr):
    """
        fl_add_select_items(pObject, itemstr) -> pPopupEntry

        @status: HalfTested + NoDoc + Demo = NOT OK (sequence param.)
    """

    _fl_add_select_items = cfuncproto(
            load_so_libforms(), "fl_add_select_items",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT),
            xfc.STRING],
            """FL_POPUP_ENTRY * fl_add_select_items(FL_OBJECT * p1,
               const char * p2)
            """)
    sitemstr = convert_to_string(itemstr)
    keep_elem_refs(pObject, itemstr, sitemstr)
    retval = _fl_add_select_items(pObject, sitemstr)
    return retval


def fl_insert_select_items(pObject, pPopupEntry, itemstr):
    """
        fl_insert_select_items(pObject, pPopupEntry, itemstr) -> pPopupEntry

        @param itemstr: text of the item (among special sequences only %S is
           supported

        @status: HalfTested + NoDoc + Demo = NOT OK (special sequence)
    """

    _fl_insert_select_items = cfuncproto(
            load_so_libforms(), "fl_insert_select_items",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT),
            cty.POINTER(xfc.FL_POPUP_ENTRY), xfc.STRING],
            """FL_POPUP_ENTRY * fl_insert_select_items(FL_OBJECT * p1,
               FL_POPUP_ENTRY * p2, const char * p3)
            """)
    sitemstr = convert_to_string(itemstr)
    keep_elem_refs(pObject, pPopupEntry, itemstr, sitemstr)
    retval = _fl_insert_select_items(pObject, pPopupEntry, sitemstr)
    return retval


def fl_replace_select_item(pObject, pPopupEntry, itemstr):
    """
        fl_replace_select_item(pObject, pPopupEntry, itemstr) -> pPopupEntry

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_replace_select_item = cfuncproto(
            load_so_libforms(), "fl_replace_select_item",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT),
            cty.POINTER(xfc.FL_POPUP_ENTRY), xfc.STRING],
            """FL_POPUP_ENTRY * fl_replace_select_item(FL_OBJECT * p1,
               FL_POPUP_ENTRY * p2, const char * p3)
            """)
    sitemstr = convert_to_string(itemstr)
    keep_elem_refs(pObject, pPopupEntry, itemstr, sitemstr)
    retval = _fl_replace_select_item(pObject, pPopupEntry, sitemstr)
    return retval


def fl_delete_select_item(pObject, pPopupEntry):
    """
        fl_delete_select_item(pObject, pPopupEntry) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_delete_select_item = cfuncproto(
            load_so_libforms(), "fl_delete_select_item",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_POPUP_ENTRY)],
            """int fl_delete_select_item(FL_OBJECT * p1, FL_POPUP_ENTRY * p2)
            """)
    keep_elem_refs(pObject, pPopupEntry)
    retval = _fl_delete_select_item(pObject, pPopupEntry)
    return retval


def fl_set_select_items(pObject, pPopupItem):
    """
        fl_set_select_items(pObject, pPopupItem) -> num.

        (Re)populates a select object popup.

        @param pObject: pointer to select object
        @param pPopupItem: pointer to FL_POPUP_ITEM class instance (array of it)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_select_items = cfuncproto(
            load_so_libforms(), "fl_set_select_items",
            cty.c_long, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_POPUP_ITEM)],
            """long int fl_set_select_items(FL_OBJECT * p1,
               FL_POPUP_ITEM * p2)
            """)

    keep_elem_refs(pObject, pPopupItem)
    retval = _fl_set_select_items(pObject, pPopupItem)
    return retval


def fl_get_select_popup(pObject):
    """
        fl_get_select_popup(pObject) -> pPopup

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_select_popup = cfuncproto(
            load_so_libforms(), "fl_get_select_popup",
            cty.POINTER(xfc.FL_POPUP), [cty.POINTER(xfc.FL_OBJECT)],
            """FL_POPUP * fl_get_select_popup(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_select_popup(pObject)
    return retval


def fl_set_select_popup(pObject, pPopup):
    """
        fl_set_select_popup(pObject, pPopup) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_select_popup = cfuncproto(
            load_so_libforms(), "fl_set_select_popup",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_POPUP)],
            """int fl_set_select_popup(FL_OBJECT * p1, FL_POPUP * p2)
            """)
    keep_elem_refs(pObject, pPopup)
    retval = _fl_set_select_popup(pObject, pPopup)
    return retval


def fl_get_select_item(pObject):
    """
        fl_get_select_item(pObject) -> pPopupReturn

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_select_item = cfuncproto(
            load_so_libforms(), "fl_get_select_item",
            cty.POINTER(xfc.FL_POPUP_RETURN), [cty.POINTER(xfc.FL_OBJECT)],
            """FL_POPUP_RETURN * fl_get_select_item(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_select_item(pObject)
    return retval


def fl_set_select_item(pObject, pPopupEntry):
    """
        fl_set_select_item(pObject, pPopupEntry) -> pPopupReturn

        Set a new item as currently selected.

        @param pObject: pointer to select object
        @param pPopupEntry: pointer to FL_POPUP_ENTRY class instance

        @status: HalfTested + NoDoc + Demo = NOT OK (FL_POPUP_ENTRY not prepared)
    """

    _fl_set_select_item = cfuncproto(
            load_so_libforms(), "fl_set_select_item",
            cty.POINTER(xfc.FL_POPUP_RETURN), [cty.POINTER(xfc.FL_OBJECT),
            cty.POINTER(xfc.FL_POPUP_ENTRY)],
            """FL_POPUP_RETURN * fl_set_select_item(FL_OBJECT * p1,
               FL_POPUP_ENTRY * p2)
            """)
    keep_elem_refs(pObject, pPopupEntry)
    retval = _fl_set_select_item(pObject, pPopupEntry)
    return retval


def fl_get_select_item_by_value(pObject, value):
    """
        fl_get_select_item_by_value(pObject, value) -> pPopupEntry

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_select_item_by_value = cfuncproto(
            load_so_libforms(), "fl_get_select_item_by_value",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT),
            cty.c_long],
            """FL_POPUP_ENTRY * fl_get_select_item_by_value(FL_OBJECT * p1,
               long int p2)
            """)
    lvalue = convert_to_long(value)
    keep_elem_refs(pObject, value, lvalue)
    retval = _fl_get_select_item_by_value(pObject, lvalue)
    return retval


def fl_get_select_item_by_label(pObject, label):
    """
        fl_get_select_item_by_label(pObject, label) -> pPopupEntry

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_select_item_by_label = cfuncproto(
            load_so_libforms(), "fl_get_select_item_by_label",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT),
            xfc.STRING],
            """FL_POPUP_ENTRY * fl_get_select_item_by_label(FL_OBJECT * p1,
               const char * p2)
            """)
    slabel = convert_to_string(label)
    keep_elem_refs(pObject, label, slabel)
    retval = _fl_get_select_item_by_label(pObject, slabel)
    return retval


def fl_get_select_item_by_text(pObject, txtstr):
    """
        fl_get_select_item_by_text(pObject, txtstr) -> pPopupEntry

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_select_item_by_text = cfuncproto(
            load_so_libforms(), "fl_get_select_item_by_text",
            cty.POINTER(xfc.FL_POPUP_ENTRY), [cty.POINTER(xfc.FL_OBJECT),
            xfc.STRING],
            """FL_POPUP_ENTRY * fl_get_select_item_by_text(FL_OBJECT * p1,
               const char * p2)
            """)
    stxtstr = convert_to_string(txtstr)
    keep_elem_refs(pObject, txtstr, stxtstr)
    retval = _fl_get_select_item_by_text(pObject, stxtstr)
    return retval


def fl_get_select_text_color(pObject):
    """
        fl_get_select_text_color(pObject) -> color

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_select_text_color = cfuncproto(
            load_so_libforms(), "fl_get_select_text_color",
            xfc.FL_COLOR, [cty.POINTER(xfc.FL_OBJECT)],
            """FL_COLOR fl_get_select_text_color(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_select_text_color(pObject)
    return retval


def fl_set_select_text_color(pObject, colr):
    """
        fl_set_select_text_color(pObject, colr) -> color

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_select_text_color = cfuncproto(
            load_so_libforms(), "fl_set_select_text_color",
            xfc.FL_COLOR, [cty.POINTER(xfc.FL_OBJECT), xfc.FL_COLOR],
            """FL_COLOR fl_set_select_text_color(FL_OBJECT * p1, FL_COLOR p2)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, colr, ulcolr)
    retval = _fl_set_select_text_color(pObject, ulcolr)
    return retval


def fl_get_select_text_font(pObject):
    """
        fl_get_select_text_font(pObject) -> num, num1, num2

        @attention: API change from XForms - upstream was
           fl_get_select_text_font(pObject, p2, p3)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_select_text_font = cfuncproto(
            load_so_libforms(), "fl_get_select_text_font",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int)],
            """int fl_get_select_text_font(FL_OBJECT * p1, int * p2, int * p3)
            """)
    num1, pnum1 = make_int_and_pointer()
    num2, pnum2 = make_int_and_pointer()
    keep_elem_refs(pObject, num1, num2, pnum1, pnum2)
    retval = _fl_get_select_text_font(pObject, pnum2, pnum2)
    return retval, num1, num2


def fl_set_select_text_font(pObject, p2, p3):
    """
        fl_set_select_text_font(pObject, p2, p3) -> font num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_select_text_font = cfuncproto(
            load_so_libforms(), "fl_set_select_text_font",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int],
            """int fl_set_select_text_font(FL_OBJECT * p1, int p2, int p3)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    keep_elem_refs(pObject, p2, p3, ip2, ip3)
    retval = _fl_set_select_text_font(pObject, ip2, ip3)
    return retval


def fl_get_select_text_align(pObject):
    """
        fl_get_select_text_align(pObject) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_select_text_align = cfuncproto(
            load_so_libforms(), "fl_get_select_text_align",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_select_text_align(FL_OBJECT * p1)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_select_text_align(pObject)
    return retval


def fl_set_select_text_align(pObject, p2):
    """
        fl_set_select_text_align(pObject, p2) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_select_text_align = cfuncproto(
            load_so_libforms(), "fl_set_select_text_align",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """int fl_set_select_text_align(FL_OBJECT * p1, int p2)
            """)
    ip2 = convert_to_int(p2)
    keep_elem_refs(pObject, p2, ip2)
    retval = _fl_set_select_text_align(pObject, ip2)
    return retval


def fl_set_select_policy(pObject, num):
    """
        fl_set_select_policy(pObject, num) -> num.

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_select_policy = cfuncproto(
            load_so_libforms(), "fl_set_select_policy",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """int fl_set_select_policy(FL_OBJECT * p1, int p2)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    retval = _fl_set_select_policy(pObject, inum)
    return retval



#######################
# forms.h (slider.h)
# Object Class: Slider
#######################

# Routines

# fl_create_slider function placeholder (internal)


def fl_add_slider(slidertype, x, y, w, h, label):
    """
        fl_add_slider(slidertype, x, y, w, h, label) -> pObject

        Adds a slider to a form. No value is displayed.

        @param slidertype: type of the slider to be added
        @type slidertype: [num./int] from xfdata module FL_VERT_SLIDER,
                          FL_HOR_SLIDER, FL_VERT_FILL_SLIDER,
                          FL_HOR_FILL_SLIDER, FL_VERT_NICE_SLIDER,
                          FL_HOR_NICE_SLIDER, FL_VERT_BROWSER_SLIDER,
                          FL_HOR_BROWSER_SLIDER, FL_VERT_BROWSER_SLIDER2,
                          FL_HOR_BROWSER_SLIDER2, FL_VERT_THIN_SLIDER,
                          FL_HOR_THIN_SLIDER, FL_VERT_THIN_SLIDER,
                          FL_HOR_THIN_SLIDER, FL_VERT_NICE_SLIDER2,
                          FL_HOR_NICE_SLIDER2, FL_VERT_BASIC_SLIDER,
                          FL_HOR_BASIC_SLIDER
        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: label of the slider (placed below it by default)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_slider = cfuncproto(
            load_so_libforms(), "fl_add_slider",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_slider(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(slidertype, xfc.SLIDERTYPE_list)
    islidertype = convert_to_int(slidertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(slidertype, x, y, w, h, label, islidertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_slider(islidertype, ix, iy, iw, ih, slabel)
    return retval


# fl_create_valslider function placeholder (internal)


def fl_add_valslider(slidertype, x, y, w, h, label):
    """
        fl_add_valslider(slidertype, x, y, w, h, label) -> pObject

        Adds a slider to a form. Its value is displayed above or to the
        left of the slider.

        @param slidertype: type of the slider
        @type slidertype: [num./int] from xfdata module FL_VERT_SLIDER,
                          FL_HOR_SLIDER, FL_VERT_FILL_SLIDER,
                          FL_HOR_FILL_SLIDER, FL_VERT_NICE_SLIDER,
                          FL_HOR_NICE_SLIDER, FL_VERT_BROWSER_SLIDER,
                          FL_HOR_BROWSER_SLIDER, FL_VERT_BROWSER_SLIDER2,
                          FL_HOR_BROWSER_SLIDER2, FL_VERT_THIN_SLIDER,
                          FL_HOR_THIN_SLIDER, FL_VERT_THIN_SLIDER,
                          FL_HOR_THIN_SLIDER, FL_VERT_NICE_SLIDER2,
                          FL_HOR_NICE_SLIDER2, FL_VERT_BASIC_SLIDER,
                          FL_HOR_BASIC_SLIDER
        @param x: horizontal position (upper-left corner)
        @param y: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of slider

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_valslider = cfuncproto(
            load_so_libforms(), "fl_add_valslider",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord, 
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_valslider(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(slidertype, xfc.SLIDERTYPE_list)
    islidertype = convert_to_int(slidertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(slidertype, x, y, w, h, label, islidertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_valslider(islidertype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_slider_value(pObject, val):
    """
        fl_set_slider_value(pObject, val)

        Changes the value of a slider.

        @param pObject: pointer to object
        @param val: new value of slider

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_slider_value = cfuncproto(
            load_so_libforms(), "fl_set_slider_value",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_slider_value(FL_OBJECT * ob, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_slider_value(pObject, fval)


def fl_get_slider_value(pObject):
    """
        fl_get_slider_value(pObject) -> value[float]

        Returns value of a slider.

        @param pObject: pointer to object

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_slider_value = cfuncproto(
            load_so_libforms(), "fl_get_slider_value",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT)],
            """double fl_get_slider_value(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_slider_value(pObject)
    return retval


def fl_set_slider_bounds(pObject, minbound, maxbound):
    """
        fl_set_slider_bounds(pObject, minbound, maxbound)

        Sets bounds/limits of a slider.

        @param pObject: pointer to object
        @param minbound: minimum bound of slider
        @param maxbound: maximum bound of slider

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_slider_bounds = cfuncproto(
            load_so_libforms(), "fl_set_slider_bounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_slider_bounds(FL_OBJECT * ob, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_slider_bounds(pObject, fminbound, fmaxbound)


def fl_get_slider_bounds(pObject):
    """
        fl_get_slider_bounds(pObject) -> minbound[float], maxbound[float]

        Returns bounds/limits of a slider.

        @param pObject: pointer to object

        @attention: API change from XForms - upstream was
           fl_get_slider_bounds(pObject, minbound, maxbound)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_slider_bounds = cfuncproto(
            load_so_libforms(), "fl_get_slider_bounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_slider_bounds(FL_OBJECT * ob, double * min,
               double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_slider_bounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


# fl_set_slider_return function placeholder (deprecated)


def fl_set_slider_step(pObject, value):
    """
        fl_set_slider_step(pObject, value)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_slider_step = cfuncproto(
            load_so_libforms(), "fl_set_slider_step",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_slider_step(FL_OBJECT * ob, double value)
            """)
    fvalue = convert_to_double(value)
    keep_elem_refs(pObject, value, fvalue)
    _fl_set_slider_step(pObject, fvalue)


def fl_set_slider_increment(pObject, leftbtnval, midlbtnval):
    """
        fl_set_slider_increment(pObject, leftbtnval, midlbtnval)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_slider_increment = cfuncproto(
            load_so_libforms(), "fl_set_slider_increment",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_slider_increment(FL_OBJECT * ob, double l,
               double r)
            """)
    fleftbtnval = convert_to_double(leftbtnval)
    fmidlbtnval = convert_to_double(midlbtnval)
    keep_elem_refs(pObject, leftbtnval, midlbtnval, fleftbtnval, fmidlbtnval)
    _fl_set_slider_increment(pObject, fleftbtnval, fmidlbtnval)


def fl_get_slider_increment(pObject):
    """
        fl_get_slider_increment(pObject) -> leftbtnval, midlbtnval

        @attention: API change from XForms - upstream was
           fl_get_slider_increment(pObject, leftbtnval, midlbtnval)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_slider_increment = cfuncproto(
            load_so_libforms(), "fl_get_slider_increment",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)], \
            """void fl_get_slider_increment(FL_OBJECT * ob, double * l,
               double * r)
            """)
    leftbtnval, pleftbtnval = make_double_and_pointer()
    midlbtnval, pmidlbtnval = make_double_and_pointer()
    keep_elem_refs(pObject, leftbtnval, midlbtnval, pleftbtnval, pmidlbtnval)
    _fl_get_slider_increment(pObject, pleftbtnval, pmidlbtnval)
    return leftbtnval, midlbtnval


def fl_set_slider_size(pObject, size):
    """
        fl_set_slider_size(pObject, size)

        Sets the size of a slider.

        @param pObject: pointer to object
        @param size: value of size of the slider

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_slider_size = cfuncproto(
            load_so_libforms(), "fl_set_slider_size",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_slider_size(FL_OBJECT * ob, double size)
            """)
    fsize = convert_to_double(size)
    keep_elem_refs(pObject, size, fsize)
    _fl_set_slider_size(pObject, fsize)


def fl_set_slider_precision(pObject, precnum):
    """
        fl_set_slider_precision(pObject, precnum)

        Sets precision with which value a valslider is shown.

        @param pObject: pointer to object
        @param precnum: precision of shown value

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_slider_precision = cfuncproto(
            load_so_libforms(), "fl_set_slider_precision",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_slider_precision(FL_OBJECT * ob, int prec)
            """)
    iprecnum = convert_to_int(precnum)
    keep_elem_refs(pObject, precnum, iprecnum)
    _fl_set_slider_precision(pObject, iprecnum)


def fl_set_slider_filter(pObject, py_ValFilter):
    """
        fl_set_slider_filter(pObject, py_ValFilter)

        Overrides the default (slider value shown in floating point format)
        by registering a filter function.

        @param pObject: pointer to oject
        @param py_ValFilter: python function, fn(pObject, valfloat,
           intprecis) -> string

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_slider_filter = cfuncproto(
            load_so_libforms(), "fl_set_slider_filter",
            None, [cty.POINTER(xfc.FL_OBJECT), FL_VAL_FILTER],
            """void fl_set_slider_filter(FL_OBJECT * ob, FL_VAL_FILTER filter)
            """)
    c_ValFilter = FL_VAL_FILTER(py_ValFilter)
    keep_cfunc_refs(c_ValFilter, py_ValFilter)
    keep_elem_refs(pObject)
    _fl_set_slider_filter(pObject, c_ValFilter)


# fl_create_spinner function placeholder (internal)


def fl_add_spinner(spinnertype, x, y, w, h, label):
    """
        fl_add_spinner(spinnertype, x, y, w, h, label) -> pObject

        Adds a spinner object.

        @param spinnertype: type of spinner to be added
        @type spinnertype: [num./int] from xfdata module FL_INT_SPINNER,
                           FL_FLOAT_SPINNER
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of spinner

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_spinner = cfuncproto(
            load_so_libforms(), "fl_add_spinner",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_spinner(int type, FL_Coord x, FL_Coord y,
            FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(spinnertype, xfc.SPINNERTYPE_list)
    ispinnertype = convert_to_int(spinnertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(spinnertype, x, y, w, h, label, ispinnertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_spinner(ispinnertype, ix, iy, iw, ih, slabel)
    return retval


def fl_get_spinner_value(pObject):
    """
        fl_get_spinner_value(pObject) -> floatval

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_spinner_value = cfuncproto(
            load_so_libforms(), "fl_get_spinner_value",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT)],
            """double fl_get_spinner_value(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_spinner_value(pObject)
    return retval


def fl_set_spinner_value(pObject, val):
    """
        fl_set_spinner_value(pObject, val) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_spinner_value = cfuncproto(
            load_so_libforms(), "fl_set_spinner_value",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """double fl_set_spinner_value(FL_OBJECT * obj, double val)
            """)
    fval = convert_to_double(val)
    keep_elem_refs(pObject, val, fval)
    _fl_set_spinner_value(pObject, fval)


def fl_set_spinner_bounds(pObject, minbound, maxbound):
    """
        fl_set_spinner_bounds(pObject, minbound, maxbound)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_spinner_bounds = cfuncproto(
            load_so_libforms(), "fl_set_spinner_bounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_spinner_bounds(FL_OBJECT * obj, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_spinner_bounds(pObject, fminbound, fmaxbound)


def fl_get_spinner_bounds(pObject):
    """
        fl_get_spinner_bounds(pObject) -> minbound, maxbound

        @attention: API change from XForms - upstream was
           fl_get_spinner_bounds(pObject, minbound, maxbound)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_spinner_bounds = cfuncproto(
            load_so_libforms(), "fl_get_spinner_bounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)], \
            """void fl_get_spinner_bounds(FL_OBJECT * obj, double * min,
               double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_spinner_bounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_set_spinner_step(pObject, step):
    """
        fl_set_spinner_step(pObject, step)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_spinner_step = cfuncproto(
            load_so_libforms(), "fl_set_spinner_step",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_spinner_step(FL_OBJECT * obj, double step)
            """)
    fstep = convert_to_double(step)
    keep_elem_refs(pObject, step, fstep)
    _fl_set_spinner_step(pObject, fstep)


def fl_get_spinner_step(pObject):
    """
        fl_get_spinner_step(pObject) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_spinner_step = cfuncproto(
            load_so_libforms(), "fl_get_spinner_step",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT)],
            """double fl_get_spinner_step(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_spinner_step(pObject)
    return retval


def fl_set_spinner_precision(pObject, precnum):
    """
        fl_set_spinner_precision(pObject, precnum)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_spinner_precision = cfuncproto(
            load_so_libforms(), "fl_set_spinner_precision",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_spinner_precision(FL_OBJECT * obj, int prec)
            """)
    iprecnum = convert_to_int(precnum)
    keep_elem_refs(pObject, precnum, iprecnum)
    _fl_set_spinner_precision(pObject, iprecnum)


def fl_get_spinner_precision(pObject):
    """
        fl_get_spinner_precision(pObject) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_spinner_precision = cfuncproto(
            load_so_libforms(), "fl_get_spinner_precision",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_spinner_precision(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_spinner_precision(pObject)
    return retval


def fl_get_spinner_input(pObject):
    """
        fl_get_spinner_input(pObject) -> pObject

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_spinner_input = cfuncproto(
            load_so_libforms(), "fl_get_spinner_input",
            cty.POINTER(xfc.FL_OBJECT), [cty.POINTER(xfc.FL_OBJECT)],
            """FL_OBJECT * fl_get_spinner_input(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_spinner_input(pObject)
    return retval


def fl_get_spinner_up_button(pObject):
    """
        fl_get_spinner_up_button(pObject) -> pObject

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_spinner_up_button = cfuncproto(
            load_so_libforms(), "fl_get_spinner_up_button",
            cty.POINTER(xfc.FL_OBJECT), [cty.POINTER(xfc.FL_OBJECT)],
            """FL_OBJECT * fl_get_spinner_up_button(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_spinner_up_button(pObject)
    return retval


def fl_get_spinner_down_button(pObject):
    """
        fl_get_spinner_down_button(pObject) -> pObject

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_spinner_down_button = cfuncproto(
            load_so_libforms(), "fl_get_spinner_down_button",
            cty.POINTER(xfc.FL_OBJECT), [cty.POINTER(xfc.FL_OBJECT)],
            """FL_OBJECT * fl_get_spinner_down_button(FL_OBJECT * obj)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_spinner_down_button(pObject)
    return retval



########################
# forms.h (tabfolder.h)
########################

# fl_create_tabfolder function placeholde (internal)


def fl_add_tabfolder(foldertype, x, y, w, h, label):
    """
        fl_add_tabfolder(foldertype, x, y, w, h, label) -> pObject

        Adds a tabfolder object.

        @param foldertype: type of tabfolder to be added
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of tabfolder

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_tabfolder = cfuncproto(
            load_so_libforms(), "fl_add_tabfolder",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_tabfolder(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(foldertype, xfc.TABFOLDERTYPE_list)
    ifoldertype = convert_to_int(foldertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(foldertype, x, y, w, h, label, ifoldertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_tabfolder(ifoldertype, ix, iy, iw, ih, slabel)
    return retval


def fl_addto_tabfolder(pObject, title, pForm):
    """
        fl_addto_tabfolder(pObject, title, pForm) -> pObject

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_addto_tabfolder = cfuncproto(
            load_so_libforms(), "fl_addto_tabfolder",
            cty.POINTER(xfc.FL_OBJECT), [cty.POINTER(xfc.FL_OBJECT),
            xfc.STRING, cty.POINTER(xfc.FL_FORM)],
            """FL_OBJECT * fl_addto_tabfolder(FL_OBJECT * ob,
               const char * title, FL_FORM * form)
            """)
    stitle = convert_to_string(title)
    keep_elem_refs(pObject, title, pForm, stitle)
    retval = _fl_addto_tabfolder(pObject, stitle, pForm)
    return retval


def fl_get_tabfolder_folder_bynumber(pObject, num):
    """
        fl_get_tabfolder_folder_bynumber(pObject, num) -> pForm

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_tabfolder_folder_bynumber = cfuncproto(
            load_so_libforms(), "fl_get_tabfolder_folder_bynumber",
            cty.POINTER(xfc.FL_FORM), [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """FL_FORM * fl_get_tabfolder_folder_bynumber(FL_OBJECT * ob,
               int num)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    retval = _fl_get_tabfolder_folder_bynumber(pObject, inum)
    return retval


def fl_get_tabfolder_folder_byname(pObject, name):
    """
        fl_get_tabfolder_folder_byname(pObject, name) -> pForm

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_tabfolder_folder_byname = cfuncproto(
            load_so_libforms(), "fl_get_tabfolder_folder_byname",
            cty.POINTER(xfc.FL_FORM), [cty.POINTER(xfc.FL_OBJECT), xfc.STRING],
            """FL_FORM * fl_get_tabfolder_folder_byname(FL_OBJECT * ob,
               const char * name)
            """)
    sname = convert_to_string(name)
    keep_elem_refs(pObject, name, sname)
    retval = _fl_get_tabfolder_folder_byname(pObject, sname)
    return retval


def fl_delete_folder(pObject, pForm):
    """
        fl_delete_folder(pObject, pForm)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_delete_folder = cfuncproto(
            load_so_libforms(), "fl_delete_folder",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_FORM)],
            """void fl_delete_folder(FL_OBJECT * ob, FL_FORM * form)
            """)
    keep_elem_refs(pObject, pForm)
    _fl_delete_folder(pObject, pForm)


def fl_delete_folder_bynumber(pObject, num):
    """
        fl_delete_folder_bynumber(pObject, num)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_delete_folder_bynumber = cfuncproto(
            load_so_libforms(), "fl_delete_folder_bynumber",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_delete_folder_bynumber(FL_OBJECT * ob, int num)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    _fl_delete_folder_bynumber(pObject, inum)


def fl_delete_folder_byname(pObject, name):
    """
        fl_delete_folder_byname(pObject, name)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_delete_folder_byname = cfuncproto(
            load_so_libforms(), "fl_delete_folder_byname",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING],
            """void fl_delete_folder_byname(FL_OBJECT * ob, const char * name)
            """)
    sname = convert_to_string(name)
    keep_elem_refs(pObject, name, sname)
    _fl_delete_folder_byname(pObject, sname)


def fl_set_folder(pObject, pForm):
    """ fl_set_folder(pObject, pForm)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_folder = cfuncproto(
            load_so_libforms(), "fl_set_folder",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_FORM)],
            """void fl_set_folder(FL_OBJECT * ob, FL_FORM * form)
            """)
    keep_elem_refs(pObject, pForm)
    _fl_set_folder(pObject, pForm)


def fl_set_folder_byname(pObject, name):
    """ fl_set_folder_byname(pObject, name)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_folder_byname = cfuncproto(
            load_so_libforms(), "fl_set_folder_byname",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING],
            """void fl_set_folder_byname(FL_OBJECT * ob, const char * name)
            """)
    sname = convert_to_string(name)
    keep_elem_refs(pObject, name, sname)
    _fl_set_folder_byname(pObject, name)


def fl_set_folder_bynumber(pObject, num):
    """
        fl_set_folder_bynumber(pObject, num)

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_folder_bynumber = cfuncproto(
            load_so_libforms(), "fl_set_folder_bynumber",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_folder_bynumber(FL_OBJECT * ob, int num)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    _fl_set_folder_bynumber(pObject, inum)


def fl_get_folder(pObject):
    """
        fl_get_folder(pObject) -> pForm

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_folder = cfuncproto(
            load_so_libforms(), "fl_get_folder",
            cty.POINTER(xfc.FL_FORM), [cty.POINTER(xfc.FL_OBJECT)],
            """FL_FORM * fl_get_folder(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_folder(pObject)
    return retval


def fl_get_folder_number(pObject):
    """
        fl_get_folder_number(pObject) -> folder num.

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_folder_number = cfuncproto(
            load_so_libforms(), "fl_get_folder_number",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_folder_number(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_folder_number(pObject)
    return retval


def fl_get_folder_name(pObject):
    """
        fl_get_folder_name(pObject) -> name string

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_folder_name = cfuncproto(
            load_so_libforms(), "fl_get_folder_name",
            xfc.STRING, [cty.POINTER(xfc.FL_OBJECT)],
            """const char * fl_get_folder_name(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_folder_name(pObject)
    return retval


def fl_get_tabfolder_numfolders(pObject):
    """
        fl_get_tabfolder_numfolders(pObject) -> num.

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_tabfolder_numfolders = cfuncproto(
            load_so_libforms(), "fl_get_tabfolder_numfolders",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_tabfolder_numfolders(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_tabfolder_numfolders(pObject)
    return retval


def fl_get_active_folder(pObject):
    """
        fl_get_active_folder(pObject) -> pForm

        @param pObject: pointer to object

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_active_folder = cfuncproto(
            load_so_libforms(), "fl_get_active_folder",
            cty.POINTER(xfc.FL_FORM), [cty.POINTER(xfc.FL_OBJECT)],
            """FL_FORM * fl_get_active_folder(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_active_folder(pObject)
    return retval


def fl_get_active_folder_number(pObject):
    """
        fl_get_active_folder_number(pObject) -> num.

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_active_folder_number = cfuncproto(
            load_so_libforms(), "fl_get_active_folder_number",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT)],
            """int fl_get_active_folder_number(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_active_folder_number(pObject)
    return retval


def fl_get_active_folder_name(pObject):
    """
        fl_get_active_folder_name(pObject) -> name string

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_active_folder_name = cfuncproto(
            load_so_libforms(), "fl_get_active_folder_name",
            xfc.STRING, [cty.POINTER(xfc.FL_OBJECT)],
            """const char * fl_get_active_folder_name(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_active_folder_name(pObject)
    return retval


def fl_get_folder_area(pObject):
    """
        fl_get_folder_area(pObject) -> x, y, w, h

        @param pObject: pointer to object

        @attention: API change from XForms - upstream was
           fl_get_folder_area(pObject, x, y, w, h)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_folder_area = cfuncproto(
            load_so_libforms(), "fl_get_folder_area",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.FL_Coord),
            cty.POINTER(xfc.FL_Coord), cty.POINTER(xfc.FL_Coord),
            cty.POINTER(xfc.FL_Coord)],
            """void fl_get_folder_area(FL_OBJECT * ob, FL_Coord * x,
               FL_Coord * y, FL_Coord * w, FL_Coord * h)
            """)
    x, px = make_int_and_pointer()
    y, py = make_int_and_pointer()
    w, pw = make_int_and_pointer()
    h, ph = make_int_and_pointer()
    keep_elem_refs(pObject, x, y, w, h, px, py, pw, ph)
    _fl_get_folder_area(pObject, px, py, pw, ph)
    return x, y, w, h


def fl_replace_folder_bynumber(pObject, num, pForm):
    """
        fl_replace_folder_bynumber(pObject, num, pForm)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_replace_folder_bynumber = cfuncproto(
            load_so_libforms(), "fl_replace_folder_bynumber",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.POINTER(xfc.FL_FORM)],
            """void fl_replace_folder_bynumber(FL_OBJECT * ob, int num,
               FL_FORM * form)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, pForm, inum)
    _fl_replace_folder_bynumber(pObject, inum, pForm)


def fl_set_tabfolder_autofit(pObject, num):
    """
        fl_set_tabfolder_autofit(pObject, num) -> num.

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_tabfolder_autofit = cfuncproto(
            load_so_libforms(), "fl_set_tabfolder_autofit",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """int fl_set_tabfolder_autofit(FL_OBJECT * ob, int y)
            """)
    inum = convert_to_int(num)
    keep_elem_refs(pObject, num, inum)
    retval = _fl_set_tabfolder_autofit(pObject, inum)
    return retval


def fl_set_default_tabfolder_corner(npixels):
    """
        fl_set_default_tabfolder_corner(npixels) -> old pixels num.

        Adjusts the corner pixels, changing appearance of the tabs.

        @param npixels: number of corner pixels (default 3)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_default_tabfolder_corner = cfuncproto(
            load_so_libforms(), "fl_set_default_tabfolder_corner",
            cty.c_int, [cty.c_int],
            """int fl_set_default_tabfolder_corner(int n):
            """)
    ipixels = convert_to_int(npixels)
    keep_elem_refs(npixels, ipixels)
    retval = _fl_set_default_tabfolder_corner(ipixels)
    return retval


def fl_set_tabfolder_offset(pObject, offset):
    """
        fl_set_tabfolder_offset(pObject, offset) -> num.

        @param pObject: pointer to tabfolder object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_tabfolder_offset = cfuncproto(
            load_so_libforms(), "fl_set_tabfolder_offset",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """int fl_set_tabfolder_offset(FL_OBJECT * ob, int offset)
            """)
    ioffset = convert_to_int(offset)
    keep_elem_refs(pObject, offset, ioffset)
    retval = _fl_set_tabfolder_offset(pObject, ioffset)
    return retval



###################
# forms.h (text.h)
###################

# fl_create_text function placeholder (internal)


def fl_add_text(texttype, x, y, w, h, label):
    """
        fl_add_text(texttype, x, y, w, h, label) -> pObject

        Adds a text object.

        @param texttype: type of text to be added
        @param texttype: [num./int] xfc.FL_NORMAL_TEXT
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of text

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_text = cfuncproto(
            load_so_libforms(), "fl_add_text",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_text(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(texttype, xfc.TEXTTYPE_list)
    itexttype = convert_to_int(texttype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(texttype, x, y, w, h, label, itexttype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_text(itexttype, ix, iy, iw, ih, slabel)
    return retval



#########################
# forms.h (thumbwheel.h)
#########################

def fl_get_thumbwheel_value(pObject):
    """
        fl_get_thumbwheel_value(pObject) -> num.

        @param pObject: pointer to object

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_thumbwheel_value = cfuncproto(
            load_so_libforms(), "fl_get_thumbwheel_value",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT)],
            """double fl_get_thumbwheel_value(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_thumbwheel_value(pObject)
    return retval


def fl_set_thumbwheel_value(pObject, value):
    """
        fl_set_thumbwheel_value(pObject, value)

        @param pObject: pointer to object
    """

    _fl_set_thumbwheel_value = cfuncproto(
            load_so_libforms(), "fl_set_thumbwheel_value",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """double fl_set_thumbwheel_value(FL_OBJECT * ob, double value)
            """)
    fvalue = convert_to_double(value)
    keep_elem_refs(pObject, value, fvalue)
    retval = _fl_set_thumbwheel_value(pObject, fvalue)
    return retval


def fl_get_thumbwheel_step(pObject):
    """
        fl_get_thumbwheel_step(pObject) -> num.

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_thumbwheel_step = cfuncproto(
            load_so_libforms(), "fl_get_thumbwheel_step",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT)],
            """double fl_get_thumbwheel_step(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_thumbwheel_step(pObject)
    return retval


def fl_set_thumbwheel_step(pObject, step):
    """
        fl_set_thumbwheel_step(pObject, step) -> num.

        @param pObject: pointer to object

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_thumbwheel_step = cfuncproto(
            load_so_libforms(), "fl_set_thumbwheel_step",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """double fl_set_thumbwheel_step(FL_OBJECT * ob, double step)
            """)
    fstep = convert_to_double(step)
    keep_elem_refs(pObject, step, fstep)
    retval = _fl_set_thumbwheel_step(pObject, fstep)
    return retval


def fl_set_thumbwheel_return(pObject, when):
    """
        fl_set_thumbwheel_return(pObject, when) -> num.

        @param pObject: pointer to object
        @param when: return type (when it returns)
        @type when: [num./int] xfc.FL_RETURN_NONE, xfc.FL_RETURN_CHANGED,
                    xfc.FL_RETURN_END, xfc.FL_RETURN_END_CHANGED,
                    xfc.FL_RETURN_SELECTION, xfc.FL_RETURN_DESELECTION,
                    xfc.FL_RETURN_TRIGGERED, xfc.FL_RETURN_ALWAYS

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_thumbwheel_return = cfuncproto(
            load_so_libforms(), "fl_set_thumbwheel_return",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_uint],
            """int fl_set_thumbwheel_return(FL_OBJECT * ob, unsigned
               int how)
            """)
    check_admitted_listvalues(when, xfc.RETURN_list)
    uiwhen = convert_to_uint(when)
    keep_elem_refs(pObject, when, uiwhen)
    retval = _fl_set_thumbwheel_return(pObject, uiwhen)
    return retval


def fl_set_thumbwheel_crossover(pObject, flag):
    """
        fl_set_thumbwheel_crossover(pObject, flag) -> num.

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_thumbwheel_crossover = cfuncproto(
            load_so_libforms(), "fl_set_thumbwheel_crossover",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """int fl_set_thumbwheel_crossover(FL_OBJECT * ob, int flag)
            """)
    iflag = convert_to_int(flag)
    keep_elem_refs(pObject, flag, iflag)
    retval = _fl_set_thumbwheel_crossover(pObject, iflag)
    return retval


def fl_set_thumbwheel_bounds(pObject, minbound, maxbound):
    """
        fl_set_thumbwheel_bounds(pObject, minbound, maxbound)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_thumbwheel_bounds = cfuncproto(
            load_so_libforms(), "fl_set_thumbwheel_bounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_thumbwheel_bounds(FL_OBJECT * ob, double min,
               double max)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_thumbwheel_bounds(pObject, fminbound, fmaxbound)


def fl_get_thumbwheel_bounds(pObject):
    """
        fl_get_thumbwheel_bounds(pObject) -> minbound, maxbound

        @param pObject: pointer to thumbwheel object

        @attention: API change from XForms - upstream was
           fl_get_thumbwheel_bounds(pObject, minbound, maxbound)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_thumbwheel_bounds = cfuncproto(
            load_so_libforms(), "fl_get_thumbwheel_bounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_thumbwheel_bounds(FL_OBJECT * ob, double * min,
               double * max)
            """)
    minbound, pminbound = make_double_and_pointer()
    maxbound, pmaxbound = make_double_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_thumbwheel_bounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


# fl_create_thumbwheel function placeholder (internal)


def fl_add_thumbwheel(wheeltype, x, y, w, h, label):
    """
        fl_add_thumbwheel(wheeltype, x, y, w, h, label) -> pObject

        Adds a thumbwheel object.

        @param wheeltype: type of thumbwheel to be added
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of thumbwheel

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_thumbwheel = cfuncproto(
            load_so_libforms(), "fl_add_thumbwheel",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_thumbwheel(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(wheeltype, xfc.THUMBWHEELTYPE_list)
    iwheeltype = convert_to_int(wheeltype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(wheeltype, x, y, w, h, label, iwheeltype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_thumbwheel(iwheeltype, ix, iy, iw, ih, slabel)
    return retval



######################
# forms.h (timer.h)
# Object Class: Timer
######################

# Routines

# fl_create_timer function placeholder (internal)


def fl_add_timer(timertype, x, y, w, h, label):
    """
        fl_add_timer(timertype, x, y, w, h, label) -> pObject

        Adds a timer object.

        @param timertype: type of timer to be added
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of timer

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_add_timer = cfuncproto(
            load_so_libforms(), "fl_add_timer",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_timer(int type, FL_Coord x, FL_Coord y,
            FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(timertype, xfc.TIMERTYPE_list)
    itimertype = convert_to_int(timertype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(timertype, x, y, w, h, label, itimertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_timer(itimertype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_timer(pObject, total):
    """
        fl_set_timer(pObject, total)

        @param pObject: pointer to object

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_timer = cfuncproto(
            load_so_libforms(), "fl_set_timer",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double],
            """void fl_set_timer(FL_OBJECT * ob, double total)
            """)
    ftotal = convert_to_double(total)
    keep_elem_refs(pObject, total, ftotal)
    _fl_set_timer(pObject, ftotal)


def fl_get_timer(pObject):
    """
        fl_get_timer(pObject) -> num.

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_timer = cfuncproto(
            load_so_libforms(), "fl_get_timer",
            cty.c_double, [cty.POINTER(xfc.FL_OBJECT)],
            """double fl_get_timer(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    retval = _fl_get_timer(pObject)
    return retval


def fl_set_timer_countup(pObject, yes):
    """
        fl_set_timer_countup(pObject, yes)

        @param pObject: pointer to object

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_timer_countup = cfuncproto(
            load_so_libforms(), "fl_set_timer_countup",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_timer_countup(FL_OBJECT * ob, int yes)
            """)
    iyes = convert_to_int(yes)
    keep_elem_refs(pObject, yes, iyes)
    _fl_set_timer_countup(pObject, iyes)


FL_TIMER_FILTER = cty.CFUNCTYPE(xfc.STRING, cty.POINTER(xfc.FL_OBJECT),
                                cty.c_double)

def fl_set_timer_filter(pObject, py_TimerFilter):
    """
        fl_set_timer_filter(pObject, py_TimerFilter) -> timer_filter func.

        @param pObject: pointer to object
        @param py_TimerFilter: python function, fn(pObject, valfloat) ->
           string

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_timer_filter = cfuncproto(
            load_so_libforms(), "fl_set_timer_filter",
            FL_TIMER_FILTER, [cty.POINTER(xfc.FL_OBJECT), FL_TIMER_FILTER],
            """FL_TIMER_FILTER fl_set_timer_filter(FL_OBJECT * ob,
               FL_TIMER_FILTER filter)
            """)
    c_TimerFilter = FL_TIMER_FILTER(py_TimerFilter)
    keep_cfunc_refs(c_TimerFilter, py_TimerFilter)
    keep_elem_refs(pObject)
    retval = _fl_set_timer_filter(pObject, c_TimerFilter)
    return retval


def fl_suspend_timer(pObject):
    """
        fl_suspend_timer(pObject)

        @param pObject: pointer to object

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_suspend_timer = cfuncproto(
            load_so_libforms(), "fl_suspend_timer",
            None, [cty.POINTER(xfc.FL_OBJECT)],
            """void fl_suspend_timer(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_suspend_timer(pObject)


def fl_resume_timer(pObject):
    """
        fl_resume_timer(pObject)

        Resume timer previously paused.

        @param pObject: pointer to timer object

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_resume_timer = cfuncproto(
            load_so_libforms(), "fl_resume_timer",
            None, [cty.POINTER(xfc.FL_OBJECT)],
            """void fl_resume_timer(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_resume_timer(pObject)



###############################
# forms.h (xpopup.h)
# Prototypes for xpop-up menus
###############################

# fl_setpup_entries function placeholder (deprecated)
# fl_newpup function placeholder (deprecated)
# fl_defpup function placeholder (deprecated)
# fl_addtopup function placeholder (deprecated)
# fl_setpup_mode function placeholder (deprecated)
# fl_freepup function placeholder (deprecated)
# fl_dopup function placeholder (deprecated)
# fl_setpup_default_cursor function placeholder (deprecated)
# fl_setpup_default_color function placeholder (deprecated)
# fl_setpup_default_pup_checked_color function placeholder (deprecated)
# fl_setpup_default_fontsize function placeholder (deprecated)
# fl_setpup_default_fontstyle function placeholder (deprecated)
#fl_setpup_fontsize placeholder (deprecated)
#fl_setpup_fontstyle placeholder (deprecated)
#fl_setpup_color placeholder (deprecated)
#fl_setpup_default_checkcolor placeholder (deprecated)
#fl_setpup_checkcolor placeholder (deprecated)
# fl_setpup_default_bw function placeholder (deprecated)
# fl_setpup_shortcut function placeholder (deprecated)
# fl_setpup_position function placeholder (deprecated)
# fl_setpup_selection function placeholder (deprecated)
# fl_setpup_shadow function placeholder (deprecated)
# fl_setpup_softedge function placeholder (deprecated)
# fl_setpup_bw function placeholder (deprecated)
# fl_setpup_title function placeholder (deprecated)
#FL_PUP_ENTERCB placeholder (deprecated)
# fl_setpup_entercb function placeholder (deprecated)
#FL_PUP_LEAVECB placeholder (deprecated)
# fl_setpup_leavecb function placeholder (deprecated)
# fl_setpup_pad function placeholder (deprecated)
# fl_setpup_cursor function placeholder (deprecated)
# fl_setpup_maxpup function placeholder (deprecated)
# fl_getpup_mode function placeholder (deprecated)
# fl_getpup_text function placeholder (deprecated)
# fl_showpup function placeholder (deprecated)
# fl_hidepup function placeholder (deprecated)
# fl_getpup_items function placeholder (deprecated)
# fl_current_pup function placeholder (deprecated)
# fl_setpup_itemcb function placeholder (deprecated)
# fl_setpup_menucb function placeholder (deprecated)
# fl_setpup_submenu function placeholder (deprecated)
# fl_setpup placeholder



#####################
# forms.h (xyplot.h)
#####################

# Others

# fl_create_xyplot function placeholder (internal)


def fl_add_xyplot(plottype, x, y, w, h, label):
    """
        fl_add_xyplot(plottype, x, y, w, h, label) -> pObject

        Adds an xyplot object.

        @param plottype: type of xyplot to be added
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of xyplot

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_xyplot = cfuncproto(
            load_so_libforms(), "fl_add_xyplot",
            cty.POINTER(xfc.FL_OBJECT), [cty.c_int, xfc.FL_Coord,
            xfc.FL_Coord, xfc.FL_Coord, xfc.FL_Coord, xfc.STRING],
            """FL_OBJECT * fl_add_xyplot(int t, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    check_admitted_listvalues(plottype, xfc.XYPLOTTYPE_list)
    iplottype = convert_to_int(plottype)
    ix = convert_to_FL_Coord(x)
    iy = convert_to_FL_Coord(y)
    iw = convert_to_FL_Coord(w)
    ih = convert_to_FL_Coord(h)
    slabel = convert_to_string(label)
    keep_elem_refs(plottype, x, y, w, h, label, iplottype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_xyplot(iplottype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_xyplot_data(pObject, xlist, ylist, n, title, xlabel, ylabel):
    """
        fl_set_xyplot_data(pObject, xlist, ylist, n, title, xlabel, ylabel)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_data = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_data",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float), cty.c_int, xfc.STRING, xfc.STRING,
            xfc.STRING],
            """void fl_set_xyplot_data(FL_OBJECT * ob, float * x, float * y,
               int n, const char * title, const char * xlabel,
               const char * ylabel)
            """)
    #px = cty.cast(x, cty.POINTER(cty.c_float))
    print xlist, xlist[0]
    fx = []
    for a in range(xlist):
        fx[a] = convert_to_float(xlist[a])
    px = cty.pointer(fx)
    print "x, fx, px", xlist, fx, px
    #py = cty.cast(y, cty.POINTER(cty.c_float))
    fy = []
    for a in range(ylist):
        fy[a] = convert_to_float(ylist[a])
    py = cty.pointer(fy)
    print "y, fy, py", ylist, fy, py
    inum = convert_to_int(n)
    stitle = convert_to_string(title)
    sxlabel = convert_to_string(xlabel)
    sylabel = convert_to_string(ylabel)
    keep_elem_refs(pObject, xlist, ylist, n, fx, fy, px, py, title, \
                   xlabel, ylabel, inum, stitle, sxlabel, sylabel)
    _fl_set_xyplot_data(pObject, px, py, inum, stitle, sxlabel, sylabel)


def fl_set_xyplot_data_double(pObject, x, y, n, title, xlabel, ylabel):
    """
        fl_set_xyplot_data_double(pObject, x, y, n, title, xlabel, ylabel)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_data_double = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_data_double",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double), cty.c_int, xfc.STRING, xfc.STRING,
            xfc.STRING],
            """void fl_set_xyplot_data_double(FL_OBJECT * ob, double * x,
               double * y, int n, const char * title, const char * xlabel,
               const char * ylabel)
            """)
    px = cty.cast(x, cty.POINTER(cty.c_double))
    py = cty.cast(y, cty.POINTER(cty.c_double))
    inum = convert_to_int(n)
    stitle = convert_to_string(title)
    sxlabel = convert_to_string(xlabel)
    sylabel = convert_to_string(ylabel)
    keep_elem_refs(pObject, x, y, n, title, xlabel, ylabel, px, py, inum, \
                   stitle, sxlabel, sylabel)
    _fl_set_xyplot_data_double(pObject, px, py, n, title, \
                                        xlabel, ylabel, inum, stitle, \
                                        sxlabel, sylabel)


def fl_set_xyplot_file(pObject, fname, title, xl, yl):
    """
        fl_set_xyplot_file(pObject, fname, title, xl, yl) -> num.

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_file = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_file",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING, xfc.STRING,
            xfc.STRING, xfc.STRING],
            """int fl_set_xyplot_file(FL_OBJECT * ob, const char * f,
               const char * title, const char * xl, const char * yl)
            """)
    sfname = convert_to_string(fname)
    stitle = convert_to_string(title)
    sxl = convert_to_string(xl)
    syl = convert_to_string(yl)
    keep_elem_refs(pObject, fname, title, xl, yl, sfname, stitle, sxl, syl)
    retval = _fl_set_xyplot_file(pObject, sfname, stitle, sxl, syl)
    return retval


def fl_insert_xyplot_data(pObject, idnum, n, valx, valy):
    """ 
        fl_insert_xyplot_data(pObject, idnum, n, valx, valy)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_insert_xyplot_data = cfuncproto(
            load_so_libforms(), "fl_insert_xyplot_data",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int,
            cty.c_double, cty.c_double],
            """void fl_insert_xyplot_data(FL_OBJECT * ob, int id, int n,
               double x, double y)
            """)
    iidnum = convert_to_int(idnum)
    inum = convert_to_int(n)
    fvalx = convert_to_double(valx)
    fvaly = convert_to_double(valy)
    keep_elem_refs(pObject, idnum, n, valx, valy, iidnum, inum, fvalx, fvaly)
    _fl_insert_xyplot_data(pObject, iidnum, inum, fvalx, fvaly)


def fl_add_xyplot_text(pObject, valx, valy, text, al, colr):
    """
        fl_add_xyplot_text(pObject, valx, valy, text, al, colr)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_xyplot_text = cfuncproto(
            load_so_libforms(), "fl_add_xyplot_text",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double,
            xfc.STRING, cty.c_int, xfc.FL_COLOR],
            """void fl_add_xyplot_text(FL_OBJECT * ob, double x, double y,
               const char * text, int al, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    fvalx = convert_to_double(valx)
    fvaly = convert_to_double(valy)
    stext = convert_to_string(text)
    ial = convert_to_int(al)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, valx, valy, text, al, colr, fvalx, fvaly, \
                   stext, ial, ulcolr)
    _fl_add_xyplot_text(pObject, fvalx, fvaly, stext, ial, ulcolr)


def fl_delete_xyplot_text(pObject, text):
    """
        fl_delete_xyplot_text(pObject, text)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_delete_xyplot_text = cfuncproto(
            load_so_libforms(), "fl_delete_xyplot_text",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING],
            """void fl_delete_xyplot_text(FL_OBJECT * ob, const char * text)
            """)
    stext = convert_to_string(text)
    keep_elem_refs(pObject, text, stext)
    _fl_delete_xyplot_text(pObject, stext)


def fl_set_xyplot_maxoverlays(pObject, maxover):
    """
        fl_set_xyplot_maxoverlays(pObject, maxover) -> num.

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_maxoverlays = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_maxoverlays",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """int fl_set_xyplot_maxoverlays(FL_OBJECT * ob, int maxover)
            """)
    imaxover = convert_to_int(maxover)
    keep_elem_refs(pObject, maxover, imaxover)
    retval = _fl_set_xyplot_maxoverlays(pObject, imaxover)
    return retval


def fl_add_xyplot_overlay(pObject, idnum, x, y, n, colr):
    """
        fl_add_xyplot_overlay(pObject, idnum, x, y, n, colr)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_xyplot_overlay = cfuncproto(
            load_so_libforms(), "fl_add_xyplot_overlay",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int,
            cty.POINTER(cty.c_float), cty.POINTER(cty.c_float), cty.c_int,
            xfc.FL_COLOR],
            """void fl_add_xyplot_overlay(FL_OBJECT * ob, int id, float * x,
               float * y, int n, FL_COLOR col)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    iidnum = convert_to_int(idnum)
    px = cty.cast(x, cty.POINTER(cty.c_float))
    py = cty.cast(y, cty.POINTER(cty.c_float))
    inum = convert_to_int(n)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, idnum, x, y, n, colr, iidnum, px, py, inum, \
                   ulcolr)
    _fl_add_xyplot_overlay(pObject, iidnum, px, py, inum, ulcolr)


def fl_add_xyplot_overlay_file(pObject, idnum, fname, colr):
    """
        fl_add_xyplot_overlay_file(pObject, idnum, fname, colr) -> num.

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_add_xyplot_overlay_file = cfuncproto(
            load_so_libforms(), "fl_add_xyplot_overlay_file",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, xfc.STRING,
            xfc.FL_COLOR],
            """int fl_add_xyplot_overlay_file(FL_OBJECT * ob, int id,
            const char * f, FL_COLOR c)
            """)
    check_admitted_listvalues(colr, xfc.COLOR_list)
    iidnum = convert_to_int(idnum)
    sfname = convert_to_string(fname)
    ulcolr = convert_to_FL_COLOR(colr)
    keep_elem_refs(pObject, idnum, fname, colr, iidnum, sfname, ulcolr)
    retval = _fl_add_xyplot_overlay_file(pObject, iidnum, sfname, ulcolr)
    return retval


def fl_set_xyplot_return(pObject, when):
    """
        fl_set_xyplot_return(pObject, when)

        @param pObject: pointer to object
        @param when: return type

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_return = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_return",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_uint],
            """void fl_set_xyplot_return(FL_OBJECT * ob, unsigned
               int when)
            """)
    uiwhen = convert_to_uint(when)
    keep_elem_refs(pObject, when, uiwhen)
    _fl_set_xyplot_return(pObject, uiwhen)


def fl_set_xyplot_xtics(pObject, major, minor):
    """
        fl_set_xyplot_xtics(pObject, major, minor)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_xtics = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_xtics",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_xyplot_xtics(FL_OBJECT * ob, int major, int minor)
            """)
    imajor = convert_to_int(major)
    iminor = convert_to_int(minor)
    keep_elem_refs(pObject, major, minor, imajor, iminor)
    _fl_set_xyplot_xtics(pObject, imajor, iminor)


def fl_set_xyplot_ytics(pObject, major, minor):
    """
        fl_set_xyplot_ytics(pObject, major, minor)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_ytics = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_ytics",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_xyplot_ytics(FL_OBJECT * ob, int major, int minor)
            """)
    imajor = convert_to_int(major)
    iminor = convert_to_int(minor)
    keep_elem_refs(pObject, major, minor, imajor, iminor)
    _fl_set_xyplot_ytics(pObject, imajor, iminor)


def fl_set_xyplot_xbounds(pObject, minbound, maxbound):
    """
        fl_set_xyplot_xbounds(pObject, minbound, maxbound)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_xbounds = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_xbounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_xyplot_xbounds(FL_OBJECT * ob, double xmin,
               double xmax)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_xyplot_xbounds(pObject, fminbound, fmaxbound)


def fl_set_xyplot_ybounds(pObject, minbound, maxbound):
    """
        fl_set_xyplot_ybounds(pObject, minbound, maxbound)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_ybounds = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_ybounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_xyplot_ybounds(FL_OBJECT * ob, double ymin,
               double ymax)
            """)
    fminbound = convert_to_double(minbound)
    fmaxbound = convert_to_double(maxbound)
    keep_elem_refs(pObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_xyplot_ybounds(pObject, fminbound, fmaxbound)


def fl_get_xyplot_xbounds(pObject):
    """
        fl_get_xyplot_xbounds(pObject) -> minbound, maxbound

        @param pObject: pointer to object

        @attention: API change from XForms - upstream was
           fl_get_xyplot_xbounds(pObject, minbound, maxbound)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_xyplot_xbounds = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_xbounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float)],
            """void fl_get_xyplot_xbounds(FL_OBJECT * ob, float * xmin,
               float * xmax)
            """)
    minbound, pminbound = make_float_and_pointer()
    maxbound, pmaxbound = make_float_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_xyplot_xbounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_get_xyplot_ybounds(pObject):
    """
        fl_get_xyplot_ybounds(pObject) -> minbound, maxbound

        @param pObject: pointer to object

        @attention: API change from XForms - upstream was
           fl_get_xyplot_ybounds(pObject, minbound, maxbound)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_xyplot_ybounds = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_ybounds",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float)],
            """void fl_get_xyplot_ybounds(FL_OBJECT * ob, float * ymin,
               float * ymax)
            """)
    minbound, pminbound = make_float_and_pointer()
    maxbound, pmaxbound = make_float_and_pointer()
    keep_elem_refs(pObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_xyplot_ybounds(pObject, pminbound, pmaxbound)
    return minbound, maxbound


def fl_get_xyplot(pObject):
    """
        fl_get_xyplot(pObject) -> x, y, i

        @param pObject: pointer to object

        @attention: API change from XForms - upstream was
           fl_get_xyplot(pObject, x, y, i)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_xyplot = cfuncproto(
            load_so_libforms(), "fl_get_xyplot",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
            """void fl_get_xyplot(FL_OBJECT * ob, float * x, float * y,
               int * i)
            """)
    x, px = make_float_and_pointer()
    y, py = make_float_and_pointer()
    i, pi = make_int_and_pointer()
    keep_elem_refs(pObject, x, y, i, px, py, pi)
    _fl_get_xyplot(pObject, px, py, pi)
    return x, y, i


def fl_get_xyplot_data(pObject):
    """
        fl_get_xyplot_data(pObject) -> x, y, n

        @param pObject: pointer to object

        @attention: API change from XForms - upstream was
           fl_get_xyplot_data(pObject, x, y, n)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_xyplot_data = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_data",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
            """void fl_get_xyplot_data(FL_OBJECT * ob, float * x, float * y,
               int * n)
            """)
    x, px = make_float_and_pointer()
    y, py = make_float_and_pointer()
    n, pn = make_int_and_pointer()
    keep_elem_refs(pObject, x, y, n, px, py, pn)
    _fl_get_xyplot_data(pObject, px, py, pn)
    return x, y, n


def fl_get_xyplot_data_pointer(pObject, idnum):
    """
        fl_get_xyplot_data_pointer(pObject, idnum) -> x, y, n

        @param pObject: pointer to object

        @attention: API change from XForms - upstream was
           fl_get_xyplot_data_pointer(pObject, idnum, x, y, n)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_xyplot_data_pointer = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_data_pointer",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int,
            cty.POINTER(cty.POINTER(cty.c_float)),
            cty.POINTER(cty.POINTER(cty.c_float)), cty.POINTER(cty.c_int)],
            """void fl_get_xyplot_data_cty.POINTER(xfc.FL_OBJECT * ob, int id,
               float * * x, float * * y, int * n)
            """)
    iidnum = convert_to_int(idnum)
    x, px = make_float_and_pointer()
    y, py = make_float_and_pointer()
    n, pn = make_int_and_pointer()
    keep_elem_refs(pObject, idnum, iidnum, x, y, n, px, py, pn)
    _fl_get_xyplot_data_pointer(pObject, iidnum, px, py, pn)
    return x, y, n


def fl_get_xyplot_overlay_data(pObject, idnum):
    """
        fl_get_xyplot_overlay_data(pObject, idnum) -> x, y, n

        @param pObject: pointer to object

        @attention: API change from XForms - upstream was
           fl_get_xyplot_overlay_data(pObject, idnum, x, y, n)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_xyplot_overlay_data = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_overlay_data",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
            """void fl_get_xyplot_overlay_data(FL_OBJECT * ob, int id,
               float * x, float * y, int * n)
            """)
    iidnum = convert_to_int(idnum)
    x, px = make_float_and_pointer()
    y, py = make_float_and_pointer()
    n, pn = make_int_and_pointer()
    keep_elem_refs(pObject, idnum, iidnum, x, y, n, px, py, pn)
    _fl_get_xyplot_overlay_data(pObject, iidnum, px, py, pn)
    return x, y, n


def fl_set_xyplot_overlay_type(pObject, idnum, plottype):
    """
        fl_set_xyplot_overlay_type(pObject, idnum, plottype)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_overlay_type = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_overlay_type",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_xyplot_overlay_type(FL_OBJECT * ob, int id,
               int type)
            """)
    iidnum = convert_to_int(idnum)
    iplottype = convert_to_int(plottype)
    keep_elem_refs(pObject, idnum, plottype, iidnum, iplottype)
    _fl_set_xyplot_overlay_type(pObject, iidnum, iplottype)


def fl_delete_xyplot_overlay(pObject, idnum):
    """
        fl_delete_xyplot_overlay(pObject, idnum)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_delete_xyplot_overlay = cfuncproto(
            load_so_libforms(), "fl_delete_xyplot_overlay",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_delete_xyplot_overlay(FL_OBJECT * ob, int id)
            """)
    iidnum = convert_to_int(idnum)
    keep_elem_refs(pObject, idnum, iidnum)
    _fl_delete_xyplot_overlay(pObject, iidnum)


def fl_set_xyplot_interpolate(pObject, idnum, deg, grid):
    """
        fl_set_xyplot_interpolate(pObject, idnum, deg, grid)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_interpolate = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_interpolate",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int,
            cty.c_double],
            """void fl_set_xyplot_interpolate(FL_OBJECT * ob, int id,
               int deg, double grid)
            """)
    iidnum = convert_to_int(idnum)
    ideg = convert_to_int(deg)
    fgrid = convert_to_double(grid)
    keep_elem_refs(pObject, idnum, deg, grid, iidnum, ideg, fgrid)
    _fl_set_xyplot_interpolate(pObject, iidnum, ideg, fgrid)


def fl_set_xyplot_inspect(pObject, yes):
    """
        fl_set_xyplot_inspect(pObject, yes)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_inspect = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_inspect",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_xyplot_inspect(FL_OBJECT * ob, int yes)
            """)
    iyes = convert_to_int(yes)
    keep_elem_refs(pObject, yes, iyes)
    _fl_set_xyplot_inspect(pObject, iyes)


def fl_set_xyplot_symbolsize(pObject, n):
    """
        fl_set_xyplot_symbolsize(pObject, n)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_symbolsize = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_symbolsize",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_xyplot_symbolsize(FL_OBJECT * ob, int n)
            """)
    inum = convert_to_int(n)
    keep_elem_refs(pObject, n, inum)
    _fl_set_xyplot_symbolsize(pObject, inum)


def fl_replace_xyplot_point(pObject, i, valx, valy):
    """
        fl_replace_xyplot_point(pObject, i, valx, valy)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_replace_xyplot_point = cfuncproto(
            load_so_libforms(), "fl_replace_xyplot_point",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_double,
            cty.c_double],
            """void fl_replace_xyplot_point(FL_OBJECT * ob, int i,
               double x, double y)
            """)
    ii = convert_to_int(i)
    fvalx = convert_to_double(valx)
    fvaly = convert_to_double(valy)
    keep_elem_refs(pObject, i, valx, valy, ii, fvalx, fvaly)
    _fl_replace_xyplot_point(pObject, ii, fvalx, fvaly)


# Replace the value of a particular point in dataset setID,
# where setID=0 is the first data set.
# This routine is an extension of fl_replace_xyplot_point
# which acts on the first dataset only.

def fl_replace_xyplot_point_in_overlay(pObject, i, setID, valx, valy):
    """
        fl_replace_xyplot_point_in_overlay(pObject, i, setID, valx, valy)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_replace_xyplot_point_in_overlay = cfuncproto(
            load_so_libforms(), "fl_replace_xyplot_point_in_overlay",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int, \
            cty.c_double, cty.c_double],
            """void fl_replace_xyplot_point_in_overlay(FL_OBJECT * ob,
               int i, int setID, double x, double y)
            """)
    ii = convert_to_int(i)
    isetID = convert_to_int(setID)
    fvalx = convert_to_double(valx)
    fvaly = convert_to_double(valy)
    keep_elem_refs(pObject, i, setID, valx, valy, ii, isetID, fvalx, fvaly)
    _fl_replace_xyplot_point_in_overlay(pObject, ii, isetID, fvalx, fvaly)


def fl_get_xyplot_xmapping(pObject):
    """
        fl_get_xyplot_xmapping(pObject) -> a, b

        @param pObject: pointer to object

        @attention: API change from XForms - upstream was
           fl_get_xyplot_xmapping(pObject, a, b)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_xyplot_xmapping = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_xmapping",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float)],
            """void fl_get_xyplot_xmapping(FL_OBJECT * ob, float * a,
               float * b)
            """)
    a, pa = make_float_and_pointer()
    b, pb = make_float_and_pointer()
    keep_elem_refs(pObject, a, b, pa, pb)
    _fl_get_xyplot_xmapping(pObject, pa, pb)
    return a, b


def fl_get_xyplot_ymapping(pObject):
    """
        fl_get_xyplot_ymapping(pObject) -> a, b

        @param pObject: pointer to object

        @attention: API change from XForms - upstream was
           fl_get_xyplot_ymapping(pObject, a, b)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_xyplot_ymapping = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_ymapping",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(cty.c_float),
            cty.POINTER(cty.c_float)],
            """void fl_get_xyplot_ymapping(FL_OBJECT * ob, float * a,
               float * b)
            """)
    a, pa = make_float_and_pointer()
    b, pb = make_float_and_pointer()
    keep_elem_refs(pObject, a, b, pa, pb)
    _fl_get_xyplot_ymapping(pObject, pa, pb)
    return a, b


def fl_set_xyplot_keys(pObject, keys, valx, valy, align):
    """
        fl_set_xyplot_keys(pObject, keys, valx, valy, align)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_keys = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_keys",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.POINTER(xfc.STRING), cty.c_float,
            cty.c_float, cty.c_int],
            """void fl_set_xyplot_keys(FL_OBJECT * ob, char * * keys, float x,
               float y, int align)
            """)
    fvalx = convert_to_float(valx)
    fvaly = convert_to_float(valy)
    ialign = convert_to_int(align)
    keep_elem_refs(pObject, keys, valx, valy, align, fvalx, fvaly, ialign)
    _fl_set_xyplot_keys(pObject, keys, fvalx, fvaly, ialign)


def fl_set_xyplot_key(pObject, idnum, keytxt):
    """
        fl_set_xyplot_key(pObject, idnum, keytxt)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_key = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_key",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, xfc.STRING],
            """void fl_set_xyplot_key(FL_OBJECT * ob, int id,
               const char * key)
            """)
    iidnum = convert_to_int(idnum)
    skeytxt = convert_to_string(keytxt)
    keep_elem_refs(pObject, idnum, keytxt, iidnum, skeytxt)
    _fl_set_xyplot_key(pObject, iidnum, skeytxt)


def fl_set_xyplot_key_position(pObject, valx, valy, align):
    """
        fl_set_xyplot_key_position(pObject, valx, valy, align)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_key_position = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_key_position",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_float, cty.c_float,
            cty.c_int],
            """void fl_set_xyplot_key_position(FL_OBJECT * ob, float x,
               float y, int align)
            """)
    fvalx = convert_to_float(valx)
    fvaly = convert_to_float(valy)
    ialign = convert_to_int(align)
    keep_elem_refs(pObject, valx, valy, align, fvalx, fvaly, ialign)
    _fl_set_xyplot_key_position(pObject, fvalx, fvaly, ialign)


def fl_set_xyplot_key_font(pObject, style, size):
    """
        fl_set_xyplot_key_font(pObject, style, size)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_key_font = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_key_font",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_xyplot_key_font(FL_OBJECT * ob, int style,
               int size)
            """)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    keep_elem_refs(pObject, style, size, istyle, isize)
    _fl_set_xyplot_key_font(pObject, istyle, isize)


def fl_get_xyplot_numdata(pObject, idnum):
    """
        fl_get_xyplot_numdata(pObject, idnum) -> num.

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_xyplot_numdata = cfuncproto(
            load_so_libforms(), "fl_get_xyplot_numdata",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """int fl_get_xyplot_numdata(FL_OBJECT * ob, int id)
            """)
    iidnum = convert_to_int(idnum)
    keep_elem_refs(pObject, idnum, iidnum)
    retval = _fl_get_xyplot_numdata(pObject, iidnum)
    return retval


# fl_set_xyplot_fontsize function placeholder (deprecated)
# fl_set_xyplot_fontstyle function placeholder (deprecated)


def fl_xyplot_s2w(pObject, sx, sy, wx, wy):
    """
        fl_xyplot_s2w(pObject, sx, sy, wx, wy)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_xyplot_s2w = cfuncproto(
            load_so_libforms(), "fl_xyplot_s2w",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double,
            cty.POINTER(cty.c_float), cty.POINTER(cty.c_float)],
            """void fl_xyplot_s2w(FL_OBJECT * ob, double sx, double sy,
               float * wx, float * wy)
            """)
    fsx = convert_to_double(sx)
    fsy = convert_to_double(sy)
    keep_elem_refs(pObject, sx, sy, wx, wy, fsx, fsy)
    _fl_xyplot_s2w(pObject, fsx, fsy, wx, wy)


def fl_xyplot_w2s(pObject, wx, wy, sx, sy):
    """
        fl_xyplot_w2s(pObject, wx, wy, sx, sy)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_xyplot_w2s = cfuncproto(
            load_so_libforms(), "fl_xyplot_w2s",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_double, cty.c_double,
            cty.POINTER(cty.c_float), cty.POINTER(cty.c_float)],
            """void fl_xyplot_w2s(FL_OBJECT * ob, double wx, double wy,
               float * sx, float * sy)
            """)
    fwx = convert_to_double(wx)
    fwy = convert_to_double(wy)
    keep_elem_refs(pObject, wx, wy, sx, sy, fwx, fwy)
    _fl_xyplot_w2s(pObject, fwx, fwy, sx, sy)


def fl_set_xyplot_xscale(pObject, scale, base):
    """
        fl_set_xyplot_xscale(pObject, scale, base)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_xscale = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_xscale",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_double],
            """void fl_set_xyplot_xscale(FL_OBJECT * ob, int scale,
               double base)
            """)
    iscale = convert_to_int(scale)
    fbase = convert_to_double(base)
    keep_elem_refs(pObject, scale, base, iscale, fbase)
    _fl_set_xyplot_xscale(pObject, iscale, fbase)


def fl_set_xyplot_yscale(pObject, scale, base):
    """
        fl_set_xyplot_yscale(pObject, scale, base)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_yscale = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_yscale",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_double],
            """void fl_set_xyplot_yscale(FL_OBJECT * ob, int scale,
               double base)
            """)
    iscale = convert_to_int(scale)
    fbase = convert_to_double(base)
    keep_elem_refs(pObject, scale, base, iscale, fbase)
    _fl_set_xyplot_yscale(pObject, iscale, fbase)


def fl_clear_xyplot(pObject):
    """
        fl_clear_xyplot(pObject)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_clear_xyplot = cfuncproto(
            load_so_libforms(), "fl_clear_xyplot",
            None, [cty.POINTER(xfc.FL_OBJECT)],
            """void fl_clear_xyplot(FL_OBJECT * ob)
            """)
    keep_elem_refs(pObject)
    _fl_clear_xyplot(pObject)


def fl_set_xyplot_linewidth(pObject, idnum, lw):
    """
        fl_set_xyplot_linewidth(pObject, idnum, lw)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_linewidth = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_linewidth",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int, cty.c_int],
            """void fl_set_xyplot_linewidth(FL_OBJECT * ob, int id, int lw)
            """)
    iidnum = convert_to_int(idnum)
    ilw = convert_to_int(lw)
    keep_elem_refs(pObject, idnum, lw, iidnum, ilw)
    _fl_set_xyplot_linewidth(pObject, iidnum, ilw)


def fl_set_xyplot_xgrid(pObject, xgrid):
    """
        fl_set_xyplot_xgrid(pObject, xgrid)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_xgrid = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_xgrid",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_xyplot_xgrid(FL_OBJECT * ob, int xgrid)
            """)
    ixgrid = convert_to_int(xgrid)
    keep_elem_refs(pObject, xgrid, ixgrid)
    _fl_set_xyplot_xgrid(pObject, ixgrid)


def fl_set_xyplot_ygrid(pObject, ygrid):
    """
        fl_set_xyplot_ygrid(pObject, ygrid)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_ygrid = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_ygrid",
            None, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """void fl_set_xyplot_ygrid(FL_OBJECT * ob, int ygrid)
            """)
    iygrid = convert_to_int(ygrid)
    keep_elem_refs(pObject, ygrid, iygrid)
    _fl_set_xyplot_ygrid(pObject, iygrid)


def fl_set_xyplot_grid_linestyle(pObject, linestyle):
    """
        fl_set_xyplot_grid_linestyle(pObject, linestyle) -> num.

        @param pObject: pointer to object
        @param linestyle: style of the line to draw
        @type linestyle: [num./int] from xfdata module FL_SOLID, FL_USERDASH,
                         FL_USERDOUBLEDASH, FL_DOT, FL_DOTDASH, FL_DASH,
                         FL_LONGDASH

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_grid_linestyle = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_grid_linestyle",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """int fl_set_xyplot_grid_linestyle(FL_OBJECT * ob, int style)
            """)
    ilinestyle = convert_to_int(linestyle)
    keep_elem_refs(pObject, linestyle, ilinestyle)
    retval = _fl_set_xyplot_grid_linestyle(pObject, ilinestyle)
    return retval


def fl_set_xyplot_alphaxtics(pObject, m, s):
    """
        fl_set_xyplot_alphaxtics(pObject, m, s)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_alphaxtics = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_alphaxtics",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING, xfc.STRING],
            """void fl_set_xyplot_alphaxtics(FL_OBJECT * ob, const char * m,
               const char * s)
            """)
    sm = convert_to_string(m)
    ss = convert_to_string(s)
    keep_elem_refs(pObject, m, s, sm, ss)
    _fl_set_xyplot_alphaxtics(pObject, sm, ss)


def fl_set_xyplot_alphaytics(pObject, m, s):
    """
        fl_set_xyplot_alphaytics(pObject, m, s)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_alphaytics = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_alphaytics",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING, xfc.STRING],
            """void fl_set_xyplot_alphaytics(FL_OBJECT * ob, const char * m,
               const char * s)
            """)
    sm = convert_to_string(m)
    ss = convert_to_string(s)
    keep_elem_refs(pObject, m, s, sm, ss)
    _fl_set_xyplot_alphaytics(pObject, sm, ss)


def fl_set_xyplot_fixed_xaxis(pObject, lm, rm):
    """
        fl_set_xyplot_fixed_xaxis(pObject, lm, rm)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_fixed_xaxis = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_fixed_xaxis",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING, xfc.STRING],
            """void fl_set_xyplot_fixed_xaxis(FL_OBJECT * ob, const char * lm,
               const char * rm)
            """)
    slm = convert_to_string(lm)
    srm = convert_to_string(rm)
    keep_elem_refs(pObject, lm, rm, slm, srm)
    _fl_set_xyplot_fixed_xaxis(pObject, slm, srm)


def fl_set_xyplot_fixed_yaxis(pObject, bm, tm):
    """
        fl_set_xyplot_fixed_yaxis(pObject, bm, tm)

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_fixed_yaxis = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_fixed_yaxis",
            None, [cty.POINTER(xfc.FL_OBJECT), xfc.STRING, xfc.STRING],
            """void fl_set_xyplot_fixed_yaxis(FL_OBJECT * ob, const char * bm,
               const char * tm)
            """)
    sbm = convert_to_string(bm)
    stm = convert_to_string(tm)
    keep_elem_refs(pObject, bm, tm, sbm, stm)
    _fl_set_xyplot_fixed_yaxis(pObject, sbm, stm)


def fl_interpolate(wx, wy, nin, x, y, grid, ndeg):
    """
        fl_interpolate(wx, wy, nin, x, y, grid, ndeg) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_interpolate = cfuncproto(
            load_so_libforms(), "fl_interpolate",
            cty.c_int, [cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
            cty.c_int, cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
            cty.c_double, cty.c_int],
            """int fl_interpolate(const char * wx, const char * wy, int nin,
               float * x, float * y, double grid, int ndeg)
            """)
    inin = convert_to_int(nin)
    fgrid = convert_to_double(grid)
    indeg = convert_to_int(ndeg)
    keep_elem_refs(wx, wy, nin, x, y, grid, ndeg, inin, fgrid, indeg)
    retval = _fl_interpolate(wx, wy, inin, x, y, fgrid, indeg)
    return retval


def fl_spline_interpolate(wx, wy, nin, x, y, grid):
    """
        fl_spline_interpolate(wx, wy, nin, x, y, grid) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_spline_interpolate = cfuncproto(
            load_so_libforms(), "fl_spline_interpolate",
            cty.c_int, [cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
            cty.c_int, cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
            cty.c_double],
            """int fl_spline_interpolate(const char * wx, const char * wy,
               int nin, float * x, float * y, double grid)
            """)
    inin = convert_to_int(nin)
    fgrid = convert_to_double(grid)
    keep_elem_refs(wx, wy, nin, x, y, grid, inin, fgrid)
    retval = _fl_spline_interpolate(wx, wy, inin, x, y, fgrid)
    return retval


FL_XYPLOT_SYMBOL = cty.CFUNCTYPE(None, cty.POINTER(xfc.FL_OBJECT), cty.c_int,
            cty.POINTER(xfc.FL_POINT), cty.c_int, cty.c_int, cty.c_int)

def fl_set_xyplot_symbol(pObject, idnum, py_XyPlotSymbol):
    """
        fl_set_xyplot_symbol(pObject, idnum, py_XyPlotSymbol) -> xyplot_symbol func.

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_symbol = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_symbol",
            FL_XYPLOT_SYMBOL, [cty.POINTER(xfc.FL_OBJECT), cty.c_int,
            FL_XYPLOT_SYMBOL],
            """FL_XYPLOT_SYMBOL fl_set_xyplot_symbol(FL_OBJECT * ob, int id,
               FL_XYPLOT_SYMBOL symbol)
            """)
    iidnum = convert_to_int(idnum)
    c_XyPlotSymbol = FL_XYPLOT_SYMBOL(py_XyPlotSymbol)
    keep_cfunc_refs(c_XyPlotSymbol, py_XyPlotSymbol)
    keep_elem_refs(pObject, idnum, iidnum)
    retval = _fl_set_xyplot_symbol(pObject, iidnum, c_XyPlotSymbol)
    return retval


def fl_set_xyplot_mark_active(pObject, y):
    """
        fl_set_xyplot_mark_active(pObject, y) -> num.

        @param pObject: pointer to object

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_xyplot_mark_active = cfuncproto(
            load_so_libforms(), "fl_set_xyplot_mark_active",
            cty.c_int, [cty.POINTER(xfc.FL_OBJECT), cty.c_int],
            """int fl_set_xyplot_mark_active(FL_OBJECT * ob, int y)
            """)
    iy = convert_to_int(y)
    keep_elem_refs(pObject, y, iy)
    retval = _fl_set_xyplot_mark_active(pObject, iy)
    return retval


# the following (fl_fheight) etc. were never documented and were
# removed from V0.89, but apparently this broke some applications that
# were using them. Put them back in 10/22/00

def fl_gc_():
    """
        fl_gc_() -> gc

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_gc_ = cfuncproto(
            load_so_libforms(), "fl_gc_",
            xfc.GC, [],
            """GC fl_gc_()
            """)
    retval = _fl_gc_()
    return retval


#fl_gc = fl_gc_()       # commented to prevent a SegmentationFault --LK
fl_gc = fl_gc_


def fl_textgc_():
    """
        fl_textgc_() -> gc

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_textgc_ = cfuncproto(
            load_so_libforms(), "fl_textgc_",
            xfc.GC, [],
            """)GC fl_textgc_()
            """)
    retval = _fl_textgc_()
    return retval


#fl_textgc = fl_textgc_()       # commented to prevent a SegmentationFault --LK
fl_textgc = fl_textgc_


def fl_fheight_():
    """
        fl_fheight_() -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_fheight_ = cfuncproto(
            load_so_libforms(), "fl_fheight_",
            cty.c_int, [],
            """int fl_fheight_()
            """)
    retval = _fl_fheight_()
    return retval


#fl_fheight = fl_fheight_()     # commented to prevent a SegmentationFault --LK
fl_fheight = fl_fheight_


def fl_fdesc_():
    """
        fl_fdesc_() -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_fdesc_ = cfuncproto(
            load_so_libforms(), "fl_fdesc_",
            cty.c_int, [],
            """int fl_fdesc_()
            """)
    retval = _fl_fdesc_()
    return retval


#fl_fdesc = fl_fdesc_()         # commented to prevent a SegmentationFault --LK
fl_fdesc = fl_fdesc_


def fl_cur_win_():
    """
        fl_cur_win_() -> window

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_cur_win_ = cfuncproto(
            load_so_libforms(), "fl_cur_win_",
            xfc.Window, [],
            """Window fl_cur_win_()
            """)
    retval = _fl_cur_win_()
    return retval


#fl_cur_win = fl_cur_win_()     # commented to prevent a SegmentationFault--LK
fl_cur_win = fl_cur_win_


def fl_cur_fs_():
    """
        fl_cur_fs_() -> XFontStruct class
    """

    _fl_cur_fs_ = cfuncproto(
            load_so_libforms(), "fl_cur_fs_",
            cty.POINTER(xfc.XFontStruct), [],
            """XFontStruct * fl_cur_fs_()
            """)
    retval = _fl_cur_fs_()
    return retval


#fl_cur_fs = fl_cur_fs_()       # commented to prevent a SegmentationFault --LK
fl_cur_fs = fl_cur_fs_


def fl_display_():
    """
        fl_display_() -> pDisplay

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_display_ = cfuncproto(
            load_so_libforms(), "fl_display_",
            cty.POINTER(xfc.Display), [],
            """Display * fl_display_()
            """)
    retval = _fl_display_()
    return retval



#########################
# flimage.h
# Image related routines
#########################

# fl_safe_free function placeholder (low-level)


def FL_RGB2GRAY(r, g, b):
    return cty.c_uint((78 * (r) + 150 * (g) + 28 * (b)) >> 8)


# if PCBITS is not 8, we need to apply the RGBmask

def FL_IsRGB(pImage):
    return (pImage.contents.type == xfc.FL_IMAGE_RGB)


def FL_IsPacked(pImage):
    return (pImage.contents.type == xfc.FL_IMAGE_PACKED)


def flimage_setup(pImageSetup):
    """
        flimage_setup(pImageSetup)

        @param pImageSetup: pointer to imagesetup struct

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_setup = cfuncproto(
            load_so_libflimage(), "flimage_setup",
            None, [cty.POINTER(xfc.FLIMAGE_SETUP)],
            """void flimage_setup(FLIMAGE_SETUP * setup)
            """)
    keep_elem_refs(pImageSetup)
    _flimage_setup(pImageSetup)


# basic IO routines

def flimage_load(filename):
    """
        flimage_load(filename) -> pImage

        @param filename: name of file to load

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_load = cfuncproto(
            load_so_libflimage(), "flimage_load",
            cty.POINTER(xfc.FL_IMAGE), [xfc.STRING],
            """FL_IMAGE * flimage_load(const char * file)
            """)
    sfilename = convert_to_string(filename)
    keep_elem_refs(filename, sfilename)
    retval = _flimage_load(sfilename)
    return retval


def flimage_read(pImage):
    """
        flimage_read(pImage) -> pImage

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_read = cfuncproto(
            load_so_libflimage(), "flimage_read",
            cty.POINTER(xfc.FL_IMAGE), [cty.POINTER(xfc.FL_IMAGE)],
            """FL_IMAGE * flimage_read(FL_IMAGE * im)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_read(pImage)
    return retval


def flimage_dump(pImage, p2, p3):
    """
        flimage_dump(pImage, p2, p3) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_dump = cfuncproto(
            load_so_libflimage(), "flimage_dump",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), xfc.STRING, xfc.STRING],
            """int flimage_dump(FL_IMAGE * p1, const char * p2,
               const char * p3)
            """)
    sp2 = convert_to_string(p2)
    sp3 = convert_to_string(p3)
    keep_elem_refs(pImage, p2, p3, sp2, sp3)
    retval = _flimage_dump(pImage, sp2, sp3)
    return retval


def flimage_close(pImage):
    """
        flimage_close(pImage) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_close = cfuncproto(
            load_so_libflimage(), "flimage_close",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE)],
            """int flimage_close(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_close(pImage)
    return retval


def flimage_alloc():
    """
        flimage_alloc() -> pImage

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_alloc = cfuncproto(
            load_so_libflimage(), "flimage_alloc",
            cty.POINTER(xfc.FL_IMAGE), [],
            """FL_IMAGE * flimage_alloc()
            """)
    retval = _flimage_alloc()
    return retval


def flimage_getmem(pImage):
    """
        flimage_getmem(pImage) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_getmem = cfuncproto(
            load_so_libflimage(), "flimage_getmem",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE)],
            """int flimage_getmem(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_getmem(pImage)
    return retval


def flimage_is_supported(fname):
    """
        flimage_is_supported(fname) -> num.

        @param fname: filename

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_is_supported = cfuncproto(
            load_so_libflimage(), "flimage_is_supported",
            cty.c_int, [xfc.STRING],
            """int flimage_is_supported(const char * p1)
            """)
    sfname = convert_to_string(fname)
    keep_elem_refs(fname, sfname)
    retval = _flimage_is_supported(sfname)
    return retval


def flimage_description_via_filter(pImage, p2, p3, p4):
    """
        flimage_description_via_filter(pImage, p2, p3, p4) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_description_via_filter = cfuncproto(
            load_so_libflimage(), "flimage_description_via_filter",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.POINTER(xfc.STRING),
            xfc.STRING, cty.c_int],
            """int flimage_description_via_filter(FL_IMAGE * p1,
               const char * p2, const char * p3, int p4)
            """)
    sp3 = convert_to_string(p3)
    ip4 = convert_to_string(p4)
    keep_elem_refs(pImage, p2, p3, p4, sp3, ip4)
    retval = _flimage_description_via_filter(pImage, p2, sp3, ip4)
    return retval


def flimage_write_via_filter(pImage, p2, p3, p4):
    """
        flimage_write_via_filter(pImage, p2, p3, p4) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_write_via_filter = cfuncproto(
            load_so_libflimage(), "flimage_write_via_filter",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.POINTER(xfc.STRING),
            cty.POINTER(xfc.STRING), cty.c_int],
            """int flimage_write_via_filter(FL_IMAGE * p1, const char * p2,
               const char * p3, int p4)
            """)
    ip4 = convert_to_int(p4)
    keep_elem_refs(pImage, p2, p3, p4, ip4)
    retval = _flimage_write_via_filter(pImage, p2, p3, ip4)
    return retval


def flimage_free(pImage):
    """
        flimage_free(pImage) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_free = cfuncproto(
            load_so_libflimage(), "flimage_free",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE)],
            """int flimage_free(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_free(pImage)
    return retval


def flimage_display(pImage, win):
    """
        flimage_display(pImage, win) -> num.

        @param pImage: pointer to image
        @param win: window

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_display = cfuncproto(
            load_so_libflimage(), "flimage_display",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), xfc.Window],
            """int flimage_display(FL_IMAGE * p1, Window p2)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(pImage, win, ulwin)
    retval = _flimage_display(pImage, ulwin)
    return retval


def flimage_sdisplay(pImage, win):
    """
        flimage_sdisplay(pImage, win) -> num.

        @param pImage: pointer to image
        @param win: window

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_sdisplay = cfuncproto(
            load_so_libflimage(), "flimage_sdisplay",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), xfc.Window],
            """int flimage_sdisplay(FL_IMAGE * p1, Window p2)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(pImage, win, ulwin)
    retval = _flimage_sdisplay(pImage, ulwin)
    return retval


def flimage_convert(pImage, newtype, ncolors):
    """
        flimage_convert(pImage, newtype, ncolors) -> num.

        Convert an image to a new type.

        @param pImage: pointer to image
        @param newtype: new type of flimage to convert to
        @param ncolors: number of colors

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_convert = cfuncproto(
            load_so_libflimage(), "flimage_convert",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.c_int, cty.c_int],
            """int flimage_convert(FL_IMAGE * p1, int p2, int p3)
            """)
    inewtype = convert_to_int(newtype)
    incolors = convert_to_int(ncolors)
    keep_elem_refs(pImage, newtype, ncolors, inewtype, incolors)
    retval = _flimage_convert(pImage, inewtype, incolors)
    return retval


def flimage_type_name(flimagetype):
    """
        flimage_type_name(flimagetype) -> name string

        @param flimagetype: type of flimage

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_type_name = cfuncproto(
            load_so_libflimage(), "flimage_type_name",
            xfc.STRING, [cty.c_int],
            """const char * flimage_type_name(int type)
            """)
    check_admitted_listvalues(flimagetype, xfc.FLIMAGETYPE_list)
    iflimagetype = convert_to_int(flimagetype)
    keep_elem_refs(flimagetype, iflimagetype)
    retval = _flimage_type_name(iflimagetype)
    return retval


def flimage_add_text(pImage, text, length, style, size, txtcolr, bgcolr, tran, tx, ty, rot):
    """
        flimage_add_text(pImage, text, length, style, size, txtcolr, bgcolr, tran, tx, ty, rot) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_add_text = cfuncproto(
            load_so_libflimage(), "flimage_add_text",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), xfc.STRING, cty.c_int,
            cty.c_int, cty.c_int, cty.c_uint, cty.c_uint, cty.c_int,
            cty.c_double, cty.c_double, cty.c_int],
            """int flimage_add_text(FL_IMAGE * im, const char * str, int len,
               int style, int size, unsigned int tcol, unsigned int bcol,
               int tran, double tx, double ty, int rot)
            """)
    stext = convert_to_string(text)
    ilength = convert_to_int(length)
    istyle = convert_to_int(style)
    isize = convert_to_int(size)
    uitxtcolr = convert_to_uint(txtcolr)
    uibgcolr = convert_to_uint(bgcolr)
    itran = convert_to_int(tran)
    ftx = convert_to_double(tx)
    fty = convert_to_double(ty)
    irot = convert_to_int(rot)
    keep_elem_refs(pImage, text, length, style, size, txtcolr, bgcolr, tran, \
                   tx, ty, rot, stext, ilength, istyle, isize, uitxtcolr, \
                   uibgcolr, itran, ftx, fty, irot)
    retval = _flimage_add_text(pImage, stext, ilength, istyle, isize, uitxtcolr, \
                               uibgcolr, itran, ftx, fty, irot)
    return retval


def flimage_add_text_struct(pImage, pImageText):
    """
        flimage_add_text_struct(pImage, pImageText) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_add_text_struct = cfuncproto(
            load_so_libflimage(), "flimage_add_text_struct",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE),
            cty.POINTER(xfc.FLIMAGE_TEXT)],
            """int flimage_add_text_struct(FL_IMAGE * p1, const char * p2)
            """)
    keep_elem_refs(pImage, pImageText)
    retval = _flimage_add_text_struct(pImage, pImageText)
    return retval


def flimage_delete_all_text(pImage):
    """
        flimage_delete_all_text(pImage)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_delete_all_text = cfuncproto(
            load_so_libflimage(), "flimage_delete_all_text",
            None, [cty.POINTER(xfc.FL_IMAGE)],
            """void flimage_delete_all_text(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_delete_all_text(pImage)


def flimage_add_marker(pImage, text, p3, p4, p5, p6, p7, p8, p9, colr, bcolr):
    """
        flimage_add_marker(pImage, text, p3, p4, p5, p6, p7, p8, p9, colr, bcolr) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_add_marker = cfuncproto(
            load_so_libflimage(), "flimage_add_marker",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), xfc.STRING, cty.c_double,
            cty.c_double, cty.c_double, cty.c_double, cty.c_int, cty.c_int,
            cty.c_int, xfc.FL_COLOR, xfc.FL_COLOR],
            """int flimage_add_marker(FL_IMAGE * p1, const char * p2,
               double p3, double p4, double p5, double p6, int p7,
               int p8, int p9, FL_COLOR p10, FL_COLOR p11)
            """)
    stext = convert_to_string(text)
    fp3 = convert_to_double(p3)
    fp4 = convert_to_double(p4)
    fp5 = convert_to_double(p5)
    fp6 = convert_to_double(p6)
    ip7 = convert_to_int(p7)
    ip8 = convert_to_int(p8)
    ip9 = convert_to_int(p9)
    ulcolr = convert_to_FL_COLOR(colr)
    ulbcolr = convert_to_FL_COLOR(bcolr)
    keep_elem_refs(pImage, text, p3, p4, p5, p6, p7, p8, p9, ulcolr, ulbcolr,
                   stext, fp3, fp4, fp5, fp6, ip7, ip8, ip9, ulcolr, ulbcolr)
    retval = _flimage_add_marker(pImage, stext, fp3, fp4, fp5, fp6, ip7,
                                 ip8, ip9, ulcolr, ulbcolr)
    return retval


def flimage_add_marker_struct(pImage, pImageMarker):
    """
        flimage_add_marker_struct(pImage, pImageMarker) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_add_marker_struct = cfuncproto(
            load_so_libflimage(), "flimage_add_marker_struct",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.POINTER(xfc.FLIMAGE_MARKER)],
            """int flimage_add_marker_struct(FL_IMAGE * p1, const char * p2)
            """)
    keep_elem_refs(pImage, pImageMarker)
    retval = _flimage_add_marker_struct(pImage, pImageMarker)
    return retval


def flimage_define_marker(text1, pImageMarker, text2):
    """
        flimage_define_marker(text1, pImageMarker, text2) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_define_marker = cfuncproto(
            load_so_libflimage(), "flimage_define_marker",
            cty.c_int, [xfc.STRING, cty.POINTER(xfc.FLIMAGE_MARKER), xfc.STRING],
            """int flimage_define_marker(const char *, void ( * )
               (FLIMAGE_MARKER *), const char *)
            """)
    stext1 = convert_to_string(text1)
    stext2 = convert_to_string(text2)
    keep_elem_refs(text1, pImageMarker, text2, stext1, stext2)
    retval = _flimage_define_marker(stext1, pImageMarker, stext2)
    return retval


def flimage_delete_all_markers(pImage):
    """
        flimage_delete_all_markers(pImage)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_delete_all_markers = cfuncproto(
            load_so_libflimage(), "flimage_delete_all_markers",
            None, [cty.POINTER(xfc.FL_IMAGE)],
            """void flimage_delete_all_markers(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_delete_all_markers(pImage)


def flimage_render_annotation(pImage, win):
    """
        flimage_render_annotation(pImage, win) -> num.

        @param pImage: pointer to image
        @param win: window

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_render_annotation = cfuncproto(
            load_so_libflimage(), "flimage_render_annotation",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), xfc.FL_WINDOW],
            """int flimage_render_annotation(FL_IMAGE * p1, FL_WINDOW p2)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(pImage, win, ulwin)
    retval = _flimage_render_annotation(pImage, ulwin)
    return retval


def flimage_error(pImage, text):
    """
        flimage_error(pImage, text)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_error = cfuncproto(
            load_so_libflimage(), "flimage_error",
            None, [cty.POINTER(xfc.FL_IMAGE), xfc.STRING],
            """void flimage_error(FL_IMAGE * p1, const char * p2)
            """)
    stext = convert_to_Window(text)
    keep_elem_refs(pImage, text, stext)
    _flimage_error(pImage, stext)


# built-in format supports

def flimage_enable_pnm():
    """
        flimage_enable_pnm()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enable_pnm = cfuncproto(
            load_so_libflimage(), "flimage_enable_pnm",
            None, [],
            """void flimage_enable_pnm()
            """)
    _flimage_enable_pnm()


def flimage_set_fits_bits(p1):
    """
        flimage_set_fits_bits(p1) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_set_fits_bits = cfuncproto(
            load_so_libflimage(), "flimage_set_fits_bits",
            cty.c_int, [cty.c_int],
            """int flimage_set_fits_bits(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    retval = _flimage_set_fits_bits(ip1)
    return retval


def flimage_jpeg_output_options(pImageJpegOption):
    """
        flimage_jpeg_output_options(pImageJpegOption)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_jpeg_output_options = cfuncproto(
            load_so_libflimage(), "flimage_jpeg_output_options",
            None, [cty.POINTER(xfc.FLIMAGE_JPEG_OPTION)],
            """void flimage_jpeg_output_options(FLIMAGE_JPEG_OPTION * p1)
            """)
    keep_elem_refs(pImageJpegOption)
    _flimage_jpeg_output_options(pImageJpegOption)


def flimage_pnm_output_options(p1):
    """
        flimage_pnm_output_options(p1)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_pnm_output_options = cfuncproto(
            load_so_libflimage(), "flimage_pnm_output_options",
            None, [cty.c_int],
            """void flimage_pnm_output_options(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    _flimage_pnm_output_options(ip1)


def flimage_gif_output_options(p1):
    """
        flimage_gif_output_options(p1)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_gif_output_options = cfuncproto(
            load_so_libflimage(), "flimage_gif_output_options",
            None, [cty.c_int],
            """void flimage_gif_output_options(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    _flimage_gif_output_options(ip1)


def flimage_ps_options():
    """
        flimage_ps_options() -> pFlpsControl

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_ps_options = cfuncproto(
            load_so_libflimage(), "flimage_ps_options",
            cty.POINTER(xfc.FLPS_CONTROL), [],
            """FLPS_CONTROL * flimage_ps_options()
            """)
    retval = _flimage_ps_options()
    return retval


flimage_jpeg_options = flimage_jpeg_output_options
flimage_pnm_options = flimage_pnm_output_options
flimage_gif_options = flimage_gif_output_options


def flimage_get_number_of_formats():
    """
        flimage_get_number_of_formats() -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_get_number_of_formats = cfuncproto(
            load_so_libflimage(), "flimage_get_number_of_formats",
            cty.c_int, [],
            """int flimage_get_number_of_formats()
            """)
    retval = _flimage_get_number_of_formats()
    return retval


def flimage_get_format_info(p1):
    """
        flimage_get_format_info(p1) -> ImageFormatInfo class instance

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_get_format_info = cfuncproto(
            load_so_libflimage(), "flimage_get_format_info",
            cty.POINTER(xfc.FLIMAGE_FORMAT_INFO), [cty.c_int],
            """const char * flimage_get_format_info(int p1)
            """)
    ip1 = convert_to_int(p1)
    keep_elem_refs(p1, ip1)
    retval = _flimage_get_format_info(ip1)
    return retval


def fl_get_matrix(nrows, ncols, esize):
    """
        fl_get_matrix(nrows, ncols, esize) -> ?

        @param nrows: number of rows
        @param ncols: number of columns
        @param esize: size of matrix

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_matrix = cfuncproto(
            load_so_libflimage(), "fl_get_matrix",
            cty.c_void_p, [cty.c_int, cty.c_int, cty.c_uint],
            """void * fl_get_matrix(int p1, int p2, unsigned int p3)
            """)
    inrows = convert_to_int(nrows)
    incols = convert_to_int(ncols)
    uiesize = convert_to_uint(esize)
    keep_elem_refs(nrows, ncols, esize, inrows, incols, uiesize)
    retval = _fl_get_matrix(inrows, incols, uiesize)
    return retval


def fl_make_matrix(nrows, ncols, esize, mem):
    """
        fl_make_matrix(nrows, ncols, esize, mem) -> ?

        Makes a matrix out of a given piece of memory.

        @param nrows: number of rows
        @param ncols: number of columns
        @param esize: size of matrix
        @param mem: memory

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_make_matrix = cfuncproto(
            load_so_libflimage(), "fl_make_matrix",
            cty.c_void_p, [cty.c_int, cty.c_int, cty.c_uint, cty.c_void_p],
            """void * fl_make_matrix(int p1, int p2, unsigned int p3,
               void * p4)
            """)
    inrows = convert_to_int(nrows)
    incols = convert_to_int(ncols)
    uiesize = convert_to_uint(esize)
    pmem = cty.cast(mem, cty.c_void_p)
    keep_elem_refs(nrows, ncols, esize, mem, inrows, incols, uiesize, pmem)
    retval = _fl_make_matrix(inrows, incols, uiesize, pmem)
    return retval


def fl_free_matrix(mtrx):
    """
        fl_free_matrix(mtrx)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_free_matrix = cfuncproto(
            load_so_libflimage(), "fl_free_matrix",
            None, [cty.c_void_p],
            """void fl_free_matrix(void * p1)
            """)
    pmtrx = cty.cast(mtrx, cty.c_void_p)
    keep_elem_refs(mtrx, pmtrx)
    _fl_free_matrix(pmtrx)


# backward data dismissed --LK
# This function is retained for compatibility reasons only.
# It returns 1 always.
#def fl_init_RGBdatabase(text):
#    """
#        fl_init_RGBdatabase(text) -> num.
#    """
#
#    _fl_init_RGBdatabase = cfuncproto(
#            load_so_libflimage(), "fl_init_RGBdatabase",
#            cty.c_int, [xfc.STRING],
#            """int fl_init_RGBdatabase(const char * p1)
#            """)
#    stext = convert_to_string(text)
#    keep_elem_refs(text, stext)
#    retval = _fl_init_RGBdatabase(stext)
#    return retval
#end backwards --LK


def fl_lookup_RGBcolor(text, p2, p3, p4):
    """
        fl_lookup_RGBcolor(text, p2, p3, p4) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_lookup_RGBcolor = cfuncproto(
            load_so_libflimage(), "fl_lookup_RGBcolor",
            cty.c_int, [xfc.STRING, cty.POINTER(cty.c_int), \
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
            """int fl_lookup_RGBcolor(const char * p1, int * p2,
               int * p3, int * p4)
            """)
    stext = convert_to_string(text)
    keep_elem_refs(text, p2, p3, p4)
    retval = _fl_lookup_RGBcolor(stext, p2, p3, p4)
    return retval


FLIMAGE_Identify = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfc.FILE))
FLIMAGE_Description = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfc.FL_IMAGE))
FLIMAGE_Read_Pixels = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfc.FL_IMAGE))
FLIMAGE_Write_Image = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfc.FL_IMAGE))

def flimage_add_format(formalname, shortname, extension, flimagetype, \
                       py_ImageIdentify, py_ImageDescription, \
                       py_ImageReadPixels, py_ImageWriteImage):
    """
        flimage_add_format(formalname, shortname, extension, flimagetype,
        py_ImageIdentify, py_ImageDescription, py_ImageReadPixels,
        py_ImageWriteImage) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_add_format = cfuncproto(
            load_so_libflimage(), "flimage_add_format",
            cty.c_int, [xfc.STRING, xfc.STRING, xfc.STRING, cty.c_int,
            FLIMAGE_Identify, FLIMAGE_Description, FLIMAGE_Read_Pixels,
            FLIMAGE_Write_Image],
            """int flimage_add_format(const char * p1, const char * p2,
               const char * p3, int p4, FLIMAGE_Identify p5,
               FLIMAGE_Description p6, FLIMAGE_Read_Pixels p7,
               FLIMAGE_Write_Image p8)
            """)
    check_admitted_listvalues(flimagetype, xfc.FLIMAGETYPE_list)
    sformalname = convert_to_string(formalname)
    sshortname = convert_to_string(shortname)
    sextension = convert_to_string(extension)
    iflimagetype = convert_to_int(flimagetype)
    c_ImageIdentify = FLIMAGE_Identify(py_ImageIdentify)
    c_ImageDescription = FLIMAGE_Description(py_ImageDescription)
    c_ImageReadPixels = FLIMAGE_Read_Pixels(py_ImageReadPixels)
    c_ImageWriteImage = FLIMAGE_Write_Image(py_ImageWriteImage)
    keep_cfunc_refs(c_ImageIdentify, py_ImageIdentify, c_ImageDescription, \
                    py_ImageDescription, c_ImageReadPixels, py_ImageReadPixels,
                    c_ImageWriteImage, py_ImageWriteImage)
    keep_elem_refs(formalname, shortname, extension, flimagetype, \
                   sformalname, sshortname, sextension, iflimagetype)
    retval = _flimage_add_format(sformalname, sshortname, sextension, \
                    flimagetype, c_ImageIdentify, c_ImageDescription, \
                    c_ImageReadPixels, c_ImageWriteImage)
    return retval


def flimage_set_annotation_support(p1, p2):
    """
        flimage_set_annotation_support(p1, p2)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_set_annotation_support = cfuncproto(
            load_so_libflimage(), "flimage_set_annotation_support",
            None, [cty.c_int, cty.c_int],
            """void flimage_set_annotation_support(int p1, int p2)
            """)
    ip1 = convert_to_int(p1)
    ip2 = convert_to_int(p2)
    keep_elem_refs(p1, p2, ip1, ip2)
    _flimage_set_annotation_support(ip1, ip2)


def flimage_getcolormap(pImage):
    """
        flimage_getcolormap(pImage) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_getcolormap = cfuncproto(
            load_so_libflimage(), "flimage_getcolormap",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE)],
            """int flimage_getcolormap(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_getcolormap(pImage)
    return retval


def fl_select_mediancut_quantizer():
    """
        fl_select_mediancut_quantizer()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_select_mediancut_quantizer = cfuncproto(
            load_so_libflimage(), "fl_select_mediancut_quantizer",
            None, [],
            """void fl_select_mediancut_quantizer()
            """)
    _fl_select_mediancut_quantizer()


# simple image processing routines

def flimage_convolve(pImage, p2, p3, p4):
    """
        flimage_convolve(pImage, p2, p3, p4) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_convolve = cfuncproto(
            load_so_libflimage(), "flimage_convolve",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE),
            cty.POINTER(cty.POINTER(cty.c_int)), cty.c_int, cty.c_int],
            """int flimage_convolve(FL_IMAGE * p1, int * * p2, int p3,
               int p4)
            """)
    ip3 = convert_to_int(p3)
    ip4 = convert_to_int(p4)
    keep_elem_refs(pImage, p2, p3, p4, ip3, ip4)
    retval = _flimage_convolve(pImage, p2, ip3, ip4)
    return retval


def flimage_convolvea(pImage, p2, p3, p4):
    """
        flimage_convolvea(pImage, p2, p3, p4) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_convolvea = cfuncproto(
            load_so_libflimage(), "flimage_convolvea",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.POINTER(cty.c_int),
            cty.c_int, cty.c_int],
            """int flimage_convolvea(FL_IMAGE * p1, int * p2, int p3, int p4)
            """)
    keep_elem_refs(pImage, p2, p3, p4)
    retval = _flimage_convolvea(pImage, p2, p3, p4)
    return retval


def flimage_tint(pImage, p2, p3):
    """
        flimage_tint(pImage, p2, p3) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_tint = cfuncproto(
            load_so_libflimage(), "flimage_tint",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.c_uint, cty.c_double],
            """int flimage_tint(FL_IMAGE * p1, unsigned int p2, double p3)
            """)
    keep_elem_refs(pImage, p2, p3)
    retval = _flimage_tint(pImage, p2, p3)
    return retval


def flimage_rotate(pImage, p2, p3):
    """
        flimage_rotate(pImage, p2, p3) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_rotate = cfuncproto(
            load_so_libflimage(), "flimage_rotate",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.c_int, cty.c_int],
            """int flimage_rotate(FL_IMAGE * p1, int p2, int p3)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    keep_elem_refs(pImage, p2, p3, ip2, ip3)
    retval = _flimage_rotate(pImage, ip2, ip3)
    return retval


def flimage_flip(pImage, p2):
    """
        flimage_flip(pImage, p2) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_flip = cfuncproto(
            load_so_libflimage(), "flimage_flip",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.c_int],
            """int flimage_flip(FL_IMAGE * p1, int p2)
            """)
    ip2 = convert_to_int(p2)
    keep_elem_refs(pImage, p2, ip2)
    retval = _flimage_flip(pImage, ip2)
    return retval


def flimage_scale(pImage, p2, p3, p4):
    """
        flimage_scale(pImage, p2, p3, p4) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_scale = cfuncproto(
            load_so_libflimage(), "flimage_scale",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.c_int, cty.c_int,
            cty.c_int],
            """int flimage_scale(FL_IMAGE * p1, int p2, int p3, int p4)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    ip4 = convert_to_int(p4)
    keep_elem_refs(pImage, p2, p3, p4, ip2, ip3, ip4)
    retval = _flimage_scale(pImage, ip2, ip3, ip4)
    return retval


def flimage_warp(pImage, p2, p3, p4, p5):
    """
        flimage_warp(pImage, p2, p3, p4, p5) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_warp = cfuncproto(
            load_so_libflimage(), "flimage_warp",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.POINTER(cty.c_float * 2),
            cty.c_int, cty.c_int, cty.c_int],
            """int flimage_warp(FL_IMAGE * p1, float * p2, int p3, int p4,
               int p5)
            """)
    ip3 = convert_to_int(p3)
    ip4 = convert_to_int(p4)
    ip5 = convert_to_int(p5)
    keep_elem_refs(pImage, p2, p3, p4, p5, ip3, ip4, ip5)
    retval = _flimage_warp(pImage, p2, ip3, ip4, ip5)
    return retval


def flimage_autocrop(pImage, p2):
    """
        flimage_autocrop(pImage, p2) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_autocrop = cfuncproto(
            load_so_libflimage(), "flimage_autocrop",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.c_uint],
            """int flimage_autocrop(FL_IMAGE * p1, unsigned int p2)
            """)
    uip2 = convert_to_uint(p2)
    keep_elem_refs(pImage, p2, uip2)
    retval = _flimage_autocrop(pImage, uip2)
    return retval


def flimage_get_autocrop(pImage, bk):
    """
        flimage_get_autocrop(pImage, bk) -> num., xl, yt, xr, yb

        @param pImage: pointer to image

        @attention: API change from XForms - upstream was
           flimage_get_autocrop(pImage, bk, xl, yt, xr, yb)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_get_autocrop = cfuncproto(
            load_so_libflimage(), "flimage_get_autocrop",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.c_uint,
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
            """int flimage_get_autocrop(FL_IMAGE * p1, unsigned int p2,
               int * p3, int * p4, int * p5, int * p6)
            """)
    uibk = convert_to_uint(bk)
    xl, pxl = make_int_and_pointer()
    yt, pyt = make_int_and_pointer()
    xr, pxr = make_int_and_pointer()
    yb, pyb = make_int_and_pointer()
    keep_elem_refs(pImage, bk, uibk, xl, pxl, yt, pyt, xr, pxr, yb, pyb)
    retval = _flimage_get_autocrop(pImage, uibk, pxl, pyt, pxr, pyb)
    return retval, xl, yt, xr, yb


def flimage_crop(pImage, p2, p3, p4, p5):
    """
        flimage_crop(pImage, p2, p3, p4, p5) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_crop = cfuncproto(
            load_so_libflimage(), "flimage_crop",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.c_int, cty.c_int,
            cty.c_int, cty.c_int],
            """int flimage_crop(FL_IMAGE * p1, int p2, int p3,
               int p4, int p5)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    ip4 = convert_to_int(p4)
    ip5 = convert_to_int(p5)
    keep_elem_refs(pImage, p2, p3, p4, p5, ip2, ip3, ip4, ip5)
    retval = _flimage_crop(pImage, ip2, ip3, ip4, ip5)
    return retval


def flimage_replace_pixel(pImage, p2, p3):
    """
        flimage_replace_pixel(pImage, p2, p3) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_replace_pixel = cfuncproto(
            load_so_libflimage(), "flimage_replace_pixel",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.c_uint, cty.c_uint],
            """int flimage_replace_pixel(FL_IMAGE * p1, unsigned int p2,
               unsigned int p3)
            """)
    uip2 = convert_to_uint(p2)
    uip3 = convert_to_uint(p3)
    keep_elem_refs(pImage, p2, p3, uip2, uip3)
    retval = _flimage_replace_pixel(pImage, uip2, uip3)
    return retval


def flimage_transform_pixels(pImage, red, green, blue):
    """
        flimage_transform_pixels(pImage, red, green, blue) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_transform_pixels = cfuncproto(
            load_so_libflimage(), "flimage_transform_pixels",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
            """int flimage_transform_pixels(FL_IMAGE * p1, int * p2,
               int * p3, int * p4)
            """)
    pred = cty.cast(red, cty.POINTER(cty.c_int))
    pgreen = cty.cast(green, cty.POINTER(cty.c_int))
    pblue = cty.cast(blue, cty.POINTER(cty.c_int))
    keep_elem_refs(pImage, red, green, blue, pred, pgreen, pblue)
    retval = _flimage_transform_pixels(pImage, pred, pgreen, pblue)
    return retval


def flimage_windowlevel(pImage, p2, p3):
    """
        flimage_windowlevel(pImage, p2, p3) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_windowlevel = cfuncproto(
            load_so_libflimage(), "flimage_windowlevel",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.c_int, cty.c_int],
            """int flimage_windowlevel(FL_IMAGE * p1, int p2, int p3)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    keep_elem_refs(pImage, p2, p3, ip2, ip3)
    retval = _flimage_windowlevel(pImage, ip2, ip3)
    return retval


def flimage_enhance(pImage, p2):
    """
        flimage_enhance(pImage, p2) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enhance = cfuncproto(
            load_so_libflimage(), "flimage_enhance",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.c_int],
            """int flimage_enhance(FL_IMAGE * p1, int p2)
            """)
    ip2 = convert_to_int(p2)
    keep_elem_refs(pImage, p2, ip2)
    retval = _flimage_enhance(pImage, ip2)
    return retval


def flimage_from_pixmap(pImage, pixmap):
    """
        flimage_from_pixmap(pImage, pixmap) -> num.

        @param pImage: pointer to image
        @param pixmap: pixmap value

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_from_pixmap = cfuncproto(
            load_so_libflimage(), "flimage_from_pixmap",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), xfc.Pixmap],
            """int flimage_from_pixmap(FL_IMAGE * p1, Pixmap p2)
            """)
    ulpixmap = convert_to_Pixmap(pixmap)
    keep_elem_refs(pImage, pixmap, ulpixmap)
    retval = _flimage_from_pixmap(pImage, ulpixmap)
    return retval


def flimage_to_pixmap(pImage, win):
    """
        flimage_to_pixmap(pImage, win) -> pixmap

        @param pImage: pointer to image
        @param win: window id

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_to_pixmap = cfuncproto(
            load_so_libflimage(), "flimage_to_pixmap",
            xfc.Pixmap, [cty.POINTER(xfc.FL_IMAGE), xfc.FL_WINDOW],
            """Pixmap flimage_to_pixmap(FL_IMAGE * p1, FL_WINDOW p2)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(pImage, win, ulwin)
    retval = _flimage_to_pixmap(pImage, ulwin)
    return retval


def flimage_dup(pImage):
    """
        flimage_dup(pImage) -> pImage

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_dup = cfuncproto(
            load_so_libflimage(), "flimage_dup",
            cty.POINTER(xfc.FL_IMAGE), [cty.POINTER(xfc.FL_IMAGE)],
            """FL_IMAGE * flimage_dup(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_dup(pImage)
    return retval


# Miscellaneous prototypes

def fl_get_submatrix(inmtrx, rows, cols, r1, c1, rs, cs, esize):
    """
        fl_get_submatrix(inmtrx, rows, cols, r1, c1, rs, cs, esize) -> ?

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_submatrix = cfuncproto(
            load_so_libflimage(), "fl_get_submatrix",
            cty.c_void_p, [cty.c_void_p, cty.c_int, cty.c_int, cty.c_int,
            cty.c_int, cty.c_int, cty.c_int, cty.c_uint],
            """void * fl_get_submatrix(void * p1, int p2, int p3, int p4,
               int p5, int p6, int p7, unsigned int p8)
            """)
    pinmtrx = cty.cast(inmtrx, cty.c_void_p)
    irows = convert_to_int(rows)
    icols = convert_to_int(cols)
    ir1 = convert_to_int(r1)
    ic1 = convert_to_int(c1)
    irs = convert_to_int(rs)
    ics = convert_to_int(cs)
    uiesize = convert_to_uint(esize)
    keep_elem_refs(inmtrx, rows, cols, r1, c1, rs, cs, esize, pinmtrx, \
                   irows, icols, ir1, ic1, irs, ics, uiesize)
    retval = _fl_get_submatrix(pinmtrx, irows, icols, ir1, ic1, irs, ics, \
                               uiesize)
    return retval


def fl_j2pass_quantize_packed(p1, p2, p3, p4, p5, p6, p7, p8, p9, pImage):
    """
        fl_j2pass_quantize_packed(p1, p2, p3, p4, p5, p6, p7, p8, p9, pImage) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_j2pass_quantize_packed = cfuncproto(
            load_so_libflimage(), "fl_j2pass_quantize_packed",
            cty.c_int, [cty.POINTER(cty.POINTER(cty.c_uint)), cty.c_int,
            cty.c_int, cty.c_int, cty.POINTER(cty.POINTER(cty.c_ushort)),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(xfc.FL_IMAGE)],
            """int fl_j2pass_quantize_packed(unsigned int * * p1, int p2,
               int p3, int p4, short unsigned int * * p5, int * p6,
               int * p7, int * p8, int * p9, FL_IMAGE * p10)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    ip4 = convert_to_int(p4)
    keep_elem_refs(p1, p2, p3, p4, p5, p6, p7, p8, p9, pImage, ip2, ip3, ip4)
    retval = _fl_j2pass_quantize_packed(p1, ip2, ip3, ip4, p5, p6, p7, p8, \
                                        p9, pImage)
    return retval


def fl_j2pass_quantize_rgb(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, pImage):
    """
        fl_j2pass_quantize_rgb(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, pImage) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_j2pass_quantize_rgb = cfuncproto(
            load_so_libflimage(), "fl_j2pass_quantize_rgb",
            cty.c_int, [cty.POINTER(cty.POINTER(cty.c_ubyte)),
            cty.POINTER(cty.POINTER(cty.c_ubyte)),
            cty.POINTER(cty.POINTER(cty.c_ubyte)), cty.c_int, cty.c_int,
            cty.c_int, cty.POINTER(cty.POINTER(cty.c_ushort)),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(xfc.FL_IMAGE)],
            """int fl_j2pass_quantize_rgb(unsigned char * * p1,
               unsigned char * * p2, unsigned char * * p3, int p4, int p5,
               int p6, short unsigned int * * p7, int * p8, int * p9,
               int * p10, int * p11, FL_IMAGE * p12)
            """)
    ip4 = convert_to_int(p4)
    ip5 = convert_to_int(p5)
    ip6 = convert_to_int(p6)
    keep_elem_refs(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, pImage,
                   ip4, ip5, ip6)
    retval = _fl_j2pass_quantize_rgb(p1, p2, p3, ip4, ip5, ip6, p7, p8, p9, \
                                     p10, p11, pImage)
    return retval


def fl_make_submatrix(in_, rows, cols, r1, c1, rs, cs, esize):
    """
        fl_make_submatrix(in_, rows, cols, r1, c1, rs, cs, esize) -> ?

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_make_submatrix = cfuncproto(
            load_so_libflimage(), "fl_make_submatrix",
            cty.c_void_p, [cty.c_void_p, cty.c_int, cty.c_int, cty.c_int,
            cty.c_int, cty.c_int, cty.c_int, cty.c_uint],
            """void * fl_make_submatrix(void * p1, int p2, int p3, int p4,
               int p5, int p6, int p7, unsigned int p8)
            """)
    irows = convert_to_int(rows)
    icols = convert_to_int(cols)
    ir1 = convert_to_int(r1)
    ic1 = convert_to_int(c1)
    irs = convert_to_int(rs)
    ics = convert_to_int(cs)
    uiesize = convert_to_uint(esize)
    keep_elem_refs(in_, rows, cols, r1, c1, rs, cs, esize, irows, icols, \
               ir1, ic1, irs, ics, uiesize)
    retval = _fl_make_submatrix(in_, irows, icols, ir1, ic1, irs, ics, \
                                uiesize)
    return retval


def fl_pack_bits(p1, p2, p3):
    """
        fl_pack_bits(p1, p2, p3)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_pack_bits = cfuncproto(
            load_so_libflimage(), "fl_pack_bits",
            None, [cty.POINTER(cty.c_ubyte), cty.POINTER(cty.c_ushort),
            cty.c_int],
            """void fl_pack_bits(unsigned char * p1, short unsigned int * p2,
               int p3)
            """)
    ip3 = convert_to_int(p3)
    keep_elem_refs(p1, p2, p3, ip3)
    _fl_pack_bits(p1, p2, ip3)


def fl_unpack_bits(p1, p2, p3):
    """
        fl_unpack_bits(p1, p2, p3)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_unpack_bits = cfuncproto(
            load_so_libflimage(), "fl_unpack_bits",
            None, [cty.POINTER(cty.c_ushort), cty.POINTER(cty.c_ubyte),
            cty.c_int],
            """void fl_unpack_bits(short unsigned int * p1,
               unsigned char * p2, int p3)
            """)
    ip3 = convert_to_int(p3)
    keep_elem_refs(p1, p2, p3, ip3)
    _fl_unpack_bits(p1, p2, ip3)


def fl_value_to_bits(val):
    """
        fl_value_to_bits(val) -> num.

        @param val: value to convert to bits

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_value_to_bits = cfuncproto(
            load_so_libflimage(), "fl_value_to_bits",
            cty.c_uint, [cty.c_uint],
            """unsigned int fl_value_to_bits(unsigned int p1)
            """)
    uival = convert_to_uint(val)
    keep_elem_refs(val, uival)
    retval = _fl_value_to_bits(uival)
    return retval


def flimage_add_comments(pImage, p2, p3):
    """
        flimage_add_comments(pImage, p2, p3)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_add_comments = cfuncproto(
            load_so_libflimage(), "flimage_add_comments",
            None, [cty.POINTER(xfc.FL_IMAGE), xfc.STRING, cty.c_int],
            """void flimage_add_comments(FL_IMAGE * p1, const char * p2,
               int p3)
            """)
    sp2 = convert_to_string(p2)
    ip3 = convert_to_int(p3)
    keep_elem_refs(pImage, p2, p3, sp2, ip3)
    _flimage_add_comments(pImage, sp2, ip3)


def flimage_color_to_pixel(pImage, p2, p3, p4, p5):
    """
        flimage_color_to_pixel(pImage, p2, p3, p4, p5) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_color_to_pixel = cfuncproto(
            load_so_libflimage(), "flimage_color_to_pixel",
            cty.c_ulong, [cty.POINTER(xfc.FL_IMAGE), cty.c_int, cty.c_int,
            cty.c_int, cty.POINTER(cty.c_int)],
            """)long unsigned int flimage_color_to_pixel(FL_IMAGE * p1,
               int p2, int p3, int p4, int * p5)
            """)
    ip2 = convert_to_int(p2)
    ip3 = convert_to_int(p3)
    ip4 = convert_to_int(p4)
    keep_elem_refs(pImage, p2, p3, p4, p5, ip2, ip3, ip4)
    retval = _flimage_color_to_pixel(pImage, ip2, ip3, ip4, p5)
    return retval


def flimage_combine(pImage1, pImage2, alpha):
    """
        flimage_combine(pImage1, pImage2, alpha) -> pImage

        @param pImage1: pointer to first image to combine
        @param pImage2: pointer to second image to combine
        @param alpha: alpha level?

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_combine = cfuncproto(
            load_so_libflimage(), "flimage_combine",
            cty.POINTER(xfc.FL_IMAGE), [cty.POINTER(xfc.FL_IMAGE),
            cty.POINTER(xfc.FL_IMAGE), cty.c_double],
            """FL_IMAGE * flimage_combine(FL_IMAGE * p1, FL_IMAGE * p2,
               double p3)
            """)
    falpha = convert_to_double(alpha)
    keep_elem_refs(pImage1, pImage2, alpha, falpha)
    retval = _flimage_combine(pImage1, pImage2, falpha)
    return retval


def flimage_display_markers(pImage):
    """
        flimage_display_markers(pImage)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_display_markers = cfuncproto(
            load_so_libflimage(), "flimage_display_markers",
            None, [cty.POINTER(xfc.FL_IMAGE)],
            """void flimage_display_markers(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_display_markers(pImage)


def flimage_dup_(pImage, p2):
    """
        flimage_dup_(pImage, p2) -> pImage

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_dup_ = cfuncproto(
            load_so_libflimage(), "flimage_dup_",
            cty.POINTER(xfc.FL_IMAGE), [cty.POINTER(xfc.FL_IMAGE), cty.c_int],
            """FL_IMAGE * flimage_dup_(FL_IMAGE * p1, int p2)
            """)
    ip2 = convert_to_int(p2)
    keep_elem_refs(pImage, p2, ip2)
    retval = _flimage_dup_(pImage, ip2)
    return retval


def flimage_enable_bmp():
    """
        flimage_enable_bmp()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enable_bmp = cfuncproto(
            load_so_libflimage(), "flimage_enable_bmp",
            None, [],
            """void flimage_enable_bmp()
            """)
    _flimage_enable_bmp()


def flimage_enable_fits():
    """
        flimage_enable_fits()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enable_fits = cfuncproto(
            load_so_libflimage(), "flimage_enable_fits",
            None, [],
            """void flimage_enable_fits()
            """)
    _flimage_enable_fits()


def flimage_enable_genesis():
    """
        flimage_enable_genesis()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enable_genesis = cfuncproto(
            load_so_libflimage(), "flimage_enable_genesis",
            None, [],
            """void flimage_enable_genesis()
            """)
    _flimage_enable_genesis()


def flimage_enable_gif():
    """
        flimage_enable_gif()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enable_gif = cfuncproto(
            load_so_libflimage(), "flimage_enable_gif",
            None, [],
            """void flimage_enable_gif()
            """)
    _flimage_enable_gif()


def flimage_enable_gzip():
    """
        flimage_enable_gzip()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enable_gzip = cfuncproto(
            load_so_libflimage(), "flimage_enable_gzip",
            None, [],
            """void flimage_enable_gzip()
            """)
    _flimage_enable_gzip()


def flimage_enable_jpeg():
    """
        flimage_enable_jpeg()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enable_jpeg = cfuncproto(
            load_so_libflimage(), "flimage_enable_jpeg",
            None, [],
            """void flimage_enable_jpeg()
            """)
    _flimage_enable_jpeg()


def flimage_enable_png():
    """
        flimage_enable_png()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enable_png = cfuncproto(
            load_so_libflimage(), "flimage_enable_png",
            None, [],
            """void flimage_enable_png()
            """)
    _flimage_enable_png()


def flimage_enable_ps():
    """
        flimage_enable_ps()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enable_ps = cfuncproto(
            load_so_libflimage(), "flimage_enable_ps",
            None, [],
            """void flimage_enable_ps()
            """)
    _flimage_enable_ps()


def flimage_enable_sgi():
    """
        flimage_enable_sgi()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enable_sgi = cfuncproto(
            load_so_libflimage(), "flimage_enable_sgi",
            None, [],
            """void flimage_enable_sgi()
            """)
    _flimage_enable_sgi()


def flimage_enable_tiff():
    """
        flimage_enable_tiff()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enable_tiff = cfuncproto(
            load_so_libflimage(), "flimage_enable_tiff",
            None, [],
            """void flimage_enable_tiff()
            """)
    _flimage_enable_tiff()


def flimage_enable_xbm():
    """
        flimage_enable_xbm()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enable_xbm = cfuncproto(
            load_so_libflimage(), "flimage_enable_xbm",
            None, [],
            """void flimage_enable_xbm()
            """)
    _flimage_enable_xbm()


def flimage_enable_xpm():
    """
        flimage_enable_xpm()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enable_xpm = cfuncproto(
            load_so_libflimage(), "flimage_enable_xpm",
            None, [],
            """void flimage_enable_xpm()
            """)
    _flimage_enable_xpm()


def flimage_enable_xwd():
    """
        flimage_enable_xwd()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enable_xwd = cfuncproto(
            load_so_libflimage(), "flimage_enable_xwd",
            None, [],
            """void flimage_enable_xwd()
            """)
    _flimage_enable_xwd()


def flimage_free_ci(pImage):
    """
        flimage_free_ci(pImage)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_free_ci = cfuncproto(
            load_so_libflimage(), "flimage_free_ci",
            None, [cty.POINTER(xfc.FL_IMAGE)],
            """void flimage_free_ci(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_free_ci(pImage)


def flimage_free_gray(pImage):
    """
        flimage_free_gray(pImage)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_free_gray = cfuncproto(
            load_so_libflimage(), "flimage_free_gray",
            None, [cty.POINTER(xfc.FL_IMAGE)],
            """void flimage_free_gray(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_free_gray(pImage)


def flimage_free_linearlut(pImage):
    """
        flimage_free_linearlut(pImage)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_free_linearlut = cfuncproto(
            load_so_libflimage(), "flimage_free_linearlut",
            None, [cty.POINTER(xfc.FL_IMAGE)],
            """void flimage_free_linearlut(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_free_linearlut(pImage)


def flimage_free_rgb(pImage):
    """
        flimage_free_rgb(pImage)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_free_rgb = cfuncproto(
            load_so_libflimage(), "flimage_free_rgb",
            None, [cty.POINTER(xfc.FL_IMAGE)],
            """void flimage_free_rgb(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_free_rgb(pImage)


def flimage_freemem(pImage):
    """
        flimage_freemem(pImage)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_freemem = cfuncproto(
            load_so_libflimage(), "flimage_freemem",
            None, [cty.POINTER(xfc.FL_IMAGE)],
            """void flimage_freemem(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_freemem(pImage)


def flimage_get_closest_color_from_map(pImage, p2):
    """
        flimage_get_closest_color_from_map(pImage, p2) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_get_closest_color_from_map = cfuncproto(
            load_so_libflimage(), "flimage_get_closest_color_from_map",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), cty.c_uint],
            """int flimage_get_closest_color_from_map(FL_IMAGE * p1,
               unsigned int p2)
            """)
    uip2 = convert_to_uint(p2)
    keep_elem_refs(pImage, p2, uip2)
    retval = _flimage_get_closest_color_from_map(pImage, uip2)
    return retval


def flimage_get_linearlut(pImage):
    """
        flimage_get_linearlut(pImage) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_get_linearlut = cfuncproto(
            load_so_libflimage(), "flimage_get_linearlut",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE)],
            """int flimage_get_linearlut(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_get_linearlut(pImage)
    return retval


def flimage_invalidate_pixels(pImage):
    """
        flimage_invalidate_pixels(pImage)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_invalidate_pixels = cfuncproto(
            load_so_libflimage(), "flimage_invalidate_pixels",
            None, [cty.POINTER(xfc.FL_IMAGE)],
            """void flimage_invalidate_pixels(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    _flimage_invalidate_pixels(pImage)


def flimage_open(filename):
    """
        flimage_open(filename) -> pImage

        @param filename: name of file to open

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_open = cfuncproto(
            load_so_libflimage(), "flimage_open",
            cty.POINTER(xfc.FL_IMAGE), [xfc.STRING],
            """FL_IMAGE * flimage_open(const char * p1)
            """)
    sfilename = convert_to_string(filename)
    keep_elem_refs(filename, sfilename)
    retval = _flimage_open(sfilename)
    return retval


def flimage_read_annotation(pImage):
    """
        flimage_read_annotation(pImage) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_read_annotation = cfuncproto(
            load_so_libflimage(), "flimage_read_annotation",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE)],
            """int flimage_read_annotation(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_read_annotation(pImage)
    return retval


def flimage_replace_image(pImage, w, h, r, g, b):
    """
        flimage_replace_image(pImage, w, h, r, g, b)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_replace_image = cfuncproto(
            load_so_libflimage(), "flimage_replace_image",
            None, [cty.POINTER(xfc.FL_IMAGE), cty.c_int, cty.c_int, cty.c_void_p,
            cty.c_void_p, cty.c_void_p],
            """void flimage_replace_image(FL_IMAGE * p1, int p2, int p3,
               void * p4, void * p5, void * p6)
            """)
    iw = convert_to_int(w)
    ih = convert_to_int(h)
    pr = cty.cast(r, cty.c_void_p)
    pg = cty.cast(g, cty.c_void_p)
    pb = cty.cast(b, cty.c_void_p)
    keep_elem_refs(pImage, w, h, r, g, b, iw, ih, pr, pg, pb)
    _flimage_replace_image(pImage, iw, ih, pr, pg, pb)


def flimage_swapbuffer(pImage):
    """
        flimage_swapbuffer(pImage) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_swapbuffer = cfuncproto(
            load_so_libflimage(), "flimage_swapbuffer",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE)],
            """int flimage_swapbuffer(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_swapbuffer(pImage)
    return retval


def flimage_to_ximage(pImage, win, pXWindowAttributes):
    """
        flimage_to_ximage(pImage, win, pXWindowAttributes) -> num.

        @param pImage: pointer to image
        @param win: window id
        @param pXWindowAttributes: pointer to XWindowAttributes
           class instance

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_to_ximage = cfuncproto(
            load_so_libflimage(), "flimage_to_ximage",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE), xfc.FL_WINDOW,
            cty.POINTER(xfc.XWindowAttributes)],
            """int flimage_to_ximage(FL_IMAGE * p1, FL_WINDOW p2,
               XWindowAttributes * p3)
            """)
    ulwin = convert_to_Window(win)
    keep_elem_refs(pImage, win, pXWindowAttributes, ulwin)
    retval = _flimage_to_ximage(pImage, ulwin, pXWindowAttributes)
    return retval


def flimage_write_annotation(pImage):
    """
        flimage_write_annotation(pImage) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_write_annotation = cfuncproto(
            load_so_libflimage(), "flimage_write_annotation",
            cty.c_int, [cty.POINTER(xfc.FL_IMAGE)],
            """int flimage_write_annotation(FL_IMAGE * p1)
            """)
    keep_elem_refs(pImage)
    retval = _flimage_write_annotation(pImage)
    return retval


# flps_apply_gamma(p1) function placeholder (internal)
# flps_arc(fill, x, y, r, t1, t2, colr)function placeholder (internal)
# flps_circ(fill, x, y, r, colr) function placeholder (internal)
# flps_color(colr) function placeholder (internal)
# flps_draw_box(style, x, y, w, h, colr, bwIn) function placeholder (internal)
# flps_draw_checkbox(boxtype, x, y, w, h, colr, bw) function placeholder (internal)
# flps_draw_frame(style, x, y, w, h, colr, bw) function placeholder (internal)
# flps_draw_symbol(label, x, y, w, h, colr) function placeholder (internal)
# flps_draw_tbox(style, x, y, w, h, colr, bw) function placeholder (internal)
# flps_draw_text(align, x, y, w, h, colr, style, size, text) function placeholder (internal)
# flps_draw_text_beside(align, x, y, w, h, colr, style, size, text) function placeholder (internal)
# flps_emit_header(title, npages, xi, yi, xf, yf) function placeholder (internal)
# flps_emit_prolog() function placeholder (internal)
# flps_get_gray255(colr) function placeholder (internal)
# flps_get_linestyle() function placeholder (internal)
# flps_get_linewidth() function placeholder (internal)
# flps_get_namedcolor(colrname) function placeholder (internal)
# flps_invalidate_color_cache() function placeholder (internal)
# flps_invalidate_font_cache() function placeholder (internal)
# flps_invalidate_linewidth_cache() function placeholder (internal)
# flps_invalidate_symbol_cache() function placeholder (internal)
# flps_line(xi, yi, xf, yf, colr) function placeholder (internal)
# flps_lines(Point, numpt, colr) function placeholder (internal)
# flps_linestyle(linestyle) function placeholder (internal)
# flps_linewidth(linewidth) function placeholder (internal)
# flps_log(text) function placeholder (internal)
# flps_output(fmt) function placeholder (internal)
# flps_oval(fill, x, y, w, h, colr) function placeholder (internal)
# flps_pieslice(fill, x, y, w, h, t1, t2, colr) function placeholder (internal)
# flps_poly(fill, Point, numpt, colr) function placeholder (internal)
# flps_rectangle(fill, x, y, w, h, colr) function placeholder (internal)
# flps_reset_cache() function placeholder (internal)
# flps_reset_linewidth() function placeholder (internal)
# flps_restore_flps() function placeholder (internal)
# flps_rgbcolor(r, g, b) function placeholder (internal)
# flps_roundrectangle(fill, x, y, w, h, colr) function placeholder (internal)
# flps_set_clipping(x, y, w, h) function placeholder (internal)
# flps_set_font(style, size) function placeholder (internal)
# flps_unset_clipping() function placeholder (internal)

