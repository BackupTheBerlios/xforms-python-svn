#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python
    Python wrapper for XForms (X11) GUI C toolkit library using ctypes

    Copyright (C) 2009  Luca Lazzaroni "LukenShiro"  <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read XForms, ctypes and other acknowledgements
    and thanks.
"""

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

import ctypes as cty


#**********************************************
#* Data structures and constants              *
#* used by for XForms shared object libraries *
#**********************************************


FL_VERSION = 1
FL_REVISION = 0
FL_FIXLEVEL = "92sp2"
FL_INCLUDE_VERSION = (FL_VERSION * 1000 + FL_REVISION)


########################################
# forms.h (Basic.h)
#  Basic definitions and limits.
#  Window system independent prototypes
#  Modify with care
########################################

# Some general constants
FL_ON = 1
FL_OK = 1
FL_VALID = 1
FL_PREEMPT = 1
FL_AUTO = 2
FL_WHEN_NEEDED = FL_AUTO        #2
FL_OFF = 0
FL_CANCEL = 0
FL_INVALID = 0
FL_NONE = 0     # defined elsewhere
# WM_DELETE_WINDOW callback return
FL_IGNORE = -1
FL_CLOSE = -2
# miscty. return types
FL_ARGUMENT = -3
FL_ALLOC = -4
FL_BAD_OBJECT = -5

# max directory length
# FL_PATH_MAX / PATH_MAX
FL_PATH_MAX = 1024



# The screen coordinate unit, FL_Coord, must be of signed type.
# If FL_Coord is float, FL_CoordIsFloat must be defined to be 1 so that
# round-off error can be checked. **TODO Float not tested
FL_Coord = cty.c_int
Fl_CoordIsFloat = 0     # make it 1 if FL_Coord is of type float of type float

FL_COLOR = cty.c_ulong

# Coordinates can be in pixels, milli-meters or points (1/72inch)
# values for enumeration 'FL_COORD_UNIT'
FL_COORD_UNIT = cty.c_int  # enum
FL_COORD_PIXEL = 0          # default, Pixel
FL_COORD_MM = 1             # milli-meter
FL_COORD_POINT = 2          # point
FL_COORD_centiMM = 3        # one hundredth of a mm
FL_COORD_centiPOINT = 4     # one hundredth of a point


# All object classes.
# values for enumeration 'FL_CLASS'
FL_CLASS = cty.c_int  # enum
FL_INVALID_CLASS = 0
FL_BUTTON = 1
FL_LIGHTBUTTON = 2
FL_ROUNDBUTTON = 3
FL_ROUND3DBUTTON = 4
FL_CHECKBUTTON = 5
FL_BITMAPBUTTON = 6
FL_PIXMAPBUTTON = 7
FL_BITMAP = 8
FL_PIXMAP = 9
FL_BOX = 10
FL_TEXT = 11
FL_MENU = 12
FL_CHART = 13
FL_CHOICE = 14
FL_COUNTER = 15
FL_SLIDER = 16
FL_VALSLIDER = 17
FL_INPUT = 18
FL_BROWSER = 19
FL_DIAL = 20
FL_TIMER = 21
FL_CLOCK = 22
FL_POSITIONER = 23
FL_FREE = 24
FL_XYPLOT = 25
FL_FRAME = 26
FL_LABELFRAME = 27
FL_CANVAS = 28
FL_GLCANVAS = 29
FL_TABFOLDER = 30
FL_SCROLLBAR = 31
FL_SCROLLBUTTON = 32
FL_MENUBAR = 33
FL_TEXTBOX = 34             # internal use
FL_LABELBUTTON = 35
FL_COMBOBOX = 36
FL_IMAGECANVAS = 37
FL_THUMBWHEEL = 38
FL_COLORWHEEL = 39
FL_FORMBROWSER = 40
FL_SELECT = 41
FL_NMENU = 42
FL_SPINNER = 43
FL_TBOX = 44
FL_CLASS_END = 45           # sentinel


FL_BEGIN_GROUP = 10000
FL_END_GROUP = 20000

FL_USER_CLASS_START = 1001      # min. user class value
FL_USER_CLASS_END = 9999        # max. user class value

# maximum border width (in pixel)
FL_MAX_BW = 10

# how to display a form onto screen
# values for enumeration 'FL_PLACE'
FL_PLACE = cty.c_int # enum
FL_PLACE_FREE = 0             # size remain resizable
FL_PLACE_MOUSE = 1            # mouse centered on form
FL_PLACE_CENTER = 2           # center of the screen
FL_PLACE_POSITION = 4         # specific size
FL_PLACE_SIZE = 8             # specific size
FL_PLACE_GEOMETRY = 16        # specific position
FL_PLACE_ASPECT =  32         # keep aspect ratio
FL_PLACE_FULLSCREEN = 64      # scale to fit screen
FL_PLACE_HOTSPOT = 128        # so mouse fall on (x,y)
FL_PLACE_ICONIC = 256
# modifiers
FL_FREE_SIZE = 16384          #(1<<14)
FL_FIX_SIZE = 32768           #(1<<15)

FL_PLACE_FREE_CENTER = (FL_PLACE_CENTER|FL_FREE_SIZE)
FL_PLACE_CENTERFREE = (FL_PLACE_CENTER|FL_FREE_SIZE)

# Window manager decoration request and forms attributes
# values for unnamed enumeration
FL_FULLBORDER = 1       # normal
FL_TRANSIENT = 2        # set TRANSIENT_FOR property
FL_NOBORDER = 3         # use override_redirect to supress decor.
FL_MODAL = 256          #1<<8  not implemented yet


# All box types
# values for enumeration 'FL_BOX_TYPE'
FL_BOX_TYPE = cty.c_int  # enum
FL_NO_BOX = 0
FL_UP_BOX = 1
FL_DOWN_BOX = 2
FL_BORDER_BOX = 3
FL_SHADOW_BOX = 4
FL_FRAME_BOX = 5
FL_ROUNDED_BOX = 6
FL_EMBOSSED_BOX = 7
FL_FLAT_BOX = 8
FL_RFLAT_BOX = 9
FL_RSHADOW_BOX = 10
FL_OVAL_BOX = 11
FL_ROUNDED3D_UPBOX = 12
FL_ROUNDED3D_DOWNBOX = 13
FL_OVAL3D_UPBOX = 14
FL_OVAL3D_DOWNBOX = 15
FL_OVAL3D_FRAMEBOX = 16
FL_OVAL3D_EMBOSSEDBOX = 17
# for internal use only
FL_TOPTAB_UPBOX = 18
FL_SELECTED_TOPTAB_UPBOX = 19
FL_BOTTOMTAB_UPBOX = 20
FL_SELECTED_BOTTOMTAB_UPBOX = 21
FL_OSHADOW_BOX = 22                   # not used
FL_MAX_BOX_STYLES = 23                # sentinel


# How to place text relative to a box
# values for enumeration 'FL_ALIGN'
FL_ALIGN = cty.c_int  # enum
FL_ALIGN_CENTER = 0
FL_ALIGN_TOP = 1
FL_ALIGN_BOTTOM = 2
FL_ALIGN_LEFT = 4
FL_ALIGN_RIGHT = 8
FL_ALIGN_LEFT_TOP = (FL_ALIGN_TOP|FL_ALIGN_LEFT)
FL_ALIGN_RIGHT_TOP = (FL_ALIGN_TOP|FL_ALIGN_RIGHT)
FL_ALIGN_LEFT_BOTTOM = (FL_ALIGN_BOTTOM|FL_ALIGN_LEFT)
FL_ALIGN_RIGHT_BOTTOM = (FL_ALIGN_BOTTOM|FL_ALIGN_RIGHT)
FL_ALIGN_INSIDE = 8192      # (1<<13)
FL_ALIGN_VERT = 16384       # (1<<14)  not functional yet
# the rest is for backward compatibility only, don't use!
FL_ALIGN_TOP_LEFT     = FL_ALIGN_LEFT_TOP
FL_ALIGN_TOP_RIGHT    = FL_ALIGN_RIGHT_TOP
FL_ALIGN_BOTTOM_LEFT  = FL_ALIGN_LEFT_BOTTOM
FL_ALIGN_BOTTOM_RIGHT = FL_ALIGN_RIGHT_BOTTOM

# Mouse buttons. Don't have to be consecutive
# values for unnamed enumeration
FL_MBUTTON1 = 1
FL_MBUTTON2 = 2
FL_MBUTTON3 = 3
FL_MBUTTON4 = 4
FL_MBUTTON5 = 5

FL_LEFT_MOUSE = FL_MBUTTON1
FL_MIDDLE_MOUSE = FL_MBUTTON2
FL_RIGHT_MOUSE = FL_MBUTTON3
FL_SCROLLUP_MOUSE = FL_MBUTTON4
FL_SCROLLDOWN_MOUSE = FL_MBUTTON5

FL_LEFTMOUSE = FL_LEFT_MOUSE
FL_MIDDLEMOUSE = FL_MIDDLE_MOUSE
FL_RIGHTMOUSE = FL_RIGHT_MOUSE
FL_SCROLLUPMOUSE = FL_SCROLLUP_MOUSE
FL_SCROLLDOWNMOUSE = FL_SCROLLDOWN_MOUSE

# control when to return input, slider and dial etc. object.
# values for unnamed enumeration
FL_RETURN_NONE = 0
FL_RETURN_CHANGED = 1
FL_RETURN_END = 2
FL_RETURN_END_CHANGED = 4
FL_RETURN_SELECTION = 8
FL_RETURN_DESELECTION = 16
FL_RETURN_TRIGGERED = 1024
FL_RETURN_ALWAYS = ~ FL_RETURN_END_CHANGED


# Some special color indices for FL private colormap.
# It does not matter  what the value of each enum is,
# but it must start from 0 and be consecutive.
# values for enumeration 'FL_PD_COL'
FL_PD_COL = cty.c_int  # enum
# Some special color indices for FL private colormap.
# It does not matter  what the value of each enum is,
# but it must start from 0 and be consecutive.
# values for enumeration 'FL_PD_COL'
FL_BLACK = 0
FL_RED = 1
FL_GREEN = 2
FL_YELLOW = 3
FL_BLUE = 4
FL_MAGENTA = 5
FL_CYAN = 6
FL_WHITE = 7
FL_TOMATO = 8
FL_INDIANRED = 9
FL_SLATEBLUE = 10
FL_COL1 = 11
FL_RIGHT_BCOL = 12
FL_BOTTOM_BCOL = 13
FL_TOP_BCOL = 14
FL_LEFT_BCOL = 15
FL_MCOL = 16
FL_INACTIVE = 17
FL_PALEGREEN = 18
FL_DARKGOLD = 19
FL_ORCHID = 20
FL_DARKCYAN = 21
FL_DARKTOMATO = 22
FL_WHEAT = 23
FL_DARKORANGE = 24
FL_DEEPPINK = 25
FL_CHARTREUSE = 26
FL_DARKVIOLET = 27
FL_SPRINGGREEN = 28
FL_DODGERBLUE = 29
FL_LIGHTER_COL1 = 30
FL_DARKER_COL1 = 31
FL_ALICEBLUE = 32
FL_ANTIQUEWHITE = 33
FL_AQUA = 34
FL_AQUAMARINE = 35
FL_AZURE = 36
FL_BEIGE = 37
FL_BISQUE = 38
FL_BLANCHEDALMOND = 39
FL_BLUEVIOLET = 40
FL_BROWN = 41
FL_BURLYWOOD = 42
FL_CADETBLUE = 43
FL_CHOCOLATE = 44
FL_CORAL = 45
FL_CORNFLOWERBLUE = 46
FL_CORNSILK = 47
FL_CRIMSON = 48
FL_DARKBLUE = 49
FL_DARKGOLDENROD = 50
FL_DARKGRAY = 51
FL_DARKGREEN = 52
FL_DARKGREY = 53
FL_DARKKHAKI = 54
FL_DARKMAGENTA = 55
FL_DARKOLIVEGREEN = 56
FL_DARKORCHID = 57
FL_DARKRED = 58
FL_DARKSALMON = 59
FL_DARKSEAGREEN = 60
FL_DARKSLATEBLUE = 61
FL_DARKSLATEGRAY = 62
FL_DARKSLATEGREY = 63
FL_DARKTURQUOISE = 64
FL_DEEPSKYBLUE = 65
FL_DIMGRAY = 66
FL_DIMGREY = 67
FL_FIREBRICK = 68
FL_FLORALWHITE = 69
FL_FORESTGREEN = 70
FL_FUCHSIA = 71
FL_GAINSBORO = 72
FL_GHOSTWHITE = 73
FL_GOLD = 74
FL_GOLDENROD = 75
FL_GRAY = 76
FL_GREENYELLOW = 77
FL_GREY = 78
FL_HONEYDEW = 79
FL_HOTPINK = 80
FL_INDIGO = 81
FL_IVORY = 82
FL_KHAKI = 83
FL_LAVENDER = 84
FL_LAVENDERBLUSH = 85
FL_LAWNGREEN = 86
FL_LEMONCHIFFON = 87
FL_LIGHTBLUE = 88
FL_LIGHTCORAL = 89
FL_LIGHTCYAN = 90
FL_LIGHTGOLDENRODYELLOW = 91
FL_LIGHTGRAY = 92
FL_LIGHTGREEN = 93
FL_LIGHTGREY = 94
FL_LIGHTPINK = 95
FL_LIGHTSALMON = 96
FL_LIGHTSEAGREEN = 97
FL_LIGHTSKYBLUE = 98
FL_LIGHTSLATEGRAY = 99
FL_LIGHTSLATEGREY = 100
FL_LIGHTSTEELBLUE = 101
FL_LIGHTYELLOW = 102
FL_LIME = 103
FL_LIMEGREEN = 104
FL_LINEN = 105
FL_MAROON = 106
FL_MEDIUMAQUAMARINE = 107
FL_MEDIUMBLUE = 108
FL_MEDIUMORCHID = 109
FL_MEDIUMPURPLE = 110
FL_MEDIUMSEAGREEN = 111
FL_MEDIUMSLATEBLUE = 112
FL_MEDIUMSPRINGGREEN = 113
FL_MEDIUMTURQUOISE = 114
FL_MEDIUMVIOLETRED = 115
FL_MIDNIGHTBLUE = 116
FL_MINTCREAM = 117
FL_MISTYROSE = 118
FL_MOCCASIN = 119
FL_NAVAJOWHITE = 120
FL_NAVY = 121
FL_OLDLACE = 122
FL_OLIVE = 123
FL_OLIVEDRAB = 124
FL_ORANGE = 125
FL_ORANGERED = 126
FL_PALEGOLDENROD = 127
FL_PALETURQUOISE = 128
FL_PALEVIOLETRED = 129
FL_PAPAYAWHIP = 130
FL_PEACHPUFF = 131
FL_PERU = 132
FL_PINK = 133
FL_PLUM = 134
FL_POWDERBLUE = 135
FL_PURPLE = 136
FL_ROSYBROWN = 137
FL_ROYALBLUE = 138
FL_SADDLEBROWN = 139
FL_SALMON = 140
FL_SANDYBROWN = 141
FL_SEAGREEN = 142
FL_SEASHELL = 143
FL_SIENNA = 144
FL_SILVER = 145
FL_SKYBLUE = 146
FL_SLATEGRAY = 147
FL_SLATEGREY = 148
FL_SNOW = 149
FL_STEELBLUE = 150
FL_TAN = 151
FL_TEAL = 152
FL_THISTLE = 153
FL_TURQUOISE = 154
FL_VIOLET = 155
FL_WHITESMOKE = 156
FL_YELLOWGREEN = 157
FL_FREE_COL1 = 256
FL_FREE_COL2 = 257
FL_FREE_COL3 = 258
FL_FREE_COL4 = 259
FL_FREE_COL5 = 260
FL_FREE_COL6 = 261
FL_FREE_COL7 = 262
FL_FREE_COL8 = 263
FL_FREE_COL9 = 264
FL_FREE_COL10 = 265
FL_FREE_COL11 = 266
FL_FREE_COL12 = 267
FL_FREE_COL13 = 268
FL_FREE_COL14 = 269
FL_FREE_COL15 = 270
FL_FREE_COL16 = 271
FL_NOCOLOR = 2147483647           #INT_MAX

FL_BUILT_IN_COLS = FL_YELLOWGREEN + 1
FL_INACTIVE_COL = FL_INACTIVE

# Some aliases for the color. This is actually backwards ...
FL_GRAY16 = FL_RIGHT_BCOL
FL_GRAY35 = FL_BOTTOM_BCOL
FL_GRAY80 = FL_TOP_BCOL
FL_GRAY90 = FL_LEFT_BCOL
FL_GRAY63 = FL_COL1
FL_GRAY75 = FL_MCOL
FL_LCOL = FL_BLACK
FL_NoColor = FL_NOCOLOR

# An alias probably for an earlier typo
FL_DOGERBLUE = FL_DODGERBLUE

# Events that a form reacts to.
# values for enumeration 'FL_EVENTS'
FL_EVENTS = cty.c_int # enum
FL_NOEVENT = 0
FL_DRAW = 1
FL_PUSH = 2
FL_RELEASE = 3
FL_ENTER = 4
FL_LEAVE = 5
FL_MOTION = 6
FL_FOCUS = 7
FL_UNFOCUS = 8
FL_KEYBOARD = 9
FL_KEYPRESS = FL_KEYBOARD
FL_UPDATE = 10      # for objects that need to update something from time to
                    # time
FL_MOUSE = FL_UPDATE
FL_STEP = 11
FL_SHORTCUT = 12
FL_FREEMEM = 13
FL_OTHER = 14       # property, selection etc
FL_DRAWLABEL = 15
FL_DBLCLICK = 16    # double click
FL_TRPLCLICK = 17   # triple click
FL_ATTRIB = 18      # attribute change
FL_KEYRELEASE = 19
FL_PS = 20          # dump a form into EPS
FL_MOVEORIGIN = 21  # dragging the form across the screen changes its
                    # absolute x,y coords. Objects that themselves
                    # contain forms should ensure that they are up to
                    # date.
FL_RESIZED = 22     # the object has been resized by scale_form
                    # Tell it that this has happened so that
                    # it can resize any FL_FORMs that it contains.

FL_MOVE = FL_MOTION    # for compatibility


# Resize policies
# values for enumeration 'FL_RESIZE_T'
FL_RESIZE_T = cty.c_int  # enum
FL_RESIZE_NONE = 0
FL_RESIZE_X = 1
FL_RESIZE_Y = 2
FL_RESIZE_ALL = (FL_RESIZE_X|FL_RESIZE_Y)

# Keyboard focus control
# values for enumeration 'FL_KEY'
FL_KEY = cty.c_int  # enum
# Keyboard focus control
# values for enumeration 'FL_KEY'
FL_KEY_NORMAL  = 1     # normal keys(0-255) - tab +left/right
FL_KEY_TAB     = 2     # normal keys + 4 direction cursor
FL_KEY_SPECIAL = 4     # only needs special keys(>255)
FL_KEY_ALL     = 7     # all keys

FL_ALT_MASK = (1L<<25)      # alt + Key --> FL_ALT_MASK + key
FL_CONTROL_MASK = (1L<<26)
FL_SHIFT_MASK = (1L<<27)
FL_ALT_VAL = FL_ALT_MASK    # Don't use!

MAX_SHORTCUTS = 8

# Pop-up menu item attributes. NOTE if more than 8, need to change
# choice and menu class where mode is kept by a single byte
# values for unnamed enumeration
FL_PUP_NONE = 0
FL_PUP_GREY = 1
FL_PUP_BOX = 2
FL_PUP_CHECK = 4
FL_PUP_RADIO = 8

FL_PUP_GRAY = FL_PUP_GREY
FL_PUP_TOGGLE = FL_PUP_BOX          # not used anymore
FL_PUP_INACTIVE = FL_PUP_GREY


# Popup and menu entries

FL_PUP_CB = cty.CFUNCTYPE(cty.c_int, cty.c_int)   # callback prototype

STRING = cty.c_char_p
WSTRING = cty.c_wchar_p

class FL_PUP_ENTRY(cty.Structure):
    pass
FL_PUP_ENTRY._fields_ = [
    ('text', STRING),               # label of a popup/menu item
    ('callback', FL_PUP_CB),        # the callback function
    ('shortcut', STRING),           # hotkeys
    ('mode', cty.c_int),            # FL_PUP_GRAY, FL_PUP_CHECK, etcty.
    ('reserved', cty.c_long * 2),   # left in for backward compatibility
]

FL_MENU_ENTRY = FL_PUP_ENTRY

# ***** FONTS *****

FL_MAXFONTS = 48        # max number of fonts

# values for enumeration 'FL_TEXT_STYLE'
FL_TEXT_STYLE = cty.c_int # enum
FL_INVALID_STYLE = -1
FL_NORMAL_STYLE = 0
FL_BOLD_STYLE = 1
FL_ITALIC_STYLE = 2
FL_BOLDITALIC_STYLE = 3
FL_FIXED_STYLE = 4
FL_FIXEDBOLD_STYLE = 5
FL_FIXEDITALIC_STYLE = 6
FL_FIXEDBOLDITALIC_STYLE = 7
FL_TIMES_STYLE = 8
FL_TIMESBOLD_STYLE = 9
FL_TIMESITALIC_STYLE = 10
FL_TIMESBOLDITALIC_STYLE = 11
FL_MISC_STYLE = 12
FL_MISCBOLD_STYLE = 13
FL_MISCITALIC_STYLE = 14
FL_SYMBOL_STYLE = 15
# modifier masks. Need to fit a short
FL_SHADOW_STYLE = 512           #(1<<9)
FL_ENGRAVED_STYLE = 1024        #(1<<10)
FL_EMBOSSED_STYLE = 2048        #(1<<11)

FL_FONT_STYLE = FL_TEXT_STYLE


# Standard sizes in XForms
FL_TINY_SIZE = 8
FL_SMALL_SIZE = 10
FL_NORMAL_SIZE = 12
FL_MEDIUM_SIZE = 14
FL_LARGE_SIZE = 18
FL_HUGE_SIZE = 24
FL_DEFAULT_SIZE = FL_SMALL_SIZE

# Defines for compatibility
FL_TINY_FONT = FL_TINY_SIZE
FL_SMALL_FONT = FL_SMALL_SIZE
FL_NORMAL_FONT = FL_NORMAL_SIZE
FL_MEDIUM_FONT = FL_MEDIUM_SIZE
FL_LARGE_FONT = FL_LARGE_SIZE
FL_HUGE_FONT = FL_HUGE_SIZE
FL_NORMAL_FONT1 = FL_SMALL_FONT
FL_NORMAL_FONT2 = FL_NORMAL_FONT
FL_DEFAULT_FONT = FL_SMALL_FONT

FL_BOUND_WIDTH = FL_Coord(1)     # Border width of boxes
#FL_BOUND_WIDTH = 1     # Border width of boxes


# Definition of basic struct that holds an object

FL_CLICK_TIMEOUT = 400      # double click interval

XPointer = STRING    # cty.c_char_p

# /usr/include/X11/Xlib.h 159
class _XExtData(cty.Structure):
    pass
_XExtData._fields_ = [
    ('number', cty.c_int),
    ('next', cty.POINTER(_XExtData)),
    ('free_private', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XExtData))),
    ('private_data', XPointer),
]
XExtData = _XExtData

VisualID = cty.c_ulong


# /usr/include/X11/Xlib.h 249
class Visual(cty.Structure):
    pass
Visual._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('visualid', VisualID),
    ('c_class', cty.c_int),
    ('red_mask', cty.c_ulong),
    ('green_mask', cty.c_ulong),
    ('blue_mask', cty.c_ulong),
    ('bits_per_rgb', cty.c_int),
    ('map_entries', cty.c_int),
]

# /usr/include/X11/Xutil.h 296
class XVisualInfo(cty.Structure):
    pass
XVisualInfo._fields_ = [
    ('visual', cty.POINTER(Visual)),
    ('visualid', VisualID),
    ('screen', cty.c_int),
    ('depth', cty.c_int),
    ('c_class', cty.c_int),
    ('red_mask', cty.c_ulong),
    ('green_mask', cty.c_ulong),
    ('blue_mask', cty.c_ulong),
    ('colormap_size', cty.c_int),
    ('bits_per_rgb', cty.c_int),
]

XID = cty.c_ulong
Window = XID    # cty.c_ulong
Pixmap = XID    # cty.c_ulong

class FL_FORM_(cty.Structure):
    pass
FL_FORM = FL_FORM_

class FL_OBJECT_(cty.Structure):
    pass
FL_OBJECT = FL_OBJECT_

# my add --LK
FL_OBJECT_ptr = cty.POINTER(FL_OBJECT)
FL_FORM_ptr = cty.POINTER(FL_FORM)
LONG = cty.c_long

class FL_pixmap_(cty.Structure):
    pass
FL_pixmap = FL_pixmap_

# All pixmaps used by FL_OBJECT to simulate double buffering have the
# following entries in the structure. FL_Coord x,y are used to shift
# the origin of the drawing routines
FL_pixmap_._fields_ = [
    ('pixmap', Pixmap),
    ('win', Window),
    ('visual', cty.POINTER(Visual)),
    ('x', FL_Coord),
    ('y', FL_Coord),
    ('w', FL_Coord),
    ('h', FL_Coord),
    ('depth', cty.c_int),
    ('dbl_background', FL_COLOR),
    ('pixel', FL_COLOR),
]

# callback function for an entire form
FL_FORMCALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_void_p)

# object callback function
FL_CALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_long)

# preemptive callback function
FL_RAW_CALLBACK = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_FORM), cty.c_void_p)

# at close (WM menu delete/close etcty.)
FL_FORM_ATCLOSE = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_FORM), cty.c_void_p)

# deactivate/activate callback
FL_FORM_ATDEACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(FL_FORM), cty.c_void_p)
FL_FORM_ATACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(FL_FORM), cty.c_void_p)
FL_HANDLEPTR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), cty.c_int, \
                FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)

FL_FORM_._pack_ = 4
FL_FORM_._fields_ = [
    ('fdui', cty.c_void_p),               # for fdesign
    ('u_vdata', cty.c_void_p),            # for application
    ('u_cdata', STRING),                # for application
    ('u_ldata', cty.c_long),              # for application
    ('label', STRING),                  # window title
    ('window', Window),                 # X resource ID for window
    ('x', FL_Coord),                    # current geometry info
    ('y', FL_Coord),
    ('w', FL_Coord),
    ('h', FL_Coord),
    ('in_redraw', cty.c_int),             # set while form is drawn
    ('handle_dec_x', cty.c_int),
    ('handle_dec_y', cty.c_int),
    ('hotx', FL_Coord),                 # hot-spot of the form
    ('hoty', FL_Coord),
    ('w_hr', cty.c_double),               # high resolution width and height
    ('h_hr', cty.c_double),               # (needed for precise scaling)
    ('first', cty.POINTER(FL_OBJECT)),
    ('last', cty.POINTER(FL_OBJECT)),
    ('focusobj', cty.POINTER(FL_OBJECT)),
    ('form_callback', FL_FORMCALLBACKPTR),
    ('activate_callback', FL_FORM_ATACTIVATE),
    ('deactivate_callback', FL_FORM_ATDEACTIVATE),
    ('form_cb_data', cty.c_void_p),
    ('activate_data', cty.c_void_p),
    ('deactivate_data', cty.c_void_p),
    ('key_callback', FL_RAW_CALLBACK),
    ('push_callback', FL_RAW_CALLBACK),
    ('crossing_callback', FL_RAW_CALLBACK),
    ('motion_callback', FL_RAW_CALLBACK),
    ('all_callback', FL_RAW_CALLBACK),
    ('compress_mask', cty.c_ulong),
    ('evmask', cty.c_ulong),
    # WM_DELETE_WINDOW message handler
    ('close_callback', FL_FORM_ATCLOSE),
    ('close_data', cty.c_void_p),
    ('flpixmap', cty.POINTER(FL_pixmap)),     # back buffer
    ('icon_pixmap', Pixmap),
    ('icon_mask', Pixmap),
    # interaction and other flags
    ('vmode', cty.c_int),                     # current X visual class
    ('deactivated', cty.c_int),               # true if sensitive
    ('use_pixmap', cty.c_int),                # true if dbl buffering
    ('frozen', cty.c_int),                    # true if sync change
    ('visible', cty.c_int),                   # true if mapped
    ('wm_border', cty.c_int),                 # window manager info
    ('prop', cty.c_uint),                     # other attributes
    ('has_auto_objects', cty.c_int),
    ('top', cty.c_int),
    ('sort_of_modal', cty.c_int),             # internal use
    ('parent', cty.POINTER(FL_FORM)),
    ('child', cty.POINTER(FL_FORM)),
    ('parent_obj', cty.POINTER(FL_OBJECT)),
    ('attached', cty.c_int),                  # not independent anymore
    ('pre_attach', cty.CFUNCTYPE(None, cty.POINTER(FL_FORM))),
    ('attach_data', cty.c_void_p),
    ('no_tooltip', cty.c_int),
]

FL_OBJECT_._pack_ = 4
FL_OBJECT_._fields_ = [
    ('form', cty.POINTER(FL_FORM)),       # the form this object belongs to
    ('u_vdata', cty.c_void_p),            # anything the user likes
    ('u_cdata', STRING),                # anything the user likes
    ('u_ldata', cty.c_long),              # anything the user likes
    ('objclass', cty.c_int),              # class of object, button, slider etc
    ('type', cty.c_int),                  # type within the class
    ('boxtype', cty.c_int),               # what kind of box type
    ('x', FL_Coord),                    # current obj. location and size
    ('y', FL_Coord),
    ('w', FL_Coord),
    ('h', FL_Coord),
    ('fl1', cty.c_double),                # distances of upper left hand (1) and
    ('fr1', cty.c_double),                # lower right hand corner (2) to left,
    ('ft1', cty.c_double),                # right, top and bottom of enclosing
    ('fb1', cty.c_double),                # form
    ('fl2', cty.c_double),
    ('fr2', cty.c_double),
    ('ft2', cty.c_double),
    ('fb2', cty.c_double),
    ('bw', FL_Coord),
    ('col1', FL_COLOR),                 # colors of obj
    ('col2', FL_COLOR),
    ('label', STRING),                  # object label
    ('lcol', FL_COLOR),                 # label color
    ('align', cty.c_int),
    ('lsize', cty.c_int),                 # label size and style
    ('lstyle', cty.c_int),
    ('shortcut', cty.POINTER(cty.c_long)),
    ('handle', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), cty.c_int, \
    FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)),
    ('object_callback', cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), \
    cty.c_long)),
    ('argument', cty.c_long),
    ('spec', cty.c_void_p),               # instantiation
    ('prehandle', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
    cty.c_int, FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)),
    ('posthandle', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
    cty.c_int, FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)),
    ('set_return', cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_int)),
    # re-configure preference
    ('resize', cty.c_uint),               # what to do if WM resizes the FORM
    ('nwgravity', cty.c_uint),            # how to re-position top-left corner
    ('segravity', cty.c_uint),         # how to re-position lower-right corner
    ('prev', cty.POINTER(FL_OBJECT)),     # prev. obj in form
    ('next', cty.POINTER(FL_OBJECT)),     # next obj in form
    ('parent', cty.POINTER(FL_OBJECT)),
    ('child', cty.POINTER(FL_OBJECT)),
    ('nc', cty.POINTER(FL_OBJECT)),
    ('returned', cty.c_int),
    ('flpixmap', cty.POINTER(FL_pixmap)), # pixmap double buffering stateinfo
    ('use_pixmap', cty.c_int),          # true to use pixmap double buffering
    # some interaction flags
    ('double_buffer', cty.c_int),         # only used by mesa/gl canvas
    ('pushed', cty.c_int),
    ('focus', cty.c_int),
    ('belowmouse', cty.c_int),
    ('active', cty.c_int),                # if accept event
    ('input', cty.c_int),
    ('wantkey', cty.c_int),
    ('radio', cty.c_int),
    ('automatic', cty.c_int),
    ('redraw', cty.c_int),
    ('visible', cty.c_int),
    ('is_under', cty.c_int),          # if (partially) hidden by other object
    ('clip', cty.c_int),
    ('click_timeout', cty.c_ulong),
    ('c_vdata', cty.c_void_p),            # for class use
    ('c_cdata', STRING),                # for class use
    ('c_ldata', cty.c_long),              # for class use
    ('aux_col1', FL_COLOR),             # aux colors
    ('aux_col2', FL_COLOR),
    ('dbl_background', FL_COLOR),       # double buffer background
    ('how_return', cty.c_int),
    ('tooltip', STRING),
    ('tipID', cty.c_int),
    ('group_id', cty.c_int),
    ('want_motion', cty.c_int),
    ('want_update', cty.c_int),
]

# error callback
FL_ERROR_FUNC = cty.CFUNCTYPE(None, STRING, STRING)

# FL_EVENT already defined in main library

# form visibility state: form->visible
# values for unnamed enumeration
FL_BEING_HIDDEN = -1
FL_HIDDEN = 0
FL_INVISIBLE = FL_HIDDEN
FL_VISIBLE = 1


# All FD_xxx structure emitted by fdesign contains at least the
# following
class FD_Any(cty.Structure):
    pass
FD_Any._fields_ = [
    ('form', cty.POINTER(FL_FORM)),
    ('vdata', cty.c_void_p),
    ('cdata', STRING),
    ('ldata', cty.c_long),
]

# Async IO stuff
FL_READ   = 1
FL_WRITE  = 2
FL_EXCEPT = 4


# IO other than XEvent Q

FL_IO_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)

# signals

FL_SIGNAL_HANDLER = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)

#timeouts

FL_TIMEOUT_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)

# cfunction for _fl_for_all_objects
cfunc_int_pobject_pvoid = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
                                        cty.c_void_p)

# cfunction for _fl_enumerate_fonts
cfunc_none_string = cty.CFUNCTYPE(None, STRING)

FL_DRAWPTR = cty.CFUNCTYPE(None, FL_Coord, FL_Coord, FL_Coord, FL_Coord,
                           cty.c_int, FL_COLOR)

FL_FSCB = cty.CFUNCTYPE(cty.c_int, STRING, cty.c_void_p)

size_t = cty.c_uint

# cfunction for _fl_malloc
cfunc_none_sizet = cty.CFUNCTYPE(cty.c_void_p, size_t)

# cfunction for _fl_calloc
cfunc_none_sizet_sizet = cty.CFUNCTYPE(cty.c_void_p, size_t, size_t)

# cfunction for _fl_realloc
cfunc_voidp_voidp_sizet = cty.CFUNCTYPE(cty.c_void_p, cty.c_void_p, size_t)


FL_MAX_MENU_CHOICE_ITEMS = 128

FL_VAL_FILTER = cty.CFUNCTYPE(STRING, cty.POINTER(FL_OBJECT), cty.c_double, \
                              cty.c_int)

# Draw mode
# values for unnamed enumeration
FL_XOR = 6              # GXxor
FL_COPY = 3             # GXcopy
FL_AND = 1              # GXand

FL_MINDEPTH = 1

# FL_xxx does not do anything anymore, but kept for compatibility
# values for unnamed enumeration
FL_IllegalVisual = -1
FL_StaticGray = 0           # StaticGray
FL_GrayScale = 1            # GrayScale
FL_StaticColor = 2          # StaticColor
FL_PseudoColor = 3          # PseudoColor
FL_TrueColor = 4            # TrueColor
FL_DirectColor = 5          # DirectColor
FL_DefaultVisual = 10       # special request

# my add --LK
TrueColor = FL_TrueColor
DirectColor = FL_DirectColor

# values for unnamed enumeration
FL_North = 2                            #NorthGravity
FL_NorthEast = 3                        #NorthEastGravity
FL_NorthWest = 1                        #NorthWestGravity
FL_South = 8                            #SouthGravity
FL_SouthEast = 9                        #SouthEastGravity
FL_SouthWest = 7                        #SouthWestGravity
FL_East = 6                             #EastGravity
FL_West = 4                             #WestGravity
FL_NoGravity = 0                        #ForgetGravity
FL_ForgetGravity = FL_NoGravity         #ForgetGravity

GreyScale = GrayScale = 1           #GrayScale
StaticGrey = StaticGray = 0         #StaticGray


# Internal colormap size. Not really very meaningful as fl_mapcolor
# and company allow color "leakage", that is, although only FL_MAX_COLS
# are kept in the internal colormap, the server might have substantially
# more colors allocated
FL_MAX_COLORS = 1024
FL_MAX_COLS = FL_MAX_COLORS

# FL graphics state information. Some are redundant.

Font = XID    # cty.c_ulong
Atom = cty.c_ulong

# /usr/include/X11/Xlib.h 1044
class XFontProp(cty.Structure):
    pass
XFontProp._fields_ = [
    ('name', Atom),
    ('card32', cty.c_ulong),
]

# /usr/include/X11/Xlib.h 1035
class XCharStruct(cty.Structure):
    pass
XCharStruct._fields_ = [
    ('lbearing', cty.c_short),
    ('rbearing', cty.c_short),
    ('width', cty.c_short),
    ('ascent', cty.c_short),
    ('descent', cty.c_short),
    ('attributes',  cty.c_ushort),
]

# /usr/include/X11/Xlib.h 1050
class XFontStruct(cty.Structure):
    pass
XFontStruct._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('fid', Font),
    ('direction', cty.c_uint),
    ('min_char_or_byte2', cty.c_uint),
    ('max_char_or_byte2', cty.c_uint),
    ('min_byte1', cty.c_uint),
    ('max_byte1', cty.c_uint),
    ('all_chars_exist', cty.c_int),
    ('default_char', cty.c_uint),
    ('n_properties', cty.c_int),
    ('properties', cty.POINTER(XFontProp)),
    ('min_bounds', XCharStruct),
    ('max_bounds', XCharStruct),
    ('per_char', cty.POINTER(XCharStruct)),
    ('ascent', cty.c_int),
    ('descent', cty.c_int),
]

Colormap = XID    # cty.c_ulong

# /usr/include/X11/Xlib.h 225
class _XGC(cty.Structure):
    pass
GC = cty.POINTER(_XGC)

class FL_State(cty.Structure):
    pass
FL_State._fields_ = [
    ('xvinfo', cty.POINTER(XVisualInfo)),
    ('cur_fnt', cty.POINTER(XFontStruct)),
    ('colormap', Colormap),
    ('trailblazer', Window),
    ('vclass', cty.c_int),
    ('depth', cty.c_int),
    ('rgb_bits', cty.c_int),
    ('dithered', cty.c_int),
    ('pcm', cty.c_int),
    ('gc', GC * 16),
    ('textgc', GC * 16),
    ('dimmedGC', GC),
    ('lut', cty.c_ulong * 1024),
    ('rshift', cty.c_uint),
    ('rmask', cty.c_uint),
    ('rbits', cty.c_uint),
    ('gshift', cty.c_uint),
    ('gmask', cty.c_uint),
    ('gbits', cty.c_uint),
    ('bshift', cty.c_uint),
    ('bmask', cty.c_uint),
    ('bbits', cty.c_uint),
]

FL_STATE = FL_State     # for compatibility


# Global variables
# /usr/include/X11/Xlib.h 266
class _XDisplay(cty.Structure):
    pass
_XDisplay._fields_ = []

Display = _XDisplay
#Display = _XDisplay.in_dll(so_libforms, "_XDisplay") # NOTWORKING


# fl_state and fl_display already defined in main library
#fl_screen = (cty.c_int).in_dll(so_libforms, 'fl_screen')
fl_screen = cty.c_int
#fl_root = (Window).in_dll(so_libforms, 'fl_root')       # root window
fl_root = Window    # cty.c_ulong
#fl_vroot = (Window).in_dll(so_libforms, 'fl_vroot')     # virtual root window
fl_vroot = Window    # cty.c_ulong
#fl_scrh = (cty.c_int).in_dll(so_libforms, 'fl_scrh')      # screen dimension in pixels
fl_scrh = cty.c_int
#fl_scrw = (cty.c_int).in_dll(so_libforms, 'fl_scrw')
fl_scrw = cty.c_int
#fl_vmode = (cty.c_int).in_dll(so_libforms, 'fl_vmode')
fl_vmode = cty.c_int


# Fonts related

FL_MAX_FONTSIZES = 10

class FL_FONT(cty.Structure):
    pass
FL_FONT._fields_ = [
    ('fs', cty.POINTER(XFontStruct) * FL_MAX_FONTSIZES),
    ('size', cty.c_short * FL_MAX_FONTSIZES),
    ('nsize', cty.c_short),
    ('fname', cty.c_char * 80),
]

# /usr/include/X11/Xlib.h 439
class XPoint(cty.Structure):
    pass
FL_POINT = XPoint

# /usr/include/X11/Xlib.h 444
class XRectangle(cty.Structure):
    pass
FL_RECT = XRectangle


# Line attributes

# values for unnamed enumeration
FL_SOLID = 0                 #LineSolid
FL_USERDASH = 1               #LineOnOffDash
FL_USERDOUBLEDASH = 2        #LineDoubleDash
FL_DOT = 3
FL_DOTDASH = 4
FL_DASH = 5
FL_LONGDASH = 6

# *** start - from /usr/include/X11/X.h ***
# Input Event Masks. Used as event-mask window attribute and as arguments
# to Grab requests.  Not to be confused with event names.
NoEventMask = 0L
KeyPressMask = (1L<<0)
KeyReleaseMask = (1L<<1)
ButtonPressMask = (1L<<2)
ButtonReleaseMask = (1L<<3)
EnterWindowMask = (1L<<4)
LeaveWindowMask = (1L<<5)
PointerMotionMask = (1L<<6)
PointerMotionHintMask = (1L<<7)
Button1MotionMask = (1L<<8)
Button2MotionMask = (1L<<9)
Button3MotionMask = (1L<<10)
Button4MotionMask = (1L<<11)
Button5MotionMask = (1L<<12)
ButtonMotionMask = (1L<<13)
KeymapStateMask = (1L<<14)
ExposureMask = (1L<<15)
VisibilityChangeMask = (1L<<16)
StructureNotifyMask = (1L<<17)
ResizeRedirectMask = (1L<<18)
SubstructureNotifyMask = (1L<<19)
SubstructureRedirectMask = (1L<<20)
FocusChangeMask = (1L<<21)
ColormapChangeMask = (1L<<23)
OwnerGrabButtonMask = (1L<<24)
# Key masks. Used as modifiers to GrabButton and GrabKey, results of QueryPointer,
# state in various key-, mouse-, and button-related events.
ShiftMask = (1<<0)
LockMask = (1<<1)
ControlMask = (1<<2)
Mod1Mask = (1<<3)
Mod2Mask = (1<<4)
Mod3Mask = (1<<5)
Mod4Mask = (1<<6)
Mod5Mask = (1<<7)
# button masks.  Used in same manner as Key masks above. Not to be confused
# with button names below.
Button1Mask = (1<<8)
Button2Mask = (1<<9)
Button3Mask = (1<<10)
Button4Mask = (1<<11)
Button5Mask = (1<<12)
AnyModifier = (1<<15)       # used in GrabButton, GrabKey
# *** end - from /usr/include/X11/X.h ***


# All registerable events, including Client Message
FL_ALL_EVENT = (KeyPressMask | KeyReleaseMask \
                    | ButtonPressMask | ButtonReleaseMask \
                    | EnterWindowMask | LeaveWindowMask \
                    | ButtonMotionMask | PointerMotionMask )


# my add --LK
class XEvent(cty.Union):
    pass
XEvent._fields_ = []

FL_APPEVENT_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(XEvent), cty.c_void_p)

# Resources

# values for enumeration 'FL_RTYPE'
FL_RTYPE = cty.c_int  # enum
FL_NONE = 0
FL_SHORT = 10
FL_BOOL = 11
FL_INT = 12
FL_LONG = 13
FL_FLOAT = 14
FL_STRING = 15


class FL_RESOURCE(cty.Structure):
    pass
FL_RESOURCE._fields_ = [
    ('res_name', STRING),           # resource name
    ('res_class', STRING),          # resource class
    ('type', FL_RTYPE),             # FL_INT, FL_FLOAT, FL_BOOL, FL_STRING
    ('var', cty.c_void_p),            # address for the variable
    ('defval', STRING),             # default setting in string form
    ('nbytes', cty.c_int),            # used only for strings
]

# values for enumeration 'XrmOptionKind'
XrmOptionKind = cty.c_int # enum
XrmoptionNoArg = 0      # Value is specified in OptionDescRec.value
XrmoptionIsArg = 1      # Value is the option string itself
XrmoptionStickyArg = 2  # Value is characters immediately following option
XrmoptionSepArg = 3     # Value is next argument in argv
XrmoptionResArg = 4     # Resource and value in next argument in argv
XrmoptionSkipArg = 5    # Ignore this option and the next argument in argv
XrmoptionSkipLine = 6   # Ignore this option and the rest of argv
XrmoptionSkipNArgs = 7  # Ignore this option and the next
                        # OptionDescRes.value arguments in argv


# /usr/include/X11/Xresource.h 345
class XrmOptionDescRec(cty.Structure):
    pass
XrmOptionDescRec._fields_ = [
    ('option', STRING),
    ('specifier', STRING),
    ('argKind', XrmOptionKind),
    ('value', XPointer),
]
XrmOptionDescList = cty.POINTER(XrmOptionDescRec)

FL_CMD_OPT = XrmOptionDescRec

FL_resource = FL_RESOURCE


KeySym = XID    # cty.c_ulong


# All Form control variables. Named closely as its resource name

class FL_IOPT(cty.Structure):
    pass
FL_IOPT._fields_ = [
    ('rgamma', cty.c_float),
    ('ggamma', cty.c_float),
    ('bgamma', cty.c_float),
    ('debug', cty.c_int),
    ('sync', cty.c_int),
    ('depth', cty.c_int),
    ('vclass', cty.c_int),
    ('doubleBuffer', cty.c_int),
    ('ulPropWidth', cty.c_int),           # underline stuff
    ('ulThickness', cty.c_int),
    ('buttonFontSize', cty.c_int),
    ('sliderFontSize', cty.c_int),
    ('inputFontSize', cty.c_int),
    ('browserFontSize', cty.c_int),
    ('menuFontSize', cty.c_int),
    ('choiceFontSize', cty.c_int),
    ('labelFontSize', cty.c_int),         # all other labels fonts
    ('pupFontSize', cty.c_int),           # font for pop-up menus
    ('pupFontStyle', cty.c_int),
    ('privateColormap', cty.c_int),
    ('sharedColormap', cty.c_int),
    ('standardColormap', cty.c_int),
    ('scrollbarType', cty.c_int),
    ('backingStore', cty.c_int),
    ('coordUnit', cty.c_int),
    ('borderWidth', cty.c_int),
    ('safe', cty.c_int),
    ('rgbfile', STRING),                # where RGB file is
    ('vname', cty.c_char * 24),
]

# my add --LK
my_fl_iopt = FL_IOPT()

buttonLabelSize = my_fl_iopt.buttonFontSize
sliderLabelSize = my_fl_iopt.sliderFontSize
inputLabelSize = my_fl_iopt.inputFontSize


# Program default masks

# values for unnamed enumeration
FL_PDDepth = 2                      #(1<<1)
FL_PDClass = 4                      #(1<<2)
FL_PDDouble = 8                     #(1<<3)
FL_PDSync = 16                      #(1<<4)
FL_PDPrivateMap = 32                #(1<<5)
FL_PDScrollbarType = 64             #(1<<6)
FL_PDPupFontSize = 128              #(1<<7)
FL_PDButtonFontSize = 256           #(1<<8)
FL_PDInputFontSize = 512            #(1<<9)
FL_PDSliderFontSize  = 1024         #(1<<10)
FL_PDVisual = 2048                  #(1<<11)
FL_PDULThickness = 4096             #(1<<12)
FL_PDULPropWidth = 8192             #(1<<13)
FL_PDBS = 16384                     #(1<<14)
FL_PDCoordUnit = 32768              #(1<<15)
FL_PDDebug = 65536                  #(1<<16)
FL_PDSharedMap = 131072             #(1<<17)
FL_PDStandardMap = 262144           #(1<<18)
FL_PDBorderWidth = 524288           #(1<<19)
FL_PDSafe = 1048576                 #(1<<20)
FL_PDMenuFontSize = 2097152         #(1<<21)
FL_PDBrowserFontSize = 4194304      #(1<<22)
FL_PDChoiceFontSize = 8388608       #(1<<23)
FL_PDLabelFontSize = 16777216       #(1<<24)

FL_PDButtonLabelSize = FL_PDButtonFontSize
FL_PDSliderLabelSize = FL_PDSliderFontSize
FL_PDInputLabelSize = FL_PDInputFontSize
FL_PDButtonLabel = FL_PDButtonLabelSize


# How we pack and unpack colors
FL_PCTYPE = cty.c_ubyte
FL_PCBITS = 8
FL_PCMAX = (1<<FL_PCBITS) - 1

FL_PACKED4 = cty.c_uint
FL_PACKED = FL_PACKED4

FL_RMASK = 0x000000ff
FL_RSHIFT = 0
FL_GMASK = 0x0000ff00
FL_GSHIFT = 8
FL_BMASK = 0x00ff0000
FL_BSHIFT = 16
FL_AMASK = 0xff000000
FL_ASHIFT = 24


class FL_RGB2PIXEL_(cty.Structure):
    pass
FL_RGB2PIXEL_._fields_ = [
    ('rshift', cty.c_uint),
    ('rmask', cty.c_uint),
    ('rbits', cty.c_uint),
    ('gshift', cty.c_uint),
    ('gmask', cty.c_uint),
    ('gbits', cty.c_uint),
    ('bshift', cty.c_uint),
    ('bmask', cty.c_uint),
    ('bbits', cty.c_uint),
    ('bits_per_rgb', cty.c_int),
    ('colormap_size', cty.c_int),
]

FL_RGB2PIXEL = FL_RGB2PIXEL_


Cursor = XID        # cty.c_ulong


class FL_POPUP_(cty.Structure):
    pass
FL_POPUP = FL_POPUP_

class FL_POPUP_ENTRY_(cty.Structure):
    pass
FL_POPUP_ENTRY = FL_POPUP_ENTRY_

class FL_POPUP_RETURN_(cty.Structure):
    pass
FL_POPUP_RETURN = FL_POPUP_RETURN_

FL_POPUP_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_POPUP_RETURN))

FL_POPUP_RETURN_._fields_ = [
    ('val', cty.c_long),              # value assigned to popup entry
    ('user_data', cty.c_void_p),      # pointer to user data
    ('text', STRING),               # text of the selected popup entry
    ('label', STRING),              # left-flushed label part
    ('accel', STRING),              # right-flushed label part
    ('entry', cty.POINTER(FL_POPUP_ENTRY)),   # pointer to selected popup entry
    ('popup', cty.POINTER(FL_POPUP)),         # popup we're called for
]


FL_POPUP_._fields_ = [
    ('next', cty.POINTER(FL_POPUP)),      # next in linked list
    ('prev', cty.POINTER(FL_POPUP)),      # previous in linked list
    ('parent', cty.POINTER(FL_POPUP)),        # for sub-popups: direct parent
    ('top_parent', cty.POINTER(FL_POPUP)),    # and top-most parent
    ('entries', cty.POINTER(FL_POPUP_ENTRY)),     # pointer to list of entries
    ('title', STRING),
    ('win', Window),                    # popup window
    ('parent_win', Window),             # parent window of popup window
    ('cursor', Cursor),                 # cursor for the popup
    ('callback', FL_POPUP_CB),
    ('use_req_pos', cty.c_int),           # if set use req_x, req_y
    ('req_x', cty.c_int),
    ('req_y', cty.c_int),
    ('x', cty.c_int),                     # position of popup window
    ('y', cty.c_int),
    ('w', cty.c_uint),                    # dimensions of popup window
    ('h', cty.c_uint),
    ('min_width', cty.c_int),             # minimum width of popup
    ('title_box_x', cty.c_int),           # position of title box
    ('title_box_y', cty.c_int),
    ('title_box_w', cty.c_uint),          # dimensions of title box
    ('title_box_h', cty.c_uint),
    ('has_subs', cty.c_int),
    ('has_boxes', cty.c_int),
    ('counter', cty.c_int),
    ('title_font_style', cty.c_int),
    ('title_font_size', cty.c_int),
    ('entry_font_style', cty.c_int),
    ('entry_font_size', cty.c_int),
    ('event_mask', cty.c_ulong),
    ('bw', cty.c_int),                    # border width
    ('bg_color', FL_COLOR),             # background color of popup
    ('on_color', FL_COLOR),             # color of entry under mouse
    ('title_color', FL_COLOR),          # color of title text
    ('text_color', FL_COLOR),           # normal text color of entry
    ('text_on_color', FL_COLOR),        # text color when mouse on entry
    ('text_off_color', FL_COLOR),       # text color of disabled entry
    ('radio_color', FL_COLOR),          # color of radio buttons
    ('policy', cty.c_int),
    ('need_recalc', cty.c_int),           # do we need to recalc position?
    ('ret', FL_POPUP_RETURN),     # structure passed to callbacks and returned
                                  # on selection
]

FL_POPUP_ENTRY_._fields_ = [
    ('prev', cty.POINTER(FL_POPUP_ENTRY)),    # next in linked list
    ('next', cty.POINTER(FL_POPUP_ENTRY)),    # previous in linked list
    ('popup', cty.POINTER(FL_POPUP)),         # popup it belongs to
    ('is_act', cty.c_int),                    # set while mouse is over it
    ('text', STRING),                       # complete text of entry
    ('label', STRING),                      # cleaned-up label text
    ('accel', STRING),                      # cleaned-up accelerator key text
    ('val', cty.c_long),                      # value associated with entry
    ('user_data', cty.c_void_p),              # pointer to user data
    ('type', cty.c_int),                      # normal, toggle, radio, sub-popup
    ('state', cty.c_uint),                    # disabled, hidden, checked
    ('group', cty.c_int),                     # group (for radio entries only)
    ('sub', cty.POINTER(FL_POPUP)),           # sub-popup bound to entry
    ('shortcut', cty.POINTER(cty.c_long)),      # keyboard shortcuts
    ('ulpos', cty.c_int),                     # underline position in text
    ('callback', FL_POPUP_CB),              # callback for entry
    ('enter_callback', FL_POPUP_CB),        # callback for entering entry
    ('leave_callback', FL_POPUP_CB),        # callback for leaving entry
    ('x', cty.c_int),                         # position of entry text
    ('y', cty.c_int),
    ('w', cty.c_uint),
    ('h', cty.c_uint),                        # height of entry text
    ('box_x', cty.c_int),
    ('box_y', cty.c_int),
    ('box_w', cty.c_uint),
    ('box_h', cty.c_uint),
    ('sl_h', cty.c_uint),
    ('ul_x', cty.c_int),
    ('ul_y', cty.c_int),
    ('ul_w', cty.c_uint),
    ('ul_h', cty.c_uint),
]

class FL_POPUP_ITEM(cty.Structure):
    pass
FL_POPUP_ITEM._fields_ = [
    ('text', STRING),               # text of entry
    ('callback', FL_POPUP_CB),      # (selection) callback
    ('shortcut', STRING),           # keyboard shortcut description
    ('type', cty.c_int),              # type of entry
    ('state', cty.c_int),             # disabled, hidden, checked
]


# Popup policies
# values for unnamed enumeration
FL_POPUP_NORMAL_SELECT = 0
FL_POPUP_DRAG_SELECT = 1

# Popup states
# values for unnamed enumeration
FL_POPUP_NONE = 0
FL_POPUP_DISABLED = 1       # entry is disabled
FL_POPUP_HIDDEN   = 2       # entry is temporarily hidden
FL_POPUP_CHECKED  = 4       # toggle/radio item is in on state

# Popup entry types
# values for unnamed enumeration
FL_POPUP_NORMAL = 0         # normal popup entry
FL_POPUP_TOGGLE = 1         # toggle ("binary") popup entry
FL_POPUP_RADIO = 2          # radio popup entry
FL_POPUP_SUB = 3            # sub-popup popup entry
FL_POPUP_LINE = 4           # line popup entry

# Popup color types
# values for unnamed enumeration
FL_POPUP_BACKGROUND_COLOR = 0
FL_POPUP_HIGHLIGHT_COLOR = 1
FL_POPUP_TITLE_COLOR = 2
FL_POPUP_TEXT_COLOR = 3
FL_POPUP_HIGHLIGHT_TEXT_COLOR = 4
FL_POPUP_DISABLED_TEXT_COLOR = 5
FL_POPUP_RADIO_COLOR = 6


#######################
# forms.h (bitmap.h)
# Object Class: Bitmap
#######################

FL_NORMAL_BITMAP = 0

# Defaults
FL_BITMAP_BOXTYPE = FL_NO_BOX
FL_BITMAP_COL1 = FL_COL1            # background of bitmap
FL_BITMAP_COL2 = FL_COL1            # not used currently
FL_BITMAP_LCOL = FL_LCOL            # foreground of bitmap
FL_BITMAP_ALIGN = FL_ALIGN_BOTTOM

Drawable = XID    # cty.c_ulong


# PIXMAP stuff

FL_NORMAL_PIXMAP = 0


#######################
# forms.h (browser.h)
# Object class Browser
#######################

# values for enumeration 'FL_BROWSER_TYPE'
FL_BROWSER_TYPE = cty.c_int # enum
FL_NORMAL_BROWSER = 0
FL_SELECT_BROWSER = 1
FL_HOLD_BROWSER = 2
FL_MULTI_BROWSER = 3

# Defaults
FL_BROWSER_BOXTYPE = FL_DOWN_BOX
FL_BROWSER_COL1 = FL_COL1
FL_BROWSER_COL2 = FL_YELLOW
FL_BROWSER_LCOL = FL_LCOL
FL_BROWSER_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_BROWSER_SLCOL = FL_COL1
FL_BROWSER_FONTSIZE = FL_SMALL_FONT

# This exists only for backward compatibility and isn't used anymore!
FL_BROWSER_LINELENGTH = 2048


FL_BROWSER_SCROLL_CALLBACK = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT),
                cty.c_int, cty.c_void_p)


#############################################################
# forms.h (button.h)
# All Buttons: regular button, light button and round button
#############################################################

# values for enumeration 'FL_BUTTON_TYPE'
FL_BUTTON_TYPE = cty.c_int # enum
FL_NORMAL_BUTTON = 0
FL_PUSH_BUTTON = 1
FL_RADIO_BUTTON = 2
FL_HIDDEN_BUTTON = 3
FL_TOUCH_BUTTON = 4
FL_INOUT_BUTTON = 5
FL_RETURN_BUTTON = 6
FL_HIDDEN_RET_BUTTON = 7
FL_MENU_BUTTON = 8

FL_TOGGLE_BUTTON = FL_PUSH_BUTTON


class FL_BUTTON_SPEC(cty.Structure):
    pass
FL_BUTTON_SPEC._fields_ = [
    ('pixmap', Pixmap),
    ('mask', Pixmap),
    ('bits_w', cty.c_uint),
    ('bits_h', cty.c_uint),
    ('val', cty.c_int),               # whether on
    ('mousebut', cty.c_int),          # mouse button that caused the push
    ('timdel', cty.c_int),            # time since last touch (TOUCH buttons)
    ('event', cty.c_int),             # what event triggers redraw
    ('is_pushed', cty.c_int),         # set while drawn as pushed down
    ('react_to', cty.c_int * 5),      # mouse buttons button reacts to
    ('cspecl', cty.c_long),           # reserved for class specfic stuff
    ('cspecv', cty.c_void_p),         # miscty. things
    ('filename', STRING),
    ('focus_pixmap', Pixmap),
    ('focus_mask', Pixmap),
    ('focus_filename', STRING),
]

FL_BUTTON_STRUCT = FL_BUTTON_SPEC

FL_DrawButton = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT))
FL_CleanupButton = cty.CFUNCTYPE(None, cty.POINTER(FL_BUTTON_SPEC))

FL_DRAWBUTTON = FL_DrawButton
FL_CLEANUPBUTTON = FL_CleanupButton

# normal button default
FL_BUTTON_BOXTYPE = FL_UP_BOX
FL_BUTTON_COL1 = FL_COL1
FL_BUTTON_COL2 = FL_COL1
FL_BUTTON_LCOL = FL_LCOL
FL_BUTTON_ALIGN = FL_ALIGN_CENTER
FL_BUTTON_MCOL1 = FL_MCOL
FL_BUTTON_MCOL2 = FL_MCOL
FL_BUTTON_BW = FL_BOUND_WIDTH

# light button defaults
FL_LIGHTBUTTON_BOXTYPE = FL_UP_BOX
FL_LIGHTBUTTON_COL1 = FL_COL1
FL_LIGHTBUTTON_COL2 = FL_YELLOW
FL_LIGHTBUTTON_LCOL = FL_LCOL
FL_LIGHTBUTTON_ALIGN = FL_ALIGN_CENTER
FL_LIGHTBUTTON_TOPCOL = FL_COL1
FL_LIGHTBUTTON_MCOL = FL_MCOL
FL_LIGHTBUTTON_MINSIZE = 12

# round button defaults
FL_ROUNDBUTTON_BOXTYPE = FL_NO_BOX
FL_ROUNDBUTTON_COL1 = FL_MCOL
FL_ROUNDBUTTON_COL2 = FL_YELLOW
FL_ROUNDBUTTON_LCOL = FL_LCOL
FL_ROUNDBUTTON_ALIGN = FL_ALIGN_CENTER
FL_ROUNDBUTTON_TOPCOL = FL_COL1
FL_ROUNDBUTTON_MCOL = FL_MCOL

# round3d button defaults
FL_ROUND3DBUTTON_BOXTYPE = FL_NO_BOX
FL_ROUND3DBUTTON_COL1 = FL_COL1
FL_ROUND3DBUTTON_COL2 = FL_BLACK
FL_ROUND3DBUTTON_LCOL = FL_LCOL
FL_ROUND3DBUTTON_ALIGN = FL_ALIGN_CENTER
FL_ROUND3DBUTTON_TOPCOL = FL_COL1
FL_ROUND3DBUTTON_MCOL = FL_MCOL

# check button defaults
FL_CHECKBUTTON_BOXTYPE = FL_NO_BOX
FL_CHECKBUTTON_COL1 = FL_COL1
FL_CHECKBUTTON_COL2 = FL_YELLOW
FL_CHECKBUTTON_LCOL = FL_LCOL
FL_CHECKBUTTON_ALIGN = FL_ALIGN_CENTER

FL_CHECKBUTTON_TOPCOL = FL_COL1
FL_CHECKBUTTON_MCOL = FL_MCOL

# bitmap button defaults
FL_BITMAPBUTTON_BOXTYPE = FL_UP_BOX
FL_BITMAPBUTTON_COL1 = FL_COL1         # bitmap background
FL_BITMAPBUTTON_COL2 = FL_BLUE         # "focus" color
FL_BITMAPBUTTON_LCOL = FL_LCOL         # bitmap foreground
FL_BITMAPBUTTON_ALIGN = FL_ALIGN_BOTTOM

# bitmap button defaults
FL_PIXMAPBUTTON_BOXTYPE = FL_UP_BOX
FL_PIXMAPBUTTON_COL1 = FL_BUTTON_COL1
FL_PIXMAPBUTTON_COL2 = FL_BUTTON_COL2
FL_PIXMAPBUTTON_LCOL = FL_BUTTON_LCOL
FL_PIXMAPBUTTON_MCOL1 = FL_BUTTON_MCOL1
FL_PIXMAPBUTTON_MCOL2 = FL_BUTTON_MCOL2
FL_PIXMAPBUTTON_ALIGN = FL_ALIGN_BOTTOM


#######################
# forms.h (canvas.h)
# Header for FL_CANVAS
#######################

# values for enumeration 'FL_CANVAS_TYPE'
FL_CANVAS_TYPE = cty.c_int # enum
FL_NORMAL_CANVAS = 0
FL_SCROLLED_CANVAS = 1

# Default
FL_CANVAS_BOXTYPE = FL_DOWN_BOX     # really the decoration frame
FL_CANVAS_ALIGN = FL_ALIGN_TOP


# /usr/include/X11/Xlib.h 317
class XSetWindowAttributes(cty.Structure):
    pass
XSetWindowAttributes._fields_ = [
    ('background_pixmap', Pixmap),
    ('background_pixel', cty.c_ulong),
    ('border_pixmap', Pixmap),
    ('border_pixel', cty.c_ulong),
    ('bit_gravity', cty.c_int),
    ('win_gravity', cty.c_int),
    ('backing_store', cty.c_int),
    ('backing_planes', cty.c_ulong),
    ('backing_pixel', cty.c_ulong),
    ('save_under', cty.c_int),
    ('event_mask', cty.c_long),
    ('do_not_propagate_mask', cty.c_long),
    ('override_redirect', cty.c_int),
    ('colormap', Colormap),
    ('cursor', Cursor),
]

FL_HANDLE_CANVAS = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), Window,
            cty.c_int, cty.c_int, cty.POINTER(XEvent), cty.c_void_p)

FL_MODIFY_CANVAS_PROP = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT))


#############
# glcanvas.h
#############

# my add --LK
class GLXContext (cty.Structure):
    pass
GLXContext._fields_ = []


#############################
# forms.h (chart.h)
# Object Class: Chart
#############################

# values for enumeration 'FL_CHART_TYPE'
FL_CHART_TYPE = cty.c_int # enum
FL_BAR_CHART = 0
FL_HORBAR_CHART = 1
FL_LINE_CHART = 2
FL_FILL_CHART = 3
FL_SPIKE_CHART = 4
FL_PIE_CHART = 5
FL_SPECIALPIE_CHART = 6

FL_FILLED_CHART = FL_FILL_CHART     # compatibility

# Defaults
FL_CHART_BOXTYPE = FL_BORDER_BOX
FL_CHART_COL1 = FL_COL1
FL_CHART_LCOL = FL_LCOL
FL_CHART_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_CHART_MAX = 2048


#####################
# forms.h (choice.h)
#####################

# values for enumeration 'FL_CHOICE_TYPE'
FL_CHOICE_TYPE = cty.c_int # enum
FL_NORMAL_CHOICE = 0
FL_NORMAL_CHOICE2 = 1
FL_DROPLIST_CHOICE = 2
FL_BROWSER_CHOICE = 3

FL_SIMPLE_CHOICE = FL_NORMAL_CHOICE

# Defaults
FL_CHOICE_BOXTYPE = FL_ROUNDED_BOX
FL_CHOICE_COL1 = FL_COL1
FL_CHOICE_COL2 = FL_LCOL
FL_CHOICE_LCOL = FL_LCOL
FL_CHOICE_ALIGN = FL_ALIGN_LEFT

# Others
FL_CHOICE_MCOL = FL_MCOL
FL_CHOICE_MAXITEMS = 128


#################################
# forms.h (clipbd.h)
# prototypes for clipboard stuff
#################################

FL_CPTYPE = Atom
FL_LOSE_SELECTION_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
                                     cty.c_long)
FL_SELECTION_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
                                cty.c_long, cty.c_void_p, cty.c_long)

FL_SELECTION_CALLBACK = FL_SELECTION_CB
FL_LOSE_SELECTION_CALLBACK = FL_LOSE_SELECTION_CB


#################################
# forms.h (clock.h)
#################################

# values for unnamed enumeration
FL_ANALOG_CLOCK = 0
FL_DIGITAL_CLOCK = 1

FL_CLOCK_BOXTYPE = FL_UP_BOX
FL_CLOCK_COL1 = FL_INACTIVE_COL
FL_CLOCK_COL2 = FL_BOTTOM_BCOL
FL_CLOCK_LCOL = FL_BLACK
FL_CLOCK_ALIGN = FL_ALIGN_BOTTOM

FL_CLOCK_TOPCOL = FL_COL1


######################
# forms.h (counter.h)
######################

# values for enumeration 'FL_COUNTER_TYPE'
FL_COUNTER_TYPE = cty.c_int # enum
FL_NORMAL_COUNTER = 0
FL_SIMPLE_COUNTER = 1

# Defaults
FL_COUNTER_BOXTYPE = FL_UP_BOX
FL_COUNTER_COL1 = FL_COL1
FL_COUNTER_COL2 = FL_BLUE           # ct label
FL_COUNTER_LCOL = FL_LCOL           # ct reporting
FL_COUNTER_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_COUNTER_BW = (FL_BOUND_WIDTH - 1)


#############################
# forms.h (cursor.h)
# Cursor defs and prototypes
#############################

# *** start - from /usr/include/cursorfont.h ***
XC_num_glyphs = 154
XC_X_cursor = 0
XC_arrow = 2
XC_based_arrow_down = 4
XC_based_arrow_up = 6
XC_boat = 8
XC_bogosity = 10
XC_bottom_left_corner = 12
XC_bottom_right_corner = 14
XC_bottom_side = 16
XC_bottom_tee = 18
XC_box_spiral = 20
XC_center_ptr = 22
XC_circle = 24
XC_clock = 26
XC_coffee_mug = 28
XC_cross = 30
XC_cross_reverse = 32
XC_crosshair = 34
XC_diamond_cross = 36
XC_dot = 38
XC_dotbox = 40
XC_double_arrow = 42
XC_draft_large = 44
XC_draft_small = 46
XC_draped_box = 48
XC_fleur = 52
XC_gobbler = 54
XC_gumby = 56
XC_hand1 = 58
XC_hand2 = 60
XC_heart = 62
XC_icon = 64
XC_iron_cross = 66
XC_left_ptr = 68
XC_left_side = 70
XC_left_tee = 72
XC_leftbutton = 74
XC_ll_angle = 76
XC_lr_angle = 78
XC_man = 80
XC_middlebutton = 82
XC_mouse = 84
XC_pencil = 86
XC_pirate = 88
XC_plus = 90
XC_question_arrow = 92
XC_right_ptr = 94
XC_right_side = 96
XC_right_tee = 98
XC_rightbutton = 100
XC_rtl_logo = 102
XC_sailboat = 104
XC_sb_down_arrow = 106
XC_sb_h_double_arrow = 108
XC_sb_left_arrow = 110
XC_sb_right_arrow = 112
XC_sb_up_arrow = 114
XC_sb_v_double_arrow = 116
XC_shuttle = 118
XC_sizing = 120
XC_spider = 122
XC_spraycan = 124
XC_star = 126
XC_target = 128
XC_tcross = 130
XC_top_left_arrow = 132
XC_top_left_corner = 134
XC_top_right_corner = 136
XC_top_side = 138
XC_top_tee = 140
XC_trek = 142
XC_ul_angle = 144
XC_umbrella = 146
XC_ur_angle = 148
XC_watch = 150
XC_xterm = 152
# *** end - from /usr/include/cursorfont.h ***

# values for unnamed enumeration
FL_INVISIBLE_CURSOR = -2
FL_DEFAULT_CURSOR = -1
FL_BUSY_CURSOR = XC_watch
FL_CROSSHAIR_CURSOR = XC_tcross
FL_KILL_CURSOR = XC_pirate
FL_NWARROW_CURSOR = XC_top_left_arrow
FL_NEARROW_CURSOR = XC_arrow

XC_invisible = FL_INVISIBLE_CURSOR


###################
# forms.h (dial.h)
###################

# values for enumeration 'FL_DIAL_TYPE'
FL_DIAL_TYPE = cty.c_int # enum
FL_NORMAL_DIAL = 0
FL_LINE_DIAL = 1
FL_FILL_DIAL = 2

# values for unnamed enumeration
FL_DIAL_CW = 0
FL_DIAL_CCW = 1

# Defaults
FL_DIAL_BOXTYPE = FL_FLAT_BOX
FL_DIAL_COL1 = FL_COL1
FL_DIAL_COL2 = FL_RIGHT_BCOL
FL_DIAL_LCOL = FL_LCOL
FL_DIAL_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_DIAL_TOPCOL = FL_COL1


############################################
# forms.h (filesys.h)
# Convenience functions to read a directory
############################################

# File types
# values for unnamed enumeration
FT_FILE = 0
FT_DIR = 1
FT_LINK = 2
FT_SOCK = 3
FT_FIFO = 4
FT_BLK = 5
FT_CHR = 6
FT_OTHER = 7


class FL_Dirlist(cty.Structure):
    pass
FL_Dirlist._fields_ = [
    ('name', STRING),               # entry name
    ('type', cty.c_int),              # FILE_TYPE
    ('dl_mtime', cty.c_long),         # file modification time
    ('dl_size', cty.c_ulong),         # file size in bytes
]

# values for unnamed enumeration
FL_ALPHASORT = 1            # sort in alphabetic order
FL_RALPHASORT = 2           # sort in reverse alphabetic order
FL_MTIMESORT = 3            # sort according to modifcation time
FL_RMTIMESORT = 4           # sort in reverse modificaiton time
FL_SIZESORT = 5             # sort in increasing size order
FL_RSIZESORT = 6            # sort in decreasing size order
FL_CASEALPHASORT = 7        # sort case insensitive
FL_RCASEALPHASORT = 8       # sort case insensitive


FL_DIRLIST_FILTER = cty.CFUNCTYPE(cty.c_int, STRING, cty.c_int)


###################
# forms.h (flps.h)
###################

# postscript stuff
# values for unnamed enumeration
FLPS_AUTO = 0              # switch to landscale if does not fit
FLPS_LANDSCAPE = 1         # landscape always
FLPS_PORTRAIT = 2          # portrait always
FLPS_BESTFIT = 3           # even margins/best fit

# values for unnamed enumeration
FLPS_BW = -1
FLPS_GRAYSCALE = 0
FLPS_COLOR = 1


class FLPS_CONTROL(cty.Structure):
    pass
FLPS_CONTROL._fields_ = [
    ('ps_color', cty.c_int),
    ('orientation', cty.c_int),
    ('auto_fit', cty.c_int),
    ('drawbox', cty.c_int),
    ('eps', cty.c_int),
    ('xdpi', cty.c_float),
    ('ydpi', cty.c_float),
    ('paper_w', cty.c_float),
    ('paper_h', cty.c_float),
    ('gamma', cty.c_float),
    ('tmpdir', STRING),
    ('printer_dpi', cty.c_int),
    ('hm', cty.c_float),
    ('vm', cty.c_float),
    ('xscale', cty.c_float),
    ('yscale', cty.c_float),
    ('scale_text', cty.c_int),
    ('first_page_only', cty.c_int),
    ('clip', cty.c_int),
]


#########################
# forms. (formbrowser.h)
#########################

# values for unnamed enumeration
FL_NORMAL_FORMBROWSER = 0

# values for unnamed enumeration
FL_SMOOTH_SCROLL = 0
FL_JUMP_SCROLL = 1

FL_FORMBROWSER_BOXTYPE = FL_DOWN_BOX
FL_FORMBROWSER_COL1 = FL_COL1
FL_FORMBROWSER_ALIGN = FL_ALIGN_TOP


####################
# forms.h (frame.h)
####################

# types of frames
# values for unnamed enumeration
FL_NO_FRAME = 0
FL_UP_FRAME = 1
FL_DOWN_FRAME = 2
FL_BORDER_FRAME = 3
FL_SHADOW_FRAME = 4
FL_ENGRAVED_FRAME = 5
FL_ROUNDED_FRAME = 6
FL_EMBOSSED_FRAME = 7
FL_OVAL_FRAME = 8

FL_FRAME_COL1 = FL_BLACK        # border color
FL_FRAME_COL2 = FL_COL1         # label background
FL_FRAME_LCOL = FL_BLACK        # label color


#####################
# forms.h (free.h)
# Object Class: Free
#####################

# values for enumeration 'FL_FREE_TYPE'
FL_FREE_TYPE = cty.c_int # enum
FL_NORMAL_FREE = 0
FL_INACTIVE_FREE = 1
FL_INPUT_FREE = 2
FL_CONTINUOUS_FREE = 3
FL_ALL_FREE = 4

FL_SLEEPING_FREE = FL_INACTIVE_FREE




######################
# forms.h (goodies.h)
######################

# Resources and misc. goodie routines

FLAlertDismissLabel = "flAlert.dismiss.label"
FLAlertTitle = "flAlert.title"

FLQuestionYesLabel = "flQuestion.yes.label"
FLQuestionNoLabel = "flQuestion.no.label"
FLQuestionTitle = "flQuestion.title"

FLOKLabel = "flInput.ok.label"
FLInputClearLabel = "flInput.clear.label"
FLInputCancelLabel = "flInput.cancel.label"
FLInputTitle = "flInput.title"

FLChoiceTitle = "flChoice.title"



# command log

class FD_CMDLOG(cty.Structure):
    pass
FD_CMDLOG._fields_ = [
    ('form', cty.POINTER(FL_FORM)),
    ('vdata', cty.c_void_p),
    ('cdata', STRING),
    ('ldata', cty.c_long),
    ('browser', cty.POINTER(FL_OBJECT)),
    ('close_browser', cty.POINTER(FL_OBJECT)),
    ('clear_browser', cty.POINTER(FL_OBJECT)),
]

# file selector

FL_MAX_FSELECTOR = 6

class FD_FSELECTOR(cty.Structure):
    pass
FD_FSELECTOR._fields_ = [
    ('fselect', cty.POINTER(FL_FORM)),
    ('vdata', cty.c_void_p),
    ('cdata', cty.c_void_p),
    ('ldata', cty.c_long),
    ('browser', cty.POINTER(FL_OBJECT)),
    ('input', cty.POINTER(FL_OBJECT)),
    ('prompt', cty.POINTER(FL_OBJECT)),
    ('resbutt', cty.POINTER(FL_OBJECT)),
    ('patbutt', cty.POINTER(FL_OBJECT)),
    ('dirbutt', cty.POINTER(FL_OBJECT)),
    ('cancel', cty.POINTER(FL_OBJECT)),
    ('ready', cty.POINTER(FL_OBJECT)),
    ('dirlabel', cty.POINTER(FL_OBJECT)),
    ('patlabel', cty.POINTER(FL_OBJECT)),
    ('appbutt', cty.POINTER(FL_OBJECT) * 3),
]


cfunc_none_voidp = cty.CFUNCTYPE(None, cty.c_void_p)


####################
# forms.h (input.h)
####################

# Types
# values for enumeration 'FL_INPUT_TYPE'
FL_INPUT_TYPE = cty.c_int # enum
FL_NORMAL_INPUT = 0
FL_FLOAT_INPUT = 1
FL_INT_INPUT = 2
FL_DATE_INPUT = 3
FL_MULTILINE_INPUT = 4
FL_HIDDEN_INPUT = 5
FL_SECRET_INPUT = 6

# for date input
# values for unnamed enumeration
FL_INPUT_MMDD = 0
FL_INPUT_DDMM = 1

# Defaults
FL_INPUT_BOXTYPE = FL_DOWN_BOX
FL_INPUT_COL1 = FL_COL1
FL_INPUT_COL2 = FL_MCOL
FL_INPUT_LCOL = FL_LCOL
FL_INPUT_ALIGN = FL_ALIGN_LEFT

# Others
FL_INPUT_TCOL = FL_LCOL
FL_INPUT_CCOL = FL_BLUE

FL_RINGBELL = (1<<4)


FL_INPUTVALIDATOR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), STRING,
                                  STRING, cty.c_int)


# edit keys

class FL_EditKeymap(cty.Structure):
    pass
FL_EditKeymap._fields_ = [
    ('del_prev_char', cty.c_long),        # delete previous char
    ('del_next_char', cty.c_long),        # delete next char
    ('del_prev_word', cty.c_long),        # delete previous word
    ('del_next_word', cty.c_long),        # delete next word
    # movement
    ('moveto_prev_line', cty.c_long),     # one line up
    ('moveto_next_line', cty.c_long),     # one line down
    ('moveto_prev_char', cty.c_long),     # one char left
    ('moveto_next_char', cty.c_long),     # one char right
    ('moveto_prev_word', cty.c_long),     # one word left
    ('moveto_next_word', cty.c_long),     # one word right
    ('moveto_prev_page', cty.c_long),     # one page up
    ('moveto_next_page', cty.c_long),     # one page down
    ('moveto_bol', cty.c_long),           # move to begining of line
    ('moveto_eol', cty.c_long),           # move to end of line
    ('moveto_bof', cty.c_long),           # move to begin of file
    ('moveto_eof', cty.c_long),           # move to end of file
    # miscty. stuff
    ('transpose', cty.c_long),            # switch two char positions
    ('paste', cty.c_long),                # paste the edit buffer
    ('backspace', cty.c_long),            # another  del_prev_char
    ('del_to_bol', cty.c_long),           # cut to begining of line
    ('del_to_eol', cty.c_long),           # cut to end of line
    ('clear_field', cty.c_long),          # delete everything
    ('del_to_eos', cty.c_long),           # not implemented
]


#####################
# forms.h (menu.h)
# Object Class: Menu
#####################

# values for enumeration 'FL_MENU_TYPE'
FL_MENU_TYPE = cty.c_int # enum
FL_TOUCH_MENU = 0
FL_PUSH_MENU = 1
FL_PULLDOWN_MENU = 2

# Defaults
FL_MENU_BOXTYPE = FL_BORDER_BOX
FL_MENU_COL1 = FL_COL1
FL_MENU_COL2 = FL_MCOL
FL_MENU_LCOL = FL_LCOL
FL_MENU_ALIGN = FL_ALIGN_CENTER

# Others
FL_MENU_MAXITEMS = 128
FL_MENU_MAXSTR = 64        # not used anymore! JTT


##############################################
# forms.h (menubar.h)
# Object Class: MenuBar
# THIS FILE SEEMS NOT TO BE NEEDED AT ALL JTT
##############################################

# values for unnamed enumeration
FL_NORMAL_MENUBAR = 0

# Defaults
FL_MENUBAR_BOXTYPE = FL_UP_BOX
FL_MENUBAR_COL1 = FL_COL1
FL_MENUBAR_COL2 = FL_MCOL
FL_MENUBAR_LCOL = FL_LCOL


# Nmenu object types
# values for unnamed enumeration
FL_NORMAL_NMENU = 0
FL_NORMAL_TOUCH_NMENU = 1
FL_BUTTON_NMENU = 2
FL_BUTTON_TOUCH_NMENU = 3


#########################
# forms.h (positioner.h)
#########################

FL_NORMAL_POSITIONER = 0
FL_OVERLAY_POSITIONER = 1

# Defaults
FL_POSITIONER_BOXTYPE = FL_DOWN_BOX
FL_POSITIONER_COL1 = FL_COL1
FL_POSITIONER_COL2 = FL_RED
FL_POSITIONER_LCOL = FL_LCOL
FL_POSITIONER_ALIGN = FL_ALIGN_BOTTOM


# values for unnamed enumeration
FL_VERT_SCROLLBAR = 0
FL_HOR_SCROLLBAR = 1
FL_VERT_THIN_SCROLLBAR = 2
FL_HOR_THIN_SCROLLBAR = 3
FL_VERT_NICE_SCROLLBAR = 4
FL_HOR_NICE_SCROLLBAR = 5
FL_VERT_PLAIN_SCROLLBAR = 6
FL_HOR_PLAIN_SCROLLBAR = 7
FL_HOR_BASIC_SCROLLBAR = FL_HOR_PLAIN_SCROLLBAR
FL_VERT_BASIC_SCROLLBAR = FL_VERT_PLAIN_SCROLLBAR

# values for unnamed enumeration
FL_NORMAL_SCROLLBAR = 0
FL_THIN_SCROLLBAR = 1
FL_NICE_SCROLLBAR = 2
FL_PLAIN_SCROLLBAR = 3


#####################
# forms.h (select.h)
#####################

# Select object types
# values for unnamed enumeration
FL_NORMAL_SELECT = 0
FL_MENU_SELECT = 1
FL_DROPLIST_SELECT = 2

# Defaults
FL_SELECT_COL1 = FL_COL1
FL_SELECT_COL2 = FL_MCOL
FL_SELECT_LCOL = FL_LCOL
FL_SELECT_ALIGN = FL_ALIGN_LEFT


#######################
# forms.h (slider.h)
# Object Class: Slider
#######################

# values for enumeration 'FL_SLIDER_TYPE'
FL_SLIDER_TYPE = cty.c_int # enum
#######################
# forms.h (slider.h)
# Object Class: Slider
#######################

FL_HOR_FLAG = 1
FL_SCROLL_FLAG = 8

# values for enumeration 'FL_SLIDER_TYPE'
FL_VERT_SLIDER = 0
FL_HOR_SLIDER = FL_VERT_SLIDER | FL_HOR_FLAG
FL_VERT_FILL_SLIDER = 2
FL_HOR_FILL_SLIDER = FL_VERT_FILL_SLIDER | FL_HOR_FLAG
FL_VERT_NICE_SLIDER = 4
FL_HOR_NICE_SLIDER = FL_VERT_NICE_SLIDER | FL_HOR_FLAG
FL_VERT_BROWSER_SLIDER = 6
FL_HOR_BROWSER_SLIDER = FL_VERT_BROWSER_SLIDER | FL_HOR_FLAG
# The following are for use with scrollbars only!
# for FL_VERT_SCROLLBAR and FL_HOR_SCROLLBAR
FL_VERT_BROWSER_SLIDER2 = FL_VERT_SLIDER | FL_SCROLL_FLAG
FL_HOR_BROWSER_SLIDER2 = FL_HOR_SLIDER | FL_SCROLL_FLAG
# for FL_VERT_THIN_SCROLLBAR and FL_VERT_THIN_SCROLLBAR
FL_VERT_THIN_SLIDER = FL_VERT_FILL_SLIDER | FL_SCROLL_FLAG
FL_HOR_THIN_SLIDER = FL_HOR_FILL_SLIDER | FL_SCROLL_FLAG
# for FL_VERT_NICE_SCROLLBAR and FL_HOR_NICE_SCROLLBAR
FL_VERT_THIN_SLIDER = FL_VERT_FILL_SLIDER | FL_SCROLL_FLAG
FL_HOR_THIN_SLIDER = FL_HOR_FILL_SLIDER | FL_SCROLL_FLAG
# for FL_VERT_NICE_SCROLLBAR and FL_HOR_NICE_SCROLLBAR
FL_VERT_NICE_SLIDER2 = FL_VERT_NICE_SLIDER | FL_SCROLL_FLAG
FL_HOR_NICE_SLIDER2 = FL_HOR_NICE_SLIDER | FL_SCROLL_FLAG
# for use as FL_VERT_PLAIN_SCROLLBAR and FL_VERT_PLAIN_SCROLLBAR
FL_VERT_BASIC_SLIDER = FL_VERT_BROWSER_SLIDER | FL_SCROLL_FLAG
FL_HOR_BASIC_SLIDER = FL_HOR_BROWSER_SLIDER | FL_SCROLL_FLAG

# Defaults
FL_SLIDER_BW1 = FL_BOUND_WIDTH
FL_SLIDER_BW2 = FL_BOUND_WIDTH - 1          #FL_abs(FL_BOUND_WIDTH) - 1
FL_SLIDER_BOXTYPE = FL_DOWN_BOX
FL_SLIDER_COL1 = FL_COL1
FL_SLIDER_COL2 = FL_COL1
FL_SLIDER_LCOL = FL_LCOL
FL_SLIDER_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_SLIDER_FINE = 0.25
FL_SLIDER_WIDTH = 0.10


# values for enumeration 'FL_SPINNER_TYPE'
FL_SPINNER_TYPE = cty.c_int # enum
FL_INT_SPINNER = 0
FL_FLOAT_SPINNER = 1


########################
# forms.h (tabfolder.h)
########################

# values for unnamed enumeration
FL_TOP_TABFOLDER = 0        # tab on top
FL_BOTTOM_TABFOLDER = 1
FL_LEFT_TABFOLDER = 2
FL_RIGHT_TABFOLDER = 3
FL_NORMAL_TABFOLDER = FL_TOP_TABFOLDER

# values for unnamed enumeration
FL_NO = 0
FL_FIT = 1
FL_ENLARGE_ONLY = 2


###################
# forms.h (text.h)
###################

# values for unnamed enumeration
FL_NORMAL_TEXT = 0

FL_TEXT_BOXTYPE = FL_FLAT_BOX
FL_TEXT_COL1 = FL_COL1
FL_TEXT_COL2 = FL_MCOL
FL_TEXT_LCOL = FL_LCOL
FL_TEXT_ALIGN = FL_ALIGN_LEFT


#########################
# forms.h (thumbwheel.h)
#########################

# values for unnamed enumeration
FL_VERT_THUMBWHEEL = 0
FL_HOR_THUMBWHEEL = 1

# defaults
FL_THUMBWHEEL_COL1 = FL_COL1
FL_THUMBWHEEL_COL2 = FL_COL1
FL_THUMBWHEEL_LCOL = FL_BLACK
FL_THUMBWHEEL_BOXTYPE = FL_BORDER_BOX
FL_THUMBWHEEL_ALIGN = FL_ALIGN_BOTTOM


######################
# forms.h (timer.h)
# Object Class: Timer
######################

# values for enumeration 'FL_TIMER_TYPE'
FL_TIMER_TYPE = cty.c_int # enum
FL_NORMAL_TIMER = 0
FL_VALUE_TIMER = 1
FL_HIDDEN_TIMER = 2

# Defaults
FL_TIMER_BOXTYPE = FL_DOWN_BOX
FL_TIMER_COL1 = FL_COL1
FL_TIMER_COL2 = FL_RED
FL_TIMER_LCOL = FL_LCOL
FL_TIMER_ALIGN = FL_ALIGN_CENTER

# Others
FL_TIMER_BLINKRATE = 0.2

FL_TIMER_FILTER = cty.CFUNCTYPE(STRING, cty.POINTER(FL_OBJECT), cty.c_double)


###############################
# forms.h (xpopup.h)
# Prototypes for xpop-up menus
###############################

FL_MAXPUPI = 128    # max item each pup
FL_PUP_PADH = 4     # space between each items

FL_PUP_ENTERCB = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
FL_PUP_LEAVECB = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)


# Class FL_XYPLOT
# values for enumeration 'FL_XYPLOT_TYPE'
FL_XYPLOT_TYPE = cty.c_int # enum
FL_NORMAL_XYPLOT = 0    # solid line
FL_SQUARE_XYPLOT = 1    # with added square
FL_CIRCLE_XYPLOT = 2    # with added circle
FL_FILL_XYPLOT = 3      # fill completely
FL_POINTS_XYPLOT = 4    # only data points
FL_DASHED_XYPLOT = 5    # dashed line
FL_IMPULSE_XYPLOT = 6
FL_ACTIVE_XYPLOT = 7    # accepts interactive manipulations
FL_EMPTY_XYPLOT = 8
FL_DOTTED_XYPLOT = 9
FL_DOTDASHED_XYPLOT = 10
FL_LONGDASHED_XYPLOT = 11
FL_LINEPOINTS_XYPLOT = 12   # line & points

# values for unnamed enumeration
FL_LINEAR = 0
FL_LOG = 1

# values for unnamed enumeration
FL_GRID_NONE  = 0
FL_GRID_MAJOR = 1
FL_GRID_MINOR = 2

# Defaults
FL_XYPLOT_BOXTYPE = FL_FLAT_BOX
FL_XYPLOT_COL1 = FL_COL1
FL_XYPLOT_LCOL = FL_LCOL
FL_XYPLOT_ALIGN = FL_ALIGN_BOTTOM
FL_MAX_XYPLOTOVERLAY = 32


FL_XYPLOT_SYMBOL = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_int,
            cty.POINTER(FL_POINT), cty.c_int, cty.c_int, cty.c_int)


FL_FALSE = 0
FL_TRUE = (not FL_FALSE)


Mask = cty.c_ulong
Time = cty.c_ulong
GContext = XID    # cty.c_ulong
KeyCode = cty.c_ubyte


#########################
# flimage.h
# Image related routines
#########################

# values for unnamed enumeration
FL_IMAGE_NONE = 0
FL_IMAGE_MONO = 1           # b&w. 1bit. 0=white 1=black
FL_IMAGE_GRAY = 2           # 8 bit gray image
FL_IMAGE_CI = 4             # colormmaped image
FL_IMAGE_RGB = 8            # RGBA image. 8bit each
FL_IMAGE_PACKED = 16        # RGBA packed into an int
FL_IMAGE_GRAY16 = 32        # 12bit gray scale image
FL_IMAGE_RGB16 = 64         # 36bits color image
FL_IMAGE_FLEX = 1023        # all formats
# aliases
FLIMAGE_NONE = FL_IMAGE_NONE
FLIMAGE_MONO = FL_IMAGE_MONO
FLIMAGE_GRAY = FL_IMAGE_GRAY
FLIMAGE_CI = FL_IMAGE_CI
FLIMAGE_RGB = FL_IMAGE_RGB
FLIMAGE_PACKED = FL_IMAGE_PACKED
FLIMAGE_GRAY16 = FL_IMAGE_GRAY16
FLIMAGE_RGB16 = FL_IMAGE_RGB16
FLIMAGE_FLEX = FL_IMAGE_FLEX

FL_PCTYPE = cty.c_uint        # primary color type
FL_PCBITS = 8               # primary color bits
FL_PCMAX = (1 << FL_PCBITS) - 1

FL_RMASK = 0x000000ff
FL_RSHIFT = 0
FL_GMASK = 0x0000ff00
FL_GSHIFT = 8
FL_BMASK = 0x00ff0000
FL_BSHIFT = 16
FL_AMASK = 0xff000000
FL_ASHIFT = 24

FL_LUTBITS = 12         # max colormap bits. 4096 entries

# values for unnamed enumeration
FLIMAGE_AUTOCOLOR = 0x7fffffff
FLIMAGE_BADCOLOR = FLIMAGE_AUTOCOLOR

FL_WINDOW = Window    # cty.c_ulong

Pixmap = XID    # cty.c_ulong


class flimage_text_(cty.Structure):
    pass
flimage_text_._fields_ = [
    ('str', STRING),            # the string itself
    ('len', cty.c_int),             # string length
    ('x', cty.c_int),               # starting location of text (wrt image)
    ('y', cty.c_int),
    ('color', cty.c_uint),          # color of the text
    ('bcolor', cty.c_uint),         # background color of the text
    ('nobk', cty.c_int),            # no background
    ('size', cty.c_int),            # font size & style
    ('style', cty.c_int),
    ('angle', cty.c_int),           # in 1/10th of a degrees
    ('align', cty.c_int),           # alignment wrt to (x,y)
    ('reserved', cty.c_int * 6),
]
FLIMAGE_TEXT = flimage_text_

class flimage_marker_(cty.Structure):
    pass
flimage_marker_._fields_ = [
    ('name', STRING),           # marker name
    ('w', cty.c_int),               # size
    ('h', cty.c_int),
    ('x', cty.c_int),               # location
    ('y', cty.c_int),
    ('color', cty.c_uint),          # color of the marker
    ('bcolor', cty.c_uint),         # aux. color of the marker
    ('angle', cty.c_int),           # in 1/10th of a degree
    ('fill', cty.c_int),
    ('thickness', cty.c_int),       # line thickness
    ('style', cty.c_int),           # line style
    # the following is filled by the library
    ('display', cty.c_void_p),
    ('gc', cty.c_void_p),
    ('win', FL_WINDOW),
    ('psdraw', STRING),
    ('reserved', cty.c_int * 6),
]
FLIMAGE_MARKER = flimage_marker_

FLIMAGE_REPFREQ = 0x1f   # report every 32 lines


class flimage_setup_(cty.Structure):
    pass

FLIMAGESETUP = cty.POINTER(flimage_setup_)


# possible errors from the library. Not currently (v0.89) used
# values for unnamed enumeration
FLIMAGE_ERR_NONE = 0
FLIMAGE_ERR_ALLOC = -50         # allocation error
FLIMAGE_ERR_INVALID = -49       # invalid image
FLIMAGE_ERR_ARGUMENT = -48      # bad argument/request
FLIMAGE_ERR_FILE = -47          # io error
FLIMAGE_ERR_INTERNAL = -46      # bugs
FLIMAGE_ERR_UNKNOWN = -45

FLIMAGE_Identify = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FILE))
FLIMAGE_Description = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))
FLIMAGE_Read_Pixels = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))
FLIMAGE_Write_Image = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))


class _IO_FILE(cty.Structure):
    pass
FILE = _IO_FILE


class flimage_(cty.Structure):
    pass
flimage_._fields_ = [
    ('type', cty.c_int),            # image type
    ('w', cty.c_int),
    ('h', cty.c_int),               # image size
    ('app_data', cty.c_void_p),     #for application at setup time
    ('u_vdata', cty.c_void_p),      # for application
    ('u_ldata', cty.c_long),        # for application
    ('red', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('green', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('blue', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('alpha', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('rgba', cty.POINTER(cty.POINTER(cty.c_ubyte)) * 4),    # alias
    ('ci', cty.POINTER(cty.POINTER(cty.c_ushort))),
    ('gray', cty.POINTER(cty.POINTER(cty.c_ushort))),
    ('packed', cty.POINTER(cty.POINTER(FL_PACKED4))),
    ('red16', cty.POINTER(cty.POINTER(cty.c_ushort))),  # not currently supported
    ('green16', cty.POINTER(cty.POINTER(cty.c_ushort))),  #not currently supported
    ('blue16', cty.POINTER(cty.POINTER(cty.c_ushort))),  # not currently supported
    ('alpha16', cty.POINTER(cty.POINTER(cty.c_ushort))),  # not currently supported
    ('ci8', cty.POINTER(cty.POINTER(cty.c_ubyte))), # not currently supported
    ('red_lut', cty.POINTER(cty.c_int)),        # red lookup tables
    ('green_lut', cty.POINTER(cty.c_int)),      # green lookup tables
    ('blue_lut', cty.POINTER(cty.c_int)),       # blue lookup tables
    ('alpha_lut', cty.POINTER(cty.c_int)),      # alpha lookup tables
    ('lut', cty.POINTER(cty.c_int) * 4),        # alias
    ('map_len', cty.c_int),                 # lut length
    ('colors', cty.c_int),                  # actual colors used in displaying
    ('gray_maxval', cty.c_int),             # indicate the range of gray16
    ('ci_maxval', cty.c_int),               # max value of ci. not used, use map_len
    ('rgb_maxval', cty.c_int),              # max value for rgb16 image
    ('level', cty.c_int),
    ('wwidth', cty.c_int),
    ('wlut', cty.POINTER(cty.c_ushort)),        # lut for window levelling
    ('wlut_len', cty.c_int),
    ('app_background', cty.c_int),          # transparent color: in RGB
    ('comments', STRING),
    ('comments_len', cty.c_int),
    ('available_type', cty.c_int),
    ('next', cty.POINTER(flimage_)),
    ('sx', cty.c_int),                      # display subimage origin
    ('sy', cty.c_int),
    ('sw', cty.c_int),                      # display subimage width
    ('sh', cty.c_int),
    ('wx', cty.c_int),              # display location relative to win
    ('wy', cty.c_int),
    ('modified', cty.c_int),
    ('display', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_), FL_WINDOW)),
    ('double_buffer', cty.c_int),
    ('sxd', cty.c_int),
    ('syd', cty.c_int),
    ('swd', cty.c_int),
    ('shd', cty.c_int),
    ('wxd', cty.c_int),
    ('wyd', cty.c_int),
    ('fmt_name', STRING),       # format name (ppm,jpg etc)
    ('bi_reserved', cty.c_int * 8),
    # annotation stuff
    ('text', cty.POINTER(FLIMAGE_TEXT)),
    ('ntext', cty.c_int),
    ('max_text', cty.c_int),
    ('dont_display_text', cty.c_int),
    ('display_text', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('free_text', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('marker', cty.POINTER(FLIMAGE_MARKER)),
    ('nmarkers', cty.c_int),
    ('max_markers', cty.c_int),
    ('dont_display_marker', cty.c_int),
    ('display_markers', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('free_markers', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('an_reserved', cty.c_int * 8),
    # physicalValue = poffset + pixelValue * pscale
    ('pmin', cty.c_double),         # physical data range
    ('pmax', cty.c_double),
    ('poffset', cty.c_double),
    ('pscale', cty.c_double),
    #  pixel grid distance
    ('xdist_offset', cty.c_double),
    ('xdist_scale', cty.c_double),
    ('ydist_offset', cty.c_double),
    ('ydist_scale', cty.c_double),
    ('px_reserved', cty.c_int * 8),
    ('infile', STRING),
    ('outfile', STRING),
    ('foffset', cty.c_long),
    ('original_type', cty.c_int),
    # hooks for application to have a chance to set some options.
    # if pre_write returns -1, the output will be canceled
    ('pre_write', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('post_write', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('f_reserved', cty.c_int * 16),
    # image processing stuff
    ('subx', cty.c_int),        # subimage origin
    ('suby', cty.c_int),
    ('subw', cty.c_int),        # subimage size
    ('subh', cty.c_int),
    ('sub_shape', cty.c_int),   # shape of the subimage
    ('fill_color', cty.c_uint),     # fill color
    ('force_convert', cty.c_int),
    ('llut', cty.POINTER(cty.c_int) * 3),   # linear lut
    ('llut_len', cty.c_int),
    ('hist', cty.POINTER(cty.c_uint) * 4),
    ('ip_reserved', cty.c_int * 16),
    # application handlers
    ('total', cty.c_int),
    ('completed', cty.c_int),
    ('visual_cue', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_), STRING)),
    ('error_message', cty.CFUNCTYPE(None, cty.POINTER(flimage_), STRING)),
    ('error_code', cty.c_int),      # not currently used
    ('display_type', cty.c_int),    # just before handing it to X
    ('pixels', cty.POINTER(cty.POINTER( cty.c_ushort))),
    ('image_spec', cty.c_void_p),   # additional image info
    ('xdisplay', cty.c_void_p),     # the X connection
    ('tran_rgb', cty.c_int),        # RGB color that should be transparent
    ('tran_index', cty.c_int),      # index that should be transparent
    ('matr', cty.c_int),
    ('matc', cty.c_int),
    # multi-frame images
    ('more', cty.c_int),
    ('current_frame', cty.c_int),
    ('total_frames', cty.c_int),
    ('next_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('prev_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('random_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_), cty.c_int)),
    ('rewind_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('cleanup', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('stop_looping', cty.c_int),
    ('mi_reserved', cty.c_int * 16),
    # the following are for internal use
    ('fpin', cty.POINTER(FILE)),
    ('fpout', cty.POINTER(FILE)),
    ('image_io', cty.c_void_p),
    ('io_spec', cty.c_void_p),      # io operation helper
    ('spec_size', cty.c_int),
    ('depth', cty.c_int),           # the depth we actually use
    ('vclass', cty.c_int),
    ('visual', cty.c_void_p),
    ('xcolormap', cty.c_ulong),
    ('rgb2p', FL_RGB2PIXEL_),
    ('ximage', cty.c_void_p),
    ('win', FL_WINDOW),
    ('gc', cty.c_void_p),
    ('sdepth', cty.c_int),          # depth the server says
    ('textgc', cty.c_void_p),
    ('markergc', cty.c_void_p),
    ('extra_io_info', cty.c_void_p),
    ('pixmap', cty.c_ulong),
    ('pixmap_w', cty.c_int),
    ('pixmap_h', cty.c_int),
    ('pixmap_depth', cty.c_int),
    ('isPixmap', cty.c_int),
    ('setup', FLIMAGESETUP),
    ('info', STRING),
    ('internal_reserved', cty.c_int * 14),
]
FL_IMAGE = flimage_

# some configuration stuff

flimage_setup_._fields_ = [
    ('app_data', cty.c_void_p),
    ('visual_cue', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE), STRING)),
    ('error_message', cty.CFUNCTYPE(None, cty.POINTER(FL_IMAGE), STRING)),
    ('display', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE), cty.c_ulong)),
    ('rgbfile', STRING),
    ('do_not_clear', cty.c_int),
    ('xdisplay', cty.c_void_p),
    ('max_frames', cty.c_int),
    ('delay', cty.c_int),
    ('no_auto_extension', cty.c_int),
    ('report_frequency', cty.c_int),
    ('double_buffer', cty.c_int),
    # internal use
    ('trailblazer', cty.c_ulong),
    ('header_info', cty.c_int),
    ('reserved', cty.c_int * 8),
]

FLIMAGE_SETUP = flimage_setup_


# output options

class FLIMAGE_JPEG_OPTION(cty.Structure):
    pass
FLIMAGE_JPEG_OPTION._fields_ = [
    ('quality', cty.c_int),
    ('smoothing', cty.c_int),
    ('reserved', cty.c_int * 6),
]


# values for unnamed enumeration
FLIMAGE_WRITABLE = FL_WRITE
FLIMAGE_READABLE = FL_READ

class FLIMAGE_FORMAT_INFO(cty.Structure):
    pass
FLIMAGE_FORMAT_INFO._fields_ = [
    ('formal_name', STRING),
    ('short_name', STRING),
    ('extension', STRING),
    ('type', cty.c_int),
    ('read_write', cty.c_int),
    ('annotation', cty.c_int),
    ('reserved', cty.c_int * 5),
]


# simple image processing routines

#FLIMAGE_SHARPEN = cty.POINTER(cty.POINTER(cty.c_int(-1)))
FLIMAGE_SHARPEN = cty.c_int(-1)
#FLIMAGE_SMOOTH = cty.POINTER(cty.POINTER(cty.c_int(-2)))
FLIMAGE_SMOOTH = cty.c_int(-2)
FL_SMOOTH = FLIMAGE_SMOOTH
FL_SHARPEN = FLIMAGE_SHARPEN

# values for unnamed enumeration
FLIMAGE_NOSUBPIXEL = 0      # scale with no subpixel sampling
FLIMAGE_SUBPIXEL = 1        # scale with  subpixel sampling
FLIMAGE_CENTER = 2          # center warped image. default
FLIMAGE_RIGHT = 8           # flush right the warped image
FLIMAGE_ASPECT = 32         # fit the size
FLIMAGE_NOCENTER = FL_ALIGN_LEFT_TOP


# /usr/include/X11/Xlib.h 345
class XWindowAttributes(cty.Structure):
    pass

# /usr/include/X11/Xlib.h 176
class XExtCodes(cty.Structure):
    pass
XExtCodes._fields_ = [
    ('extension', cty.c_int),
    ('major_opcode', cty.c_int),
    ('first_event', cty.c_int),
    ('first_error', cty.c_int),
]

# /usr/include/X11/Xlib.h 186
class XPixmapFormatValues(cty.Structure):
    pass
XPixmapFormatValues._fields_ = [
    ('depth', cty.c_int),
    ('bits_per_pixel', cty.c_int),
    ('scanline_pad', cty.c_int),
]

# /usr/include/X11/Xlib.h 218
class XGCValues(cty.Structure):
    pass
XGCValues._fields_ = [
    ('function', cty.c_int),
    ('plane_mask', cty.c_ulong),
    ('foreground', cty.c_ulong),
    ('background', cty.c_ulong),
    ('line_width', cty.c_int),
    ('line_style', cty.c_int),
    ('cap_style', cty.c_int),
    ('join_style', cty.c_int),
    ('fill_style', cty.c_int),
    ('fill_rule', cty.c_int),
    ('arc_mode', cty.c_int),
    ('tile', Pixmap),
    ('stipple', Pixmap),
    ('ts_x_origin', cty.c_int),
    ('ts_y_origin', cty.c_int),
    ('font', Font),
    ('subwindow_mode', cty.c_int),
    ('graphics_exposures', cty.c_int),
    ('clip_x_origin', cty.c_int),
    ('clip_y_origin', cty.c_int),
    ('clip_mask', Pixmap),
    ('dash_offset', cty.c_int),
    ('dashes', cty.c_char),
]


# /usr/include/X11/Xlib.h 258
class Depth(cty.Structure):
    pass
Depth._fields_ = [
    ('depth', cty.c_int),
    ('nvisuals', cty.c_int),
    ('visuals', cty.POINTER(Visual)),
]

# /usr/include/X11/Xlib.h 286
class Screen(cty.Structure):
    pass
Screen._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('display', cty.POINTER(_XDisplay)),
    ('root', Window),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('mwidth', cty.c_int),
    ('mheight', cty.c_int),
    ('ndepths', cty.c_int),
    ('depths', cty.POINTER(Depth)),
    ('root_depth', cty.c_int),
    ('root_visual', cty.POINTER(Visual)),
    ('default_gc', GC),
    ('cmap', Colormap),
    ('white_pixel', cty.c_ulong),
    ('black_pixel', cty.c_ulong),
    ('max_maps', cty.c_int),
    ('min_maps', cty.c_int),
    ('backing_store', cty.c_int),
    ('save_unders', cty.c_int),
    ('root_input_mask', cty.c_long),
]

# /usr/include/X11/Xlib.h 296
class ScreenFormat(cty.Structure):
    pass
ScreenFormat._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('depth', cty.c_int),
    ('bits_per_pixel', cty.c_int),
    ('scanline_pad', cty.c_int),
]

XWindowAttributes._fields_ = [
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('depth', cty.c_int),
    ('visual', cty.POINTER(Visual)),
    ('root', Window),
    ('c_class', cty.c_int),
    ('bit_gravity', cty.c_int),
    ('win_gravity', cty.c_int),
    ('backing_store', cty.c_int),
    ('backing_planes', cty.c_ulong),
    ('backing_pixel', cty.c_ulong),
    ('save_under', cty.c_int),
    ('colormap', Colormap),
    ('map_installed', cty.c_int),
    ('map_state', cty.c_int),
    ('all_event_masks', cty.c_long),
    ('your_event_mask', cty.c_long),
    ('do_not_propagate_mask', cty.c_long),
    ('override_redirect', cty.c_int),
    ('screen', cty.POINTER(Screen)),
]

# /usr/include/X11/Xlib.h 356
class XHostAddress(cty.Structure):
    pass
XHostAddress._fields_ = [
    ('family', cty.c_int),
    ('length', cty.c_int),
    ('address', STRING),
]

# /usr/include/X11/Xlib.h 366
class XServerInterpretedAddress(cty.Structure):
    pass
XServerInterpretedAddress._fields_ = [
    ('typelength', cty.c_int),
    ('valuelength', cty.c_int),
    ('type', STRING),
    ('value', STRING),
]

# /usr/include/X11/Xlib.h 371
class _XImage(cty.Structure):
    pass

# /usr/include/X11/Xlib.h 387
class funcs(cty.Structure):
    pass
funcs._fields_ = [
    ('create_image', cty.CFUNCTYPE(cty.POINTER(_XImage),
    cty.POINTER(_XDisplay), cty.POINTER(Visual), cty.c_uint, cty.c_int,
    cty.c_int, STRING, cty.c_uint, cty.c_uint, cty.c_int, cty.c_int)),
    ('destroy_image', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XImage))),
    ('get_pixel', cty.CFUNCTYPE(cty.c_ulong, cty.POINTER(_XImage), cty.c_int,
     cty.c_int)),
    ('put_pixel', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XImage), cty.c_int,
    cty.c_int, cty.c_ulong)),
    ('sub_image', cty.CFUNCTYPE(cty.POINTER(_XImage), cty.POINTER(_XImage),
    cty.c_int, cty.c_int, cty.c_uint, cty.c_uint)),
    ('add_pixel', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XImage), cty.c_long)),
]

_XImage._fields_ = [
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('xoffset', cty.c_int),
    ('format', cty.c_int),
    ('data', STRING),
    ('byte_order', cty.c_int),
    ('bitmap_unit', cty.c_int),
    ('bitmap_bit_order', cty.c_int),
    ('bitmap_pad', cty.c_int),
    ('depth', cty.c_int),
    ('bytes_per_line', cty.c_int),
    ('bits_per_pixel', cty.c_int),
    ('red_mask', cty.c_ulong),
    ('green_mask', cty.c_ulong),
    ('blue_mask', cty.c_ulong),
    ('obdata', XPointer),
    ('f', funcs),
]
XImage = _XImage

# /usr/include/X11/Xlib.h 416
class XWindowChanges(cty.Structure):
    pass
XWindowChanges._fields_ = [
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('sibling', Window),
    ('stack_mode', cty.c_int),
]

# /usr/include/X11/Xlib.h 426
class XColor(cty.Structure):
    pass
XColor._fields_ = [
    ('pixel', cty.c_ulong),
    ('red',  cty.c_ushort),
    ('green',  cty.c_ushort),
    ('blue',  cty.c_ushort),
    ('flags', cty.c_char),
    ('pad', cty.c_char),
]

# /usr/include/X11/Xlib.h 435
class XSegment(cty.Structure):
    pass
XSegment._fields_ = [
    ('x1', cty.c_short),
    ('y1', cty.c_short),
    ('x2', cty.c_short),
    ('y2', cty.c_short),
]

XPoint._fields_ = [
    ('x', cty.c_short),
    ('y', cty.c_short),
]

# /usr/include/X11/Xlib.h 444
XRectangle._fields_ = [
    ('x', cty.c_short),
    ('y', cty.c_short),
    ('width',  cty.c_ushort),
    ('height',  cty.c_ushort),
]

# /usr/include/X11/Xlib.h 450
class XArc(cty.Structure):
    pass
XArc._fields_ = [
    # /usr/include/X11/Xlib.h 450
    ('x', cty.c_short),
    ('y', cty.c_short),
    ('width',  cty.c_ushort),
    ('height',  cty.c_ushort),
    ('angle1', cty.c_short),
    ('angle2', cty.c_short),
]

# /usr/include/X11/Xlib.h 464
class XKeyboardControl(cty.Structure):
    pass
XKeyboardControl._fields_ = [
    ('key_click_percent', cty.c_int),
    ('bell_percent', cty.c_int),
    ('bell_pitch', cty.c_int),
    ('bell_duration', cty.c_int),
    ('led', cty.c_int),
    ('led_mode', cty.c_int),
    ('key', cty.c_int),
    ('auto_repeat_mode', cty.c_int),
]

# /usr/include/X11/Xlib.h 475
class XKeyboardState(cty.Structure):
    pass
XKeyboardState._fields_ = [
    ('key_click_percent', cty.c_int),
    ('bell_percent', cty.c_int),
    ('bell_pitch', cty.c_uint),
    ('bell_duration', cty.c_uint),
    ('led_mask', cty.c_ulong),
    ('global_auto_repeat', cty.c_int),
    ('auto_repeats', cty.c_char * 32),
]

# /usr/include/X11/Xlib.h 482
class XTimeCoord(cty.Structure):
    pass
XTimeCoord._fields_ = [
    ('time', Time),
    ('x', cty.c_short),
    ('y', cty.c_short),
]

# /usr/include/X11/Xlib.h 489
class XModifierKeymap(cty.Structure):
    pass
XModifierKeymap._fields_ = [
    ('max_keypermod', cty.c_int),
    ('modifiermap', cty.POINTER(KeyCode)),
]

Display = _XDisplay

# /usr/include/X11/Xlib.h 501
class _XPrivate(cty.Structure):
    pass
_XPrivate._fields_ = []

# /usr/include/X11/Xlib.h 502
class _XrmHashBucketRec(cty.Structure):
    pass
_XrmHashBucketRec._fields_ = []

# /usr/include/X11/Xlib.h 582
class XKeyEvent(cty.Structure):
    pass
XKeyEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('state', cty.c_uint),
    ('keycode', cty.c_uint),
    ('same_screen', cty.c_int),
]
XKeyPressedEvent = XKeyEvent
XKeyReleasedEvent = XKeyEvent

# /usr/include/X11/Xlib.h 600
class XButtonEvent(cty.Structure):
    pass
XButtonEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('state', cty.c_uint),
    ('button', cty.c_uint),
    ('same_screen', cty.c_int),
]
XButtonPressedEvent = XButtonEvent
XButtonReleasedEvent = XButtonEvent

# /usr/include/X11/Xlib.h 618
class XMotionEvent(cty.Structure):
    pass
XMotionEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('state', cty.c_uint),
    ('is_hint', cty.c_char),
    ('same_screen', cty.c_int),
]
XPointerMovedEvent = XMotionEvent

# /usr/include/X11/Xlib.h 641
class XCrossingEvent(cty.Structure):
    pass
XCrossingEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('mode', cty.c_int),
    ('detail', cty.c_int),
    ('same_screen', cty.c_int),
    ('focus', cty.c_int),
    ('state', cty.c_uint),
]
XEnterWindowEvent = XCrossingEvent
XLeaveWindowEvent = XCrossingEvent

# /usr/include/X11/Xlib.h 659
class XFocusChangeEvent(cty.Structure):
    pass
XFocusChangeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('mode', cty.c_int),
    ('detail', cty.c_int),
]
XFocusInEvent = XFocusChangeEvent
XFocusOutEvent = XFocusChangeEvent

# /usr/include/X11/Xlib.h 671
class XKeymapEvent(cty.Structure):
    pass
XKeymapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('key_vector', cty.c_char * 32),
]

# /usr/include/X11/Xlib.h 682
class XExposeEvent(cty.Structure):
    pass
XExposeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('count', cty.c_int),
]

# /usr/include/X11/Xlib.h 695
class XGraphicsExposeEvent(cty.Structure):
    pass
XGraphicsExposeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('drawable', Drawable),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('count', cty.c_int),
    ('major_code', cty.c_int),
    ('minor_code', cty.c_int),
]

# /usr/include/X11/Xlib.h 705
class XNoExposeEvent(cty.Structure):
    pass
XNoExposeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('drawable', Drawable),
    ('major_code', cty.c_int),
    ('minor_code', cty.c_int),
]

# /usr/include/X11/Xlib.h 714
class XVisibilityEvent(cty.Structure):
    pass
XVisibilityEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('state', cty.c_int),
]

# /usr/include/X11/Xlib.h 727
class XCreateWindowEvent(cty.Structure):
    pass
XCreateWindowEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('override_redirect', cty.c_int),
]

# /usr/include/X11/Xlib.h 736
class XDestroyWindowEvent(cty.Structure):
    pass
XDestroyWindowEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
]

# /usr/include/X11/Xlib.h 746
class XUnmapEvent(cty.Structure):
    pass
XUnmapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('from_configure', cty.c_int),
]

# /usr/include/X11/Xlib.h 756
class XMapEvent(cty.Structure):
    pass
XMapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('override_redirect', cty.c_int),
]

# /usr/include/X11/Xlib.h 765
class XMapRequestEvent(cty.Structure):
    pass
XMapRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
]

# /usr/include/X11/Xlib.h 777
class XReparentEvent(cty.Structure):
    pass
XReparentEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('parent', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('override_redirect', cty.c_int),
]

# /usr/include/X11/Xlib.h 791
class XConfigureEvent(cty.Structure):
    pass
XConfigureEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('above', Window),
    ('override_redirect', cty.c_int),
]

# /usr/include/X11/Xlib.h 801
class XGravityEvent(cty.Structure):
    pass
XGravityEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
]

# /usr/include/X11/Xlib.h 810
class XResizeRequestEvent(cty.Structure):
    pass
XResizeRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('width', cty.c_int),
    ('height', cty.c_int),
]

# /usr/include/X11/Xlib.h 825
class XConfigureRequestEvent(cty.Structure):
    pass
XConfigureRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('above', Window),
    ('detail', cty.c_int),
    ('value_mask', cty.c_ulong),
]

# /usr/include/X11/Xlib.h 835
class XCirculateEvent(cty.Structure):
    pass
XCirculateEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('place', cty.c_int),
]

# /usr/include/X11/Xlib.h 845
class XCirculateRequestEvent(cty.Structure):
    pass
XCirculateRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
    ('place', cty.c_int),
]

# /usr/include/X11/Xlib.h 856
class XPropertyEvent(cty.Structure):
    pass
XPropertyEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('atom', Atom),
    ('time', Time),
    ('state', cty.c_int),
]

# /usr/include/X11/Xlib.h 866
class XSelectionClearEvent(cty.Structure):
    pass
XSelectionClearEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('selection', Atom),
    ('time', Time),
]

# /usr/include/X11/Xlib.h 879
class XSelectionRequestEvent(cty.Structure):
    pass
XSelectionRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('owner', Window),
    ('requestor', Window),
    ('selection', Atom),
    ('target', Atom),
    ('property', Atom),
    ('time', Time),
]
# /usr/include/X11/Xlib.h 891
class XSelectionEvent(cty.Structure):
    pass
XSelectionEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('requestor', Window),
    ('selection', Atom),
    ('target', Atom),
    ('property', Atom),
    ('time', Time),
]
# /usr/include/X11/Xlib.h 906
class XColormapEvent(cty.Structure):
    pass
XColormapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('colormap', Colormap),
    ('c_new', cty.c_int),
    ('state', cty.c_int),
]

# /usr/include/X11/Xlib.h 916
class N19XClientMessageEvent4DOT_71E(cty.Union):
    pass
N19XClientMessageEvent4DOT_71E._fields_ = [
    ('b', cty.c_char * 20),
    ('s', cty.c_short * 10),
    ('l', cty.c_long * 5),
]

# /usr/include/X11/Xlib.h 921
class XClientMessageEvent(cty.Structure):
    pass
XClientMessageEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('message_type', Atom),
    ('format', cty.c_int),
    ('data', N19XClientMessageEvent4DOT_71E),
]

# /usr/include/X11/Xlib.h 933
class XMappingEvent(cty.Structure):
    pass
XMappingEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('request', cty.c_int),
    ('first_keycode', cty.c_int),
    ('count', cty.c_int),
]

# /usr/include/X11/Xlib.h 943
class XErrorEvent(cty.Structure):
    pass
XErrorEvent._fields_ = [
    ('type', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('resourceid', XID),
    ('serial', cty.c_ulong),
    ('error_code', cty.c_ubyte),
    ('request_code', cty.c_ubyte),
    ('minor_code', cty.c_ubyte),
]

# /usr/include/X11/Xlib.h 951
class XAnyEvent(cty.Structure):
    pass
XAnyEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
]

# /usr/include/X11/Xlib.h 967
class XGenericEvent(cty.Structure):
    pass
XGenericEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('extension', cty.c_int),
    ('evtype', cty.c_int),
]

# /usr/include/X11/Xlib.h 978
class XGenericEventCookie(cty.Structure):
    pass
XGenericEventCookie._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('extension', cty.c_int),
    ('evtype', cty.c_int),
    ('cookie', cty.c_uint),
    ('data', cty.c_void_p),
]

# /usr/include/X11/Xlib.h 984
class _XEvent(cty.Union):
    pass
_XEvent._fields_ = [
    ('type', cty.c_int),
    ('xany', XAnyEvent),
    ('xkey', XKeyEvent),
    ('xbutton', XButtonEvent),
    ('xmotion', XMotionEvent),
    ('xcrossing', XCrossingEvent),
    ('xfocus', XFocusChangeEvent),
    ('xexpose', XExposeEvent),
    ('xgraphicsexpose', XGraphicsExposeEvent),
    ('xnoexpose', XNoExposeEvent),
    ('xvisibility', XVisibilityEvent),
    ('xcreatewindow', XCreateWindowEvent),
    ('xdestroywindow', XDestroyWindowEvent),
    ('xunmap', XUnmapEvent),
    ('xmap', XMapEvent),
    ('xmaprequest', XMapRequestEvent),
    ('xreparent', XReparentEvent),
    ('xconfigure', XConfigureEvent),
    ('xgravity', XGravityEvent),
    ('xresizerequest', XResizeRequestEvent),
    ('xconfigurerequest', XConfigureRequestEvent),
    ('xcirculate', XCirculateEvent),
    ('xcirculaterequest', XCirculateRequestEvent),
    ('xproperty', XPropertyEvent),
    ('xselectionclear', XSelectionClearEvent),
    ('xselectionrequest', XSelectionRequestEvent),
    ('xselection', XSelectionEvent),
    ('xcolormap', XColormapEvent),
    ('xclient', XClientMessageEvent),
    ('xmapping', XMappingEvent),
    ('xerror', XErrorEvent),
    ('xkeymap', XKeymapEvent),
    ('xgeneric', XGenericEvent),
    ('xcookie', XGenericEventCookie),
    ('pad', cty.c_long * 24),
]
XEvent = _XEvent

