#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" Data, constants and variables to be used with xforms-python.
"""

#    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
#    e-mail: <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared flobject libraries   #
# ############################################# #

# Using a hack (fake class) to allow docstrings for variables,
# to be used with pydoc

import ctypes as cty


# /usr/include/X11/Xdefs.h
XID = cty.c_ulong
Window = XID    # cty.c_ulong
Pixmap = XID    # cty.c_ulong
Cursor = XID    # cty.c_ulong


########################################
# forms.h (Basic.h)
#  Basic definitions and limits.
#  Window system independent prototypes
#  Modify with care
########################################

# Some general constants
FL_ON = 1
FL_OK = 1
FL_VALID = 1
FL_PREEMPT = 1
FL_AUTO = 2
FL_WHEN_NEEDED = FL_AUTO    # 2
FL_OFF = 0
FL_CANCEL = 0
FL_INVALID = 0
# WM_DELETE_WINDOW callback return
FL_IGNORE = -1


# my add - list of possible values --LK
# used by input and browser
SCROLLBARVAL_list = [FL_AUTO, FL_ON, FL_OFF]


# max directory length  FL_PATH_MAX, PATH_MAX
# minimum value to enhance OS compatibility (for linux 4096) --LK
FL_PATH_MAX = 1024


# The screen coordinate unit, FL_Coord, must be of signed type.
FL_Coord = cty.c_int

FL_COLOR = cty.c_ulong

# Coordinates can be in pixels, milli-meters or points (1/72inch)
# values for enumeration 'FL_COORD_UNIT'
FL_COORD_UNIT = cty.c_int  # enum
FL_COORD_PIXEL = 0      # default, Pixel
FL_COORD_MM = 1         # milli-meter
FL_COORD_POINT = 2      # point
FL_COORD_centiMM = 3    # one hundredth of a mm
FL_COORD_centiPOINT = 4    # one hundredth of a point

class admitted_values_for_COORD_UNIT(object):
    """Coordinates unit
    
    Admitted values
    ---------------
        FL_COORD_PIXEL : pixel
            Screen coordinate units in pixel (default)
        FL_COORD_MM : millimeters
            Screen coordinate units in millimeters
        FL_COORD_POINT : point
            Screen coordinate units in points (1/72 inch)
        FL_COORD_centiMM : one hundredth of a mm
            Screen coordinate units in centi-millimeters
        FL_COORD_centiPOINT : one hundredth of a point
            Screen coordinate units in centi-points, i.e.
            1/100 of a point
    """
    pass

# my add, list of possible values --LK
COORDUNIT_list = [FL_COORD_PIXEL, FL_COORD_MM, FL_COORD_POINT,
                  FL_COORD_centiMM, FL_COORD_centiPOINT]


# All flobject classes.
# values for enumeration 'FL_CLASS'
FL_CLASS = cty.c_int  # enum
FL_INVALID_CLASS = 0
FL_BUTTON = 1
FL_LIGHTBUTTON = 2
FL_ROUNDBUTTON = 3
FL_ROUND3DBUTTON = 4
FL_CHECKBUTTON = 5
FL_BITMAPBUTTON = 6
FL_PIXMAPBUTTON = 7
FL_BITMAP = 8
FL_PIXMAP = 9
FL_BOX = 10
FL_TEXT = 11
FL_MENU = 12
FL_CHART = 13
FL_CHOICE = 14
FL_COUNTER = 15
FL_SLIDER = 16
FL_VALSLIDER = 17
FL_INPUT = 18
FL_BROWSER = 19
FL_DIAL = 20
FL_TIMER = 21
FL_CLOCK = 22
FL_POSITIONER = 23
FL_FREE = 24
FL_XYPLOT = 25
FL_FRAME = 26
FL_LABELFRAME = 27
FL_CANVAS = 28
FL_GLCANVAS = 29
FL_TABFOLDER = 30
FL_SCROLLBAR = 31
FL_SCROLLBUTTON = 32
FL_MENUBAR = 33
#FL_TEXTBOX placeholder (internal)
FL_LABELBUTTON = 35
FL_COMBOBOX = 36
FL_IMAGECANVAS = 37
FL_THUMBWHEEL = 38
FL_COLORWHEEL = 39
FL_FORMBROWSER = 40
FL_SELECT = 41
FL_NMENU = 42
FL_SPINNER = 43
FL_TBOX = 44
FL_CLASS_END = 45           # sentinel

class admitted_values_for_FL_CLASS(object):
    """Object category
    
    Admitted values
    ---------------
        FL_BUTTON
            button flobject class
        FL_LIGHTBUTTON
            light button flobject class
        FL_ROUNDBUTTON
            round button flobject class
        FL_ROUND3DBUTTON
            round 3D button flobject class
        FL_CHECKBUTTON
            check button flobject class
        FL_BITMAPBUTTON
            bitmap button flobject class
        FL_PIXMAPBUTTON
            pixmap button flobject class
        FL_BITMAP
            bitmap flobject class
        FL_PIXMAP
            pixmap flobject class
        FL_BOX
            box flobject class
        FL_TEXT
            text flobject class
        FL_MENU
            menu flobject class
        FL_CHART
            chart flobject class
        FL_CHOICE
            choice flobject class
        FL_COUNTER
            counter flobject class
        FL_SLIDER
            slider flobject class
        FL_VALSLIDER
            valslider flobject class
        FL_INPUT
            input flobject class
        FL_BROWSER
            browser flobject class
        FL_DIAL
            dial flobject class
        FL_TIMER
            timer flobject class
        FL_CLOCK
            clock flobject class
        FL_POSITIONER
            positioner flobject class
        FL_FREE
            free flobject class
        FL_XYPLOT
            xyplot flobject class
        FL_FRAME
            frame flobject class
        FL_LABELFRAME
            labelframe flobject class
        FL_CANVAS
            canvas flobject class
        FL_GLCANVAS
            glcanvas flobject class
        FL_TABFOLDER
            tabfolder flobject class
        FL_SCROLLBAR
            scrollbar flobject class
        FL_SCROLLBUTTON
            scrollbutton flobject class
        FL_MENUBAR
            menubar flobject class
        FL_LABELBUTTON
            labelbutton flobject class
        FL_COMBOBOX
            combobox flobject class
        FL_IMAGECANVAS
            imagecanvas flobject class
        FL_THUMBWHEEL
            thumbwheel flobject class
        FL_COLORWHEEL
            colorwheel flobject class
        FL_FORMBROWSER
            formbrowser flobject class
        FL_SELECT
            select flobject class
        FL_NMENU
            nmenu flobject class
        FL_SPINNER
            spinner flobject class
        FL_TBOX
            textbox flobject class
    """
    pass

# my add, list of possible values --LK
OBJCLASS_list = [FL_BUTTON, FL_LIGHTBUTTON, FL_ROUNDBUTTON, FL_ROUND3DBUTTON,
                 FL_CHECKBUTTON, FL_BITMAPBUTTON, FL_PIXMAPBUTTON, FL_BITMAP,
                 FL_PIXMAP, FL_BOX, FL_TEXT, FL_MENU, FL_CHART, FL_CHOICE,
                 FL_COUNTER, FL_SLIDER, FL_VALSLIDER, FL_INPUT, FL_BROWSER,
                 FL_DIAL, FL_TIMER, FL_CLOCK, FL_POSITIONER, FL_FREE,
                 FL_XYPLOT, FL_FRAME, FL_LABELFRAME, FL_CANVAS, FL_GLCANVAS,
                 FL_TABFOLDER, FL_SCROLLBAR, FL_SCROLLBUTTON, FL_MENUBAR,
                 FL_LABELBUTTON, FL_COMBOBOX, FL_IMAGECANVAS,
                 FL_THUMBWHEEL, FL_COLORWHEEL, FL_FORMBROWSER, FL_SELECT,
                 FL_NMENU, FL_SPINNER, FL_TBOX]

FL_BEGIN_GROUP = 10000
FL_END_GROUP = 20000

FL_USER_CLASS_START = 1001      # min. user class value
FL_USER_CLASS_END = 9999        # max. user class value


FL_MAX_BW = 10      # maximum border width (in pixel)

# how to display a form onto screen
# values for enumeration 'FL_PLACE'
FL_PLACE = cty.c_int    # enum
FL_PLACE_FREE = 0       # size remain resizable
FL_PLACE_MOUSE = 1      # mouse centered on form
FL_PLACE_CENTER = 2     # center of the screen
FL_PLACE_POSITION = 4   # specific position
FL_PLACE_SIZE = 8       # specific size
FL_PLACE_GEOMETRY = 16  # specific size and position
FL_PLACE_ASPECT =  32   # keep aspect ratio
FL_PLACE_FULLSCREEN = 64        # scale to fit to screen
FL_PLACE_HOTSPOT = 128          # so mouse fall on (x,y)
FL_PLACE_ICONIC = 256           # start in iconified form
# modifiers
FL_FREE_SIZE = (1<<14)          # 16384
# TODO: verify if it can still be used now
FL_FIX_SIZE  = (1<<15)          # seems to be useless, but some programs
                                # seem to rely on it...

FL_PLACE_FREE_CENTER = (FL_PLACE_CENTER | FL_FREE_SIZE)
FL_PLACE_CENTERFREE = (FL_PLACE_CENTER | FL_FREE_SIZE)

class admitted_values_for_FL_PLACE(object):
    """how to display a form onto screen
    
    Admitted values
    ---------------
        FL_PLACE_FREE
            Both the position and size are completely free. The
            initial size used is the designed size. Initial position, if
            set via fl_set_form_position(), will be used otherwise
            interactive positioning may be possible if the window manager
            allows it.
        FL_PLACE_MOUSE
            The form is placed centered below the mouse. Interactive resizing
            will not be allowed unless this option is accompanied by
            FL_FREE_SIZE as in FL_PLACE_MOUSE|FL_FREE_SIZE
        FL_PLACE_CENTER
            The form is placed in the center of the screen. If FL_FREE_SIZE
            is also specified, interactive resizing will be allowed.
        FL_PLACE_POSITION
            Initial position used will be the one set via
            fl_set_form_position(). Interactive resizing is possible.
        FL_PLACE_SIZE
            The user can control the position but the size is fixed.
            Interactive resizing is not allowed once the form becomes visible.
        FL_PLACE_GEOMETRY
            Place at the latest position and size (see also below) or the
            geometry set via fl_set_form_geometry() etc. A form so shown will
            have a fixed size and interactive resizing is not allowed.
        FL_PLACE_ASPECT
            Allows interactive resizing but any new size will have the aspect
            ratio as that of the initial size.
        FL_PLACE_FULLSCREEN
            The form is scaled to cover the full screen. If FL_FREE_SIZE is
            also specified, interative resizing will be allowed.
        FL_PLACE_HOTSPOT
            The form is so placed that mouse is on the "hotspot". If
            FL_FREE_SIZE is also specified, interactive resizing will be
            allowed.
        FL_PLACE_ICONIC
            The form is shown initially iconified. The size and location used
            are the window manager's default.
        FL_FREE_SIZE
            Allows resizing (modifier).
        FL_FIX_SIZE
            seems to be useless, but some programs seem to rely on it..
            TODO: verify if it can still be used now
        FL_PLACE_FREE_CENTER
            Same as FL_PLACE_CENTER | FL_FREE_SIZE, i.e., place the form at
            the center of the screen and allow resizing.
        FL_PLACE_CENTERFREE
            Same as FL_PLACE_CENTER | FL_FREE_SIZE, i.e., place the form at
            the center of the screen and allow resizing.
    """
    pass

# my add, list of possible values --LK
# single values, or bitwise OR-ed with FL_FREE_SIZE (only if it makes sense)
PLACE_list = [FL_PLACE_FREE, FL_PLACE_MOUSE, FL_PLACE_CENTER,
        FL_PLACE_POSITION, FL_PLACE_SIZE, FL_PLACE_GEOMETRY,
        FL_PLACE_ASPECT, FL_PLACE_FULLSCREEN, FL_PLACE_HOTSPOT,
        FL_PLACE_ICONIC, FL_FREE_SIZE, FL_PLACE_FREE_CENTER,
        FL_PLACE_CENTERFREE, FL_PLACE_MOUSE | FL_FREE_SIZE,
        FL_PLACE_FULLSCREEN | FL_FREE_SIZE, FL_PLACE_HOTSPOT | FL_FREE_SIZE]


# Window manager decoration request and forms attributes
# values for unnamed enumeration
FL_FULLBORDER = 1       # normal
FL_TRANSIENT = 2        # set TRANSIENT_FOR property
FL_NOBORDER = 3         # use override_redirect to suppress decoration.

class admitted_values_for_BORDER(object):
    """Window manager decoration request and forms attributes
    
    Admitted values
    ---------------
        FL_FULLBORDER
            Draw full border with title (normal)
        FL_TRANSIENT
            Draw borders with possibly less decoration (depends on the
            window managers behaviour). You might not be able to iconify
            a form under some WMs.
        FL_NOBORDER
            Draw no border at all. You cannot iconify a form with no borders
    """
    pass

# my add, list of possible values --LK
DECORATION_list = [FL_FULLBORDER, FL_TRANSIENT, FL_NOBORDER]


# All box types
# values for enumeration 'FL_BOX_TYPE'
FL_BOX_TYPE = cty.c_int         # enum
FL_NO_BOX = 0
FL_UP_BOX = 1
FL_DOWN_BOX = 2
FL_BORDER_BOX = 3
FL_SHADOW_BOX = 4
FL_FRAME_BOX = 5
FL_ROUNDED_BOX = 6
FL_EMBOSSED_BOX = 7
FL_FLAT_BOX = 8
FL_RFLAT_BOX = 9
FL_RSHADOW_BOX = 10
FL_OVAL_BOX = 11
FL_ROUNDED3D_UPBOX = 12
FL_ROUNDED3D_DOWNBOX = 13
FL_OVAL3D_UPBOX = 14
FL_OVAL3D_DOWNBOX = 15
FL_OVAL3D_FRAMEBOX = 16
FL_OVAL3D_EMBOSSEDBOX = 17
# FL_TOPTAB_UPBOX placeholder (internal)
# FL_SELECTED_TOPTAB_UPBOX placeholder (internal)
# FL_BOTTOMTAB_UPBOX placeholder (internal)
# FL_SELECTED_BOTTOMTAB_UPBOX placeholder (internal)

FL_MAX_BOX_STYLES = 23                # sentinel

class admitted_values_for_BOX_TYPE(object):
    """Box types
    
    Admitted values
    ---------------
        FL_NO_BOX
            No box at all (it is transparent), just a label
        FL_UP_BOX
            A box that comes out of the screen
        FL_DOWN_BOX
            A box that goes down into the screen
        FL_BORDER_BOX
            A flat box with a border
        FL_SHADOW_BOX
            A flat box with a shadow
        FL_FRAME_BOX
            A flat box with an engraved frame
        FL_ROUNDED_BOX
            A rounded box
        FL_EMBOSSED_BOX
            A flat box with an embossed frame
        FL_FLAT_BOX
            A flat box without a border (normally invisible unless
            given a different color than the surroundings)
        FL_RFLAT_BOX
            A rounded box without a border (normally invisible
            unless given a different color than the surroundings)
        FL_RSHADOW_BOX
            A rounded box with a shadow
        FL_OVAL_BOX
            A box shaped like an ellipse
        FL_ROUNDED3D_UPBOX
            A rounded box coming out of the screen
        FL_ROUNDED3D_DOWNBOX
            A rounded box going into the screen
        FL_OVAL3D_UPBOX
            An oval box coming out of the screen
        FL_OVAL3D_DOWNBOX
            An oval box going into the screen
        FL_OVAL3D_FRAMEBOX
            An oval box with an engraved frame
        FL_OVAL3D_EMBOSSEDBOX
            An oval box with an embossed frame
    """

# my add, list of possible values --LK
BOXTYPE_list = [FL_NO_BOX, FL_UP_BOX, FL_DOWN_BOX, FL_BORDER_BOX, \
                FL_SHADOW_BOX, FL_FRAME_BOX, FL_ROUNDED_BOX, \
                FL_EMBOSSED_BOX, FL_FLAT_BOX, FL_RFLAT_BOX, FL_RSHADOW_BOX, \
                FL_OVAL_BOX, FL_ROUNDED3D_UPBOX, FL_ROUNDED3D_DOWNBOX, \
                FL_OVAL3D_UPBOX, FL_OVAL3D_DOWNBOX, FL_OVAL3D_FRAMEBOX, \
                FL_OVAL3D_EMBOSSEDBOX]


# How to place text relative to a box
# values for enumeration 'FL_ALIGN'
FL_ALIGN = cty.c_int            # enum
FL_ALIGN_CENTER = 0
FL_ALIGN_TOP = 1
FL_ALIGN_BOTTOM = 2
FL_ALIGN_LEFT = 4
FL_ALIGN_RIGHT = 8
FL_ALIGN_LEFT_TOP = (FL_ALIGN_TOP|FL_ALIGN_LEFT)
FL_ALIGN_RIGHT_TOP = (FL_ALIGN_TOP|FL_ALIGN_RIGHT)
FL_ALIGN_LEFT_BOTTOM = (FL_ALIGN_BOTTOM|FL_ALIGN_LEFT)
FL_ALIGN_RIGHT_BOTTOM = (FL_ALIGN_BOTTOM|FL_ALIGN_RIGHT)
FL_ALIGN_INSIDE = 8192      # (1<<13)
FL_ALIGN_VERT = 16384       # (1<<14)  not functional yet
# FL_ALIGN_TOP_LEFT placeholder (backwards)
# FL_ALIGN_TOP_RIGHT placeholder (backwards)
# FL_ALIGN_BOTTOM_LEFT placeholder (backwards)
# FL_ALIGN_BOTTOM_RIGHT placeholder (backwards)

class admitted_values_for_FL_ALIGN(object):
    """How to place text relative to a box.
    
    Admitted values
    ---------------
        FL_ALIGN_CENTER
            In the middle of the box (inside it)
        FL_ALIGN_TOP
            To the top of the box (outside it, if FL_ALIGN_INSIDE
            is not used)
        FL_ALIGN_BOTTOM
            To the bottom of the box (outside it, if FL_ALIGN_INSIDE
            is not used)
        FL_ALIGN_LEFT
            To the left of the box (outside it, if FL_ALIGN_INSIDE
            is not used)
        FL_ALIGN_RIGHT
            To the right of the box (outside it, if FL_ALIGN_INSIDE
            is not used)
        FL_ALIGN_LEFT_TOP
            To the left and top of the box (outside it, if
            FL_ALIGN_INSIDE is not used)
        FL_ALIGN_RIGHT_TOP
            To the right and top of the box (outside it, if
            FL_ALIGN_INSIDE is not used)
        FL_ALIGN_LEFT_BOTTOM
            To the left and bottom of the box (outside it, if
            FL_ALIGN_INSIDE is not used)
        FL_ALIGN_RIGHT_BOTTOM
            To the right and bottom of the box (outside it, if
            FL_ALIGN_INSIDE is not used)
        FL_ALIGN_INSIDE
            places the text inside the box
        FL_ALIGN_VERT
            not functional yet
    """

# my add, list of possible values --LK
# single values, and bitwise OR-ed with FL_ALIGN_INSIDE
ALIGN_list = [FL_ALIGN_CENTER, FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT,
        FL_ALIGN_RIGHT, FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP,
        FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE,
        FL_ALIGN_VERT, FL_ALIGN_TOP|FL_ALIGN_INSIDE,
        FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE, FL_ALIGN_LEFT|FL_ALIGN_INSIDE,
        FL_ALIGN_RIGHT|FL_ALIGN_INSIDE, FL_ALIGN_LEFT_TOP|FL_ALIGN_INSIDE,
        FL_ALIGN_RIGHT_TOP|FL_ALIGN_INSIDE,
        FL_ALIGN_LEFT_BOTTOM|FL_ALIGN_INSIDE,
        FL_ALIGN_RIGHT_BOTTOM|FL_ALIGN_INSIDE]


# Mouse buttons. Do not have to be consecutive
# values for unnamed enumeration
FL_MBUTTON1 = 1
FL_MBUTTON2 = 2
FL_MBUTTON3 = 3
FL_MBUTTON4 = 4
FL_MBUTTON5 = 5

FL_LEFT_MOUSE = FL_MBUTTON1
FL_MIDDLE_MOUSE = FL_MBUTTON2
FL_RIGHT_MOUSE = FL_MBUTTON3
FL_SCROLLUP_MOUSE = FL_MBUTTON4
FL_SCROLLDOWN_MOUSE = FL_MBUTTON5

FL_LEFTMOUSE = FL_LEFT_MOUSE
FL_MIDDLEMOUSE = FL_MIDDLE_MOUSE
FL_RIGHTMOUSE = FL_RIGHT_MOUSE
FL_SCROLLUPMOUSE = FL_SCROLLUP_MOUSE
FL_SCROLLDOWNMOUSE = FL_SCROLLDOWN_MOUSE

class admitted_values_for_MOUSEBTN(object):
    """Mouse buttons
    
    Admitted values
    ---------------
        FL_MBUTTON1 or FL_LEFT_MOUSE
            Left mouse button was pressed
        FL_MBUTTON2 or FL_MIDDLE_MOUSE
            Middle mouse button was pressed
        FL_MBUTTON3 or FL_RIGHT_MOUSE
            Right mouse button was pressed
        FL_MBUTTON4 or FL_SCROLLUP_MOUSE
            Mouse scroll wheel was rotated in up direction
        FL_MBUTTON5 or FL_SCROLLDOWN_MOUSE
            Mouse scroll wheel was rotated in down direction
    """

# my add, list of possible values --LK
MOUSEBTN_list = [FL_MBUTTON1, FL_MBUTTON2, FL_MBUTTON3, FL_MBUTTON4,
                 FL_MBUTTON5, FL_LEFT_MOUSE, FL_MIDDLE_MOUSE, FL_RIGHT_MOUSE,
                 FL_SCROLLUP_MOUSE, FL_SCROLLDOWN_MOUSE, FL_LEFTMOUSE,
                 FL_MIDDLEMOUSE, FL_RIGHTMOUSE, FL_SCROLLUPMOUSE,
                 FL_SCROLLDOWNMOUSE]


# control when to return input, slider and dial etc. object.
FL_RETURN_NONE = 0
FL_RETURN_CHANGED = 1
FL_RETURN_END = 2
FL_RETURN_END_CHANGED = 4
FL_RETURN_SELECTION = 8
FL_RETURN_DESELECTION = 16
FL_RETURN_TRIGGERED = 1024
FL_RETURN_ALWAYS = ~ FL_RETURN_END_CHANGED

class admitted_values_for_RETURN(object):
    """control when to return input, slider and dial etc. object
    
    Admitted values
    ---------------
        FL_RETURN_NONE
            Never notify the application about interactions with this
            flobject (i.e. never return it nor invoke its callback). Note,
            this is not meant for deactivation of a flobject, it will
            still seem to work as normal, it just does not get returned
            to the application nor does its callback get invoked.
        FL_RETURN_CHANGED
            Return or invoke callback whenever an item is selected (this
            is the default).
        FL_RETURN_END
            Return or invoke callback on end of an interaction.
        FL_RETURN_END_CHANGED
            Return or invoke callback if end of interaction and selection
            of an item coincide.
        FL_RETURN_SELECTION
            Return or invoke callback on selection of a line. Please note
            that for FL_MULTI_BROWSER the browser may be returned just once
            for a number of lines having been selected.
        FL_RETURN_DESELECTION
             Return or invoke callback on deselection of a line. This only
             works for FL_MULTI_BROWSER browsers and the browser may be
             returned just once for a number of lines having been deselected.
        FL_RETURN_TRIGGERED
            *todo*
        FL_RETURN_ALWAYS
            Return (or invoke callback) whenever the interaction ends and/or
            an item is selected. It includes all conditions except
            FL_RETURN_END_CHANGED.
    """

# my add, list of possible values --LK
RETURN_list = [FL_RETURN_NONE, FL_RETURN_CHANGED, FL_RETURN_END,
               FL_RETURN_END_CHANGED, FL_RETURN_SELECTION,
               FL_RETURN_DESELECTION, FL_RETURN_TRIGGERED, FL_RETURN_ALWAYS]


# from /usr/include/limits.h, my add --LK
INT_MAX = 2147483647L
INT_MIN = (-INT_MAX - 1)
UINT_MAX = 4294967295


# Some special color indices for FL private colormap.
# It does not matter what the value of each enum is,
# but it must start from 0 and be consecutive.
# values for enumeration 'FL_PD_COL'
FL_PD_COL = cty.c_int           # enum
FL_BLACK = 0
FL_RED = 1
FL_GREEN = 2
FL_YELLOW = 3
FL_BLUE = 4
FL_MAGENTA = 5
FL_CYAN = 6
FL_WHITE = 7
FL_TOMATO = 8
FL_INDIANRED = 9
FL_SLATEBLUE = 10
FL_COL1 = 11
FL_RIGHT_BCOL = 12
FL_BOTTOM_BCOL = 13
FL_TOP_BCOL = 14
FL_LEFT_BCOL = 15
FL_MCOL = 16
FL_INACTIVE = 17
FL_PALEGREEN = 18
FL_DARKGOLD = 19
FL_ORCHID = 20
FL_DARKCYAN = 21
FL_DARKTOMATO = 22
FL_WHEAT = 23
FL_DARKORANGE = 24
FL_DEEPPINK = 25
FL_CHARTREUSE = 26
FL_DARKVIOLET = 27
FL_SPRINGGREEN = 28
FL_DODGERBLUE = 29
FL_LIGHTER_COL1 = 30
FL_DARKER_COL1 = 31
FL_ALICEBLUE = 32
FL_ANTIQUEWHITE = 33
FL_AQUA = 34
FL_AQUAMARINE = 35
FL_AZURE = 36
FL_BEIGE = 37
FL_BISQUE = 38
FL_BLANCHEDALMOND = 39
FL_BLUEVIOLET = 40
FL_BROWN = 41
FL_BURLYWOOD = 42
FL_CADETBLUE = 43
FL_CHOCOLATE = 44
FL_CORAL = 45
FL_CORNFLOWERBLUE = 46
FL_CORNSILK = 47
FL_CRIMSON = 48
FL_DARKBLUE = 49
FL_DARKGOLDENROD = 50
FL_DARKGRAY = 51
FL_DARKGREEN = 52
FL_DARKGREY = 53
FL_DARKKHAKI = 54
FL_DARKMAGENTA = 55
FL_DARKOLIVEGREEN = 56
FL_DARKORCHID = 57
FL_DARKRED = 58
FL_DARKSALMON = 59
FL_DARKSEAGREEN = 60
FL_DARKSLATEBLUE = 61
FL_DARKSLATEGRAY = 62
FL_DARKSLATEGREY = 63
FL_DARKTURQUOISE = 64
FL_DEEPSKYBLUE = 65
FL_DIMGRAY = 66
FL_DIMGREY = 67
FL_FIREBRICK = 68
FL_FLORALWHITE = 69
FL_FORESTGREEN = 70
FL_FUCHSIA = 71
FL_GAINSBORO = 72
FL_GHOSTWHITE = 73
FL_GOLD = 74
FL_GOLDENROD = 75
FL_GRAY = 76
FL_GREENYELLOW = 77
FL_GREY = 78
FL_HONEYDEW = 79
FL_HOTPINK = 80
FL_INDIGO = 81
FL_IVORY = 82
FL_KHAKI = 83
FL_LAVENDER = 84
FL_LAVENDERBLUSH = 85
FL_LAWNGREEN = 86
FL_LEMONCHIFFON = 87
FL_LIGHTBLUE = 88
FL_LIGHTCORAL = 89
FL_LIGHTCYAN = 90
FL_LIGHTGOLDENRODYELLOW = 91
FL_LIGHTGRAY = 92
FL_LIGHTGREEN = 93
FL_LIGHTGREY = 94
FL_LIGHTPINK = 95
FL_LIGHTSALMON = 96
FL_LIGHTSEAGREEN = 97
FL_LIGHTSKYBLUE = 98
FL_LIGHTSLATEGRAY = 99
FL_LIGHTSLATEGREY = 100
FL_LIGHTSTEELBLUE = 101
FL_LIGHTYELLOW = 102
FL_LIME = 103
FL_LIMEGREEN = 104
FL_LINEN = 105
FL_MAROON = 106
FL_MEDIUMAQUAMARINE = 107
FL_MEDIUMBLUE = 108
FL_MEDIUMORCHID = 109
FL_MEDIUMPURPLE = 110
FL_MEDIUMSEAGREEN = 111
FL_MEDIUMSLATEBLUE = 112
FL_MEDIUMSPRINGGREEN = 113
FL_MEDIUMTURQUOISE = 114
FL_MEDIUMVIOLETRED = 115
FL_MIDNIGHTBLUE = 116
FL_MINTCREAM = 117
FL_MISTYROSE = 118
FL_MOCCASIN = 119
FL_NAVAJOWHITE = 120
FL_NAVY = 121
FL_OLDLACE = 122
FL_OLIVE = 123
FL_OLIVEDRAB = 124
FL_ORANGE = 125
FL_ORANGERED = 126
FL_PALEGOLDENROD = 127
FL_PALETURQUOISE = 128
FL_PALEVIOLETRED = 129
FL_PAPAYAWHIP = 130
FL_PEACHPUFF = 131
FL_PERU = 132
FL_PINK = 133
FL_PLUM = 134
FL_POWDERBLUE = 135
FL_PURPLE = 136
FL_ROSYBROWN = 137
FL_ROYALBLUE = 138
FL_SADDLEBROWN = 139
FL_SALMON = 140
FL_SANDYBROWN = 141
FL_SEAGREEN = 142
FL_SEASHELL = 143
FL_SIENNA = 144
FL_SILVER = 145
FL_SKYBLUE = 146
FL_SLATEGRAY = 147
FL_SLATEGREY = 148
FL_SNOW = 149
FL_STEELBLUE = 150
FL_TAN = 151
FL_TEAL = 152
FL_THISTLE = 153
FL_TURQUOISE = 154
FL_VIOLET = 155
FL_WHITESMOKE = 156
FL_YELLOWGREEN = 157
FL_FREE_COL1 = 256
FL_FREE_COL2 = 257
FL_FREE_COL3 = 258
FL_FREE_COL4 = 259
FL_FREE_COL5 = 260
FL_FREE_COL6 = 261
FL_FREE_COL7 = 262
FL_FREE_COL8 = 263
FL_FREE_COL9 = 264
FL_FREE_COL10 = 265
FL_FREE_COL11 = 266
FL_FREE_COL12 = 267
FL_FREE_COL13 = 268
FL_FREE_COL14 = 269
FL_FREE_COL15 = 270
FL_FREE_COL16 = 271
FL_NOCOLOR = INT_MAX

FL_BUILT_IN_COLS = FL_YELLOWGREEN + 1
FL_INACTIVE_COL = FL_INACTIVE

# Some aliases for a number of colors.
FL_GRAY16 = FL_RIGHT_BCOL
FL_GRAY35 = FL_BOTTOM_BCOL
FL_GRAY80 = FL_TOP_BCOL
FL_GRAY90 = FL_LEFT_BCOL
FL_GRAY63 = FL_COL1
FL_GRAY75 = FL_MCOL
FL_LCOL = FL_BLACK
FL_NoColor = FL_NOCOLOR

# FL_DOGERBLUE placeholder (backwards)

class admitted_values_for_FL_PD_COL(object):
    """Some special color indices for FL private colormap
    
    Admitted values
    ---------------
        FL_BLACK or FL_LCOL : RGB triple (0,0,0)
        FL_RED : RGB triple (255,0,0)
        FL_GREEN : RGB triple (0,255,0)
        FL_YELLOW : RGB triple (255,255,0)
        FL_BLUE : RGB triple (0,0,255)
        FL_MAGENTA : RGB triple (255,0,255)
        FL_CYAN : RGB triple (0,255,255)
        FL_WHITE : RGB triple (255,255,255)
        FL_TOMATO : RGB triple (255,99,71)
        FL_INDIANRED : RGB triple (198,113,113)
        FL_SLATEBLUE : RGB triple (113,113,198)
        FL_COL1 or FL_GRAY63 : RGB triple (173,173,173)
        FL_RIGHT_BCOL or FL_GRAY16 : RGB triple (41,41,41)
        FL_BOTTOM_BCOL or FL_GRAY35 : RGB triple (89,89,89)
        FL_TOP_BCOL or FL_GRAY80 : RGB triple (204,204,204)
        FL_LEFT_BCOL or FL_GRAY90 : RGB triple (222,222,222)
        FL_MCOL or FL_GRAY75 : RGB triple (191,191,191)
        FL_INACTIVE or FL_INACTIVE_COL : RGB triple (110,110,110)
        FL_PALEGREEN : RGB triple (113,198,113)
        FL_DARKGOLD : RGB triple (205,149,10)
        FL_ORCHID : RGB triple (205,105,201)
        FL_DARKCYAN : RGB triple (40,170,175)
        FL_DARKTOMATO : RGB triple (139,54,38)
        FL_WHEAT : RGB triple (255,231,155)
        FL_DARKORANGE : RGB triple (255,128,0)
        FL_DEEPPINK : RGB triple (255,0,128)
        FL_CHARTREUSE : RGB triple (128,255,0)
        FL_DARKVIOLET : RGB triple (128,0,255)
        FL_SPRINGGREEN : RGB triple (0,255,128)
        FL_DODGERBLUE : RGB triple (0,128,255)
        FL_LIGHTER_COL1 : RGB triple (204,204,204)
        FL_DARKER_COL1 : RGB triple (161,161,161)
        FL_ALICEBLUE : RGB triple (240,248,255)
        FL_ANTIQUEWHITE : RGB triple (250,235,215)
        FL_AQUA : RGB triple (0,255,255)
        FL_AQUAMARINE : RGB triple (127,255,212)
        FL_AZURE : RGB triple (240,255,255)
        FL_BEIGE : RGB triple (245,245,220)
        FL_BISQUE : RGB triple (255,228,196)
        FL_BLANCHEDALMOND : RGB triple (255,235,205)
        FL_BLUEVIOLET : RGB triple (138,43,226)
        FL_BROWN : RGB triple (165,42,42)
        FL_BURLYWOOD : RGB triple (222,184,135)
        FL_CADETBLUE : RGB triple (95,158,160)
        FL_CHOCOLATE : RGB triple (210,105,30)
        FL_CORAL : RGB triple (255,127,80)
        FL_CORNFLOWERBLUE : RGB triple (100,149,237)
        FL_CORNSILK : RGB triple (255,248,220)
        FL_CRIMSON : RGB triple (220,20,60)
        FL_DARKBLUE : RGB triple (0,0,139)
        FL_DARKGOLDENROD : RGB triple (184,134,11)
        FL_DARKGRAY : RGB triple (169,169,169)
        FL_DARKGREEN : RGB triple (0,100,0)
        FL_DARKGREY : RGB triple (169,169,169)
        FL_DARKKHAKI : RGB triple (189,183,107)
        FL_DARKMAGENTA : RGB triple (139,0,139)
        FL_DARKOLIVEGREEN : RGB triple (85,107,47)
        FL_DARKORCHID : RGB triple (153,50,204)
        FL_DARKRED : RGB triple (139,0,0)
        FL_DARKSALMON : RGB triple (233,150,122)
        FL_DARKSEAGREEN : RGB triple (143,188,143)
        FL_DARKSLATEBLUE : RGB triple (72,61,139)
        FL_DARKSLATEGRAY or FL_DARKSLATEGREY : RGB triple (47,79,79)
        FL_DARKTURQUOISE : RGB triple (0,206,209)
        FL_DEEPSKYBLUE : RGB triple (0,191,255)
        FL_DIMGRAY or FL_DIMGREY : RGB triple (105,105,105)
        FL_FIREBRICK : RGB triple (178,34,34)
        FL_FLORALWHITE : RGB triple (255,250,240)
        FL_FORESTGREEN : RGB triple (34,139,34)
        FL_FUCHSIA : RGB triple (255,0,255)
        FL_GAINSBORO : RGB triple (220,220,220)
        FL_GHOSTWHITE : RGB triple (248,248,255)
        FL_GOLD : RGB triple (255,215,0)
        FL_GOLDENROD : RGB triple (218,165,32)
        FL_GRAY or FL_GREY : RGB triple (128,128,128)
        FL_GREENYELLOW : RGB triple (173,255,47)
        FL_HONEYDEW : RGB triple (240,255,240)
        FL_HOTPINK : RGB triple (255,105,180)
        FL_INDIGO : RGB triple (75,0,130)
        FL_IVORY : RGB triple (255,255,240)
        FL_KHAKI : RGB triple (240,230,140)
        FL_LAVENDER : RGB triple (230,230,250)
        FL_LAVENDERBLUSH : RGB triple (255,240,245)
        FL_LAWNGREEN : RGB triple (124,252,0)
        FL_LEMONCHIFFON : RGB triple (255,250,205)
        FL_LIGHTBLUE : RGB triple (173,216,230)
        FL_LIGHTCORAL : RGB triple (240,128,128)
        FL_LIGHTCYAN : RGB triple (224,255,255)
        FL_LIGHTGOLDENRODYELLOW : RGB triple (250,250,210)
        FL_LIGHTGRAY : RGB triple (211,211,211)
        FL_LIGHTGREEN : RGB triple (144,238,144)
        FL_LIGHTGREY : RGB triple (211,211,211)
        FL_LIGHTPINK : RGB triple (255,182,193)
        FL_LIGHTSALMON : RGB triple (255,160,122)
        FL_LIGHTSEAGREEN : RGB triple (32,178,170)
        FL_LIGHTSKYBLUE : RGB triple (135,206,250)
        FL_LIGHTSLATEGRAY or FL_LIGHTSLATEGREY : RGB triple (119,136,153)
        FL_LIGHTSTEELBLUE : RGB triple (176,196,222)
        FL_LIGHTYELLOW : RGB triple (255,255,224)
        FL_LIME : RGB triple (0,255,0)
        FL_LIMEGREEN : RGB triple (50,205,50)
        FL_LINEN : RGB triple (250,240,230)
        FL_MAROON : RGB triple (128,0,0)
        FL_MEDIUMAQUAMARINE : RGB triple (102,205,170)
        FL_MEDIUMBLUE : RGB triple (0,0,205)
        FL_MEDIUMORCHID : RGB triple (186,85,211)
        FL_MEDIUMPURPLE : RGB triple (147,112,219)
        FL_MEDIUMSEAGREEN : RGB triple (60,179,113)
        FL_MEDIUMSLATEBLUE : RGB triple (123,104,238)
        FL_MEDIUMSPRINGGREEN : RGB triple (0,250,154)
        FL_MEDIUMTURQUOISE : RGB triple (72,209,204)
        FL_MEDIUMVIOLETRED : RGB triple (199,21,133)
        FL_MIDNIGHTBLUE : RGB triple (25,25,112)
        FL_MINTCREAM : RGB triple (245,255,250)
        FL_MISTYROSE : RGB triple (255,228,225)
        FL_MOCCASIN : RGB triple (255,228,181)
        FL_NAVAJOWHITE : RGB triple (255,222,173)
        FL_NAVY : RGB triple (0,0,128)
        FL_OLDLACE : RGB triple (253,245,230)
        FL_OLIVE : RGB triple (128,128,0)
        FL_OLIVEDRAB : RGB triple (107,142,35)
        FL_ORANGE : RGB triple (255,165,0)
        FL_ORANGERED : RGB triple (255,69,0)
        FL_PALEGOLDENROD : RGB triple (238,232,170)
        FL_PALETURQUOISE : RGB triple (175,238,238)
        FL_PALEVIOLETRED : RGB triple (219,112,147)
        FL_PAPAYAWHIP : RGB triple (255,239,213)
        FL_PEACHPUFF : RGB triple (255,218,185)
        FL_PERU : RGB triple (205,133,63)
        FL_PINK : RGB triple (255,192,203)
        FL_PLUM : RGB triple (221,160,221)
        FL_POWDERBLUE : RGB triple (176,224,230)
        FL_PURPLE : RGB triple (128,0,128)
        FL_ROSYBROWN : RGB triple (188,143,143)
        FL_ROYALBLUE : RGB triple (65,105,225)
        FL_SADDLEBROWN : RGB triple (139,69,19)
        FL_SALMON : RGB triple (250,128,114)
        FL_SANDYBROWN : RGB triple (244,164,96)
        FL_SEAGREEN : RGB triple (46,139,87)
        FL_SEASHELL : RGB triple (255,245,238)
        FL_SIENNA : RGB triple (160,82,45)
        FL_SILVER : RGB triple (192,192,192)
        FL_SKYBLUE : RGB triple (135,206,235)
        FL_SLATEGRAY or FL_SLATEGREY : RGB triple (112,128,144)
        FL_SNOW : RGB triple (255,250,250)
        FL_STEELBLUE : RGB triple (70,130,180)
        FL_TAN : RGB triple (210,180,140)
        FL_TEAL : RGB triple (0,128,128)
        FL_THISTLE : RGB triple (216,191,216)
        FL_TURQUOISE : RGB triple (64,224,208)
        FL_VIOLET : RGB triple (238,130,238)
        FL_WHITESMOKE : RGB triple (245,245,245)
        FL_YELLOWGREEN : RGB triple (154,205,50)
        FL_FREE_COL1 : RGB triple (0,0,0)
        FL_FREE_COL2 : RGB triple (0,0,0)
        FL_FREE_COL3 : RGB triple (0,0,0)
        FL_FREE_COL4 : RGB triple (0,0,0)
        FL_FREE_COL5 : RGB triple (0,0,0)
        FL_FREE_COL6 : RGB triple (0,0,0)
        FL_FREE_COL7 : RGB triple (0,0,0)
        FL_FREE_COL8 : RGB triple (0,0,0)
        FL_FREE_COL9 : RGB triple (0,0,0)
        FL_FREE_COL10 : RGB triple (0,0,0)
        FL_FREE_COL11 : RGB triple (0,0,0)
        FL_FREE_COL12 : RGB triple (0,0,0)
        FL_FREE_COL13 : RGB triple (0,0,0)
        FL_FREE_COL14 : RGB triple (0,0,0)
        FL_FREE_COL15 : RGB triple (0,0,0)
        FL_FREE_COL16 : RGB triple (0,0,0)
        FL_NOCOLOR or FL_NoColor : No color
    """

# my add, list of (some of) possible values --LK
COLOR_list = [FL_BLACK, FL_RED, FL_GREEN, FL_YELLOW, FL_BLUE, FL_MAGENTA,
        FL_CYAN, FL_WHITE, FL_TOMATO, FL_INDIANRED, FL_SLATEBLUE, FL_COL1,
        FL_RIGHT_BCOL, FL_BOTTOM_BCOL, FL_TOP_BCOL, FL_LEFT_BCOL, FL_MCOL,
        FL_INACTIVE, FL_PALEGREEN, FL_DARKGOLD, FL_ORCHID, FL_DARKCYAN,
        FL_DARKTOMATO, FL_WHEAT, FL_DARKORANGE, FL_DEEPPINK, FL_CHARTREUSE,
        FL_DARKVIOLET, FL_SPRINGGREEN, FL_DODGERBLUE, FL_LIGHTER_COL1,
        FL_DARKER_COL1, FL_ALICEBLUE, FL_ANTIQUEWHITE, FL_AQUA, FL_AQUAMARINE,
        FL_AZURE, FL_BEIGE, FL_BISQUE, FL_BLANCHEDALMOND, FL_BLUEVIOLET,
        FL_BROWN, FL_BURLYWOOD, FL_CADETBLUE, FL_CHOCOLATE, FL_CORAL,
        FL_CORNFLOWERBLUE, FL_CORNSILK, FL_CRIMSON, FL_DARKBLUE,
        FL_DARKGOLDENROD, FL_DARKGRAY, FL_DARKGREEN, FL_DARKGREY,
        FL_DARKKHAKI, FL_DARKMAGENTA, FL_DARKOLIVEGREEN, FL_DARKORCHID,
        FL_DARKRED, FL_DARKSALMON, FL_DARKSEAGREEN, FL_DARKSLATEBLUE,
        FL_DARKSLATEGRAY, FL_DARKSLATEGREY, FL_DARKTURQUOISE, FL_DEEPSKYBLUE,
        FL_DIMGRAY, FL_DIMGREY, FL_FIREBRICK, FL_FLORALWHITE, FL_FORESTGREEN,
        FL_FUCHSIA, FL_GAINSBORO, FL_GHOSTWHITE, FL_GOLD, FL_GOLDENROD,
        FL_GRAY, FL_GREENYELLOW, FL_GREY, FL_HONEYDEW, FL_HOTPINK, FL_INDIGO,
        FL_IVORY, FL_KHAKI, FL_LAVENDER, FL_LAVENDERBLUSH, FL_LAWNGREEN,
        FL_LEMONCHIFFON, FL_LIGHTBLUE, FL_LIGHTCORAL, FL_LIGHTCYAN,
        FL_LIGHTGOLDENRODYELLOW, FL_LIGHTGRAY, FL_LIGHTGREEN, FL_LIGHTGREY,
        FL_LIGHTPINK, FL_LIGHTSALMON, FL_LIGHTSEAGREEN, FL_LIGHTSKYBLUE,
        FL_LIGHTSLATEGRAY, FL_LIGHTSLATEGREY, FL_LIGHTSTEELBLUE,
        FL_LIGHTYELLOW, FL_LIME, FL_LIMEGREEN, FL_LINEN, FL_MAROON,
        FL_MEDIUMAQUAMARINE, FL_MEDIUMBLUE, FL_MEDIUMORCHID, FL_MEDIUMPURPLE,
        FL_MEDIUMSEAGREEN, FL_MEDIUMSLATEBLUE, FL_MEDIUMSPRINGGREEN,
        FL_MEDIUMTURQUOISE, FL_MEDIUMVIOLETRED, FL_MIDNIGHTBLUE, FL_MINTCREAM,
        FL_MISTYROSE, FL_MOCCASIN, FL_NAVAJOWHITE, FL_NAVY, FL_OLDLACE,
        FL_OLIVE, FL_OLIVEDRAB, FL_ORANGE, FL_ORANGERED, FL_PALEGOLDENROD,
        FL_PALETURQUOISE, FL_PALEVIOLETRED, FL_PAPAYAWHIP, FL_PEACHPUFF,
        FL_PERU, FL_PINK, FL_PLUM, FL_POWDERBLUE, FL_PURPLE, FL_ROSYBROWN,
        FL_ROYALBLUE, FL_SADDLEBROWN, FL_SALMON, FL_SANDYBROWN, FL_SEAGREEN,
        FL_SEASHELL, FL_SIENNA, FL_SILVER, FL_SKYBLUE, FL_SLATEGRAY,
        FL_SLATEGREY, FL_SNOW, FL_STEELBLUE, FL_TAN, FL_TEAL, FL_THISTLE,
        FL_TURQUOISE, FL_VIOLET, FL_WHITESMOKE, FL_YELLOWGREEN, FL_FREE_COL1,
        FL_FREE_COL2, FL_FREE_COL3, FL_FREE_COL4, FL_FREE_COL5, FL_FREE_COL6,
        FL_FREE_COL7, FL_FREE_COL8, FL_FREE_COL9, FL_FREE_COL10,
        FL_FREE_COL11, FL_FREE_COL12, FL_FREE_COL13, FL_FREE_COL14,
        FL_FREE_COL15, FL_FREE_COL16, FL_NOCOLOR, FL_INACTIVE_COL]


# Events that a form reacts to.
# values for enumeration 'FL_EVENTS'
FL_EVENTS = cty.c_int           # enum
FL_NOEVENT = 0
FL_DRAW = 1
FL_PUSH = 2
FL_RELEASE = 3
FL_ENTER = 4
FL_LEAVE = 5
FL_MOTION = 6
FL_FOCUS = 7
FL_UNFOCUS = 8
FL_KEYPRESS = 9
FL_UPDATE = 10
FL_STEP = 11
FL_SHORTCUT = 12
FL_FREEMEM = 13
FL_OTHER = 14
FL_DRAWLABEL = 15
FL_DBLCLICK = 16
FL_TRPLCLICK = 17
FL_ATTRIB = 18
FL_KEYRELEASE = 19
FL_PS = 20
FL_MOVEORIGIN = 21
FL_RESIZED = 22
# FL_MOVE placeholder (backwards)
# FL_KEYBOARD placeholder (backwards)
# FL_MOUSE placeholder (backwards)

class admitted_values_for_FL_EVENTS(object):
    """Events that a form reacts to.
    
    Admitted values
    ---------------
        FL_NOEVENT
            *todo*
        FL_DRAW
            The flobject has to be (re)drawn. To figure out the actual size
            of the flobject you can use the fields ptr_flobject.contents.x,
            ptr_flobject.contents.y, ptr_flobject.contents.w and ptr_flobject.contents.h.
            Many Xlib drawing routines require a window ID, which you can
            obtain from the flobject pointer using FL_ObjWin(ptr_flobject).
            Some other aspects might also influence the way the flobject has
            to be drawn. E.g., you might want to draw the flobject differently
            when the mouse is on top of it or when the mouse is pressed on
            it. This can be figured out the following way, the field
            ptr_flobject.contents.belowmouse tells you whether the flobject is
            below the mouse. The field ptr_flobject.contents.pushed indicates
            whether the flobject is currently being pushed with the mouse.
            Finally, ptr_flobject.contents.focus indicate whether input focus
            is directed towards this object. Note that drawing of the flobject
            is the full responsibility of the flobject class, including the
            bounding box and the label, which can be found in the field
            ptr_flobject.contents.label. The Forms Library provides a large number
            of routines to help you draw object. One important caution about
            your draw event handling code, none of the high level routines
            (fl_freeze_form(), fl_deactivate_form()) etc. can be used. The
            only routines allowed to be used are (direct) drawing functions
            and flobject internal book keeping routines. Attribute modifying
            routines, such as fl_set_object_color() etc. are not allowed
            (using them can lead to infinite recursions). In addition,
            (re)drawing of other flobjects using fl_redraw_object() while
            handling FL_DRAW will also not work. Due to the way double
            buffering is handled, at the time the FL_DRAW event is passed
            to the handling function (and only then) FL_ObjWin(ptr_flobject) might
            return a pixmap used as the backbuffer (at least if the flobject is
            double buffered). What that means is that FL_ObjWin(ptr_flobject)
            should not be used when a real window is needed. For a real window
            you can change the window's cursor or query the mouse position
            within it. You cannot do either of these with the backbuffer
            pixmap. If there is a need to obtain the real window ID the
            following routine can be used fl_get_real_object_window().
            To summarize, use FL_ObjWin(ptr_flobject) when drawing and use
            fl_get_real_object_window() for cursor or pointer routines.
            This distinction is important only while handling FL_DRAW events,
            FL_ObjWin(obj) should be used anywhere else.
        FL_PUSH
            The user has pushed a mouse button on the flobject. Normally this
            requires some actual action. The number of the mouse button pushed
            is given in the 'key' parameter, having one of FL_*_MOUSE values.
        FL_RELEASE
            The user has released the mouse button. This event is only sent if
            a FL_PUSH event was sent before.
        FL_ENTER
            This event is sent when the mouse has entered the bounding box
            and might require some action. Note also that the field
            ptr_flobject.content.belowmouse in the flobject is being set. If entering
            an flobjects area only changes its appearance, redrawing it normally
            suffices. Do not do this directly! Always redraw the flobject by
            calling fl_redraw_object(). It will send an FL_DRAW event to the
            flobject but also does some other things (like setting window IDs
            and taking care of double buffering etc.).
        FL_LEAVE
            The mouse has left the bounding box. Again, normally a redraw is
            enough (or nothing at all).
        FL_MOTION
            Motion events get sent between FL_ENTER and FL_LEAVE events when
            the mouse position changes on the flobject. The mouse position is
            given as an argument to the handle routine.
        FL_FOCUS
            Input got focussed to this object. This type of event and the
            next two are only sent to flobjects for which the field
            ptr_flobject.contents.input is set to 1 (see below).
        FL_UNFOCUS
            Input is no longer focussed on the flobject.
        FL_KEYPRESS
            A key was pressed. The ASCII value (or KeySym if non-ASCII) is
            passed to the routine via the 'key' argument, modifier keys can
            be retrieved from the state member of the XEvent also passed to
            the function via 'xev'. This event only happens between FL_FOCUS
            and FL_UNFOCUS events. Not all flobjects sent keyboard events, only
            those that have non-zero value in field ptr_flobject.contents.input or
            ptr_flobject.contents.wantkey.
        FL_UPDATE
            for flobjects that need to update something from time to time. Such
            an event, like the FL_STEP event, also gets send about every 50
            msec (but less often under high load) to flobjects while they are
            "pushed", i.e. between receiving a FL_PUSH and a FL_RELEASE event
            if the ptr_flobject.contents.want_update field is set for the flobject.
            Like for the FL_STEP event the handling routine receives a
            synthetic MotionNotify event as the XEvent. This is typically used
            by flobjects that have to perform tasks at regular time intervals
            while they are "pushed" (e.g. counters that need to count up or
            down while the mouse is pushed on one of its buttons).
        FL_STEP
            A FL_STEP event is sent all the time (typically about 20 times
            a second but possibly less often because of system delays and
            other time-consuming tasks) to flobjects for which the field
            ptr_flobject.contents.automatic has been set to a non-zero value.
            The handling routine receives a synthetic MotionNotify event as
            the XEvent. This can be used to make a flobject change appearance
            without user action. Clock and timer flobjects use this type of
            event.
        FL_SHORTCUT
            The user used a keyboard shortcut. The shortcut used is given
            in the parameter key. See below for more on shortcuts.
        FL_FREEMEM
            This event is sent when the flobject is to be freed. All memory
            allocated for the flobject must be freed when this event is
            received.
        FL_OTHER
            property, selection etc. Events other than the above. These
            events currently include ClientMessage, Selection and possibly
            other window manager events. All information about the event
            is contained in 'xev' parameter and 'mx', 'my' may or may not
            reflect the actual position of the mouse.
        FL_DRAWLABEL
            This event typically follows FL_DRAW and indicates that the
            flobject label needs to be (re)drawn. If the flobject in question
            always draws its label inside the bounding box and this is
            taken care of by handing FL_DRAW, you can ignore this event.
        FL_DBLCLICK
            double click. The user has pushed a mouse button twice within
            a certain time limit (FL_CLICK_TIMEOUT), which by default is
            400 msec. This event is sent after two FL_PUSH, FL_RELEASE
            sequence. Note that FL_DBLCLICK is only generated for flobjects
            that have non-zero ptr_flobject.contents.click timeout fields and
            it will not be generated for events from the scroll wheel.
        FL_TRPLCLICK
            triple click. The user has pushed a mouse button three times
            within a certain time window. This event is sent after a
            FL_DBLCLICK, FL_PUSH, FL_RELEASE sequence. Set click timeout
            to none-zero to activate FL_TRPLCLICK.
        FL_ATTRIB
            attribute change *todo*
        FL_KEYRELEASE
            A pressed key is released.
        FL_PS
            dumps a form into EPS
        FL_MOVEORIGIN
            dragging the form across the screen changes its absolute x,y
            coords. Objects that themselves contain forms should ensure
            that they are up to date.
        FL_RESIZED
            the flobject has been resized by scale_form the flobject has been
            resized by scale_form. Tell it that this has happened so that
            it can resize any FL_FORMs that it contains.
    """

# TODO: verify if bitwise OR-ed makes sense here.
# my add, list of possible values --LK
# single values, or ?
EVENTS_list = [FL_DRAW, FL_PUSH, FL_RELEASE, FL_ENTER, FL_LEAVE,
               FL_MOTION, FL_FOCUS, FL_UNFOCUS, FL_KEYPRESS, FL_UPDATE,
               FL_STEP, FL_SHORTCUT, FL_FREEMEM, FL_OTHER, FL_DRAWLABEL,
               FL_DBLCLICK, FL_TRPLCLICK, FL_ATTRIB, FL_KEYRELEASE,
               FL_PS, FL_MOVEORIGIN, FL_RESIZED]


# Resize policies
# values for enumeration 'FL_RESIZE_T'
FL_RESIZE_T = cty.c_int         # enum
FL_RESIZE_NONE = 0
FL_RESIZE_X = 1
FL_RESIZE_Y = 2
FL_RESIZE_ALL = (FL_RESIZE_X | FL_RESIZE_Y)

class admitted_values_for_FL_RESIZE_T(object):
    """Resize policies
    
    Admitted values
    ---------------
        FL_RESIZE_NONE
            Cannot be rescaled/resized
        FL_RESIZE_X
            Can be rescaled on horizontal axis
        FL_RESIZE_Y
            Can be rescaled on vertical axis
        FL_RESIZE_ALL
            Can be rescaled on both axis
    """

# my add, list of possible values --LK
RESIZE_list = [FL_RESIZE_NONE, FL_RESIZE_X, FL_RESIZE_Y, FL_RESIZE_ALL]


# Keyboard focus control
# values for enumeration 'FL_KEY'
FL_KEY = cty.c_int      # enum
FL_KEY_NORMAL  = 1     # normal keys(0-255) - tab +left/right
FL_KEY_TAB     = 2     # normal keys + 4 direction cursor
FL_KEY_SPECIAL = 4     # only needs special keys(>255)
FL_KEY_ALL     = 7     # all keys

FL_ALT_MASK = (1L<<25)      # alt + Key --> FL_ALT_MASK + key
FL_CONTROL_MASK = (1L<<26)
FL_SHIFT_MASK = (1L<<27)

# FL_ALT_VAL placeholder (backwards)

MAX_SHORTCUTS = 8

class admitted_values_for_FL_KEY(object):
    """Keyboard focus control
    
    Admitted values
    ---------------
        FL_KEY_NORMAL
            The flobject receives left and right cursor, <Home> and <End>
            keys plus all normal keys (0-255) except <Tab> <Return>
            (default).
        FL_KEY_TAB
            Object receives the <Tab>, <Return> as well as the <Up> and
            <Down> cursor keys.
        FL_KEY_SPECIAL
            The flobject receives all keys with a KeySym above 255 which
            are not already covered by FL_KEY_NORMAL and FL_KEY_TAB
            (e.g. function keys etc.)
        FL_KEY_ALL
            Object receives all keys.
        FL_ALT_MASK
            ALT combination with a key (value added to a KeySym)
        FL_CONTROL_MASK
            CONTROL combination with a key (value added to a KeySym)
        FL_SHIFT_MASK
            SHIFT combination with a key (value added to a KeySym)
    """

# TODO: verify if bitwise OR-ed makes sense here.
# my add, list of possible values --LK
KEY_list = [FL_KEY_NORMAL, FL_KEY_TAB, FL_KEY_SPECIAL, FL_KEY_ALL,
            FL_ALT_MASK, FL_CONTROL_MASK, FL_SHIFT_MASK]


# FL_PUP_NONE placeholder (deprecated)
# FL_PUP_GREY placeholder (deprecated)
# FL_PUP_BOX placeholder (deprecated)
# FL_PUP_CHECK placeholder (deprecated)
# FL_PUP_RADIO placeholder (deprecated)
# FL_PUP_GRAY placeholder (deprecated)
# FL_PUP_TOGGLE placeholder (backwards and deprecated)
# FL_PUP_INACTIVE placeholder (deprecated)
# my add, list of possible values --LK
# PUP_list placeholder (deprecated)

# FL_PUP_CB placeholder (deprecated)

STRING = cty.c_char_p
WSTRING = cty.c_wchar_p

# class FL_PUP_ENTRY placeholder (deprecated)
# FL_MENU_ENTRY placeholder (deprecated)


# ***** FONTS *****

FL_MAXFONTS = 48        # max number of fonts

# values for enumeration 'FL_TEXT_STYLE'
FL_TEXT_STYLE = cty.c_int       # enum
FL_INVALID_STYLE = -1
FL_NORMAL_STYLE = 0
FL_BOLD_STYLE = 1
FL_ITALIC_STYLE = 2
FL_BOLDITALIC_STYLE = 3
FL_FIXED_STYLE = 4
FL_FIXEDBOLD_STYLE = 5
FL_FIXEDITALIC_STYLE = 6
FL_FIXEDBOLDITALIC_STYLE = 7
FL_TIMES_STYLE = 8
FL_TIMESBOLD_STYLE = 9
FL_TIMESITALIC_STYLE = 10
FL_TIMESBOLDITALIC_STYLE = 11
FL_MISC_STYLE = 12
FL_MISCBOLD_STYLE = 13
FL_MISCITALIC_STYLE = 14
FL_SYMBOL_STYLE = 15
# modifier masks. Need to fit a short
FL_SHADOW_STYLE = 512           #(1<<9)
FL_ENGRAVED_STYLE = 1024        #(1<<10)
FL_EMBOSSED_STYLE = 2048        #(1<<11)

FL_FONT_STYLE = FL_TEXT_STYLE

class admitted_values_for_FL_TEXT_STYLE(object):
    """Text style
    
    Admitted values
    ---------------
        FL_INVALID_STYLE
            style not valid
        FL_NORMAL_STYLE
            Helvetica normal text
        FL_BOLD_STYLE
            Helvetica boldface text
        FL_ITALIC_STYLE
            Helvetica italic text
        FL_BOLDITALIC_STYLE
            Helvetica boldface and italic text
        FL_FIXED_STYLE
            Courier fixed width (good for tables)
        FL_FIXEDBOLD_STYLE
            Courier bold fixed text
        FL_FIXEDITALIC_STYLE
            Courier italic fixed text
        FL_FIXEDBOLDITALIC_STYLE
            Courier boldface and italic fixed text
        FL_TIMES_STYLE
            Times-Roman like normal font
        FL_TIMESBOLD_STYLE
            Times-Roman like boldface text
        FL_TIMESITALIC_STYLE
            Times-Roman like italic text
        FL_TIMESBOLDITALIC_STYLE
            Times-Roman like boldface and italic text
        FL_MISC_STYLE
            Charter normal text
        FL_MISCBOLD_STYLE
            Charter boldface text
        FL_MISCITALIC_STYLE
            Charter italic text
        FL_SYMBOL_STYLE
            Symbol text
        FL_SHADOW_STYLE
            Text casting a shadow (modifier mask)
        FL_ENGRAVED_STYLE
            Text engraved into the form (modifier mask)
        FL_EMBOSSED_STYLE
            Text standing out (modifier mask)
    """

# my add, list of possible values --LK
TEXTSTYLE_list = [FL_INVALID_STYLE, FL_NORMAL_STYLE, FL_BOLD_STYLE,
                  FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                  FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                  FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                  FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                  FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                  FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE,
                  FL_SYMBOL_STYLE, FL_SHADOW_STYLE, FL_ENGRAVED_STYLE,
                  FL_EMBOSSED_STYLE]


# Standard sizes in XForms
FL_TINY_SIZE = 8
FL_SMALL_SIZE = 10
FL_NORMAL_SIZE = 12
FL_MEDIUM_SIZE = 14
FL_LARGE_SIZE = 18
FL_HUGE_SIZE = 24
FL_DEFAULT_SIZE = FL_SMALL_SIZE

class admitted_values_for_FONT_SIZE(object):
    """Standard sizes
    
    Admitted values
    ---------------
        FL_TINY_SIZE
            8 points font size.
        FL_SMALL_SIZE or FL_DEFAULT_SIZE
            10 points font size (default)
        FL_NORMAL_SIZE
            12 points font size
        FL_MEDIUM_SIZE
            14 points font size
        FL_LARGE_SIZE
            18 points font size
        FL_HUGE_SIZE = 24
            24 points font size
    """

# my add, list of (some of) possible values --LK
FONTSIZE_list = [FL_TINY_SIZE, FL_SMALL_SIZE, FL_NORMAL_SIZE, FL_MEDIUM_SIZE,
                 FL_LARGE_SIZE, FL_HUGE_SIZE, FL_DEFAULT_SIZE]

# FL_TINY_FONT placeholder (backwards)
# FL_SMALL_FONT placeholder (backwards)
# FL_NORMAL_FONT placeholder (backwards)
# FL_MEDIUM_FONT placeholder (backwards)
# FL_LARGE_FONT placeholder (backwards)
# FL_HUGE_FONT placeholder (backwards)
# FL_NORMAL_FONT1 placeholder (backwards)
# FL_NORMAL_FONT2 placeholder (backwards)
# FL_DEFAULT_FONT placeholder (backwards)


FL_BOUND_WIDTH = 1     # Border width of boxes, FL_Coord(1)

FL_CLICK_TIMEOUT = 400      # double click interval


# Definition of basic struct that holds a flobject

class FL_FORM_(cty.Structure):
    """FL_FORM class
    
    To access to the data referenced by a pointer to FL_FORM (ptr_flform) you
    need to use "ptr_flform.contents", then one of its attributes' name.
    Nonetheless, whenever possible it is better to use appropriate functions.

    Attributes
    ----------
        fdui : pointer to any type
            for fdesign
        u_vdata : pointer to any type
            for application
        u_cdata : str
            for application
        u_ldata : long
            for application
        label : str
            window title
        window : Window
            X resource ID for form window
        xpos : int
            horizontal position
        ypos : int
            vertical position
        width : int
            width
        height : int
            height
        handle_dec_x : int
            *todo*
        handle_dec_y : int
            *todo*
        hotx : int
            horizontal hot-spot of the form
        hoty : int
            vertical hot-spot of the form
        w_hr : float
            high resolution width (for precise scaling)
        h_hr : float
            high resolution height (for precise scaling)
        first : pointer to FL_OBJECT
            points to the first flobject on the form (list)
        last : pointer to FL_OBJECT
            *todo*
        focusobj : pointer to FL_OBJECT
            points to the flobject on the form that has the input focus
        form_callback : function
            FL_FORMCALLBACKPTR type function
        activate_callback : function
            FL_FORM_ATACTIVATE type function
        deactivate_callback : function
            FL_FORM_ATDEACTIVATE type function
        form_cb_data : pointer to any type
            user data for callback
        activate_data : pointer to any type
            user data for activate callback
        deactivate_data : pointer to any type
            user data for deactivate callback
        key_callback : function
            FL_RAW_CALLBACK type function
        push_callback : function
            FL_RAW_CALLBACK type function
        crossing_callback : function
            FL_RAW_CALLBACK type function
        motion_callback : function
            FL_RAW_CALLBACK type function
        all_callback : function
            FL_RAW_CALLBACK type function
        compress_mask : long_pos
            *todo*
        evmask : long_pos
            *todo*
        close_callback : function
            FL_FORM_ATCLOSE type function
        close_data : pointer to any type
            user data for close callback
        flpixmap : pointer to FL_pixmap
            back buffer
        icon_pixmap : long_pos
            *todo*
        icon_mask : long_pos
            *todo*
        deactivated : int
            non-zero if deactivated., It can be changed using
            fl_activated_form() and fl_deactivated_form().
        use_pixmap : int
            true if dbl buffering
        frozen : int
            true if sync change
        visible : int
            true if visible on screen (mapped). It can be changed using
            fl_show_form() and fl_hide_form()
        wm_border : int
            window manager info
        prop : int_pos
            other attributes
        num_auto_objects : int
            *todo*
        top : int
            *todo*
        sort_of_modal : int
            internal use
        parent : pointer to FL_FORM
            *todo*
        child : pointer to FL_FORM
            *todo*
        parent_obj : pointer to FL_OBJECT
            *todo*
        attached : int
            not independent anymore
        pre_attach : function, no return
            function(ptr_flform) type
        attach_data : pointer to any type
            *todo*
        no_tooltip : int
            *todo*
    """
    pass

FL_FORM = FL_FORM_


class FL_OBJECT_(cty.Structure):
    """FL_OBJECT class
    
    Each XForms flobject has a number of attributes. Some of them are used by
    the main routine, some have a fixed meaning and should never be altered
    by the class routines and some are free for the class routines to use.
    Please always use accessor methods when available instead of using or
    changing the flobject's properties directly.

    To access directly to the data referenced by a pointer to FL_OBJECT
    (ptr_flobject) you need to use "ptr_flobject.contents", then one of its attributes'
    name. Nonetheless, whenever possible it is always better to use
    appropriate functions.

    Attributes
    ----------
        form : pointer to FL_FORM
            the form this flobject belongs to. It is used by the main routines.
            The class routines should not change it.
        u_vdata : pointer to any type
            anything the user likes as user data for application program. The
            main module does not reference or modify this field in any way
            and neither should the class routines.
        u_cdata : str
            anything the user likes for application program. The main module
            does not reference or modify this field in any way and neither
            should the class routines.
        u_ldata : long
            anything the user likes for application program. The main module
            does not reference or modify this field in any way and neither
            should the class routines.
        objclass : int
            XForms class of flobject (button, slider, etc). It can be queried
            using fl_get_object_class()
        type : int
            type of flobject within the class. At least one type should exist
            and should be provided. They should be numbered from 0 upwards.
            It can be queried using fl_get_object_type()
        boxtype : int
            what kind of bounding box type. The handling routine for the
            flobject must take care that is actually drawn (with a specific
            routine). It can be changed or queried using
            fl_set_object_boxtype() and fl_get_object_boxtype()
        xpos : int
            current horizontal position of bounding box of the flobject. This
            value will change when the user resizes the form window. To
            determine position use fl_get_object_position() or
            fl_get_object_geometry() (for size too). To change position use
            fl_set_object_position(), or fl_set_object_geometry() (for size
            too)
        ypos : int
            current vertical position of bounding box of the flobject. This
            value will change when the user resizes the form window. To
            determine position use fl_get_object_position() or
            fl_get_object_geometry() (for size too). To change position use
            fl_set_object_position(), or fl_set_object_geometry() (for size
            too)
        width : int
            current width of bounding box of the flobject. This value
            value will change when the user resizes the form window. To
            determine size use fl_get_object_size() or
            fl_get_object_geometry() (for position too). To change size use
            fl_get_object_size() or fl_get_object_geometry() (for position
            too).
        height : int
            current height of bounding box of the flobject. This
            value will change when the user resizes the form window. To
            determine size use fl_get_object_size() or
            fl_get_object_geometry() (for position too). To change size use
            fl_get_object_size() or fl_get_object_geometry() (for position
            too).
        fl1 : float
            distance of upper left hand corner to left of enclosing form
        fr1 : float
            distance of upper left hand corner to right of enclosing form
        ft1 : float
            distance of upper left hand corner to top of enclosing form
        fb1 : float
            distance of upper left hand corner to bottom of enclosing form
        fl2 : float
            distance of lower right hand corner to left of enclosing form
        fr2 : float
            distance of lower right hand corner to right of enclosing form
        ft2 : float
            distance of lower right hand corner to top of enclosing form
        fb2 : float
            distance of lower right hand corner to bottom of enclosing form
        bw : int
            border width of flobject. Negative values indicate the up box
            should look "softer" (in which case no black line of 1 pixel
            width is drawn around the flobjects box). It can be queried using
            fl_get_object_bw(). A different border width can be set using
            fl_set_object_bw()
        col1 : long_pos
            first color index of flobject in the internal color lookup table
            Colors can be changed using fl_set_object_color() and queried
            using fl_get_object_color()
        col2 : long_pos
            second color index of flobject in the internal color lookup table
            Colors can be changed using fl_set_object_color() and queried
            using fl_get_object_color()
        label : str
            textual label of flobject. It can be changed using
            fl_set_object_label() and queried using fl_get_object_label()
            It must be drawn by the routine handling the flobject when it
            receives a FL_DRAWLABEL event (or it could be part of the code
            for FL_DRAW event). For non-offsetted labels, i.e. the alignment
            is relative to the entire bounding box, simply calling
            fl_draw_object_label() should be enough.
        lcol : long_pos
            color of the label. It can be set using fl_set_object_lcol()
            and queried using fl_get_object_lcol()
        align : int
            alignment of label with respect to the flobject. It can be set
            using fl_set_object_lalign() and queried using
            fl_get_object_lalign()
        lsize : int
            size of font to draw the label. It can be set using
            fl_set_object_lsize() and queried using fl_get_object_lsize()
        lstyle : int
            style of font to draw the label. It can be set using
            fl_set_object_lstyle() and queried using fl_get_object_lstyle()
        shortcut : pointer to long
            A pointer to long containing all shortcuts (as keysyms) defined
            for the flobject. You should never need them because they are fully
            handled by the main routines.
        handle : function, returning value
            function(ptr_flobject, int, crd, crd, int, pvdata) -> int
            This is a pointer to the interaction handling routine for the
            object. fl_add_NEW() sets this by providing the correct handling
            routine. Normally it is never used (except by the main routine)
            or changed although there might be situations in which you want
            to change the interaction handling routine for a flobject, due to
            some user action.
        object_callback : function, no return
            function(ptr_flobject, long)
            callback routine that the application program assigned to the
            flobject and that the system invokes when the user does something
            with the flobject.
        argument : long
            The argument to be passed to the callback routine when invoked.
        spec : pointer to any type
            Instantiation. This is a pointer that points to any class specific
            information. For example, for sliders it stores the minimum,
            maximum and current value of the slider. Most classes (except the
            most simple ones like boxes and texts) will need this. Whenever the
            flobject receives the event FL_FREEMEM it should free this memory.
        prehandle : function, returning value
            function(ptr_flobject, int, crd, crd, int, pvdata)
        posthandle : function, returning value
            function(ptr_flobject, int, crd, crd, int, pvdata)
        set_return : function, no return
            function(ptr_flobject, int_pos)
        resize : int_pos
            what to do if WM resizes the form. It can be set using
            fl_set_object_resize() and queried using fl_get_object_resize()
        nwgravity : int_pos
            how to re-position top-left corner relative to its position
            prior to resizing. It can be set using fl_set_object_gravity()
            and queried using fl_get_object_gravity()
        segravity : int_pos
            how to re-position lower-right corner relative to its position
            prior to resizing. It can be set using fl_set_object_gravity()
            and queried using fl_get_object_gravity()
        prev : pointer to FL_OBJECT
            previous flobject in form. It is used by the main routines. The
            class routines should not change it.
        next : pointer to FL_OBJECT
            next flobject in form. It is used by the main routines. The class
            routines should not change it.
        parent : pointer to FL_OBJECT
            *todo*
        child : pointer to FL_OBJECT
            *todo*
        nc : pointer to FL_OBJECT
            next child
        flpixmap : pointer to FL_pixmap
            pixmap doublebuffering stateinfo
        use_pixmap : int
            true to use pixmap double buffering
        returned : int
            what last interaction returned (by flobject handling function).
            Values: FL_RETURN_NONE (Handling function did FL_RETURN_NONE,
            i.e. 0), FL_RETURN_CHANGED (Handling function detected a change
            of the flobjects state), FL_RETURN_END (Handling function detected
            end of interaction with object). FL_RETURN_CHANGED and
            FL_RETURN_END are bits that can be bitwise OR-ed. If both are
            set this indicates that the flobjects state was changed and the
            interaction ended.
        how_return : int_pos
            under what circumstances the flobject is returned by e.g.
            fl_do_forms() or the callback function for the flobject is invoked.
            It can be changed using fl_set_object_return(). Especially in
            the case of flobjects having child flobjects also the corresponding
            settings for child flobjects may need changes and which automatically
            get adjusted when the above function is used.
        double_buffer : int
            only used by mesa/gl canvas
        pushed : int
            flag if the mouse is pushed within the bounding box of the flobject.
            It is set and reset by the main routine. Class routines should
            never change it but can use it to draw or handle flobjects
            differently.
        focus : int
            flag if keyboard input is sent to this object. It is set and reset
            by the main routine. Never change it but you can use its value.
        belowmouse : int
            flag if the mouse is on this object. It is set and reset by the
            main routine. The class routines should never change it but can
            use it to draw or handle the flobject differently.
        active : int
            flag if flobject is active, accepting event other than FL_DRAW.
            Static flobjects (e.g. text and boxes) are inactive. By default
            flobjects are active; it can be changed by using
            fl_deactivate_object() and fl_activate_object(). It can be queried
            using fl_object_is_active()
        input : int
            flag if this flobject can receive keyboard input. If not, events
            related to keyboard input are not sent to the flobject. The default
            value of input is false. Note that not all keys are sent (see
            wantkey).
        wantkey : int
            An input flobject normally does not receive <Tab> or <Return>
            keystrokes or any other keys except those that have values between
            0-255, the <Left> and <Right> arrow keys and <Home> and <End>
            (<Tab> and <Return> are normally used to switch between input
            flobjects). By setting this field to FL_KEY_TAB enforces that the
            flobject receives also these two keys as well as the <Up> and <Down>
            arrow keys and <PgUp> and <PgDn> when it has the focus. To receive
            other special keys (e.g. function keys) FL_KEY_SPECIAL must be set
            here. By setting wantkey to FL_KEY_ALL all keys are sent to the
            object.
        radio : int
            *todo*
        automatic : int
            An flobject is automatic if it automatically (without user actions)
            has to change its contents. Automatic flobjects get a FL_STEP event
            about every 50 msec. E.g. the flobject class FL_CLOCK is automatic.
            It is false, by default. It can be set using
            fl_set_object_automatic() (do not set the flobject member directly
            except from within a function like fl_add_NEW(), in other contexts
            some extra work is required) and to test the flobject for it use
            fl_object_is_automatic().
        redraw : int
            *todo*
        visible : int
            flag if the flobject is visible. When the flobject is not visible the
            main routine will never try to draw it or send events to it. By
            default flobjects are visible. It can be hidden using
            fl_hide_object() and queried using fl_object_is_visible(). Note
            that this does not guarantee that the flobject is visible on the
            screen, you need to verify if the form the flobject belongs to is
            visible using fl_form_is_visible() (when returning true).
        is_under : int
            if (partially) hidden by other flobject
        clip : int
            *todo*
        click_timeout : long_pos
            If non-zero this indicates the the maximum elapsed time (in msec)
            between two mouse clicks to be considered a double click. A zero
            value disables double/triple click detection. It can be set using
            fl_set_object_dblclick() and queried using fl_get_object_dblclick()
        c_vdata : pointer to any type
            for class use. The main module does not reference or modify this
            field in any way. The flobject classes, including the built-in ones,
            may use this field.
        c_cdata : str
            for class use
        c_ldata : long
            for class use. The main module does not reference or modify this
            field in any way. The flobject classes, including the built-in ones,
            may use this field.
        dbl_background : long_pos
            double buffer background color
        tooltip : str
            *todo*
        tipID : int
            *todo*
        group_id : int
            *todo*
        want_motion : int
            *todo*
        want_update : int
            *todo*
    """
    pass

FL_OBJECT = FL_OBJECT_


# from /usr/include/X11/Xlib.h ***
XPointer = STRING       # cty.c_char_p


# /usr/include/X11/Xlib.h 159
class _XExtData(cty.Structure):
    """_XExtData class

    Attributes
    ----------
        number : int
            *todo*
        next : pointer to _XExtData
            *todo*
        free_private : function, returning value
            function(pointer to _XExtData) -> int
        private_data : str
            *todo*
    """
    pass
_XExtData._fields_ = [
        ('number', cty.c_int),
        ('next', cty.POINTER(_XExtData)),
        ('free_private', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XExtData))),
        ('private_data', XPointer), ]

XExtData = _XExtData

VisualID = cty.c_ulong


# /usr/include/X11/Xlib.h 249
class Visual(cty.Structure):
    """Visual class

    Attributes
    ----------
        ext_data : pointer to XExtData
            *todo*
        visualid : long_pos
            *todo*
        c_class : int
            *todo*
        red_mask : long_pos
            *todo*
        green_mask : long_pos
            *todo*
        blue_mask : long_pos
            *todo*
        bits_per_rgb : int
            *todo*
        map_entries : int
            *todo*
    """
    _fields_ = [
        ('ext_data', cty.POINTER(XExtData)),
        ('visualid', VisualID),
        ('c_class', cty.c_int),
        ('red_mask', cty.c_ulong),
        ('green_mask', cty.c_ulong),
        ('blue_mask', cty.c_ulong),
        ('bits_per_rgb', cty.c_int),
        ('map_entries', cty.c_int), ]


# All pixmaps used by FL_OBJECT to simulate double buffering have the
# following entries in the structure. FL_Coord x,y are used to shift the
# origin of the drawing routines
class FL_pixmap_(cty.Structure):
    """Fl_pixmap class
    
    Attributes
    ----------
        pixmap : long_pos
            *todo*
        win : long_pos
            window
        visual : pointer to Visual
            *todo*
        xpos : int
            horizontal position
        ypos : int
            vertical position
        width : int
            width
        height : int
            height
        depth : int
            *todo*
        dbl_background : long_pos
            color value
        pixel : long_pos
            color value
    """
    _fields_ = [
        ('pixmap', Pixmap),
        ('win', Window),
        ('visual', cty.POINTER(Visual)),
        ('x', FL_Coord),
        ('y', FL_Coord),
        ('w', FL_Coord),
        ('h', FL_Coord),
        ('depth', cty.c_int),
        ('dbl_background', FL_COLOR),
        ('pixel', FL_COLOR), ]
FL_pixmap = FL_pixmap_


FL_IO_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
class function_prototype_for_FL_IO_CALLBACK(object):
    """ FL_IO_CALLBACK(num, vdata)

    prototype for handling IO callback (used by fl_add_io_callback,
    fl_remove_io_callback), no return
    """
    pass


FL_SIGNAL_HANDLER = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
class function_prototype_for_FL_SIGNAL_HANDLER(object):
    """ FL_SIGNAL_HANDLER(num, vdata)

    prototype for handling signal callback (used by fl_add_signal_callback),
    no return
    """
    pass

FL_TIMEOUT_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
class function_prototype_for_FL_TIMEOUT_CALLBACK(object):
    """ FL_TIMEOUT_CALLBACK(num, vdata)

    prototype for handling timeout callback (used by fl_add_timeout),
    no return
     """
    pass

# at close (WM menu delete/close etc.)
FL_FORM_ATCLOSE = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_FORM), \
                                cty.c_void_p)
class function_prototype_for_FL_FORM_ATCLOSE(object):
    """ FL_FORM_ATCLOSE(ptr_flform, vdata) -> num

    prototype when a form is closed (used by fl_set_form_atclose,
    fl_set_atclose), returning value
    """
    pass

# deactivate/activate callbacks
FL_FORM_ATACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(FL_FORM), cty.c_void_p)
class function_prototype_for_FL_FORM_ATACTIVATE(object):
    """ FL_FORM_ATACTIVATE(ptr_flform, vdata)

    prototype when a form is activated (used by fl_set_form_atactivate),
    no return value
    """
    pass

FL_FORM_ATDEACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(FL_FORM), cty.c_void_p)
class function_prototype_for_FL_FORM_ATDEACTIVATE(object):
    """ FL_FORM_DEATACTIVATE(ptr_flform, vdata)

    prototype when a form is deactivated (used by fl_set_form_atdeactivate),
    no return value
    """
    pass

# callback function for an entire form
FL_FORMCALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_void_p)
class function_prototype_for_FL_FORMCALLBACKPTR(object):
    """ FL_FORMCALLBACKPTR(ptr_flobject, vdata)

    prototype for handling a callback for the entire form (used by
    fl_set_form_callback), no return value
    """
    pass

# cfunction for fl_for_all_objects()
cfunc_int_pobject_pvoid = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
                                        cty.c_void_p)


FL_HANDLEPTR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), cty.c_int, \
                FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)
class function_prototype_for_FL_HANDLEPTR(object):
    """ FL_HANDLEPTR(ptr_flobject, num, coord, coord, num, vdata) -> num

    prototype for registering a pre- or post- handler for a flobject,
    returning value (used by fl_set_object_prehandler,
    fl_set_object_posthandler, fl_make_object)
    """
    pass

# /usr/include/X11/Xlib.h 984
class _XEvent(cty.Union):
    """_XEvent class
    
    Attributes
    ----------
        type : int
            event type
        xany : XAnyEvent
            *todo*
        xkey : XKeyEvent
            *todo*
        xbutton : XButtonEvent
            *todo*
        xmotion : XMotionEvent
            *todo*
        xcrossing : XCrossingEvent
            *todo*
        xfocus : XFocusChangeEvent
            *todo*
        xexpose : XExposeEvent
            *todo*
        xgraphicsexpose : XGraphicsExposeEvent
            *todo*
        xnoexpose : XNoExposeEvent
            *todo*
        xvisibility : XVisibilityEvent
            *todo*
        xcreatewindow : XCreateWindowEvent
            *todo*
        xdestroywindow : XDestroyWindowEvent
            *todo*
        xunmap : XUnmapEvent
            *todo*
        xmap : XMapEvent
            *todo*
        xmaprequest : XMapRequestEvent
            *todo*
        xreparent : XReparentEvent
            *todo*
        xconfigure : XConfigureEvent
            *todo*
        xgravity : XGravityEvent
            *todo*
        xresizerequest : XResizeRequestEvent
            *todo*
        xconfigurerequest : XConfigureRequestEvent
            *todo*
        xcirculate : XCirculateEvent
            *todo*
        xcirculaterequest : XCirculateRequestEvent
            *todo*
        xproperty : XPropertyEvent
            *todo*
        xselectionclear : XSelectionClearEvent
            *todo*
        xselectionrequest : XSelectionRequestEvent
            *todo*
        xselection : XSelectionEvent
            *todo*
        xcolormap : XColormapEvent
            *todo*
        xclient : XClientMessageEvent
            *todo*
        xmapping : XMappingEvent
            *todo*
        xerror : XErrorEvent
            *todo*
        xkeymap : XKeymapEvent
            *todo*
        xgeneric : XGenericEvent
            *todo*
        xcookie : XGenericEventCookie
            *todo*
        pad : array of 24 long
            *todo*
    """
    pass
XEvent = _XEvent



# preemptive callback function - ptr_XEvent is necessary as type cast is not
# handled here in xforms-python
# FL_RAW_CALLBACK = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_FORM), \
#                       cty.c_void_p)
FL_RAW_CALLBACK = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_FORM), \
                                cty.POINTER(XEvent))
class function_prototype_for_FL_RAW_CALLBACK(object):
    """ FL_RAW_CALLBACK(ptr_flform, ptr_XEvent) -> num.

    prototype for handling a raw callback for X events (used by
    fl_register_raw_callback), with returning value
    """
    pass

# flobject callback function
FL_CALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_long)
class function_prototype_for_FL_CALLBACKPTR(object):
    """ FL_CALLBACKPTR(ptr_flobject, longnum)

    prototype for handling a callback function bound to a flobject, no return
    value (used by fl_set_object_callback)
    """
    pass


# cfunction for _fl_enumerate_fonts
cfunc_none_string = cty.CFUNCTYPE(None, STRING)


FL_DRAWPTR = cty.CFUNCTYPE(None, FL_Coord, FL_Coord, FL_Coord, FL_Coord,
                           cty.c_int, FL_COLOR)
class function_prototype_for_FL_DRAWPTR(object):
    """ FL_DRAWPTR(xpos, ypos, width, height, angle_degree_rotation, colr)

    prototype for handling a symbol drawing (used by fl_add_symbol),
    no return
    """
    pass

# error callback
FL_ERROR_FUNC = cty.CFUNCTYPE(None, STRING, STRING)
class function_prototype_for_FL_ERROR_FUNC(object):
    """ FL_ERROR_FUNC(function_name, error_message)

    prototype for handling errors (used by fl_set_error_handler), no return
    """
    pass


FL_FORM_._pack_ = 4
FL_FORM_._fields_ = [
    ('fdui', cty.c_void_p),             # for fdesign
    ('u_vdata', cty.c_void_p),          # for application
    ('u_cdata', STRING),                # for application
    ('u_ldata', cty.c_long),            # for application
    ('label', STRING),                  # window title
    ('window', Window),                 # X resource ID for window
    ('x', FL_Coord),                    # current geometry info
    ('y', FL_Coord),
    ('w', FL_Coord),
    ('h', FL_Coord),
    ('handle_dec_x', cty.c_int),
    ('handle_dec_y', cty.c_int),
    ('hotx', FL_Coord),                 # horizontal hot-spot of the form
    ('hoty', FL_Coord),                 # vertical hot-spot of the form
    ('w_hr', cty.c_double),   # high resolution width (for precise scaling)
    ('h_hr', cty.c_double),   # high resolution height (for precise scaling)
    ('first', cty.POINTER(FL_OBJECT)),
    ('last', cty.POINTER(FL_OBJECT)),
    ('focusobj', cty.POINTER(FL_OBJECT)),
    ('form_callback', FL_FORMCALLBACKPTR),
    ('activate_callback', FL_FORM_ATACTIVATE),
    ('deactivate_callback', FL_FORM_ATDEACTIVATE),
    ('form_cb_data', cty.c_void_p),
    ('activate_data', cty.c_void_p),
    ('deactivate_data', cty.c_void_p),
    ('key_callback', FL_RAW_CALLBACK),
    ('push_callback', FL_RAW_CALLBACK),
    ('crossing_callback', FL_RAW_CALLBACK),
    ('motion_callback', FL_RAW_CALLBACK),
    ('all_callback', FL_RAW_CALLBACK),
    ('compress_mask', cty.c_ulong),
    ('evmask', cty.c_ulong),
    # WM_DELETE_WINDOW message handler
    ('close_callback', FL_FORM_ATCLOSE),
    ('close_data', cty.c_void_p),
    ('flpixmap', cty.POINTER(FL_pixmap)),     # back buffer
    ('icon_pixmap', Pixmap),
    ('icon_mask', Pixmap),
    # interaction and other flags
    ('deactivated', cty.c_int),               # non-zero if deactivated
    ('use_pixmap', cty.c_int),                # true if dbl buffering
    ('frozen', cty.c_int),                    # true if sync change
    ('visible', cty.c_int),                   # true if mapped
    ('wm_border', cty.c_int),                 # window manager info
    ('prop', cty.c_uint),                     # other attributes
    ('num_auto_objects', cty.c_int),
    ('top', cty.c_int),
    ('sort_of_modal', cty.c_int),             # internal use
    ('parent', cty.POINTER(FL_FORM)),
    ('child', cty.POINTER(FL_FORM)),
    ('parent_obj', cty.POINTER(FL_OBJECT)),
    ('attached', cty.c_int),                  # not independent anymore
    ('pre_attach', cty.CFUNCTYPE(None, cty.POINTER(FL_FORM))),
    ('attach_data', cty.c_void_p),
    ('no_tooltip', cty.c_int), ]

FL_OBJECT_._pack_ = 4
FL_OBJECT_._fields_ = [
    ('form', cty.POINTER(FL_FORM)),   # the form this flobject belongs to
    ('u_vdata', cty.c_void_p),        # anything the user likes
    ('u_cdata', STRING),              # anything the user likes
    ('u_ldata', cty.c_long),          # anything the user likes
    ('objclass', cty.c_int),          # class of flobject, button, slider etc
    ('type', cty.c_int),              # type within the class
    ('boxtype', cty.c_int),           # what kind of box type
    ('x', FL_Coord),                  # current obj. location and size
    ('y', FL_Coord),
    ('w', FL_Coord),
    ('h', FL_Coord),
    ('fl1', cty.c_double),            # distances of upper left hand (1) and
    ('fr1', cty.c_double),            # lower right hand corner (2) to left,
    ('ft1', cty.c_double),            # right, top and bottom of enclosing
    ('fb1', cty.c_double),            # form
    ('fl2', cty.c_double),
    ('fr2', cty.c_double),
    ('ft2', cty.c_double),
    ('fb2', cty.c_double),
    ('bw', FL_Coord),
    ('col1', FL_COLOR),                 # colors of obj
    ('col2', FL_COLOR),
    ('label', STRING),                  # flobject label
    ('lcol', FL_COLOR),                 # label color
    ('align', cty.c_int),               # alignment
    ('lsize', cty.c_int),               # label size
    ('lstyle', cty.c_int),              # label style
    ('shortcut', cty.POINTER(cty.c_long)),
    ('handle', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), cty.c_int, \
        FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)),
    ('object_callback', cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), \
        cty.c_long)),
    ('argument', cty.c_long),
    ('spec', cty.c_void_p),             # instantiation
    ('prehandle', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
        cty.c_int, FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)),
    ('posthandle', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
        cty.c_int, FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)),
    ('set_return', cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_uint)),
    # re-configure preference
    ('resize', cty.c_uint),           # what to do if WM resizes the FORM
    ('nwgravity', cty.c_uint),        # how to re-position top-left corner
    ('segravity', cty.c_uint),       # how to re-position lower-right corner
    ('prev', cty.POINTER(FL_OBJECT)),     # prev. obj in form
    ('next', cty.POINTER(FL_OBJECT)),     # next obj in form
    ('parent', cty.POINTER(FL_OBJECT)),
    ('child', cty.POINTER(FL_OBJECT)),
    ('nc', cty.POINTER(FL_OBJECT)),        # next child
    ('flpixmap', cty.POINTER(FL_pixmap)),  # pixmap doublebuffering stateinfo
    ('use_pixmap', cty.c_int),        # true to use pixmap double buffering
    # some interaction flags
    ('returned', cty.c_int),            # what last interaction returned
    ('how_return', cty.c_uint),          # under which conditions to return
    ('double_buffer', cty.c_int),         # only used by mesa/gl canvas
    ('pushed', cty.c_int),
    ('focus', cty.c_int),
    ('belowmouse', cty.c_int),
    ('active', cty.c_int),                # if accepting event
    ('input', cty.c_int),
    ('wantkey', cty.c_int),
    ('radio', cty.c_int),
    ('automatic', cty.c_int),
    ('redraw', cty.c_int),
    ('visible', cty.c_int),
    ('is_under', cty.c_int),        # if (partially) hidden by other flobject
    ('clip', cty.c_int),
    ('click_timeout', cty.c_ulong),
    ('c_vdata', cty.c_void_p),          # for class use
    ('c_cdata', STRING),                # for class use
    ('c_ldata', cty.c_long),            # for class use
    ('dbl_background', FL_COLOR),       # double buffer background
    ('tooltip', STRING),
    ('tipID', cty.c_int),
    ('group_id', cty.c_int),
    ('want_motion', cty.c_int),
    ('want_update', cty.c_int), ]


# form visibility state, form .visible
# values for unnamed enumeration
FL_BEING_HIDDEN = -1
FL_HIDDEN = 0
FL_INVISIBLE = FL_HIDDEN
FL_VISIBLE = 1

class admitted_values_for_VISIBILITY(object):
    """Form visibility state
    
    Admitted values
    ---------------
        FL_BEING_HIDDEN
            The forms is visible but is in the process of being hidden
        FL_HIDDEN or FL_INVISIBLE
            The form is not visible
        FL_VISIBLE
            The form is visible
    """
    pass

# my add, list of possible values --LK
VISIBLE_list = [FL_BEING_HIDDEN, FL_HIDDEN, FL_INVISIBLE, FL_VISIBLE]


# All FD_xxx structure emitted by fdesign contains at least the
# following
class FD_Any(cty.Structure):
    """FD_Any class

    Attributes
    ----------
        form : pointer to FL_FORM
            *todo*
        vdata : pointer to any type
            *todo*
        cdata : str
            *todo*
        ldata : long
            *todo*
    """
    _fields_ = [
        ('form', cty.POINTER(FL_FORM)),
        ('vdata', cty.c_void_p),
        ('cdata', STRING),
        ('ldata', cty.c_long), ]


# Async IO stuff
FL_READ   = 1
FL_WRITE  = 2
FL_EXCEPT = 4

class admitted_values_for_ASYNCIO(object):
    """Async IO
    
    Admitted values
    ---------------
        FL_READ
            File descriptor has data available
        FL_WRITE
            File descriptor is available for writing
        FL_EXCEPT
            an I/O error has occurred
    """
    pass

# my add, list of possible values --LK
ASYNCIO_list = [FL_READ, FL_WRITE, FL_EXCEPT]


# values for unnamed enumeration
FL_INPUT_END_EVENT_CLASSIC = 0
FL_INPUT_END_EVENT_ALWAYS  = 1

class admitted_values_for_Fl_INPUT_END(object):
    """input end event handling
    
    Admitted values
    ---------------
    FL_INPUT_END_EVENT_CLASSIC
        Uses old behavior in handling return of end event for input. An
        "end of edit" event was not reported back to the program when
        the user clicked on a non-input flobject, i.e. changed to a different
        input flobject. This let to some problems when the interaction with
        the clicked-on non-input flobject depended on the new content of the
        input flobject, just having been edited, but which had not been been
        reported back to the caller.
    FL_INPUT_END_EVENT_ALWAYS
        Uses new (default) behavior in handling return of end event for
        input. It means that the users either hits the <Tab> or the
        <Return> key (except for multi-line inputs) or that she clicks
        onto some other flobject that in principle allows user interaction.
        These events are interpreted as an indication the user is done
        editing the input field and thus are reported back to the program,
        either by returning the input flobject or invoking its callback. But
        unless the user goes to a different input flobject the input field
        edited retains the focus.
    """
    pass

# my add, list of possible values --LK
INPUTENDRETNEVENT_list = [FL_INPUT_END_EVENT_CLASSIC, \
        FL_INPUT_END_EVENT_ALWAYS]


FL_MAX_MENU_CHOICE_ITEMS = 128


# *** start - from /usr/include/X11/keysymdef.h ***
# TTY function keys, cleverly chosen to map to ASCII, for convenience of
# programming, but could have been arbitrary (at the cost of lookup
# tables in client code).
XK_BackSpace = 0xff08           # Back space, back char
XK_Tab = 0xff09
XK_Linefeed = 0xff0a            # Linefeed, LF
XK_Clear = 0xff0b
XK_Return = 0xff0d              # Return, enter
XK_Pause = 0xff13               # Pause, hold
XK_Scroll_Lock = 0xff14
XK_Sys_Req = 0xff15
XK_Escape = 0xff1b
XK_Delete = 0xffff              # Delete, rubout

# Cursor control & motion
XK_Home = 0xff50
XK_Left = 0xff51               # Move left, left arrow
XK_Up = 0xff52                 # Move up, up arrow
XK_Right = 0xff53              # Move right, right arrow
XK_Down = 0xff54               # Move down, down arrow
XK_Prior = 0xff55              # Prior, previous
XK_Page_Up = 0xff55
XK_Next = 0xff56               # Next
XK_Page_Down = 0xff56
XK_End = 0xff57                # EOL
XK_Begin = 0xff58              # BOL

# Misc functions
XK_Select = 0xff60             # Select, mark
XK_Print = 0xff61
XK_Execute = 0xff62            # Execute, run, do
XK_Insert = 0xff63             # Insert, insert here
XK_Undo = 0xff65
XK_Redo = 0xff66               # Redo, again
XK_Menu = 0xff67
XK_Find = 0xff68               # Find, search
XK_Cancel = 0xff69             # Cancel, stop, abort, exit
XK_Help = 0xff6a               # Help
XK_Break = 0xff6b
XK_Mode_switch = 0xff7e        # Character set switch
XK_script_switch = 0xff7e      # Alias for mode_switch
XK_Num_Lock = 0xff7f

# Keypad functions, keypad numbers cleverly chosen to map to ASCII
XK_KP_Space = 0xff80           # Space
XK_KP_Tab = 0xff89
XK_KP_Enter = 0xff8d           # Enter
XK_KP_F1 = 0xff91              # PF1, KP_A, ...
XK_KP_F2 = 0xff92
XK_KP_F3 = 0xff93
XK_KP_F4 = 0xff94
XK_KP_Home = 0xff95
XK_KP_Left = 0xff96
XK_KP_Up = 0xff97
XK_KP_Right = 0xff98
XK_KP_Down = 0xff99
XK_KP_Prior = 0xff9a
XK_KP_Page_Up = 0xff9a
XK_KP_Next = 0xff9b
XK_KP_Page_Down = 0xff9b
XK_KP_End = 0xff9c
XK_KP_Begin = 0xff9d
XK_KP_Insert = 0xff9e
XK_KP_Delete = 0xff9f
XK_KP_Equal = 0xffbd           # Equals
XK_KP_Multiply = 0xffaa
XK_KP_Add = 0xffab
XK_KP_Separator = 0xffac       # Separator, often comma
XK_KP_Subtract = 0xffad
XK_KP_Decimal = 0xffae
XK_KP_Divide = 0xffaf

XK_KP_0 = 0xffb0
XK_KP_1 = 0xffb1
XK_KP_2 = 0xffb2
XK_KP_3 = 0xffb3
XK_KP_4 = 0xffb4
XK_KP_5 = 0xffb5
XK_KP_6 = 0xffb6
XK_KP_7 = 0xffb7
XK_KP_8 = 0xffb8
XK_KP_9 = 0xffb9

# Auxiliary functions; note the duplicate definitions for left and right
# function keys;  Sun keyboards and a few other manufacturers have such
# function key groups on the left and/or right sides of the keyboard.
# We've not found a keyboard with more than 35 function keys total.
XK_F1 = 0xffbe
XK_F2 = 0xffbf
XK_F3 = 0xffc0
XK_F4 = 0xffc1
XK_F5 = 0xffc2
XK_F6 = 0xffc3
XK_F7 = 0xffc4
XK_F8 = 0xffc5
XK_F9 = 0xffc6
XK_F10 = 0xffc7
XK_F11 = 0xffc8
XK_L1 = 0xffc8
XK_F12 = 0xffc9
XK_L2 = 0xffc9
XK_F13 = 0xffca
XK_L3 = 0xffca
XK_F14 = 0xffcb
XK_L4 = 0xffcb
XK_F15 = 0xffcc
XK_L5 = 0xffcc
XK_F16 = 0xffcd
XK_L6 = 0xffcd
XK_F17 = 0xffce
XK_L7 = 0xffce
XK_F18 = 0xffcf
XK_L8 = 0xffcf
XK_F19 = 0xffd0
XK_L9 = 0xffd0
XK_F20 = 0xffd1
XK_L10 = 0xffd1
XK_F21 = 0xffd2
XK_R1 = 0xffd2
XK_F22 = 0xffd3
XK_R2 = 0xffd3
XK_F23 = 0xffd4
XK_R3 = 0xffd4
XK_F24 = 0xffd5
XK_R4 = 0xffd5
XK_F25 = 0xffd6
XK_R5 = 0xffd6
XK_F26 = 0xffd7
XK_R6 = 0xffd7
XK_F27 = 0xffd8
XK_R7 = 0xffd8
XK_F28 = 0xffd9
XK_R8 = 0xffd9
XK_F29 = 0xffda
XK_R9 = 0xffda
XK_F30 = 0xffdb
XK_R10 = 0xffdb
XK_F31 = 0xffdc
XK_R11 = 0xffdc
XK_F32 = 0xffdd
XK_R12 = 0xffdd
XK_F33 = 0xffde
XK_R13 = 0xffde
XK_F34 = 0xffdf
XK_R14 = 0xffdf
XK_F35 = 0xffe0
XK_R15 = 0xffe0

# Modifiers
XK_Shift_L = 0xffe1             # Left shift
XK_Shift_R = 0xffe2             # Right shift
XK_Control_L = 0xffe3           # Left control
XK_Control_R = 0xffe4           # Right control
XK_Caps_Lock = 0xffe5           # Caps lock
XK_Shift_Lock = 0xffe6          # Shift lock

XK_Meta_L = 0xffe7              # Left meta
XK_Meta_R = 0xffe8              # Right meta
XK_Alt_L = 0xffe9               # Left alt
XK_Alt_R = 0xffe                # Right alt
XK_Super_L = 0xffeb             # Left super
XK_Super_R = 0xffec             # Right super
XK_Hyper_L = 0xffed             # Left hyper
XK_Hyper_R = 0xffee             # Right hyper
# *** end - from /usr/include/X11/keysymdef.h ***

class admitted_values_for_KEYSYM(object):
    """KeySym keyboard symbols
    
    Admitted values
    ---------------
        XK_BackSpace (Back space/char key)
        XK_Tab (Tab key)
        XK_Linefeed (Linefeed, LF key)
        XK_Clear *todo*
        XK_Return (Return, enter key)
        XK_Pause (Pause, hold key)
        XK_Scroll_Lock (Scroll Lock key)
        XK_Sys_Req (Print Sys Req key)
        XK_Escape (Esc key)
        XK_Delete (Delete, rubout key)
        XK_Home (Home key)
        XK_Left (Move left, left arrow cursor key)
        XK_Up (Move up, up arrow cursor key)
        XK_Right (Move right, right arrow cursor key)
        XK_Down (Move down, down arrow cursor key)
        XK_Prior (Prior, previous key) ?
        XK_Page_Up (Page up key)
        XK_Next (Next key) ?
        XK_Page_Down (Page down key)
        XK_End (EOL End key)
        XK_Begin (BOL Begin key) ?
        XK_Select (Select, mark key) ?
        XK_Print (Print key) ?
        XK_Execute (Execute, run, do key) ?
        XK_Insert (Insert, insert here key) ?
        XK_Undo (Undo key) ?
        XK_Redo (Redo, again key) ?
        XK_Menu (Menu key) ?
        XK_Find (Find, search key) ?
        XK_Cancel (Cancel, stop, abort, exit key) ?
        XK_Help (Help key) ?
        XK_Break (Break key) ?
        XK_Mode_switch (Character set switch key) ?
        XK_script_switch (Alias for mode_switch key) ?
        XK_Num_Lock (Num Lock key)
        XK_KP_Space (Space Keypad key)
        XK_KP_Tab (Tab Keypad key)
        XK_KP_Enter (Enter Keypad key)
        XK_KP_F1 (PF1, KP_A, ... Keypad Fn 1)
        XK_KP_F2 (Keypad Fn 2 key)
        XK_KP_F3 (Keypad Fn 3 key)
        XK_KP_F4 (Keypad Fn 4 key)
        XK_KP_Home (Keypad Home key)
        XK_KP_Left (Keypad left key)
        XK_KP_Up (Keypad up key)
        XK_KP_Right (Keypad right key)
        XK_KP_Down (Keypad down key)
        XK_KP_Prior (Keypad prior key)
        XK_KP_Page_Up (Keypad page up key)
        XK_KP_Next (Keypad next key)
        XK_KP_Page_Down (Keypad page down key)
        XK_KP_End (Keypad End key)
        XK_KP_Begin (Keypad begin key) ?
        XK_KP_Insert (Keypad insert key)
        XK_KP_Delete (Keypad Delete key)
        XK_KP_Equal (Equals Keypad key)
        XK_KP_Multiply (Keypad multiply key) ?
        XK_KP_Add (Keypad add key)
        XK_KP_Separator (Separator, often comma, Keypad key)
        XK_KP_Subtract (Keypad subtract key)
        XK_KP_Decimal (Keypad decimal key)
        XK_KP_Divide (Keypad divide key)
        XK_KP_0 (Keypad 0 key)
        XK_KP_1 (Keypad 1 key)
        XK_KP_2 (Keypad 2 key)
        XK_KP_3 (Keypad 3 key)
        XK_KP_4 (Keypad 4 key)
        XK_KP_5 (Keypad 5 key)
        XK_KP_6 (Keypad 6 key)
        XK_KP_7 (Keypad 7 key)
        XK_KP_8 (Keypad 8 key)
        XK_KP_9 (Keypad 9 key)
        XK_F1 (Fn 1 key)
        XK_F2 (Fn 2 key)
        XK_F3 (Fn 3 key)
        XK_F4 (Fn 4 key)
        XK_F5 (Fn 5 key)
        XK_F6 (Fn 6 key)
        XK_F7 (Fn 7 key)
        XK_F8 (Fn 8 key)
        XK_F9 (Fn 9 key)
        XK_F10 (Fn 10 key)
        XK_F11 (Fn 11 key)
        XK_L1 *todo*
        XK_F12 (Fn 12 key)
        XK_L2 *todo*
        XK_F13 (Fn 13 key)
        XK_L3 *todo*
        XK_F14 (Fn 14 key)
        XK_L4 *todo*
        XK_F15 (Fn 15 key)
        XK_L5 *todo*
        XK_F16 (Fn 16 key)
        XK_L6 *todo*
        XK_F17 (Fn 17 key)
        XK_L7 *todo*
        XK_F18 (Fn 18 key)
        XK_L8 *todo*
        XK_F19 (Fn 19 key)
        XK_L9 *todo*
        XK_F20 (Fn 20 key)
        XK_L10 *todo*
        XK_F21 (Fn 21 key)
        XK_R1 *todo*
        XK_F22 (Fn 22 key)
        XK_R2 *todo*
        XK_F23 (Fn 23 key)
        XK_R3 *todo*
        XK_F24 (Fn 24 key)
        XK_R4 *todo*
        XK_F25 (Fn 25 key)
        XK_R5 *todo*
        XK_F26 (Fn 26 key)
        XK_R6 *todo*
        XK_F27 (Fn 27 key)
        XK_R7 *todo*
        XK_F28 (Fn 28 key)
        XK_R8 *todo*
        XK_F29 (Fn 29 key)
        XK_R9 *todo*
        XK_F30 (Fn 30 key)
        XK_R10 *todo*
        XK_F31 (Fn 31 key)
        XK_R11 *todo*
        XK_F32 (Fn 32 key)
        XK_R12 *todo*
        XK_F33 (Fn 33 key)
        XK_R13 *todo*
        XK_F34 (Fn 34 key)
        XK_R14 *todo*
        XK_F35 (Fn 35 key)
        XK_R15 *todo*
        XK_Shift_L (Modifier Left shift)
        XK_Shift_R (Modifier Right shift)
        XK_Control_L (Modifier Left control)
        XK_Control_R (Modifier Right control)
        XK_Caps_Lock (Modifier Caps lock)
        XK_Shift_Lock (Modifier Shift lock) ?
        XK_Meta_L (Modifier Left meta) ?
        XK_Meta_R (Modifier Right meta) ?
        XK_Alt_L (Modifier Left alt)
        XK_Alt_R (Modifier Right alt)
        XK_Super_L (Modifier Left super) ?
        XK_Super_R (Modifier Right super) ?
        XK_Hyper_L (Modifier Left hyper) ?
        XK_Hyper_R (Modifier Right hyper) ?
    """
    pass


class _IO_FILE(cty.Structure):
    pass
FILE = _IO_FILE


########################
# forms.h (xbasic.h)
########################


# /usr/include/X11/Xutil.h 296
class XVisualInfo(cty.Structure):
    """XVisualInfo class

    Attributes
    ----------
        visual : pointer to Visual
            *todo*
        visualid : long_pos
            *todo*
        screen : int
            *todo*
        depth : int
            *todo*
        c_class : int
            *todo*
        red_mask : long_pos
            *todo*
        green_mask : long_pos
            *todo*
        blue_mask : long_pos
            *todo*
        colormap_size : int
            *todo*
        bits_per_rgb : int
            *todo*
    """
    _fields_ = [
        ('visual', cty.POINTER(Visual)),
        ('visualid', VisualID),
        ('screen', cty.c_int),
        ('depth', cty.c_int),
        ('c_class', cty.c_int),
        ('red_mask', cty.c_ulong),
        ('green_mask', cty.c_ulong),
        ('blue_mask', cty.c_ulong),
        ('colormap_size', cty.c_int),
        ('bits_per_rgb', cty.c_int), ]


# /usr/include/X11/Xdefs.h
XID = cty.c_ulong
Window = XID    # cty.c_ulong
Pixmap = XID    # cty.c_ulong


FL_APPEVENT_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(XEvent),
                               cty.c_void_p)
class function_prototype_for_FL_APPEVENT_CB(object):
    """ FL_APPEVENT_CB(ptr_XEvent, vdata) -> num.

    prototype for handling event callback (used by fl_set_event_callback,
    fl_set_idle_callback, fl_add_event_callback), returning value.
    """
    pass


# Draw mode
# values for unnamed enumeration
FL_XOR = 6              # GXxor
FL_COPY = 3             # GXcopy
FL_AND = 1              # GXand

class admitted_values_for_DRAWMODE(object):
    """Draw mode
    
    Admitted values
    ---------------
        FL_XOR
            Bitwise XOR (exclusive-or) of the pixel value to be drawn with
            the pixel value already on the screen. Useful for rubber-banding.
        FL_COPY
            Default overwrite mode, final pixel value is the same as source.
        FL_AND
            Bitwise AND of the pixel value to be drawn with the pixel value
            already on the screen.
    """
    pass

# my add, list of possible values --LK
DRAWMODE_list = [FL_XOR, FL_COPY, FL_AND]


FL_MINDEPTH = 1


# FL_IllegalVisual placeholder (backwards)
# FL_StaticGray placeholder (backwards)
# FL_GrayScale placeholder (backwards)
# FL_StaticColor placeholder (backwards)
# FL_PseudoColor placeholder (backwards)
# FL_TrueColor placeholder (backwards)
# FL_DirectColor placeholder (backwards)
# FL_DefaultVisual placeholder (backwards)

# values for unnamed enumeration
IllegalVisual = -1
StaticGray = 0
GrayScale = 1
StaticColor = 2
PseudoColor = 3
TrueColor = 4
DirectColor = 5
DefaultVisual = 10       # special request
GreyScale = GrayScale
StaticGrey = StaticGray

class admitted_values_for_VISUALMODE(object):
    """Visual mode
    
    Admitted values
    ---------------
        IllegalVisual
            *todo*
        StaticGray or StaticGrey
            *todo*
        GrayScale or GreyScale
            *todo*
        StaticColor
            *todo*
        PseudoColor
            *todo*
        TrueColor
            *todo*
        DirectColor
            *todo*
        DefaultVisual
            *todo*
    """
    pass

# my add - list of possible values --LK
VISUALMODE_list = [StaticGray, GrayScale, StaticColor, PseudoColor,
                   TrueColor, DirectColor, DefaultVisual, GreyScale,
                   StaticGrey]

# values for unnamed enumeration
FL_North = 2                            #NorthGravity
""""""
FL_NorthEast = 3                        #NorthEastGravity
""""""
FL_NorthWest = 1                        #NorthWestGravity
""""""
FL_South = 8                            #SouthGravity
""""""
FL_SouthEast = 9                        #SouthEastGravity
""""""
FL_SouthWest = 7                        #SouthWestGravity
""""""
FL_East = 6                             #EastGravity
""""""
FL_West = 4                             #WestGravity
""""""
FL_NoGravity = 0                        #ForgetGravity
""""""
FL_ForgetGravity = FL_NoGravity         #ForgetGravity
""""""

class admitted_values_for_GRAVITY(object):
    """Gravity
    
    Admitted values
    ---------------
        FL_North
            *todo*
        FL_NorthEast
            *todo*
        FL_NorthWest
            *todo*
        FL_South
            *todo*
        FL_SouthEast
            *todo*
        FL_SouthWest
            *todo*
        FL_East
            *todo*
        FL_West
            *todo*
        FL_NoGravity or FL_ForgetGravity
            *todo*
    """
    pass

# my add, list of possible values --LK
GRAVITY_list = [FL_North, FL_NorthEast, FL_NorthWest, FL_South, FL_SouthEast,
            FL_SouthWest, FL_East, FL_West, FL_NoGravity, FL_ForgetGravity]


# Internal colormap size. Not really very meaningful as fl_mapcolor
# and company allow color "leakage", that is, although only FL_MAX_COLS
# are kept in the internal colormap, the server might have substantially
# more colors allocated
FL_MAX_COLORS = 1024
FL_MAX_COLS = FL_MAX_COLORS


# FL graphics state information. Some are redundant.

Font = XID    # cty.c_ulong
Atom = cty.c_ulong

# /usr/include/X11/Xlib.h 1044
class XFontProp(cty.Structure):
    """XFontProp class
    
    Attributes
    ----------
        name : long_pos
            Atom
        card32 : long_pos
            *todo*
    """
    _fields_ = [
        ('name', Atom),
        ('card32', cty.c_ulong), ]

# /usr/include/X11/Xlib.h 1035
class XCharStruct(cty.Structure):
    """XCharStruct class
    
    Attributes
    ----------
        lbearing : short
            *todo*
        rbearing : short
            *todo*
        width : short
            *todo*
        ascent : short
            *todo*
        descent : short
            *todo*
        attributes : ushort
            *todo*
    """
    _fields_ = [
        ('lbearing', cty.c_short),
        ('rbearing', cty.c_short),
        ('width', cty.c_short),
        ('ascent', cty.c_short),
        ('descent', cty.c_short),
        ('attributes',  cty.c_ushort), ]

# /usr/include/X11/Xlib.h 1050
class XFontStruct(cty.Structure):
    """XFontStruct class
    
    Attributes
    ----------
        ext_data : pointer to XExtData
            *todo*
        fid : long_pos
            Font
        direction : int_pos
            *todo*
        min_char_or_byte2 : int_pos
            *todo*
        max_char_or_byte2 : int_pos
            *todo*
        min_byte1 : int_pos
            *todo*
        max_byte1 : int_pos
            *todo*
        all_chars_exist : int
            *todo*
        default_char : int_pos
            *todo*
        n_properties : int
            *todo*
        properties : pointer to XFontProp
            *todo*
        min_bounds : XCharStruct instance
            *todo*
        max_bounds : XCharStruct instance
            *todo*
        per_char : pointer to XCharStruct
            *todo*
        ascent : int
            *todo*
        descent : int
            *todo*
    """
    _fields_ = [
        ('ext_data', cty.POINTER(XExtData)),
        ('fid', Font),
        ('direction', cty.c_uint),
        ('min_char_or_byte2', cty.c_uint),
        ('max_char_or_byte2', cty.c_uint),
        ('min_byte1', cty.c_uint),
        ('max_byte1', cty.c_uint),
        ('all_chars_exist', cty.c_int),
        ('default_char', cty.c_uint),
        ('n_properties', cty.c_int),
        ('properties', cty.POINTER(XFontProp)),
        ('min_bounds', XCharStruct),
        ('max_bounds', XCharStruct),
        ('per_char', cty.POINTER(XCharStruct)),
        ('ascent', cty.c_int),
        ('descent', cty.c_int), ]


Colormap = XID    # cty.c_ulong


# /usr/include/X11/Xlib.h 225
class _XGC(cty.Structure):
    pass
GC = cty.POINTER(_XGC)

class FL_State(cty.Structure):
    """FL_State class
    
    Attributes
    ----------
        xvinfo : pointer to XVisualInfo
            *todo*
        cur_fnt : pointer to XFontStruct
            *todo*
        colormap : long_pos
            Colormap
        trailblazer : long_pos
            Window
        vclass : int
            *todo*
        depth : int
            *todo*
        rgb_bits : int
            *todo*
        dithered : int
            *todo*
        pcm : int
            *todo*
        gc : array of 16 GC
            *todo*
        textgc : array of 16 GC
            *todo*
        dimmedGC', GC
            *todo*
        lut : array of 1024 long_pos
            *todo*
        rshift : int_pos
            *todo*
        rmask : int_pos
            *todo*
        rbits : int_pos
            *todo*
        gshift : int_pos
            *todo*
        gmask : int_pos
            *todo*
        gbits : int_pos
            *todo*
        bshift : int_pos
            *todo*
        bmask : int_pos
            *todo*
        bbits : int_pos
            *todo*
    """
    _fields_ = [
        ('xvinfo', cty.POINTER(XVisualInfo)),
        ('cur_fnt', cty.POINTER(XFontStruct)),
        ('colormap', Colormap),
        ('trailblazer', Window),
        ('vclass', cty.c_int),
        ('depth', cty.c_int),
        ('rgb_bits', cty.c_int),
        ('dithered', cty.c_int),
        ('pcm', cty.c_int),
        ('gc', GC * 16),
        ('textgc', GC * 16),
        ('dimmedGC', GC),
        ('lut', cty.c_ulong * 1024),
        ('rshift', cty.c_uint),
        ('rmask', cty.c_uint),
        ('rbits', cty.c_uint),
        ('gshift', cty.c_uint),
        ('gmask', cty.c_uint),
        ('gbits', cty.c_uint),
        ('bshift', cty.c_uint),
        ('bmask', cty.c_uint),
        ('bbits', cty.c_uint), ]

# FL_STATE placeholder (backwards)


# Global variables
# /usr/include/X11/Xlib.h 266
class _XDisplay(cty.Structure):
    _fields_ = []

Display = _XDisplay


# Fonts related

FL_MAX_FONTSIZES = 10

class FL_FONT(cty.Structure):
    """Font class

    Attributes
    ----------
        fs : array of pointer to XFontStruct
            cached fontstruct
        size : array of short
            cached sizes
        nsize : short
            cached so far
        fname : str
            filename without size info
    """
    _fields_ = [
        ('fs', cty.POINTER(XFontStruct) * FL_MAX_FONTSIZES),
        ('size', cty.c_short * FL_MAX_FONTSIZES),
        ('nsize', cty.c_short),
        ('fname', cty.c_char * 80), ]


# /usr/include/X11/Xlib.h 439
class XPoint(cty.Structure):
    """XPoint class
    
    Attributes
    ----------
        xpos : short
            horizontal position of a point
        ypos : short
            vertical position of a point
    """
    pass
FL_POINT = XPoint

# /usr/include/X11/Xlib.h 444
class XRectangle(cty.Structure):
    """XRectangle class
    
    Attributes
    ----------
        xpos : short
            horizontal position of rectangle
        ypos : short
            vertical position of rectangle
        width : ushort
            width of rectangle
        height : ushort
            height of rectangle
    """
    pass
FL_RECT = XRectangle


# Line attributes

# values for unnamed enumeration
FL_SOLID = 0                 #LineSolid
FL_USERDASH = 1               #LineOnOffDash
FL_USERDOUBLEDASH = 2        #LineDoubleDash
FL_DOT = 3
FL_DOTDASH = 4
FL_DASH = 5
FL_LONGDASH = 6

class admitted_values_for_LINESTYLE(object):
    """Line styles
    
    Admitted values
    ---------------
        FL_SOLID
            Solid line. Default and most efficient
        FL_USERDASH
            Dashed line, but the dash pattern is used-definable via
            fl_dashedlinestyle(). Only the odd numbered segments are
            drawn with the foreground color
        FL_USERDOUBLEDASH
            Similar to FL_LINE_USERDASH but both even and odd numbered
            segments are drawn, with the even numbered segments drawn
            in the background color (as set by fl_bk_color())
        FL_DOT
            Dotted line [....]
        FL_DOTDASH
            Dash-dot-dash line [-.-.]
        FL_DASH
            Dashed line [----]
        FL_LONGDASH
            Long dashed line [--------]
    """
    pass

# my add, list of possible values --LK
LINESTYLE_list = [FL_SOLID, FL_USERDASH, FL_USERDOUBLEDASH, FL_DOT,
                  FL_DOTDASH, FL_DASH, FL_LONGDASH]


# *** start - from /usr/include/X11/X.h ***
# Input Event Masks. Used as event-mask window attribute and as arguments
# to Grab requests.  Not to be confused with event names.
NoEventMask = 0L
KeyPressMask = (1 << 0)                  # 1
KeyReleaseMask = (1 << 1)                # 2
ButtonPressMask = (1 << 2)               # 4
ButtonReleaseMask = (1 << 3)             # 8
EnterWindowMask = (1 << 4)               # 16
LeaveWindowMask = (1 << 5)               # 32
PointerMotionMask = (1 << 6)             # 64
PointerMotionHintMask = (1 << 7)         # 128
Button1MotionMask = (1 << 8)             # 256
Button2MotionMask = (1 << 9)             # 512
Button3MotionMask = (1 << 10)            # 1024
Button4MotionMask = (1 << 11)            # 2048
Button5MotionMask = (1 << 12)            # 4096
ButtonMotionMask = (1 << 13)             # 8192
KeymapStateMask = (1 << 14)              # 16384
ExposureMask = (1 << 15)                 # 32768
VisibilityChangeMask = (1 << 16)         # 65536
StructureNotifyMask = (1 << 17)          # 131072
ResizeRedirectMask = (1 << 18)           # 262144
SubstructureNotifyMask = (1 << 19)       # 524288
SubstructureRedirectMask = (1 << 20)     # 1048576
FocusChangeMask = (1 << 21)              # 2097152
ColormapChangeMask = (1 << 23)           # 4194304
OwnerGrabButtonMask = (1 << 24)          # 8388608
# Key masks. Used as modifiers to GrabButton and GrabKey, results of
# QueryPointer, state in various key-, mouse-, and button-related events.
ShiftMask = (1 << 0)
LockMask = (1 << 1)
ControlMask = (1 << 2)
Mod1Mask = (1 << 3)
Mod2Mask = (1 << 4)
Mod3Mask = (1 << 5)
Mod4Mask = (1 << 6)
Mod5Mask = (1 << 7)
# button masks.  Used in same manner as Key masks above. Not to be confused
# with button names below.
Button1Mask = (1 << 8)
Button2Mask = (1 << 9)
Button3Mask = (1 << 10)
Button4Mask = (1 << 11)
Button5Mask = (1 << 12)
AnyModifier = (1 << 15)       # used in GrabButton, GrabKey
# *** end - from /usr/include/X11/X.h ***


# All registerable events, including Client Message
FL_ALL_EVENT = (KeyPressMask | KeyReleaseMask | \
        ButtonPressMask | ButtonReleaseMask | EnterWindowMask | \
        LeaveWindowMask | ButtonMotionMask | PointerMotionMask)

# my add, list of possible values --LK
INPUTEVENTMASK_list = [NoEventMask, KeyPressMask, KeyReleaseMask, \
        ButtonPressMask, ButtonReleaseMask, EnterWindowMask, \
        LeaveWindowMask, PointerMotionMask, PointerMotionHintMask, \
        Button1MotionMask, Button2MotionMask, Button3MotionMask, \
        Button4MotionMask, Button5MotionMask, ButtonMotionMask, \
        KeymapStateMask, ExposureMask, VisibilityChangeMask,
        StructureNotifyMask, ResizeRedirectMask, SubstructureNotifyMask,\
        SubstructureRedirectMask, FocusChangeMask, ColormapChangeMask,
        OwnerGrabButtonMask]


# Resources

# values for enumeration 'FL_RTYPE'
FL_RTYPE = cty.c_int  # enum
FL_NONE = 0
FL_SHORT = 10
FL_BOOL = 11
FL_INT = 12
FL_LONG = 13
FL_FLOAT = 14
FL_STRING = 15

class admitted_values_for_RESOURCETYPE(object):
    """Types for resources
    
    Admitted values
    ---------------
        FL_NONE
            type for variables not to be used (or not available)
        FL_SHORT
            type for short variable
        FL_BOOL
            type for boolean variable (int)
        FL_INT
            type for int variable
        FL_LONG
            type for long variable
        FL_FLOAT
            type for float variable
        FL_STRING
            type for char[]/string variable
    """
    pass

# my add, list of possible values --LK
RTYPE_list = [FL_NONE, FL_SHORT, FL_BOOL, FL_INT, FL_LONG, FL_FLOAT,
              FL_STRING]

class FL_RESOURCE(cty.Structure):
    """XForms Library built-in resource.
    
    Attributes
    ----------
        res_name : str
            resource name
        res_class : str
            resource class
        type : int
            variable type, e.g. FL_INT, FL_FLOAT, FL_BOOL, etc..
        var : pointer to any type
            address for the variable
        defval : str
            default setting in string form
        nbytes : int
            size used only if var has 'str' type

    List of resources
    -----------------
        rgamma
            class Gamma, type FL_FLOAT, default value 1.0
        ggamma
            class Gamma, type FL_FLOAT, default value 1.0
        bgamma
            class Gamma, type FL_FLOAT, default value 1.0
        visual
            class Visual, type FL_STRING, default value best
        depth
            class Depth, type FL_INT, default value best
        doubleBuffer
            class DoubleBuffer, type FL_BOOL, default value true
        privateColormap
            class PrivateColormap, type FL_BOOL, default value false
        standardColormap
            class StandardColormap, type FL_BOOL, default value false
        sharedColormap
            class SharedColormap, type FL_BOOL, default value false
        pupFontSize
            class PupFontSize, type FL_INT, default value 12pt
        buttonFontSize
            class FontSize, type FL_INT, default value 10pt
        sliderFontSize
            class FontSize, type FL_INT, default value 10pt
        inputFontSize
            class FontSize, type FL_INT, default value 10pt
        browserFontSize
            class FontSize, type FL_INT, default value 10pt
        menuFontSize
            class FontSize, type FL_INT, default value 10pt
        choiceFontSize
            class FontSize, type FL_INT, default value 10pt
        ulPropWidth
            class ULPropWidth, type FL_BOOL, default value true
        ulThickness
            class ULThickness, type FL_INT, default value 1
        scrollbarType
            class ScrollbarType, type FL_STRING, default value thin
        coordUnit
            class CoordUnit, type FL_STRING, default value pixel
        borderWidth
            class BorderWidth, type FL_INT, default value 1

        "best" means that the XForms Library by default selects a
        visual that has the most depth.
    """
    _fields_ = [
        ('res_name', STRING),           # resource name
        ('res_class', STRING),          # resource class
        ('type', FL_RTYPE),             # FL_INT, FL_FLOAT, FL_BOOL, etc..
        ('var', cty.c_void_p),          # address for the variable
        ('defval', STRING),             # default setting in string form
        ('nbytes', cty.c_int), ]        # size used only for strings


# values for enumeration 'XrmOptionKind'
XrmOptionKind = cty.c_int       # enum
XrmoptionNoArg = 0      # Value is specified in OptionDescRec.value
XrmoptionIsArg = 1      # Value is the option string itself
XrmoptionStickyArg = 2  # Value is characters immediately following option
XrmoptionSepArg = 3     # Value is next argument in argv
XrmoptionResArg = 4     # Resource and value in next argument in argv
XrmoptionSkipArg = 5    # Ignore this option and the next argument in argv
XrmoptionSkipLine = 6   # Ignore this option and the rest of argv
XrmoptionSkipNArgs = 7

class admitted_values_for_XrmOptionKind(object):
    """XrmOptionKind
    
    Admitted values
    ---------------
        XrmoptionNoArg
            Value is specified in OptionDescRec.value
        XrmoptionIsArg
            Value is the option string itself
        XrmoptionStickyArg
            Value is characters immediately following option
        XrmoptionSepArg
            Value is next argument in argv
        XrmoptionResArg
            Resource and value in next argument in argv
        XrmoptionSkipArg
            Ignore this option and the next argument in argv
        XrmoptionSkipLine
            Ignore this option and the rest of argv
        XrmoptionSkipNArgs
            Ignore this option and the next OptionDescRes.value
            arguments in argv
    """


# /usr/include/X11/Xresource.h 345
class XrmOptionDescRec(cty.Structure):
    """XrmOptionDescRec class

    Attributes
    ----------
        option : str
            Option abbreviation in sys.argv (prefixed with '-')
        specifier : str
            resource specifier (starting with '*' or '.')
        argKind : int
            Which style of option it is. Values XrmoptionNoArg,
            XrmoptionIsArg, XrmoptionStickyArg, XrmoptionSepArg,
            XrmoptionResArg, XrmoptionSkipArg, XrmoptionSkipLine,
            XrmoptionSkipNArgs
        value : str
            Value to provide if argKind is XrmoptionNoArg
    """
    _fields_ = [
        ('option', STRING),
        ('specifier', STRING),
        ('argKind', XrmOptionKind),
        ('value', XPointer), ]

XrmOptionDescList = cty.POINTER(XrmOptionDescRec)

FL_CMD_OPT = XrmOptionDescRec

FL_resource = FL_RESOURCE


KeySym = XID    # cty.c_ulong


# All Form control variables. Named closely as its resource name

class FL_IOPT(cty.Structure):
    """Form control variables.

    Attributes
    ----------
        rgamma : float
            *todo*
        ggamma : float
            *todo*
        bgamma : float
            *todo*
        debug : int
            *todo*
        sync : int
            *todo*
        depth : int
            *todo*
        vclass : int
            *todo*
        doubleBuffer : int
            *todo*
        ulPropWidth : int
            underline stuff
        ulThickness : int
            *todo*
        buttonFontSize : int
            *todo*
        sliderFontSize : int
            *todo*
        inputFontSize : int
            *todo*
        browserFontSize : int
            *todo*
        menuFontSize : int
            *todo*
        choiceFontSize : int
            *todo*
        labelFontSize : int
            all other labels fonts
        pupFontSize : int
            font size for pop-up menus
        pupFontStyle : int
            font style for pop-up menus
        privateColormap : int
            *todo*
        sharedColormap : int
            *todo*
        standardColormap : int
            *todo*
        scrollbarType : int
            *todo*
        backingStore : int
            *todo*
        coordUnit : int
            *todo*
        borderWidth : int
            *todo*
        safe : int
            *todo*
        rgbfile : str
            where RGB file is
        vname : str (24 chars)
            *todo*
    """
    _fields_ = [
        ('rgamma', cty.c_float),
        ('ggamma', cty.c_float),
        ('bgamma', cty.c_float),
        ('debug', cty.c_int),
        ('sync', cty.c_int),
        ('depth', cty.c_int),
        ('vclass', cty.c_int),
        ('doubleBuffer', cty.c_int),
        ('ulPropWidth', cty.c_int),          # underline stuff
        ('ulThickness', cty.c_int),
        ('buttonFontSize', cty.c_int),
        ('sliderFontSize', cty.c_int),
        ('inputFontSize', cty.c_int),
        ('browserFontSize', cty.c_int),
        ('menuFontSize', cty.c_int),
        ('choiceFontSize', cty.c_int),
        ('labelFontSize', cty.c_int),        # all other labels fonts
        ('pupFontSize', cty.c_int),          # font for pop-up menus
        ('pupFontStyle', cty.c_int),
        ('privateColormap', cty.c_int),
        ('sharedColormap', cty.c_int),
        ('standardColormap', cty.c_int),
        ('scrollbarType', cty.c_int),
        ('backingStore', cty.c_int),
        ('coordUnit', cty.c_int),
        ('borderWidth', cty.c_int),
        ('safe', cty.c_int),
        ('rgbfile', STRING),                # where RGB file is
        ('vname', cty.c_char * 24), ]

buttonLabelSize = FL_IOPT().buttonFontSize
sliderLabelSize = FL_IOPT().sliderFontSize
inputLabelSize = FL_IOPT().inputFontSize


# Program default masks

# values for unnamed enumeration
FL_PDDepth = 2                      # (1<<1)
FL_PDClass = 4                      # (1<<2)
FL_PDDouble = 8                     # (1<<3)
FL_PDSync = 16                      # (1<<4)
FL_PDPrivateMap = 32                # (1<<5)
FL_PDScrollbarType = 64             # (1<<6)
FL_PDPupFontSize = 128              # (1<<7)
FL_PDButtonFontSize = 256           # (1<<8)
FL_PDInputFontSize = 512            # (1<<9)
FL_PDSliderFontSize  = 1024         # (1<<10)
FL_PDVisual = 2048                  # (1<<11)
FL_PDULThickness = 4096             # (1<<12)
FL_PDULPropWidth = 8192             # (1<<13)
FL_PDBS = 16384                     # (1<<14)
FL_PDCoordUnit = 32768              # (1<<15)
FL_PDDebug = 65536                  # (1<<16)
FL_PDSharedMap = 131072             # (1<<17)
FL_PDStandardMap = 262144           # (1<<18)
FL_PDBorderWidth = 524288           # (1<<19)
FL_PDSafe = 1048576                 # (1<<20)
FL_PDMenuFontSize = 2097152         # (1<<21)
FL_PDBrowserFontSize = 4194304      # (1<<22)
FL_PDChoiceFontSize = 8388608       # (1<<23)
FL_PDLabelFontSize = 16777216       # (1<<24)

FL_PDButtonLabelSize = FL_PDButtonFontSize
FL_PDSliderLabelSize = FL_PDSliderFontSize
FL_PDInputLabelSize = FL_PDInputFontSize
FL_PDButtonLabel = FL_PDButtonLabelSize

class admitted_values_for_PRGDEFAULTS(object):
    """Program default masks
    
    Admitted values
    ---------------
        FL_PDDepth
            Preferred visual depth (depth)
        FL_PDClass
            *todo*
        FL_PDDouble
            Simulates double buffering (doubleBuffer)
        FL_PDSync
            *todo*
        FL_PDPrivateMap
            Selects private colormap if appropriate (privateColormap)
        FL_PDScrollbarType
            Scrollbar type to use for browser and input (scrollbarType)
        FL_PDPupFontSize
            Font size for pop-ups (PupFontSize)
        FL_PDButtonFontSize
            Default button label font size (buttonFontSize)
        FL_PDInputFontSize
            Input label and text font size (menuFontSize)
        FL_PDSliderFontSize
            Slider label and text font size
        FL_PDVisual
            Preferred visual, e.g. TrueColor .. (vclass)
        FL_PDULThickness
            Underline thickness (ulThickness)
        FL_PDULPropWidth
            Underline width, 0 for constant width fonts (ulPropWidth)
        FL_PDBS
            Turn BackingStore on or off (backingStore)
        FL_PDCoordUnit
            Unit of measure for screen coordinates, e.g. pixel, mm,
            point, etc.. (coordUnit)
        FL_PDDebug
            Debug level (0-5) (debug)
        FL_PDSharedMap
            Forces use of shared colormap (sharedColormap)
        FL_PDStandardMap
            Forces use of standard colormap (standardColormap)
        FL_PDBorderWidth
            Default border width (borderWidth)
        FL_PDSafe
            *todo*
        FL_PDMenuFontSize
            Menu label font size (menuFontSize)
        FL_PDBrowserFontSize
            Browser label and text font size (browserFontSize)
        FL_PDChoiceFontSize
            Choice label and choice text font size (choiceFontSize)
        FL_PDLabelFontSize
            Label font size for all other flobjects, e.g. box, pixmap
             etc.. (labelFontSize)
        FL_PDButtonLabelSize or FL_PDButtonLabel
            Default button label font size (buttonFontSize)
        FL_PDSliderLabelSize = FL_PDSliderFontSize
            Default slider label font size
        FL_PDInputLabelSize = FL_PDInputFontSize
            Input label and text font size (menuFontSize)
    """
    pass

# my add, list of possible values --LK
PRGDEFAULTS_list = [FL_PDDepth, FL_PDClass, FL_PDDouble, FL_PDSync,
                    FL_PDPrivateMap, FL_PDScrollbarType, FL_PDPupFontSize,
                    FL_PDButtonFontSize, FL_PDInputFontSize,
                    FL_PDSliderFontSize, FL_PDVisual, FL_PDULThickness,
                    FL_PDULPropWidth, FL_PDBS, FL_PDCoordUnit, FL_PDDebug,
                    FL_PDSharedMap, FL_PDStandardMap, FL_PDBorderWidth,
                    FL_PDSafe, FL_PDMenuFontSize, FL_PDBrowserFontSize,
                    FL_PDChoiceFontSize, FL_PDLabelFontSize,
                    FL_PDButtonLabelSize, FL_PDSliderLabelSize,
                    FL_PDInputLabelSize, FL_PDButtonLabel]


# How we pack and unpack colors
FL_PCTYPE = cty.c_ubyte         # primary color type
FL_PCBITS = 8
FL_PCMAX = (1 << FL_PCBITS) - 1

FL_PACKED4 = cty.c_uint
FL_PACKED = FL_PACKED4

FL_RMASK = 0x000000ff
""""""
FL_RSHIFT = 0
""""""
FL_GMASK = 0x0000ff00
""""""
FL_GSHIFT = 8
""""""
FL_BMASK = 0x00ff0000
""""""
FL_BSHIFT = 16
""""""
FL_AMASK = 0xff000000
""""""
FL_ASHIFT = 24
""""""


class FL_RGB2PIXEL_(cty.Structure):
    """FL_RGB2PIXEL_ class

    Attributes
    ----------
        rshift : int_pos
            *todo*
        rmask' : int_pos
            *todo*
        rbits : int_pos
            *todo*
        gshift : int_pos
            *todo*
        gmask' : int_pos
            *todo*
        gbits : int_pos
            *todo*
        bshift : int_pos
            *todo*
        bmask : int_pos
            *todo*
        bbits : int_pos
            *todo*
        bits_per_rgb : int
            *todo*
        colormap_size : int
            *todo*
    """
    _fields_ = [
        ('rshift', cty.c_uint),
        ('rmask', cty.c_uint),
        ('rbits', cty.c_uint),
        ('gshift', cty.c_uint),
        ('gmask', cty.c_uint),
        ('gbits', cty.c_uint),
        ('bshift', cty.c_uint),
        ('bmask', cty.c_uint),
        ('bbits', cty.c_uint),
        ('bits_per_rgb', cty.c_int),
        ('colormap_size', cty.c_int), ]

FL_RGB2PIXEL = FL_RGB2PIXEL_


Mask = cty.c_ulong
Time = cty.c_ulong
GContext = XID          # cty.c_ulong
KeyCode = cty.c_ubyte


# /usr/include/X11/Xlib.h 416
class XWindowChanges(cty.Structure):
    """X11 XWindowChanges class
    
    Attributes
    ----------
        xpos : int
            *todo*
        ypos : int
            *todo*
        width : int
            *todo*
        height : int
            *todo*
        border_width : int
            *todo*
        sibling : long_pos
            Window
        stack_mode : int
            *todo*
    """
    _fields_ = [
        ('x', cty.c_int),
        ('y', cty.c_int),
        ('width', cty.c_int),
        ('height', cty.c_int),
        ('border_width', cty.c_int),
        ('sibling', Window),
        ('stack_mode', cty.c_int), ]


# /usr/include/X11/Xlib.h 426
class XColor(cty.Structure):
    """X11 XColor class
    
    Attributes
    ----------
        pixel : long_pos
            *todo*
        red : ushort
            *todo*
        green : ushort
            *todo*
        blue :  ushort
            *todo*
        flags : char
            *todo*
        pad : char
            *todo*
    """
    _fields_ = [
        ('pixel', cty.c_ulong),
        ('red',  cty.c_ushort),
        ('green',  cty.c_ushort),
        ('blue',  cty.c_ushort),
        ('flags', cty.c_char),
        ('pad', cty.c_char), ]


# /usr/include/X11/Xlib.h 435
class XSegment(cty.Structure):
    """X11 XSegment class
    
    Attributes
    ----------
        x1 : short
            *todo*
        y1 : short
            *todo*
        x2 : short
            *todo*
        y2 : short
            *todo*
    """
    _fields_ = [
        ('x1', cty.c_short),
        ('y1', cty.c_short),
        ('x2', cty.c_short),
        ('y2', cty.c_short), ]


XPoint._fields_ = [
    ('x', cty.c_short),
    ('y', cty.c_short),
]


# /usr/include/X11/Xlib.h 444
XRectangle._fields_ = [
    ('x', cty.c_short),
    ('y', cty.c_short),
    ('width',  cty.c_ushort),
    ('height',  cty.c_ushort),
]


# /usr/include/X11/Xlib.h 450
class XArc(cty.Structure):
    """X11 XArc class
    
    Attributes
    ----------
        xpos : short
            *todo*
        ypos : short
            *todo*
        width : ushort
            *todo*
        height : ushort
            *todo*
        angle1 : short
            *todo*
        angle2 : short
            *todo*
    """
    _fields_ = [
        ('x', cty.c_short),
        ('y', cty.c_short),
        ('width',  cty.c_ushort),
        ('height',  cty.c_ushort),
        ('angle1', cty.c_short),
        ('angle2', cty.c_short), ]


# /usr/include/X11/Xlib.h 464
class XKeyboardControl(cty.Structure):
    """X11 XKeyboardControl class
    
    Attributes
    ----------
        key_click_percent : int
            *todo*
        bell_percent : int
            *todo*
        bell_pitch : int
            *todo*
        bell_duration : int
            *todo*
        led : int
            *todo*
        led_mode : int
            *todo*
        key : int
            *todo*
        auto_repeat_mode : int
            *todo*
    """
    _fields_ = [
        ('key_click_percent', cty.c_int),
        ('bell_percent', cty.c_int),
        ('bell_pitch', cty.c_int),
        ('bell_duration', cty.c_int),
        ('led', cty.c_int),
        ('led_mode', cty.c_int),
        ('key', cty.c_int),
        ('auto_repeat_mode', cty.c_int), ]


# /usr/include/X11/Xlib.h 475
class XKeyboardState(cty.Structure):
    """X11 XKeyboardState class

    Attributes
    ----------
        key_click_percent : int
            *todo*
        bell_percent : int
            *todo*
        bell_pitch : int_pos,
            *todo*
        bell_duration : int_pos
            *todo*
        led_mask : long_pos
            *todo*
        global_auto_repeat : int
            *todo*
        auto_repeats : array of 32 char
            *todo*
    """
    _fields_ = [
        ('key_click_percent', cty.c_int),
        ('bell_percent', cty.c_int),
        ('bell_pitch', cty.c_uint),
        ('bell_duration', cty.c_uint),
        ('led_mask', cty.c_ulong),
        ('global_auto_repeat', cty.c_int),
        ('auto_repeats', cty.c_char * 32), ]


# /usr/include/X11/Xlib.h 482
class XTimeCoord(cty.Structure):
    """X11 XTimeCoord class
    
    Attributes
    ----------
        time : long_pos
            Time
        xpos : short
            *todo*
        ypos : short
            *todo*
    """
    _fields_ = [
        ('time', Time),
        ('x', cty.c_short),
        ('y', cty.c_short), ]


# /usr/include/X11/Xlib.h 489
class XModifierKeymap(cty.Structure):
    """X11 XModifierKeymap class

    Attributes
    ----------
        max_keypermod : int
            *todo*
        modifiermap : pointer to KeyCode
            *todo*
    """
    _fields_ = [
        ('max_keypermod', cty.c_int),
        ('modifiermap', cty.POINTER(KeyCode)), ]


Display = _XDisplay


# /usr/include/X11/Xlib.h 501
class _XPrivate(cty.Structure):
    _fields_ = []


# /usr/include/X11/Xlib.h 502
class _XrmHashBucketRec(cty.Structure):
    _fields_ = []


# /usr/include/X11/Xlib.h 582
class XKeyEvent(cty.Structure):
    """X11 XKeyEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        window : long_pos
            Window
        root : long_pos
            Window
        subwindow : long_pos
            Window
        time : long_pos
            Time
        xpos : int
            *todo*
        ypos : int
            *todo*
        x_root : int
            *todo*
        y_root : int
            *todo*
        state : int_pos
            *todo*
        keycode : int_pos
            *todo*
        same_screen : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('window', Window),
        ('root', Window),
        ('subwindow', Window),
        ('time', Time),
        ('x', cty.c_int),
        ('y', cty.c_int),
        ('x_root', cty.c_int),
        ('y_root', cty.c_int),
        ('state', cty.c_uint),
        ('keycode', cty.c_uint),
        ('same_screen', cty.c_int), ]
XKeyPressedEvent = XKeyEvent
XKeyReleasedEvent = XKeyEvent


# /usr/include/X11/Xlib.h 600
class XButtonEvent(cty.Structure):
    """X11 XButtonEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        window : long_pos
            Window
        root : long_pos
            Window
        subwindow : long_pos
            Window
        time : long_pos
            Time
        xpos : int
            *todo*
        ypos : int
            *todo*
        x_root : int
            *todo*
        y_root : int
            *todo*
        state : int_pos
            *todo*
        button : int_pos
            *todo*
        same_screen : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('window', Window),
        ('root', Window),
        ('subwindow', Window),
        ('time', Time),
        ('x', cty.c_int),
        ('y', cty.c_int),
        ('x_root', cty.c_int),
        ('y_root', cty.c_int),
        ('state', cty.c_uint),
        ('button', cty.c_uint),
        ('same_screen', cty.c_int), ]
XButtonPressedEvent = XButtonEvent
XButtonReleasedEvent = XButtonEvent


# /usr/include/X11/Xlib.h 618
class XMotionEvent(cty.Structure):
    """X11 XMotionEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        window : long_pos
            Window
        root : long_pos
            Window
        subwindow : long_pos
             Window
        time : long_pos
            Time
        xpos : int
            *todo*
        ypos : int
            *todo*
        x_root : int
            *todo*
        y_root : int
            *todo*
        state : int_pos
            *todo*
        is_hint : char
            *todo*
        same_screen : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('window', Window),
        ('root', Window),
        ('subwindow', Window),
        ('time', Time),
        ('x', cty.c_int),
        ('y', cty.c_int),
        ('x_root', cty.c_int),
        ('y_root', cty.c_int),
        ('state', cty.c_uint),
        ('is_hint', cty.c_char),
        ('same_screen', cty.c_int), ]
XPointerMovedEvent = XMotionEvent


# /usr/include/X11/Xlib.h 641
class XCrossingEvent(cty.Structure):
    """X11 XCrossingEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        window : long_pos
            Window
        root : long_pos
            Window
        subwindow : long:pos
            Window
        time : long_pos
            Time
        xpos : int
            *todo*
        ypos : int
            *todo*
        x_root : int
            *todo*
        y_root : int
            *todo*
        mode : int
            *todo*
        detail : int
            *todo*
        same_screen : int
            *todo*
        focus : int
            *todo*
        state : int_pos
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('window', Window),
        ('root', Window),
        ('subwindow', Window),
        ('time', Time),
        ('x', cty.c_int),
        ('y', cty.c_int),
        ('x_root', cty.c_int),
        ('y_root', cty.c_int),
        ('mode', cty.c_int),
        ('detail', cty.c_int),
        ('same_screen', cty.c_int),
        ('focus', cty.c_int),
        ('state', cty.c_uint), ]
XEnterWindowEvent = XCrossingEvent
XLeaveWindowEvent = XCrossingEvent


# /usr/include/X11/Xlib.h 659
class XFocusChangeEvent(cty.Structure):
    """X11 XFocusChangeEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        window : long_pos
            Window
        mode : int
            *todo*
        detail : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('window', Window),
        ('mode', cty.c_int),
        ('detail', cty.c_int), ]

XFocusInEvent = XFocusChangeEvent
XFocusOutEvent = XFocusChangeEvent


# /usr/include/X11/Xlib.h 671
class XKeymapEvent(cty.Structure):
    """X11 XKeymapEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : ulong
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        window : long_pos
            Window
        key_vector : array of 32 char
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('window', Window),
        ('key_vector', cty.c_char * 32), ]


# /usr/include/X11/Xlib.h 682
class XExposeEvent(cty.Structure):
    """X11 XExposeEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        window : long_pos
            Window
        xpos : int
            *todo*
        ypos : int
            *todo*
        width : int
            *todo*
        height : int
            *todo*
        count : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('window', Window),
        ('x', cty.c_int),
        ('y', cty.c_int),
        ('width', cty.c_int),
        ('height', cty.c_int),
        ('count', cty.c_int), ]


Drawable = XID    # cty.c_ulong


# /usr/include/X11/Xlib.h 695
class XGraphicsExposeEvent(cty.Structure):
    """X11 XGraphicsExposeEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        drawable : long_pos
            Drawable
        xpos : int
            *todo*
        ypos : int
            *todo*
        width : int
            *todo*
        height : int
            *todo*
        count : int
            *todo*
        major_code : int
            *todo*
        minor_code : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('drawable', Drawable),
        ('x', cty.c_int),
        ('y', cty.c_int),
        ('width', cty.c_int),
        ('height', cty.c_int),
        ('count', cty.c_int),
        ('major_code', cty.c_int),
        ('minor_code', cty.c_int), ]


# /usr/include/X11/Xlib.h 705
class XNoExposeEvent(cty.Structure):
    """X11 XNoExposeEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        drawable : long_pos
            Drawable
        major_code : int
            *todo*
        minor_code : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('drawable', Drawable),
        ('major_code', cty.c_int),
        ('minor_code', cty.c_int), ]


# /usr/include/X11/Xlib.h 714
class XVisibilityEvent(cty.Structure):
    """X11 XVisibilityEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        window : long_pos
            Window
        state : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('window', Window),
        ('state', cty.c_int), ]


# /usr/include/X11/Xlib.h 727
class XCreateWindowEvent(cty.Structure):
    """X11 XCreateWindowEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        parent : long_pos
            Window
        window : long_pos
            Window
        xpos : int
            *todo*
        ypos : int
            *todo*
        width : int
            *todo*
        height : int
            *todo*
        border_width : int
            *todo*
        override_redirect : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('parent', Window),
        ('window', Window),
        ('x', cty.c_int),
        ('y', cty.c_int),
        ('width', cty.c_int),
        ('height', cty.c_int),
        ('border_width', cty.c_int),
        ('override_redirect', cty.c_int), ]


# /usr/include/X11/Xlib.h 736
class XDestroyWindowEvent(cty.Structure):
    """X11 XDestroyWindowEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        event : long_pos
            Window
        window : long_pos
            Window
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('event', Window),
        ('window', Window), ]


# /usr/include/X11/Xlib.h 746
class XUnmapEvent(cty.Structure):
    """X11 XUnmapEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        event : long_pos
            Window
        window : long_pos
            Window
        from_configure : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('event', Window),
        ('window', Window),
        ('from_configure', cty.c_int), ]


# /usr/include/X11/Xlib.h 756
class XMapEvent(cty.Structure):
    """X11 XMapEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        event : long_pos
            Window
        window : long_pos
            Window
        override_redirect : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('event', Window),
        ('window', Window),
        ('override_redirect', cty.c_int), ]


# /usr/include/X11/Xlib.h 765
class XMapRequestEvent(cty.Structure):
    """X11 XMapRequestEvent class
    
    Attributes
    ----------
        type : int_pos
            *todo*
        serial : ulong_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        parent : long_pos
            Window
        window : long_pos
            Window
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('parent', Window),
        ('window', Window), ]


# /usr/include/X11/Xlib.h 777
class XReparentEvent(cty.Structure):
    """X11 XReparentEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        event : long_pos
            Window
        window : long_pos
            Window
        parent : long_pos
            Window
        xpos : int
            *todo*
        ypos : int
            *todo*
        override_redirect : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('event', Window),
        ('window', Window),
        ('parent', Window),
        ('x', cty.c_int),
        ('y', cty.c_int),
        ('override_redirect', cty.c_int), ]


# /usr/include/X11/Xlib.h 791
class XConfigureEvent(cty.Structure):
    """X11 XConfigureEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        event : long_pos
            Window
        window : long_pos
            Window
        xpos : int
            *todo*
        ypos : int
            *todo*
        width : int
            *todo*
        height : int
            *todo*
        border_width : int
            *todo*
        above : long_pos
            Window
        override_redirect : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('event', Window),
        ('window', Window),
        ('x', cty.c_int),
        ('y', cty.c_int),
        ('width', cty.c_int),
        ('height', cty.c_int),
        ('border_width', cty.c_int),
        ('above', Window),
        ('override_redirect', cty.c_int), ]


# /usr/include/X11/Xlib.h 801
class XGravityEvent(cty.Structure):
    """X11 XGravityEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        event : long_pos
            Window
        window : long_pos
            Window
        xpos : int
            *todo*
        ypos : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('event', Window),
        ('window', Window),
        ('x', cty.c_int),
        ('y', cty.c_int), ]


# /usr/include/X11/Xlib.h 810
class XResizeRequestEvent(cty.Structure):
    """X11 XResizeRequestEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        window : long_pos
            Window
        width : int
            *todo*
        height : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('window', Window),
        ('width', cty.c_int),
        ('height', cty.c_int), ]


# /usr/include/X11/Xlib.h 825
class XConfigureRequestEvent(cty.Structure):
    """X11 XConfigureRequestEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        parent : long_pos
            Window
        window : long_pos
            Window
        xpos : int
            *todo*
        ypos : int
            *todo*
        width : int
            *todo*
        height : int
            *todo*
        border_width : int
            *todo*
        above : long_pos
            Window
        detail : int
            *todo*
        value_mask : long_pos
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('parent', Window),
        ('window', Window),
        ('x', cty.c_int),
        ('y', cty.c_int),
        ('width', cty.c_int),
        ('height', cty.c_int),
        ('border_width', cty.c_int),
        ('above', Window),
        ('detail', cty.c_int),
        ('value_mask', cty.c_ulong), ]


# /usr/include/X11/Xlib.h 835
class XCirculateEvent(cty.Structure):
    """X11 XCirculateEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        event : long_pos
            Window
        window : long_pos
            Window
        place : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('event', Window),
        ('window', Window),
        ('place', cty.c_int), ]


# /usr/include/X11/Xlib.h 845
class XCirculateRequestEvent(cty.Structure):
    """X11 XCirculateRequestEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : ulong
            *todo*
        send_event : int
            *todo*
        display :pointer to Display
            *todo*
        parent : long_pos
            Window
        window :  long_pos
            Window
        place : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('parent', Window),
        ('window', Window),
        ('place', cty.c_int), ]


# /usr/include/X11/Xlib.h 856
class XPropertyEvent(cty.Structure):
    """X11 XPropertyEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        window : long_pos
            Window
        atom : long_pos
            Atom
        time : long_pos
            Time
        state : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('window', Window),
        ('atom', Atom),
        ('time', Time),
        ('state', cty.c_int), ]


# /usr/include/X11/Xlib.h 866
class XSelectionClearEvent(cty.Structure):
    """X11 XSelectionClearEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        window : long_pos
            Window
        selection : long_pos
            Atom
        time : long_pos
            Time
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('window', Window),
        ('selection', Atom),
        ('time', Time), ]


# /usr/include/X11/Xlib.h 879
class XSelectionRequestEvent(cty.Structure):
    """X11 XSelectionRequestEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        owner : long_pos
            Window
        requestor : long_pos
            Window
        selection : long_pos
            Atom
        target : long_pos
            Atom
        property : long_pos
            Atom
        time : long_pos
            Time
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('owner', Window),
        ('requestor', Window),
        ('selection', Atom),
        ('target', Atom),
        ('property', Atom),
        ('time', Time), ]


# /usr/include/X11/Xlib.h 891
class XSelectionEvent(cty.Structure):
    """X11 XSelectionEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        requestor : long_pos
            Window
        selection : long_pos
            Atom
        target : long_pos
            Atom
        property : long_pos
            Atom
        time : long_pos
            Time
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('requestor', Window),
        ('selection', Atom),
        ('target', Atom),
        ('property', Atom),
        ('time', Time), ]


# /usr/include/X11/Xlib.h 906
class XColormapEvent(cty.Structure):
    """X11 XColormapEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        window : long_pos
            Window
        colormap : long_pos
            Colormap
        c_new : int
            *todo*
        state : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('window', Window),
        ('colormap', Colormap),
        ('c_new', cty.c_int),
        ('state', cty.c_int), ]


# /usr/include/X11/Xlib.h 916
class N19XClientMessageEvent4DOT_71E(cty.Union):
    """X11 N19XClientMessageEvent4DOT_71E class
    
    Attributes
    ----------
        b : array of 20 char
            *todo*
        s : array of 10 short
            *todo*
        l : array of 5 long
            *todo*
    """
    _fields_ = [
        ('b', cty.c_char * 20),
        ('s', cty.c_short * 10),
        ('l', cty.c_long * 5), ]


# /usr/include/X11/Xlib.h 921
class XClientMessageEvent(cty.Structure):
    """X11 XClientMessageEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : ulong
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        window : long_pos
            Window
        message_type : long_pos
            Atom
        format : int
            *todo*
        data : N19XClientMessageEvent4DOT_71E
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('window', Window),
        ('message_type', Atom),
        ('format', cty.c_int),
        ('data', N19XClientMessageEvent4DOT_71E), ]


# /usr/include/X11/Xlib.h 933
class XMappingEvent(cty.Structure):
    """X11 XMappingEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        window : long_pos
            Window
        request : int
            *todo*
        first_keycode : int
            *todo*
        count : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('window', Window),
        ('request', cty.c_int),
        ('first_keycode', cty.c_int),
        ('count', cty.c_int), ]


# /usr/include/X11/Xlib.h 943
class XErrorEvent(cty.Structure):
    """XErrorEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        display : pointer to Display
            *todo*
        resourceid : long_pos
            XID
        serial : long_pos
            *todo*
        error_code : ubyte
            *todo*
        request_code : ubyte
            *todo*
        minor_code : ubyte
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('resourceid', XID),
        ('serial', cty.c_ulong),
        ('error_code', cty.c_ubyte),
        ('request_code', cty.c_ubyte),
        ('minor_code', cty.c_ubyte), ]


# /usr/include/X11/Xlib.h 951
class XAnyEvent(cty.Structure):
    """X11 XAnyEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        window : long_pos
            Window
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('window', Window), ]


# /usr/include/X11/Xlib.h 967
class XGenericEvent(cty.Structure):
    """X11 XGenericEvent class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        extension : int
            *todo*
        evtype : int
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('extension', cty.c_int),
        ('evtype', cty.c_int), ]


# /usr/include/X11/Xlib.h 978
class XGenericEventCookie(cty.Structure):
    """X11 XGenericEventCookie class
    
    Attributes
    ----------
        type : int
            *todo*
        serial : long_pos
            *todo*
        send_event : int
            *todo*
        display : pointer to Display
            *todo*
        extension : int
            *todo*
        evtype : int
            *todo*
        cookie : int_pos
            *todo*
        data : pointer to void
            *todo*
    """
    _fields_ = [
        ('type', cty.c_int),
        ('serial', cty.c_ulong),
        ('send_event', cty.c_int),
        ('display', cty.POINTER(Display)),
        ('extension', cty.c_int),
        ('evtype', cty.c_int),
        ('cookie', cty.c_uint),
        ('data', cty.c_void_p), ]


# /usr/include/X11/Xlib.h 984
_XEvent._fields_ = [
    ('type', cty.c_int),
    ('xany', XAnyEvent),
    ('xkey', XKeyEvent),
    ('xbutton', XButtonEvent),
    ('xmotion', XMotionEvent),
    ('xcrossing', XCrossingEvent),
    ('xfocus', XFocusChangeEvent),
    ('xexpose', XExposeEvent),
    ('xgraphicsexpose', XGraphicsExposeEvent),
    ('xnoexpose', XNoExposeEvent),
    ('xvisibility', XVisibilityEvent),
    ('xcreatewindow', XCreateWindowEvent),
    ('xdestroywindow', XDestroyWindowEvent),
    ('xunmap', XUnmapEvent),
    ('xmap', XMapEvent),
    ('xmaprequest', XMapRequestEvent),
    ('xreparent', XReparentEvent),
    ('xconfigure', XConfigureEvent),
    ('xgravity', XGravityEvent),
    ('xresizerequest', XResizeRequestEvent),
    ('xconfigurerequest', XConfigureRequestEvent),
    ('xcirculate', XCirculateEvent),
    ('xcirculaterequest', XCirculateRequestEvent),
    ('xproperty', XPropertyEvent),
    ('xselectionclear', XSelectionClearEvent),
    ('xselectionrequest', XSelectionRequestEvent),
    ('xselection', XSelectionEvent),
    ('xcolormap', XColormapEvent),
    ('xclient', XClientMessageEvent),
    ('xmapping', XMappingEvent),
    ('xerror', XErrorEvent),
    ('xkeymap', XKeymapEvent),
    ('xgeneric', XGenericEvent),
    ('xcookie', XGenericEventCookie),
    ('pad', cty.c_long * 24), ]


# *** start - from /usr/include/X11/X.h ***
# Event names.  Used in "type" field in XEvent structures.  Not to be
# confused with event masks above.  They start from 2 because 0 and 1
# are reserved in the protocol for errors and replies.
KeyPress = 2
KeyRelease = 3
ButtonPress = 4
ButtonRelease = 5
MotionNotify = 6
EnterNotify = 7
LeaveNotify = 8
FocusIn = 9
FocusOut = 10
KeymapNotify = 11
Expose = 12
GraphicsExpose = 13
NoExpose = 14
VisibilityNotify = 15
CreateNotify = 16
DestroyNotify = 17
UnmapNotify = 18
MapNotify = 19
MapRequest = 20
ReparentNotify = 21
ConfigureNotify = 22
ConfigureRequest = 23
GravityNotify = 24
ResizeRequest = 25
CirculateNotify = 26
CirculateRequest = 27
PropertyNotify = 28
SelectionClear = 29
SelectionRequest = 30
SelectionNotify = 31
# *** end - from /usr/include/X11/X.h ***

class admitted_values_for_EventNames(object):
    """Event type names
    
    Admitted values
    ---------------
        KeyPress
            *todo*
        KeyRelease
            *todo*
        ButtonPress
            *todo*
        ButtonRelease
            *todo*
        MotionNotify
            *todo*
        EnterNotify
            *todo*
        LeaveNotify
            *todo*
        FocusIn
            *todo*
        FocusOut
            *todo*
        KeymapNotify
            *todo*
        Expose
            *todo*
        GraphicsExpose
            *todo*
        NoExpose
            *todo*
        VisibilityNotify
            *todo*
        CreateNotify
            *todo*
        DestroyNotify
            *todo*
        UnmapNotify
            *todo*
        MapNotify
            *todo*
        MapRequest
            *todo*
        ReparentNotify
            *todo*
        ConfigureNotify
            *todo*
        ConfigureRequest
            *todo*
        GravityNotify
            *todo*
        ResizeRequest
            *todo*
        CirculateNotify
            *todo*
        CirculateRequest
            *todo*
        PropertyNotify
            *todo*
        SelectionClear
            *todo*
        SelectionRequest
            *todo*
        SelectionNotify
            *todo*
    """
    pass

# my add, list of possible values --LK
# added 0, for all event types --LK
XEVENTNAMES_list = [0, KeyPress, KeyRelease, ButtonPress, ButtonRelease,
            MotionNotify, EnterNotify, LeaveNotify, FocusIn, FocusOut,
            KeymapNotify, Expose, GraphicsExpose, NoExpose, VisibilityNotify,
            CreateNotify, DestroyNotify, UnmapNotify, MapNotify, MapRequest,
            ReparentNotify, ConfigureNotify, ConfigureRequest, GravityNotify,
            ResizeRequest, CirculateNotify, CirculateRequest, PropertyNotify,
            SelectionClear, SelectionRequest, SelectionNotify]


# *** start - from /usr/include/X11/Xutil.h 139 ***
# definitions for initial window state
#WithdrawnState = 0      # for windows that are not mapped
NormalState = 1         # most applications want to start this way
IconicState = 3         # application wants to start as an icon
# *** end - from /usr/include/X11/Xutil.h ***

class admitted_values_for_initialwinstate(object):
    """initial window state
    
    Admitted values
    ---------------
        NormalState
            most applications want to start this way
        IconicState
            application wants to start as an icon
    """
    pass

# my add, list of possible values --LK
WINSTATE_list = [NormalState, IconicState]



#######################
# forms.h (bitmap.h)
# Bitmap flobject class
#######################

FL_NORMAL_BITMAP = 0

class admitted_values_for_BITMAPTYPE(object):
    """Bitmap types
    
    Admitted values
    ---------------
        FL_NORMAL_BITMAP
            normal bitmap flobject type
    """

# my add, list of possible values --LK
BITMAPTYPE_list = [FL_NORMAL_BITMAP, ]


# Defaults
FL_BITMAP_BOXTYPE = FL_NO_BOX
FL_BITMAP_COL1 = FL_COL1            # background of bitmap
FL_BITMAP_COL2 = FL_COL1            # not used currently
FL_BITMAP_LCOL = FL_LCOL            # foreground of bitmap
FL_BITMAP_ALIGN = FL_ALIGN_BOTTOM


# PIXMAP stuff

FL_NORMAL_PIXMAP = 0

class admitted_values_for_PIXMAPTYPE(object):
    """Pixmap types
    
    Admitted values
    ---------------
        FL_NORMAL_PIXMAP
            normal pixmap flobject type
    """

# my add - list of possible values --LK
PIXMAPTYPE_list = [FL_NORMAL_PIXMAP, ]


#######################
# forms.h (browser.h)
# Object class Browser
#######################

# values for enumeration 'FL_BROWSER_TYPE'
FL_BROWSER_TYPE = cty.c_int     # enum
FL_NORMAL_BROWSER = 0
FL_SELECT_BROWSER = 1
FL_HOLD_BROWSER = 2
FL_MULTI_BROWSER = 3

class admitted_values_for_FL_BROWSER_TYPE(object):
    """Types of browser
    
    Admitted values
    ---------------
        FL_NORMAL_BROWSER
            A browser in which no selections can be made.
        FL_SELECT_BROWSER
            In this case the user can make single line selections.
        FL_HOLD_BROWSER
            Same to FL_SELECT_BROWSER but the selection remains visible
            until the next selection.
        FL_MULTI_BROWSER
            Multiple selections can be made and remains visible until
            de-selected.
    """
    pass

# my add - list of possible values --LK
BROWSERTYPE_list = [FL_NORMAL_BROWSER, FL_SELECT_BROWSER,
                    FL_HOLD_BROWSER, FL_MULTI_BROWSER]


# Defaults
FL_BROWSER_BOXTYPE = FL_DOWN_BOX
FL_BROWSER_COL1 = FL_COL1
FL_BROWSER_COL2 = FL_YELLOW
FL_BROWSER_LCOL = FL_LCOL
FL_BROWSER_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_BROWSER_SLCOL = FL_COL1
FL_BROWSER_FONTSIZE = FL_SMALL_SIZE


#FL_BROWSER_LINELENGTH placeholder (backwards)

FL_BROWSER_SCROLL_CALLBACK = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT),
                cty.c_int, cty.c_void_p)
class function_prototype_for_FL_BROWSER_SCROLL_CALLBACK(object):
    """FL_BROWSER_SCROLL_CALLBACK(ptr_flobject, int, vdata)
    
    prototype for function handling callback for browser flobjects,
    no return
    """
    pass

#############################################################
# forms.h (button.h)
# All Buttons, regular button, light button and round button
#############################################################

# values for enumeration 'FL_BUTTON_TYPE'
FL_BUTTON_TYPE = cty.c_int      # enum
FL_NORMAL_BUTTON = 0
FL_PUSH_BUTTON = 1
FL_RADIO_BUTTON = 2
FL_HIDDEN_BUTTON = 3
FL_TOUCH_BUTTON = 4
FL_INOUT_BUTTON = 5
FL_RETURN_BUTTON = 6
FL_HIDDEN_RET_BUTTON = 7
FL_MENU_BUTTON = 8
FL_TOGGLE_BUTTON = FL_PUSH_BUTTON

class admitted_values_for_FL_BUTTON_TYPE(object):
    """Types of buttons
    
    Admitted values
    ---------------
        FL_NORMAL_BUTTON
            Returns value when released.
        FL_PUSH_BUTTON or FL_TOGGLE_BUTTON
            Stays pushed until user pushes it again.
        FL_RADIO_BUTTON
            Push button that switches off other radio buttons.
        FL_HIDDEN_BUTTON
            Invisible normal button.
        FL_TOUCH_BUTTON
            Returns value as long as the user pushes it.
        FL_INOUT_BUTTON
            Returns value both when pushed and when released.
        FL_RETURN_BUTTON
            Like a normal button but reacts on the <Return> key.
        FL_HIDDEN_RET_BUTTON
            Invisible return button.
        FL_MENU_BUTTON
            Returns value when pushed, useful e.g. for opening a popup
            when pushed.
    """
    pass

# my add, list of possible values --LK
BUTTONTYPE_list = [FL_NORMAL_BUTTON, FL_PUSH_BUTTON, FL_RADIO_BUTTON, \
                FL_HIDDEN_BUTTON, FL_TOUCH_BUTTON, FL_INOUT_BUTTON, \
                FL_RETURN_BUTTON, FL_HIDDEN_RET_BUTTON, FL_MENU_BUTTON, \
                FL_TOGGLE_BUTTON]


class FL_BUTTON_SPEC(cty.Structure):
    """FL_BUTTON_SPEC class

    Attributes
    ----------
        pixmap : long_pos
            *todo*
        mask : long_pos
            *todo*
        bits_w : int_pos
            *todo*
        bits_h : int_pos
            *todo*
        val : int
            state of button, whether on/off
        mousebut : int
            mouse button that caused the push
        timdel : int
            time since last touch (TOUCH buttons)
        event : int
            what event triggers redraw
        is_pushed : int
            set while drawn as pushed down
        react_to : int array of 5 elements
            mouse buttons button reacts to
        cspecl : long
            reserved for class specific stuff
        cspecv : pointer to any type
            misc. things
        filename : str
            *todo*
        focus_pixmap : long_pos
            *todo*
        focus_mask : long_pos
            *todo*
        focus_filename : str
            *todo*
    """
    _fields_ = [
        ('pixmap', Pixmap),
        ('mask', Pixmap),
        ('bits_w', cty.c_uint),
        ('bits_h', cty.c_uint),
        ('val', cty.c_int),            # state of button, whether on/off
        ('mousebut', cty.c_int),       # mouse button that caused the push
        ('timdel', cty.c_int),         # time since last touch (TOUCH buttons)
        ('event', cty.c_int),          # what event triggers redraw
        ('is_pushed', cty.c_int),      # set while drawn as pushed down
        ('react_to', cty.c_int * 5),   # mouse buttons button reacts to
        ('cspecl', cty.c_long),        # reserved for class specific stuff
        ('cspecv', cty.c_void_p),      # misc. things
        ('filename', STRING),
        ('focus_pixmap', Pixmap),
        ('focus_mask', Pixmap),
        ('focus_filename', STRING), ]

FL_BUTTON_STRUCT = FL_BUTTON_SPEC


# normal button default
FL_BUTTON_BOXTYPE = FL_UP_BOX
FL_BUTTON_COL1 = FL_COL1
FL_BUTTON_COL2 = FL_COL1
FL_BUTTON_LCOL = FL_LCOL
FL_BUTTON_ALIGN = FL_ALIGN_CENTER
FL_BUTTON_MCOL1 = FL_MCOL
FL_BUTTON_MCOL2 = FL_MCOL
FL_BUTTON_BW = FL_BOUND_WIDTH

# light button defaults
FL_LIGHTBUTTON_BOXTYPE = FL_UP_BOX
FL_LIGHTBUTTON_COL1 = FL_COL1
FL_LIGHTBUTTON_COL2 = FL_YELLOW
FL_LIGHTBUTTON_LCOL = FL_LCOL
FL_LIGHTBUTTON_ALIGN = FL_ALIGN_CENTER
FL_LIGHTBUTTON_TOPCOL = FL_COL1
FL_LIGHTBUTTON_MCOL = FL_MCOL
FL_LIGHTBUTTON_MINSIZE = 12

# round button defaults
FL_ROUNDBUTTON_BOXTYPE = FL_NO_BOX
FL_ROUNDBUTTON_COL1 = FL_MCOL
FL_ROUNDBUTTON_COL2 = FL_YELLOW
FL_ROUNDBUTTON_LCOL = FL_LCOL
FL_ROUNDBUTTON_ALIGN = FL_ALIGN_CENTER
FL_ROUNDBUTTON_TOPCOL = FL_COL1
FL_ROUNDBUTTON_MCOL = FL_MCOL

# round3d button defaults
FL_ROUND3DBUTTON_BOXTYPE = FL_NO_BOX
FL_ROUND3DBUTTON_COL1 = FL_COL1
FL_ROUND3DBUTTON_COL2 = FL_BLACK
FL_ROUND3DBUTTON_LCOL = FL_LCOL
FL_ROUND3DBUTTON_ALIGN = FL_ALIGN_CENTER
FL_ROUND3DBUTTON_TOPCOL = FL_COL1
FL_ROUND3DBUTTON_MCOL = FL_MCOL

# check button defaults
FL_CHECKBUTTON_BOXTYPE = FL_NO_BOX
FL_CHECKBUTTON_COL1 = FL_COL1
FL_CHECKBUTTON_COL2 = FL_YELLOW
FL_CHECKBUTTON_LCOL = FL_LCOL
FL_CHECKBUTTON_ALIGN = FL_ALIGN_CENTER

FL_CHECKBUTTON_TOPCOL = FL_COL1
FL_CHECKBUTTON_MCOL = FL_MCOL

# bitmap button defaults
FL_BITMAPBUTTON_BOXTYPE = FL_UP_BOX
FL_BITMAPBUTTON_COL1 = FL_COL1         # bitmap background
FL_BITMAPBUTTON_COL2 = FL_BLUE         # "focus" color
FL_BITMAPBUTTON_LCOL = FL_LCOL         # bitmap foreground
FL_BITMAPBUTTON_ALIGN = FL_ALIGN_BOTTOM

# bitmap button defaults
FL_PIXMAPBUTTON_BOXTYPE = FL_UP_BOX
FL_PIXMAPBUTTON_COL1 = FL_BUTTON_COL1
FL_PIXMAPBUTTON_COL2 = FL_BUTTON_COL2
FL_PIXMAPBUTTON_LCOL = FL_BUTTON_LCOL
FL_PIXMAPBUTTON_MCOL1 = FL_BUTTON_MCOL1
FL_PIXMAPBUTTON_MCOL2 = FL_BUTTON_MCOL2
FL_PIXMAPBUTTON_ALIGN = FL_ALIGN_BOTTOM


FL_DrawButton = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT))
FL_CleanupButton = cty.CFUNCTYPE(None, cty.POINTER(FL_BUTTON_SPEC))

FL_DRAWBUTTON = FL_DrawButton
FL_CLEANUPBUTTON = FL_CleanupButton



#######################
# forms.h (canvas.h)
# Header for FL_CANVAS
#######################

# values for enumeration 'FL_CANVAS_TYPE'
FL_CANVAS_TYPE = cty.c_int      # enum
FL_NORMAL_CANVAS = 0
FL_SCROLLED_CANVAS = 1

class admitted_values_for_FL_CANVAS_TYPE(object):
    """Types of canvas
    
    Admitted values
    ---------------
        FL_NORMAL_CANVAS
            *todo*
        FL_SCROLLED_CANVAS
            *todo*
    """
    pass

# list of possible values - my add --LK
CANVASTYPE_list = [FL_NORMAL_CANVAS, FL_SCROLLED_CANVAS]


# Default
FL_CANVAS_BOXTYPE = FL_DOWN_BOX     # really the decoration frame
FL_CANVAS_ALIGN = FL_ALIGN_TOP


# /usr/include/X11/Xlib.h 317
class XSetWindowAttributes(cty.Structure):
    """XSetWindowAttributes class

    Attributes
    ----------
        background_pixmap : long_pos
            Pixmap
        background_pixel : long_pos
            *todo*
        border_pixmap : long_pos
            Pixmap
        border_pixel : long_pos
            *todo*
        bit_gravity : int
            *todo*
        win_gravity : int
            *todo*
        backing_store : int
            *todo*
        backing_planes : long_pos
            *todo*
        backing_pixel : long_pos
            *todo*
        save_under : int
            *todo*
        event_mask : long
            *todo*
        do_not_propagate_mask : long
            *todo*
        override_redirect : int
            *todo*
        colormap : long_pos
            Colormap
        cursor : long_pos
            Cursor
    """
    _fields_ = [
        ('background_pixmap', Pixmap),
        ('background_pixel', cty.c_ulong),
        ('border_pixmap', Pixmap),
        ('border_pixel', cty.c_ulong),
        ('bit_gravity', cty.c_int),
        ('win_gravity', cty.c_int),
        ('backing_store', cty.c_int),
        ('backing_planes', cty.c_ulong),
        ('backing_pixel', cty.c_ulong),
        ('save_under', cty.c_int),
        ('event_mask', cty.c_long),
        ('do_not_propagate_mask', cty.c_long),
        ('override_redirect', cty.c_int),
        ('colormap', Colormap),
        ('cursor', Cursor), ]


FL_HANDLE_CANVAS = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
        Window, cty.c_int, cty.c_int, cty.POINTER(XEvent), cty.c_void_p)


FL_MODIFY_CANVAS_PROP = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT))


#############################
# forms.h (chart.h)
# Chart flobject class
#############################

# values for enumeration 'FL_CHART_TYPE'
FL_CHART_TYPE = cty.c_int       # enum
FL_BAR_CHART = 0
FL_HORBAR_CHART = 1
FL_LINE_CHART = 2
FL_FILL_CHART = 3
FL_SPIKE_CHART = 4
FL_PIE_CHART = 5
FL_SPECIALPIE_CHART = 6
# FL_FILLED_CHART placeholder (backwards)

class admitted_values_for_FL_CHART_TYPE(object):
    """Types of chart
    
    Admitted values
    ---------------
        FL_BAR_CHART
            A bar-chart (vertical)
        FL_HORBAR_CHART
            A horizontal bar-chart
        FL_LINE_CHART
            A line-chart
        FL_FILL_CHART
            A line-chart but the area below curve is filled
        FL_SPIKE_CHART
            A chart with a vertical spike for each value
        FL_PIE_CHART
            A pie-chart
        FL_SPECIALPIE_CHART
            A pie-chart with displaced first item
    """
    pass

# list of possible values - my add --LK
CHARTTYPE_list = [FL_BAR_CHART, FL_HORBAR_CHART, FL_LINE_CHART, \
                  FL_FILL_CHART, FL_SPIKE_CHART, FL_PIE_CHART, \
                  FL_SPECIALPIE_CHART]


# Defaults
FL_CHART_BOXTYPE = FL_BORDER_BOX
FL_CHART_COL1 = FL_COL1
FL_CHART_LCOL = FL_LCOL
FL_CHART_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_CHART_MAX = 2048


#################################
# forms.h (clock.h)
#################################

# values for unnamed enumeration
FL_ANALOG_CLOCK = 0
FL_DIGITAL_CLOCK = 1

class admitted_values_for_CLOCKTYPE(object):
    """Types of clock
    
    Admitted values
    ---------------
        FL_ANALOG_CLOCK
            An analog clock complete with the second hand
        FL_DIGITAL_CLOCK
            A digital clock
    """
    pass

# my add, list of possible values --LK
CLOCKTYPE_list = [FL_ANALOG_CLOCK, FL_DIGITAL_CLOCK]


FL_CLOCK_BOXTYPE = FL_UP_BOX
FL_CLOCK_COL1 = FL_INACTIVE_COL
FL_CLOCK_COL2 = FL_BOTTOM_BCOL
FL_CLOCK_LCOL = FL_BLACK
FL_CLOCK_ALIGN = FL_ALIGN_BOTTOM

FL_CLOCK_TOPCOL = FL_COL1



##########################
# forms.h (counter_var.h)
##########################

# values for enumeration 'FL_COUNTER_TYPE'
FL_COUNTER_TYPE = cty.c_int     # enum
FL_NORMAL_COUNTER = 0
FL_SIMPLE_COUNTER = 1

class admitted_values_for_Fl_COUNTER_TYPE(object):
    """Types of counter
    
    Admitted values
    ---------------
        FL_NORMAL_COUNTER
            A counter with two buttons on each side
        FL_SIMPLE_COUNTER
            A counter with one button on each side
    """
    pass

# list of possible values - my add --LK
COUNTERTYPE_list = [FL_NORMAL_COUNTER, FL_SIMPLE_COUNTER]


# Defaults
FL_COUNTER_BOXTYPE = FL_UP_BOX
FL_COUNTER_COL1 = FL_COL1
FL_COUNTER_COL2 = FL_BLUE           # counter label
FL_COUNTER_LCOL = FL_LCOL           # counter reporting
FL_COUNTER_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_COUNTER_BW = FL_BOUND_WIDTH - 1


FL_VAL_FILTER = cty.CFUNCTYPE(STRING, cty.POINTER(FL_OBJECT),
                              cty.c_double, cty.c_int)


#############################
# forms.h (cursor.h)
# Cursor defs and prototypes
#############################

# *** start - from /usr/include/X11/cursorfont.h ***
XC_num_glyphs = 154             # in linux 255
XC_X_cursor = 0
XC_arrow = 2
XC_based_arrow_down = 4
XC_based_arrow_up = 6
XC_boat = 8
XC_bogosity = 10
XC_bottom_left_corner = 12
XC_bottom_right_corner = 14
XC_bottom_side = 16
XC_bottom_tee = 18
XC_box_spiral = 20
XC_center_ptr = 22
XC_circle = 24
XC_clock = 26
XC_coffee_mug = 28
XC_cross = 30
XC_cross_reverse = 32
XC_crosshair = 34
XC_diamond_cross = 36
XC_dot = 38
XC_dotbox = 40
XC_double_arrow = 42
XC_draft_large = 44
XC_draft_small = 46
XC_draped_box = 48
XC_fleur = 52
XC_gobbler = 54
XC_gumby = 56
XC_hand1 = 58
XC_hand2 = 60
XC_heart = 62
XC_icon = 64
XC_iron_cross = 66
XC_left_ptr = 68
XC_left_side = 70
XC_left_tee = 72
XC_leftbutton = 74
XC_ll_angle = 76
XC_lr_angle = 78
XC_man = 80
XC_middlebutton = 82
XC_mouse = 84
XC_pencil = 86
XC_pirate = 88
XC_plus = 90
XC_question_arrow = 92
XC_right_ptr = 94
XC_right_side = 96
XC_right_tee = 98
XC_rightbutton = 100
XC_rtl_logo = 102
XC_sailboat = 104
XC_sb_down_arrow = 106
XC_sb_h_double_arrow = 108
XC_sb_left_arrow = 110
XC_sb_right_arrow = 112
XC_sb_up_arrow = 114
XC_sb_v_double_arrow = 116
XC_shuttle = 118
XC_sizing = 120
XC_spider = 122
XC_spraycan = 124
XC_star = 126
XC_target = 128
XC_tcross = 130
XC_top_left_arrow = 132
XC_top_left_corner = 134
XC_top_right_corner = 136
XC_top_side = 138
XC_top_tee = 140
XC_trek = 142
XC_ul_angle = 144
XC_umbrella = 146
XC_ur_angle = 148
XC_watch = 150
XC_xterm = 152
# *** end - from /usr/include/X11/cursorfont.h ***

# my add  --LK
XCursors_list = [XC_arrow, XC_based_arrow_down, XC_based_arrow_up, \
        XC_boat, XC_bogosity, XC_bottom_left_corner, XC_bottom_right_corner, \
        XC_bottom_side, XC_bottom_tee, XC_box_spiral, XC_center_ptr, \
        XC_circle, XC_clock, XC_coffee_mug, XC_cross, XC_cross_reverse, \
        XC_crosshair, XC_diamond_cross, XC_dot, XC_dotbox, XC_double_arrow, \
        XC_draft_large, XC_draft_small, XC_draped_box, XC_fleur, \
        XC_gobbler, XC_gumby, XC_hand1, XC_hand2, XC_heart, XC_icon, \
        XC_iron_cross, XC_left_ptr, XC_left_side, XC_left_tee, \
        XC_leftbutton, XC_ll_angle, XC_lr_angle, XC_man, XC_middlebutton, \
        XC_mouse, XC_pencil, XC_pirate, XC_plus, XC_question_arrow, \
        XC_right_ptr, XC_right_side, XC_right_tee, XC_rightbutton, \
        XC_rtl_logo, XC_sailboat, XC_sb_down_arrow, XC_sb_h_double_arrow, \
        XC_sb_left_arrow, XC_sb_right_arrow, XC_sb_up_arrow, \
        XC_sb_v_double_arrow, XC_shuttle, XC_sizing, XC_spider, XC_spraycan, \
        XC_star, XC_target, XC_tcross, XC_top_left_arrow, \
        XC_top_left_corner, XC_top_right_corner, XC_top_side, XC_top_tee, \
        XC_trek, XC_ul_angle, XC_umbrella, XC_ur_angle, XC_watch, XC_xterm]


# values for unnamed enumeration
FL_INVISIBLE_CURSOR = -2
FL_DEFAULT_CURSOR = -1
FL_BUSY_CURSOR = XC_watch               # 150
FL_CROSSHAIR_CURSOR = XC_tcross         # 130
FL_KILL_CURSOR = XC_pirate              # 88
FL_NWARROW_CURSOR = XC_top_left_arrow   # 132
FL_NEARROW_CURSOR = XC_arrow            # 2

XC_invisible = FL_INVISIBLE_CURSOR

class admitted_values_for_CURSORS(object):
    """Type of cursor
    
    Admitted values
    ---------------
        FL_INVISIBLE_CURSOR
            cursor not visible
        FL_DEFAULT_CURSOR
            default cursor
        FL_BUSY_CURSOR
            watch cursor (when system is busy)
        FL_CROSSHAIR_CURSOR
            *todo*
        FL_KILL_CURSOR
            *todo*
        FL_NWARROW_CURSOR
            top left arrow cursor
        FL_NEARROW_CURSOR
            top right arrow cursor
    """
    pass

# my add, list of possible values --LK
CURSORS_list = [FL_INVISIBLE_CURSOR, FL_DEFAULT_CURSOR, FL_BUSY_CURSOR,
        FL_CROSSHAIR_CURSOR, FL_KILL_CURSOR, FL_NWARROW_CURSOR,
        FL_NEARROW_CURSOR]


###################
# forms.h (dial.h)
###################

# values for enumeration 'FL_DIAL_TYPE'
FL_DIAL_TYPE = cty.c_int        # enum
FL_NORMAL_DIAL = 0
FL_LINE_DIAL = 1
FL_FILL_DIAL = 2

class admitted_values_for_FL_DIAL_TYPE(object):
    """Types of dial
    
    Admitted values
    ---------------
        FL_NORMAL_DIAL
            A dial with a knob indicating the position
        FL_LINE_DIAL
            A dial with a line indicating the position
        FL_FILL_DIAL
            The area between initial and current is filled
    """
    pass

# list of possible values - my add --LK
DIALTYPE_list = [FL_NORMAL_DIAL, FL_LINE_DIAL, FL_FILL_DIAL]


# values for unnamed enumeration
FL_DIAL_CW = 0
FL_DIAL_CCW = 1

class admitted_values_for_DIALROTATION(object):
    """Types of dial rotation
    
    Admitted values
    ---------------
        FL_DIAL_CW
            Clockwise rotation
        FL_DIAL_CCW
            Counter-clockwise rotation
    """
    pass

# list of possible values - my add --LK
DIALROTN_list = [FL_DIAL_CW, FL_DIAL_CCW]


# Defaults
FL_DIAL_BOXTYPE = FL_FLAT_BOX
FL_DIAL_COL1 = FL_COL1
FL_DIAL_COL2 = FL_RIGHT_BCOL
FL_DIAL_LCOL = FL_LCOL
FL_DIAL_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_DIAL_TOPCOL = FL_COL1


############################################
# forms.h (filesys.h)
# Convenience functions to read a directory
############################################

# File types
# values for unnamed enumeration
FT_FILE = 0
FT_DIR = 1
FT_LINK = 2
FT_SOCK = 3
FT_FIFO = 4
FT_BLK = 5
FT_CHR = 6
FT_OTHER = 7

class admitted_values_for_FILETYPE(object):
    """Types of file
    
    Admitted values
    ---------------
        FT_FILE
            a regular file type
        FT_DIR
            a directory file type
        FT_LINK
            a symbolic link file type
        FT_SOCK
            a socket file type
        FT_FIFO
            a pipe or FIFO file type
        FT_BLK = 5
            a block device file type
        FT_CHR
            a character device file type
        FT_OTHER
            other(?) file type
    """
    pass


class FL_Dirlist(cty.Structure):
    """FL_DirList class

    Attributes
    ----------
        name : str
            entry name
        type : int
            file type
        dl_mtime : long
            file modification time
        dl_size : long_pos
            file size in bytes
    """
    _fields_ = [
        ('name', STRING),                # entry name
        ('type', cty.c_int),             # FILE_TYPE
        ('dl_mtime', cty.c_long),        # file modification time
        ('dl_size', cty.c_ulong), ]      # file size in bytes


# values for unnamed enumeration
#FL_NONE                    # Do not sort the entries (defined elsewhere)
FL_ALPHASORT = 1            # sort in alphabetic order
FL_RALPHASORT = 2           # sort in reverse alphabetic order
FL_MTIMESORT = 3            # sort according to modification time
FL_RMTIMESORT = 4           # sort in reverse modification time
FL_SIZESORT = 5             # sort in increasing size order
FL_RSIZESORT = 6            # sort in decreasing size order
FL_CASEALPHASORT = 7        # sort case insensitive
FL_RCASEALPHASORT = 8       # sort case insensitive

class admitted_values_for_ENTRIESSORTORDER(object):
    """entries sort order
    
    Admitted values
    ---------------
        FL_ALPHASORT
            Sorts the entries in alphabetic order (default)
        FL_RALPHASORT
            Sorts the entries in reverse alphabetic order
        FL_MTIMESORT 
            Sorts the entries according to the modification time
        FL_RMTIMESORT
            Sorts the entries according to the modification time,
            but reverse the order, i.e., latest first
        FL_SIZESORT
            Sorts the entries in increasing size order
        FL_RSIZESORT
            Sorts the entries in decreasing size order
        FL_CASEALPHASORT
            Sorts the entries in alphabetic order with no regard
            to case
        FL_RCASEALPHASORT
            Sorts the entries in reverse alphabetic order with no
            regard to case
    """
    pass


FL_DIRLIST_FILTER = cty.CFUNCTYPE(cty.c_int, STRING, cty.c_int)


#########################
# forms. (formbrowser.h)
#########################

# values for unnamed enumeration
FL_NORMAL_FORMBROWSER = 0

class admitted_values_for_FORMBROWSERTYPE(object):
    """types of formbrowser
    
    Admitted values
    ---------------
        FL_NORMAL_FORMBROWSER
            normal formbrowser type
    """
    pass

# my add, list of possible values --LK
FORMBRWSTYPE_list = [FL_NORMAL_FORMBROWSER, ]


# values for unnamed enumeration
FL_SMOOTH_SCROLL = 0
FL_JUMP_SCROLL = 1

class admitted_values_for_FORMBROWSERSCROLL(object):
    """type of formbrowser scroll
    
    Admitted values
    ---------------
        FL_SMOOTH_SCROLL
            Default scroll
        FL_JUMP_SCROLL
            Scrolls in form increments
    """
    pass

# list of possible values - my add --LK
FORMBRWSSCROLL_list = [FL_SMOOTH_SCROLL, FL_JUMP_SCROLL]

# defaults?
FL_FORMBROWSER_BOXTYPE = FL_DOWN_BOX
FL_FORMBROWSER_COL1 = FL_COL1
FL_FORMBROWSER_ALIGN = FL_ALIGN_TOP


#############
# glcanvas.h
#############

# my add --LK
class GLXContext (cty.Structure):
    _fields_ = []


# values for GL configuration attributes - my add --LK
# *** start - from /usr/include/GL/glx.h:70
GLX_USE_GL = 1
GLX_BUFFER_SIZE = 2
GLX_LEVEL = 3
GLX_RGBA = 4
GLX_DOUBLEBUFFER = 5
GLX_STEREO = 6
GLX_AUX_BUFFERS = 7
GLX_RED_SIZE = 8
GLX_GREEN_SIZE = 9
GLX_BLUE_SIZE = 10
GLX_ALPHA_SIZE = 11
GLX_DEPTH_SIZE = 12
GLX_STENCIL_SIZE = 13
GLX_ACCUM_RED_SIZE = 14
GLX_ACCUM_GREEN_SIZE = 15
GLX_ACCUM_BLUE_SIZE = 16
GLX_ACCUM_ALPHA_SIZE = 17
# *** end - from /usr/include/GL/glx.h

class admitted_values_for_GLCONFIGATTR(object):
    """GL configuration attributes
    
    Admitted values
    ---------------
        GLX_USE_GL
            Ignored. Only visuals that can be rendered with GLX are
            considered.
        GLX_BUFFER_SIZE
            Must be followed by a nonnegative integer that indicates
            the desired color index buffer size. The smallest index
            buffer of at least the specified size is preferred.
            Ignored if GLX_RGBA is asserted.
        GLX_LEVEL
            Must be followed by an integer buffer-level specification.
            This specification is honored exactly. Buffer level zero
            corresponds to the main frame buffer of the display. Buffer
            level one is the first overlay frame buffer, level two the
            second overlay frame buffer, and so on. Negative buffer
            levels correspond to underlay frame buffers.
        GLX_RGBA
            If present, only TrueColor and DirectColor visuals are
            considered. Otherwise, only PseudoColor and StaticColor
            visuals are considered.
        GLX_DOUBLEBUFFER
            If present, only double-buffered visuals are considered.
            Otherwise, only single-buffered visuals are considered.
        GLX_STEREO
            If present, only stereo visuals are considered. Otherwise,
            only monoscopic visuals are considered.
        GLX_AUX_BUFFERS
            Must be followed by a nonnegative integer that indicates the
            desired number of auxiliary buffers. Visuals with the smallest
            number of auxiliary buffers that meets or exceeds the specified
            number are preferred.
        GLX_RED_SIZE
            Must be followed by a nonnegative minimum size specification.
            If this value is zero, the smallest available red buffer is
            preferred. Otherwise, the largest available red buffer of at
            least the minimum size is preferred.
        GLX_GREEN_SIZE
            Must be followed by a nonnegative minimum size specification.
            If this value is zero, the smallest available green buffer is
            preferred. Otherwise, the largest available green buffer of at
            least the minimum size is preferred.
        GLX_BLUE_SIZE
            Must be followed by a nonnegative minimum size specification.
            If this value is zero, the smallest available blue buffer is
            preferred. Otherwise, the largest available blue buffer of at
            least the minimum size is preferred.
        GLX_ALPHA_SIZE
            Must be followed by a nonnegative minimum size specification.
            If this value is zero, the smallest available alpha buffer is
            preferred. Otherwise, the largest available alpha buffer of at
            least the minimum size is preferred.
        GLX_DEPTH_SIZE
            Must be followed by a nonnegative minimum size specification.
            If this value is zero, visuals with no depth buffer are
            preferred. Otherwise, the largest available depth buffer of at
            least the minimum size is preferred.
        GLX_STENCIL_SIZE
            Must be followed by a nonnegative integer that indicates the
            desired number of stencil bitplanes. The smallest stencil buffer
            of at least the specified size is preferred. If the desired
            value is zero, visuals with no stencil buffer are preferred.
        GLX_ACCUM_RED_SIZE
            Must be followed by a nonnegative minimum size specification.
            If this value is zero, visuals with no red accumulation buffer
            are preferred. Otherwise, the largest possible red accumulation
            buffer of at least the minimum size is preferred.
        GLX_ACCUM_GREEN_SIZE
            Must be followed by a nonnegative minimum size specification.
            If this value is zero, visuals with no green accumulation buffer
            are preferred. Otherwise, the largest possible green accumulation
            buffer of at least the minimum size is preferred.
        GLX_ACCUM_BLUE_SIZE
            Must be followed by a nonnegative minimum size specification. If
            this value is zero, visuals with no blue accumulation buffer are
            preferred. Otherwise, the largest possible blue accumulation
            buffer of at least the minimum size is preferred.
        GLX_ACCUM_ALPHA_SIZE
            Must be followed by a nonnegative minimum size specification. If
            this value is zero, visuals with no alpha accumulation buffer are
            preferred. Otherwise, the largest possible alpha accumulation
            buffer of at least the minimum size is preferred.
    """
    pass


######################
# forms.h (goodies.h)
######################

# Resources and misc. goodie routines
FLAlertDismissLabel = "flAlert.dismiss.label"
""""""
FLAlertTitle = "flAlert.title"
""""""

FLQuestionYesLabel = "flQuestion.yes.label"
""""""
FLQuestionNoLabel = "flQuestion.no.label"
""""""
FLQuestionTitle = "flQuestion.title"
""""""

FLOKLabel = "flInput.ok.label"
""""""
FLInputClearLabel = "flInput.clear.label"
""""""
FLInputCancelLabel = "flInput.cancel.label"
""""""
FLInputTitle = "flInput.title"
""""""

FLChoiceTitle = "flChoice.title"
""""""

class admitted_values_for_GoodiesLabel(object):
    """Label for goodies
    
    Admitted values
    ---------------
        FLAlertDismissLabel
            label for dismiss in an alert goodie
        FLAlertTitle
            title in an alert goodie
        FLQuestionYesLabel
            label for yes in a question goodie
        FLQuestionNoLabel
            label for no in a question goodie
        FLQuestionTitle = "flQuestion.title"
            title in a question goodie
        FLOKLabel = "flInput.ok.label"
            label for ok in an input goodie
        FLInputClearLabel = "flInput.clear.label"
            label for clear in an input goodie
        FLInputCancelLabel = "flInput.cancel.label"
            label for cancel in an input goodie
        FLInputTitle = "flInput.title"
            title in an input goodie
        FLChoiceTitle = "flChoice.title"
            title in a choice goodie
    """
    pass

# command log

class FD_CMDLOG(cty.Structure):
    """FL_CMDLOG class
    
    Attributes
    ----------
        form : pointer to FL_FORM
            *todo*
        vdata : pointer to void
            *todo*
        cdata : str
            *todo*
        ldata : long
            *todo*
        browser : pointer to FL_OBJECT
            *todo*
        close_browser : pointer to FL_OBJECT
            *todo*
        clear_browser : pointer to FL_OBJECT
            *todo*
    """
    _fields_ = [
        ('form', cty.POINTER(FL_FORM)),
        ('vdata', cty.c_void_p),
        ('cdata', STRING),
        ('ldata', cty.c_long),
        ('browser', cty.POINTER(FL_OBJECT)),
        ('close_browser', cty.POINTER(FL_OBJECT)),
        ('clear_browser', cty.POINTER(FL_OBJECT)), ]

# file selector

FL_MAX_FSELECTOR = 6

class FD_FSELECTOR(cty.Structure):
    """FD_FSELECTOR class
    
    Attribute
    ---------
        fselect : pointer to FL_FORM
            *todo*
        vdata : pointer to void
            *todo*
        cdata : pointer to void
            *todo*
        ldata : long
            *todo*
        browser : pointer to FL_OBJECT
            *todo*
        input : pointer to FL_OBJECT
            *todo*
        prompt : pointer to FL_OBJECT
            *todo*
        resbutt : pointer to FL_OBJECT
            *todo*
        patbutt : pointer to FL_OBJECT
            *todo*
        dirbutt : pointer to FL_OBJECT
            *todo*
        cancel : pointer to FL_OBJECT
            *todo*
        ready : pointer to FL_OBJECT
            *todo*
        dirlabel : pointer to FL_OBJECT
            *todo*
        patlabel : pointer to FL_OBJECT
            *todo*
        appbutt : pointer to an array of 3 FL_OBJECT
            *todo*
    """
    _fields_ = [
        ('fselect', cty.POINTER(FL_FORM)),
        ('vdata', cty.c_void_p),
        ('cdata', cty.c_void_p),
        ('ldata', cty.c_long),
        ('browser', cty.POINTER(FL_OBJECT)),
        ('input', cty.POINTER(FL_OBJECT)),
        ('prompt', cty.POINTER(FL_OBJECT)),
        ('resbutt', cty.POINTER(FL_OBJECT)),
        ('patbutt', cty.POINTER(FL_OBJECT)),
        ('dirbutt', cty.POINTER(FL_OBJECT)),
        ('cancel', cty.POINTER(FL_OBJECT)),
        ('ready', cty.POINTER(FL_OBJECT)),
        ('dirlabel', cty.POINTER(FL_OBJECT)),
        ('patlabel', cty.POINTER(FL_OBJECT)),
        ('appbutt', cty.POINTER(FL_OBJECT) * 3), ]


FL_FSCB = cty.CFUNCTYPE(cty.c_int, STRING, cty.c_void_p)

# c function prototype for _fl_add_fselector_appbutton
cfunc_none_voidp = cty.CFUNCTYPE(None, cty.c_void_p)


####################
# forms.h (input.h)
####################

# Types
# values for enumeration 'FL_INPUT_TYPE'
FL_INPUT_TYPE = cty.c_int # enum
FL_NORMAL_INPUT = 0
FL_FLOAT_INPUT = 1
FL_INT_INPUT = 2
FL_DATE_INPUT = 3
FL_MULTILINE_INPUT = 4
FL_HIDDEN_INPUT = 5
FL_SECRET_INPUT = 6

class admitted_values_for_FL_INPUT_TYPE(object):
    """Types of input
    
    Admitted values
    ---------------
        FL_NORMAL_INPUT
            Any type of text can be typed into this field
        FL_FLOAT_INPUT
            Only a float value can be typed in (e.g. -23.2e12)
        FL_INT_INPUT
            Only an integer value can be typed in (e.g. -86)
        FL_DATE_INPUT
            Only a date (MM/DD/YY or DD/MM/YY) can be typed in
            (and limited per default to 10 characters)
        FL_MULTILINE_INPUT
            An input field allowing for multiple lines
        FL_HIDDEN_INPUT
            A normal input field but invisible
        FL_SECRET_INPUT
            A normal input field that does not show the text (and
            limited per default to a maximum length of 16 characters)
    """
    pass

# my add - list of possible values --LK
INPUTTYPE_list = [FL_NORMAL_INPUT, FL_FLOAT_INPUT, FL_INT_INPUT,
                  FL_DATE_INPUT, FL_MULTILINE_INPUT, FL_HIDDEN_INPUT,
                  FL_SECRET_INPUT]


# for date input
# values for unnamed enumeration
FL_INPUT_MMDD = 0
"""Used as format for FL_DATE_INPUT, it places the month before the day"""
FL_INPUT_DDMM = 1
"""Used as format for FL_DATE_INPUT, it places the day before the month"""

class admitted_values_for_DATEFMT(object):
    """Formats of date input
    
    Admitted values
    ---------------
        FL_INPUT_MMDD
            Used as format for FL_DATE_INPUT, it places the month
            before the day
        FL_INPUT_DDMM
            Used as format for FL_DATE_INPUT, it places the day
            before the month
    """
    pass

# my add - list of possible values --LK
DATEFMT_list = [FL_INPUT_MMDD, FL_INPUT_DDMM]


# Defaults
FL_INPUT_BOXTYPE = FL_DOWN_BOX
FL_INPUT_COL1 = FL_COL1
FL_INPUT_COL2 = FL_MCOL
FL_INPUT_LCOL = FL_LCOL
FL_INPUT_ALIGN = FL_ALIGN_LEFT

# Others
FL_INPUT_TCOL = FL_LCOL
FL_INPUT_CCOL = FL_BLUE

FL_RINGBELL = (1 << 4)
""""""


# edit keys

class FL_EditKeymap(cty.Structure):
    """FL_EditKeymap class

    Attributes
    ----------
        del_prev_char : long
            delete previous char
        del_next_char : long
            delete next char
        del_prev_word : long
            delete previous word
        del_next_word : long
            delete next word
        moveto_prev_line : long
            one line up
        moveto_next_line : long
            one line down
        moveto_prev_char : long
            one char left
        moveto_next_char : long
            one char right
        moveto_prev_word : long
            one word left
        moveto_next_word : long
            one word right
        moveto_prev_page : long
            one page up
        moveto_next_page : long
            one page down
        moveto_bol : long
            move to begining of line
        moveto_eol : long
            move to end of line
        moveto_bof : long
            move to begin of file
        moveto_eof : long
            move to end of file
        transpose : long
            switch two char positions
        paste : long
            paste the edit buffer
        backspace : long
            another del_prev_char
        del_to_bol : long
            cut to begining of line
        del_to_eol : long
            cut to end of line
        clear_field : long
            delete everything
        del_to_eos : long
            not implemented
    """
    _fields_ = [
        ('del_prev_char', cty.c_long),        # delete previous char
        ('del_next_char', cty.c_long),        # delete next char
        ('del_prev_word', cty.c_long),        # delete previous word
        ('del_next_word', cty.c_long),        # delete next word
        # movement
        ('moveto_prev_line', cty.c_long),     # one line up
        ('moveto_next_line', cty.c_long),     # one line down
        ('moveto_prev_char', cty.c_long),     # one char left
        ('moveto_next_char', cty.c_long),     # one char right
        ('moveto_prev_word', cty.c_long),     # one word left
        ('moveto_next_word', cty.c_long),     # one word right
        ('moveto_prev_page', cty.c_long),     # one page up
        ('moveto_next_page', cty.c_long),     # one page down
        ('moveto_bol', cty.c_long),           # move to begining of line
        ('moveto_eol', cty.c_long),           # move to end of line
        ('moveto_bof', cty.c_long),           # move to begin of file
        ('moveto_eof', cty.c_long),           # move to end of file
        # misc. stuff
        ('transpose', cty.c_long),            # switch two char positions
        ('paste', cty.c_long),                # paste the edit buffer
        ('backspace', cty.c_long),            # another  del_prev_char
        ('del_to_bol', cty.c_long),           # cut to begining of line
        ('del_to_eol', cty.c_long),           # cut to end of line
        ('clear_field', cty.c_long),          # delete everything
        ('del_to_eos', cty.c_long), ]         # not implemented


FL_INPUTVALIDATOR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
                                  STRING, STRING, cty.c_int)


#####################
# forms.h (nmenu.h)
#####################

# Nmenu flobject types
# values for unnamed enumeration
FL_NORMAL_NMENU = 0
FL_NORMAL_TOUCH_NMENU = 1
FL_BUTTON_NMENU = 2
FL_BUTTON_TOUCH_NMENU = 3

class admitted_values_for_NMENUTYPE(object):
    """types of Nmenu
    
    Admitted values
    ---------------
        FL_NORMAL_NMENU
            Probably the most often used type: shown as text on a
            borderless background, popup gets opened when clicked on
        FL_NORMAL_TOUCH_NMENU
            Also shown as text on a borderless background, but popup
            gets opened when the mouse is moved on top of it without
            any further user action required
        FL_BUTTON_NMENU
            When not active shown as text on borderless background,
            when clicked on popup is shown and the flobject itself being
            dispayed as a button
        FL_BUTTON_TOUCH_NMENU
            When not active shown as text on borderless background,
            when mouse is moved onto it the popup is shown and the
            flobject itself is displayed as a button
    """
    pass

# list of possible values - my add --LK
NMENUTYPE_list = [FL_NORMAL_NMENU, FL_NORMAL_TOUCH_NMENU, FL_BUTTON_NMENU, \
                  FL_BUTTON_TOUCH_NMENU]


# pointless as per library's get_xforms_version() --LK
#FL_VERSION = 1
#"""The major version number"""
#FL_REVISION = 0
#"""Revision number"""
#FL_FIXLEVEL = "93pre10"
#FL_INCLUDE_VERSION = (FL_VERSION * 1000 + FL_REVISION)


FL_FALSE = 0
FL_TRUE = (not FL_FALSE)

class admitted_values_for_TRUEFALSE(object):
    """True/False in XForms
    
    Admitted values
    ---------------
        FL_FALSE
            *todo*
        FL_TRUE
            *todo*
    """
    pass


#####################
# forms.h (choice.h)
#####################

# FL_CHOICE_TYPE placeholder (deprecated)
# FL_NORMAL_CHOICE placeholder (deprecated)
# FL_NORMAL_CHOICE2 placeholder (deprecated)
# FL_DROPLIST_CHOICE placeholder (deprecated)
# FL_BROWSER_CHOICE placeholder (deprecated)
# FL_SIMPLE_CHOICE placeholder (deprecated)
# list of possible values - my add --LK
# CHOICETYPE_list placeholder (deprecated)
# FL_CHOICE_BOXTYPE placeholder (deprecated)
# FL_CHOICE_COL1 placeholder (deprecated)
# FL_CHOICE_COL2 placeholder (deprecated)
# FL_CHOICE_LCOL placeholder (deprecated)
# FL_CHOICE_ALIGN placeholder (deprecated)
# FL_CHOICE_MCOL placeholder (deprecated)
# FL_CHOICE_MAXITEMS placeholder (deprecated)


#################################
# forms.h (clipbd.h)
# prototypes for clipboard stuff
#################################

FL_CPTYPE = Atom        # c_ulong


###################
# forms.h (flps.h)
###################

# postscript stuff
# values for unnamed enumeration
FLPS_AUTO = 0
FLPS_LANDSCAPE = 1
FLPS_PORTRAIT = 2
FLPS_BESTFIT = 3

class admitted_values_for_PS_ORIENTATION(object):
    """Postscript orientation
    
    Admitted values
    ---------------
        FLPS_AUTO
            Automatic orientation, switch to landscape if does
            not fit
        FLPS_LANDSCAPE
            Landscape  orientation always (horizontal)
        FLPS_PORTRAIT
            Portrait orientation always (vertical)
        FLPS_BESTFIT
            Best fit orientation with even margin
    """
    pass

# values for unnamed enumeration
FLPS_BW = -1
FLPS_GRAYSCALE = 0
FLPS_COLOR = 1

class admitted_values_for_PSCOLORS(object):
    """Colors for Postscript
    
    Admitted values
    ---------------
        FLPS_BW
            All drawings are black with white background
        FLPS_GRAYSCALE
            Grayscale color
        FLPS_COLOR
            Used full color
    """
    pass


class FLPS_CONTROL(cty.Structure):
    """FLPS_CONTROL class

    Attributes
    ----------
        ps_color : int
            *todo*
        orientation : int
            *todo*
        auto_fit : int
            *todo*
        drawbox : int
            *todo*
        eps : int
            *todo*
        xdpi : float
            *todo*
        ydpi : float
            *todo*
        paper_w : float
            *todo*
        paper_h : float
            *todo*
        gamma : float
            *todo*
        tmpdir : str
            *todo*
        printer_dpi : int
            *todo*
        hm : float
            *todo*
        vm : float
            *todo*
        xscale : float
            *todo*
        yscale : float
            *todo*
        scale_text : int
            *todo*
        first_page_only : int
            *todo*
        clip : int
            *todo*
    """
    _fields_ = [
        ('ps_color', cty.c_int),
        ('orientation', cty.c_int),
        ('auto_fit', cty.c_int),
        ('drawbox', cty.c_int),
        ('eps', cty.c_int),
        ('xdpi', cty.c_float),
        ('ydpi', cty.c_float),
        ('paper_w', cty.c_float),
        ('paper_h', cty.c_float),
        ('gamma', cty.c_float),
        ('tmpdir', STRING),
        ('printer_dpi', cty.c_int),
        ('hm', cty.c_float),
        ('vm', cty.c_float),
        ('xscale', cty.c_float),
        ('yscale', cty.c_float),
        ('scale_text', cty.c_int),
        ('first_page_only', cty.c_int),
        ('clip', cty.c_int), ]


####################
# forms.h (frame.h)
####################

# types of frames
# values for unnamed enumeration
FL_NO_FRAME = 0
FL_UP_FRAME = 1
FL_DOWN_FRAME = 2
FL_BORDER_FRAME = 3
FL_SHADOW_FRAME = 4
FL_ENGRAVED_FRAME = 5
FL_ROUNDED_FRAME = 6
FL_EMBOSSED_FRAME = 7
FL_OVAL_FRAME = 8

class admitted_values_for_FRAMETYPE(object):
    """Types of frame
    
    Admitted values
    ---------------
        FL_NO_FRAME
            Nothing is drawn
        FL_UP_FRAME
            A frame appears coming out of the screen
        FL_DOWN_FRAME
            A frame that goes down into the screen
        FL_BORDER_FRAME
            A frame with a simple outline
        FL_SHADOW_FRAME
            A frame with a shadow
        FL_ENGRAVED_FRAME
            A frame appears to be engraved
        FL_ROUNDED_FRAME
            A rounded frame
        FL_EMBOSSED_FRAME
            A frame appears embossed
        FL_OVAL_FRAME
            An elliptic box
    """
    pass

# my add, list of possible values --LK
FRAMETYPE_list = [FL_NO_FRAME, FL_UP_FRAME, FL_DOWN_FRAME,
        FL_BORDER_FRAME, FL_SHADOW_FRAME, FL_ENGRAVED_FRAME,
        FL_ROUNDED_FRAME, FL_EMBOSSED_FRAME, FL_OVAL_FRAME]


# defaults?
FL_FRAME_COL1 = FL_BLACK        # border color
FL_FRAME_COL2 = FL_COL1         # label background
FL_FRAME_LCOL = FL_BLACK        # label color


#####################
# forms.h (free.h)
# Free flobject class
#####################

# values for enumeration 'FL_FREE_TYPE'
FL_FREE_TYPE = cty.c_int        # enum
FL_NORMAL_FREE = 0
FL_INACTIVE_FREE = 1
FL_INPUT_FREE = 2
FL_CONTINUOUS_FREE = 3
FL_ALL_FREE = 4

FL_SLEEPING_FREE = FL_INACTIVE_FREE

class admitted_values_for_FL_FREE_TYPE(object):
    """Types of free
    
    Admitted values
    ---------------
        FL_NORMAL_FREE
            The flobject will receive the events FL_DRAW, FL_ENTER,
            FL_LEAVE, FL_MOTION, FL_PUSH, FL_RELEASE and FL_MOUSE
        FL_INACTIVE_FREE or FL_SLEEPING_FREE
            The flobject only receives FL_DRAW events. This should be
            used for flobjects without interaction (e.g. a picture)
        FL_INPUT_FREE
            Same as FL_NORMAL_FREE but the flobject also receives
            FL_FOCUS, FL_UNFOCUS and FL_KEYBOARD events. The
            ptr_flobject.contents.wantkey is by default set to FL_KEY_NORMAL,
            i.e., the free flobject will receive all normal keys (0-255)
            except <Tab> and <Return> key. If you're interested in <Tab>
            or <Return> key, you need to change obj->wantkey to
            FL_KEY_TAB or FL_KEY_ALL. See section Events, for details
        FL_CONTINUOUS_FREE
            Same as FL_NORMAL_FREE but the flobject also receives FL_STEP
            events. This should be used for flobjects that change themselves
            continuously
        FL_ALL_FREE
            The flobject receives all types of events
    """
    pass

# list of possible values - my add --LK
FREETYPE_list = [FL_NORMAL_FREE, FL_INACTIVE_FREE, FL_INPUT_FREE,
                 FL_CONTINUOUS_FREE, FL_ALL_FREE, FL_SLEEPING_FREE]


#####################
# forms.h (menu.h)
#  Menu flobject class
#####################

# FL_MENU_TYPE placeholder (deprecated)
# FL_TOUCH_MENU placeholder (deprecated)
# FL_PUSH_MENU placeholder (deprecated)
# FL_PULLDOWN_MENU placeholder (deprecated)
# my add - list of possbile values --LK
# MENUTYPE_list placeholder (deprecated)
# FL_MENU_BOXTYPE placeholder (deprecated)
# FL_MENU_COL1 placeholder (deprecated)
# FL_MENU_COL2 placeholder (deprecated)
# FL_MENU_LCOL placeholder (deprecated)
# FL_MENU_ALIGN placeholder (deprecated)
# FL_MENU_MAXITEMS placeholder (deprecated)


###################
# forms.h (text.h)
###################

# values for unnamed enumeration
FL_NORMAL_TEXT = 0

class admitted_values_for_TEXTTYPE(object):
    """Types of text
    
    Admitted values
    ---------------
        FL_NORMAL_TEXT
            Normal text flobject type
    """
    pass

# list of possible values - my add --LK
TEXTTYPE_list = [FL_NORMAL_TEXT, ]


FL_TEXT_BOXTYPE = FL_FLAT_BOX
FL_TEXT_COL1 = FL_COL1
FL_TEXT_COL2 = FL_MCOL
FL_TEXT_LCOL = FL_LCOL
FL_TEXT_ALIGN = FL_ALIGN_LEFT


###############################
# forms.h (xpopup.h)
# Prototypes for xpop-up menus
###############################

# FL_MAXPUPI placeholder (deprecated)
# FL_PUP_PADH placeholder (deprecated)


#################################
# forms.h (clipbd.h)
# prototypes for clipboard stuff
#################################

FL_LOSE_SELECTION_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
                                     cty.c_long)
FL_LOSE_SELECTION_CALLBACK = FL_LOSE_SELECTION_CB


FL_SELECTION_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
                                cty.c_long, cty.c_void_p, cty.c_long)
FL_SELECTION_CALLBACK = FL_SELECTION_CB


#############################
# forms.h (popup.h)
#############################


class FL_POPUP_(cty.Structure):
    """FL_POPUP class

    Attributes
    ----------
        next : pointer to FL_POPUP
            next in linked list
        prev : pointer to FL_POPUP
            previous in linked list
        parent : pointer to FL_POPUP
            for sub-popups, direct parent
        top_parent : pointer to FL_POPUP
            for sub-popups, top-most parent
        entries : pointer to FL_POPUP_ENTRY
            pointer to list of entries
        title : str
            popup title
        win : long_pos
            popup window
        parent_win : long_pos
            parent window of popup window
        cursor : long_pos
            cursor for the popup
        callback : function
            FL_POPUP_CB function type
        use_req_pos : int
            if set use req_x, req_y
        req_x : int
            *todo*
        req_y : int
            *todo*
        xpos : int
            horizontal position of popup window
        ypos : int
            vertical position of popup window
        width : int_pos
            width of popup window
        height : int_pos
            height of popup window
        min_width : int
            minimum width of popup
        title_box_x : int
            horizontal position of title box
        title_box_y : int
            vertical position of title box
        title_box_w : int_pos
            width of title box
        title_box_h : int_pos
            height of title box
        has_subs : int
            *todo*
        has_boxes : int
            *todo*
        counter : int
            *todo*
        title_font_style : int
            *todo*
        title_font_size : int
            *todo*
        entry_font_style : int
            *todo*
        entry_font_size : int
            *todo*
        event_mask : long_pos
            *todo*
        bw : int
            border width
        bg_color : long_pos
            background color of popup
        on_color : long_pos
            color of entry under mouse
        title_color : long_pos
            color of title text
        text_color : long_pos
            normal text color of entry
        text_on_color : long_pos
            text color when mouse on entry
        text_off_color : long_pos
            text color of disabled entry
        radio_color : long_pos
            color of radio buttons
        policy : int
            popup policy
        need_recalc : int
            do we need to recalc position?
        ret : FL_POPUP_RETURN instance
            structure passed to callbacks and returned on
            selection
    """
    pass

FL_POPUP = FL_POPUP_

class FL_POPUP_ENTRY_(cty.Structure):
    """FL_POPUP_ENTRY class
    
    Attributes
    ----------
        prev : pointer to FL_POPUP_ENTRY
            next in linked list
        next : pointer to FL_POPUP_ENTRY
            previous in linked list
        popup : pointer to FL_POPUP
            popup it belongs to
        is_act : int
            set while mouse is over it
        text : str
            complete text of entry
        label : str
            cleaned-up label text
        accel : str
            cleaned-up accelerator key text
        val : long
            value associated with entry
        user_data : pointer to any type
            pointer to user data
        type : int
            normal, toggle, radio, sub-popup
        state : int_pos
            disabled, hidden, checked
        group : int
            group (for radio entries only)
        sub : pointer to FL_POPUP
            sub-popup bound to entry
        shortcut : pointer to long
            keyboard shortcuts
        ulpos : int
            underline position in text
        callback : FL_POPUP_CB function type
            callback for selected entry
        enter_callback : FL_POPUP_CB function type
            callback for entering entry
        leave_callback : FL_POPUP_CB function type
            callback for leaving entry
        xpos : int
            horizontal position of entry text
        ypos : int
            vertical position of entry text
        width : int_pos
            width of entry text
        height : int_pos
            height of entry text
        box_x : int
            *todo*
        box_y : int
            *todo*
        box_w : int_pos
            *todo*
        box_h : int_pos
            *todo*
        sl_h : int_pos
            *todo*
        ul_x : int
            *todo*
        ul_y : int
            *todo*
        ul_w : int_pos
            *todo*
        ul_h : int_pos
            *todo*
    """
    pass

FL_POPUP_ENTRY = FL_POPUP_ENTRY_

class FL_POPUP_RETURN_(cty.Structure):
    """FL_POPUP_RETURN class

    Attributes
    ----------
        val : long
            value assigned to popup entry
        user_data : pointer to any type
            pointer to user data
        text : str
            text of the selected popup entry
        label : str
            left-flushed label part
        accel : str
            right-flushed label part
        entry : pointer to FL_POPUP_ENTRY
            pointer to selected popup entry
        popup : pointer to FL_POPUP
            popup or sub-popup it belongs to
    """
    _fields_ = [
        ('val', cty.c_long),              # value assigned to popup entry
        ('user_data', cty.c_void_p),      # pointer to user data
        ('text', STRING),               # text of the selected popup entry
        ('label', STRING),              # left-flushed label part
        ('accel', STRING),              # right-flushed label part
        ('entry', cty.POINTER(FL_POPUP_ENTRY)),  # ptr to selected popup entry
        ('popup', cty.POINTER(FL_POPUP)), ]     # popup we're called for

FL_POPUP_RETURN = FL_POPUP_RETURN_


FL_POPUP_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_POPUP_RETURN))

FL_POPUP_._fields_ = [
    ('next', cty.POINTER(FL_POPUP)),      # next in linked list
    ('prev', cty.POINTER(FL_POPUP)),      # previous in linked list
    ('parent', cty.POINTER(FL_POPUP)),      # for sub-popups, direct parent
    ('top_parent', cty.POINTER(FL_POPUP)),  # and top-most parent
    ('entries', cty.POINTER(FL_POPUP_ENTRY)),   # pointer to list of entries
    ('title', STRING),
    ('win', Window),                    # popup window
    ('parent_win', Window),             # parent window of popup window
    ('cursor', Cursor),                 # cursor for the popup
    ('callback', FL_POPUP_CB),
    ('use_req_pos', cty.c_int),         # if set use req_x, req_y
    ('req_x', cty.c_int),
    ('req_y', cty.c_int),
    ('x', cty.c_int),                   # position of popup window
    ('y', cty.c_int),
    ('w', cty.c_uint),                  # dimensions of popup window
    ('h', cty.c_uint),
    ('min_width', cty.c_int),           # minimum width of popup
    ('title_box_x', cty.c_int),         # position of title box
    ('title_box_y', cty.c_int),
    ('title_box_w', cty.c_uint),        # dimensions of title box
    ('title_box_h', cty.c_uint),
    ('has_subs', cty.c_int),
    ('has_boxes', cty.c_int),
    ('counter', cty.c_int),
    ('title_font_style', cty.c_int),
    ('title_font_size', cty.c_int),
    ('entry_font_style', cty.c_int),
    ('entry_font_size', cty.c_int),
    ('event_mask', cty.c_ulong),
    ('bw', cty.c_int),                  # border width
    ('bg_color', FL_COLOR),             # background color of popup
    ('on_color', FL_COLOR),             # color of entry under mouse
    ('title_color', FL_COLOR),          # color of title text
    ('text_color', FL_COLOR),           # normal text color of entry
    ('text_on_color', FL_COLOR),        # text color when mouse on entry
    ('text_off_color', FL_COLOR),       # text color of disabled entry
    ('radio_color', FL_COLOR),          # color of radio buttons
    ('policy', cty.c_int),
    ('need_recalc', cty.c_int),         # do we need to recalc position?
    ('ret', FL_POPUP_RETURN), ]  # structure passed to callbacks and returned
                                 # on selection


FL_POPUP_ENTRY_._fields_ = [
    ('prev', cty.POINTER(FL_POPUP_ENTRY)),  # next in linked list
    ('next', cty.POINTER(FL_POPUP_ENTRY)),  # previous in linked list
    ('popup', cty.POINTER(FL_POPUP)),       # popup it belongs to
    ('is_act', cty.c_int),                  # set while mouse is over it
    ('text', STRING),                       # complete text of entry
    ('label', STRING),                      # cleaned-up label text
    ('accel', STRING),                      # cleaned-up accelerator key text
    ('val', cty.c_long),                    # value associated with entry
    ('user_data', cty.c_void_p),            # pointer to user data
    ('type', cty.c_int),                   # normal, toggle, radio, sub-popup
    ('state', cty.c_uint),                  # disabled, hidden, checked
    ('group', cty.c_int),                   # group (for radio entries only)
    ('sub', cty.POINTER(FL_POPUP)),         # sub-popup bound to entry
    ('shortcut', cty.POINTER(cty.c_long)),    # keyboard shortcuts
    ('ulpos', cty.c_int),                     # underline position in text
    ('callback', FL_POPUP_CB),              # callback for entry
    ('enter_callback', FL_POPUP_CB),        # callback for entering entry
    ('leave_callback', FL_POPUP_CB),        # callback for leaving entry
    ('x', cty.c_int),                   # horizontal position of entry text
    ('y', cty.c_int),                   # vertical position of entry text
    ('w', cty.c_uint),                      # width of entry text
    ('h', cty.c_uint),                      # height of entry text
    ('box_x', cty.c_int),
    ('box_y', cty.c_int),
    ('box_w', cty.c_uint),
    ('box_h', cty.c_uint),
    ('sl_h', cty.c_uint),
    ('ul_x', cty.c_int),
    ('ul_y', cty.c_int),
    ('ul_w', cty.c_uint),
    ('ul_h', cty.c_uint), ]


class FL_POPUP_ITEM(cty.Structure):
    """FL_POPUP_ITEM class
    
    Attributes
    ----------
        text : str
            text of entry
        callback : FL_POPUP_CB function type
            (selection) callback
        shortcut : str
            keyboard shortcut description
        type : int
            type of entry
        state : int
            disabled, hidden, checked
    """
    _fields_ = [
        ('text', STRING),               # text of entry
        ('callback', FL_POPUP_CB),      # (selection) callback
        ('shortcut', STRING),           # keyboard shortcut description
        ('type', cty.c_int),            # type of entry
        ('state', cty.c_int), ]         # disabled, hidden, checked


# Popup policies
# values for unnamed enumeration
FL_POPUP_NORMAL_SELECT = 0
FL_POPUP_DRAG_SELECT = 1

class admitted_values_for_POPUPPOLICY(object):
    """Policies of popup
    
    Admitted values
    ---------------
        FL_POPUP_NORMAL_SELECT
            Keeps the popup opened when the mouse is not released on
            one of the selectable items
        FL_POPUP_DRAG_SELECT
            Close the popup immediately when the mouse button is released
    """
    pass

# my add, list of possible values --LK
POPUPPOLICY_list = [FL_POPUP_NORMAL_SELECT, FL_POPUP_DRAG_SELECT]


# Popup states
# values for unnamed enumeration
FL_POPUP_NONE = 0
FL_POPUP_DISABLED = 1       # entry is disabled
FL_POPUP_HIDDEN   = 2       # entry is temporarily hidden
FL_POPUP_CHECKED  = 4       # toggle/radio item is in on state

class admitted_values_for_POPUPSTATE(object):
    """States of popup
    
    Admitted values
    ---------------
        FL_POPUP_NONE
            No special flags are set for the state of the popup
        FL_POPUP_DISABLED
            The popup is disabled and cannot be selected
        FL_POPUP_HIDDEN
            The popup is hidden, i.e. does not get shown (and thus
            cannot be selected).
        FL_POPUP_CHECKED
            Only relevant for toggle or radio popups, marks it as
            in "on" state
    """
    pass

# my add, list of possible values --LK
# single values and bitwise OR-ed of them
POPUPSTATE_list = [FL_POPUP_NONE, FL_POPUP_DISABLED, FL_POPUP_HIDDEN,
                FL_POPUP_CHECKED, FL_POPUP_DISABLED|FL_POPUP_HIDDEN,
                FL_POPUP_DISABLED|FL_POPUP_CHECKED,
                FL_POPUP_HIDDEN|FL_POPUP_CHECKED]


# Popup entry types
# values for unnamed enumeration
FL_POPUP_NORMAL = 0         # normal popup entry
FL_POPUP_TOGGLE = 1         # toggle ("binary") popup entry
FL_POPUP_RADIO = 2          # radio popup entry
FL_POPUP_SUB = 3            # sub-popup popup entry
FL_POPUP_LINE = 4           # line popup entry

class admitted_values_for_POPUPTYPE(object):
    """Types of popup
    
    Admitted values
    ---------------
        FL_POPUP_NORMAL
            Normal popup entry with no special properties.
        FL_POPUP_TOGGLE
            Toggle or binary popup entry, drawn with a check-mark
            to its left if in 'on' state
        FL_POPUP_RADIO
            Radio popup entry, drawn with a circle to its left
            (color-filled when 'on'. The group member of the FL_POPUP_ENTRY
            structure determines to which group the entry belongs
        FL_POPUP_SUB
            Entry for a sub-popupfn. The sub member of its FL_POPUP_ENTRY
            structure is a pointer to the sub-popup that gets shown when
            the mouse enters the entry.
        FL_POPUP_LINE
            Not a real entry, just indicates that a separator line is to be
            drawn between the previous and the next entry.
    """
    pass

# list of possible values, my add --LK
POPUPTYPE_list = [FL_POPUP_NORMAL, FL_POPUP_TOGGLE, FL_POPUP_RADIO,
                  FL_POPUP_SUB, FL_POPUP_LINE]


# Popup color types
# values for unnamed enumeration
FL_POPUP_BACKGROUND_COLOR = 0
FL_POPUP_HIGHLIGHT_COLOR = 1
FL_POPUP_TITLE_COLOR = 2
FL_POPUP_TEXT_COLOR = 3
FL_POPUP_HIGHLIGHT_TEXT_COLOR = 4
FL_POPUP_DISABLED_TEXT_COLOR = 5
FL_POPUP_RADIO_COLOR = 6

class admitted_values_for_POPUPCOLOR(object):
    """Types of popup color
    
    Admitted values
    ---------------
        FL_POPUP_BACKGROUND_COLOR
            Background color of the popup (default is FL_MCOL)
        FL_POPUP_HIGHLIGHT_COLOR
            Backgroud color an entry is drawn with when it is selectable
            and the mouse is on top of it (default is FL_BOTTOM_BCOL)
        FL_POPUP_TITLE_COLOR
            Color used for the title text of a popup (default is FL_BLACK)
        FL_POPUP_TEXT_COLOR
            Color normal used for entry texts (default is FL_BLACK).
        FL_POPUP_HIGHLIGHT_TEXT_COLOR
            Color of the entry text when it is selectable and the mouse is
            on top of it (default is FL_WHITE)
        FL_POPUP_DISABLED_TEXT_COLOR
            Color for drawing the text of disabled entries (default is
            FL_INACTIVE_COL)
        FL_POPUP_RADIO_COLOR
            Color the circle drawn for radio entris in 'on' state is drawn in.
    """
    pass

# list of possible values, my add --LK
POPUPCOLOR_list = [FL_POPUP_BACKGROUND_COLOR, FL_POPUP_HIGHLIGHT_COLOR,
                   FL_POPUP_TITLE_COLOR, FL_POPUP_TEXT_COLOR,
                   FL_POPUP_HIGHLIGHT_TEXT_COLOR,
                   FL_POPUP_DISABLED_TEXT_COLOR, FL_POPUP_RADIO_COLOR]


#########################
# forms.h (positioner.h)
#########################

FL_NORMAL_POSITIONER = 0
FL_OVERLAY_POSITIONER = 1
FL_INVISIBLE_POSITIONER = 2

class admitted_values_for_POSITIONERTYPE(object):
    """Types of positioner
    
    Admitted values
    ---------------
        FL_NORMAL_POSITIONER
            Cross-hair inside a box
        FL_OVERLAY_POSITIONER
            Cross-hair inside a transparent box (i.e. drawn in
            in XOR mode)
        FL_INVISIBLE_POSITIONER
            Completely invisible positioner to be used just for the
            side effect of obtaining a position (typically a flobject
            is below it that otherwise would receive user events)
    """
    pass

# my add, list of possible values --LK
POSITIONERTYPE_list = [FL_NORMAL_POSITIONER, FL_OVERLAY_POSITIONER,
                       FL_INVISIBLE_POSITIONER]


# Defaults
FL_POSITIONER_BOXTYPE = FL_DOWN_BOX
FL_POSITIONER_COL1 = FL_COL1
FL_POSITIONER_COL2 = FL_RED
FL_POSITIONER_LCOL = FL_LCOL
FL_POSITIONER_ALIGN = FL_ALIGN_BOTTOM


#############################
# forms.h (scrollbar.h)
#############################

# values for unnamed enumeration
FL_VERT_SCROLLBAR = 0
FL_HOR_SCROLLBAR = 1
FL_VERT_THIN_SCROLLBAR = 2
FL_HOR_THIN_SCROLLBAR = 3
FL_VERT_NICE_SCROLLBAR = 4
FL_HOR_NICE_SCROLLBAR = 5
FL_VERT_PLAIN_SCROLLBAR = 6
FL_HOR_PLAIN_SCROLLBAR = 7
FL_HOR_BASIC_SCROLLBAR = FL_HOR_PLAIN_SCROLLBAR
FL_VERT_BASIC_SCROLLBAR = FL_VERT_PLAIN_SCROLLBAR

# values for unnamed enumeration
FL_NORMAL_SCROLLBAR = 0
FL_THIN_SCROLLBAR = 1
FL_NICE_SCROLLBAR = 2
FL_PLAIN_SCROLLBAR = 3

class admitted_values_for_SCROLLBARTYPE(object):
    """Types of scrollbar
    
    Admitted values
    ---------------
        FL_VERT_SCROLLBAR
            A vertical scrollbar
        FL_HOR_SCROLLBAR
            A horizontal scrollbar
        FL_VERT_THIN_SCROLLBAR
            A different looking vertical scrollbar
        FL_HOR_THIN_SCROLLBAR
            A different looking horizontal scrollbar
        FL_VERT_NICE_SCROLLBAR
            A vertical scrollbar using FL_NICE_SLIDER
        FL_HOR_NICE_SCROLLBAR
            A horizontal scrollbar using FL_NICE_SLIDER
        FL_VERT_PLAIN_SCROLLBAR or FL_VERT_BASIC_SCROLLBAR
            Similar to FL_THIN_SCROLLBAR
        FL_HOR_PLAIN_SCROLLBAR or FL_HOR_BASIC_SCROLLBAR
            Similar to FL_HOR_THIN_SCROLLBAR
        FL_NORMAL_SCROLLBAR
            *todo*
        FL_THIN_SCROLLBAR
            *todo*
        FL_NICE_SCROLLBAR
            *todo*
        FL_PLAIN_SCROLLBAR
            *todo*
    """
    pass

# my add, list of possible values --LK
SCROLLTYPE_list = [FL_VERT_SCROLLBAR, FL_HOR_SCROLLBAR, \
                  FL_VERT_THIN_SCROLLBAR, FL_HOR_THIN_SCROLLBAR, \
                  FL_VERT_NICE_SCROLLBAR, FL_HOR_NICE_SCROLLBAR, \
                  FL_VERT_PLAIN_SCROLLBAR, FL_HOR_PLAIN_SCROLLBAR, \
                  FL_HOR_BASIC_SCROLLBAR, FL_VERT_BASIC_SCROLLBAR, \
                  FL_NORMAL_SCROLLBAR, FL_THIN_SCROLLBAR, \
                  FL_NICE_SCROLLBAR, FL_PLAIN_SCROLLBAR]


#####################
# forms.h (select.h)
#####################

# Select flobject types
# values for unnamed enumeration
FL_NORMAL_SELECT = 0
FL_MENU_SELECT = 1
FL_DROPLIST_SELECT = 2

class admitted_values_for_SELECTTYPE(object):
    """Select flobject types
    
    Admitted values
    ---------------
        FL_NORMAL_SELECT
            Per default this type is drawn as a rounded, flat box (but you
            can change that by setting a different boxtype for the flobject)
            with the text of the currently selected item in its center
        FL_MENU_SELECT
            This select flobject looks like a button with a little extra box
            at its right side (just like a FL_MENU_BUTTON) and the text of
            the currently selected item is drawn on the button-like object
        FL_DROPLIST_SELECT
            This type looks like a button with the text of the currently
            selected item on top of it and a second square button directly
            beside it with an downward pointing arrow on it
    """
    pass

# list of possible values - my add --LK
SELECTTYPE_list = [FL_NORMAL_SELECT, FL_MENU_SELECT, FL_DROPLIST_SELECT]


# Defaults
FL_SELECT_COL1 = FL_COL1
FL_SELECT_COL2 = FL_MCOL
FL_SELECT_LCOL = FL_LCOL
FL_SELECT_ALIGN = FL_ALIGN_LEFT


#######################
# forms.h (slider.h)
# Slider flobject class
#######################

FL_HOR_FLAG = 1
FL_SCROLL_FLAG = 8

class admitted_values_for_SLIDERFLAG(object):
    """Flags of slider
    
    Admitted values
    ---------------
        FL_HOR_FLAG
            *todo*
        FL_SCROLL_FLAG
            *todo*
    """
    pass

# values for enumeration 'FL_SLIDER_TYPE'
FL_SLIDER_TYPE = cty.c_int # enum
FL_VERT_SLIDER = 0
FL_HOR_SLIDER = FL_VERT_SLIDER | FL_HOR_FLAG
FL_VERT_FILL_SLIDER = 2
FL_HOR_FILL_SLIDER = FL_VERT_FILL_SLIDER | FL_HOR_FLAG
FL_VERT_NICE_SLIDER = 4
FL_HOR_NICE_SLIDER = FL_VERT_NICE_SLIDER | FL_HOR_FLAG
FL_VERT_BROWSER_SLIDER = 6
FL_HOR_BROWSER_SLIDER = FL_VERT_BROWSER_SLIDER | FL_HOR_FLAG

# The following are for use with scrollbars only!
# for FL_VERT_SCROLLBAR and FL_HOR_SCROLLBAR
FL_VERT_BROWSER_SLIDER2 = FL_VERT_SLIDER | FL_SCROLL_FLAG
FL_HOR_BROWSER_SLIDER2 = FL_HOR_SLIDER | FL_SCROLL_FLAG
# for FL_VERT_THIN_SCROLLBAR and FL_VERT_THIN_SCROLLBAR
FL_VERT_THIN_SLIDER = FL_VERT_FILL_SLIDER | FL_SCROLL_FLAG
FL_HOR_THIN_SLIDER = FL_HOR_FILL_SLIDER | FL_SCROLL_FLAG
# for FL_VERT_NICE_SCROLLBAR and FL_HOR_NICE_SCROLLBAR
FL_VERT_NICE_SLIDER2 = FL_VERT_NICE_SLIDER | FL_SCROLL_FLAG
FL_HOR_NICE_SLIDER2 = FL_HOR_NICE_SLIDER | FL_SCROLL_FLAG
# for use as FL_VERT_PLAIN_SCROLLBAR and FL_VERT_PLAIN_SCROLLBAR
FL_VERT_BASIC_SLIDER = FL_VERT_BROWSER_SLIDER | FL_SCROLL_FLAG
FL_HOR_BASIC_SLIDER = FL_HOR_BROWSER_SLIDER | FL_SCROLL_FLAG

class admitted_values_for_FL_SLIDER_TYPE(object):
    """Types of slider
    
    Admitted values
    ---------------
        FL_VERT_SLIDER
            normal slider
        FL_HOR_SLIDER
            horizontal slider
        FL_VERT_FILL_SLIDER
            filled slider
        FL_HOR_FILL_SLIDER
            horizontal filled slider
        FL_VERT_NICE_SLIDER
            *todo*
        FL_HOR_NICE_SLIDER
            horizontal *todo*
        FL_VERT_BROWSER_SLIDER
            *todo*
        FL_HOR_BROWSER_SLIDER
            horizontal *todo*
        FL_VERT_BROWSER_SLIDER2
            for FL_VERT_SCROLLBAR (for scrollbar only)
        FL_HOR_BROWSER_SLIDER2
            horizontal, for FL_HOR_SCROLLBAR (for scrollbar only)
        FL_VERT_THIN_SLIDER = FL_VERT_FILL_SLIDER | FL_SCROLL_FLAG
            for FL_VERT_THIN_SCROLLBAR (for scrollbar only)
        FL_HOR_THIN_SLIDER = FL_HOR_FILL_SLIDER | FL_SCROLL_FLAG
            for FL_HOR_THIN_SCROLLBAR (for scrollbar only)
        FL_VERT_NICE_SLIDER2 = FL_VERT_NICE_SLIDER | FL_SCROLL_FLAG
            for FL_VERT_NICE_SCROLLBAR and  (for scrollbar only)
        FL_HOR_NICE_SLIDER2 = FL_HOR_NICE_SLIDER | FL_SCROLL_FLAG
            for FL_HOR_NICE_SCROLLBAR (for scrollbar only)
        FL_VERT_BASIC_SLIDER
            for FL_VERT_PLAIN_SCROLLBAR (for scrollbar only)
        FL_HOR_BASIC_SLIDER
            for FL_VERT_PLAIN_SCROLLBAR (for scrollbar only)
    """
    pass

# my add, list of possible values --LK
SLIDERTYPE_list = [FL_VERT_SLIDER, FL_HOR_SLIDER, FL_VERT_FILL_SLIDER, \
                   FL_HOR_FILL_SLIDER, FL_VERT_NICE_SLIDER, \
                   FL_HOR_NICE_SLIDER, FL_VERT_BROWSER_SLIDER, \
                   FL_HOR_BROWSER_SLIDER, FL_VERT_BROWSER_SLIDER2, \
                   FL_HOR_BROWSER_SLIDER2, FL_VERT_THIN_SLIDER, \
                   FL_HOR_THIN_SLIDER, FL_VERT_NICE_SLIDER2, \
                   FL_HOR_NICE_SLIDER2, FL_VERT_BASIC_SLIDER, \
                   FL_HOR_BASIC_SLIDER]


# Defaults
FL_SLIDER_BW1 = FL_BOUND_WIDTH
FL_SLIDER_BW2 = 0             #FL_abs(FL_BOUND_WIDTH) - 1
FL_SLIDER_BOXTYPE = FL_DOWN_BOX
FL_SLIDER_COL1 = FL_COL1
FL_SLIDER_COL2 = FL_COL1
FL_SLIDER_LCOL = FL_LCOL
FL_SLIDER_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_SLIDER_FINE = 0.25
FL_SLIDER_WIDTH = 0.10


##########################
# forms.h (spinner.h)
##########################

# values for enumeration 'FL_SPINNER_TYPE'
FL_SPINNER_TYPE = cty.c_int     # enum
FL_INT_SPINNER = 0
FL_FLOAT_SPINNER = 1

class admitted_values_for_FL_SPINNER_TYPE(object):
    """Types of spinner
    
    Admitted values
    ---------------
        FL_INT_SPINNER = 0
            spinner with integer values
        FL_FLOAT_SPINNER = 1
            spinner with float values
    """
    pass

# my add, list of possible values --LK
SPINNERTYPE_list = [FL_INT_SPINNER, FL_FLOAT_SPINNER]


########################
# forms.h (tabfolder.h)
########################

# values for unnamed enumeration
FL_TOP_TABFOLDER = 0        # tab on top
FL_BOTTOM_TABFOLDER = 1
FL_LEFT_TABFOLDER = 2
FL_RIGHT_TABFOLDER = 3
FL_NORMAL_TABFOLDER = FL_TOP_TABFOLDER

class admitted_values_for_TABFOLDERTYPE(object):
    """Types of tabfolder
    
    Admitted values
    ---------------
        FL_TOP_TABFOLDER or FL_NORMAL_TABFOLDER
            tabfolder with tab on top
        FL_BOTTOM_TABFOLDER
            tabfolder with tab on bottom
        FL_LEFT_TABFOLDER
            tabfolder with tab on left
        FL_RIGHT_TABFOLDER
            tabfolder with tab on right
    """
    pass

# my add, list of possible values --LK
TABFOLDERTYPE_list = [FL_TOP_TABFOLDER, FL_BOTTOM_TABFOLDER,
        FL_LEFT_TABFOLDER, FL_RIGHT_TABFOLDER, FL_NORMAL_TABFOLDER]


# values for unnamed enumeration
FL_NO = 0
FL_FIT = 1
FL_ENLARGE_ONLY = 2

class admitted_values_for_FOLDERSIZESFIT(object):
    """How values fit?
    
    Admitted values
    ---------------
        FL_NO
            do not scale the form
        FL_FIT
            Always scale the form
        FL_ENLARGE_ONLY
            Scale the form only if it is smaller than folder area
    """
    pass

# my add, list of possible values --LK
FOLDERSIZESFIT_list = [FL_NO, FL_FIT, FL_ENLARGE_ONLY]



#########################
# forms.h (thumbwheel.h)
#########################

# values for unnamed enumeration
FL_VERT_THUMBWHEEL = 0
FL_HOR_THUMBWHEEL = 1

class admitted_values_for_THUMBWHEELTYPE(object):
    """Types of thumbwheel
    
    Admitted values
    ---------------
        FL_VERT_THUMBWHEEL
            *todo*
        FL_HOR_THUMBWHEEL
            *todo*
    """
    pass

# my add, list of possible values --LK
THUMBWHEELTYPE_list = [FL_VERT_THUMBWHEEL, FL_HOR_THUMBWHEEL]


# defaults
FL_THUMBWHEEL_COL1 = FL_COL1
FL_THUMBWHEEL_COL2 = FL_COL1
FL_THUMBWHEEL_LCOL = FL_BLACK
FL_THUMBWHEEL_BOXTYPE = FL_BORDER_BOX
FL_THUMBWHEEL_ALIGN = FL_ALIGN_BOTTOM


######################
# forms.h (timer.h)
# Timer flobject class
######################

# values for enumeration 'FL_TIMER_TYPE'
FL_TIMER_TYPE = cty.c_int # enum
FL_NORMAL_TIMER = 0
FL_VALUE_TIMER = 1
FL_HIDDEN_TIMER = 2

class admitted_values_for_FL_TIMER_TYPE(object):
    """Types of timer
    
    Admitted values
    ---------------
        FL_NORMAL_TIMER
            Visible, showing a label in a box which blinks when the
            timer expires.
        FL_VALUE_TIMER
            Visible, showing the time left or the elapsed time. Blinks
            if the timer expires
        FL_HIDDEN_TIMER
            Not visible
    """
    pass

# my add, list of possible values --LK
TIMERTYPE_list = [FL_NORMAL_TIMER, FL_VALUE_TIMER, FL_HIDDEN_TIMER]


# Defaults
FL_TIMER_BOXTYPE = FL_DOWN_BOX
FL_TIMER_COL1 = FL_COL1
FL_TIMER_COL2 = FL_RED
FL_TIMER_LCOL = FL_LCOL
FL_TIMER_ALIGN = FL_ALIGN_CENTER

# Others
FL_TIMER_BLINKRATE = 0.2


FL_TIMER_FILTER = cty.CFUNCTYPE(STRING, cty.POINTER(FL_OBJECT),
                                cty.c_double)


###############################
# forms.h (xyplot.h)
###############################

# values for enumeration 'FL_XYPLOT_TYPE'
FL_XYPLOT_TYPE = cty.c_int      # enum
FL_NORMAL_XYPLOT = 0    # solid line
FL_SQUARE_XYPLOT = 1
FL_CIRCLE_XYPLOT = 2
FL_FILL_XYPLOT = 3
FL_POINTS_XYPLOT = 4
FL_DASHED_XYPLOT = 5
FL_IMPULSE_XYPLOT = 6
FL_ACTIVE_XYPLOT = 7    #
FL_EMPTY_XYPLOT = 8
FL_DOTTED_XYPLOT = 9
FL_DOTDASHED_XYPLOT = 10
FL_LONGDASHED_XYPLOT = 11
FL_LINEPOINTS_XYPLOT = 12

class admitted_values_for_FL_XYPLOT_TYPE(object):
    """Types of XyPlot
    
    Admitted values
    ---------------
        FL_NORMAL_XYPLOT
            xyplot flobject type with solid line
        FL_SQUARE_XYPLOT
            xyplot flobject type has added square
        FL_CIRCLE_XYPLOT
            xyplot flobject type has added circle
        FL_FILL_XYPLOT
            xyplot flobject type is filled completely
        FL_POINTS_XYPLOT
            xyplot flobject type has only data points
        FL_DASHED_XYPLOT
            xyplot flobject type has dashed line
        FL_IMPULSE_XYPLOT
            *todo*
        FL_ACTIVE_XYPLOT
            xyplot flobject type accepts interactive manipulations
        FL_EMPTY_XYPLOT
            *todo*
        FL_DOTTED_XYPLOT
            *todo*
        FL_DOTDASHED_XYPLOT
            *todo*
        FL_LONGDASHED_XYPLOT
            *todo*
        FL_LINEPOINTS_XYPLOT
            xyplot flobject type has lines and points
    """
    pass

# list of possible values - my add --LK
XYPLOTTYPE_list = [FL_NORMAL_XYPLOT, FL_SQUARE_XYPLOT, FL_CIRCLE_XYPLOT,
                   FL_FILL_XYPLOT, FL_POINTS_XYPLOT, FL_DASHED_XYPLOT,
                   FL_IMPULSE_XYPLOT, FL_ACTIVE_XYPLOT, FL_EMPTY_XYPLOT,
                   FL_DOTTED_XYPLOT, FL_DOTDASHED_XYPLOT,
                   FL_LONGDASHED_XYPLOT, FL_LINEPOINTS_XYPLOT]


# values for unnamed enumeration
FL_LINEAR = 0
FL_LOG = 1

class admitted_values_for_XYPLOTSCALE(object):
    """Scales for XyPlot
    
    Admitted values
    ---------------
        FL_LINEAR
            Uses linear scale for xyplot
        FL_LOG
            Uses logarithmic scale for xyplot
    """
    pass

# list of possible values - my add --LK
XYPLOTSCALE_list = [FL_LINEAR, FL_LOG]


# values for unnamed enumeration
FL_GRID_NONE  = 0
"""No grid for xyplot"""
FL_GRID_MAJOR = 1
"""Grid for the major divisions of xyplot."""
FL_GRID_MINOR = 2
"""Grid for the major and minor divisions of xyplot."""

class admitted_values_for_XYPLOTGRID(object):
    """Grids of XyPlot
    
    Admitted values
    ---------------
        FL_GRID_NONE
            No grid for xyplot
        FL_GRID_MAJOR
            Grid for the major divisions of xyplot
        FL_GRID_MINOR
            Grid for the major and minor divisions of xyplot
    """
    pass

# list of possible values - my add --LK
XYPLOTGRID_list = [FL_GRID_NONE, FL_GRID_MAJOR, FL_GRID_MINOR]


# Defaults
FL_XYPLOT_BOXTYPE = FL_FLAT_BOX
FL_XYPLOT_COL1 = FL_COL1
FL_XYPLOT_LCOL = FL_LCOL
FL_XYPLOT_ALIGN = FL_ALIGN_BOTTOM
FL_MAX_XYPLOTOVERLAY = 32


FL_XYPLOT_SYMBOL = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_int,
            cty.POINTER(FL_POINT), cty.c_int, cty.c_int, cty.c_int)


#########################
# flimage.h
# Image related routines
#########################

# values for unnamed enumeration
FL_IMAGE_NONE = 0
FL_IMAGE_MONO = 1
FL_IMAGE_GRAY = 2
FL_IMAGE_CI = 4
FL_IMAGE_RGB = 8
FL_IMAGE_PACKED = 16
FL_IMAGE_GRAY16 = 32
FL_IMAGE_RGB16 = 64
FL_IMAGE_FLEX = 1023        # all formats

# aliases
FLIMAGE_NONE = FL_IMAGE_NONE
FLIMAGE_MONO = FL_IMAGE_MONO
FLIMAGE_GRAY = FL_IMAGE_GRAY
FLIMAGE_CI = FL_IMAGE_CI
FLIMAGE_RGB = FL_IMAGE_RGB
FLIMAGE_PACKED = FL_IMAGE_PACKED
FLIMAGE_GRAY16 = FL_IMAGE_GRAY16
FLIMAGE_RGB16 = FL_IMAGE_RGB16
FLIMAGE_FLEX = FL_IMAGE_FLEX

class admitted_values_for_FLIMAGETYPE(object):
    """Types of Flimage
    
    Admitted values
    ---------------
        FL_IMAGE_NONE
            not supported image file format
        FL_IMAGE_MONO
            b&w. 1bit bitmaps. 0=white 1=black
        FL_IMAGE_GRAY
            gray-scale image (8 bit)
        FL_IMAGE_CI
            generic colormmaped index image
        FL_IMAGE_RGB
            24 bit RGB(A) image (8bit each)
        FL_IMAGE_PACKED
            24 bit RGB(A) packed into an int
        FL_IMAGE_GRAY16
            gray-scale image (9 to 16 bit)
        FL_IMAGE_RGB16
            36bits color image
        FL_IMAGE_FLEX = 1023
            all formats
    """
    pass

# my add, list of possible values --LK
FLIMAGETYPE_list = [FL_IMAGE_NONE, FL_IMAGE_MONO, FL_IMAGE_GRAY, \
                    FL_IMAGE_CI, FL_IMAGE_RGB, FL_IMAGE_PACKED, \
                    FL_IMAGE_GRAY16, FL_IMAGE_RGB16, FL_IMAGE_FLEX, \
                    FLIMAGE_NONE, FLIMAGE_MONO, FLIMAGE_GRAY, \
                    FLIMAGE_CI, FLIMAGE_RGB, FLIMAGE_PACKED, \
                    FLIMAGE_GRAY16, FLIMAGE_RGB16, FLIMAGE_FLEX]


FL_LUTBITS = 12         # max colormap bits. 4096 entries

# values for unnamed enumeration
FLIMAGE_AUTOCOLOR = 0x7fffffff
FLIMAGE_BADCOLOR = FLIMAGE_AUTOCOLOR

FL_WINDOW = Window    # cty.c_ulong


class flimage_text_(cty.Structure):
    """flimage_text class

    Attributes
    ----------
        str : str
            the text string itself
        len : int
            string length
        xpos : int
            starting horizontal position of text (wrt image)
        ypos : int
            starting vertical position of text (wrt image)
        color : int_pos
            color of the text
        bcolor : int_pos
            background color of the text
        nobk : int
            no background
        size : int
            font size
        style : int
            font style
        angle : int
            in 1/10th of a degrees
        align : int
            alignment with regards to (x,y)
    """
    _fields_ = [
        ('str', STRING),              # the string itself
        ('len', cty.c_int),           # string length
        ('x', cty.c_int),             # starting location of text (wrt image)
        ('y', cty.c_int),
        ('color', cty.c_uint),        # color of the text
        ('bcolor', cty.c_uint),       # background color of the text
        ('nobk', cty.c_int),          # no background
        ('size', cty.c_int),          # font size & style
        ('style', cty.c_int),
        ('angle', cty.c_int),         # in 1/10th of a degrees
        ('align', cty.c_int), ]       # alignment with regards to (x,y)
FLIMAGE_TEXT = flimage_text_


class flimage_marker_(cty.Structure):
    """ FLIMAGE_MARKER class
    
    Attributes
    ----------
        name : str
            marker name
        width : int
            width
        height : int
            height
        xpos : int
            horizontal location
        ypos :  int
            vertical location
        color : int_pos
            color of the marker
        bcolor : int_pos
            aux. color of the marker
        angle : int
            angle in 1/10th of a degree
        fill : int
            *todo*
        thickness : int
            line thickness
        style : int
            line style
        display : pointer to void
            filled by the library
        gc : pointer to void
            *todo*
        win : long_pos
            FL_WINDOW
        psdraw : str
            *todo*
    """
    _fields_ = [
        ('name', STRING),               # marker name
        ('w', cty.c_int),               # width
        ('h', cty.c_int),               # height
        ('x', cty.c_int),               # horizontal location
        ('y', cty.c_int),               # vertical location
        ('color', cty.c_uint),          # color of the marker
        ('bcolor', cty.c_uint),         # aux. color of the marker
        ('angle', cty.c_int),           # in 1/10th of a degree
        ('fill', cty.c_int),
        ('thickness', cty.c_int),       # line thickness
        ('style', cty.c_int),           # line style
        # the following is filled by the library
        ('display', cty.c_void_p),
        ('gc', cty.c_void_p),
        ('win', FL_WINDOW),
        ('psdraw', STRING), ]
FLIMAGE_MARKER = flimage_marker_

FLIMAGE_REPFREQ = 0x1f   # report every 32 lines


class flimage_setup_(cty.Structure):
    """flimage_setup_ class

    Attributes
    ----------
        app_data : pointer to void
        visual_cue : function, returned value
            function(pointer to FL_IMAGE, str) -> int
        error_message : function, no return
            function(pointer to FL_IMAGE, str)
        display : function, returned value
            function(pointer to FL_IMAGE, long_pos) -> int
        rgbfile : str
            *todo*
        do_not_clear : int
            *todo*
        xdisplay : pointer to void
            *todo*
        max_frames : int
            *todo*
        delay : int
            *todo*
        no_auto_extension : int
            *todo*
        report_frequency : int
            *todo*
        double_buffer : int
            *todo*
        trailblazer : long_pos
            internal use
        header_info : int
            *todo*
    """
    pass

FLIMAGESETUP = cty.POINTER(flimage_setup_)


# possible errors from the library. Not currently (v0.89) used
# values for unnamed enumeration
FLIMAGE_ERR_NONE = 0
FLIMAGE_ERR_ALLOC = -50
FLIMAGE_ERR_INVALID = -49
FLIMAGE_ERR_ARGUMENT = -48
FLIMAGE_ERR_FILE = -47
FLIMAGE_ERR_INTERNAL = -46
FLIMAGE_ERR_UNKNOWN = -45

class admitted_values_for_FLIMAGEERRTYPE(object):
    """Error types for flimage
    
    Admitted values
    ---------------
        FLIMAGE_ERR_NONE
            *todo*
        FLIMAGE_ERR_ALLOC
            memory? allocation error
        FLIMAGE_ERR_INVALID
            invalid image
        FLIMAGE_ERR_ARGUMENT
            bad argument/request
        FLIMAGE_ERR_FILE
            i/o error
        FLIMAGE_ERR_INTERNAL
            bugs
        FLIMAGE_ERR_UNKNOWN
            *todo*
    """
    pass


class flimage_(cty.Structure):
    """FL_IMAGE class
    
    Attributes
    ----------
        type : int
            image type
        width : int
            image width
        height : int
            image height
        app_data : pointer to void
            for application at setup time
        u_vdata : pointer to void
            for application
        u_ldata : long
            for application
        red : pointer to pointer to ubyte?
            *todo*
        green : pointer to pointer to ubyte?
            *todo*
        blue : pointer to pointer to ubyte?
            *todo*
        alpha : pointer to pointer to ubyte?
            *todo*
        rgba : pointer to pointer to ubyte? (array 4 members)
            alias *todo*
        ci : pointer to pointer to ushort?
            *todo*
        gray : pointer to pointer to ushort?
            *todo*
        packed : pointer to pointer to FL_PACKED4
            *todo*
        red16 : pointer to pointer to ushort?
            not currently supported
        green16 : pointer to pointer to ushort?
            not currently supported
        blue16 : pointer to pointer to ushort?
            not currently supported
        alpha16 : pointer to pointer to ushort?
            not currently supported
        ci8 : pointer to pointer to ubyte?
            not currently supported
        red_lut : pointer to int
            red lookup tables
        green_lut : pointer to int
            green lookup tables
        blue_lut : pointer to int
            blue lookup tables
        alpha_lut : pointer to int
            alpha lookup tables
        lut : pointer to int (array 4 members)
            alias
        map_len : int
            lut length
        colors : int
            actual colors used in displaying
        gray_maxval : int
            indicate the range of gray16
        ci_maxval : int
            max value of ci. not used, use map_len
        rgb_maxval : int
            max value for rgb16 image
        level : int
            *todo*
        wwidth : int
            *todo*
        wlut : pointer to ushort
            lut for window levelling
        wlut_len : int
            *todo*
        app_background : int
            transparent color, in RGB
        comments : str
            *todo*
        comments_len : int
            *todo*
        available_type : int
            *todo*
        next : pointer to flimage_
            *todo*
        sx : int
             display subimage origin (horizontal position)
        sy : int
            display subimage origin (vertical position)
        sw : int
            display subimage width
        sh : int),
            display subimage height
        wx : int
            display location relative to win (horizontal position)
        wy : int
            display location relative to win (vertical position)
        modified : int
            *todo*
        display : function, returned value
            function(pointer to flimage_, FL_WINDOW) -> int
        double_buffer : int
            *todo*
        sxd : int
            *todo*
        syd : int
            *todo*
        swd : int
            *todo*
        shd : int
            *todo*
        wxd : int
            *todo*
        wyd : int
            *todo*
        fmt_name : str
            format name (ppm,jpg etc)
        text : pointer to FLIMAGE_TEXT
            annotation text
        ntext : int
            *todo*
        max_text : int
            *todo*
        dont_display_text : int
            *todo*
        display_text : function, no return
            function(pointer to flimage_)
        free_text : function, no return
            function(pointer to flimage_)
        marker : pointer to FLIMAGE_MARKER
            *todo*
        nmarkers : int
            *todo*
        max_markers : int
            *todo*
        dont_display_marker : int
            *todo*
        display_markers : function, no return
            function(pointer to flimage_)
        free_markers : function, no return
            function(pointer to flimage_)
        pmin : double
            minimum value physical data range
        pmax : double
            maximum value physical data range
        poffset : double
            *todo*
        pscale : double
            *todo*
        xdist_offset : double),
            pixel grid horizontal distance
        xdist_scale : double
            *todo*
        ydist_offset : double
            pixel grid vertical distance
        ydist_scale : double
            *todo*
        infile : str
            *todo*
        outfile : str
            *todo*
        foffset : long),
            *todo*
        original_type : int
            *todo*
        pre_write : function, returned value
            function(pointer to flimage_) -> int
            hooks for application to have a chance to set some options.
            If pre_write returns -1, the output will be canceled
        post_write : function, returned value
            function(pointer to flimage_) -> int
            hooks for application to have a chance to set some options.
        subx : int
            image processing stuff. Subimage horizontal origin
        suby : int
            subimage vertical origin
        subw : int
            subimage width
        subh : int
            subimage height
        sub_shape : int
            shape of the subimage
        fill_color : int_pos
            fill color
        force_convert : int
            *todo*
        llut : pointer to int (array 3 members)
            linear lut
        llut_len : int
            *todo*
        hist : pointer to int_pos (array 4 members)
            *todo*
        total : int
            application handlers *todo*
        completed : int
            application handlers *todo*
        visual_cue : function, returned value
            function(pointer to flimage_, str) -> int
        error_message : function, no return
            function(pointer to flimage_, str)
        error_code : int
            not currently used
        display_type : int
            just before handing it to X
        pixels : pointer to pointer to ushort
            *todo*
        image_spec : pointer to void
            additional image info
        xdisplay : pointer to void
            the X connection
        tran_rgb : int
            RGB color that should be transparent
        tran_index : int
            index that should be transparent
        matr : int
            *todo*
        matc : int
            *todo*
        more : int
            multi-frame images *todo*
        current_frame : int
            *todo*
        total_frames : int
            *todo*
        next_frame : function, returned value
            function(pointer to flimage_) -> int
        prev_frame : function, returned value
            function(pointer to flimage_) -> int
        random_frame : function, returned value
            function(pointer to flimage_, int) -> int
        rewind_frame : function, returned value
            function(pointer to flimage_) -> int
        cleanup : function, no return
            function(pointer to flimage_)
        stop_looping : int
            *todo*
        fpin : pointer to FILE
            for internal use
        fpout : pointer to FILE
            for internal use
        image_io : pointer to void
            *todo*
        io_spec : pointer to void
            io operation helper
        spec_size : int
            *todo*
        depth : int
            the depth we actually use
        vclass : int
            *todo*
        visual : pointer to void
            *todo*
        xcolormap : long_pos,
            *todo*
        rgb2p : FL_RGB2PIXEL_
            *todo*
        ximage : pointer to void
            *todo*
        win : FL_WINDOW
            *todo*
        gc : pointer to void
            *todo*
        sdepth : int
            depth the server says
        textgc : pointer to void
            *todo*
        markergc : pointer to void
            *todo*
        extra_io_info : pointer to void
            *todo*
        pixmap : long_pos
            *todo*
        pixmap_w : int
            *todo*
        pixmap_h : int
            *todo*
        pixmap_depth : int
            *todo*
        isPixmap : int
            *todo*
        setup : FLIMAGESETUP
            *todo*
        info : str
            *todo*
    """
    pass

flimage_._fields_ = [
        ('type', cty.c_int),            # image type
        ('w', cty.c_int),               # image width
        ('h', cty.c_int),               # image height
        ('app_data', cty.c_void_p),     # for application at setup time
        ('u_vdata', cty.c_void_p),      # for application
        ('u_ldata', cty.c_long),        # for application
        ('red', cty.POINTER(cty.POINTER(cty.c_ubyte))),
        ('green', cty.POINTER(cty.POINTER(cty.c_ubyte))),
        ('blue', cty.POINTER(cty.POINTER(cty.c_ubyte))),
        ('alpha', cty.POINTER(cty.POINTER(cty.c_ubyte))),
        ('rgba', cty.POINTER(cty.POINTER(cty.c_ubyte)) * 4),    # alias
        ('ci', cty.POINTER(cty.POINTER(cty.c_ushort))),
        ('gray', cty.POINTER(cty.POINTER(cty.c_ushort))),
        ('packed', cty.POINTER(cty.POINTER(FL_PACKED4))),
        ('red16', cty.POINTER(cty.POINTER(cty.c_ushort))),  #not currently supported
        ('green16', cty.POINTER(cty.POINTER(cty.c_ushort))),  #not currently supported
        ('blue16', cty.POINTER(cty.POINTER(cty.c_ushort))),  # not currently supported
        ('alpha16', cty.POINTER(cty.POINTER(cty.c_ushort))),  # not currently supported
        ('ci8', cty.POINTER(cty.POINTER(cty.c_ubyte))), # not currently supported
        ('red_lut', cty.POINTER(cty.c_int)),        # red lookup tables
        ('green_lut', cty.POINTER(cty.c_int)),      # green lookup tables
        ('blue_lut', cty.POINTER(cty.c_int)),       # blue lookup tables
        ('alpha_lut', cty.POINTER(cty.c_int)),      # alpha lookup tables
        ('lut', cty.POINTER(cty.c_int) * 4),        # alias
        ('map_len', cty.c_int),                 # lut length
        ('colors', cty.c_int),              # actual colors used in displaying
        ('gray_maxval', cty.c_int),             # indicate the range of gray16
        ('ci_maxval', cty.c_int),       # max value of ci. not used, use map_len
        ('rgb_maxval', cty.c_int),              # max value for rgb16 image
        ('level', cty.c_int),
        ('wwidth', cty.c_int),
        ('wlut', cty.POINTER(cty.c_ushort)),        # lut for window levelling
        ('wlut_len', cty.c_int),
        ('app_background', cty.c_int),          # transparent color, in RGB
        ('comments', STRING),
        ('comments_len', cty.c_int),
        ('available_type', cty.c_int),
        ('next', cty.POINTER(flimage_)),
        ('sx', cty.c_int),                      # display subimage origin
        ('sy', cty.c_int),
        ('sw', cty.c_int),                      # display subimage width
        ('sh', cty.c_int),
        ('wx', cty.c_int),              # display location relative to win
        ('wy', cty.c_int),
        ('modified', cty.c_int),
        ('display', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_), FL_WINDOW)),
        ('double_buffer', cty.c_int),
        ('sxd', cty.c_int),
        ('syd', cty.c_int),
        ('swd', cty.c_int),
        ('shd', cty.c_int),
        ('wxd', cty.c_int),
        ('wyd', cty.c_int),
        ('fmt_name', STRING),       # format name (ppm,jpg etc)
        # annotation stuff
        ('text', cty.POINTER(FLIMAGE_TEXT)),
        ('ntext', cty.c_int),
        ('max_text', cty.c_int),
        ('dont_display_text', cty.c_int),
        ('display_text', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
        ('free_text', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
        ('marker', cty.POINTER(FLIMAGE_MARKER)),
        ('nmarkers', cty.c_int),
        ('max_markers', cty.c_int),
        ('dont_display_marker', cty.c_int),
        ('display_markers', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
        ('free_markers', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
        # physicalValue = poffset + pixelValue * pscale
        ('pmin', cty.c_double),         # minimum value physical data range
        ('pmax', cty.c_double),         # maximum value physical data range
        ('poffset', cty.c_double),
        ('pscale', cty.c_double),
        #  pixel grid distance
        ('xdist_offset', cty.c_double),
        ('xdist_scale', cty.c_double),
        ('ydist_offset', cty.c_double),
        ('ydist_scale', cty.c_double),
        ('infile', STRING),
        ('outfile', STRING),
        ('foffset', cty.c_long),
        ('original_type', cty.c_int),
        # hooks for application to have a chance to set some options.
        # if pre_write returns -1, the output will be canceled
        ('pre_write', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
        ('post_write', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
        # image processing stuff
        ('subx', cty.c_int),        # subimage horizontal origin
        ('suby', cty.c_int),        # subimage vertical origin
        ('subw', cty.c_int),        # subimage width
        ('subh', cty.c_int),        # subimage height
        ('sub_shape', cty.c_int),   # shape of the subimage
        ('fill_color', cty.c_uint),     # fill color
        ('force_convert', cty.c_int),
        ('llut', cty.POINTER(cty.c_int) * 3),   # linear lut
        ('llut_len', cty.c_int),
        ('hist', cty.POINTER(cty.c_uint) * 4),
        # application handlers
        ('total', cty.c_int),
        ('completed', cty.c_int),
        ('visual_cue', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_), \
            STRING)),
        ('error_message', cty.CFUNCTYPE(None, cty.POINTER(flimage_), \
            STRING)),
        ('error_code', cty.c_int),      # not currently used
        ('display_type', cty.c_int),    # just before handing it to X
        ('pixels', cty.POINTER(cty.POINTER(cty.c_ushort))),
        ('image_spec', cty.c_void_p),   # additional image info
        ('xdisplay', cty.c_void_p),     # the X connection
        ('tran_rgb', cty.c_int),        # RGB color that should be transparent
        ('tran_index', cty.c_int),      # index that should be transparent
        ('matr', cty.c_int),
        ('matc', cty.c_int),
        # multi-frame images
        ('more', cty.c_int),
        ('current_frame', cty.c_int),
        ('total_frames', cty.c_int),
        ('next_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
        ('prev_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
        ('random_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_), \
            cty.c_int)),
        ('rewind_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
        ('cleanup', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
        ('stop_looping', cty.c_int),
        # the following are for internal use
        ('fpin', cty.POINTER(FILE)),
        ('fpout', cty.POINTER(FILE)),
        ('image_io', cty.c_void_p),
        ('io_spec', cty.c_void_p),      # io operation helper
        ('spec_size', cty.c_int),
        ('depth', cty.c_int),           # the depth we actually use
        ('vclass', cty.c_int),
        ('visual', cty.c_void_p),
        ('xcolormap', cty.c_ulong),
        ('rgb2p', FL_RGB2PIXEL_),
        ('ximage', cty.c_void_p),
        ('win', FL_WINDOW),
        ('gc', cty.c_void_p),
        ('sdepth', cty.c_int),          # depth the server says
        ('textgc', cty.c_void_p),
        ('markergc', cty.c_void_p),
        ('extra_io_info', cty.c_void_p),
        ('pixmap', cty.c_ulong),
        ('pixmap_w', cty.c_int),
        ('pixmap_h', cty.c_int),
        ('pixmap_depth', cty.c_int),
        ('isPixmap', cty.c_int),
        ('setup', FLIMAGESETUP),
        ('info', STRING), ]

FL_IMAGE = flimage_


# some configuration stuff

flimage_setup_._fields_ = [
    ('app_data', cty.c_void_p),
    ('visual_cue', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE), STRING)),
    ('error_message', cty.CFUNCTYPE(None, cty.POINTER(FL_IMAGE), STRING)),
    ('display', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE), cty.c_ulong)),
    ('rgbfile', STRING),
    ('do_not_clear', cty.c_int),
    ('xdisplay', cty.c_void_p),
    ('max_frames', cty.c_int),
    ('delay', cty.c_int),
    ('no_auto_extension', cty.c_int),
    ('report_frequency', cty.c_int),
    ('double_buffer', cty.c_int),
    # internal use
    ('trailblazer', cty.c_ulong),
    ('header_info', cty.c_int), ]

FLIMAGE_SETUP = flimage_setup_


# output options

class FLIMAGE_JPEG_OPTION(cty.Structure):
    """FLIMAGE_JPEG_OPTION class

    Attributes
    ----------
      quality : int
        *todo*
      smoothing : int
        *todo*
    """
    _fields_ = [
        ('quality', cty.c_int),
        ('smoothing', cty.c_int), ]


# values for unnamed enumeration
FLIMAGE_WRITABLE = FL_WRITE
FLIMAGE_READABLE = FL_READ

class admitted_values_for_READWRITEFLIMAGE(object):
    """Flimage read/write state
    
    Admitted values
    ---------------
        FLIMAGE_WRITABLE = FL_WRITE
            *todo*
        FLIMAGE_READABLE
            *todo*
    """
    pass


class FLIMAGE_FORMAT_INFO(cty.Structure):
    """FLIMAGE_FORMAT_INFO class

    Attributes
    ----------
      formal_name : str
        *todo*
      short_name : str
        *todo*
      extension : str
        *todo*
      type : int
        *todo*
      read_write : int
        *todo*
      annotation : int
        *todo*
    """
    _fields_ = [
        ('formal_name', STRING),
        ('short_name', STRING),
        ('extension', STRING),
        ('type', cty.c_int),
        ('read_write', cty.c_int),
        ('annotation', cty.c_int), ]


# simple image processing routines

#FLIMAGE_SHARPEN = cty.pointer(cty.pointer(cty.c_int(-1)))
FLIMAGE_SHARPEN = -1
#FLIMAGE_SMOOTH = cty.pointer(cty.pointer(cty.c_int(-2)))
FLIMAGE_SMOOTH = -2
FL_SMOOTH = FLIMAGE_SMOOTH
FL_SHARPEN = FLIMAGE_SHARPEN

class admitted_values_for_SHARPENSMOOTHFLIMAGE(object):
    """Flimage sharpen/smooth image
    
    Admitted values
    ---------------
        FL_SMOOTH
            *todo*
        FL_SHARPEN
            *todo*
    """
    pass


# values for unnamed enumeration
FLIMAGE_NOSUBPIXEL = 0
FLIMAGE_SUBPIXEL = 1
FLIMAGE_CENTER = 2
FLIMAGE_RIGHT = 8
FLIMAGE_ASPECT = 32
FLIMAGE_NOCENTER = FL_ALIGN_LEFT_TOP

class admitted_values_for_FLIMAGEPOSITION(object):
    """Flimage position/rotation
    
    Admitted values
    ---------------
        FLIMAGE_NOSUBPIXEL
            scale with no subpixel sampling
        FLIMAGE_SUBPIXEL
            scale with subpixel sampling
        FLIMAGE_CENTER
            center warped image (default)
        FLIMAGE_RIGHT
            flush right the warped image
        FLIMAGE_ASPECT
            fit the size
        FLIMAGE_NOCENTER
            *todo*
    """
    pass

# my add, list of possible values for subpixel in
# flflimage.flimage_rotate() --LK
FLIMAGESUBPIXROT_list = [FLIMAGE_NOSUBPIXEL, FLIMAGE_SUBPIXEL]


# /usr/include/X11/Xlib.h 345
class XWindowAttributes(cty.Structure):
    """X11 XWindowAttributes class

    Attributes
    ----------
        xpos : int
            *todo*
        ypos : int
            *todo*
        width : int
            *todo*
        height : int
            *todo*
        border_width : int
            *todo*
        depth : int
            *todo*
        visual : pointer to Visual
            *todo*
        root : long_pos
            Window
        c_class : int
            *todo*
        bit_gravity : int
            *todo*
        win_gravity : int
            *todo*
        backing_store : int
            *todo*
        backing_planes : long_pos
            *todo*
        backing_pixel : long_pos
            *todo*
        save_under : int
            *todo*
        colormap : long_pos
            Colormap
        map_installed : int
            *todo*
        map_state : int
            *todo*
        all_event_masks : long
            *todo*
        your_event_mask : long
            *todo*
        do_not_propagate_mask : long
            *todo*
        override_redirect : int
            *todo*
        screen : pointer to Screen
            *todo*
    """
    pass


# /usr/include/X11/Xlib.h 176
class XExtCodes(cty.Structure):
    """X11 XExtCodes class

    Attributes
    ----------
        extension : int
            *todo*
        major_opcode : int
            *todo*
        first_event : int
            *todo*
        first_error : int
            *todo*
    """
    _fields_ = [
        ('extension', cty.c_int),
        ('major_opcode', cty.c_int),
        ('first_event', cty.c_int),
        ('first_error', cty.c_int), ]


# /usr/include/X11/Xlib.h 186
class XPixmapFormatValues(cty.Structure):
    """X11 XPixmapFormatValues class

    Attributes
    ----------
        depth : int
            *todo*
        bits_per_pixel : int
            *todo*
        scanline_pad : int
            *todo*
    """
    _fields_ = [
        ('depth', cty.c_int),
        ('bits_per_pixel', cty.c_int),
        ('scanline_pad', cty.c_int), ]

# /usr/include/X11/Xlib.h 218
class XGCValues(cty.Structure):
    """X11 XGCValues class

    Attributes
    ----------
        function : int
            *todo*
        plane_mask : long_pos
            *todo*
        foreground : long_pos
            *todo*
        background : long_pos
            *todo*
        line_width : int
            *todo*
        line_style : int
            *todo*
        cap_style : int
            *todo*
        join_style : int
            *todo*
        fill_style : int
            *todo*
        fill_rule : int
            *todo*
        arc_mode : int
            *todo*
        tile : long_pos
            Pixmap
        stipple : long_pos
            Pixmap
        ts_x_origin : int
            *todo*
        ts_y_origin : int
            *todo*
        font : long_pos
            Font
        subwindow_mode : int
            *todo*
        graphics_exposures : int
            *todo*
        clip_x_origin : int
            *todo*
        clip_y_origin : int
            *todo*
        clip_mask : long_pos
            Pixmap
        dash_offset : int
            *todo*
        dashes : char
            *todo*
    """
    _fields_ = [
        ('function', cty.c_int),
        ('plane_mask', cty.c_ulong),
        ('foreground', cty.c_ulong),
        ('background', cty.c_ulong),
        ('line_width', cty.c_int),
        ('line_style', cty.c_int),
        ('cap_style', cty.c_int),
        ('join_style', cty.c_int),
        ('fill_style', cty.c_int),
        ('fill_rule', cty.c_int),
        ('arc_mode', cty.c_int),
        ('tile', Pixmap),
        ('stipple', Pixmap),
        ('ts_x_origin', cty.c_int),
        ('ts_y_origin', cty.c_int),
        ('font', Font),
        ('subwindow_mode', cty.c_int),
        ('graphics_exposures', cty.c_int),
        ('clip_x_origin', cty.c_int),
        ('clip_y_origin', cty.c_int),
        ('clip_mask', Pixmap),
        ('dash_offset', cty.c_int),
        ('dashes', cty.c_char), ]


# /usr/include/X11/Xlib.h 258
class Depth(cty.Structure):
    """X11 Depth class
    
    Attributes
    ----------
        depth : int
            *todo*
        nvisuals : int
            *todo*
        visuals : pointer to Visual
            *todo*
    """
    _fields_ = [
        ('depth', cty.c_int),
        ('nvisuals', cty.c_int),
        ('visuals', cty.POINTER(Visual)), ]

# /usr/include/X11/Xlib.h 286
class Screen(cty.Structure):
    """X11 Screen class

    Attributes
    ----------
        ext_data : pointer to XExtData
            *todo*
        display : pointer to _XDisplay
            *todo*
        root : long_pos
            Window
        width : int
            *todo*
        height : int
            *todo*
        mwidth : int
            *todo*
        mheight : int
            *todo*
        ndepths : int
            *todo*
        depths : pointer to Depth
            *todo*
        root_depth : int
            *todo*
        root_visual : pointer to Visual
            *todo*
        default_gc : GC
            *todo*
        cmap : long_pos
            Colormap
        white_pixel : long_pos
            *todo*
        black_pixel : long_pos
            *todo*
        max_maps : int
            *todo*
        min_maps : int
            *todo*
        backing_store : int
            *todo*
        save_unders : int
            *todo*
        root_input_mask : long
            *todo*
    """
    _fields_ = [
        ('ext_data', cty.POINTER(XExtData)),
        ('display', cty.POINTER(_XDisplay)),
        ('root', Window),
        ('width', cty.c_int),
        ('height', cty.c_int),
        ('mwidth', cty.c_int),
        ('mheight', cty.c_int),
        ('ndepths', cty.c_int),
        ('depths', cty.POINTER(Depth)),
        ('root_depth', cty.c_int),
        ('root_visual', cty.POINTER(Visual)),
        ('default_gc', GC),
        ('cmap', Colormap),
        ('white_pixel', cty.c_ulong),
        ('black_pixel', cty.c_ulong),
        ('max_maps', cty.c_int),
        ('min_maps', cty.c_int),
        ('backing_store', cty.c_int),
        ('save_unders', cty.c_int),
        ('root_input_mask', cty.c_long), ]


# /usr/include/X11/Xlib.h 296
class ScreenFormat(cty.Structure):
    """X11 ScreenFormat class
    
    Attributes
    ----------
        ext_data : pointer to XExtData
            *todo*
        depth : int
            *todo*
        bits_per_pixel : int
            *todo*
        scanline_pad : int
            *todo*
    """
    _fields_ = [
        ('ext_data', cty.POINTER(XExtData)),
        ('depth', cty.c_int),
        ('bits_per_pixel', cty.c_int),
        ('scanline_pad', cty.c_int), ]

XWindowAttributes._fields_ = [
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('depth', cty.c_int),
    ('visual', cty.POINTER(Visual)),
    ('root', Window),
    ('c_class', cty.c_int),
    ('bit_gravity', cty.c_int),
    ('win_gravity', cty.c_int),
    ('backing_store', cty.c_int),
    ('backing_planes', cty.c_ulong),
    ('backing_pixel', cty.c_ulong),
    ('save_under', cty.c_int),
    ('colormap', Colormap),
    ('map_installed', cty.c_int),
    ('map_state', cty.c_int),
    ('all_event_masks', cty.c_long),
    ('your_event_mask', cty.c_long),
    ('do_not_propagate_mask', cty.c_long),
    ('override_redirect', cty.c_int),
    ('screen', cty.POINTER(Screen)),
]


# /usr/include/X11/Xlib.h 356
class XHostAddress(cty.Structure):
    """X11 XHostAddress class
    
    Attributes
    ----------
        family : int
            *todo*
        length : int
            *todo*
        address : str
            *todo*
    """
    _fields_ = [
        ('family', cty.c_int),
        ('length', cty.c_int),
        ('address', STRING), ]


# /usr/include/X11/Xlib.h 366
class XServerInterpretedAddress(cty.Structure):
    """X11 XServerInterpretedAddress class
    
    Attributes
    ----------
        typelength : int
            *todo*
        valuelength : int
            *todo*
        type : str
            *todo*
        value : str
            *todo*
    """
    _fields_ = [
        ('typelength', cty.c_int),
        ('valuelength', cty.c_int),
        ('type', STRING),
        ('value', STRING), ]


# /usr/include/X11/Xlib.h 371
class _XImage(cty.Structure):
    """X11 XImage class
    
    Attributes
    ----------
      width : int
        *todo*
      height : int
        *todo*
      xoffset : int
        *todo*
      format : int
        *todo*
      data : str
        *todo*
      byte_order : int
        *todo*
      bitmap_unit : int
        *todo*
      bitmap_bit_order : int
        *todo*
      bitmap_pad : int
        *todo*
      depth : int
        *todo*
      bytes_per_line : int
        *todo*
      bits_per_pixel : int
        *todo*
      red_mask : long_pos
        *todo*
      green_mask : long_pos
        *todo*
      blue_mask : long_pos
        *todo*
      obdata : str
        *todo*
      f : funcs class instance
        *todo*
    """
    pass


# /usr/include/X11/Xlib.h 387
class funcs(cty.Structure):
    """X11 funcs class
    
    Attributes
    ----------
        create_image : function, returned value
            function(pointer to _XDisplay, pointer to Visual,
            int_pos, int, int, str, int_pos, int_pos, int,
            int) -> pointer to _XImage
        destroy_image : function, returned value
            function(pointer to _XImage) -> int
        get_pixel : function, returned value
            function(pointer to _XImage, int, int) -> long_pos
        put_pixel : function, returned value
            function(pointer to _XImage, int, int, long_pos) -> int
        sub_image : function, returned value
            function(pointer to _XImage, int, int, int_pos,
            int_pos) -> pointer to _XImage
        add_pixel : function, returned value
            function(pointer to _XImage, long) -> int
    """
    _fields_ = [
        ('create_image', cty.CFUNCTYPE(cty.POINTER(_XImage),
            cty.POINTER(_XDisplay), cty.POINTER(Visual), cty.c_uint,
            cty.c_int, cty.c_int, STRING, cty.c_uint, cty.c_uint, cty.c_int,
            cty.c_int)),
        ('destroy_image', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XImage))),
        ('get_pixel', cty.CFUNCTYPE(cty.c_ulong, cty.POINTER(_XImage),
            cty.c_int, cty.c_int)),
        ('put_pixel', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XImage),
            cty.c_int, cty.c_int, cty.c_ulong)),
        ('sub_image', cty.CFUNCTYPE(cty.POINTER(_XImage),
            cty.POINTER(_XImage), cty.c_int, cty.c_int, cty.c_uint,
            cty.c_uint)),
        ('add_pixel', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XImage),
            cty.c_long)), ]


_XImage._fields_ = [
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('xoffset', cty.c_int),
    ('format', cty.c_int),
    ('data', STRING),
    ('byte_order', cty.c_int),
    ('bitmap_unit', cty.c_int),
    ('bitmap_bit_order', cty.c_int),
    ('bitmap_pad', cty.c_int),
    ('depth', cty.c_int),
    ('bytes_per_line', cty.c_int),
    ('bits_per_pixel', cty.c_int),
    ('red_mask', cty.c_ulong),
    ('green_mask', cty.c_ulong),
    ('blue_mask', cty.c_ulong),
    ('obdata', XPointer),
    ('f', funcs), ]
XImage = _XImage


FLIMAGE_Identify = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FILE))
FLIMAGE_Description = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))
FLIMAGE_Read_Pixels = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))
FLIMAGE_Write_Image = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))

cfunc_none_flimagemarker = cty.CFUNCTYPE(None, cty.POINTER(FLIMAGE_MARKER))


# here it is some documentation for some general concepts who do not belong
# particularly to a single function or data constant or variable.

# hacks to allow docstrings for non-functions and non-constants, since as a
# Values are meant to be ignored.
special_sequences_for_entry_text = """
    Special sequences for extry text
    --------------------------------

    A special sequences is represented by a case-sensitive alphabetic character
    placed into the entry text, prepended by a '%' character.

    There are 3 types of special sequences:
      - some do not need any additional arguments afterhand (%t, %T, %l, %d,
      %h);
      - some need an additional value directly inserted in text after it (%S);
      - some need an additional but separated argument/parameter (%x, %u, %f,
      %E, %L, %r, %R, %s).

    Some of them are mutually exclusive (%t, %T, %r, %R, %l, %m).

    Use %% to put a % character within the text of an entry.
"""
special_sequences_for_entry_text_x = """ \
    %x (with additional separate argument as a type long value)
    sets a value that is passed to all callback routines for the entry."""
special_sequences_for_entry_text_u = """ \
    %u (with additional separate argument as data of any type)
    sets user data that is passed to all callbacks of the entry. Warning:
    currently in xforms-python it does not fully work as expected."""
special_sequences_for_entry_text_f = """ \
    %f (with additional separate argument as function name)
    sets a callback function that gets called when the entry is selected. The
     function is of type FL_POPUP_CB, returning an int. Information about the
     entry etc. gets passed to the callback function via the FL_POPUP_RETURN
     class instance and the return value of the function can be used to keep
     the selection being reported back to the caller of fl_popup_do() by
     returning a value of FL_IGNORE (-1)."""
special_sequences_for_entry_text_E = """ \
    %E (with additional separate argument as function name)
    sets a callback routine that gets called each time the mouse enters the
    entry (as long as the entry is not disabled or hidden). The function type
    is the same as %f's callback function but its return value is never used."""
special_sequences_for_entry_text_L = """ \
    %L (with additional separate argument as function name)
    sets a callback routine that gets called each time the mouse leaves the
    entry. The function type is the same as %f's callback function but its
    return value is never used."""
special_sequences_for_entry_text_m = """ \
    %m (with additional separate argument as popup class instance)
    a sub-popup gets opened when the mouse enters the entry (the entry itself
    thus cannot be selected). The sub-popup to be opened must be an already
    existing FL_POPUP. A triangle will be drawn on the right of the entry to
    indicate that it is an entry for a sub-popup."""
special_sequences_for_entry_text_t = """ \
    %t (no argument)
    makes the entry a "toggle" entry, an entry that represents binary states
    and gets a check-mark drawn on its left if in "on" state. It is in "off"
    state at the start. Switching states happens automatically when the entry
    is selected."""
special_sequences_for_entry_text_T = """ \
    %T (no argument)
    makes the entry a "toggle" entry, an entry that represents binary states
    and gets a check-mark drawn on its left if in "on" state. If is in "on"
    state at the start. Switching states happens automatically when the entry
    is selected."""
special_sequences_for_entry_text_r = """ \
    %r (with additional separate argument as a type int group value)
    makes the entry a "radio" entry, i.e. it becomes part of a group of
    entries of which only one can be "on" at a time. The group value cannot
    be INT_MIN or INT_MAX. Radio entries are drawn with a small circle to the
    left, with the one for the entry in "on" state filled with a color (blue
    by default). When a radio entry is selected by the user that was in "off"
    state the entry of the group that was is "on" state before is automatically
    switched to "off" state. The entry is in "off" state at start (only one
    can be 'on' at the same time)."""
special_sequences_for_entry_text_R = """ \
    %R (with additional separate argument as a type int group value)
    makes the entry a "radio" entry, i.e. it becomes part of a group of entries
    of which only one can be "on" at a time. The group value cannot be INT_MIN
    or INT_MAX. Radio entries are drawn with a small circle to the left, with
    the one for the entry in "on" state filled with a color (blue per default).
    When a radio entry is selected by the user that was in "off" state the
    entry of the group that was is "on" state before is automatically switched
    to "off" state. The entry is in "on" state (in that case all entries
    created before in "on" state are reset to "off" state, i.e. the one
    created last "wins")."""
special_sequences_for_entry_text_l = """ \
    %l (no argument)
    creates not a real entry but indicates that a line is to be drawn to
    visually group other entries. While other properties can be set for such
    an "entry" only the "hidden" property is taken into account."""
special_sequences_for_entry_text_d = """ \
    %d (no argument)
    marks the entry as disabled, i.e. it cannot be selected and its text is
    by default drawn in a different color."""
special_sequences_for_entry_text_h = """ \
    %h (no argument)
    marks the entry as hidden, i.e. it is not shown while in this state."""
special_sequences_for_entry_text_s = """ \
    %s (with additional separate argument as a str)
    sets one or more shortcut keys for an entry. The character in the label
    identical to the shortcut character is only shown as underlined if %S is
    not used."""
special_sequences_for_entry_text_S = """ \
    %S (with an in-text value after)
    For entries with shortcut keys it is quite common to have them shown on
    the right hand side. Using %S you can split the entry's text into two
    parts, the first one (before %S) being drawn flushed left and the second
    part flushed right. Note that using this special sequence does not
    automatically sets a shortcut key, this still has to be done using %s."""

