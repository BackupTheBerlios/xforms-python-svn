#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
        <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.

    *****************************************************************
"""


__docformat__ = "epytext en"    # to be used with epydoc doc


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #

import ctypes as cty



# /usr/include/X11/Xdefs.h
XID = cty.c_ulong
Window = XID    # cty.c_ulong
Pixmap = XID    # cty.c_ulong
Cursor = XID        # cty.c_ulong



########################################
# forms.h (Basic.h)
#  Basic definitions and limits.
#  Window system independent prototypes
#  Modify with care
########################################

# Some general constants
FL_ON = 1
FL_OK = 1
FL_VALID = 1
FL_PREEMPT = 1
FL_AUTO = 2
FL_WHEN_NEEDED = FL_AUTO        #2
FL_OFF = 0
FL_CANCEL = 0
FL_INVALID = 0
# WM_DELETE_WINDOW callback return
FL_IGNORE = -1


# my add - list of possible values --LK
# used by input and browser
SCROLLBARVAL_list = [FL_AUTO, FL_ON, FL_OFF]


# max directory length  FL_PATH_MAX / PATH_MAX
# minimum value to enhance OS compatibility (for linux 4096) --LK
FL_PATH_MAX = 1024


# The screen coordinate unit, FL_Coord, must be of signed type.
FL_Coord = cty.c_int

FL_COLOR = cty.c_ulong

# Coordinates can be in pixels, milli-meters or points (1/72inch)
# values for enumeration 'FL_COORD_UNIT'
FL_COORD_UNIT = cty.c_int  # enum
FL_COORD_PIXEL = 0      # default, Pixel
"""Screen coordinate units in pixel"""
FL_COORD_MM = 1         # milli-meter
"""Screen coordinate units in millimeters"""
FL_COORD_POINT = 2      # point
"""Screen coordinate units in points (1/72 inch)"""
FL_COORD_centiMM = 3    # one hundredth of a mm
"""Screen coordinate units in centi-millimeters"""
FL_COORD_centiPOINT = 4    # one hundredth of a point
"""Screen coordinate units in centi-points, i.e., 1/100 of a point"""

# my add, list of possible values --LK
COORDUNIT_list = [FL_COORD_PIXEL, FL_COORD_MM, FL_COORD_POINT,
                  FL_COORD_centiMM, FL_COORD_centiPOINT]


# All object classes.
# values for enumeration 'FL_CLASS'
FL_CLASS = cty.c_int  # enum
FL_INVALID_CLASS = 0
""""""
FL_BUTTON = 1
""""""
FL_LIGHTBUTTON = 2
""""""
FL_ROUNDBUTTON = 3
""""""
FL_ROUND3DBUTTON = 4
""""""
FL_CHECKBUTTON = 5
""""""
FL_BITMAPBUTTON = 6
""""""
FL_PIXMAPBUTTON = 7
""""""
FL_BITMAP = 8
""""""
FL_PIXMAP = 9
""""""
FL_BOX = 10
""""""
FL_TEXT = 11
""""""
FL_MENU = 12
""""""
FL_CHART = 13
""""""
FL_CHOICE = 14
""""""
FL_COUNTER = 15
""""""
FL_SLIDER = 16
""""""
FL_VALSLIDER = 17
""""""
FL_INPUT = 18
""""""
FL_BROWSER = 19
""""""
FL_DIAL = 20
""""""
FL_TIMER = 21
""""""
FL_CLOCK = 22
""""""
FL_POSITIONER = 23
""""""
FL_FREE = 24
""""""
FL_XYPLOT = 25
""""""
FL_FRAME = 26
""""""
FL_LABELFRAME = 27
""""""
FL_CANVAS = 28
""""""
FL_GLCANVAS = 29
""""""
FL_TABFOLDER = 30
""""""
FL_SCROLLBAR = 31
""""""
FL_SCROLLBUTTON = 32
""""""
FL_MENUBAR = 33
""""""
#FL_TEXTBOX placeholder (internal)

FL_LABELBUTTON = 35
""""""
FL_COMBOBOX = 36
""""""
FL_IMAGECANVAS = 37
""""""
FL_THUMBWHEEL = 38
""""""
FL_COLORWHEEL = 39
""""""
FL_FORMBROWSER = 40
""""""
FL_SELECT = 41
""""""
FL_NMENU = 42
""""""
FL_SPINNER = 43
""""""
FL_TBOX = 44
""""""
FL_CLASS_END = 45           # sentinel

# my add, list of possible values --LK
OBJCLASS_list = [FL_BUTTON, FL_LIGHTBUTTON, FL_ROUNDBUTTON, FL_ROUND3DBUTTON,
                 FL_CHECKBUTTON, FL_BITMAPBUTTON, FL_PIXMAPBUTTON, FL_BITMAP,
                 FL_PIXMAP, FL_BOX, FL_TEXT, FL_MENU, FL_CHART, FL_CHOICE,
                 FL_COUNTER, FL_SLIDER, FL_VALSLIDER, FL_INPUT, FL_BROWSER,
                 FL_DIAL, FL_TIMER, FL_CLOCK, FL_POSITIONER, FL_FREE,
                 FL_XYPLOT, FL_FRAME, FL_LABELFRAME, FL_CANVAS, FL_GLCANVAS,
                 FL_TABFOLDER, FL_SCROLLBAR, FL_SCROLLBUTTON, FL_MENUBAR,
                 FL_LABELBUTTON, FL_COMBOBOX, FL_IMAGECANVAS,
                 FL_THUMBWHEEL, FL_COLORWHEEL, FL_FORMBROWSER, FL_SELECT,
                 FL_NMENU, FL_SPINNER, FL_TBOX]

FL_BEGIN_GROUP = 10000
FL_END_GROUP = 20000

FL_USER_CLASS_START = 1001      # min. user class value
FL_USER_CLASS_END = 9999        # max. user class value

# maximum border width (in pixel)
FL_MAX_BW = 10

# how to display a form onto screen
# values for enumeration 'FL_PLACE'
FL_PLACE = cty.c_int # enum
FL_PLACE_FREE = 0       # size remain resizable
"""Both the position and size are completely free. The initial size used
is the designed size. Initial position, if set via fl_set_form_position(),
will be used otherwise interactive positioning may be possible if the window
manager allows it."""
FL_PLACE_MOUSE = 1      # mouse centered on form
"""The form is placed centered below the mouse. Interactive resizing will
not be allowed unless this option is accompanied by FL_FREE_SIZE as in
FL_PLACE_MOUSE | FL_FREE_SIZE"""
FL_PLACE_CENTER = 2     # center of the screen
"""The form is placed in the center of the screen. If FL_FREE_SIZE
is also specified, interactive resizing will be allowed."""

FL_PLACE_POSITION = 4   # specific size
"""Initial position used will be the one set via fl_set_form_position().
Interactive resizing is possible."""
FL_PLACE_SIZE = 8       # specific size
"""The user can control the position but the size is fixed. Interactive
resizing is not allowed once the form becomes visible."""
FL_PLACE_GEOMETRY = 16  # specific position
"""Place at the latest position and size (see also below) or the geometry
set via fl_set_form_geometry() etc. A form so shown will have a fixed size
and interactive resizing is not allowed."""
FL_PLACE_ASPECT =  32   # keep aspect ratio
"""Allows interactive resizing but any new size will have the aspect ratio
as that of the initial size."""
FL_PLACE_FULLSCREEN = 64        # scale to fit screen
"""The form is scaled to cover the full screen. If FL_FREE_SIZE is also
 specified, interative resizing will be allowed."""
FL_PLACE_HOTSPOT = 128          # so mouse fall on (x,y)
"""The form is so placed that mouse is on the "hotspot". If FL_FREE_SIZE
is also specified, interactive resizing will be allowed."""
FL_PLACE_ICONIC = 256
"""The form is shown initially iconified. The size and location used are
the window manager's default."""
# modifiers
FL_FREE_SIZE = 16384          #(1<<14)
"""Allows resizing."""

FL_PLACE_FREE_CENTER = (FL_PLACE_CENTER | FL_FREE_SIZE)
"""Same as FL_PLACE_CENTER | FL_FREE_SIZE, i.e., place the form at the
center of the screen and allow resizing."""
FL_PLACE_CENTERFREE = (FL_PLACE_CENTER | FL_FREE_SIZE)
"""Same as FL_PLACE_CENTER | FL_FREE_SIZE, i.e., place the form at the
center of the screen and allow resizing."""

# my add, list of possible values --LK
PLACE_list = [FL_PLACE_FREE, FL_PLACE_MOUSE, FL_PLACE_CENTER,
              FL_PLACE_POSITION, FL_PLACE_SIZE, FL_PLACE_GEOMETRY,
              FL_PLACE_ASPECT, FL_PLACE_FULLSCREEN, FL_PLACE_HOTSPOT,
              FL_PLACE_ICONIC, FL_FREE_SIZE, FL_PLACE_FREE_CENTER,
              FL_PLACE_CENTERFREE]


# Window manager decoration request and forms attributes
# values for unnamed enumeration
FL_FULLBORDER = 1       # normal
"""Draw full border with title"""
FL_TRANSIENT = 2        # set TRANSIENT_FOR property
"""Draw borders with possibly less decoration (depends on the window
managers behaviour). You might not be able to iconify a form under
some WMs."""
FL_NOBORDER = 3         # use override_redirect to supress decor.
"""Draw no border at all. You can't iconify a form with no borders"""

# my add, list of possible values --LK
DECORATION_list = [FL_FULLBORDER, FL_TRANSIENT, FL_NOBORDER]


# All box types
# values for enumeration 'FL_BOX_TYPE'
FL_BOX_TYPE = cty.c_int  # enum
FL_NO_BOX = 0
"""No box at all (it's transparent), just a label"""
FL_UP_BOX = 1
"""A box that comes out of the screen"""
FL_DOWN_BOX = 2
"""A box that goes down into the screen"""
FL_BORDER_BOX = 3
"""A flat box with a border"""
FL_SHADOW_BOX = 4
"""A flat box with a shadow"""
FL_FRAME_BOX = 5
"""A flat box with an engraved frame"""
FL_ROUNDED_BOX = 6
"""A rounded box"""
FL_EMBOSSED_BOX = 7
"""A flat box with an embossed frame"""
FL_FLAT_BOX = 8
"""A flat box without a border (normally invisible unless given a
different color than the surroundings)"""
FL_RFLAT_BOX = 9
"""A rounded box without a border (normally invisible unless given a
different color than the surroundings)"""
FL_RSHADOW_BOX = 10
"""A rounded box with a shadow"""
FL_OVAL_BOX = 11
"""A box shaped like an ellipse"""
FL_ROUNDED3D_UPBOX = 12
"""A rounded box coming out of the screen"""
FL_ROUNDED3D_DOWNBOX = 13
"""A rounded box going into the screen"""
FL_OVAL3D_UPBOX = 14
"""An oval box coming out of the screen"""
FL_OVAL3D_DOWNBOX = 15
"""An oval box going into the screen"""
FL_OVAL3D_FRAMEBOX = 16
""""""
FL_OVAL3D_EMBOSSEDBOX = 17
""""""
#FL_TOPTAB_UPBOX placeholder (internal)
#FL_SELECTED_TOPTAB_UPBOX placeholder (internal)
#FL_BOTTOMTAB_UPBOX placeholder (internal)
#FL_SELECTED_BOTTOMTAB_UPBOX placeholder (internal)

FL_MAX_BOX_STYLES = 23                # sentinel

# my add, list of possible values --LK
BOXTYPE_list = [FL_NO_BOX, FL_UP_BOX, FL_DOWN_BOX, FL_BORDER_BOX, \
                FL_SHADOW_BOX, FL_FRAME_BOX, FL_ROUNDED_BOX, \
                FL_EMBOSSED_BOX, FL_FLAT_BOX, FL_RFLAT_BOX, FL_RSHADOW_BOX, \
                FL_OVAL_BOX, FL_ROUNDED3D_UPBOX, FL_ROUNDED3D_DOWNBOX, \
                FL_OVAL3D_UPBOX, FL_OVAL3D_DOWNBOX, FL_OVAL3D_FRAMEBOX, \
                FL_OVAL3D_EMBOSSEDBOX]


# How to place text relative to a box
# values for enumeration 'FL_ALIGN'
FL_ALIGN = cty.c_int  # enum
FL_ALIGN_CENTER = 0
"""In the middle of the box (inside it)"""
FL_ALIGN_TOP = 1
"""To the top of the box (outside it, if FL_ALIGN_INSIDE isn't used)"""
FL_ALIGN_BOTTOM = 2
"""To the bottom of the box (outside it, if FL_ALIGN_INSIDE isn't used)"""
FL_ALIGN_LEFT = 4
"""To the left of the box (outside it, if FL_ALIGN_INSIDE isn't used)"""
FL_ALIGN_RIGHT = 8
"""To the right of the box (outside it, if FL_ALIGN_INSIDE isn't used)"""
FL_ALIGN_LEFT_TOP = (FL_ALIGN_TOP|FL_ALIGN_LEFT)
"""To the left and top of the box (outside it, if FL_ALIGN_INSIDE isn't used)"""
FL_ALIGN_RIGHT_TOP = (FL_ALIGN_TOP|FL_ALIGN_RIGHT)
"""To the right and top of the box (outside it, if FL_ALIGN_INSIDE isn't used)"""
FL_ALIGN_LEFT_BOTTOM = (FL_ALIGN_BOTTOM|FL_ALIGN_LEFT)
"""To the left and bottom of the box (outside it, if FL_ALIGN_INSIDE isn't used)"""
FL_ALIGN_RIGHT_BOTTOM = (FL_ALIGN_BOTTOM|FL_ALIGN_RIGHT)
"""To the right and bottom of the box (outside it, if FL_ALIGN_INSIDE isn't used)"""
FL_ALIGN_INSIDE = 8192      # (1<<13)
"""places the text inside the box"""
FL_ALIGN_VERT = 16384       # (1<<14)  not functional yet
""""""
#FL_ALIGN_TOP_LEFT placeholder (backwards)
#FL_ALIGN_TOP_RIGHT placeholder (backwards)
#FL_ALIGN_BOTTOM_LEFT placeholder (backwards)
#FL_ALIGN_BOTTOM_RIGHT placeholder (backwards)

# my add, list of possible values --LK
ALIGN_list = [FL_ALIGN_CENTER, FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT,
              FL_ALIGN_RIGHT, FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP,
              FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE,
              FL_ALIGN_VERT]


# Mouse buttons. Don't have to be consecutive
# values for unnamed enumeration
FL_MBUTTON1 = 1
"""Left mouse button was pressed"""
FL_MBUTTON2 = 2
"""Middle mouse button was pressed"""
FL_MBUTTON3 = 3
"""Right mouse button was pressed"""
FL_MBUTTON4 = 4
"""Mouse scroll wheel was rotated in up direction"""
FL_MBUTTON5 = 5
"""Mouse scroll wheel was rotated in down direction"""

FL_LEFT_MOUSE = FL_MBUTTON1
"""Left mouse button was pressed"""
FL_MIDDLE_MOUSE = FL_MBUTTON2
"""Middle mouse button was pressed"""
FL_RIGHT_MOUSE = FL_MBUTTON3
"""Right mouse button was pressed"""
FL_SCROLLUP_MOUSE = FL_MBUTTON4
"""Mouse scroll wheel was rotated in up direction"""
FL_SCROLLDOWN_MOUSE = FL_MBUTTON5
"""Mouse scroll wheel was rotated in down direction"""

FL_LEFTMOUSE = FL_LEFT_MOUSE
"""Left mouse button was pressed"""
FL_MIDDLEMOUSE = FL_MIDDLE_MOUSE
"""Middle mouse button was pressed"""
FL_RIGHTMOUSE = FL_RIGHT_MOUSE
"""Right mouse button was pressed"""
FL_SCROLLUPMOUSE = FL_SCROLLUP_MOUSE
"""Mouse scroll wheel was rotated in up direction"""
FL_SCROLLDOWNMOUSE = FL_SCROLLDOWN_MOUSE
"""Mouse scroll wheel was rotated in down direction"""

# my add, list of possible values --LK
MOUSEBTN_list = [FL_MBUTTON1, FL_MBUTTON2, FL_MBUTTON3, FL_MBUTTON4,
                 FL_MBUTTON5, FL_LEFT_MOUSE, FL_MIDDLE_MOUSE, FL_RIGHT_MOUSE,
                 FL_SCROLLUP_MOUSE, FL_SCROLLDOWN_MOUSE, FL_LEFTMOUSE,
                 FL_MIDDLEMOUSE, FL_RIGHTMOUSE, FL_SCROLLUPMOUSE,
                 FL_SCROLLDOWNMOUSE]


# control when to return input, slider and dial etc. object.
FL_RETURN_NONE = 0
"""Never notiy the application about interactions with this object (i.e.
never return it nor invoke its callback). Note, this is not meant for
deactivation of an object, it will still seem to work as normal, it just
doesn't get returned to the application nor does its callback get invoked."""
FL_RETURN_CHANGED = 1
"""Return or invoke callback whenever an item is selected (this is the
default)."""
FL_RETURN_END = 2
"""Return or invoke callback on end of an interaction."""
FL_RETURN_END_CHANGED = 4
"""Return or invoke callback if end of interaction and selection of an
item coincide."""
FL_RETURN_SELECTION = 8
"""Return or invoke callback on selection of a line. Please note that for
FL_MULTI_BROWSER the browser may be returned just once for a number of
lines having been selected."""
FL_RETURN_DESELECTION = 16
""" Return or invoke callback on deselection of a line. This only works
for FL_MULTI_BROWSER browsers and the browser may be returned just once
for a number of lines having been deselected."""
FL_RETURN_TRIGGERED = 1024
""""""
FL_RETURN_ALWAYS = ~ FL_RETURN_END_CHANGED
"""Return (or invoke callback) whenever the interaction ends and/or
an item is selected. It includes all conditions except
FL_RETURN_END_CHANGED."""

# my add, list of possible values --LK
RETURN_list = [FL_RETURN_NONE, FL_RETURN_CHANGED, FL_RETURN_END,
               FL_RETURN_END_CHANGED, FL_RETURN_SELECTION,
               FL_RETURN_DESELECTION, FL_RETURN_TRIGGERED, FL_RETURN_ALWAYS]


# my add --LK
INT_MAX = 2147483647L


# Some special color indices for FL private colormap.
# It does not matter  what the value of each enum is,
# but it must start from 0 and be consecutive.
# values for enumeration 'FL_PD_COL'
FL_PD_COL = cty.c_int  # enum
FL_BLACK = 0
"""RGB triple (0,0,0)"""
FL_RED = 1
"""RGB triple (255,0,0)"""
FL_GREEN = 2
"""RGB triple (0,255,0)"""
FL_YELLOW = 3
"""RGB triple (255,255,0)"""
FL_BLUE = 4
"""RGB triple (0,0,255)"""
FL_MAGENTA = 5
"""RGB triple (255,0,255)"""
FL_CYAN = 6
"""RGB triple (0,255,255)"""
FL_WHITE = 7
"""RGB triple (255,255,255)"""
FL_TOMATO = 8
"""RGB triple (255,99,71)"""
FL_INDIANRED = 9
"""RGB triple (198,113,113)"""
FL_SLATEBLUE = 10
"""RGB triple (113,113,198)"""
FL_COL1 = 11
"""RGB triple (173,173,173)"""
FL_RIGHT_BCOL = 12
"""RGB triple (41,41,41)"""
FL_BOTTOM_BCOL = 13
"""RGB triple (89,89,89)"""
FL_TOP_BCOL = 14
"""RGB triple (204,204,204)"""
FL_LEFT_BCOL = 15
"""RGB triple (222,222,222)"""
FL_MCOL = 16
"""RGB triple (191,191,191)"""
FL_INACTIVE = 17
"""RGB triple (110,110,110)"""
FL_PALEGREEN = 18
"""RGB triple (113,198,113)"""
FL_DARKGOLD = 19
"""RGB triple (205,149,10)"""
FL_ORCHID = 20
"""RGB triple (205,105,201)"""
FL_DARKCYAN = 21
"""RGB triple (40,170,175)"""
FL_DARKTOMATO = 22
"""RGB triple (139,54,38)"""
FL_WHEAT = 23
"""RGB triple (255,231,155)"""
FL_DARKORANGE = 24
"""RGB triple (255,128,0)"""
FL_DEEPPINK = 25
"""RGB triple (255,0,128)"""
FL_CHARTREUSE = 26
"""RGB triple (128,255,0)"""
FL_DARKVIOLET = 27
"""RGB triple (128,0,255)"""
FL_SPRINGGREEN = 28
"""RGB triple (0,255,128)"""
FL_DODGERBLUE = 29
"""RGB triple (0,128,255)"""
FL_LIGHTER_COL1 = 30
"""RGB triple (204,204,204)"""
FL_DARKER_COL1 = 31
"""RGB triple (161,161,161)"""
FL_ALICEBLUE = 32
"""RGB triple (,,)"""
FL_ANTIQUEWHITE = 33
"""RGB triple (,,)"""
FL_AQUA = 34
"""RGB triple (,,)"""
FL_AQUAMARINE = 35
"""RGB triple (,,)"""
FL_AZURE = 36
"""RGB triple (,,)"""
FL_BEIGE = 37
"""RGB triple (,,)"""
FL_BISQUE = 38
"""RGB triple (,,)"""
FL_BLANCHEDALMOND = 39
"""RGB triple (,,)"""
FL_BLUEVIOLET = 40
"""RGB triple (,,)"""
FL_BROWN = 41
"""RGB triple (,,)"""
FL_BURLYWOOD = 42
"""RGB triple (,,)"""
FL_CADETBLUE = 43
"""RGB triple (,,)"""
FL_CHOCOLATE = 44
"""RGB triple (,,)"""
FL_CORAL = 45
"""RGB triple (,,)"""
FL_CORNFLOWERBLUE = 46
"""RGB triple (,,)"""
FL_CORNSILK = 47
"""RGB triple (,,)"""
FL_CRIMSON = 48
"""RGB triple (,,)"""
FL_DARKBLUE = 49
"""RGB triple (,,)"""
FL_DARKGOLDENROD = 50
"""RGB triple (,,)"""
FL_DARKGRAY = 51
"""RGB triple (,,)"""
FL_DARKGREEN = 52
"""RGB triple (,,)"""
FL_DARKGREY = 53
"""RGB triple (,,)"""
FL_DARKKHAKI = 54
"""RGB triple (,,)"""
FL_DARKMAGENTA = 55
"""RGB triple (,,)"""
FL_DARKOLIVEGREEN = 56
"""RGB triple (,,)"""
FL_DARKORCHID = 57
"""RGB triple (,,)"""
FL_DARKRED = 58
"""RGB triple (,,)"""
FL_DARKSALMON = 59
"""RGB triple (,,)"""
FL_DARKSEAGREEN = 60
"""RGB triple (,,)"""
FL_DARKSLATEBLUE = 61
"""RGB triple (,,)"""
FL_DARKSLATEGRAY = 62
"""RGB triple (,,)"""
FL_DARKSLATEGREY = 63
"""RGB triple (,,)"""
FL_DARKTURQUOISE = 64
"""RGB triple (,,)"""
FL_DEEPSKYBLUE = 65
"""RGB triple (,,)"""
FL_DIMGRAY = 66
"""RGB triple (,,)"""
FL_DIMGREY = 67
"""RGB triple (,,)"""
FL_FIREBRICK = 68
"""RGB triple (,,)"""
FL_FLORALWHITE = 69
"""RGB triple (,,)"""
FL_FORESTGREEN = 70
"""RGB triple (,,)"""
FL_FUCHSIA = 71
"""RGB triple (,,)"""
FL_GAINSBORO = 72
"""RGB triple (,,)"""
FL_GHOSTWHITE = 73
"""RGB triple (,,)"""
FL_GOLD = 74
"""RGB triple (,,)"""
FL_GOLDENROD = 75
"""RGB triple (,,)"""
FL_GRAY = 76
"""RGB triple (,,)"""
FL_GREENYELLOW = 77
"""RGB triple (,,)"""
FL_GREY = 78
"""RGB triple (,,)"""
FL_HONEYDEW = 79
"""RGB triple (,,)"""
FL_HOTPINK = 80
"""RGB triple (,,)"""
FL_INDIGO = 81
"""RGB triple (,,)"""
FL_IVORY = 82
"""RGB triple (,,)"""
FL_KHAKI = 83
"""RGB triple (,,)"""
FL_LAVENDER = 84
"""RGB triple (,,)"""
FL_LAVENDERBLUSH = 85
"""RGB triple (,,)"""
FL_LAWNGREEN = 86
"""RGB triple (,,)"""
FL_LEMONCHIFFON = 87
"""RGB triple (,,)"""
FL_LIGHTBLUE = 88
"""RGB triple (,,)"""
FL_LIGHTCORAL = 89
"""RGB triple (,,)"""
FL_LIGHTCYAN = 90
"""RGB triple (,,)"""
FL_LIGHTGOLDENRODYELLOW = 91
"""RGB triple (,,)"""
FL_LIGHTGRAY = 92
"""RGB triple (,,)"""
FL_LIGHTGREEN = 93
"""RGB triple (,,)"""
FL_LIGHTGREY = 94
"""RGB triple (,,)"""
FL_LIGHTPINK = 95
"""RGB triple (,,)"""
FL_LIGHTSALMON = 96
"""RGB triple (,,)"""
FL_LIGHTSEAGREEN = 97
"""RGB triple (,,)"""
FL_LIGHTSKYBLUE = 98
"""RGB triple (,,)"""
FL_LIGHTSLATEGRAY = 99
"""RGB triple (,,)"""
FL_LIGHTSLATEGREY = 100
"""RGB triple (,,)"""
FL_LIGHTSTEELBLUE = 101
"""RGB triple (,,)"""
FL_LIGHTYELLOW = 102
"""RGB triple (,,)"""
FL_LIME = 103
"""RGB triple (,,)"""
FL_LIMEGREEN = 104
"""RGB triple (,,)"""
FL_LINEN = 105
"""RGB triple (,,)"""
FL_MAROON = 106
"""RGB triple (,,)"""
FL_MEDIUMAQUAMARINE = 107
"""RGB triple (,,)"""
FL_MEDIUMBLUE = 108
"""RGB triple (,,)"""
FL_MEDIUMORCHID = 109
"""RGB triple (,,)"""
FL_MEDIUMPURPLE = 110
"""RGB triple (,,)"""
FL_MEDIUMSEAGREEN = 111
"""RGB triple (,,)"""
FL_MEDIUMSLATEBLUE = 112
"""RGB triple (,,)"""
FL_MEDIUMSPRINGGREEN = 113
"""RGB triple (,,)"""
FL_MEDIUMTURQUOISE = 114
"""RGB triple (,,)"""
FL_MEDIUMVIOLETRED = 115
"""RGB triple (,,)"""
FL_MIDNIGHTBLUE = 116
"""RGB triple (,,)"""
FL_MINTCREAM = 117
"""RGB triple (,,)"""
FL_MISTYROSE = 118
"""RGB triple (,,)"""
FL_MOCCASIN = 119
"""RGB triple (,,)"""
FL_NAVAJOWHITE = 120
"""RGB triple (,,)"""
FL_NAVY = 121
"""RGB triple (,,)"""
FL_OLDLACE = 122
"""RGB triple (,,)"""
FL_OLIVE = 123
"""RGB triple (,,)"""
FL_OLIVEDRAB = 124
"""RGB triple (,,)"""
FL_ORANGE = 125
"""RGB triple (,,)"""
FL_ORANGERED = 126
"""RGB triple (,,)"""
FL_PALEGOLDENROD = 127
"""RGB triple (,,)"""
FL_PALETURQUOISE = 128
"""RGB triple (,,)"""
FL_PALEVIOLETRED = 129
"""RGB triple (,,)"""
FL_PAPAYAWHIP = 130
"""RGB triple (,,)"""
FL_PEACHPUFF = 131
"""RGB triple (,,)"""
FL_PERU = 132
"""RGB triple (,,)"""
FL_PINK = 133
"""RGB triple (,,)"""
FL_PLUM = 134
"""RGB triple (,,)"""
FL_POWDERBLUE = 135
"""RGB triple (,,)"""
FL_PURPLE = 136
"""RGB triple (,,)"""
FL_ROSYBROWN = 137
"""RGB triple (,,)"""
FL_ROYALBLUE = 138
"""RGB triple (,,)"""
FL_SADDLEBROWN = 139
"""RGB triple (,,)"""
FL_SALMON = 140
"""RGB triple (,,)"""
FL_SANDYBROWN = 141
"""RGB triple (,,)"""
FL_SEAGREEN = 142
"""RGB triple (,,)"""
FL_SEASHELL = 143
"""RGB triple (,,)"""
FL_SIENNA = 144
"""RGB triple (,,)"""
FL_SILVER = 145
"""RGB triple (,,)"""
FL_SKYBLUE = 146
"""RGB triple (,,)"""
FL_SLATEGRAY = 147
"""RGB triple (,,)"""
FL_SLATEGREY = 148
"""RGB triple (,,)"""
FL_SNOW = 149
"""RGB triple (,,)"""
FL_STEELBLUE = 150
"""RGB triple (,,)"""
FL_TAN = 151
"""RGB triple (,,)"""
FL_TEAL = 152
"""RGB triple (,,)"""
FL_THISTLE = 153
"""RGB triple (,,)"""
FL_TURQUOISE = 154
"""RGB triple (,,)"""
FL_VIOLET = 155
"""RGB triple (,,)"""
FL_WHITESMOKE = 156
"""RGB triple (,,)"""
FL_YELLOWGREEN = 157
"""RGB triple (,,)"""
FL_FREE_COL1 = 256
"""RGB triple (,,)"""
FL_FREE_COL2 = 257
"""RGB triple (,,)"""
FL_FREE_COL3 = 258
"""RGB triple (,,)"""
FL_FREE_COL4 = 259
"""RGB triple (,,)"""
FL_FREE_COL5 = 260
"""RGB triple (,,)"""
FL_FREE_COL6 = 261
"""RGB triple (,,)"""
FL_FREE_COL7 = 262
"""RGB triple (,,)"""
FL_FREE_COL8 = 263
"""RGB triple (,,)"""
FL_FREE_COL9 = 264
"""RGB triple (,,)"""
FL_FREE_COL10 = 265
"""RGB triple (,,)"""
FL_FREE_COL11 = 266
"""RGB triple (,,)"""
FL_FREE_COL12 = 267
"""RGB triple (,,)"""
FL_FREE_COL13 = 268
"""RGB triple (,,)"""
FL_FREE_COL14 = 269
"""RGB triple (,,)"""
FL_FREE_COL15 = 270
"""RGB triple (,,)"""
FL_FREE_COL16 = 271
"""RGB triple (,,)"""
FL_NOCOLOR = INT_MAX
"""RGB triple (,,)"""

FL_BUILT_IN_COLS = FL_YELLOWGREEN + 1
FL_INACTIVE_COL = FL_INACTIVE
"""RGB triple (110,110,110)"""

# Some aliases for a number of colors.
FL_GRAY16 = FL_RIGHT_BCOL
"""RGB triple (41,41,41)"""
FL_GRAY35 = FL_BOTTOM_BCOL
"""RGB triple (89,89,89)"""
FL_GRAY80 = FL_TOP_BCOL
"""RGB triple (,,)"""
FL_GRAY90 = FL_LEFT_BCOL
"""RGB triple (,,)"""
FL_GRAY63 = FL_COL1
"""RGB triple (173,173,173)"""
FL_GRAY75 = FL_MCOL
"""RGB triple (191,191,191)"""
FL_LCOL = FL_BLACK
"""RGB triple (0,0,0)"""
FL_NoColor = FL_NOCOLOR
"""RGB triple (,,)"""

#FL_DOGERBLUE placeholder (backwards)

# my add, list of possible values --LK
COLOR_list = [FL_BLACK, FL_RED, FL_GREEN, FL_YELLOW, FL_BLUE, FL_MAGENTA,
              FL_CYAN, FL_WHITE, FL_TOMATO, FL_INDIANRED, FL_SLATEBLUE,
              FL_COL1, FL_RIGHT_BCOL, FL_BOTTOM_BCOL, FL_TOP_BCOL,
              FL_LEFT_BCOL, FL_MCOL, FL_INACTIVE, FL_PALEGREEN, FL_DARKGOLD,
              FL_ORCHID, FL_DARKCYAN, FL_DARKTOMATO, FL_WHEAT, FL_DARKORANGE,
              FL_DEEPPINK, FL_CHARTREUSE, FL_DARKVIOLET, FL_SPRINGGREEN,
              FL_DODGERBLUE, FL_LIGHTER_COL1, FL_DARKER_COL1, FL_ALICEBLUE,
              FL_ANTIQUEWHITE, FL_AQUA, FL_AQUAMARINE, FL_AZURE, FL_BEIGE,
              FL_BISQUE, FL_BLANCHEDALMOND, FL_BLUEVIOLET, FL_BROWN,
              FL_BURLYWOOD, FL_CADETBLUE, FL_CHOCOLATE, FL_CORAL,
              FL_CORNFLOWERBLUE, FL_CORNSILK, FL_CRIMSON, FL_DARKBLUE,
              FL_DARKGOLDENROD, FL_DARKGRAY, FL_DARKGREEN, FL_DARKGREY,
              FL_DARKKHAKI, FL_DARKMAGENTA, FL_DARKOLIVEGREEN, FL_DARKORCHID,
              FL_DARKRED, FL_DARKSALMON, FL_DARKSEAGREEN, FL_DARKSLATEBLUE,
              FL_DARKSLATEGRAY, FL_DARKSLATEGREY, FL_DARKTURQUOISE,
              FL_DEEPSKYBLUE, FL_DIMGRAY, FL_DIMGREY, FL_FIREBRICK,
              FL_FLORALWHITE, FL_FORESTGREEN, FL_FUCHSIA, FL_GAINSBORO,
              FL_GHOSTWHITE, FL_GOLD, FL_GOLDENROD, FL_GRAY, FL_GREENYELLOW,
              FL_GREY, FL_HONEYDEW, FL_HOTPINK, FL_INDIGO, FL_IVORY,
              FL_KHAKI, FL_LAVENDER, FL_LAVENDERBLUSH, FL_LAWNGREEN,
              FL_LEMONCHIFFON, FL_LIGHTBLUE, FL_LIGHTCORAL, FL_LIGHTCYAN,
              FL_LIGHTGOLDENRODYELLOW, FL_LIGHTGRAY, FL_LIGHTGREEN,
              FL_LIGHTGREY, FL_LIGHTPINK, FL_LIGHTSALMON, FL_LIGHTSEAGREEN,
              FL_LIGHTSKYBLUE, FL_LIGHTSLATEGRAY, FL_LIGHTSLATEGREY,
              FL_LIGHTSTEELBLUE, FL_LIGHTYELLOW, FL_LIME, FL_LIMEGREEN,
              FL_LINEN, FL_MAROON, FL_MEDIUMAQUAMARINE, FL_MEDIUMBLUE,
              FL_MEDIUMORCHID, FL_MEDIUMPURPLE, FL_MEDIUMSEAGREEN,
              FL_MEDIUMSLATEBLUE, FL_MEDIUMSPRINGGREEN, FL_MEDIUMTURQUOISE,
              FL_MEDIUMVIOLETRED, FL_MIDNIGHTBLUE, FL_MINTCREAM, FL_MISTYROSE,
              FL_MOCCASIN, FL_NAVAJOWHITE, FL_NAVY, FL_OLDLACE, FL_OLIVE,
              FL_OLIVEDRAB, FL_ORANGE, FL_ORANGERED, FL_PALEGOLDENROD,
              FL_PALETURQUOISE, FL_PALEVIOLETRED, FL_PAPAYAWHIP, FL_PEACHPUFF,
              FL_PERU, FL_PINK, FL_PLUM, FL_POWDERBLUE, FL_PURPLE,
              FL_ROSYBROWN, FL_ROYALBLUE, FL_SADDLEBROWN, FL_SALMON,
              FL_SANDYBROWN, FL_SEAGREEN, FL_SEASHELL, FL_SIENNA, FL_SILVER,
              FL_SKYBLUE, FL_SLATEGRAY, FL_SLATEGREY, FL_SNOW, FL_STEELBLUE,
              FL_TAN, FL_TEAL, FL_THISTLE, FL_TURQUOISE, FL_VIOLET,
              FL_WHITESMOKE, FL_YELLOWGREEN, FL_FREE_COL1, FL_FREE_COL2,
              FL_FREE_COL3, FL_FREE_COL4, FL_FREE_COL5, FL_FREE_COL6,
              FL_FREE_COL7, FL_FREE_COL8, FL_FREE_COL9, FL_FREE_COL10,
              FL_FREE_COL11, FL_FREE_COL12, FL_FREE_COL13, FL_FREE_COL14,
              FL_FREE_COL15, FL_FREE_COL16, FL_NOCOLOR, FL_INACTIVE_COL]


# Events that a form reacts to.
# values for enumeration 'FL_EVENTS'
FL_EVENTS = cty.c_int # enum
FL_NOEVENT = 0
""""""
FL_DRAW = 1
"""The object has to be (re)drawn. To figure out the actual size of the
object you can use the fields pObject.contents.x, pObject.contents.y,
pObject.contents.w and pObject.contents.h. Many Xlib drawing routines
require a window ID, which you can obtain from the object pointer using
FL_ObjWin(pObject). Some other aspects might also influence the way
the object has to be drawn. E.g., you might want to draw the object
differently when the mouse is on top of it or when the mouse is
pressed on it. This can be figured out the following way, the field
pObject.contents.belowmouse tells you whether the object is below the
mouse. The field pObject.contents.pushed indicates whether the object is
currently being pushed with the mouse. Finally, pObject.contents.focus
indicate whether input focus is directed towards this object. Note
that drawing of the object is the full responsibility of the object
class, including the bounding box and the label, which can be found in
the field pObject.contents.label. The Forms Library provides a large number
of routines to help you draw object.
One important caution about your draw event handling code, none of the
high level routines (fl_freeze_form(), fl_deactivate_form()) etc. can be
used. The only routines allowed to be used are (direct) drawing functions
and object internal book keeping routines. Attribute modifying routines,
such as fl_set_object_color() etc. are not allowed (using them can lead
to infinite recursions). In addition, (re)drawing of other objects using
fl_redraw_object() while handling FL_DRAW will also not work.
Due to the way double buffering is handled, at the time the FL_DRAW event
is passed to the handling function (and only then) FL_ObjWin(pObject) might
return a pixmap used as the backbuffer (at least if the object is double
buffered). What that means is that FL_ObjWin(pObject) should not be used
when a real window is needed. For a real window you can change the window's
cursor or query the mouse position within it. You can't do either of these
with the backbuffer pixmap. If there is a need to obtain the real window ID
the following routine can be used fl_get_real_object_window()
To summarize, use FL_ObjWin(pObject) when drawing and use
fl_get_real_object_window() for cursor or pointer routines. This distinction
is important only while handling FL_DRAW events, FL_ObjWin(obj) should be
used anywhere else."""
FL_PUSH = 2
"""The user has pushed a mouse button on the object. Normally this
requires some actual action. The number of the mouse button pushed is
given in the 'key' parameter, having one of FL_*_MOUSE values."""
FL_RELEASE = 3
"""The user has released the mouse button. This event is only sent if a
FL_PUSH event was sent before."""
FL_ENTER = 4
"""This event is sent when the mouse has entered the bounding box and
might require some action. Note also that the field
pObject.content.belowmouse in the object is being set. If entering an
objects area only changes its appearance, redrawing it normally
suffices. Don't do this directly! Always redraw the object by calling
fl_redraw_object(). It will send an FL_DRAW event to the object but also
does some other things (like setting window IDs and taking care of double
buffering etc.)."""
FL_LEAVE = 5
"""The mouse has left the bounding box. Again, normally a redraw is enough
(or nothing at all)."""
FL_MOTION = 6
"""Motion events get sent between FL_ENTER and FL_LEAVE events when the
mouse position changes on the object. The mouse position is given as an
argument to the handle routine."""
FL_FOCUS = 7
"""Input got focussed to this object. This type of event and the next two
are only sent to objects for which the field pObject.contents.input is set
to 1 (see below)."""
FL_UNFOCUS = 8
"""Input is no longer focussed on the object."""
FL_KEYPRESS = 9
"""A key was pressed. The ASCII value (or KeySym if non-ASCII) is passed
to the routine via the 'key' argument, modifier keys can be retrieved from
the state member of the XEvent also passed to the function via 'xev'.
This event only happens between FL_FOCUS and FL_UNFOCUS events. Not all
objects sent keyboard events, only those that have non-zero value in field
pOobject.contents.input or pObject.contents.wantkey."""
FL_UPDATE = 10   # for objects that need to update something from time to time
"""An FL_UPDATE event, like the FL_STEP event, also gets send about every 50
msec (but less often under high load) to objects while they are
"pushed", i.e. between receiving a FL_PUSH and a FL_RELEASE event if the
pObject.contents.want_update field is set for the object. Like for the
FL_STEP event the handling routine receives a synthetic MotionNotify event
as the XEvent. This is typically used by objects that have to perform tasks
at regular time intervals while they are "pushed" (e.g. counters that need
to count up or down while the mouse is pushed on one of its buttons)."""
FL_STEP = 11
"""A FL_STEP event is sent all the time (typically about 20 times a second
but possibly less often because of system delays and other time-consuming
tasks) to objects for which the field pObject.contents.automatic has been
set to a non-zero value. The handling routine receives a synthetic
MotionNotify event as the XEvent. This can be used to make an object change
appearance without user action. Clock and timer objects use this type of
event."""
FL_SHORTCUT = 12
"""The user used a keyboard shortcut. The shortcut used is given in the
parameter key. See below for more on shortcuts."""
FL_FREEMEM = 13
"""This event is sent when the object is to be freed. All memory
allocated for the object must be freed when this event is received"""
FL_OTHER = 14   # property, selection etc.
"""Events other than the above. These events currently include
ClientMessage, Selection and possibly other window manager events. All
information about the event is contained in 'xev' parameter and 'mx',
'my' may or may not reflect the actual position of the mouse."""
FL_DRAWLABEL = 15
"""This event typically follows FL_DRAW and indicates that the object label
needs to be (re)drawn. If the object in question always draws its label
inside the bounding box and this is taken care of by handing FL_DRAW, you
can ignore this event."""
FL_DBLCLICK = 16        # double click
"""The user has pushed a mouse button twice within a certain time limit
(FL_CLICK_TIMEOUT), which by default is 400 msec. This event is sent
after two FL_PUSH, FL_RELEASE sequence. Note that FL_DBLCLICK is only
generated for objects that have non-zero pObject.contents.click timeout
fields and it will not be generated for events from the scroll wheel."""
FL_TRPLCLICK = 17               # triple click
"""The user has pushed a mouse button three times within a certain time
window. This event is sent after a FL_DBLCLICK, FL_PUSH, FL_RELEASE
sequence. Set click timeout to none-zero to activate FL_TRPLCLICK"""
FL_ATTRIB = 18      # attribute change
""""""
FL_KEYRELEASE = 19
""""""
FL_PS = 20          # dump a form into EPS
""""""
FL_MOVEORIGIN = 21  # dragging the form across the screen changes its
""""""
                    # absolute x,y coords. Objects that themselves
                    # contain forms should ensure that they are up to
                    # date.
FL_RESIZED = 22     # the object has been resized by scale_form
""""""
# the object has been resized by scale_form. Tell it that this has happened
# so that it can resize any FL_FORMs that it contains.

#FL_MOVE placeholder (backwards)
#FL_KEYBOARD placeholder (backwards)
#FL_MOUSE placeholder (backwards)

# my add - list of possible values --LK
EVENTS_list = [FL_DRAW, FL_PUSH, FL_RELEASE, FL_ENTER, FL_LEAVE,
               FL_MOTION, FL_FOCUS, FL_UNFOCUS, FL_KEYPRESS, FL_UPDATE,
               FL_STEP, FL_SHORTCUT, FL_FREEMEM, FL_OTHER, FL_DRAWLABEL,
               FL_DBLCLICK, FL_TRPLCLICK, FL_ATTRIB, FL_KEYRELEASE,
               FL_PS, FL_MOVEORIGIN, FL_RESIZED]


# Resize policies
# values for enumeration 'FL_RESIZE_T'
FL_RESIZE_T = cty.c_int  # enum
FL_RESIZE_NONE = 0
"""Can't be rescaled/resized"""
FL_RESIZE_X = 1
"""Can be rescaled on horizontal axis"""
FL_RESIZE_Y = 2
"""Can be rescaled on vertical axis"""
FL_RESIZE_ALL = (FL_RESIZE_X | FL_RESIZE_Y)
"""Can be rescaled on both axis"""

# my add, list of possible values --LK
RESIZE_list = [FL_RESIZE_NONE, FL_RESIZE_X, FL_RESIZE_Y, FL_RESIZE_ALL]


# Keyboard focus control
# values for enumeration 'FL_KEY'
FL_KEY = cty.c_int  # enum
FL_KEY_NORMAL  = 1     # normal keys(0-255) - tab +left/right
"""The object receives left and right cursor, <Home> and <End> keys plus
all normal keys (0-255) except <Tab> <Return> (default)."""
FL_KEY_TAB     = 2     # normal keys + 4 direction cursor
"""Object receives the <Tab>, <Return> as well as the <Up> and <Down> cursor
keys."""
FL_KEY_SPECIAL = 4     # only needs special keys(>255)
"""The object receives all keys with a KeySym above 255 which aren't already
covered by FL_KEY_NORMAL and FL_KEY_TAB (e.g. function keys etc.)"""
FL_KEY_ALL     = 7     # all keys
"""Object receives all keys."""

FL_ALT_MASK = (1L<<25)      # alt + Key --> FL_ALT_MASK + key
"""ALT combination with a key (value added to a KeySym)"""
FL_CONTROL_MASK = (1L<<26)
"""CONTROL combination with a key (value added to a KeySym)"""
FL_SHIFT_MASK = (1L<<27)
"""SHIFT combination with a key (value added to a KeySym)"""

#FL_ALT_VAL placeholder (backwards)

MAX_SHORTCUTS = 8


# my add, list of possible values --LK
KEY_list = [FL_KEY_NORMAL, FL_KEY_TAB, FL_KEY_SPECIAL, FL_KEY_ALL,
            FL_ALT_MASK, FL_CONTROL_MASK, FL_SHIFT_MASK]


# FL_PUP_NONE placeholder (deprecated)
#FL_PUP_GREY placeholder (deprecated)
#FL_PUP_BOX placeholder (deprecated)
#FL_PUP_CHECK placeholder (deprecated)
#FL_PUP_RADIO placeholder (deprecated)
#FL_PUP_GRAY placeholder (deprecated)
#FL_PUP_TOGGLE placeholder (backwards and deprecated)
#FL_PUP_INACTIVE placeholder (deprecated)
# my add, list of possible values --LK
#PUP_list placeholder (deprecated)

# FL_PUP_CB placeholder (deprecated)

STRING = cty.c_char_p
WSTRING = cty.c_wchar_p

# class FL_PUP_ENTRY placeholder (deprecated)
#FL_MENU_ENTRY placeholder (deprecated)


# ***** FONTS *****

FL_MAXFONTS = 48        # max number of fonts

# values for enumeration 'FL_TEXT_STYLE'
FL_TEXT_STYLE = cty.c_int # enum
FL_INVALID_STYLE = -1
""""""
FL_NORMAL_STYLE = 0
"""Helvetica normal text"""
FL_BOLD_STYLE = 1
"""Helvetica boldface text"""
FL_ITALIC_STYLE = 2
"""Helvetica italic text"""
FL_BOLDITALIC_STYLE = 3
"""Helvetica boldface and italic text"""
FL_FIXED_STYLE = 4
"""Courier fixed width (good for tables)"""
FL_FIXEDBOLD_STYLE = 5
"""Courier bold fixed text"""
FL_FIXEDITALIC_STYLE = 6
"""Courier italic fixed text"""
FL_FIXEDBOLDITALIC_STYLE = 7
"""Courier boldface and italic fixed text"""
FL_TIMES_STYLE = 8
"""Times-Roman like normal font"""
FL_TIMESBOLD_STYLE = 9
"""Times-Roman like boldface text"""
FL_TIMESITALIC_STYLE = 10
"""Times-Roman like italic text"""
FL_TIMESBOLDITALIC_STYLE = 11
"""Times-Roman like boldface and italic text"""
FL_MISC_STYLE = 12
"""Charter normal text"""
FL_MISCBOLD_STYLE = 13
"""Charter boldface text"""
FL_MISCITALIC_STYLE = 14
"""Charter italic text"""
FL_SYMBOL_STYLE = 15
"""Symbol text"""
# modifier masks. Need to fit a short
FL_SHADOW_STYLE = 512           #(1<<9)
"""Text casting a shadow"""
FL_ENGRAVED_STYLE = 1024        #(1<<10)
"""Text engraved into the form"""
FL_EMBOSSED_STYLE = 2048        #(1<<11)
"""Text standing out"""

FL_FONT_STYLE = FL_TEXT_STYLE

# my add, list of possible values --LK
TEXTSTYLE_list = [FL_INVALID_STYLE, FL_NORMAL_STYLE, FL_BOLD_STYLE,
                  FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
                  FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
                  FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE,
                  FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
                  FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
                  FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE,
                  FL_SYMBOL_STYLE, FL_SHADOW_STYLE, FL_ENGRAVED_STYLE,
                  FL_EMBOSSED_STYLE]


# Standard sizes in XForms
FL_TINY_SIZE = 8
"""8 points font size."""
FL_SMALL_SIZE = 10
"""10 points font size (default)"""
FL_NORMAL_SIZE = 12
"""12 points font size"""
FL_MEDIUM_SIZE = 14
"""14 points font size"""
FL_LARGE_SIZE = 18
"""18 points font size"""
FL_HUGE_SIZE = 24
"""24 points font size"""
FL_DEFAULT_SIZE = FL_SMALL_SIZE
"""10 points font size"""

# my add, list of possible values --LK
FONTSIZE_list = [FL_TINY_SIZE, FL_SMALL_SIZE, FL_NORMAL_SIZE, FL_MEDIUM_SIZE,
                 FL_LARGE_SIZE, FL_HUGE_SIZE, FL_DEFAULT_SIZE]

#FL_TINY_FONT placeholder (backwards)
#FL_SMALL_FONT placeholder (backwards)
#FL_NORMAL_FONT placeholder (backwards)
#FL_MEDIUM_FONT placeholder (backwards)
#FL_LARGE_FONT placeholder (backwards)
#FL_HUGE_FONT placeholder (backwards)
#FL_NORMAL_FONT1 placeholder (backwards)
#FL_NORMAL_FONT2 placeholder (backwards)
#FL_DEFAULT_FONT placeholder (backwards)


FL_BOUND_WIDTH = 1     # Border width of boxes, FL_Coord(1)
"""Default border width of boxes"""


FL_CLICK_TIMEOUT = 400      # double click interval


# Definition of basic struct that holds an object

class FL_FORM_(cty.Structure):
    pass
FL_FORM = FL_FORM_


class FL_OBJECT_(cty.Structure):
    pass
FL_OBJECT = FL_OBJECT_




# from /usr/include/X11/Xlib.h ***
XPointer = STRING    # cty.c_char_p


# /usr/include/X11/Xlib.h 159
class _XExtData(cty.Structure):
    pass
_XExtData._fields_ = [
    ('number', cty.c_int),
    ('next', cty.POINTER(_XExtData)),
    ('free_private', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XExtData))),
    ('private_data', XPointer),
]
XExtData = _XExtData

VisualID = cty.c_ulong


# /usr/include/X11/Xlib.h 249
class Visual(cty.Structure):
    pass
Visual._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('visualid', VisualID),
    ('c_class', cty.c_int),
    ('red_mask', cty.c_ulong),
    ('green_mask', cty.c_ulong),
    ('blue_mask', cty.c_ulong),
    ('bits_per_rgb', cty.c_int),
    ('map_entries', cty.c_int),
]


class FL_pixmap_(cty.Structure):
    pass
FL_pixmap = FL_pixmap_



# All pixmaps used by FL_OBJECT to simulate double buffering have the
# following entries in the structure. FL_Coord x,y are used to shift
# the origin of the drawing routines
FL_pixmap_._fields_ = [
    ('pixmap', Pixmap),
    ('win', Window),
    ('visual', cty.POINTER(Visual)),
    ('x', FL_Coord),
    ('y', FL_Coord),
    ('w', FL_Coord),
    ('h', FL_Coord),
    ('depth', cty.c_int),
    ('dbl_background', FL_COLOR),
    ('pixel', FL_COLOR),
]


FL_IO_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
""" FL_IO_CALLBACK(num, ptr_void)

    prototype for handling IO callback (used by fl_add_io_callback,
    fl_remove_io_callback), no return
"""


FL_SIGNAL_HANDLER = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
""" FL_SIGNAL_HANDLER(num, ptr_void)

    prototype for handling signal callback (used by fl_add_signal_callback),
    no return
"""


FL_TIMEOUT_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
""" FL_TIMEOUT_CALLBACK(num, ptr_void)

    prototype for handling timeout callback (used by fl_add_timeout),
    no return
 """


# at close (WM menu delete/close etc.)
FL_FORM_ATCLOSE = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_FORM), \
                                cty.c_void_p)
""" FL_FORM_ATCLOSE(pForm, ptr_void) -> num

    prototype when a form is closed (used by fl_set_form_atclose,
    fl_set_atclose), returning value
"""

# deactivate/activate callbacks
FL_FORM_ATACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(FL_FORM), cty.c_void_p)
""" FL_FORM_ATACTIVATE(pForm, ptr_void)

    prototype when a form is activated (used by fl_set_form_atactivate),
    no return value
"""

FL_FORM_ATDEACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(FL_FORM), cty.c_void_p)
""" FL_FORM_DEATACTIVATE(pForm, ptr_void)

    prototype when a form is deactivated (used by fl_set_form_atdeactivate),
    no return value
"""


# callback function for an entire form
FL_FORMCALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_void_p)
""" FL_FORMCALLBACKPTR(pObject, ptr_void)

    prototype for handling a callback for the entire form (used by
    fl_set_form_callback) - no return value
"""





# cfunction for _fl_for_all_objects
cfunc_int_pobject_pvoid = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
                                        cty.c_void_p)


FL_HANDLEPTR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), cty.c_int, \
                FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)
""" FL_HANDLEPTR(pObject, num, coord, coord, num, ptr_void) -> num

    prototype for registering a pre- or post- handler for an object,
    returning value (used by fl_set_object_prehandler,
    fl_set_object_posthandler, fl_make_object)
"""


# /usr/include/X11/Xlib.h 984
class _XEvent(cty.Union):
    pass
XEvent = _XEvent


# preemptive callback function - pXEvent is necessary as type cast is not
# handled
#FL_RAW_CALLBACK = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_FORM), cty.c_void_p)
FL_RAW_CALLBACK = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_FORM), \
                                cty.POINTER(XEvent))
""" FL_RAW_CALLBACK(pForm, pXEvent) -> num.

    prototype for handling a raw callback for X events (used by
    fl_register_raw_callback), with returning value
"""


# object callback function
FL_CALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_long)
""" FL_CALLBACKPTR(pObject, longnum)

    prototype for handling a callback function bound to an object, no return
    value (used by fl_set_object_callback)
"""



# cfunction for _fl_enumerate_fonts
cfunc_none_string = cty.CFUNCTYPE(None, STRING)


FL_DRAWPTR = cty.CFUNCTYPE(None, FL_Coord, FL_Coord, FL_Coord, FL_Coord,
                           cty.c_int, FL_COLOR)
""" FL_DRAWPTR(x, y, w, h, angle_degree_rotaion, colr)

    prototype for handling a symbol drawing (used by fl_add_symbol), no return
"""



# error callback
FL_ERROR_FUNC = cty.CFUNCTYPE(None, STRING, STRING)
""" FL_ERROR_FUNC(function_name, error_message)

    prototype for handling errors (used by fl_set_error_handler), no return
"""


FL_FORM_._pack_ = 4
FL_FORM_._fields_ = [
    ('fdui', cty.c_void_p),               # for fdesign
    ('u_vdata', cty.c_void_p),            # for application
    ('u_cdata', STRING),                # for application
    ('u_ldata', cty.c_long),              # for application
    ('label', STRING),                  # window title
    ('window', Window),                 # X resource ID for window
    ('x', FL_Coord),                    # current geometry info
    ('y', FL_Coord),
    ('w', FL_Coord),
    ('h', FL_Coord),
    ('in_redraw', cty.c_int),             # set while form is drawn
    ('handle_dec_x', cty.c_int),
    ('handle_dec_y', cty.c_int),
    ('hotx', FL_Coord),                 # hot-spot of the form
    ('hoty', FL_Coord),
    ('w_hr', cty.c_double),               # high resolution width and height
    ('h_hr', cty.c_double),               # (needed for precise scaling)
    ('first', cty.POINTER(FL_OBJECT)),
    ('last', cty.POINTER(FL_OBJECT)),
    ('focusobj', cty.POINTER(FL_OBJECT)),
    ('form_callback', FL_FORMCALLBACKPTR),
    ('activate_callback', FL_FORM_ATACTIVATE),
    ('deactivate_callback', FL_FORM_ATDEACTIVATE),
    ('form_cb_data', cty.c_void_p),
    ('activate_data', cty.c_void_p),
    ('deactivate_data', cty.c_void_p),
    ('key_callback', FL_RAW_CALLBACK),
    ('push_callback', FL_RAW_CALLBACK),
    ('crossing_callback', FL_RAW_CALLBACK),
    ('motion_callback', FL_RAW_CALLBACK),
    ('all_callback', FL_RAW_CALLBACK),
    ('compress_mask', cty.c_ulong),
    ('evmask', cty.c_ulong),
    # WM_DELETE_WINDOW message handler
    ('close_callback', FL_FORM_ATCLOSE),
    ('close_data', cty.c_void_p),
    ('flpixmap', cty.POINTER(FL_pixmap)),     # back buffer
    ('icon_pixmap', Pixmap),
    ('icon_mask', Pixmap),
    # interaction and other flags
    ('deactivated', cty.c_int),               # non-zero if deactiated
    ('use_pixmap', cty.c_int),                # true if dbl buffering
    ('frozen', cty.c_int),                    # true if sync change
    ('visible', cty.c_int),                   # true if mapped
    ('wm_border', cty.c_int),                 # window manager info
    ('prop', cty.c_uint),                     # other attributes
    ('num_auto_objects', cty.c_int),
    ('top', cty.c_int),
    ('sort_of_modal', cty.c_int),             # internal use
    ('parent', cty.POINTER(FL_FORM)),
    ('child', cty.POINTER(FL_FORM)),
    ('parent_obj', cty.POINTER(FL_OBJECT)),
    ('attached', cty.c_int),                  # not independent anymore
    ('pre_attach', cty.CFUNCTYPE(None, cty.POINTER(FL_FORM))),
    ('attach_data', cty.c_void_p),
    ('no_tooltip', cty.c_int),
]

FL_OBJECT_._pack_ = 4
FL_OBJECT_._fields_ = [
    ('form', cty.POINTER(FL_FORM)),   # the form this object belongs to
    ('u_vdata', cty.c_void_p),        # anything the user likes
    ('u_cdata', STRING),              # anything the user likes
    ('u_ldata', cty.c_long),          # anything the user likes
    ('objclass', cty.c_int),          # class of object, button, slider etc
    ('type', cty.c_int),              # type within the class
    ('boxtype', cty.c_int),           # what kind of box type
    ('x', FL_Coord),                  # current obj. location and size
    ('y', FL_Coord),
    ('w', FL_Coord),
    ('h', FL_Coord),
    ('fl1', cty.c_double),            # distances of upper left hand (1) and
    ('fr1', cty.c_double),            # lower right hand corner (2) to left,
    ('ft1', cty.c_double),            # right, top and bottom of enclosing
    ('fb1', cty.c_double),            # form
    ('fl2', cty.c_double),
    ('fr2', cty.c_double),
    ('ft2', cty.c_double),
    ('fb2', cty.c_double),
    ('bw', FL_Coord),
    ('col1', FL_COLOR),                 # colors of obj
    ('col2', FL_COLOR),
    ('label', STRING),                  # object label
    ('lcol', FL_COLOR),                 # label color
    ('align', cty.c_int),
    ('lsize', cty.c_int),                 # label size and style
    ('lstyle', cty.c_int),
    ('shortcut', cty.POINTER(cty.c_long)),
    ('handle', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), cty.c_int, \
    FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)),
    ('object_callback', cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), \
    cty.c_long)),
    ('argument', cty.c_long),
    ('spec', cty.c_void_p),               # instantiation
    ('prehandle', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
    cty.c_int, FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)),
    ('posthandle', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT), \
    cty.c_int, FL_Coord, FL_Coord, cty.c_int, cty.c_void_p)),
    ('set_return', cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_uint)),
    # re-configure preference
    ('resize', cty.c_uint),               # what to do if WM resizes the FORM
    ('nwgravity', cty.c_uint),            # how to re-position top-left corner
    ('segravity', cty.c_uint),         # how to re-position lower-right corner
    ('prev', cty.POINTER(FL_OBJECT)),     # prev. obj in form
    ('next', cty.POINTER(FL_OBJECT)),     # next obj in form
    ('parent', cty.POINTER(FL_OBJECT)),
    ('child', cty.POINTER(FL_OBJECT)),
    ('nc', cty.POINTER(FL_OBJECT)),     # next child
    ('flpixmap', cty.POINTER(FL_pixmap)), # pixmap double buffering stateinfo
    ('use_pixmap', cty.c_int),          # true to use pixmap double buffering
    # some interaction flags
    ('returned', cty.c_int),            # what last interaction returned
    ('how_return', cty.c_uint),          # under which conditions to return
    ('double_buffer', cty.c_int),         # only used by mesa/gl canvas
    ('pushed', cty.c_int),
    ('focus', cty.c_int),
    ('belowmouse', cty.c_int),
    ('active', cty.c_int),                # if accept event
    ('input', cty.c_int),
    ('wantkey', cty.c_int),
    ('radio', cty.c_int),
    ('automatic', cty.c_int),
    ('redraw', cty.c_int),
    ('visible', cty.c_int),
    ('is_under', cty.c_int),          # if (partially) hidden by other object
    ('clip', cty.c_int),
    ('click_timeout', cty.c_ulong),
    ('c_vdata', cty.c_void_p),            # for class use
    ('c_cdata', STRING),                # for class use
    ('c_ldata', cty.c_long),              # for class use
    ('dbl_background', FL_COLOR),       # double buffer background
    ('tooltip', STRING),
    ('tipID', cty.c_int),
    ('group_id', cty.c_int),
    ('want_motion', cty.c_int),
    ('want_update', cty.c_int),
]


# form visibility state, form .visible
# values for unnamed enumeration
FL_BEING_HIDDEN = -1
"""The forms is visible but is in the process of being hidden"""
FL_HIDDEN = 0
"""The form is not visible"""
FL_INVISIBLE = FL_HIDDEN
"""The form is not visible"""
FL_VISIBLE = 1
"""The form is visible"""

# my add, list of possible values --LK
VISIBLE_list = [FL_BEING_HIDDEN, FL_HIDDEN, FL_INVISIBLE, FL_VISIBLE]


# All FD_xxx structure emitted by fdesign contains at least the
# following
class FD_Any(cty.Structure):
    pass
FD_Any._fields_ = [
    ('form', cty.POINTER(FL_FORM)),
    ('vdata', cty.c_void_p),
    ('cdata', STRING),
    ('ldata', cty.c_long),
]



# Async IO stuff
FL_READ   = 1
"""File descriptor has data available."""
FL_WRITE  = 2
"""File descriptor is available for writing."""
FL_EXCEPT = 4
"""an I/O error has occurred."""

# my add, list of possible values --LK
ASYNCIO_list = [FL_READ, FL_WRITE, FL_EXCEPT]

FL_MAX_MENU_CHOICE_ITEMS = 128


# *** start - from /usr/include/X11/keysymdef.h ***
# TTY function keys, cleverly chosen to map to ASCII, for convenience of
# programming, but could have been arbitrary (at the cost of lookup
# tables in client code).
XK_BackSpace = 0xff08           # Back space, back char
XK_Tab = 0xff09
XK_Linefeed = 0xff0a            # Linefeed, LF
XK_Clear = 0xff0b
XK_Return = 0xff0d              # Return, enter
XK_Pause = 0xff13               # Pause, hold
XK_Scroll_Lock = 0xff14
XK_Sys_Req = 0xff15
XK_Escape = 0xff1b
XK_Delete = 0xffff              # Delete, rubout

# Cursor control & motion
XK_Home = 0xff50
XK_Left = 0xff51               # Move left, left arrow
XK_Up = 0xff52                 # Move up, up arrow
XK_Right = 0xff53              # Move right, right arrow
XK_Down = 0xff54               # Move down, down arrow
XK_Prior = 0xff55              # Prior, previous
XK_Page_Up = 0xff55
XK_Next = 0xff56               # Next
XK_Page_Down = 0xff56
XK_End = 0xff57                # EOL
XK_Begin = 0xff58              # BOL

# Misc functions
XK_Select = 0xff60             # Select, mark
XK_Print = 0xff61
XK_Execute = 0xff62            # Execute, run, do
XK_Insert = 0xff63             # Insert, insert here
XK_Undo = 0xff65
XK_Redo = 0xff66               # Redo, again
XK_Menu = 0xff67
XK_Find = 0xff68               # Find, search
XK_Cancel = 0xff69             # Cancel, stop, abort, exit
XK_Help = 0xff6a               # Help
XK_Break = 0xff6b
XK_Mode_switch = 0xff7e        # Character set switch
XK_script_switch = 0xff7e      # Alias for mode_switch
XK_Num_Lock = 0xff7f

# Keypad functions, keypad numbers cleverly chosen to map to ASCII
XK_KP_Space = 0xff80           # Space
XK_KP_Tab = 0xff89
XK_KP_Enter = 0xff8d           # Enter
XK_KP_F1 = 0xff91              # PF1, KP_A, ...
XK_KP_F2 = 0xff92
XK_KP_F3 = 0xff93
XK_KP_F4 = 0xff94
XK_KP_Home = 0xff95
XK_KP_Left = 0xff96
XK_KP_Up = 0xff97
XK_KP_Right = 0xff98
XK_KP_Down = 0xff99
XK_KP_Prior = 0xff9a
XK_KP_Page_Up = 0xff9a
XK_KP_Next = 0xff9b
XK_KP_Page_Down = 0xff9b
XK_KP_End = 0xff9c
XK_KP_Begin = 0xff9d
XK_KP_Insert = 0xff9e
XK_KP_Delete = 0xff9f
XK_KP_Equal = 0xffbd           # Equals
XK_KP_Multiply = 0xffaa
XK_KP_Add = 0xffab
XK_KP_Separator = 0xffac       # Separator, often comma
XK_KP_Subtract = 0xffad
XK_KP_Decimal = 0xffae
XK_KP_Divide = 0xffaf

XK_KP_0 = 0xffb0
XK_KP_1 = 0xffb1
XK_KP_2 = 0xffb2
XK_KP_3 = 0xffb3
XK_KP_4 = 0xffb4
XK_KP_5 = 0xffb5
XK_KP_6 = 0xffb6
XK_KP_7 = 0xffb7
XK_KP_8 = 0xffb8
XK_KP_9 = 0xffb9

# Auxiliary functions; note the duplicate definitions for left and right
# function keys;  Sun keyboards and a few other manufacturers have such
# function key groups on the left and/or right sides of the keyboard.
# We've not found a keyboard with more than 35 function keys total.
XK_F1 = 0xffbe
XK_F2 = 0xffbf
XK_F3 = 0xffc0
XK_F4 = 0xffc1
XK_F5 = 0xffc2
XK_F6 = 0xffc3
XK_F7 = 0xffc4
XK_F8 = 0xffc5
XK_F9 = 0xffc6
XK_F10 = 0xffc7
XK_F11 = 0xffc8
XK_L1 = 0xffc8
XK_F12 = 0xffc9
XK_L2 = 0xffc9
XK_F13 = 0xffca
XK_L3 = 0xffca
XK_F14 = 0xffcb
XK_L4 = 0xffcb
XK_F15 = 0xffcc
XK_L5 = 0xffcc
XK_F16 = 0xffcd
XK_L6 = 0xffcd
XK_F17 = 0xffce
XK_L7 = 0xffce
XK_F18 = 0xffcf
XK_L8 = 0xffcf
XK_F19 = 0xffd0
XK_L9 = 0xffd0
XK_F20 = 0xffd1
XK_L10 = 0xffd1
XK_F21 = 0xffd2
XK_R1 = 0xffd2
XK_F22 = 0xffd3
XK_R2 = 0xffd3
XK_F23 = 0xffd4
XK_R3 = 0xffd4
XK_F24 = 0xffd5
XK_R4 = 0xffd5
XK_F25 = 0xffd6
XK_R5 = 0xffd6
XK_F26 = 0xffd7
XK_R6 = 0xffd7
XK_F27 = 0xffd8
XK_R7 = 0xffd8
XK_F28 = 0xffd9
XK_R8 = 0xffd9
XK_F29 = 0xffda
XK_R9 = 0xffda
XK_F30 = 0xffdb
XK_R10 = 0xffdb
XK_F31 = 0xffdc
XK_R11 = 0xffdc
XK_F32 = 0xffdd
XK_R12 = 0xffdd
XK_F33 = 0xffde
XK_R13 = 0xffde
XK_F34 = 0xffdf
XK_R14 = 0xffdf
XK_F35 = 0xffe0
XK_R15 = 0xffe0

# Modifiers
XK_Shift_L = 0xffe1             # Left shift
XK_Shift_R = 0xffe2             # Right shift
XK_Control_L = 0xffe3           # Left control
XK_Control_R = 0xffe4           # Right control
XK_Caps_Lock = 0xffe5           # Caps lock
XK_Shift_Lock = 0xffe6          # Shift lock

XK_Meta_L = 0xffe7              # Left meta
XK_Meta_R = 0xffe8              # Right meta
XK_Alt_L = 0xffe9               # Left alt
XK_Alt_R = 0xffe                # Right alt
XK_Super_L = 0xffeb             # Left super
XK_Super_R = 0xffec             # Right super
XK_Hyper_L = 0xffed             # Left hyper
XK_Hyper_R = 0xffee             # Right hyper
# *** end - from /usr/include/X11/keysymdef.h ***



class _IO_FILE(cty.Structure):
    pass
FILE = _IO_FILE




########################
# forms.h (xbasic.h)
########################



# /usr/include/X11/Xutil.h 296
class XVisualInfo(cty.Structure):
    pass
XVisualInfo._fields_ = [
    ('visual', cty.POINTER(Visual)),
    ('visualid', VisualID),
    ('screen', cty.c_int),
    ('depth', cty.c_int),
    ('c_class', cty.c_int),
    ('red_mask', cty.c_ulong),
    ('green_mask', cty.c_ulong),
    ('blue_mask', cty.c_ulong),
    ('colormap_size', cty.c_int),
    ('bits_per_rgb', cty.c_int),
]


# /usr/include/X11/Xdefs.h
XID = cty.c_ulong
Window = XID    # cty.c_ulong
Pixmap = XID    # cty.c_ulong




FL_APPEVENT_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(XEvent),
                               cty.c_void_p)
""" FL_APPEVENT_CB(pXEvent, ptr_void) -> num.

    prototype for handling event callback (used by fl_set_event_callback,
    fl_set_idle_callback, fl_add_event_callback), returning value.
"""



# Draw mode
# values for unnamed enumeration
FL_XOR = 6              # GXxor
"""Bitwise XOR (exclusive-or) of the pixel value to be drawn witn the
pixel value already on the screen. Useful for rubber-banding."""
FL_COPY = 3             # GXcopy
"""Default overwrite mode, final pixel value is the same as source."""
FL_AND = 1              # GXand
"""Bitwise AND of the pixel value to be drawn with the pixel value
already on the screen."""

# my add, list of possible values --LK
DRAWMODE_list = [FL_XOR, FL_COPY, FL_AND]


FL_MINDEPTH = 1


#FL_IllegalVisual placeholder (backwards)
#FL_StaticGray placeholder (backwards)
#FL_GrayScale placeholder (backwards)
#FL_StaticColor placeholder (backwards)
#FL_PseudoColor placeholder (backwards)
#FL_TrueColor placeholder (backwards)
#FL_DirectColor placeholder (backwards)
#FL_DefaultVisual placeholder (backwards)

# values for unnamed enumeration
IllegalVisual = -1
""""""
StaticGray = 0
""""""
GrayScale = 1
""""""
StaticColor = 2
""""""
PseudoColor = 3
""""""
TrueColor = 4
""""""
DirectColor = 5
""""""
DefaultVisual = 10       # special request
""""""
GreyScale = GrayScale
StaticGrey = StaticGray


# my add - list of possible values --LK
VISUALMODE_list = [StaticGray, GrayScale, StaticColor, PseudoColor,
                   TrueColor, DirectColor, DefaultVisual, GreyScale,
                   StaticGrey]

# values for unnamed enumeration
FL_North = 2                            #NorthGravity
""""""
FL_NorthEast = 3                        #NorthEastGravity
""""""
FL_NorthWest = 1                        #NorthWestGravity
""""""
FL_South = 8                            #SouthGravity
""""""
FL_SouthEast = 9                        #SouthEastGravity
""""""
FL_SouthWest = 7                        #SouthWestGravity
""""""
FL_East = 6                             #EastGravity
""""""
FL_West = 4                             #WestGravity
""""""
FL_NoGravity = 0                        #ForgetGravity
""""""
FL_ForgetGravity = FL_NoGravity         #ForgetGravity
""""""

# my add, list of possible values --LK
GRAVITY_list = [FL_North, FL_NorthEast, FL_NorthWest, FL_South, FL_SouthEast,
                FL_SouthWest, FL_East, FL_West, FL_NoGravity, FL_ForgetGravity]



# Internal colormap size. Not really very meaningful as fl_mapcolor
# and company allow color "leakage", that is, although only FL_MAX_COLS
# are kept in the internal colormap, the server might have substantially
# more colors allocated
FL_MAX_COLORS = 1024
FL_MAX_COLS = FL_MAX_COLORS


# FL graphics state information. Some are redundant.

Font = XID    # cty.c_ulong
Atom = cty.c_ulong

# /usr/include/X11/Xlib.h 1044
class XFontProp(cty.Structure):
    pass
XFontProp._fields_ = [
    ('name', Atom),
    ('card32', cty.c_ulong),
]

# /usr/include/X11/Xlib.h 1035
class XCharStruct(cty.Structure):
    pass
XCharStruct._fields_ = [
    ('lbearing', cty.c_short),
    ('rbearing', cty.c_short),
    ('width', cty.c_short),
    ('ascent', cty.c_short),
    ('descent', cty.c_short),
    ('attributes',  cty.c_ushort),
]

# /usr/include/X11/Xlib.h 1050
class XFontStruct(cty.Structure):
    pass
XFontStruct._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('fid', Font),
    ('direction', cty.c_uint),
    ('min_char_or_byte2', cty.c_uint),
    ('max_char_or_byte2', cty.c_uint),
    ('min_byte1', cty.c_uint),
    ('max_byte1', cty.c_uint),
    ('all_chars_exist', cty.c_int),
    ('default_char', cty.c_uint),
    ('n_properties', cty.c_int),
    ('properties', cty.POINTER(XFontProp)),
    ('min_bounds', XCharStruct),
    ('max_bounds', XCharStruct),
    ('per_char', cty.POINTER(XCharStruct)),
    ('ascent', cty.c_int),
    ('descent', cty.c_int),
]


Colormap = XID    # cty.c_ulong


# /usr/include/X11/Xlib.h 225
class _XGC(cty.Structure):
    pass
GC = cty.POINTER(_XGC)

class FL_State(cty.Structure):
    pass
FL_State._fields_ = [
    ('xvinfo', cty.POINTER(XVisualInfo)),
    ('cur_fnt', cty.POINTER(XFontStruct)),
    ('colormap', Colormap),
    ('trailblazer', Window),
    ('vclass', cty.c_int),
    ('depth', cty.c_int),
    ('rgb_bits', cty.c_int),
    ('dithered', cty.c_int),
    ('pcm', cty.c_int),
    ('gc', GC * 16),
    ('textgc', GC * 16),
    ('dimmedGC', GC),
    ('lut', cty.c_ulong * 1024),
    ('rshift', cty.c_uint),
    ('rmask', cty.c_uint),
    ('rbits', cty.c_uint),
    ('gshift', cty.c_uint),
    ('gmask', cty.c_uint),
    ('gbits', cty.c_uint),
    ('bshift', cty.c_uint),
    ('bmask', cty.c_uint),
    ('bbits', cty.c_uint),
]

#FL_STATE placeholder (backwards)




# Global variables
# /usr/include/X11/Xlib.h 266
class _XDisplay(cty.Structure):
    pass
_XDisplay._fields_ = []

Display = _XDisplay



# Fonts related

FL_MAX_FONTSIZES = 10

class FL_FONT(cty.Structure):
    pass
FL_FONT._fields_ = [
    ('fs', cty.POINTER(XFontStruct) * FL_MAX_FONTSIZES),  # cached fontstruct
    ('size', cty.c_short * FL_MAX_FONTSIZES),       # cached sizes
    ('nsize', cty.c_short),                         # cached so far
    ('fname', cty.c_char * 80),                     # without size info
]

# /usr/include/X11/Xlib.h 439
class XPoint(cty.Structure):
    pass
FL_POINT = XPoint

# /usr/include/X11/Xlib.h 444
class XRectangle(cty.Structure):
    pass
FL_RECT = XRectangle



# Line attributes

# values for unnamed enumeration
FL_SOLID = 0                 #LineSolid
"""Solid line. Default and most efficient"""
FL_USERDASH = 1               #LineOnOffDash
"""Dashed line, but the dash pattern is used-definable via
fl_dashedlinestyle(). Only the odd numbered segments are drawn
with the foreground color."""
FL_USERDOUBLEDASH = 2        #LineDoubleDash
"""Similar to FL_LINE_USERDASH but both even and odd numbered
segments are drawn, with the even numbered segments drawn in
the background color (as set by fl_bk_color()."""
FL_DOT = 3
"""Dotted line [....]"""
FL_DOTDASH = 4
"""Dash-dot-dash line [-.-.]"""
FL_DASH = 5
"""Dashed line [----]"""
FL_LONGDASH = 6
"""Long dashed line [------]"""

# my add, list of possible values --LK
LINESTYLE_list = [FL_SOLID, FL_USERDASH, FL_USERDOUBLEDASH, FL_DOT, FL_DOTDASH,
                 FL_DASH, FL_LONGDASH]


# *** start - from /usr/include/X11/X.h ***
# Input Event Masks. Used as event-mask window attribute and as arguments
# to Grab requests.  Not to be confused with event names.
NoEventMask = 0L
KeyPressMask = (1 << 0)                  # 1
KeyReleaseMask = (1 << 1)                # 2
ButtonPressMask = (1 << 2)               # 4
ButtonReleaseMask = (1 << 3)             # 8
EnterWindowMask = (1 << 4)               # 16
LeaveWindowMask = (1 << 5)               # 32
PointerMotionMask = (1 << 6)             # 64
PointerMotionHintMask = (1 << 7)         # 128
Button1MotionMask = (1 << 8)             # 256
Button2MotionMask = (1 << 9)             # 512
Button3MotionMask = (1 << 10)            # 1024
Button4MotionMask = (1 << 11)            # 2048
Button5MotionMask = (1 << 12)            # 4096
ButtonMotionMask = (1 << 13)             # 8192
KeymapStateMask = (1 << 14)              # 16384
ExposureMask = (1 << 15)                 # 32768
VisibilityChangeMask = (1 << 16)         # 65536
StructureNotifyMask = (1 << 17)          # 131072
ResizeRedirectMask = (1 << 18)           # 262144
SubstructureNotifyMask = (1 << 19)       # 524288
SubstructureRedirectMask = (1 << 20)     # 1048576
FocusChangeMask = (1 << 21)              # 2097152
ColormapChangeMask = (1 << 23)           # 4194304
OwnerGrabButtonMask = (1 << 24)          # 8388608
# Key masks. Used as modifiers to GrabButton and GrabKey, results of QueryPointer,
# state in various key-, mouse-, and button-related events.
ShiftMask = (1 << 0)
LockMask = (1 << 1)
ControlMask = (1 << 2)
Mod1Mask = (1 << 3)
Mod2Mask = (1 << 4)
Mod3Mask = (1 << 5)
Mod4Mask = (1 << 6)
Mod5Mask = (1 << 7)
# button masks.  Used in same manner as Key masks above. Not to be confused
# with button names below.
Button1Mask = (1 << 8)
Button2Mask = (1 << 9)
Button3Mask = (1 << 10)
Button4Mask = (1 << 11)
Button5Mask = (1 << 12)
AnyModifier = (1 << 15)       # used in GrabButton, GrabKey
# *** end - from /usr/include/X11/X.h ***


# All registerable events, including Client Message
FL_ALL_EVENT = (KeyPressMask | KeyReleaseMask \
                    | ButtonPressMask | ButtonReleaseMask \
                    | EnterWindowMask | LeaveWindowMask \
                    | ButtonMotionMask | PointerMotionMask )


# Resources

# values for enumeration 'FL_RTYPE'
FL_RTYPE = cty.c_int  # enum
FL_NONE = 0
"""type for variables not to be used (or not available)"""
FL_SHORT = 10
"""type for short variable"""
FL_BOOL = 11
"""for boolean variable (int)"""
FL_INT = 12
"""for int variable"""
FL_LONG = 13
"""for long variable"""
FL_FLOAT = 14
"""for float variable"""
FL_STRING = 15
"""for char[]/string variable"""

RTYPE_list = [FL_NONE, FL_SHORT, FL_BOOL, FL_INT, FL_LONG, FL_FLOAT,
              FL_STRING]


class FL_RESOURCE(cty.Structure):
    pass
FL_RESOURCE._fields_ = [
    ('res_name', STRING),           # resource name
    ('res_class', STRING),          # resource class
    ('type', FL_RTYPE),             # FL_INT, FL_FLOAT, FL_BOOL, FL_STRING
    ('var', cty.c_void_p),            # address for the variable
    ('defval', STRING),             # default setting in string form
    ('nbytes', cty.c_int),            # used only for strings
]



# values for enumeration 'XrmOptionKind'
XrmOptionKind = cty.c_int # enum
XrmoptionNoArg = 0      # Value is specified in OptionDescRec.value
XrmoptionIsArg = 1      # Value is the option string itself
XrmoptionStickyArg = 2  # Value is characters immediately following option
XrmoptionSepArg = 3     # Value is next argument in argv
XrmoptionResArg = 4     # Resource and value in next argument in argv
XrmoptionSkipArg = 5    # Ignore this option and the next argument in argv
XrmoptionSkipLine = 6   # Ignore this option and the rest of argv
XrmoptionSkipNArgs = 7  # Ignore this option and the next
                        # OptionDescRes.value arguments in argv


# /usr/include/X11/Xresource.h 345
class XrmOptionDescRec(cty.Structure):
    pass
XrmOptionDescRec._fields_ = [
    ('option', STRING),
    ('specifier', STRING),
    ('argKind', XrmOptionKind),
    ('value', XPointer),
]
XrmOptionDescList = cty.POINTER(XrmOptionDescRec)

FL_CMD_OPT = XrmOptionDescRec

FL_resource = FL_RESOURCE


KeySym = XID    # cty.c_ulong


# All Form control variables. Named closely as its resource name

class FL_IOPT(cty.Structure):
    pass
FL_IOPT._fields_ = [
    ('rgamma', cty.c_float),
    ('ggamma', cty.c_float),
    ('bgamma', cty.c_float),
    ('debug', cty.c_int),
    ('sync', cty.c_int),
    ('depth', cty.c_int),
    ('vclass', cty.c_int),
    ('doubleBuffer', cty.c_int),
    ('ulPropWidth', cty.c_int),           # underline stuff
    ('ulThickness', cty.c_int),
    ('buttonFontSize', cty.c_int),
    ('sliderFontSize', cty.c_int),
    ('inputFontSize', cty.c_int),
    ('browserFontSize', cty.c_int),
    ('menuFontSize', cty.c_int),
    ('choiceFontSize', cty.c_int),
    ('labelFontSize', cty.c_int),         # all other labels fonts
    ('pupFontSize', cty.c_int),           # font for pop-up menus
    ('pupFontStyle', cty.c_int),
    ('privateColormap', cty.c_int),
    ('sharedColormap', cty.c_int),
    ('standardColormap', cty.c_int),
    ('scrollbarType', cty.c_int),
    ('backingStore', cty.c_int),
    ('coordUnit', cty.c_int),
    ('borderWidth', cty.c_int),
    ('safe', cty.c_int),
    ('rgbfile', STRING),                # where RGB file is
    ('vname', cty.c_char * 24),
]

buttonLabelSize = FL_IOPT.buttonFontSize
sliderLabelSize = FL_IOPT.sliderFontSize
inputLabelSize = FL_IOPT.inputFontSize


# Program default masks

# values for unnamed enumeration
FL_PDDepth = 2                      #(1<<1)
"""Preferred visual depth (depth)"""
FL_PDClass = 4                      #(1<<2)
""" """
FL_PDDouble = 8                     #(1<<3)
"""Simulate double buffering (doubleBuffer)"""
FL_PDSync = 16                      #(1<<4)
""" """
FL_PDPrivateMap = 32                #(1<<5)
"""Select private colormap if appropriate (privateColormap)"""
FL_PDScrollbarType = 64             #(1<<6)
"""Scrollbar type to use for browser and input (scrollbarType)"""
FL_PDPupFontSize = 128              #(1<<7)
"""Font size for pop-ups (PupFontSize)"""
FL_PDButtonFontSize = 256           #(1<<8)
"""Default button label font size (buttonFontSize)"""
FL_PDInputFontSize = 512            #(1<<9)
"""Input label and text font size (menuFontSize)"""
FL_PDSliderFontSize  = 1024         #(1<<10)
""" """
FL_PDVisual = 2048                  #(1<<11)
"""Preferred visual (e.g. TrueColor ..) (vclass)"""
FL_PDULThickness = 4096             #(1<<12)
"""Underline thickness (ulThickness)"""
FL_PDULPropWidth = 8192             #(1<<13)
"""Underline width, 0 for constant width fonts (ulPropWidth)"""
FL_PDBS = 16384                     #(1<<14)
"""Turn BackingStore on or off (backingStore)"""
FL_PDCoordUnit = 32768              #(1<<15)
"""Unit of measure for screen coordinates (pixel, mm, point, etc..)
(coordUnit)"""
FL_PDDebug = 65536                  #(1<<16)
"""Debug level (0-5) (debug)"""
FL_PDSharedMap = 131072             #(1<<17)
"""Force use of shared colormap (sharedColormap)"""
FL_PDStandardMap = 262144           #(1<<18)
"""Force use of standard colormap (standardColormap)"""
FL_PDBorderWidth = 524288           #(1<<19)
"""Default border width (borderWidth)"""
FL_PDSafe = 1048576                 #(1<<20)
""" """
FL_PDMenuFontSize = 2097152         #(1<<21)
"""Menu label font size (menuFontSize)"""
FL_PDBrowserFontSize = 4194304      #(1<<22)
"""Browser label and text font size (browserFontSize)"""
FL_PDChoiceFontSize = 8388608       #(1<<23)
"""Choice label and choice text font size (choiceFontSize)"""
FL_PDLabelFontSize = 16777216       #(1<<24)
"""Label font size for all other objects (box, pixmap etc.) (labelFontSize)"""

FL_PDButtonLabelSize = FL_PDButtonFontSize
"""Default button label font size (buttonFontSize)"""
FL_PDSliderLabelSize = FL_PDSliderFontSize
FL_PDInputLabelSize = FL_PDInputFontSize
"""Input label and text font size (menuFontSize)"""
FL_PDButtonLabel = FL_PDButtonLabelSize

# my add, list of possible values --LK
PRGDEFAULTS_list = [FL_PDDepth, FL_PDClass, FL_PDDouble, FL_PDSync,
                    FL_PDPrivateMap, FL_PDScrollbarType, FL_PDPupFontSize,
                    FL_PDButtonFontSize, FL_PDInputFontSize,
                    FL_PDSliderFontSize, FL_PDVisual, FL_PDULThickness,
                    FL_PDULPropWidth, FL_PDBS, FL_PDCoordUnit, FL_PDDebug,
                    FL_PDSharedMap, FL_PDStandardMap, FL_PDBorderWidth,
                    FL_PDSafe, FL_PDMenuFontSize, FL_PDBrowserFontSize,
                    FL_PDChoiceFontSize, FL_PDLabelFontSize,
                    FL_PDButtonLabelSize, FL_PDSliderLabelSize,
                    FL_PDInputLabelSize, FL_PDButtonLabel]


# How we pack and unpack colors
FL_PCTYPE = cty.c_ubyte         # primary color type
FL_PCBITS = 8
FL_PCMAX = (1 << FL_PCBITS) - 1

FL_PACKED4 = cty.c_uint
FL_PACKED = FL_PACKED4

FL_RMASK = 0x000000ff
""""""
FL_RSHIFT = 0
""""""
FL_GMASK = 0x0000ff00
""""""
FL_GSHIFT = 8
""""""
FL_BMASK = 0x00ff0000
""""""
FL_BSHIFT = 16
""""""
FL_AMASK = 0xff000000
""""""
FL_ASHIFT = 24
""""""


class FL_RGB2PIXEL_(cty.Structure):
    pass
FL_RGB2PIXEL_._fields_ = [
    ('rshift', cty.c_uint),
    ('rmask', cty.c_uint),
    ('rbits', cty.c_uint),
    ('gshift', cty.c_uint),
    ('gmask', cty.c_uint),
    ('gbits', cty.c_uint),
    ('bshift', cty.c_uint),
    ('bmask', cty.c_uint),
    ('bbits', cty.c_uint),
    ('bits_per_rgb', cty.c_int),
    ('colormap_size', cty.c_int),
]

FL_RGB2PIXEL = FL_RGB2PIXEL_



Mask = cty.c_ulong
Time = cty.c_ulong
GContext = XID    # cty.c_ulong
KeyCode = cty.c_ubyte



# /usr/include/X11/Xlib.h 416
class XWindowChanges(cty.Structure):
    pass
XWindowChanges._fields_ = [
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('sibling', Window),
    ('stack_mode', cty.c_int),
]


# /usr/include/X11/Xlib.h 426
class XColor(cty.Structure):
    pass
XColor._fields_ = [
    ('pixel', cty.c_ulong),
    ('red',  cty.c_ushort),
    ('green',  cty.c_ushort),
    ('blue',  cty.c_ushort),
    ('flags', cty.c_char),
    ('pad', cty.c_char),
]


# /usr/include/X11/Xlib.h 435
class XSegment(cty.Structure):
    pass
XSegment._fields_ = [
    ('x1', cty.c_short),
    ('y1', cty.c_short),
    ('x2', cty.c_short),
    ('y2', cty.c_short),
]


XPoint._fields_ = [
    ('x', cty.c_short),
    ('y', cty.c_short),
]


# /usr/include/X11/Xlib.h 444
XRectangle._fields_ = [
    ('x', cty.c_short),
    ('y', cty.c_short),
    ('width',  cty.c_ushort),
    ('height',  cty.c_ushort),
]


# /usr/include/X11/Xlib.h 450
class XArc(cty.Structure):
    pass
XArc._fields_ = [
    # /usr/include/X11/Xlib.h 450
    ('x', cty.c_short),
    ('y', cty.c_short),
    ('width',  cty.c_ushort),
    ('height',  cty.c_ushort),
    ('angle1', cty.c_short),
    ('angle2', cty.c_short),
]


# /usr/include/X11/Xlib.h 464
class XKeyboardControl(cty.Structure):
    pass
XKeyboardControl._fields_ = [
    ('key_click_percent', cty.c_int),
    ('bell_percent', cty.c_int),
    ('bell_pitch', cty.c_int),
    ('bell_duration', cty.c_int),
    ('led', cty.c_int),
    ('led_mode', cty.c_int),
    ('key', cty.c_int),
    ('auto_repeat_mode', cty.c_int),
]


# /usr/include/X11/Xlib.h 475
class XKeyboardState(cty.Structure):
    pass
XKeyboardState._fields_ = [
    ('key_click_percent', cty.c_int),
    ('bell_percent', cty.c_int),
    ('bell_pitch', cty.c_uint),
    ('bell_duration', cty.c_uint),
    ('led_mask', cty.c_ulong),
    ('global_auto_repeat', cty.c_int),
    ('auto_repeats', cty.c_char * 32),
]


# /usr/include/X11/Xlib.h 482
class XTimeCoord(cty.Structure):
    pass
XTimeCoord._fields_ = [
    ('time', Time),
    ('x', cty.c_short),
    ('y', cty.c_short),
]


# /usr/include/X11/Xlib.h 489
class XModifierKeymap(cty.Structure):
    pass
XModifierKeymap._fields_ = [
    ('max_keypermod', cty.c_int),
    ('modifiermap', cty.POINTER(KeyCode)),
]


Display = _XDisplay


# /usr/include/X11/Xlib.h 501
class _XPrivate(cty.Structure):
    pass
_XPrivate._fields_ = []


# /usr/include/X11/Xlib.h 502
class _XrmHashBucketRec(cty.Structure):
    pass
_XrmHashBucketRec._fields_ = []


# /usr/include/X11/Xlib.h 582
class XKeyEvent(cty.Structure):
    pass
XKeyEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('state', cty.c_uint),
    ('keycode', cty.c_uint),
    ('same_screen', cty.c_int),
]
XKeyPressedEvent = XKeyEvent
XKeyReleasedEvent = XKeyEvent


# /usr/include/X11/Xlib.h 600
class XButtonEvent(cty.Structure):
    pass
XButtonEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('state', cty.c_uint),
    ('button', cty.c_uint),
    ('same_screen', cty.c_int),
]
XButtonPressedEvent = XButtonEvent
XButtonReleasedEvent = XButtonEvent


# /usr/include/X11/Xlib.h 618
class XMotionEvent(cty.Structure):
    pass
XMotionEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('state', cty.c_uint),
    ('is_hint', cty.c_char),
    ('same_screen', cty.c_int),
]
XPointerMovedEvent = XMotionEvent


# /usr/include/X11/Xlib.h 641
class XCrossingEvent(cty.Structure):
    pass
XCrossingEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('root', Window),
    ('subwindow', Window),
    ('time', Time),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('x_root', cty.c_int),
    ('y_root', cty.c_int),
    ('mode', cty.c_int),
    ('detail', cty.c_int),
    ('same_screen', cty.c_int),
    ('focus', cty.c_int),
    ('state', cty.c_uint),
]
XEnterWindowEvent = XCrossingEvent
XLeaveWindowEvent = XCrossingEvent


# /usr/include/X11/Xlib.h 659
class XFocusChangeEvent(cty.Structure):
    pass
XFocusChangeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('mode', cty.c_int),
    ('detail', cty.c_int),
]
XFocusInEvent = XFocusChangeEvent
XFocusOutEvent = XFocusChangeEvent


# /usr/include/X11/Xlib.h 671
class XKeymapEvent(cty.Structure):
    pass
XKeymapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('key_vector', cty.c_char * 32),
]


# /usr/include/X11/Xlib.h 682
class XExposeEvent(cty.Structure):
    pass
XExposeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('count', cty.c_int),
]


Drawable = XID    # cty.c_ulong


# /usr/include/X11/Xlib.h 695
class XGraphicsExposeEvent(cty.Structure):
    pass
XGraphicsExposeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('drawable', Drawable),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('count', cty.c_int),
    ('major_code', cty.c_int),
    ('minor_code', cty.c_int),
]


# /usr/include/X11/Xlib.h 705
class XNoExposeEvent(cty.Structure):
    pass
XNoExposeEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('drawable', Drawable),
    ('major_code', cty.c_int),
    ('minor_code', cty.c_int),
]


# /usr/include/X11/Xlib.h 714
class XVisibilityEvent(cty.Structure):
    pass
XVisibilityEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('state', cty.c_int),
]


# /usr/include/X11/Xlib.h 727
class XCreateWindowEvent(cty.Structure):
    pass
XCreateWindowEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('override_redirect', cty.c_int),
]


# /usr/include/X11/Xlib.h 736
class XDestroyWindowEvent(cty.Structure):
    pass
XDestroyWindowEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
]


# /usr/include/X11/Xlib.h 746
class XUnmapEvent(cty.Structure):
    pass
XUnmapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('from_configure', cty.c_int),
]


# /usr/include/X11/Xlib.h 756
class XMapEvent(cty.Structure):
    pass
XMapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('override_redirect', cty.c_int),
]


# /usr/include/X11/Xlib.h 765
class XMapRequestEvent(cty.Structure):
    pass
XMapRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
]


# /usr/include/X11/Xlib.h 777
class XReparentEvent(cty.Structure):
    pass
XReparentEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('parent', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('override_redirect', cty.c_int),
]


# /usr/include/X11/Xlib.h 791
class XConfigureEvent(cty.Structure):
    pass
XConfigureEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('above', Window),
    ('override_redirect', cty.c_int),
]


# /usr/include/X11/Xlib.h 801
class XGravityEvent(cty.Structure):
    pass
XGravityEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
]


# /usr/include/X11/Xlib.h 810
class XResizeRequestEvent(cty.Structure):
    pass
XResizeRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('width', cty.c_int),
    ('height', cty.c_int),
]


# /usr/include/X11/Xlib.h 825
class XConfigureRequestEvent(cty.Structure):
    pass
XConfigureRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('above', Window),
    ('detail', cty.c_int),
    ('value_mask', cty.c_ulong),
]


# /usr/include/X11/Xlib.h 835
class XCirculateEvent(cty.Structure):
    pass
XCirculateEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('event', Window),
    ('window', Window),
    ('place', cty.c_int),
]


# /usr/include/X11/Xlib.h 845
class XCirculateRequestEvent(cty.Structure):
    pass
XCirculateRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('parent', Window),
    ('window', Window),
    ('place', cty.c_int),
]


# /usr/include/X11/Xlib.h 856
class XPropertyEvent(cty.Structure):
    pass
XPropertyEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('atom', Atom),
    ('time', Time),
    ('state', cty.c_int),
]


# /usr/include/X11/Xlib.h 866
class XSelectionClearEvent(cty.Structure):
    pass
XSelectionClearEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('selection', Atom),
    ('time', Time),
]


# /usr/include/X11/Xlib.h 879
class XSelectionRequestEvent(cty.Structure):
    pass
XSelectionRequestEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('owner', Window),
    ('requestor', Window),
    ('selection', Atom),
    ('target', Atom),
    ('property', Atom),
    ('time', Time),
]


# /usr/include/X11/Xlib.h 891
class XSelectionEvent(cty.Structure):
    pass
XSelectionEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('requestor', Window),
    ('selection', Atom),
    ('target', Atom),
    ('property', Atom),
    ('time', Time),
]


# /usr/include/X11/Xlib.h 906
class XColormapEvent(cty.Structure):
    pass
XColormapEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('colormap', Colormap),
    ('c_new', cty.c_int),
    ('state', cty.c_int),
]


# /usr/include/X11/Xlib.h 916
class N19XClientMessageEvent4DOT_71E(cty.Union):
    pass
N19XClientMessageEvent4DOT_71E._fields_ = [
    ('b', cty.c_char * 20),
    ('s', cty.c_short * 10),
    ('l', cty.c_long * 5),
]


# /usr/include/X11/Xlib.h 921
class XClientMessageEvent(cty.Structure):
    pass
XClientMessageEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('message_type', Atom),
    ('format', cty.c_int),
    ('data', N19XClientMessageEvent4DOT_71E),
]


# /usr/include/X11/Xlib.h 933
class XMappingEvent(cty.Structure):
    pass
XMappingEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
    ('request', cty.c_int),
    ('first_keycode', cty.c_int),
    ('count', cty.c_int),
]


# /usr/include/X11/Xlib.h 943
class XErrorEvent(cty.Structure):
    pass
XErrorEvent._fields_ = [
    ('type', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('resourceid', XID),
    ('serial', cty.c_ulong),
    ('error_code', cty.c_ubyte),
    ('request_code', cty.c_ubyte),
    ('minor_code', cty.c_ubyte),
]


# /usr/include/X11/Xlib.h 951
class XAnyEvent(cty.Structure):
    pass
XAnyEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('window', Window),
]


# /usr/include/X11/Xlib.h 967
class XGenericEvent(cty.Structure):
    pass
XGenericEvent._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('extension', cty.c_int),
    ('evtype', cty.c_int),
]


# /usr/include/X11/Xlib.h 978
class XGenericEventCookie(cty.Structure):
    pass
XGenericEventCookie._fields_ = [
    ('type', cty.c_int),
    ('serial', cty.c_ulong),
    ('send_event', cty.c_int),
    ('display', cty.POINTER(Display)),
    ('extension', cty.c_int),
    ('evtype', cty.c_int),
    ('cookie', cty.c_uint),
    ('data', cty.c_void_p),
]


# /usr/include/X11/Xlib.h 984
_XEvent._fields_ = [
    ('type', cty.c_int),
    ('xany', XAnyEvent),
    ('xkey', XKeyEvent),
    ('xbutton', XButtonEvent),
    ('xmotion', XMotionEvent),
    ('xcrossing', XCrossingEvent),
    ('xfocus', XFocusChangeEvent),
    ('xexpose', XExposeEvent),
    ('xgraphicsexpose', XGraphicsExposeEvent),
    ('xnoexpose', XNoExposeEvent),
    ('xvisibility', XVisibilityEvent),
    ('xcreatewindow', XCreateWindowEvent),
    ('xdestroywindow', XDestroyWindowEvent),
    ('xunmap', XUnmapEvent),
    ('xmap', XMapEvent),
    ('xmaprequest', XMapRequestEvent),
    ('xreparent', XReparentEvent),
    ('xconfigure', XConfigureEvent),
    ('xgravity', XGravityEvent),
    ('xresizerequest', XResizeRequestEvent),
    ('xconfigurerequest', XConfigureRequestEvent),
    ('xcirculate', XCirculateEvent),
    ('xcirculaterequest', XCirculateRequestEvent),
    ('xproperty', XPropertyEvent),
    ('xselectionclear', XSelectionClearEvent),
    ('xselectionrequest', XSelectionRequestEvent),
    ('xselection', XSelectionEvent),
    ('xcolormap', XColormapEvent),
    ('xclient', XClientMessageEvent),
    ('xmapping', XMappingEvent),
    ('xerror', XErrorEvent),
    ('xkeymap', XKeymapEvent),
    ('xgeneric', XGenericEvent),
    ('xcookie', XGenericEventCookie),
    ('pad', cty.c_long * 24),
]



# *** start - from /usr/include/X11/X.h ***
# Event names.  Used in "type" field in XEvent structures.  Not to be
# confused with event masks above.  They start from 2 because 0 and 1
# are reserved in the protocol for errors and replies.
KeyPress = 2
KeyRelease = 3
ButtonPress = 4
ButtonRelease = 5
MotionNotify = 6
EnterNotify = 7
LeaveNotify = 8
FocusIn = 9
FocusOut = 10
KeymapNotify = 11
Expose = 12
GraphicsExpose = 13
NoExpose = 14
VisibilityNotify = 15
CreateNotify = 16
DestroyNotify = 17
UnmapNotify = 18
MapNotify = 19
MapRequest = 20
ReparentNotify = 21
ConfigureNotify = 22
ConfigureRequest = 23
GravityNotify = 24
ResizeRequest = 25
CirculateNotify = 26
CirculateRequest = 27
PropertyNotify = 28
SelectionClear = 29
SelectionRequest = 30
SelectionNotify = 31
# *** end - from /usr/include/X11/X.h ***


# *** start - from /usr/include/X11/Xutil.h 139 ***
# definitions for initial window state
#WithdrawnState = 0      # for windows that are not mapped
NormalState = 1         # most applications want to start this way
IconicState = 3         # application wants to start as an icon
# *** end - from /usr/include/X11/Xutil.h ***

# my add - list of possible values --LK
WINSTATE_list = [NormalState, IconicState]






#######################
# forms.h (bitmap.h)
# Bitmap object class
#######################

FL_NORMAL_BITMAP = 0
""""""

# my add - list of possible values --LK
BITMAPTYPE_list = [FL_NORMAL_BITMAP, ]


# Defaults
FL_BITMAP_BOXTYPE = FL_NO_BOX
FL_BITMAP_COL1 = FL_COL1            # background of bitmap
FL_BITMAP_COL2 = FL_COL1            # not used currently
FL_BITMAP_LCOL = FL_LCOL            # foreground of bitmap
FL_BITMAP_ALIGN = FL_ALIGN_BOTTOM



# PIXMAP stuff

FL_NORMAL_PIXMAP = 0
""""""

# my add - list of possible values --LK
PIXMAPTYPE_list = [FL_NORMAL_PIXMAP, ]



#######################
# forms.h (browser.h)
# Object class Browser
#######################

# values for enumeration 'FL_BROWSER_TYPE'
FL_BROWSER_TYPE = cty.c_int # enum
FL_NORMAL_BROWSER = 0
"""A browser in which no selections can be made."""
FL_SELECT_BROWSER = 1
"""In this case the user can make single line selections."""
FL_HOLD_BROWSER = 2
"""Same to FL_SELECT_BROWSER but the selection remains visible until
the next selection."""
FL_MULTI_BROWSER = 3
"""Multiple selections can be made and remain visible till de-selected."""

# my add - list of possible values --LK
BROWSERTYPE_list = [FL_NORMAL_BROWSER, FL_SELECT_BROWSER, FL_HOLD_BROWSER, \
                    FL_MULTI_BROWSER]


# Defaults
FL_BROWSER_BOXTYPE = FL_DOWN_BOX
FL_BROWSER_COL1 = FL_COL1
FL_BROWSER_COL2 = FL_YELLOW
FL_BROWSER_LCOL = FL_LCOL
FL_BROWSER_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_BROWSER_SLCOL = FL_COL1
FL_BROWSER_FONTSIZE = FL_SMALL_SIZE


#FL_BROWSER_LINELENGTH placeholder (backwards)

FL_BROWSER_SCROLL_CALLBACK = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT),
                cty.c_int, cty.c_void_p)



#############################################################
# forms.h (button.h)
# All Buttons, regular button, light button and round button
#############################################################

# values for enumeration 'FL_BUTTON_TYPE'
FL_BUTTON_TYPE = cty.c_int # enum
FL_NORMAL_BUTTON = 0
"""Returns value when released."""
FL_PUSH_BUTTON = 1
"""Stays pushed until user pushes it again."""
FL_RADIO_BUTTON = 2
"""Push button that switches off other radio buttons."""
FL_HIDDEN_BUTTON = 3
"""Invisible normal button."""
FL_TOUCH_BUTTON = 4
"""Returns value as long as the user pushes it."""
FL_INOUT_BUTTON = 5
"""Returns value both when pushed and when released."""
FL_RETURN_BUTTON = 6
"""Like a normal button but reacts on the <Return> key."""
FL_HIDDEN_RET_BUTTON = 7
"""Invisible return button."""
FL_MENU_BUTTON = 8
"""Returns value when pushed, useful e.g. for opening a popup when pushed."""

FL_TOGGLE_BUTTON = FL_PUSH_BUTTON
"""Stays pushed until user pushes it again."""

# my add - list of possible values --LK
BUTTONTYPE_list = [FL_NORMAL_BUTTON, FL_PUSH_BUTTON, FL_RADIO_BUTTON, \
                FL_HIDDEN_BUTTON, FL_TOUCH_BUTTON, FL_INOUT_BUTTON, \
                FL_RETURN_BUTTON, FL_HIDDEN_RET_BUTTON, FL_MENU_BUTTON, \
                FL_TOGGLE_BUTTON]


class FL_BUTTON_SPEC(cty.Structure):
    pass
FL_BUTTON_SPEC._fields_ = [
    ('pixmap', Pixmap),
    ('mask', Pixmap),
    ('bits_w', cty.c_uint),
    ('bits_h', cty.c_uint),
    ('val', cty.c_int),               # state of button whether (on/off)
    ('mousebut', cty.c_int),          # mouse button that caused the push
    ('timdel', cty.c_int),            # time since last touch (TOUCH buttons)
    ('event', cty.c_int),             # what event triggers redraw
    ('is_pushed', cty.c_int),         # set while drawn as pushed down
    ('react_to', cty.c_int * 5),      # mouse buttons button reacts to
    ('cspecl', cty.c_long),           # reserved for class specfic stuff
    ('cspecv', cty.c_void_p),         # miscty. things
    ('filename', STRING),
    ('focus_pixmap', Pixmap),
    ('focus_mask', Pixmap),
    ('focus_filename', STRING),
]

FL_BUTTON_STRUCT = FL_BUTTON_SPEC


# normal button default
FL_BUTTON_BOXTYPE = FL_UP_BOX
FL_BUTTON_COL1 = FL_COL1
FL_BUTTON_COL2 = FL_COL1
FL_BUTTON_LCOL = FL_LCOL
FL_BUTTON_ALIGN = FL_ALIGN_CENTER
FL_BUTTON_MCOL1 = FL_MCOL
FL_BUTTON_MCOL2 = FL_MCOL
FL_BUTTON_BW = FL_BOUND_WIDTH

# light button defaults
FL_LIGHTBUTTON_BOXTYPE = FL_UP_BOX
FL_LIGHTBUTTON_COL1 = FL_COL1
FL_LIGHTBUTTON_COL2 = FL_YELLOW
FL_LIGHTBUTTON_LCOL = FL_LCOL
FL_LIGHTBUTTON_ALIGN = FL_ALIGN_CENTER
FL_LIGHTBUTTON_TOPCOL = FL_COL1
FL_LIGHTBUTTON_MCOL = FL_MCOL
FL_LIGHTBUTTON_MINSIZE = 12

# round button defaults
FL_ROUNDBUTTON_BOXTYPE = FL_NO_BOX
FL_ROUNDBUTTON_COL1 = FL_MCOL
FL_ROUNDBUTTON_COL2 = FL_YELLOW
FL_ROUNDBUTTON_LCOL = FL_LCOL
FL_ROUNDBUTTON_ALIGN = FL_ALIGN_CENTER
FL_ROUNDBUTTON_TOPCOL = FL_COL1
FL_ROUNDBUTTON_MCOL = FL_MCOL

# round3d button defaults
FL_ROUND3DBUTTON_BOXTYPE = FL_NO_BOX
FL_ROUND3DBUTTON_COL1 = FL_COL1
FL_ROUND3DBUTTON_COL2 = FL_BLACK
FL_ROUND3DBUTTON_LCOL = FL_LCOL
FL_ROUND3DBUTTON_ALIGN = FL_ALIGN_CENTER
FL_ROUND3DBUTTON_TOPCOL = FL_COL1
FL_ROUND3DBUTTON_MCOL = FL_MCOL

# check button defaults
FL_CHECKBUTTON_BOXTYPE = FL_NO_BOX
FL_CHECKBUTTON_COL1 = FL_COL1
FL_CHECKBUTTON_COL2 = FL_YELLOW
FL_CHECKBUTTON_LCOL = FL_LCOL
FL_CHECKBUTTON_ALIGN = FL_ALIGN_CENTER

FL_CHECKBUTTON_TOPCOL = FL_COL1
FL_CHECKBUTTON_MCOL = FL_MCOL

# bitmap button defaults
FL_BITMAPBUTTON_BOXTYPE = FL_UP_BOX
FL_BITMAPBUTTON_COL1 = FL_COL1         # bitmap background
FL_BITMAPBUTTON_COL2 = FL_BLUE         # "focus" color
FL_BITMAPBUTTON_LCOL = FL_LCOL         # bitmap foreground
FL_BITMAPBUTTON_ALIGN = FL_ALIGN_BOTTOM

# bitmap button defaults
FL_PIXMAPBUTTON_BOXTYPE = FL_UP_BOX
FL_PIXMAPBUTTON_COL1 = FL_BUTTON_COL1
FL_PIXMAPBUTTON_COL2 = FL_BUTTON_COL2
FL_PIXMAPBUTTON_LCOL = FL_BUTTON_LCOL
FL_PIXMAPBUTTON_MCOL1 = FL_BUTTON_MCOL1
FL_PIXMAPBUTTON_MCOL2 = FL_BUTTON_MCOL2
FL_PIXMAPBUTTON_ALIGN = FL_ALIGN_BOTTOM


FL_DrawButton = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT))
FL_CleanupButton = cty.CFUNCTYPE(None, cty.POINTER(FL_BUTTON_SPEC))

FL_DRAWBUTTON = FL_DrawButton
FL_CLEANUPBUTTON = FL_CleanupButton



#######################
# forms.h (canvas.h)
# Header for FL_CANVAS
#######################

# values for enumeration 'FL_CANVAS_TYPE'
FL_CANVAS_TYPE = cty.c_int # enum
FL_NORMAL_CANVAS = 0
""""""
FL_SCROLLED_CANVAS = 1
""""""

# list of possible values - my add --LK
CANVASTYPE_list = [FL_NORMAL_CANVAS, FL_SCROLLED_CANVAS]


# Default
FL_CANVAS_BOXTYPE = FL_DOWN_BOX     # really the decoration frame
FL_CANVAS_ALIGN = FL_ALIGN_TOP


# /usr/include/X11/Xlib.h 317
class XSetWindowAttributes(cty.Structure):
    pass
XSetWindowAttributes._fields_ = [
    ('background_pixmap', Pixmap),
    ('background_pixel', cty.c_ulong),
    ('border_pixmap', Pixmap),
    ('border_pixel', cty.c_ulong),
    ('bit_gravity', cty.c_int),
    ('win_gravity', cty.c_int),
    ('backing_store', cty.c_int),
    ('backing_planes', cty.c_ulong),
    ('backing_pixel', cty.c_ulong),
    ('save_under', cty.c_int),
    ('event_mask', cty.c_long),
    ('do_not_propagate_mask', cty.c_long),
    ('override_redirect', cty.c_int),
    ('colormap', Colormap),
    ('cursor', Cursor),
]


FL_HANDLE_CANVAS = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
                        Window, cty.c_int, cty.c_int,
                        cty.POINTER(XEvent), cty.c_void_p)


FL_MODIFY_CANVAS_PROP = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT))



#############################
# forms.h (chart.h)
# Chart object class
#############################

# values for enumeration 'FL_CHART_TYPE'
FL_CHART_TYPE = cty.c_int # enum
FL_BAR_CHART = 0
"""A bar-chart (vertical)"""
FL_HORBAR_CHART = 1
"""A horizontal bar-chart"""
FL_LINE_CHART = 2
"""A line-chart"""
FL_FILL_CHART = 3
"""A line-chart but the area below curve is filled"""
FL_SPIKE_CHART = 4
"""A chart with a vertical spike for each value"""
FL_PIE_CHART = 5
"""A pie-chart"""
FL_SPECIALPIE_CHART = 6
"""A pie-chart with displaced first item."""

#FL_FILLED_CHART placeholder (backwards)

# list of possible values - my add --LK
CHARTTYPE_list = [FL_BAR_CHART, FL_HORBAR_CHART, FL_LINE_CHART, \
                  FL_FILL_CHART, FL_SPIKE_CHART, FL_PIE_CHART, \
                  FL_SPECIALPIE_CHART]


# Defaults
FL_CHART_BOXTYPE = FL_BORDER_BOX
FL_CHART_COL1 = FL_COL1
FL_CHART_LCOL = FL_LCOL
FL_CHART_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_CHART_MAX = 2048




#################################
# forms.h (clock.h)
#################################

# values for unnamed enumeration
FL_ANALOG_CLOCK = 0
"""An analog clock complete with the second hand."""
FL_DIGITAL_CLOCK = 1
"""A digital clock."""

# list of possible values - my add --LK
CLOCKTYPE_list = [FL_ANALOG_CLOCK, FL_DIGITAL_CLOCK]


FL_CLOCK_BOXTYPE = FL_UP_BOX
FL_CLOCK_COL1 = FL_INACTIVE_COL
FL_CLOCK_COL2 = FL_BOTTOM_BCOL
FL_CLOCK_LCOL = FL_BLACK
FL_CLOCK_ALIGN = FL_ALIGN_BOTTOM

FL_CLOCK_TOPCOL = FL_COL1




######################
# forms.h (counter_var.h)
######################

# values for enumeration 'FL_COUNTER_TYPE'
FL_COUNTER_TYPE = cty.c_int # enum
FL_NORMAL_COUNTER = 0
"""A counter with two buttons on each side."""
FL_SIMPLE_COUNTER = 1
"""A counter with one button on each side."""

# list of possible values - my add --LK
COUNTERTYPE_list = [FL_NORMAL_COUNTER, FL_SIMPLE_COUNTER]


# Defaults
FL_COUNTER_BOXTYPE = FL_UP_BOX
FL_COUNTER_COL1 = FL_COL1
FL_COUNTER_COL2 = FL_BLUE           # ct label
FL_COUNTER_LCOL = FL_LCOL           # ct reporting
FL_COUNTER_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_COUNTER_BW = FL_BOUND_WIDTH - 1


FL_VAL_FILTER = cty.CFUNCTYPE(STRING, cty.POINTER(FL_OBJECT),
                              cty.c_double, cty.c_int)




#############################
# forms.h (cursor.h)
# Cursor defs and prototypes
#############################

# *** start - from /usr/include/X11/cursorfont.h ***
XC_num_glyphs = 255             # original 154
XC_X_cursor = 0
XC_arrow = 2
XC_based_arrow_down = 4
XC_based_arrow_up = 6
XC_boat = 8
XC_bogosity = 10
XC_bottom_left_corner = 12
XC_bottom_right_corner = 14
XC_bottom_side = 16
XC_bottom_tee = 18
XC_box_spiral = 20
XC_center_ptr = 22
XC_circle = 24
XC_clock = 26
XC_coffee_mug = 28
XC_cross = 30
XC_cross_reverse = 32
XC_crosshair = 34
XC_diamond_cross = 36
XC_dot = 38
XC_dotbox = 40
XC_double_arrow = 42
XC_draft_large = 44
XC_draft_small = 46
XC_draped_box = 48
XC_fleur = 52
XC_gobbler = 54
XC_gumby = 56
XC_hand1 = 58
XC_hand2 = 60
XC_heart = 62
XC_icon = 64
XC_iron_cross = 66
XC_left_ptr = 68
XC_left_side = 70
XC_left_tee = 72
XC_leftbutton = 74
XC_ll_angle = 76
XC_lr_angle = 78
XC_man = 80
XC_middlebutton = 82
XC_mouse = 84
XC_pencil = 86
XC_pirate = 88
XC_plus = 90
XC_question_arrow = 92
XC_right_ptr = 94
XC_right_side = 96
XC_right_tee = 98
XC_rightbutton = 100
XC_rtl_logo = 102
XC_sailboat = 104
XC_sb_down_arrow = 106
XC_sb_h_double_arrow = 108
XC_sb_left_arrow = 110
XC_sb_right_arrow = 112
XC_sb_up_arrow = 114
XC_sb_v_double_arrow = 116
XC_shuttle = 118
XC_sizing = 120
XC_spider = 122
XC_spraycan = 124
XC_star = 126
XC_target = 128
XC_tcross = 130
XC_top_left_arrow = 132
XC_top_left_corner = 134
XC_top_right_corner = 136
XC_top_side = 138
XC_top_tee = 140
XC_trek = 142
XC_ul_angle = 144
XC_umbrella = 146
XC_ur_angle = 148
XC_watch = 150
XC_xterm = 152
# *** end - from /usr/include/X11/cursorfont.h ***

# my add  --LK
XCursors_list = [XC_arrow, XC_based_arrow_down, XC_based_arrow_up, \
        XC_boat, XC_bogosity, XC_bottom_left_corner, XC_bottom_right_corner, \
        XC_bottom_side, XC_bottom_tee, XC_box_spiral, XC_center_ptr, \
        XC_circle, XC_clock, XC_coffee_mug, XC_cross, XC_cross_reverse, \
        XC_crosshair, XC_diamond_cross, XC_dot, XC_dotbox, XC_double_arrow, \
        XC_draft_large, XC_draft_small, XC_draped_box, XC_fleur, \
        XC_gobbler, XC_gumby, XC_hand1, XC_hand2, XC_heart, XC_icon, \
        XC_iron_cross, XC_left_ptr, XC_left_side, XC_left_tee, \
        XC_leftbutton, XC_ll_angle, XC_lr_angle, XC_man, XC_middlebutton, \
        XC_mouse, XC_pencil, XC_pirate, XC_plus, XC_question_arrow, \
        XC_right_ptr, XC_right_side, XC_right_tee, XC_rightbutton, \
        XC_rtl_logo, XC_sailboat, XC_sb_down_arrow, XC_sb_h_double_arrow, \
        XC_sb_left_arrow, XC_sb_right_arrow, XC_sb_up_arrow, \
        XC_sb_v_double_arrow, XC_shuttle, XC_sizing, XC_spider, XC_spraycan, \
        XC_star, XC_target, XC_tcross, XC_top_left_arrow, \
        XC_top_left_corner, XC_top_right_corner, XC_top_side, XC_top_tee, \
        XC_trek, XC_ul_angle, XC_umbrella, XC_ur_angle, XC_watch, XC_xterm]


# values for unnamed enumeration
FL_INVISIBLE_CURSOR = -2
""""""
FL_DEFAULT_CURSOR = -1
""""""
FL_BUSY_CURSOR = XC_watch               #150
""""""
FL_CROSSHAIR_CURSOR = XC_tcross         #130
""""""
FL_KILL_CURSOR = XC_pirate              #88
""""""
FL_NWARROW_CURSOR = XC_top_left_arrow   #132
""""""
FL_NEARROW_CURSOR = XC_arrow            #2
""""""

XC_invisible = FL_INVISIBLE_CURSOR


# list of possible values, my add --LK
CURSORS_list = [FL_INVISIBLE_CURSOR, FL_DEFAULT_CURSOR, FL_BUSY_CURSOR, \
                FL_CROSSHAIR_CURSOR, FL_KILL_CURSOR, FL_NWARROW_CURSOR, \
                FL_NEARROW_CURSOR]






###################
# forms.h (dial.h)
###################

# values for enumeration 'FL_DIAL_TYPE'
FL_DIAL_TYPE = cty.c_int # enum
FL_NORMAL_DIAL = 0
"""A dial with a knob indicating the position."""
FL_LINE_DIAL = 1
"""A dial with a line indicating the position."""
FL_FILL_DIAL = 2
"""The area between initial and current is filled."""

# list of possible values - my add --LK
DIALTYPE_list = [FL_NORMAL_DIAL, FL_LINE_DIAL, FL_FILL_DIAL]


# values for unnamed enumeration
FL_DIAL_CW = 0
"""Clockwise rotation."""
FL_DIAL_CCW = 1
"""Counter-clockwise rotation."""

# Defaults
FL_DIAL_BOXTYPE = FL_FLAT_BOX
FL_DIAL_COL1 = FL_COL1
FL_DIAL_COL2 = FL_RIGHT_BCOL
FL_DIAL_LCOL = FL_LCOL
FL_DIAL_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_DIAL_TOPCOL = FL_COL1





############################################
# forms.h (filesys.h)
# Convenience functions to read a directory
############################################

# File types
# values for unnamed enumeration
FT_FILE = 0
"""a regular file type"""
FT_DIR = 1
"""a directory file type"""
FT_LINK = 2
"""a symbolic link file type"""
FT_SOCK = 3
"""a socket file type"""
FT_FIFO = 4
"""a pipe or FIFO file type"""
FT_BLK = 5
"""a block device file type"""
FT_CHR = 6
"""a character device file type"""
FT_OTHER = 7
"""other(?) file type"""


class FL_Dirlist(cty.Structure):
    pass

FL_Dirlist._fields_ = [
    ('name', STRING),               # entry name
    ('type', cty.c_int),              # FILE_TYPE
    ('dl_mtime', cty.c_long),         # file modification time
    ('dl_size', cty.c_ulong),         # file size in bytes
]


# values for unnamed enumeration
#FL_NONE                    # Don't sort the entries (defined elsewhere)
FL_ALPHASORT = 1            # sort in alphabetic order
"""Sort the entries in alphabetic order - this is the default"""
FL_RALPHASORT = 2           # sort in reverse alphabetic order
"""Sort the entries in reverse alphabetic order"""
FL_MTIMESORT = 3            # sort according to modification time
"""Sort the entries according to the modification time"""
FL_RMTIMESORT = 4           # sort in reverse modification time
"""Sort the entries according to the modification time, but reverse the order, i.e., latest first"""
FL_SIZESORT = 5             # sort in increasing size order
"""Sort the entries in increasing size order"""
FL_RSIZESORT = 6            # sort in decreasing size order
"""Sort the entries in decreasing size order"""
FL_CASEALPHASORT = 7        # sort case insensitive
"""Sort the entries in alphabetic order with no regard to case"""
FL_RCASEALPHASORT = 8       # sort case insensitive
"""Sort the entries in reverse alphabetic order with no regard to case."""


FL_DIRLIST_FILTER = cty.CFUNCTYPE(cty.c_int, STRING, cty.c_int)




#########################
# forms. (formbrowser.h)
#########################

# values for unnamed enumeration
FL_NORMAL_FORMBROWSER = 0
""""""

# list of possible values - my add --LK
FORMBRWSTYPE_list = [FL_NORMAL_FORMBROWSER, ]


# values for unnamed enumeration
FL_SMOOTH_SCROLL = 0
"""Default scroll."""
FL_JUMP_SCROLL = 1
"""Scrolls in form increments."""

# defaults?
FL_FORMBROWSER_BOXTYPE = FL_DOWN_BOX
FL_FORMBROWSER_COL1 = FL_COL1
FL_FORMBROWSER_ALIGN = FL_ALIGN_TOP




#############
# glcanvas.h
#############

# my add --LK
class GLXContext (cty.Structure):
    pass
GLXContext._fields_ = []




######################
# forms.h (goodies.h)
######################

# Resources and misc. goodie routines
FLAlertDismissLabel = "flAlert.dismiss.label"
""""""
FLAlertTitle = "flAlert.title"
""""""

FLQuestionYesLabel = "flQuestion.yes.label"
""""""
FLQuestionNoLabel = "flQuestion.no.label"
""""""
FLQuestionTitle = "flQuestion.title"
""""""

FLOKLabel = "flInput.ok.label"
""""""
FLInputClearLabel = "flInput.clear.label"
""""""
FLInputCancelLabel = "flInput.cancel.label"
""""""
FLInputTitle = "flInput.title"
""""""

FLChoiceTitle = "flChoice.title"
""""""


# command log

class FD_CMDLOG(cty.Structure):
    pass
FD_CMDLOG._fields_ = [
    ('form', cty.POINTER(FL_FORM)),
    ('vdata', cty.c_void_p),
    ('cdata', STRING),
    ('ldata', cty.c_long),
    ('browser', cty.POINTER(FL_OBJECT)),
    ('close_browser', cty.POINTER(FL_OBJECT)),
    ('clear_browser', cty.POINTER(FL_OBJECT)),
]

# file selector

FL_MAX_FSELECTOR = 6

class FD_FSELECTOR(cty.Structure):
    pass
FD_FSELECTOR._fields_ = [
    ('fselect', cty.POINTER(FL_FORM)),
    ('vdata', cty.c_void_p),
    ('cdata', cty.c_void_p),
    ('ldata', cty.c_long),
    ('browser', cty.POINTER(FL_OBJECT)),
    ('input', cty.POINTER(FL_OBJECT)),
    ('prompt', cty.POINTER(FL_OBJECT)),
    ('resbutt', cty.POINTER(FL_OBJECT)),
    ('patbutt', cty.POINTER(FL_OBJECT)),
    ('dirbutt', cty.POINTER(FL_OBJECT)),
    ('cancel', cty.POINTER(FL_OBJECT)),
    ('ready', cty.POINTER(FL_OBJECT)),
    ('dirlabel', cty.POINTER(FL_OBJECT)),
    ('patlabel', cty.POINTER(FL_OBJECT)),
    ('appbutt', cty.POINTER(FL_OBJECT) * 3),
]


FL_FSCB = cty.CFUNCTYPE(cty.c_int, STRING, cty.c_void_p)

# c function prototype for _fl_add_fselector_appbutton 
cfunc_none_voidp = cty.CFUNCTYPE(None, cty.c_void_p)






####################
# forms.h (input.h)
####################

# Types
# values for enumeration 'FL_INPUT_TYPE'
FL_INPUT_TYPE = cty.c_int # enum
FL_NORMAL_INPUT = 0
"""Any type of text can be typed into this field"""
FL_FLOAT_INPUT = 1
"""Only a float value can be typed in (e.g. -23.2e12)"""
FL_INT_INPUT = 2
"""Only an integer value can be typed in (e.g. -86)"""
FL_DATE_INPUT = 3
"""Only a date (MM/DD/YY or DD/MM/YY) can be typed in (and limited per
default to 10 characters)"""
FL_MULTILINE_INPUT = 4
"""An input field allowing for multiple lines"""
FL_HIDDEN_INPUT = 5
"""A normal input field but invisible"""
FL_SECRET_INPUT = 6
"""A normal input field that does not show the text (and limited per
default to a maximum length of 16 characters)"""

# my add - list of possible values --LK
INPUTTYPE_list = [FL_NORMAL_INPUT, FL_FLOAT_INPUT, FL_INT_INPUT, \
                  FL_DATE_INPUT, FL_MULTILINE_INPUT, FL_HIDDEN_INPUT, \
                  FL_SECRET_INPUT]


# for date input
# values for unnamed enumeration
FL_INPUT_MMDD = 0
"""Used as format for FL_DATE_INPUT, it places the month before the day"""
FL_INPUT_DDMM = 1
"""Used as format for FL_DATE_INPUT, it places the day before the month"""

# my add - list of possible values --LK
DATEFMT_list = [FL_INPUT_MMDD, FL_INPUT_DDMM]


# Defaults
FL_INPUT_BOXTYPE = FL_DOWN_BOX
FL_INPUT_COL1 = FL_COL1
FL_INPUT_COL2 = FL_MCOL
FL_INPUT_LCOL = FL_LCOL
FL_INPUT_ALIGN = FL_ALIGN_LEFT

# Others
FL_INPUT_TCOL = FL_LCOL
FL_INPUT_CCOL = FL_BLUE

FL_RINGBELL = (1 << 4)
""""""



# edit keys

class FL_EditKeymap(cty.Structure):
    pass
FL_EditKeymap._fields_ = [
    ('del_prev_char', cty.c_long),        # delete previous char
    ('del_next_char', cty.c_long),        # delete next char
    ('del_prev_word', cty.c_long),        # delete previous word
    ('del_next_word', cty.c_long),        # delete next word
    # movement
    ('moveto_prev_line', cty.c_long),     # one line up
    ('moveto_next_line', cty.c_long),     # one line down
    ('moveto_prev_char', cty.c_long),     # one char left
    ('moveto_next_char', cty.c_long),     # one char right
    ('moveto_prev_word', cty.c_long),     # one word left
    ('moveto_next_word', cty.c_long),     # one word right
    ('moveto_prev_page', cty.c_long),     # one page up
    ('moveto_next_page', cty.c_long),     # one page down
    ('moveto_bol', cty.c_long),           # move to begining of line
    ('moveto_eol', cty.c_long),           # move to end of line
    ('moveto_bof', cty.c_long),           # move to begin of file
    ('moveto_eof', cty.c_long),           # move to end of file
    # miscty. stuff
    ('transpose', cty.c_long),            # switch two char positions
    ('paste', cty.c_long),                # paste the edit buffer
    ('backspace', cty.c_long),            # another  del_prev_char
    ('del_to_bol', cty.c_long),           # cut to begining of line
    ('del_to_eol', cty.c_long),           # cut to end of line
    ('clear_field', cty.c_long),          # delete everything
    ('del_to_eos', cty.c_long),           # not implemented
]


FL_INPUTVALIDATOR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
                                  STRING, STRING, cty.c_int)



#####################
# forms.h (nmenu.h)
#####################

# Nmenu object types
# values for unnamed enumeration
FL_NORMAL_NMENU = 0
"""Probably the most often used type: shown as text on a borderless background,
popup gets opened when clicked on."""
FL_NORMAL_TOUCH_NMENU = 1
"""Also shown as text on a borderless background, but popup gets opened when
the mouse is moved on top of it without any further user action required."""
FL_BUTTON_NMENU = 2
"""When not active shown as text on borderless background, when clicked on
popup is shown and the object itself being dispayed as a button."""
FL_BUTTON_TOUCH_NMENU = 3
"""When not active shown as text on borderless background, when mouse is
moved onto it the popup is shown and the object itself is displayed as a
button."""

# list of possible values - my add --LK
NMENUTYPE_list = [FL_NORMAL_NMENU, FL_NORMAL_TOUCH_NMENU, FL_BUTTON_NMENU, \
                  FL_BUTTON_TOUCH_NMENU]




FL_VERSION = 1
"""The major version number"""
FL_REVISION = 0
"""Revision number"""
FL_FIXLEVEL = "93pre2"
FL_INCLUDE_VERSION = (FL_VERSION * 1000 + FL_REVISION)


FL_FALSE = 0
""""""
FL_TRUE = (not FL_FALSE)
""""""


#####################
# forms.h (choice.h)
#####################

#FL_CHOICE_TYPE placeholder (deprecated)
#FL_NORMAL_CHOICE placeholder (deprecated)
#FL_NORMAL_CHOICE2 placeholder (deprecated)
#FL_DROPLIST_CHOICE placeholder (deprecated)
#FL_BROWSER_CHOICE placeholder (deprecated)
#FL_SIMPLE_CHOICE placeholder (deprecated)
# list of possible values - my add --LK
#CHOICETYPE_list placeholder (deprecated)
#FL_CHOICE_BOXTYPE placeholder (deprecated)
#FL_CHOICE_COL1 placeholder (deprecated)
#FL_CHOICE_COL2 placeholder (deprecated)
#FL_CHOICE_LCOL placeholder (deprecated)
#FL_CHOICE_ALIGN placeholder (deprecated)
#FL_CHOICE_MCOL placeholder (deprecated)
#FL_CHOICE_MAXITEMS placeholder (deprecated)



#################################
# forms.h (clipbd.h)
# prototypes for clipboard stuff
#################################

FL_CPTYPE = Atom        # c_ulong


###################
# forms.h (flps.h)
###################

# postscript stuff
# values for unnamed enumeration
FLPS_AUTO = 0              # switch to landscape if does not fit
"""Automatic orientation."""
FLPS_LANDSCAPE = 1         # landscape always
"""Landscape  orientation (horizontal)."""
FLPS_PORTRAIT = 2          # portrait always
"""Portrait orientation (vertical)."""
FLPS_BESTFIT = 3           # even margins/best fit
"""Best fit orientation with even margin."""

# values for unnamed enumeration
FLPS_BW = -1
"""All drawings are black with white background."""
FLPS_GRAYSCALE = 0
"""Grayscale color."""
FLPS_COLOR = 1
"""Used full color."""


class FLPS_CONTROL(cty.Structure):
    pass
FLPS_CONTROL._fields_ = [
    ('ps_color', cty.c_int),
    ('orientation', cty.c_int),
    ('auto_fit', cty.c_int),
    ('drawbox', cty.c_int),
    ('eps', cty.c_int),
    ('xdpi', cty.c_float),
    ('ydpi', cty.c_float),
    ('paper_w', cty.c_float),
    ('paper_h', cty.c_float),
    ('gamma', cty.c_float),
    ('tmpdir', STRING),
    ('printer_dpi', cty.c_int),
    ('hm', cty.c_float),
    ('vm', cty.c_float),
    ('xscale', cty.c_float),
    ('yscale', cty.c_float),
    ('scale_text', cty.c_int),
    ('first_page_only', cty.c_int),
    ('clip', cty.c_int),
]


####################
# forms.h (frame.h)
####################

# types of frames
# values for unnamed enumeration
FL_NO_FRAME = 0
"""Nothing is drawn."""
FL_UP_FRAME = 1
"""A frame appears coming out of the screen."""
FL_DOWN_FRAME = 2
"""A frame that goes down into the screen."""
FL_BORDER_FRAME = 3
"""A frame with a simple outline."""
FL_SHADOW_FRAME = 4
""""""
FL_ENGRAVED_FRAME = 5
"""A frame appears to be engraved."""
FL_ROUNDED_FRAME = 6
"""A rounded frame."""
FL_EMBOSSED_FRAME = 7
"""A frame appears embossed."""
FL_OVAL_FRAME = 8
"""An elliptic box."""

# list of possible values - my add --LK
FRAMETYPE_list = [FL_NO_FRAME, FL_UP_FRAME, FL_DOWN_FRAME, FL_BORDER_FRAME,
                  FL_SHADOW_FRAME, FL_ENGRAVED_FRAME, FL_ROUNDED_FRAME,
                  FL_EMBOSSED_FRAME, FL_OVAL_FRAME]


# defaults?
FL_FRAME_COL1 = FL_BLACK        # border color
FL_FRAME_COL2 = FL_COL1         # label background
FL_FRAME_LCOL = FL_BLACK        # label color



#####################
# forms.h (free.h)
# Free object class
#####################

# values for enumeration 'FL_FREE_TYPE'
FL_FREE_TYPE = cty.c_int # enum
FL_NORMAL_FREE = 0
"""The object will receive the events FL_DRAW, FL_ENTER, FL_LEAVE, FL_MOTION,
FL_PUSH, FL_RELEASE and FL_MOUSE."""
FL_INACTIVE_FREE = 1
"""The object only receives FL_DRAW events. This should be used for objects
without interaction (e.g. a picture)"""
FL_INPUT_FREE = 2
"""Same as FL_NORMAL_FREE but the object also receives FL_FOCUS, FL_UNFOCUS
and FL_KEYBOARD events. The obj->wantkey is by default set to FL_KEY_NORMAL,
i.e., the free object will receive all normal keys (0-255) except <Tab> and
<Return> key. If you're interested in <Tab> or <Return> key, you need to
change obj->wantkey to FL_KEY_TAB or FL_KEY_ALL. See section Events, for
details."""
FL_CONTINUOUS_FREE = 3
"""Same as FL_NORMAL_FREE but the object also receives FL_STEP events.
This should be used for objects that change themselves continuously."""
FL_ALL_FREE = 4
"""The object receives all types of events."""

FL_SLEEPING_FREE = FL_INACTIVE_FREE
"""The object only receives FL_DRAW events. This should be used for objects
without interaction (e.g. a picture)"""

# list of possible values - my add --LK
FREETYPE_list = [FL_NORMAL_FREE, FL_INACTIVE_FREE, FL_INPUT_FREE,
                 FL_CONTINUOUS_FREE, FL_ALL_FREE, FL_SLEEPING_FREE]




#####################
# forms.h (menu.h)
#  Menu object class
#####################

# FL_MENU_TYPE placeholder (deprecated)
# FL_TOUCH_MENU placeholder (deprecated)
# FL_PUSH_MENU placeholder (deprecated)
# FL_PULLDOWN_MENU placeholder (deprecated)
# my add - list of possbile values --LK
# MENUTYPE_list placeholder (deprecated)
# FL_MENU_BOXTYPE placeholder (deprecated)
# FL_MENU_COL1 placeholder (deprecated)
# FL_MENU_COL2 placeholder (deprecated)
# FL_MENU_LCOL placeholder (deprecated)
# FL_MENU_ALIGN placeholder (deprecated)
# FL_MENU_MAXITEMS placeholder (deprecated)



###################
# forms.h (text.h)
###################

# values for unnamed enumeration
FL_NORMAL_TEXT = 0
""""""

# list of possible values - my add --LK
TEXTTYPE_list = [FL_NORMAL_TEXT, ]


FL_TEXT_BOXTYPE = FL_FLAT_BOX
FL_TEXT_COL1 = FL_COL1
FL_TEXT_COL2 = FL_MCOL
FL_TEXT_LCOL = FL_LCOL
FL_TEXT_ALIGN = FL_ALIGN_LEFT


###############################
# forms.h (xpopupfn.h)
# Prototypes for xpop-up menus
###############################

# FL_MAXPUPI placeholder (deprecated)
# FL_PUP_PADH placeholder (deprecated)



#################################
# forms.h (clipbd.h)
# prototypes for clipboard stuff
#################################

FL_LOSE_SELECTION_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
                                     cty.c_long)
FL_LOSE_SELECTION_CALLBACK = FL_LOSE_SELECTION_CB


FL_SELECTION_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_OBJECT),
                                cty.c_long, cty.c_void_p, cty.c_long)
FL_SELECTION_CALLBACK = FL_SELECTION_CB




#############################
# forms.h (popup.h)
#############################


class FL_POPUP_(cty.Structure):
    pass
FL_POPUP = FL_POPUP_

class FL_POPUP_ENTRY_(cty.Structure):
    pass
FL_POPUP_ENTRY = FL_POPUP_ENTRY_

class FL_POPUP_RETURN_(cty.Structure):
    pass
FL_POPUP_RETURN = FL_POPUP_RETURN_


FL_POPUP_RETURN_._fields_ = [
    ('val', cty.c_long),              # value assigned to popup entry
    ('user_data', cty.c_void_p),      # pointer to user data
    ('text', STRING),               # text of the selected popup entry
    ('label', STRING),              # left-flushed label part
    ('accel', STRING),              # right-flushed label part
    ('entry', cty.POINTER(FL_POPUP_ENTRY)),   # pointer to selected popup entry
    ('popup', cty.POINTER(FL_POPUP)),         # popup we're called for
]


FL_POPUP_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_POPUP_RETURN))

FL_POPUP_._fields_ = [
    ('next', cty.POINTER(FL_POPUP)),      # next in linked list
    ('prev', cty.POINTER(FL_POPUP)),      # previous in linked list
    ('parent', cty.POINTER(FL_POPUP)),        # for sub-popups, direct parent
    ('top_parent', cty.POINTER(FL_POPUP)),    # and top-most parent
    ('entries', cty.POINTER(FL_POPUP_ENTRY)),     # pointer to list of entries
    ('title', STRING),
    ('win', Window),                    # popup window
    ('parent_win', Window),             # parent window of popup window
    ('cursor', Cursor),                 # cursor for the popup
    ('callback', FL_POPUP_CB),
    ('use_req_pos', cty.c_int),           # if set use req_x, req_y
    ('req_x', cty.c_int),
    ('req_y', cty.c_int),
    ('x', cty.c_int),                     # position of popup window
    ('y', cty.c_int),
    ('w', cty.c_uint),                    # dimensions of popup window
    ('h', cty.c_uint),
    ('min_width', cty.c_int),             # minimum width of popup
    ('title_box_x', cty.c_int),           # position of title box
    ('title_box_y', cty.c_int),
    ('title_box_w', cty.c_uint),          # dimensions of title box
    ('title_box_h', cty.c_uint),
    ('has_subs', cty.c_int),
    ('has_boxes', cty.c_int),
    ('counter', cty.c_int),
    ('title_font_style', cty.c_int),
    ('title_font_size', cty.c_int),
    ('entry_font_style', cty.c_int),
    ('entry_font_size', cty.c_int),
    ('event_mask', cty.c_ulong),
    ('bw', cty.c_int),                    # border width
    ('bg_color', FL_COLOR),             # background color of popup
    ('on_color', FL_COLOR),             # color of entry under mouse
    ('title_color', FL_COLOR),          # color of title text
    ('text_color', FL_COLOR),           # normal text color of entry
    ('text_on_color', FL_COLOR),        # text color when mouse on entry
    ('text_off_color', FL_COLOR),       # text color of disabled entry
    ('radio_color', FL_COLOR),          # color of radio buttons
    ('policy', cty.c_int),
    ('need_recalc', cty.c_int),           # do we need to recalc position?
    ('ret', FL_POPUP_RETURN),     # structure passed to callbacks and returned
                                  # on selection
]

FL_POPUP_ENTRY_._fields_ = [
    ('prev', cty.POINTER(FL_POPUP_ENTRY)),    # next in linked list
    ('next', cty.POINTER(FL_POPUP_ENTRY)),    # previous in linked list
    ('popup', cty.POINTER(FL_POPUP)),         # popup it belongs to
    ('is_act', cty.c_int),                    # set while mouse is over it
    ('text', STRING),                       # complete text of entry
    ('label', STRING),                      # cleaned-up label text
    ('accel', STRING),                      # cleaned-up accelerator key text
    ('val', cty.c_long),                      # value associated with entry
    ('user_data', cty.c_void_p),              # pointer to user data
    ('type', cty.c_int),                      # normal, toggle, radio, sub-popup
    ('state', cty.c_uint),                    # disabled, hidden, checked
    ('group', cty.c_int),                     # group (for radio entries only)
    ('sub', cty.POINTER(FL_POPUP)),           # sub-popup bound to entry
    ('shortcut', cty.POINTER(cty.c_long)),      # keyboard shortcuts
    ('ulpos', cty.c_int),                     # underline position in text
    ('callback', FL_POPUP_CB),              # callback for entry
    ('enter_callback', FL_POPUP_CB),        # callback for entering entry
    ('leave_callback', FL_POPUP_CB),        # callback for leaving entry
    ('x', cty.c_int),                         # position of entry text
    ('y', cty.c_int),
    ('w', cty.c_uint),
    ('h', cty.c_uint),                        # height of entry text
    ('box_x', cty.c_int),
    ('box_y', cty.c_int),
    ('box_w', cty.c_uint),
    ('box_h', cty.c_uint),
    ('sl_h', cty.c_uint),
    ('ul_x', cty.c_int),
    ('ul_y', cty.c_int),
    ('ul_w', cty.c_uint),
    ('ul_h', cty.c_uint),
]

class FL_POPUP_ITEM(cty.Structure):
    pass
FL_POPUP_ITEM._fields_ = [
    ('text', STRING),               # text of entry
    ('callback', FL_POPUP_CB),      # (selection) callback
    ('shortcut', STRING),           # keyboard shortcut description
    ('type', cty.c_int),              # type of entry
    ('state', cty.c_int),             # disabled, hidden, checked
]


# Popup policies
# values for unnamed enumeration
FL_POPUP_NORMAL_SELECT = 0
"""Keeps the popup opened when the mouse isn't released on one of the
selectable items."""
FL_POPUP_DRAG_SELECT = 1
"""Close the popup immediately when the mouse button is released."""

# list of possible values, my add --LK
POPUPPOLICY_list = [FL_POPUP_NORMAL_SELECT, FL_POPUP_DRAG_SELECT]


# Popup states
# values for unnamed enumeration
FL_POPUP_NONE = 0
"""No special flags are set for the state of the item."""
FL_POPUP_DISABLED = 1       # entry is disabled
"""The item is disabled and can't be selected."""
FL_POPUP_HIDDEN   = 2       # entry is temporarily hidden
"""The popup is hidden, i.e. does not get shown (and thus can't be
selected)."""
FL_POPUP_CHECKED  = 4       # toggle/radio item is in on state
"""Only relevant for toggle or radio items, marks it as in "on" state."""

# list of possible values, my add --LK
POPUPSTATE_list = [FL_POPUP_NONE, FL_POPUP_DISABLED, FL_POPUP_HIDDEN,
                   FL_POPUP_CHECKED]


# Popup entry types
# values for unnamed enumeration
FL_POPUP_NORMAL = 0         # normal popup entry
"""Normal popup entry with no special properties."""
FL_POPUP_TOGGLE = 1         # toggle ("binary") popup entry
"""Toggle or binary entry, drawn with a check-mark to its left if
in 'on' state"""
FL_POPUP_RADIO = 2          # radio popup entry
"""Radio entry, drawn with a circle to its left (color-filled when
'on'. The group member of the FL_POPUP_ENTRY structure determines to
which group the entry belongs."""
FL_POPUP_SUB = 3            # sub-popup popup entry
"""Entry for a sub-popupfn. The sub member of its FL_POPUP_ENTRY structure is a
pointer to the sub-popup that gets shown when the mouse enters the entry."""
FL_POPUP_LINE = 4           # line popup entry
"""Not a real entry, just indicates that a separator line is to be drawn
between the previous and the next entry."""

# list of possible values, my add --LK
POPUPTYPE_list = [FL_POPUP_NORMAL, FL_POPUP_TOGGLE, FL_POPUP_RADIO,
                  FL_POPUP_SUB, FL_POPUP_LINE]


# Popup color types
# values for unnamed enumeration
FL_POPUP_BACKGROUND_COLOR = 0
"""Background color of the popup (default is FL_MCOL)"""
FL_POPUP_HIGHLIGHT_COLOR = 1
"""Backgroud color an entry is drawn with when it's selectable and the
mouse is on top of it (default is FL_BOTTOM_BCOL)"""
FL_POPUP_TITLE_COLOR = 2
"""Color used for the title text of a popup (default is FL_BLACK)"""
FL_POPUP_TEXT_COLOR = 3
"""Color normal used for entry texts (default is FL_BLACK)."""
FL_POPUP_HIGHLIGHT_TEXT_COLOR = 4
"""Color of the entry text when it's selectable and the mouse is on
top of it (default is FL_WHITE)"""
FL_POPUP_DISABLED_TEXT_COLOR = 5
"""Color for drawing the text of disabled entries (default is
FL_INACTIVE_COL)"""
FL_POPUP_RADIO_COLOR = 6
"""Color the circle drawn for radio entris in 'on' state is drawn in."""

# list of possible values, my add --LK
POPUPCOLOR_list = [FL_POPUP_BACKGROUND_COLOR, FL_POPUP_HIGHLIGHT_COLOR,
                   FL_POPUP_TITLE_COLOR, FL_POPUP_TEXT_COLOR,
                   FL_POPUP_HIGHLIGHT_TEXT_COLOR,
                   FL_POPUP_DISABLED_TEXT_COLOR, FL_POPUP_RADIO_COLOR]




#########################
# forms.h (positioner.h)
#########################

FL_NORMAL_POSITIONER = 0
"""Cross-hair inside a box."""
FL_OVERLAY_POSITIONER = 1
"""Cross-hair inside a transparent box (i.e. drawn in in XOR mode)."""
FL_INVISIBLE_POSITIONER = 2
"""Completely invisible positioner to be used just for the side effect of
obtaining a position (typically an object is below below it that otherwise
would receive user events)."""

# list of possible values - my add --LK
POSITIONERTYPE_list = [FL_NORMAL_POSITIONER, FL_OVERLAY_POSITIONER,
                       FL_INVISIBLE_POSITIONER]


# Defaults
FL_POSITIONER_BOXTYPE = FL_DOWN_BOX
FL_POSITIONER_COL1 = FL_COL1
FL_POSITIONER_COL2 = FL_RED
FL_POSITIONER_LCOL = FL_LCOL
FL_POSITIONER_ALIGN = FL_ALIGN_BOTTOM




#############################
# forms.h (scrollbar.h)
#############################


# values for unnamed enumeration
FL_VERT_SCROLLBAR = 0
"""A vertical xfdata."""
FL_HOR_SCROLLBAR = 1
"""A horizontal xfdata."""
FL_VERT_THIN_SCROLLBAR = 2
"""A different looking vertical xfdata."""
FL_HOR_THIN_SCROLLBAR = 3
"""A different looking horizontal xfdata."""
FL_VERT_NICE_SCROLLBAR = 4
"""A vertical scrollbar using FL_NICE_SLIDER."""
FL_HOR_NICE_SCROLLBAR = 5
"""A horizontal scrollbar using FL_NICE_SLIDER."""
FL_VERT_PLAIN_SCROLLBAR = 6
"""Similar to FL_THIN_SCROLLBAR."""
FL_HOR_PLAIN_SCROLLBAR = 7
"""Similar to FL_HOR_THIN_SCROLLBAR."""
FL_HOR_BASIC_SCROLLBAR = FL_HOR_PLAIN_SCROLLBAR
"""Similar to FL_HOR_THIN_SCROLLBAR."""
FL_VERT_BASIC_SCROLLBAR = FL_VERT_PLAIN_SCROLLBAR
"""Similar to FL_THIN_SCROLLBAR."""


# values for unnamed enumeration
FL_NORMAL_SCROLLBAR = 0
""""""
FL_THIN_SCROLLBAR = 1
""""""
FL_NICE_SCROLLBAR = 2
""""""
FL_PLAIN_SCROLLBAR = 3
""""""

# my add - list of possible values --LK
SCROLLTYPE_list = [FL_VERT_SCROLLBAR, FL_HOR_SCROLLBAR, \
                  FL_VERT_THIN_SCROLLBAR, FL_HOR_THIN_SCROLLBAR, \
                  FL_VERT_NICE_SCROLLBAR, FL_HOR_NICE_SCROLLBAR, \
                  FL_VERT_PLAIN_SCROLLBAR, FL_HOR_PLAIN_SCROLLBAR, \
                  FL_HOR_BASIC_SCROLLBAR, FL_VERT_BASIC_SCROLLBAR, \
                  FL_NORMAL_SCROLLBAR, FL_THIN_SCROLLBAR, \
                  FL_NICE_SCROLLBAR, FL_PLAIN_SCROLLBAR]



#####################
# forms.h (select.h)
#####################

# Select object types
# values for unnamed enumeration
FL_NORMAL_SELECT = 0
"""Per default this type is drawn as a rounded, flat box (but you can change
that by setting a different boxtype for the object) with the text of the
currently selected item in its center."""
FL_MENU_SELECT = 1
"""This select object looks like a button with a little extra box at its right
side (just like a FL_MENU_BUTTON) and the text of the currently selected item
is drawn on the button-like object."""
FL_DROPLIST_SELECT = 2
"""This type looks like a button with the text of the currently selected item
on top of it and a second square button directly beside it with an downward
pointing arrow on it."""

# list of possible values - my add --LK
SELECTTYPE_list = [FL_NORMAL_SELECT, FL_MENU_SELECT, FL_DROPLIST_SELECT]


# Defaults
FL_SELECT_COL1 = FL_COL1
FL_SELECT_COL2 = FL_MCOL
FL_SELECT_LCOL = FL_LCOL
FL_SELECT_ALIGN = FL_ALIGN_LEFT




#######################
# forms.h (slider.h)
# Slider object class
#######################

FL_HOR_FLAG = 1
""""""
FL_SCROLL_FLAG = 8
""""""

# values for enumeration 'FL_SLIDER_TYPE'
FL_SLIDER_TYPE = cty.c_int # enum
FL_VERT_SLIDER = 0
""""""
FL_HOR_SLIDER = FL_VERT_SLIDER | FL_HOR_FLAG
""""""
FL_VERT_FILL_SLIDER = 2
""""""
FL_HOR_FILL_SLIDER = FL_VERT_FILL_SLIDER | FL_HOR_FLAG
""""""
FL_VERT_NICE_SLIDER = 4
""""""
FL_HOR_NICE_SLIDER = FL_VERT_NICE_SLIDER | FL_HOR_FLAG
""""""
FL_VERT_BROWSER_SLIDER = 6
""""""
FL_HOR_BROWSER_SLIDER = FL_VERT_BROWSER_SLIDER | FL_HOR_FLAG
""""""
# The following are for use with scrollbars only!
# for FL_VERT_SCROLLBAR and FL_HOR_SCROLLBAR
FL_VERT_BROWSER_SLIDER2 = FL_VERT_SLIDER | FL_SCROLL_FLAG
""""""
FL_HOR_BROWSER_SLIDER2 = FL_HOR_SLIDER | FL_SCROLL_FLAG
""""""
# for FL_VERT_THIN_SCROLLBAR and FL_VERT_THIN_SCROLLBAR
FL_VERT_THIN_SLIDER = FL_VERT_FILL_SLIDER | FL_SCROLL_FLAG
""""""
FL_HOR_THIN_SLIDER = FL_HOR_FILL_SLIDER | FL_SCROLL_FLAG
""""""
# for FL_VERT_NICE_SCROLLBAR and FL_HOR_NICE_SCROLLBAR
FL_VERT_THIN_SLIDER = FL_VERT_FILL_SLIDER | FL_SCROLL_FLAG
""""""
FL_HOR_THIN_SLIDER = FL_HOR_FILL_SLIDER | FL_SCROLL_FLAG
""""""
# for FL_VERT_NICE_SCROLLBAR and FL_HOR_NICE_SCROLLBAR
FL_VERT_NICE_SLIDER2 = FL_VERT_NICE_SLIDER | FL_SCROLL_FLAG
""""""
FL_HOR_NICE_SLIDER2 = FL_HOR_NICE_SLIDER | FL_SCROLL_FLAG
""""""
# for use as FL_VERT_PLAIN_SCROLLBAR and FL_VERT_PLAIN_SCROLLBAR
FL_VERT_BASIC_SLIDER = FL_VERT_BROWSER_SLIDER | FL_SCROLL_FLAG
""""""
FL_HOR_BASIC_SLIDER = FL_HOR_BROWSER_SLIDER | FL_SCROLL_FLAG
""""""

# list of possible values - my add --LK
SLIDERTYPE_list = [FL_VERT_SLIDER, FL_HOR_SLIDER, FL_VERT_FILL_SLIDER, \
                   FL_HOR_FILL_SLIDER, FL_VERT_NICE_SLIDER, \
                   FL_HOR_NICE_SLIDER, FL_VERT_BROWSER_SLIDER, \
                   FL_HOR_BROWSER_SLIDER, FL_VERT_BROWSER_SLIDER2, \
                   FL_HOR_BROWSER_SLIDER2, FL_VERT_THIN_SLIDER, \
                   FL_HOR_THIN_SLIDER, FL_VERT_THIN_SLIDER, \
                   FL_HOR_THIN_SLIDER, FL_VERT_NICE_SLIDER2, \
                   FL_HOR_NICE_SLIDER2, FL_VERT_BASIC_SLIDER, \
                   FL_HOR_BASIC_SLIDER]


# Defaults
FL_SLIDER_BW1 = FL_BOUND_WIDTH
FL_SLIDER_BW2 = 0             #FL_abs(FL_BOUND_WIDTH) - 1
FL_SLIDER_BOXTYPE = FL_DOWN_BOX
FL_SLIDER_COL1 = FL_COL1
FL_SLIDER_COL2 = FL_COL1
FL_SLIDER_LCOL = FL_LCOL
FL_SLIDER_ALIGN = FL_ALIGN_BOTTOM

# Others
FL_SLIDER_FINE = 0.25
FL_SLIDER_WIDTH = 0.10




##########################
# forms.h (spinner.h)
##########################


# values for enumeration 'FL_SPINNER_TYPE'
FL_SPINNER_TYPE = cty.c_int # enum
FL_INT_SPINNER = 0
""""""
FL_FLOAT_SPINNER = 1
""""""

# list of possible values - my add --LK
SPINNERTYPE_list = [FL_INT_SPINNER, FL_FLOAT_SPINNER]




########################
# forms.h (tabfolder.h)
########################

# values for unnamed enumeration
FL_TOP_TABFOLDER = 0        # tab on top
""""""
FL_BOTTOM_TABFOLDER = 1
""""""
FL_LEFT_TABFOLDER = 2
""""""
FL_RIGHT_TABFOLDER = 3
""""""
FL_NORMAL_TABFOLDER = FL_TOP_TABFOLDER
""""""

# list of possible values - my add --LK
TABFOLDERTYPE_list = [FL_TOP_TABFOLDER, FL_BOTTOM_TABFOLDER, FL_LEFT_TABFOLDER, \
                  FL_RIGHT_TABFOLDER, FL_NORMAL_TABFOLDER]


# values for unnamed enumeration
FL_NO = 0
""""""
FL_FIT = 1
""""""
FL_ENLARGE_ONLY = 2
""""""



#########################
# forms.h (thumbwheel.h)
#########################

# values for unnamed enumeration
FL_VERT_THUMBWHEEL = 0
""""""
FL_HOR_THUMBWHEEL = 1
""""""

# list of possible values - my add --LK
THUMBWHEELTYPE_list = [FL_VERT_THUMBWHEEL, FL_HOR_THUMBWHEEL]


# defaults
FL_THUMBWHEEL_COL1 = FL_COL1
FL_THUMBWHEEL_COL2 = FL_COL1
FL_THUMBWHEEL_LCOL = FL_BLACK
FL_THUMBWHEEL_BOXTYPE = FL_BORDER_BOX
FL_THUMBWHEEL_ALIGN = FL_ALIGN_BOTTOM




######################
# forms.h (timer.h)
# Timer object class
######################

# values for enumeration 'FL_TIMER_TYPE'
FL_TIMER_TYPE = cty.c_int # enum
FL_NORMAL_TIMER = 0
"""Visible, Shows a label in a box which blinks when the timer expires."""
FL_VALUE_TIMER = 1
"""Visible, showing the time left or the elapsed time. Blinks if the
timer expires."""
FL_HIDDEN_TIMER = 2
"""Not visible."""

# list of possible values - my add --LK
TIMERTYPE_list = [FL_NORMAL_TIMER, FL_VALUE_TIMER, FL_HIDDEN_TIMER]


# Defaults
FL_TIMER_BOXTYPE = FL_DOWN_BOX
FL_TIMER_COL1 = FL_COL1
FL_TIMER_COL2 = FL_RED
FL_TIMER_LCOL = FL_LCOL
FL_TIMER_ALIGN = FL_ALIGN_CENTER

# Others
FL_TIMER_BLINKRATE = 0.2


FL_TIMER_FILTER = cty.CFUNCTYPE(STRING, cty.POINTER(FL_OBJECT),
                                cty.c_double)







###############################
# forms.h (xyplot.h)
###############################

# values for enumeration 'FL_XYPLOT_TYPE'
FL_XYPLOT_TYPE = cty.c_int # enum
FL_NORMAL_XYPLOT = 0    # solid line
""""""
FL_SQUARE_XYPLOT = 1    # with added square
""""""
FL_CIRCLE_XYPLOT = 2    # with added circle
""""""
FL_FILL_XYPLOT = 3      # fill completely
""""""
FL_POINTS_XYPLOT = 4    # only data points
""""""
FL_DASHED_XYPLOT = 5    # dashed line
""""""
FL_IMPULSE_XYPLOT = 6
""""""
FL_ACTIVE_XYPLOT = 7    # accepts interactive manipulations
""""""
FL_EMPTY_XYPLOT = 8
""""""
FL_DOTTED_XYPLOT = 9
""""""
FL_DOTDASHED_XYPLOT = 10
""""""
FL_LONGDASHED_XYPLOT = 11
""""""
FL_LINEPOINTS_XYPLOT = 12   # line & points
""""""

# list of possible values - my add --LK
XYPLOTTYPE_list = [FL_NORMAL_XYPLOT, FL_SQUARE_XYPLOT, FL_CIRCLE_XYPLOT, \
                   FL_FILL_XYPLOT, FL_POINTS_XYPLOT, FL_DASHED_XYPLOT, \
                   FL_IMPULSE_XYPLOT, FL_ACTIVE_XYPLOT, FL_EMPTY_XYPLOT , \
                   FL_DOTTED_XYPLOT, FL_DOTDASHED_XYPLOT, \
                   FL_LONGDASHED_XYPLOT, FL_LINEPOINTS_XYPLOT]


# values for unnamed enumeration
FL_LINEAR = 0
""""""
FL_LOG = 1
""""""

# values for unnamed enumeration
FL_GRID_NONE  = 0
""""""
FL_GRID_MAJOR = 1
""""""
FL_GRID_MINOR = 2
""""""

# Defaults
FL_XYPLOT_BOXTYPE = FL_FLAT_BOX
FL_XYPLOT_COL1 = FL_COL1
FL_XYPLOT_LCOL = FL_LCOL
FL_XYPLOT_ALIGN = FL_ALIGN_BOTTOM
FL_MAX_XYPLOTOVERLAY = 32


FL_XYPLOT_SYMBOL = cty.CFUNCTYPE(None, cty.POINTER(FL_OBJECT), cty.c_int,
            cty.POINTER(FL_POINT), cty.c_int, cty.c_int, cty.c_int)




#########################
# flimage.h
# Image related routines
#########################

# values for unnamed enumeration
FL_IMAGE_NONE = 0
""""""
FL_IMAGE_MONO = 1           # b&w. 1bit. 0=white 1=black
""""""
FL_IMAGE_GRAY = 2           # 8 bit gray image
""""""
FL_IMAGE_CI = 4             # colormmaped image
""""""
FL_IMAGE_RGB = 8            # RGBA image. 8bit each
""""""
FL_IMAGE_PACKED = 16        # RGBA packed into an int
""""""
FL_IMAGE_GRAY16 = 32        # 12bit gray scale image
""""""
FL_IMAGE_RGB16 = 64         # 36bits color image
""""""
FL_IMAGE_FLEX = 1023        # all formats
""""""
# aliases
FLIMAGE_NONE = FL_IMAGE_NONE
""""""
FLIMAGE_MONO = FL_IMAGE_MONO
""""""
FLIMAGE_GRAY = FL_IMAGE_GRAY
""""""
FLIMAGE_CI = FL_IMAGE_CI
""""""
FLIMAGE_RGB = FL_IMAGE_RGB
""""""
FLIMAGE_PACKED = FL_IMAGE_PACKED
""""""
FLIMAGE_GRAY16 = FL_IMAGE_GRAY16
""""""
FLIMAGE_RGB16 = FL_IMAGE_RGB16
""""""
FLIMAGE_FLEX = FL_IMAGE_FLEX
""""""

# my add --LK - list of possible values
FLIMAGETYPE_list = [FL_IMAGE_NONE, FL_IMAGE_MONO, FL_IMAGE_GRAY, \
                    FL_IMAGE_CI, FL_IMAGE_RGB, FL_IMAGE_PACKED, \
                    FL_IMAGE_GRAY16, FL_IMAGE_RGB16, FL_IMAGE_FLEX, \
                    FLIMAGE_NONE, FLIMAGE_MONO, FLIMAGE_GRAY, \
                    FLIMAGE_CI, FLIMAGE_RGB, FLIMAGE_PACKED, \
                    FLIMAGE_GRAY16, FLIMAGE_RGB16, FLIMAGE_FLEX]


FL_LUTBITS = 12         # max colormap bits. 4096 entries

# values for unnamed enumeration
FLIMAGE_AUTOCOLOR = 0x7fffffff
""""""
FLIMAGE_BADCOLOR = FLIMAGE_AUTOCOLOR
""""""

FL_WINDOW = Window    # cty.c_ulong


class flimage_text_(cty.Structure):
    pass
flimage_text_._fields_ = [
    ('str', STRING),            # the string itself
    ('len', cty.c_int),             # string length
    ('x', cty.c_int),               # starting location of text (wrt image)
    ('y', cty.c_int),
    ('color', cty.c_uint),          # color of the text
    ('bcolor', cty.c_uint),         # background color of the text
    ('nobk', cty.c_int),            # no background
    ('size', cty.c_int),            # font size & style
    ('style', cty.c_int),
    ('angle', cty.c_int),           # in 1/10th of a degrees
    ('align', cty.c_int),           # alignment wrt to (x,y)
]
FLIMAGE_TEXT = flimage_text_


class flimage_marker_(cty.Structure):
    pass
flimage_marker_._fields_ = [
    ('name', STRING),           # marker name
    ('w', cty.c_int),               # size
    ('h', cty.c_int),
    ('x', cty.c_int),               # location
    ('y', cty.c_int),
    ('color', cty.c_uint),          # color of the marker
    ('bcolor', cty.c_uint),         # aux. color of the marker
    ('angle', cty.c_int),           # in 1/10th of a degree
    ('fill', cty.c_int),
    ('thickness', cty.c_int),       # line thickness
    ('style', cty.c_int),           # line style
    # the following is filled by the library
    ('display', cty.c_void_p),
    ('gc', cty.c_void_p),
    ('win', FL_WINDOW),
    ('psdraw', STRING),
]
FLIMAGE_MARKER = flimage_marker_

FLIMAGE_REPFREQ = 0x1f   # report every 32 lines


class flimage_setup_(cty.Structure):
    pass

FLIMAGESETUP = cty.POINTER(flimage_setup_)


# possible errors from the library. Not currently (v0.89) used
# values for unnamed enumeration
FLIMAGE_ERR_NONE = 0
""""""
FLIMAGE_ERR_ALLOC = -50         # allocation error
""""""
FLIMAGE_ERR_INVALID = -49       # invalid image
""""""
FLIMAGE_ERR_ARGUMENT = -48      # bad argument/request
""""""
FLIMAGE_ERR_FILE = -47          # io error
""""""
FLIMAGE_ERR_INTERNAL = -46      # bugs
""""""
FLIMAGE_ERR_UNKNOWN = -45
""""""


class flimage_(cty.Structure):
    pass
flimage_._fields_ = [
    ('type', cty.c_int),            # image type
    ('w', cty.c_int),               # image size
    ('h', cty.c_int),
    ('app_data', cty.c_void_p),     # for application at setup time
    ('u_vdata', cty.c_void_p),      # for application
    ('u_ldata', cty.c_long),        # for application
    ('red', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('green', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('blue', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('alpha', cty.POINTER(cty.POINTER(cty.c_ubyte))),
    ('rgba', cty.POINTER(cty.POINTER(cty.c_ubyte)) * 4),    # alias
    ('ci', cty.POINTER(cty.POINTER(cty.c_ushort))),
    ('gray', cty.POINTER(cty.POINTER(cty.c_ushort))),
    ('packed', cty.POINTER(cty.POINTER(FL_PACKED4))),
    ('red16', cty.POINTER(cty.POINTER(cty.c_ushort))),  # not currently supported
    ('green16', cty.POINTER(cty.POINTER(cty.c_ushort))),  #not currently supported
    ('blue16', cty.POINTER(cty.POINTER(cty.c_ushort))),  # not currently supported
    ('alpha16', cty.POINTER(cty.POINTER(cty.c_ushort))),  # not currently supported
    ('ci8', cty.POINTER(cty.POINTER(cty.c_ubyte))), # not currently supported
    ('red_lut', cty.POINTER(cty.c_int)),        # red lookup tables
    ('green_lut', cty.POINTER(cty.c_int)),      # green lookup tables
    ('blue_lut', cty.POINTER(cty.c_int)),       # blue lookup tables
    ('alpha_lut', cty.POINTER(cty.c_int)),      # alpha lookup tables
    ('lut', cty.POINTER(cty.c_int) * 4),        # alias
    ('map_len', cty.c_int),                 # lut length
    ('colors', cty.c_int),                  # actual colors used in displaying
    ('gray_maxval', cty.c_int),             # indicate the range of gray16
    ('ci_maxval', cty.c_int),               # max value of ci. not used, use map_len
    ('rgb_maxval', cty.c_int),              # max value for rgb16 image
    ('level', cty.c_int),
    ('wwidth', cty.c_int),
    ('wlut', cty.POINTER(cty.c_ushort)),        # lut for window levelling
    ('wlut_len', cty.c_int),
    ('app_background', cty.c_int),          # transparent color, in RGB
    ('comments', STRING),
    ('comments_len', cty.c_int),
    ('available_type', cty.c_int),
    ('next', cty.POINTER(flimage_)),
    ('sx', cty.c_int),                      # display subimage origin
    ('sy', cty.c_int),
    ('sw', cty.c_int),                      # display subimage width
    ('sh', cty.c_int),
    ('wx', cty.c_int),              # display location relative to win
    ('wy', cty.c_int),
    ('modified', cty.c_int),
    ('display', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_), FL_WINDOW)),
    ('double_buffer', cty.c_int),
    ('sxd', cty.c_int),
    ('syd', cty.c_int),
    ('swd', cty.c_int),
    ('shd', cty.c_int),
    ('wxd', cty.c_int),
    ('wyd', cty.c_int),
    ('fmt_name', STRING),       # format name (ppm,jpg etc)
    # annotation stuff
    ('text', cty.POINTER(FLIMAGE_TEXT)),
    ('ntext', cty.c_int),
    ('max_text', cty.c_int),
    ('dont_display_text', cty.c_int),
    ('display_text', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('free_text', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('marker', cty.POINTER(FLIMAGE_MARKER)),
    ('nmarkers', cty.c_int),
    ('max_markers', cty.c_int),
    ('dont_display_marker', cty.c_int),
    ('display_markers', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('free_markers', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    # physicalValue = poffset + pixelValue * pscale
    ('pmin', cty.c_double),         # physical data range
    ('pmax', cty.c_double),
    ('poffset', cty.c_double),
    ('pscale', cty.c_double),
    #  pixel grid distance
    ('xdist_offset', cty.c_double),
    ('xdist_scale', cty.c_double),
    ('ydist_offset', cty.c_double),
    ('ydist_scale', cty.c_double),
    ('infile', STRING),
    ('outfile', STRING),
    ('foffset', cty.c_long),
    ('original_type', cty.c_int),
    # hooks for application to have a chance to set some options.
    # if pre_write returns -1, the output will be canceled
    ('pre_write', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('post_write', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    # image processing stuff
    ('subx', cty.c_int),        # subimage origin
    ('suby', cty.c_int),
    ('subw', cty.c_int),        # subimage size
    ('subh', cty.c_int),
    ('sub_shape', cty.c_int),   # shape of the subimage
    ('fill_color', cty.c_uint),     # fill color
    ('force_convert', cty.c_int),
    ('llut', cty.POINTER(cty.c_int) * 3),   # linear lut
    ('llut_len', cty.c_int),
    ('hist', cty.POINTER(cty.c_uint) * 4),
    # application handlers
    ('total', cty.c_int),
    ('completed', cty.c_int),
    ('visual_cue', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_), STRING)),
    ('error_message', cty.CFUNCTYPE(None, cty.POINTER(flimage_), STRING)),
    ('error_code', cty.c_int),      # not currently used
    ('display_type', cty.c_int),    # just before handing it to X
    ('pixels', cty.POINTER(cty.POINTER(cty.c_ushort))),
    ('image_spec', cty.c_void_p),   # additional image info
    ('xdisplay', cty.c_void_p),     # the X connection
    ('tran_rgb', cty.c_int),        # RGB color that should be transparent
    ('tran_index', cty.c_int),      # index that should be transparent
    ('matr', cty.c_int),
    ('matc', cty.c_int),
    # multi-frame images
    ('more', cty.c_int),
    ('current_frame', cty.c_int),
    ('total_frames', cty.c_int),
    ('next_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('prev_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('random_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_), cty.c_int)),
    ('rewind_frame', cty.CFUNCTYPE(cty.c_int, cty.POINTER(flimage_))),
    ('cleanup', cty.CFUNCTYPE(None, cty.POINTER(flimage_))),
    ('stop_looping', cty.c_int),
    # the following are for internal use
    ('fpin', cty.POINTER(FILE)),
    ('fpout', cty.POINTER(FILE)),
    ('image_io', cty.c_void_p),
    ('io_spec', cty.c_void_p),      # io operation helper
    ('spec_size', cty.c_int),
    ('depth', cty.c_int),           # the depth we actually use
    ('vclass', cty.c_int),
    ('visual', cty.c_void_p),
    ('xcolormap', cty.c_ulong),
    ('rgb2p', FL_RGB2PIXEL_),
    ('ximage', cty.c_void_p),
    ('win', FL_WINDOW),
    ('gc', cty.c_void_p),
    ('sdepth', cty.c_int),          # depth the server says
    ('textgc', cty.c_void_p),
    ('markergc', cty.c_void_p),
    ('extra_io_info', cty.c_void_p),
    ('pixmap', cty.c_ulong),
    ('pixmap_w', cty.c_int),
    ('pixmap_h', cty.c_int),
    ('pixmap_depth', cty.c_int),
    ('isPixmap', cty.c_int),
    ('setup', FLIMAGESETUP),
    ('info', STRING),
]

FL_IMAGE = flimage_


# some configuration stuff

flimage_setup_._fields_ = [
    ('app_data', cty.c_void_p),
    ('visual_cue', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE), STRING)),
    ('error_message', cty.CFUNCTYPE(None, cty.POINTER(FL_IMAGE), STRING)),
    ('display', cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE), cty.c_ulong)),
    ('rgbfile', STRING),
    ('do_not_clear', cty.c_int),
    ('xdisplay', cty.c_void_p),
    ('max_frames', cty.c_int),
    ('delay', cty.c_int),
    ('no_auto_extension', cty.c_int),
    ('report_frequency', cty.c_int),
    ('double_buffer', cty.c_int),
    # internal use
    ('trailblazer', cty.c_ulong),
    ('header_info', cty.c_int),
]

FLIMAGE_SETUP = flimage_setup_


# output options

class FLIMAGE_JPEG_OPTION(cty.Structure):
    pass
FLIMAGE_JPEG_OPTION._fields_ = [
    ('quality', cty.c_int),
    ('smoothing', cty.c_int),
]


# values for unnamed enumeration
FLIMAGE_WRITABLE = FL_WRITE
""""""
FLIMAGE_READABLE = FL_READ
""""""


class FLIMAGE_FORMAT_INFO(cty.Structure):
    pass
FLIMAGE_FORMAT_INFO._fields_ = [
    ('formal_name', STRING),
    ('short_name', STRING),
    ('extension', STRING),
    ('type', cty.c_int),
    ('read_write', cty.c_int),
    ('annotation', cty.c_int),
]


# simple image processing routines

FLIMAGE_SHARPEN = cty.pointer(cty.pointer(cty.c_int(-1)))
#FLIMAGE_SHARPEN = cty.c_int(-1)
FLIMAGE_SMOOTH = cty.pointer(cty.pointer(cty.c_int(-2)))
#FLIMAGE_SMOOTH = cty.c_int(-2)
FL_SMOOTH = FLIMAGE_SMOOTH
FL_SHARPEN = FLIMAGE_SHARPEN

# values for unnamed enumeration
FLIMAGE_NOSUBPIXEL = 0      # scale with no subpixel sampling
""""""
FLIMAGE_SUBPIXEL = 1        # scale with  subpixel sampling
""""""
FLIMAGE_CENTER = 2          # center warped image. default
""""""
FLIMAGE_RIGHT = 8           # flush right the warped image
""""""
FLIMAGE_ASPECT = 32         # fit the size
""""""
FLIMAGE_NOCENTER = FL_ALIGN_LEFT_TOP
""""""


# /usr/include/X11/Xlib.h 345
class XWindowAttributes(cty.Structure):
    pass


# /usr/include/X11/Xlib.h 176
class XExtCodes(cty.Structure):
    pass
XExtCodes._fields_ = [
    ('extension', cty.c_int),
    ('major_opcode', cty.c_int),
    ('first_event', cty.c_int),
    ('first_error', cty.c_int),
]


# /usr/include/X11/Xlib.h 186
class XPixmapFormatValues(cty.Structure):
    pass
XPixmapFormatValues._fields_ = [
    ('depth', cty.c_int),
    ('bits_per_pixel', cty.c_int),
    ('scanline_pad', cty.c_int),
]

# /usr/include/X11/Xlib.h 218
class XGCValues(cty.Structure):
    pass
XGCValues._fields_ = [
    ('function', cty.c_int),
    ('plane_mask', cty.c_ulong),
    ('foreground', cty.c_ulong),
    ('background', cty.c_ulong),
    ('line_width', cty.c_int),
    ('line_style', cty.c_int),
    ('cap_style', cty.c_int),
    ('join_style', cty.c_int),
    ('fill_style', cty.c_int),
    ('fill_rule', cty.c_int),
    ('arc_mode', cty.c_int),
    ('tile', Pixmap),
    ('stipple', Pixmap),
    ('ts_x_origin', cty.c_int),
    ('ts_y_origin', cty.c_int),
    ('font', Font),
    ('subwindow_mode', cty.c_int),
    ('graphics_exposures', cty.c_int),
    ('clip_x_origin', cty.c_int),
    ('clip_y_origin', cty.c_int),
    ('clip_mask', Pixmap),
    ('dash_offset', cty.c_int),
    ('dashes', cty.c_char),
]


# /usr/include/X11/Xlib.h 258
class Depth(cty.Structure):
    pass
Depth._fields_ = [
    ('depth', cty.c_int),
    ('nvisuals', cty.c_int),
    ('visuals', cty.POINTER(Visual)),
]

# /usr/include/X11/Xlib.h 286
class Screen(cty.Structure):
    pass
Screen._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('display', cty.POINTER(_XDisplay)),
    ('root', Window),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('mwidth', cty.c_int),
    ('mheight', cty.c_int),
    ('ndepths', cty.c_int),
    ('depths', cty.POINTER(Depth)),
    ('root_depth', cty.c_int),
    ('root_visual', cty.POINTER(Visual)),
    ('default_gc', GC),
    ('cmap', Colormap),
    ('white_pixel', cty.c_ulong),
    ('black_pixel', cty.c_ulong),
    ('max_maps', cty.c_int),
    ('min_maps', cty.c_int),
    ('backing_store', cty.c_int),
    ('save_unders', cty.c_int),
    ('root_input_mask', cty.c_long),
]


# /usr/include/X11/Xlib.h 296
class ScreenFormat(cty.Structure):
    pass
ScreenFormat._fields_ = [
    ('ext_data', cty.POINTER(XExtData)),
    ('depth', cty.c_int),
    ('bits_per_pixel', cty.c_int),
    ('scanline_pad', cty.c_int),
]

XWindowAttributes._fields_ = [
    ('x', cty.c_int),
    ('y', cty.c_int),
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('border_width', cty.c_int),
    ('depth', cty.c_int),
    ('visual', cty.POINTER(Visual)),
    ('root', Window),
    ('c_class', cty.c_int),
    ('bit_gravity', cty.c_int),
    ('win_gravity', cty.c_int),
    ('backing_store', cty.c_int),
    ('backing_planes', cty.c_ulong),
    ('backing_pixel', cty.c_ulong),
    ('save_under', cty.c_int),
    ('colormap', Colormap),
    ('map_installed', cty.c_int),
    ('map_state', cty.c_int),
    ('all_event_masks', cty.c_long),
    ('your_event_mask', cty.c_long),
    ('do_not_propagate_mask', cty.c_long),
    ('override_redirect', cty.c_int),
    ('screen', cty.POINTER(Screen)),
]


# /usr/include/X11/Xlib.h 356
class XHostAddress(cty.Structure):
    pass
XHostAddress._fields_ = [
    ('family', cty.c_int),
    ('length', cty.c_int),
    ('address', STRING),
]


# /usr/include/X11/Xlib.h 366
class XServerInterpretedAddress(cty.Structure):
    pass
XServerInterpretedAddress._fields_ = [
    ('typelength', cty.c_int),
    ('valuelength', cty.c_int),
    ('type', STRING),
    ('value', STRING),
]


# /usr/include/X11/Xlib.h 371
class _XImage(cty.Structure):
    pass


# /usr/include/X11/Xlib.h 387
class funcs(cty.Structure):
    pass
funcs._fields_ = [
    ('create_image', cty.CFUNCTYPE(cty.POINTER(_XImage),
    cty.POINTER(_XDisplay), cty.POINTER(Visual), cty.c_uint, cty.c_int,
    cty.c_int, STRING, cty.c_uint, cty.c_uint, cty.c_int, cty.c_int)),
    ('destroy_image', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XImage))),
    ('get_pixel', cty.CFUNCTYPE(cty.c_ulong, cty.POINTER(_XImage), cty.c_int,
     cty.c_int)),
    ('put_pixel', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XImage), cty.c_int,
    cty.c_int, cty.c_ulong)),
    ('sub_image', cty.CFUNCTYPE(cty.POINTER(_XImage), cty.POINTER(_XImage),
    cty.c_int, cty.c_int, cty.c_uint, cty.c_uint)),
    ('add_pixel', cty.CFUNCTYPE(cty.c_int, cty.POINTER(_XImage), cty.c_long)),
]


_XImage._fields_ = [
    ('width', cty.c_int),
    ('height', cty.c_int),
    ('xoffset', cty.c_int),
    ('format', cty.c_int),
    ('data', STRING),
    ('byte_order', cty.c_int),
    ('bitmap_unit', cty.c_int),
    ('bitmap_bit_order', cty.c_int),
    ('bitmap_pad', cty.c_int),
    ('depth', cty.c_int),
    ('bytes_per_line', cty.c_int),
    ('bits_per_pixel', cty.c_int),
    ('red_mask', cty.c_ulong),
    ('green_mask', cty.c_ulong),
    ('blue_mask', cty.c_ulong),
    ('obdata', XPointer),
    ('f', funcs),
]
XImage = _XImage


FLIMAGE_Identify = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FILE))
FLIMAGE_Description = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))
FLIMAGE_Read_Pixels = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))
FLIMAGE_Write_Image = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_IMAGE))


