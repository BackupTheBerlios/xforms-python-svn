#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage select objects.
"""

#    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
#    e-mail: <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata


#####################
# forms.h (select.h)
#####################

# Select object types

# fl_create_select function placeholder (internal)


def fl_add_select(selecttype, x, y, w, h, label):
    """fl_add_select(selecttype, x, y, w, h, label)
    
    Adds a select (new generation choice) object to the form. It is a
    rather simple object that allows the user to pick alternatives from a
    linear list that pops up when he clicks on the object. It remembers the
    last selected item, which is also shown on top of the select object. It
    internally uses a popup.

    Parameters
    ----------
        selecttype : int
            type of select to be added. Values (from xfdata.py) 
            FL_NORMAL_SELECT, FL_MENU_SELECT, FL_DROPLIST_SELECT
        x : int
            horizontal position (upper-left corner)
        y : int
            vertical position (upper-left corner)
        w : int
            width in coord units
        h : int
            height in coord units
        label : str
            text label of select

    Returns
    -------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object added

    Examples
    --------
        >>> selobj = fl_add_select(xfdata.FL_NORMAL_SELECT,
                120, 140, 250, 250, "MySelect")

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_add_select = library.cfuncproto(
        library.load_so_libforms(), "fl_add_select",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_select(int p1, FL_Coord p2, FL_Coord p3,
           FL_Coord p4, FL_Coord p5, const char * p6)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(selecttype, \
            xfdata.SELECTTYPE_list)
    iselecttype = library.convert_to_int(selecttype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(selecttype, x, y, w, h, label, iselecttype, \
            ix, iy, iw, ih, slabel)
    retval = _fl_add_select(iselecttype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_select(pFlObject):
    """fl_clear_select(pFlObject)
    
    Removes all items from a select object. If you used
    fl_set_select_popup() to set a popup for the select object then that
    popup gets deleted automatically on calling fl_clear_select(). The
    values automatically associated with items when calling
    fl_add_select_items() will start at 0 again.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object

    Returns
    -------
        num. : int
            *todo*

    Examples
    --------
        >>> fl_clear_select(selobj)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_clear_select = library.cfuncproto(
        library.load_so_libforms(), "fl_clear_select",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_clear_select(FL_OBJECT * p1)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_clear_select(pFlObject)


def fl_add_select_items(pFlObject, entryitems_txt):
    """fl_add_select_items(pFlObject, entryitems_txt)
    Adds one or more items to a select object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object
        entryitems_txt : str
            text of the entry to be added and in-text special sequences with
            or without not separated additional arguments (if needed). Text
            may contain | to separate entries and newline characters which
            allows to create entries that span more than a single line. Only
            some special sequences are allowed: %x, %u, %f, %E, %L, %d, %h,
            %S, %s, %% (other combinations do not make sense here). *todo* to be
            verified!

    Returns
    -------
        pPopupEntry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry 

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: HalfTested + NoDoc + Demo = NOT OK (sequence param.)
        See: Special sequences in entry text documentation.

    """
    _fl_add_select_items = library.cfuncproto(
        library.load_so_libforms(), "fl_add_select_items",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT),
        xfdata.STRING],
        """FL_POPUP_ENTRY * fl_add_select_items(FL_OBJECT * p1,
           const char * p2, ...)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    sentryitems_txt = library.convert_to_string(entryitems_txt)
    library.keep_elem_refs(pFlObject, entryitems_txt, sentryitems_txt)
    retval = _fl_add_select_items(pFlObject, sentryitems_txt)
    return retval
#      entryitems_txtlst : list_of_str_and_any_type
#        list representing the text of the entry to be added and in-text
#        special sequences with or without separate or not separated additional
#        arguments (if needed). Text may contain | to separate entries and
#        newline characters which allows to create entries that span more than
#        a single line. Only some special sequences are allowed: %x, %u, %f,
#        %E, %L, %d, %h, %S, %s, %% (other combinations do not make sense here).
#        Up to 20 additional separated arguments are supported in xforms-python
#        currently, only.
#   _fl_add_select_items = library.cfuncproto(
#        library.load_so_libforms(), "fl_add_select_items",
#        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT),
#        xfdata.STRING, cty.c_void_p, cty.c_void_p, cty.c_void_p, cty.c_void_p,
#        cty.c_void_p, cty.c_void_p, cty.c_void_p, cty.c_void_p, cty.c_void_p,
#        cty.c_void_p, cty.c_void_p, cty.c_void_p, cty.c_void_p, cty.c_void_p,
#        cty.c_void_p, cty.c_void_p, cty.c_void_p, cty.c_void_p, cty.c_void_p,
#        cty.c_void_p],
#        """FL_POPUP_ENTRY * fl_add_select_items(FL_OBJECT * p1,
#           const char * p2, ...)""")
#    library.check_if_initialized()
#    library.verify_flobjectptr_type(pFlObject)
#    # first str + 20 additional args max
#    tmpentryitems_txtlst, finalentryitems_txtlst = \
#        library.create_argslist_for_entrytxt(entryitems_txtlst, 21)
#    library.keep_elem_refs(pFlObject, entryitems_txtlst, tmpentryitems_txtlst, \
#                        finalentryitems_txtlst)
#    retval = _fl_add_select_items(pFlObject, *finalentryitems_txtlst)
#    return retval


def fl_insert_select_items(pFlObject, pPopupEntry, entryitems_txt):
    """fl_insert_select_items(pFlObject, pPopupEntry, entryitems_txt)
    
    Inserts new items somewhere in the middle of a list of already
    existing items.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object
        pPopupEntry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry. If it is 'None' new items are inserted at the very
            start.
        entryitems_txt : str
            text of the entry to be added and in-text special sequences with
            or without not separated additional arguments (if needed). Text
            may contain | to separate entries and newline characters which
            allows to create entries that span more than a single line. Only
            some special sequences are allowed: %x, %u, %f, %E, %L, %d, %h,
            %S, %s (other combinations do not make sense here).

    Returns
    -------
        pPopupEntry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: HalfTested + NoDoc + Demo = NOT OK (special sequence)
        See: Special sequences in entry text documentation.

    """
    _fl_insert_select_items = library.cfuncproto(
        library.load_so_libforms(), "fl_insert_select_items",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_POPUP_ENTRY), xfdata.STRING],
        """FL_POPUP_ENTRY * fl_insert_select_items(FL_OBJECT * p1,
           FL_POPUP_ENTRY * p2, const char * p3, ...)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.verify_flpopupentryptr_type(pPopupEntry)
    sentryitems_txt = library.convert_to_string(entryitems_txt)
    library.keep_elem_refs(pFlObject, pPopupEntry, entryitems_txt, \
            sentryitems_txt)
    retval = _fl_insert_select_items(pFlObject, pPopupEntry, sentryitems_txt)
    return retval


def fl_replace_select_item(pFlObject, pPopupEntry, entryitems_txt):
    """fl_replace_select_item(pFlObject, pPopupEntry, entryitems_txt)
    
    Replaces an existing item of a select object with another.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object
        pPopupEntry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry
        entryitems_txt : str
            text of the entry to be added and in-text special sequences with
            or without not separated additional arguments (if needed). Text
            may contain | to separate entries and newline characters which
            allows to create entries that span more than a single line. Only
            some special sequences are allowed: %x, %u, %f, %E, %L, %d, %h,
            %S, %s (other combinations do not make sense here).

    Returns
    -------
        pPopupEntry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK
        See: Special sequences in entry text documentation.

    """
    _fl_replace_select_item = library.cfuncproto(
        library.load_so_libforms(), "fl_replace_select_item",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_POPUP_ENTRY), xfdata.STRING],
        """FL_POPUP_ENTRY * fl_replace_select_item(FL_OBJECT * p1,
            FL_POPUP_ENTRY * p2, const char * p3, ...)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.verify_flpopupentryptr_type(pPopupEntry)
    sentryitems_txt = library.convert_to_string(entryitems_txt)
    library.keep_elem_refs(pFlObject, pPopupEntry, entryitems_txt, \
                        sentryitems_txt)
    retval = _fl_replace_select_item(pFlObject, pPopupEntry, sentryitems_txt)
    return retval


def fl_delete_select_item(pFlObject, pPopupEntry):
    """fl_delete_select_item(pFlObject, pPopupEntry)
    
    Deletes an item of a select object. The values associated with items
    will not change due to removing an item.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object
        pPopupEntry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry

    Returns
    -------
        num. : int
            *todo*

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_delete_select_item = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_select_item",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_POPUP_ENTRY)],
        """int fl_delete_select_item(FL_OBJECT * p1, FL_POPUP_ENTRY * p2)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject, pPopupEntry)
    retval = _fl_delete_select_item(pFlObject, pPopupEntry)
    return retval


def fl_set_select_items(pFlObject, pPopupItem):
    """fl_set_select_items(pFlObject, pPopupItem)
    
    (Re)populates a select object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object
        pPopupItem : pointer to xfdata.FL_POPUP_ITEM
            popup item to be set. It can be prepared passing a dict (whose
            keys are corresponding to xfdata.FL_POPUP_ITEM's members) to
            xfstruct.make_flpopupitem function.

    Returns
    -------
        num. : int
            *todo*

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_select_items = library.cfuncproto(
        library.load_so_libforms(), "fl_set_select_items",
        cty.c_long, [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_POPUP_ITEM)],
        """long int fl_set_select_items(FL_OBJECT * p1,
           FL_POPUP_ITEM * p2)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.verify_flpopupitemptr_type(pPopupItem)
    library.keep_elem_refs(pFlObject, pPopupItem)
    retval = _fl_set_select_items(pFlObject, pPopupItem)
    return retval


def fl_get_select_popup(pFlObject):
    """fl_get_select_popup(pFlObject)
    
    Finds out which item of a select object is currently selected.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object

    Returns
    -------
        pPopup : pointer to xfdata.FL_POPUP
            popup class instance

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_get_select_popup = library.cfuncproto(
        library.load_so_libforms(), "fl_get_select_popup",
        cty.POINTER(xfdata.FL_POPUP), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_POPUP * fl_get_select_popup(FL_OBJECT * p1)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_select_popup(pFlObject)
    return retval


def fl_set_select_popup(pFlObject, pPopup):
    """fl_set_select_popup(pFlObject, pPopup)
    
    Creates a popup directly and then associates it with the select object.
    Supplied popup may not contain any entries other than those of type
    xfdata.FL_POPUP_NORMAL (and, of course, the popup cannot be a sub-popup
    of another popup).

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object
        pPopup : pointer to xfdata.FL_POPUP
            popup class instance

    Returns
    -------
        num. : int
            *todo*

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_select_popup = library.cfuncproto(
        library.load_so_libforms(), "fl_set_select_popup",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_POPUP)],
        """int fl_set_select_popup(FL_OBJECT * p1, FL_POPUP * p2)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.verify_flpopupptr_type(pPopup)
    library.keep_elem_refs(pFlObject, pPopup)
    retval = _fl_set_select_popup(pFlObject, pPopup)
    return retval


def fl_get_select_item(pFlObject):
    """fl_get_select_item(pFlObject)
    
    Obtains currently selected item of a select object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object

    Returns
    -------
        pPopupReturn : pointer to xfdata.FL_POPUP_RETURN
            popup return

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_get_select_item = library.cfuncproto(
        library.load_so_libforms(), "fl_get_select_item",
        cty.POINTER(xfdata.FL_POPUP_RETURN), [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_POPUP_RETURN * fl_get_select_item(FL_OBJECT * p1)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_select_item(pFlObject)
    return retval


def fl_set_select_item(pFlObject, pPopupEntry):
    """fl_set_select_item(pFlObject, pPopupEntry)
    
    Sets a new item of a select object as currently selected.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object
        pPopupEntry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry class instance

    Returns
    -------
        pPopupReturn : pointer to xfdata.FL_POPUP_RETURN
            popup return

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: HalfTested + NoDoc + Demo = NOT OK (FL_POPUP_ENTRY not
        prepared)

    """
    _fl_set_select_item = library.cfuncproto(
        library.load_so_libforms(), "fl_set_select_item",
        cty.POINTER(xfdata.FL_POPUP_RETURN), [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_POPUP_ENTRY)],
        """FL_POPUP_RETURN * fl_set_select_item(FL_OBJECT * p1,
           FL_POPUP_ENTRY * p2)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.verify_flpopupentryptr_type(pPopupEntry)
    library.keep_elem_refs(pFlObject, pPopupEntry)
    retval = _fl_set_select_item(pFlObject, pPopupEntry)
    return retval


def fl_get_select_item_by_value(pFlObject, value):
    """fl_get_select_item_by_value(pFlObject, value)
    
    Finds the first item of select object with the value associated with
    the item.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object
        value : long
            value of the select item.

    Returns
    -------
        pPopupEntry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry class instance, or None (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_select_item_by_value = library.cfuncproto(
        library.load_so_libforms(), "fl_get_select_item_by_value",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT),
        cty.c_long],
        """FL_POPUP_ENTRY * fl_get_select_item_by_value(FL_OBJECT * p1,
           long int p2)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    lvalue = library.convert_to_long(value)
    library.keep_elem_refs(pFlObject, value, lvalue)
    retval = _fl_get_select_item_by_value(pFlObject, lvalue)
    return retval


def fl_get_select_item_by_label(pFlObject, label):
    """fl_get_select_item_by_label(pFlObject, label)
    
    Finds out an item of select object who has a certain label as
    displayed for the item in the popup.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object
        label : str
            label of the item.

    Returns
    -------
        pPopupEntry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry class instance

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_get_select_item_by_label = library.cfuncproto(
        library.load_so_libforms(), "fl_get_select_item_by_label",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT),
        xfdata.STRING],
        """FL_POPUP_ENTRY * fl_get_select_item_by_label(FL_OBJECT * p1,
           const char * p2)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(pFlObject, label, slabel)
    retval = _fl_get_select_item_by_label(pFlObject, slabel)
    return retval


def fl_get_select_item_by_text(pFlObject, txtstr):
    """fl_get_select_item_by_text(pFlObject, txtstr)
    
    Finds out an item of select object who has supplied text (that might
    be the same as the label text in simple cases).

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object
        txtstr : str
            text of the item.

    Returns
    -------
        pPopupEntry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry class instance

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_select_item_by_text = library.cfuncproto(
        library.load_so_libforms(), "fl_get_select_item_by_text",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_OBJECT),
        xfdata.STRING],
        """FL_POPUP_ENTRY * fl_get_select_item_by_text(FL_OBJECT * p1,
           const char * p2)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    stxtstr = library.convert_to_string(txtstr)
    library.keep_elem_refs(pFlObject, txtstr, stxtstr)
    retval = _fl_get_select_item_by_text(pFlObject, stxtstr)
    return retval


def fl_get_select_text_color(pFlObject):
    """fl_get_select_text_color(pFlObject)
    
    Obtains the color of the text of the currenty selected item on top of
    the object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object

    Returns
    -------
        colr : long_pos
            color

    Examples
    --------
        >>> txtcolr = fl_get_select_text_color(selobj)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_select_text_color = library.cfuncproto(
        library.load_so_libforms(), "fl_get_select_text_color",
        xfdata.FL_COLOR, [cty.POINTER(xfdata.FL_OBJECT)],
        """FL_COLOR fl_get_select_text_color(FL_OBJECT * p1)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_select_text_color(pFlObject)
    return retval


def fl_set_select_text_color(pFlObject, colr):
    """fl_set_select_text_color(pFlObject, colr)
    
    Sets the color of the text of the currenty selected item on top of
    the object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object
        colr : long_pos
            color value

    Returns
    -------
        oldcolr : long_pos
            previous color

    Examples
    --------
        >>> oldcol = fl_set_select_text_color(selobj, xfdata.FL_BLUE)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_select_text_color = library.cfuncproto(
        library.load_so_libforms(), "fl_set_select_text_color",
        xfdata.FL_COLOR, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_COLOR],
        """FL_COLOR fl_set_select_text_color(FL_OBJECT * p1, FL_COLOR p2)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(pFlObject, colr, ulcolr)
    retval = _fl_set_select_text_color(pFlObject, ulcolr)
    return retval


def fl_get_select_text_font(pFlObject):
    """fl_get_select_text_font(pFlObject)
    
    Obtains the font style and size used for the text of a select object.

    Parameters
    ----------
      pFlObject : pointer to xfdata.FL_OBJECT
        select object

    Returns
    -------
        result : int
            0 or -1 (on failure)
        style : int
            font style
        size : int
            font size

    Examples
    --------
        >>> rslt, style, size = fl_get_select_text_font(selobj)

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_select_text_font(pFlObject, p2, p3)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_select_text_font = library.cfuncproto(
        library.load_so_libforms(), "fl_get_select_text_font",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """int fl_get_select_text_font(FL_OBJECT * p1, int * p2, int * p3)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    style, pstyle = library.make_int_and_pointer()
    size, psize = library.make_int_and_pointer()
    library.keep_elem_refs(pFlObject, style, pstyle, size, psize)
    retval = _fl_get_select_text_font(pFlObject, pstyle, psize)
    return retval, style.value, size.value


def fl_set_select_text_font(pFlObject, style, size):
    """fl_set_select_text_font(pFlObject, style, size)
    
    Sets the font style and size used for the text of a select object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object
        style : int
            text style. Values (from xfdata.py) FL_NORMAL_STYLE,
            FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE,
            FL_FIXED_STYLE, FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
            FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE, FL_TIMESBOLD_STYLE,
            FL_TIMESITALIC_STYLE, FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
            FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
            FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        size : int
            text size. Values (from xfdata.py) FL_TINY_SIZE, FL_SMALL_SIZE,
            FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE, FL_HUGE_SIZE,
            FL_DEFAULT_SIZE

    Returns
    -------
        result : int
            0, or -1 (on failure)

    Examples
    --------
        >>> rslt = fl_set_select_text_font(selobj,
                xfdata.FL_TIMESBOLD_STYLE, xfdata.FL_LARGE_SIZE)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_select_text_font = library.cfuncproto(
        library.load_so_libforms(), "fl_set_select_text_font",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """int fl_set_select_text_font(FL_OBJECT * p1, int p2, int p3)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    library.checknonfatal_allowed_value_in_list(size, xfdata.FONTSIZE_list)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    library.keep_elem_refs(pFlObject, style, size, istyle, isize)
    retval = _fl_set_select_text_font(pFlObject, istyle, isize)
    return retval


def fl_get_select_text_align(pFlObject):
    """fl_get_select_text_align(pFlObject)
    
    Obtains the alignment of the text with the currently selected item
    on top of the select object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object

    Returns
    -------
        align : int
            alignment

    Examples
    --------
        >>> algn = fl_get_select_text_align(selobj)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_select_text_align = library.cfuncproto(
        library.load_so_libforms(), "fl_get_select_text_align",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_select_text_align(FL_OBJECT * p1)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_select_text_align(pFlObject)
    return retval


def fl_set_select_text_align(pFlObject, align):
    """fl_set_select_text_align(pFlObject, align)
    
    Sets the alignment of the text with the currently selected item on
    top of the select object. The xfdata.FL_ALIGN_INSIDE flag should be set
    with align since the text always will be drawn withing the boundaries of
    the object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object
        align : int
            alignment of text. Values (from xfdata.py) FL_ALIGN_CENTER,
            FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
            FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP, FL_ALIGN_LEFT_BOTTOM,
            FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE, FL_ALIGN_VERT. Bitwise
            OR with FL_ALIGN_INSIDE is allowed.

    Returns
    -------
        oldalign : int
            old setting of alignment, or -1 (on errors)

    Examples
    --------
        >>> oldalgn = fl_set_select_text_align(selobj, xfdata.FL_ALIGN_TOP)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_select_text_align = library.cfuncproto(
        library.load_so_libforms(), "fl_set_select_text_align",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_select_text_align(FL_OBJECT * p1, int p2)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(align, xfdata.ALIGN_list)
    library.verify_flobjectptr_type(pFlObject)
    ialign = library.convert_to_int(align)
    library.keep_elem_refs(pFlObject, align, ialign)
    retval = _fl_set_select_text_align(pFlObject, ialign)
    return retval


def fl_set_select_policy(pFlObject, policy):
    """fl_set_select_policy(pFlObject, policy)
    
    Sets a policy of a select object. By default, the popup of a select
    objects remains shown when the user releases the mouse somewhere outside
    the popup window (or on its title area). The alternative is to close the
    popup immediately when the user releases the mouse, independent of where
    it is.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            select object
        policy : int
            popup policy to be set. Values (from xfdata.py)
            FL_POPUP_NORMAL_SELECT, FL_POPUP_DRAG_SELECT

    Returns
    -------
        oldpol : int
            previous policy setting, or -1 (on error)

    Examples
    --------
        >>> fl_set_select_policy(selobj, xfdata.FL_POPUP_NORMAL_SELECT)

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_set_select_policy = library.cfuncproto(
        library.load_so_libforms(), "fl_set_select_policy",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_select_policy(FL_OBJECT * p1, int p2)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(policy, xfdata.POPUPPOLICY_list)
    library.verify_flobjectptr_type(pFlObject)
    ipolicy = library.convert_to_int(policy)
    library.keep_elem_refs(pFlObject, policy, ipolicy)
    retval = _fl_set_select_policy(pFlObject, ipolicy)
    return retval

