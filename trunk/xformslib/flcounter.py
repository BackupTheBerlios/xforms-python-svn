#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
        <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.

    *****************************************************************


    @newfield example: Example, Example
"""


__docformat__ = "epytext en"    # to be used with epydoc doc


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata



######################
# forms.h (counter.h)
######################

# Routines

# fl_create_counter function placeholder (internal)


def fl_add_counter(countertype, x, y, w, h, label):
    """ fl_add_counter(countertype, x, y, w, h, label) -> pFlObject

        Adds a counter object.

        @param countertype: type of counter to be added
        @type countertype: [num./int] from xfdata module FL_NORMAL_COUNTER,
                           FL_SIMPLE_COUNTER
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of counter

        @status: Tested + NoDoc + Demo = OK
    """
    _fl_add_counter = library.cfuncproto(
        library.load_so_libforms(), "fl_add_counter",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_counter(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(countertype, xfdata.COUNTERTYPE_list)
    icountertype = library.convert_to_int(countertype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(countertype, x, y, w, h, label, icountertype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_counter(icountertype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_counter_value(pFlObject, val):
    """ fl_set_counter_value(pFlObject, val)

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_counter_value = library.cfuncproto(
            library.load_so_libforms(), "fl_set_counter_value",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double],
            """void fl_set_counter_value(FL_OBJECT * ob, double val)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fval = library.convert_to_double(val)
    library.keep_elem_refs(pFlObject, val, fval)
    _fl_set_counter_value(pFlObject, fval)


def fl_set_counter_bounds(pFlObject, minbound, maxbound):
    """ fl_set_counter_bounds(pFlObject, minbound, maxbound)

        @param pFlObject: pointer to counter object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_counter_bounds = library.cfuncproto(
            library.load_so_libforms(), "fl_set_counter_bounds",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_counter_bounds(FL_OBJECT * ob, double min,
               double max)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fminbound = library.convert_to_double(minbound)
    fmaxbound = library.convert_to_double(maxbound)
    library.keep_elem_refs(pFlObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_counter_bounds(pFlObject, fminbound, fmaxbound)


def fl_set_counter_step(pFlObject, s, l):
    """ fl_set_counter_step(pFlObject, s, l)

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_counter_step = library.cfuncproto(
            library.load_so_libforms(), "fl_set_counter_step",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
            """void fl_set_counter_step(FL_OBJECT * ob, double s, double l)
""")
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fs = library.convert_to_double(s)
    fl = library.convert_to_double(l)
    library.keep_elem_refs(pFlObject, s, l, fs, fl)
    _fl_set_counter_step(pFlObject, fs, fl)


def fl_set_counter_precision(pFlObject, prec):
    """ fl_set_counter_precision(pFlObject, prec)

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_set_counter_precision = library.cfuncproto(
            library.load_so_libforms(), "fl_set_counter_precision",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_counter_precision(FL_OBJECT * ob, int prec)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iprec = library.convert_to_int(prec)
    library.keep_elem_refs(pFlObject, prec, iprec)
    _fl_set_counter_precision(pFlObject, iprec)


def fl_get_counter_precision(pFlObject):
    """ fl_get_counter_precision(pFlObject) -> num.

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_counter_precision = library.cfuncproto(
            library.load_so_libforms(), "fl_get_counter_precision",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_counter_precision(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_counter_precision(pFlObject)
    return retval


# fl_set_counter_return function placeholder (deprecated)


def fl_get_counter_value(pFlObject):
    """ fl_get_counter_value(pFlObject) -> num.

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Tested + NoDoc + Demo = OK
    """

    _fl_get_counter_value = library.cfuncproto(
            library.load_so_libforms(), "fl_get_counter_value",
            cty.c_double, [cty.POINTER(xfdata.FL_OBJECT)],
            """double fl_get_counter_value(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_counter_value(pFlObject)
    return retval


def fl_get_counter_bounds(pFlObject):
    """ fl_get_counter_bounds(pFlObject) -> minbound, maxbound

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @attention: API change from XForms - upstream was
                    fl_get_counter_bounds(pFlObject, minbound, maxbound)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_counter_bounds = library.cfuncproto(
            library.load_so_libforms(), "fl_get_counter_bounds",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_counter_bounds(FL_OBJECT * ob, double * min,
               double * max)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    minbound, pminbound = library.make_double_and_pointer()
    maxbound, pmaxbound = library.make_double_and_pointer()
    library.keep_elem_refs(pFlObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_counter_bounds(pFlObject, pminbound, pmaxbound)
    return minbound.value, maxbound.value


def fl_get_counter_step(pFlObject):
    """ fl_get_counter_step(pFlObject) -> s, l

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @attention: API change from XForms - upstream was
                    fl_get_counter_step(pFlObject, s, l)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_counter_step = library.cfuncproto(
            library.load_so_libforms(), "fl_get_counter_step",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
            cty.POINTER(cty.c_double)],
            """void fl_get_counter_step(FL_OBJECT * ob, double * s,
               double * l)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    s, ps = library.make_double_and_pointer()
    l, pl = library.make_double_and_pointer()
    library.keep_elem_refs(pFlObject, s, l, ps, pl)
    _fl_get_counter_step(pFlObject, ps, pl)
    return s.value, l.value


def fl_set_counter_filter(pFlObject, py_ValFilter):
    """ fl_set_counter_filter(pFlObject, py_ValFilter)

    @param pFlObject: counter object
    @type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    #FL_VAL_FILTER = cty.CFUNCTYPE(xfdata.STRING, cty.POINTER(xfdata.FL_OBJECT),
    #                          cty.c_double, cty.c_int)
    _fl_set_counter_filter = library.cfuncproto(
        library.load_so_libforms(), "fl_set_counter_filter",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_VAL_FILTER],
        """void fl_set_counter_filter(FL_OBJECT * ob,
           FL_VAL_FILTER filter)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    c_ValFilter = xfdata.FL_VAL_FILTER(py_ValFilter)
    library.keep_cfunc_refs(c_ValFilter, py_ValFilter)
    library.keep_elem_refs(pFlObject)
    _fl_set_counter_filter(pFlObject, c_ValFilter)


# Functions to set and get the timeout value used by the
# counter code to control modification of the counter value.

def fl_get_counter_repeat(pFlObject):
    """ fl_get_counter_repeat(pFlObject) -> num.

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_counter_repeat = library.cfuncproto(
            library.load_so_libforms(), "fl_get_counter_repeat",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_counter_repeat(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_counter_repeat(pFlObject)
    return retval


def fl_set_counter_repeat(pFlObject, msec):
    """ fl_set_counter_repeat(pFlObject, msec)

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_counter_repeat = library.cfuncproto(
            library.load_so_libforms(), "fl_set_counter_repeat",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_counter_repeat(FL_OBJECT * ob, int millisec)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    imsec = library.convert_to_int(msec)
    library.keep_elem_refs(pFlObject, msec, imsec)
    _fl_set_counter_repeat(pFlObject, imsec)


def fl_get_counter_min_repeat(pFlObject):
    """ fl_get_counter_min_repeat(pFlObject) -> num.

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_counter_min_repeat = library.cfuncproto(
            library.load_so_libforms(), "fl_get_counter_min_repeat",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_counter_min_repeat(FL_OBJECT * ob)
""")
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_counter_min_repeat(pFlObject)
    return retval


def fl_set_counter_min_repeat(pFlObject, msec):
    """ fl_set_counter_min_repeat(pFlObject, msec)

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_counter_min_repeat = library.cfuncproto(
            library.load_so_libforms(), "fl_set_counter_min_repeat",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_counter_min_repeat(FL_OBJECT * ob, int millisec)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    imsec = library.convert_to_int(msec)
    library.keep_elem_refs(pFlObject, msec, imsec)
    _fl_set_counter_min_repeat(pFlObject, imsec)


def fl_get_counter_speedjump(pFlObject):
    """ fl_get_counter_speedjump(pFlObject) -> num.

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_counter_speedjump = library.cfuncproto(
            library.load_so_libforms(), "fl_get_counter_speedjump",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_counter_speedjump(FL_OBJECT * ob)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_counter_speedjump(pFlObject)
    return retval


def fl_set_counter_speedjump(pFlObject, yesno):
    """ fl_set_counter_speedjump(pFlObject, yesno)

        @param pFlObject: pointer to object
@type pFlObject: pointer to xfdata.FL_OBJECT

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_set_counter_speedjump = library.cfuncproto(
            library.load_so_libforms(), "fl_set_counter_speedjump",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_counter_speedjump(FL_OBJECT * ob, int yes_no)
""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iyesno = library.convert_to_int(yesno)
    library.keep_elem_refs(pFlObject, yesno, iyesno)
    _fl_set_counter_speedjump(pFlObject, iyesno)



