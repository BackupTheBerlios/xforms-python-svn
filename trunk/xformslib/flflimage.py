#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
    e-mail: <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata





#########################
# flimage.h
# Image related routines
#########################

# fl_safe_free function placeholder (low-level)


def FL_RGB2GRAY(r, g, b):
    return cty.c_uint((78 * (r) + 150 * (g) + 28 * (b)) >> 8)


# if PCBITS is not 8, we need to apply the RGBmask

def FL_IsRGB(pImage):
    return (pImage.contents.type == xfdata.FL_IMAGE_RGB)


def FL_IsPacked(pImage):
    return (pImage.contents.type == xfdata.FL_IMAGE_PACKED)


def flimage_setup(pImageSetup):
    """
        flimage_setup(pImageSetup)

        @param pImageSetup: pointer to imagesetup struct

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_setup = library.cfuncproto(
        library.load_so_libflimage(), "flimage_setup",
        None, [cty.POINTER(xfdata.FLIMAGE_SETUP)],
        """void flimage_setup(FLIMAGE_SETUP * setup)""")
    library.check_if_initialized()
    library.keep_elem_refs(pImageSetup)
    _flimage_setup(pImageSetup)


# basic IO routines

def flimage_load(filename):
    """
        flimage_load(filename) -> pImage

        @param filename: name of file to load

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_load = library.cfuncproto(
        library.load_so_libflimage(), "flimage_load",
        cty.POINTER(xfdata.FL_IMAGE), [xfdata.STRING],
        """FL_IMAGE * flimage_load(const char * file)""")
    library.check_if_initialized()
    sfilename = library.convert_to_string(filename)
    library.keep_elem_refs(filename, sfilename)
    retval = _flimage_load(sfilename)
    return retval


def flimage_read(pImage):
    """
        flimage_read(pImage) -> pImage

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_read = library.cfuncproto(
        library.load_so_libflimage(), "flimage_read",
        cty.POINTER(xfdata.FL_IMAGE), [cty.POINTER(xfdata.FL_IMAGE)],
        """FL_IMAGE * flimage_read(FL_IMAGE * im)""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    retval = _flimage_read(pImage)
    return retval


def flimage_dump(pImage, p2, p3):
    """
        flimage_dump(pImage, p2, p3) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_dump = library.cfuncproto(
        library.load_so_libflimage(), "flimage_dump",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), xfdata.STRING, xfdata.STRING],
        """int flimage_dump(FL_IMAGE * p1, const char * p2,
           const char * p3)""")
    library.check_if_initialized()
    sp2 = library.convert_to_string(p2)
    sp3 = library.convert_to_string(p3)
    library.keep_elem_refs(pImage, p2, p3, sp2, sp3)
    retval = _flimage_dump(pImage, sp2, sp3)
    return retval


def flimage_close(pImage):
    """
        flimage_close(pImage) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_close = library.cfuncproto(
        library.load_so_libflimage(), "flimage_close",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE)],
        """int flimage_close(FL_IMAGE * p1)""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    retval = _flimage_close(pImage)
    return retval


def flimage_alloc():
    """
        flimage_alloc() -> pImage

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_alloc = library.cfuncproto(
        library.load_so_libflimage(), "flimage_alloc",
        cty.POINTER(xfdata.FL_IMAGE), [],
        """FL_IMAGE * flimage_alloc()""")
    library.check_if_initialized()
    retval = _flimage_alloc()
    return retval


def flimage_getmem(pImage):
    """
        flimage_getmem(pImage) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_getmem = library.cfuncproto(
        library.load_so_libflimage(), "flimage_getmem",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE)],
        """int flimage_getmem(FL_IMAGE * p1)""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    retval = _flimage_getmem(pImage)
    return retval


def flimage_is_supported(fname):
    """
        flimage_is_supported(fname) -> num.

        @param fname: filename

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_is_supported = library.cfuncproto(
        library.load_so_libflimage(), "flimage_is_supported",
        cty.c_int, [xfdata.STRING],
        """int flimage_is_supported(const char * p1)""")
    library.check_if_initialized()
    sfname = library.convert_to_string(fname)
    library.keep_elem_refs(fname, sfname)
    retval = _flimage_is_supported(sfname)
    return retval


def flimage_description_via_filter(pImage, p2, p3, p4):
    """
        flimage_description_via_filter(pImage, p2, p3, p4) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_description_via_filter = library.cfuncproto(
        library.load_so_libflimage(), "flimage_description_via_filter",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.POINTER(xfdata.STRING),
        xfdata.STRING, cty.c_int],
        """int flimage_description_via_filter(FL_IMAGE * p1,
           const char * p2, const char * p3, int p4)""")
    library.check_if_initialized()
    sp3 = library.convert_to_string(p3)
    ip4 = library.convert_to_string(p4)
    library.keep_elem_refs(pImage, p2, p3, p4, sp3, ip4)
    retval = _flimage_description_via_filter(pImage, p2, sp3, ip4)
    return retval


def flimage_write_via_filter(pImage, p2, p3, p4):
    """
        flimage_write_via_filter(pImage, p2, p3, p4) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_write_via_filter = library.cfuncproto(
        library.load_so_libflimage(), "flimage_write_via_filter",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.POINTER(xfdata.STRING),
        cty.POINTER(xfdata.STRING), cty.c_int],
        """int flimage_write_via_filter(FL_IMAGE * p1, const char * p2,
           const char * p3, int p4)""")
    library.check_if_initialized()
    ip4 = library.convert_to_int(p4)
    library.keep_elem_refs(pImage, p2, p3, p4, ip4)
    retval = _flimage_write_via_filter(pImage, p2, p3, ip4)
    return retval


def flimage_free(pImage):
    """
        flimage_free(pImage) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_free = library.cfuncproto(
        library.load_so_libflimage(), "flimage_free",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE)],
        """int flimage_free(FL_IMAGE * p1)""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    retval = _flimage_free(pImage)
    return retval


def flimage_display(pImage, win):
    """
        flimage_display(pImage, win) -> num.

        @param pImage: pointer to image
        @param win: window

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_display = library.cfuncproto(
        library.load_so_libflimage(), "flimage_display",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), xfdata.Window],
        """int flimage_display(FL_IMAGE * p1, Window p2)""")
    library.check_if_initialized()
    ulwin = library.convert_to_Window(win)
    library.keep_elem_refs(pImage, win, ulwin)
    retval = _flimage_display(pImage, ulwin)
    return retval


def flimage_sdisplay(pImage, win):
    """
        flimage_sdisplay(pImage, win) -> num.

        @param pImage: pointer to image
        @param win: window

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_sdisplay = library.cfuncproto(
        library.load_so_libflimage(), "flimage_sdisplay",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), xfdata.Window],
        """int flimage_sdisplay(FL_IMAGE * p1, Window p2)""")
    library.check_if_initialized()
    ulwin = library.convert_to_Window(win)
    library.keep_elem_refs(pImage, win, ulwin)
    retval = _flimage_sdisplay(pImage, ulwin)
    return retval


def flimage_convert(pImage, newtype, ncolors):
    """
        flimage_convert(pImage, newtype, ncolors) -> num.

        Convert an image to a new type.

        @param pImage: pointer to image
        @param newtype: new type of flimage to convert to
        @param ncolors: number of colors

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_convert = library.cfuncproto(
        library.load_so_libflimage(), "flimage_convert",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.c_int, cty.c_int],
        """int flimage_convert(FL_IMAGE * p1, int p2, int p3)""")
    library.check_if_initialized()
    inewtype = library.convert_to_int(newtype)
    incolors = library.convert_to_int(ncolors)
    library.keep_elem_refs(pImage, newtype, ncolors, inewtype, incolors)
    retval = _flimage_convert(pImage, inewtype, incolors)
    return retval


def flimage_type_name(flimagetype):
    """
        flimage_type_name(flimagetype) -> name string

        @param flimagetype: type of flimage

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_type_name = library.cfuncproto(
        library.load_so_libflimage(), "flimage_type_name",
        xfdata.STRING, [cty.c_int],
        """const char * flimage_type_name(int type)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(flimagetype, xfdata.FLIMAGETYPE_list)
    iflimagetype = library.convert_to_int(flimagetype)
    library.keep_elem_refs(flimagetype, iflimagetype)
    retval = _flimage_type_name(iflimagetype)
    return retval


def flimage_add_text(pImage, text, length, style, size, txtcolr, bgcolr, tran, tx, ty, rot):
    """
        flimage_add_text(pImage, text, length, style, size, txtcolr, bgcolr, tran, tx, ty, rot) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_add_text = library.cfuncproto(
        library.load_so_libflimage(), "flimage_add_text",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), xfdata.STRING, cty.c_int,
        cty.c_int, cty.c_int, cty.c_uint, cty.c_uint, cty.c_int,
        cty.c_double, cty.c_double, cty.c_int],
        """int flimage_add_text(FL_IMAGE * im, const char * str, int len,
           int style, int size, unsigned int tcol, unsigned int bcol,
           int tran, double tx, double ty, int rot)""")
    library.check_if_initialized()
    stext = library.convert_to_string(text)
    ilength = library.convert_to_int(length)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    uitxtcolr = library.convert_to_uint(txtcolr)
    uibgcolr = library.convert_to_uint(bgcolr)
    itran = library.convert_to_int(tran)
    ftx = library.convert_to_double(tx)
    fty = library.convert_to_double(ty)
    irot = library.convert_to_int(rot)
    library.keep_elem_refs(pImage, text, length, style, size, txtcolr, bgcolr, tran, \
                   tx, ty, rot, stext, ilength, istyle, isize, uitxtcolr, \
                   uibgcolr, itran, ftx, fty, irot)
    retval = _flimage_add_text(pImage, stext, ilength, istyle, isize, uitxtcolr, \
                               uibgcolr, itran, ftx, fty, irot)
    return retval


def flimage_add_text_struct(pImage, pImageText):
    """
        flimage_add_text_struct(pImage, pImageText) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_add_text_struct = library.cfuncproto(
        library.load_so_libflimage(), "flimage_add_text_struct",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE),
        cty.POINTER(xfdata.FLIMAGE_TEXT)],
        """int flimage_add_text_struct(FL_IMAGE * p1, const char * p2)""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage, pImageText)
    retval = _flimage_add_text_struct(pImage, pImageText)
    return retval


def flimage_delete_all_text(pImage):
    """
        flimage_delete_all_text(pImage)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_delete_all_text = library.cfuncproto(
        library.load_so_libflimage(), "flimage_delete_all_text",
        None, [cty.POINTER(xfdata.FL_IMAGE)],
        """void flimage_delete_all_text(FL_IMAGE * p1)""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    _flimage_delete_all_text(pImage)


def flimage_add_marker(pImage, text, p3, p4, p5, p6, p7, p8, p9, colr, bcolr):
    """
        flimage_add_marker(pImage, text, p3, p4, p5, p6, p7, p8, p9, colr, bcolr) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_add_marker = library.cfuncproto(
        library.load_so_libflimage(), "flimage_add_marker",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), xfdata.STRING, cty.c_double,
        cty.c_double, cty.c_double, cty.c_double, cty.c_int, cty.c_int,
        cty.c_int, xfdata.FL_COLOR, xfdata.FL_COLOR],
        """int flimage_add_marker(FL_IMAGE * p1, const char * p2,
           double p3, double p4, double p5, double p6, int p7,
           int p8, int p9, FL_COLOR p10, FL_COLOR p11)""")
    library.check_if_initialized()
    stext = library.convert_to_string(text)
    fp3 = library.convert_to_double(p3)
    fp4 = library.convert_to_double(p4)
    fp5 = library.convert_to_double(p5)
    fp6 = library.convert_to_double(p6)
    ip7 = library.convert_to_int(p7)
    ip8 = library.convert_to_int(p8)
    ip9 = library.convert_to_int(p9)
    ulcolr = library.convert_to_FL_COLOR(colr)
    ulbcolr = library.convert_to_FL_COLOR(bcolr)
    library.keep_elem_refs(pImage, text, p3, p4, p5, p6, p7, p8, p9, ulcolr, ulbcolr,
                   stext, fp3, fp4, fp5, fp6, ip7, ip8, ip9, ulcolr, ulbcolr)
    retval = _flimage_add_marker(pImage, stext, fp3, fp4, fp5, fp6, ip7,
                                 ip8, ip9, ulcolr, ulbcolr)
    return retval


def flimage_add_marker_struct(pImage, pImageMarker):
    """
        flimage_add_marker_struct(pImage, pImageMarker) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_add_marker_struct = library.cfuncproto(
        library.load_so_libflimage(), "flimage_add_marker_struct",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.POINTER(xfdata.FLIMAGE_MARKER)],
        """int flimage_add_marker_struct(FL_IMAGE * p1, const char * p2)""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage, pImageMarker)
    retval = _flimage_add_marker_struct(pImage, pImageMarker)
    return retval


def flimage_define_marker(text1, pImageMarker, text2):
    """
        flimage_define_marker(text1, pImageMarker, text2) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_define_marker = library.cfuncproto(
        library.load_so_libflimage(), "flimage_define_marker",
        cty.c_int, [xfdata.STRING, cty.POINTER(xfdata.FLIMAGE_MARKER), xfdata.STRING],
        """int flimage_define_marker(const char *, void ( * )
           (FLIMAGE_MARKER *), const char *)""")
    stext1 = library.convert_to_string(text1)
    stext2 = library.convert_to_string(text2)
    library.keep_elem_refs(text1, pImageMarker, text2, stext1, stext2)
    retval = _flimage_define_marker(stext1, pImageMarker, stext2)
    return retval


def flimage_delete_all_markers(pImage):
    """
        flimage_delete_all_markers(pImage)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_delete_all_markers = library.cfuncproto(
        library.load_so_libflimage(), "flimage_delete_all_markers",
        None, [cty.POINTER(xfdata.FL_IMAGE)],
        """void flimage_delete_all_markers(FL_IMAGE * p1)""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    _flimage_delete_all_markers(pImage)


def flimage_render_annotation(pImage, win):
    """
        flimage_render_annotation(pImage, win) -> num.

        @param pImage: pointer to image
        @param win: window

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_render_annotation = library.cfuncproto(
        library.load_so_libflimage(), "flimage_render_annotation",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), xfdata.FL_WINDOW],
        """int flimage_render_annotation(FL_IMAGE * p1, FL_WINDOW p2)""")
    library.check_if_initialized()
    ulwin = library.convert_to_Window(win)
    library.keep_elem_refs(pImage, win, ulwin)
    retval = _flimage_render_annotation(pImage, ulwin)
    return retval


def flimage_error(pImage, text):
    """
        flimage_error(pImage, text)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_error = library.cfuncproto(
        library.load_so_libflimage(), "flimage_error",
        None, [cty.POINTER(xfdata.FL_IMAGE), xfdata.STRING],
        """void flimage_error(FL_IMAGE * p1, const char * p2)""")
    library.check_if_initialized()
    stext = library.convert_to_Window(text)
    library.keep_elem_refs(pImage, text, stext)
    _flimage_error(pImage, stext)


# built-in format supports

def flimage_enable_pnm():
    """
    flimage_enable_pnm()

    Enables use of PNM (Portable anymap) image format

    @example: flimage_enable_pnm()

    @status: Tested + Doc + NoDemo = OK
    """

    _flimage_enable_pnm = library.cfuncproto(
            library.load_so_libflimage(), "flimage_enable_pnm",
            None, [],
            """void flimage_enable_pnm()
""")
    library.check_if_initialized()
    _flimage_enable_pnm()


def flimage_set_fits_bits(p1):
    """
        flimage_set_fits_bits(p1) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_set_fits_bits = library.cfuncproto(
        library.load_so_libflimage(), "flimage_set_fits_bits",
        cty.c_int, [cty.c_int],
        """int flimage_set_fits_bits(int p1)""")
    library.check_if_initialized()
    ip1 = library.convert_to_int(p1)
    library.keep_elem_refs(p1, ip1)
    retval = _flimage_set_fits_bits(ip1)
    return retval


def flimage_jpeg_output_options(pImageJpegOption):
    """
        flimage_jpeg_output_options(pImageJpegOption)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_jpeg_output_options = library.cfuncproto(
        library.load_so_libflimage(), "flimage_jpeg_output_options",
        None, [cty.POINTER(xfdata.FLIMAGE_JPEG_OPTION)],
        """void flimage_jpeg_output_options(FLIMAGE_JPEG_OPTION * p1)""")
    library.check_if_initialized()
    library.keep_elem_refs(pImageJpegOption)
    _flimage_jpeg_output_options(pImageJpegOption)


def flimage_pnm_output_options(p1):
    """
        flimage_pnm_output_options(p1)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_pnm_output_options = library.cfuncproto(
            library.load_so_libflimage(), "flimage_pnm_output_options",
            None, [cty.c_int],
            """void flimage_pnm_output_options(int p1)
""")
    library.check_if_initialized()
    ip1 = library.convert_to_int(p1)
    library.keep_elem_refs(p1, ip1)
    _flimage_pnm_output_options(ip1)


def flimage_gif_output_options(p1):
    """
        flimage_gif_output_options(p1)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_gif_output_options = library.cfuncproto(
        library.load_so_libflimage(), "flimage_gif_output_options",
        None, [cty.c_int],
        """void flimage_gif_output_options(int p1)""")
    library.check_if_initialized()
    ip1 = library.convert_to_int(p1)
    library.keep_elem_refs(p1, ip1)
    _flimage_gif_output_options(ip1)


def flimage_ps_options():
    """
        flimage_ps_options() -> pFlpsControl

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_ps_options = library.cfuncproto(
        library.load_so_libflimage(), "flimage_ps_options",
        cty.POINTER(xfdata.FLPS_CONTROL), [],
        """FLPS_CONTROL * flimage_ps_options()""")
    library.check_if_initialized()
    retval = _flimage_ps_options()
    return retval


flimage_jpeg_options = flimage_jpeg_output_options
flimage_pnm_options = flimage_pnm_output_options
flimage_gif_options = flimage_gif_output_options


def flimage_get_number_of_formats():
    """
        flimage_get_number_of_formats() -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_get_number_of_formats = library.cfuncproto(
            library.load_so_libflimage(), "flimage_get_number_of_formats",
            cty.c_int, [],
            """int flimage_get_number_of_formats()
""")
    library.check_if_initialized()
    retval = _flimage_get_number_of_formats()
    return retval


def flimage_get_format_info(p1):
    """
        flimage_get_format_info(p1) -> ImageFormatInfo class instance

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_get_format_info = library.cfuncproto(
            library.load_so_libflimage(), "flimage_get_format_info",
            cty.POINTER(xfdata.FLIMAGE_FORMAT_INFO), [cty.c_int],
            """const char * flimage_get_format_info(int p1)
""")
    library.check_if_initialized()
    ip1 = library.convert_to_int(p1)
    library.keep_elem_refs(p1, ip1)
    retval = _flimage_get_format_info(ip1)
    return retval


def fl_get_matrix(nrows, ncols, esize):
    """
        fl_get_matrix(nrows, ncols, esize) -> ?

        @param nrows: number of rows
        @param ncols: number of columns
        @param esize: size of matrix

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_matrix = library.cfuncproto(
            library.load_so_libflimage(), "fl_get_matrix",
            cty.c_void_p, [cty.c_int, cty.c_int, cty.c_uint],
            """void * fl_get_matrix(int p1, int p2, unsigned int p3)
""")
    library.check_if_initialized()
    inrows = library.convert_to_int(nrows)
    incols = library.convert_to_int(ncols)
    uiesize = library.convert_to_uint(esize)
    library.keep_elem_refs(nrows, ncols, esize, inrows, incols, uiesize)
    retval = _fl_get_matrix(inrows, incols, uiesize)
    return retval


def fl_make_matrix(nrows, ncols, esize, mem):
    """
        fl_make_matrix(nrows, ncols, esize, mem) -> ?

        Makes a matrix out of a given piece of memory.

        @param nrows: number of rows
        @param ncols: number of columns
        @param esize: size of matrix
        @param mem: memory

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_make_matrix = library.cfuncproto(
            library.load_so_libflimage(), "fl_make_matrix",
            cty.c_void_p, [cty.c_int, cty.c_int, cty.c_uint, cty.c_void_p],
            """void * fl_make_matrix(int p1, int p2, unsigned int p3,
               void * p4)
""")
    library.check_if_initialized()
    inrows = library.convert_to_int(nrows)
    incols = library.convert_to_int(ncols)
    uiesize = library.convert_to_uint(esize)
    pmem = cty.cast(mem, cty.c_void_p)
    library.keep_elem_refs(nrows, ncols, esize, mem, inrows, incols, uiesize, pmem)
    retval = _fl_make_matrix(inrows, incols, uiesize, pmem)
    return retval


def fl_free_matrix(mtrx):
    """
        fl_free_matrix(mtrx)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _fl_free_matrix = library.cfuncproto(
        library.load_so_libflimage(), "fl_free_matrix",
        None, [cty.c_void_p],
        """void fl_free_matrix(void * p1)""")
    library.check_if_initialized()
    pmtrx = cty.cast(mtrx, cty.c_void_p)
    library.keep_elem_refs(mtrx, pmtrx)
    _fl_free_matrix(pmtrx)


# fl_init_RGBdatabase(text) function prototype (deprecated)


def fl_lookup_RGBcolor(text, p2, p3, p4):
    """
        fl_lookup_RGBcolor(text, p2, p3, p4) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_lookup_RGBcolor = library.cfuncproto(
            library.load_so_libflimage(), "fl_lookup_RGBcolor",
            cty.c_int, [xfdata.STRING, cty.POINTER(cty.c_int), \
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
            """int fl_lookup_RGBcolor(const char * p1, int * p2,
               int * p3, int * p4)
""")
    library.check_if_initialized()
    stext = library.convert_to_string(text)
    library.keep_elem_refs(text, p2, p3, p4)
    retval = _fl_lookup_RGBcolor(stext, p2, p3, p4)
    return retval


def flimage_add_format(formalname, shortname, extension, flimagetype, \
                       py_ImageIdentify, py_ImageDescription, \
                       py_ImageReadPixels, py_ImageWriteImage):
    """
        flimage_add_format(formalname, shortname, extension, flimagetype,
        py_ImageIdentify, py_ImageDescription, py_ImageReadPixels,
        py_ImageWriteImage) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    #FLIMAGE_Identify = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FILE))
    #FLIMAGE_Description = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_IMAGE))
    #FLIMAGE_Read_Pixels = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_IMAGE))
    #FLIMAGE_Write_Image = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_IMAGE))
    _flimage_add_format = library.cfuncproto(
            library.load_so_libflimage(), "flimage_add_format",
            cty.c_int, [xfdata.STRING, xfdata.STRING, xfdata.STRING, cty.c_int,
            xfdata.FLIMAGE_Identify, xfdata.FLIMAGE_Description, xfdata.FLIMAGE_Read_Pixels,
            xfdata.FLIMAGE_Write_Image],
            """int flimage_add_format(const char * p1, const char * p2,
               const char * p3, int p4, FLIMAGE_Identify p5,
               FLIMAGE_Description p6, FLIMAGE_Read_Pixels p7,
               FLIMAGE_Write_Image p8)
""")
    library.check_if_initialized()
    library.check_admitted_listvalues(flimagetype, xfdata.FLIMAGETYPE_list)
    sformalname = library.convert_to_string(formalname)
    sshortname = library.convert_to_string(shortname)
    sextension = library.convert_to_string(extension)
    iflimagetype = library.convert_to_int(flimagetype)
    c_ImageIdentify = xfdata.FLIMAGE_Identify(py_ImageIdentify)
    c_ImageDescription = xfdata.FLIMAGE_Description(py_ImageDescription)
    c_ImageReadPixels = xfdata.FLIMAGE_Read_Pixels(py_ImageReadPixels)
    c_ImageWriteImage = xfdata.FLIMAGE_Write_Image(py_ImageWriteImage)
    library.keep_cfunc_refs(c_ImageIdentify, py_ImageIdentify, c_ImageDescription, \
                    py_ImageDescription, c_ImageReadPixels, py_ImageReadPixels,
                    c_ImageWriteImage, py_ImageWriteImage)
    library.keep_elem_refs(formalname, shortname, extension, flimagetype, \
                   sformalname, sshortname, sextension, iflimagetype)
    retval = _flimage_add_format(sformalname, sshortname, sextension, \
                    flimagetype, c_ImageIdentify, c_ImageDescription, \
                    c_ImageReadPixels, c_ImageWriteImage)
    return retval


def flimage_set_annotation_support(p1, p2):
    """
        flimage_set_annotation_support(p1, p2)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_set_annotation_support = library.cfuncproto(
            library.load_so_libflimage(), "flimage_set_annotation_support",
            None, [cty.c_int, cty.c_int],
            """void flimage_set_annotation_support(int p1, int p2)
""")
    library.check_if_initialized()
    ip1 = library.convert_to_int(p1)
    ip2 = library.convert_to_int(p2)
    library.keep_elem_refs(p1, p2, ip1, ip2)
    _flimage_set_annotation_support(ip1, ip2)


def flimage_getcolormap(pImage):
    """
        flimage_getcolormap(pImage) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_getcolormap = library.cfuncproto(
            library.load_so_libflimage(), "flimage_getcolormap",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE)],
            """int flimage_getcolormap(FL_IMAGE * p1)
""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    retval = _flimage_getcolormap(pImage)
    return retval


def fl_select_mediancut_quantizer():
    """
        fl_select_mediancut_quantizer()

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_select_mediancut_quantizer = library.cfuncproto(
            library.load_so_libflimage(), "fl_select_mediancut_quantizer",
            None, [],
            """void fl_select_mediancut_quantizer()
""")
    library.check_if_initialized()
    _fl_select_mediancut_quantizer()


# simple image processing routines

def flimage_convolve(pImage, p2, p3, p4):
    """
        flimage_convolve(pImage, p2, p3, p4) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_convolve = library.cfuncproto(
            library.load_so_libflimage(), "flimage_convolve",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE),
            cty.POINTER(cty.POINTER(cty.c_int)), cty.c_int, cty.c_int],
            """int flimage_convolve(FL_IMAGE * p1, int * * p2, int p3,
               int p4)
""")
    library.check_if_initialized()
    ip3 = library.convert_to_int(p3)
    ip4 = library.convert_to_int(p4)
    library.keep_elem_refs(pImage, p2, p3, p4, ip3, ip4)
    retval = _flimage_convolve(pImage, p2, ip3, ip4)
    return retval


def flimage_convolvea(pImage, p2, p3, p4):
    """
        flimage_convolvea(pImage, p2, p3, p4) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_convolvea = library.cfuncproto(
            library.load_so_libflimage(), "flimage_convolvea",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.POINTER(cty.c_int),
            cty.c_int, cty.c_int],
            """int flimage_convolvea(FL_IMAGE * p1, int * p2, int p3, int p4)
""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage, p2, p3, p4)
    retval = _flimage_convolvea(pImage, p2, p3, p4)
    return retval


def flimage_tint(pImage, p2, p3):
    """
        flimage_tint(pImage, p2, p3) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_tint = library.cfuncproto(
            library.load_so_libflimage(), "flimage_tint",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.c_uint, cty.c_double],
            """int flimage_tint(FL_IMAGE * p1, unsigned int p2, double p3)
""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage, p2, p3)
    retval = _flimage_tint(pImage, p2, p3)
    return retval


def flimage_rotate(pImage, p2, p3):
    """
        flimage_rotate(pImage, p2, p3) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_rotate = library.cfuncproto(
            library.load_so_libflimage(), "flimage_rotate",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.c_int, cty.c_int],
            """int flimage_rotate(FL_IMAGE * p1, int p2, int p3)
""")
    library.check_if_initialized()
    ip2 = library.convert_to_int(p2)
    ip3 = library.convert_to_int(p3)
    library.keep_elem_refs(pImage, p2, p3, ip2, ip3)
    retval = _flimage_rotate(pImage, ip2, ip3)
    return retval


def flimage_flip(pImage, p2):
    """
        flimage_flip(pImage, p2) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_flip = library.cfuncproto(
            library.load_so_libflimage(), "flimage_flip",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.c_int],
            """int flimage_flip(FL_IMAGE * p1, int p2)
""")
    library.check_if_initialized()
    ip2 = library.convert_to_int(p2)
    library.keep_elem_refs(pImage, p2, ip2)
    retval = _flimage_flip(pImage, ip2)
    return retval


def flimage_scale(pImage, p2, p3, p4):
    """
        flimage_scale(pImage, p2, p3, p4) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_scale = library.cfuncproto(
            library.load_so_libflimage(), "flimage_scale",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.c_int, cty.c_int,
            cty.c_int],
            """int flimage_scale(FL_IMAGE * p1, int p2, int p3, int p4)
""")
    library.check_if_initialized()
    ip2 = library.convert_to_int(p2)
    ip3 = library.convert_to_int(p3)
    ip4 = library.convert_to_int(p4)
    library.keep_elem_refs(pImage, p2, p3, p4, ip2, ip3, ip4)
    retval = _flimage_scale(pImage, ip2, ip3, ip4)
    return retval


def flimage_warp(pImage, p2, p3, p4, p5):
    """
        flimage_warp(pImage, p2, p3, p4, p5) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_warp = library.cfuncproto(
            library.load_so_libflimage(), "flimage_warp",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.POINTER(cty.c_float * 2),
            cty.c_int, cty.c_int, cty.c_int],
            """int flimage_warp(FL_IMAGE * p1, float * p2, int p3, int p4,
               int p5)
""")
    library.check_if_initialized()
    ip3 = library.convert_to_int(p3)
    ip4 = library.convert_to_int(p4)
    ip5 = library.convert_to_int(p5)
    library.keep_elem_refs(pImage, p2, p3, p4, p5, ip3, ip4, ip5)
    retval = _flimage_warp(pImage, p2, ip3, ip4, ip5)
    return retval


def flimage_autocrop(pImage, p2):
    """
        flimage_autocrop(pImage, p2) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_autocrop = library.cfuncproto(
            library.load_so_libflimage(), "flimage_autocrop",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.c_uint],
            """int flimage_autocrop(FL_IMAGE * p1, unsigned int p2)
""")
    library.check_if_initialized()
    uip2 = library.convert_to_uint(p2)
    library.keep_elem_refs(pImage, p2, uip2)
    retval = _flimage_autocrop(pImage, uip2)
    return retval


def flimage_get_autocrop(pImage, bk):
    """
        flimage_get_autocrop(pImage, bk) -> num., xl, yt, xr, yb

        @param pImage: pointer to image

        @attention: API change from XForms - upstream was
           flimage_get_autocrop(pImage, bk, xl, yt, xr, yb)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_get_autocrop = library.cfuncproto(
            library.load_so_libflimage(), "flimage_get_autocrop",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.c_uint,
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
            """int flimage_get_autocrop(FL_IMAGE * p1, unsigned int p2,
               int * p3, int * p4, int * p5, int * p6)
""")
    library.check_if_initialized()
    uibk = library.convert_to_uint(bk)
    xl, pxl = library.make_int_and_pointer()
    yt, pyt = library.make_int_and_pointer()
    xr, pxr = library.make_int_and_pointer()
    yb, pyb = library.make_int_and_pointer()
    library.keep_elem_refs(pImage, bk, uibk, xl, pxl, yt, pyt, xr, pxr, yb, pyb)
    retval = _flimage_get_autocrop(pImage, uibk, pxl, pyt, pxr, pyb)
    return retval, xl.value, yt.value, xr.value, yb.value


def flimage_crop(pImage, p2, p3, p4, p5):
    """
        flimage_crop(pImage, p2, p3, p4, p5) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_crop = library.cfuncproto(
            library.load_so_libflimage(), "flimage_crop",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.c_int, cty.c_int,
            cty.c_int, cty.c_int],
            """int flimage_crop(FL_IMAGE * p1, int p2, int p3,
               int p4, int p5)
""")
    library.check_if_initialized()
    ip2 = library.convert_to_int(p2)
    ip3 = library.convert_to_int(p3)
    ip4 = library.convert_to_int(p4)
    ip5 = library.convert_to_int(p5)
    library.keep_elem_refs(pImage, p2, p3, p4, p5, ip2, ip3, ip4, ip5)
    retval = _flimage_crop(pImage, ip2, ip3, ip4, ip5)
    return retval


def flimage_replace_pixel(pImage, p2, p3):
    """
        flimage_replace_pixel(pImage, p2, p3) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_replace_pixel = library.cfuncproto(
            library.load_so_libflimage(), "flimage_replace_pixel",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.c_uint, cty.c_uint],
            """int flimage_replace_pixel(FL_IMAGE * p1, unsigned int p2,
               unsigned int p3)
""")
    library.check_if_initialized()
    uip2 = library.convert_to_uint(p2)
    uip3 = library.convert_to_uint(p3)
    library.keep_elem_refs(pImage, p2, p3, uip2, uip3)
    retval = _flimage_replace_pixel(pImage, uip2, uip3)
    return retval


def flimage_transform_pixels(pImage, red, green, blue):
    """
        flimage_transform_pixels(pImage, red, green, blue) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_transform_pixels = library.cfuncproto(
            library.load_so_libflimage(), "flimage_transform_pixels",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],
            """int flimage_transform_pixels(FL_IMAGE * p1, int * p2,
               int * p3, int * p4)
""")
    library.check_if_initialized()
    pred = cty.cast(red, cty.POINTER(cty.c_int))
    pgreen = cty.cast(green, cty.POINTER(cty.c_int))
    pblue = cty.cast(blue, cty.POINTER(cty.c_int))
    library.keep_elem_refs(pImage, red, green, blue, pred, pgreen, pblue)
    retval = _flimage_transform_pixels(pImage, pred, pgreen, pblue)
    return retval


def flimage_windowlevel(pImage, p2, p3):
    """
        flimage_windowlevel(pImage, p2, p3) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_windowlevel = library.cfuncproto(
            library.load_so_libflimage(), "flimage_windowlevel",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.c_int, cty.c_int],
            """int flimage_windowlevel(FL_IMAGE * p1, int p2, int p3)
""")
    library.check_if_initialized()
    ip2 = library.convert_to_int(p2)
    ip3 = library.convert_to_int(p3)
    library.keep_elem_refs(pImage, p2, p3, ip2, ip3)
    retval = _flimage_windowlevel(pImage, ip2, ip3)
    return retval


def flimage_enhance(pImage, p2):
    """
        flimage_enhance(pImage, p2) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_enhance = library.cfuncproto(
            library.load_so_libflimage(), "flimage_enhance",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.c_int],
            """int flimage_enhance(FL_IMAGE * p1, int p2)
""")
    library.check_if_initialized()
    ip2 = library.convert_to_int(p2)
    library.keep_elem_refs(pImage, p2, ip2)
    retval = _flimage_enhance(pImage, ip2)
    return retval


def flimage_from_pixmap(pImage, pixmap):
    """
        flimage_from_pixmap(pImage, pixmap) -> num.

        @param pImage: pointer to image
        @param pixmap: pixmap value

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_from_pixmap = library.cfuncproto(
            library.load_so_libflimage(), "flimage_from_pixmap",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), xfdata.Pixmap],
            """int flimage_from_pixmap(FL_IMAGE * p1, Pixmap p2)
""")
    library.check_if_initialized()
    ulpixmap = library.convert_to_Pixmap(pixmap)
    library.keep_elem_refs(pImage, pixmap, ulpixmap)
    retval = _flimage_from_pixmap(pImage, ulpixmap)
    return retval


def flimage_to_pixmap(pImage, win):
    """
        flimage_to_pixmap(pImage, win) -> pixmap

        @param pImage: pointer to image
        @param win: window id

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_to_pixmap = library.cfuncproto(
            library.load_so_libflimage(), "flimage_to_pixmap",
            xfdata.Pixmap, [cty.POINTER(xfdata.FL_IMAGE), xfdata.FL_WINDOW],
            """Pixmap flimage_to_pixmap(FL_IMAGE * p1, FL_WINDOW p2)
""")
    library.check_if_initialized()
    ulwin = library.convert_to_Window(win)
    library.keep_elem_refs(pImage, win, ulwin)
    retval = _flimage_to_pixmap(pImage, ulwin)
    return retval


def flimage_dup(pImage):
    """
        flimage_dup(pImage) -> pImage

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_dup = library.cfuncproto(
            library.load_so_libflimage(), "flimage_dup",
            cty.POINTER(xfdata.FL_IMAGE), [cty.POINTER(xfdata.FL_IMAGE)],
            """FL_IMAGE * flimage_dup(FL_IMAGE * p1)
""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    retval = _flimage_dup(pImage)
    return retval


# Miscellaneous prototypes

def fl_get_submatrix(inmtrx, rows, cols, r1, c1, rs, cs, esize):
    """
        fl_get_submatrix(inmtrx, rows, cols, r1, c1, rs, cs, esize) -> ?

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_get_submatrix = library.cfuncproto(
            library.load_so_libflimage(), "fl_get_submatrix",
            cty.c_void_p, [cty.c_void_p, cty.c_int, cty.c_int, cty.c_int,
            cty.c_int, cty.c_int, cty.c_int, cty.c_uint],
            """void * fl_get_submatrix(void * p1, int p2, int p3, int p4,
               int p5, int p6, int p7, unsigned int p8)
""")
    library.check_if_initialized()
    pinmtrx = cty.cast(inmtrx, cty.c_void_p)
    irows = library.convert_to_int(rows)
    icols = library.convert_to_int(cols)
    ir1 = library.convert_to_int(r1)
    ic1 = library.convert_to_int(c1)
    irs = library.convert_to_int(rs)
    ics = library.convert_to_int(cs)
    uiesize = library.convert_to_uint(esize)
    library.keep_elem_refs(inmtrx, rows, cols, r1, c1, rs, cs, esize, pinmtrx, \
                   irows, icols, ir1, ic1, irs, ics, uiesize)
    retval = _fl_get_submatrix(pinmtrx, irows, icols, ir1, ic1, irs, ics, \
                               uiesize)
    return retval


def fl_j2pass_quantize_packed(p1, p2, p3, p4, p5, p6, p7, p8, p9, pImage):
    """
        fl_j2pass_quantize_packed(p1, p2, p3, p4, p5, p6, p7, p8, p9, pImage) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_j2pass_quantize_packed = library.cfuncproto(
            library.load_so_libflimage(), "fl_j2pass_quantize_packed",
            cty.c_int, [cty.POINTER(cty.POINTER(cty.c_uint)), cty.c_int,
            cty.c_int, cty.c_int, cty.POINTER(cty.POINTER(cty.c_ushort)),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(xfdata.FL_IMAGE)],
            """int fl_j2pass_quantize_packed(unsigned int * * p1, int p2,
               int p3, int p4, short unsigned int * * p5, int * p6,
               int * p7, int * p8, int * p9, FL_IMAGE * p10)
""")
    library.check_if_initialized()
    ip2 = library.convert_to_int(p2)
    ip3 = library.convert_to_int(p3)
    ip4 = library.convert_to_int(p4)
    library.keep_elem_refs(p1, p2, p3, p4, p5, p6, p7, p8, p9, pImage, ip2, ip3, ip4)
    retval = _fl_j2pass_quantize_packed(p1, ip2, ip3, ip4, p5, p6, p7, p8, \
                                        p9, pImage)
    return retval


def fl_j2pass_quantize_rgb(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, pImage):
    """
        fl_j2pass_quantize_rgb(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, pImage) -> num.

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_j2pass_quantize_rgb = library.cfuncproto(
            library.load_so_libflimage(), "fl_j2pass_quantize_rgb",
            cty.c_int, [cty.POINTER(cty.POINTER(cty.c_ubyte)),
            cty.POINTER(cty.POINTER(cty.c_ubyte)),
            cty.POINTER(cty.POINTER(cty.c_ubyte)), cty.c_int, cty.c_int,
            cty.c_int, cty.POINTER(cty.POINTER(cty.c_ushort)),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(cty.c_int), cty.POINTER(cty.c_int),
            cty.POINTER(xfdata.FL_IMAGE)],
            """int fl_j2pass_quantize_rgb(unsigned char * * p1,
               unsigned char * * p2, unsigned char * * p3, int p4, int p5,
               int p6, short unsigned int * * p7, int * p8, int * p9,
               int * p10, int * p11, FL_IMAGE * p12)
""")
    library.check_if_initialized()
    ip4 = library.convert_to_int(p4)
    ip5 = library.convert_to_int(p5)
    ip6 = library.convert_to_int(p6)
    library.keep_elem_refs(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, pImage,
                   ip4, ip5, ip6)
    retval = _fl_j2pass_quantize_rgb(p1, p2, p3, ip4, ip5, ip6, p7, p8, p9, \
                                     p10, p11, pImage)
    return retval


def fl_make_submatrix(in_, rows, cols, r1, c1, rs, cs, esize):
    """
        fl_make_submatrix(in_, rows, cols, r1, c1, rs, cs, esize) -> ?

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_make_submatrix = library.cfuncproto(
            library.load_so_libflimage(), "fl_make_submatrix",
            cty.c_void_p, [cty.c_void_p, cty.c_int, cty.c_int, cty.c_int,
            cty.c_int, cty.c_int, cty.c_int, cty.c_uint],
            """void * fl_make_submatrix(void * p1, int p2, int p3, int p4,
               int p5, int p6, int p7, unsigned int p8)
""")
    library.check_if_initialized()
    irows = library.convert_to_int(rows)
    icols = library.convert_to_int(cols)
    ir1 = library.convert_to_int(r1)
    ic1 = library.convert_to_int(c1)
    irs = library.convert_to_int(rs)
    ics = library.convert_to_int(cs)
    uiesize = library.convert_to_uint(esize)
    library.keep_elem_refs(in_, rows, cols, r1, c1, rs, cs, esize, irows, icols, \
               ir1, ic1, irs, ics, uiesize)
    retval = _fl_make_submatrix(in_, irows, icols, ir1, ic1, irs, ics, \
                                uiesize)
    return retval


def fl_pack_bits(p1, p2, p3):
    """
        fl_pack_bits(p1, p2, p3)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_pack_bits = library.cfuncproto(
            library.load_so_libflimage(), "fl_pack_bits",
            None, [cty.POINTER(cty.c_ubyte), cty.POINTER(cty.c_ushort),
            cty.c_int],
            """void fl_pack_bits(unsigned char * p1, short unsigned int * p2,
               int p3)
""")
    library.check_if_initialized()
    ip3 = library.convert_to_int(p3)
    library.keep_elem_refs(p1, p2, p3, ip3)
    _fl_pack_bits(p1, p2, ip3)


def fl_unpack_bits(p1, p2, p3):
    """
        fl_unpack_bits(p1, p2, p3)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_unpack_bits = library.cfuncproto(
            library.load_so_libflimage(), "fl_unpack_bits",
            None, [cty.POINTER(cty.c_ushort), cty.POINTER(cty.c_ubyte),
            cty.c_int],
            """void fl_unpack_bits(short unsigned int * p1,
               unsigned char * p2, int p3)
""")
    library.check_if_initialized()
    ip3 = library.convert_to_int(p3)
    library.keep_elem_refs(p1, p2, p3, ip3)
    _fl_unpack_bits(p1, p2, ip3)


def fl_value_to_bits(val):
    """
        fl_value_to_bits(val) -> num.

        @param val: value to convert to bits

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _fl_value_to_bits = library.cfuncproto(
            library.load_so_libflimage(), "fl_value_to_bits",
            cty.c_uint, [cty.c_uint],
            """unsigned int fl_value_to_bits(unsigned int p1)
""")
    library.check_if_initialized()
    uival = library.convert_to_uint(val)
    library.keep_elem_refs(val, uival)
    retval = _fl_value_to_bits(uival)
    return retval


def flimage_add_comments(pImage, p2, p3):
    """
        flimage_add_comments(pImage, p2, p3)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_add_comments = library.cfuncproto(
            library.load_so_libflimage(), "flimage_add_comments",
            None, [cty.POINTER(xfdata.FL_IMAGE), xfdata.STRING, cty.c_int],
            """void flimage_add_comments(FL_IMAGE * p1, const char * p2,
               int p3)
""")
    library.check_if_initialized()
    sp2 = library.convert_to_string(p2)
    ip3 = library.convert_to_int(p3)
    library.keep_elem_refs(pImage, p2, p3, sp2, ip3)
    _flimage_add_comments(pImage, sp2, ip3)


def flimage_color_to_pixel(pImage, p2, p3, p4, p5):
    """
        flimage_color_to_pixel(pImage, p2, p3, p4, p5) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_color_to_pixel = library.cfuncproto(
            library.load_so_libflimage(), "flimage_color_to_pixel",
            cty.c_ulong, [cty.POINTER(xfdata.FL_IMAGE), cty.c_int, cty.c_int,
            cty.c_int, cty.POINTER(cty.c_int)],
""")long unsigned int flimage_color_to_pixel(FL_IMAGE * p1,
               int p2, int p3, int p4, int * p5)
""")
    library.check_if_initialized()
    ip2 = library.convert_to_int(p2)
    ip3 = library.convert_to_int(p3)
    ip4 = library.convert_to_int(p4)
    library.keep_elem_refs(pImage, p2, p3, p4, p5, ip2, ip3, ip4)
    retval = _flimage_color_to_pixel(pImage, ip2, ip3, ip4, p5)
    return retval


def flimage_combine(pImage1, pImage2, alpha):
    """
        flimage_combine(pImage1, pImage2, alpha) -> pImage

        @param pImage1: pointer to first image to combine
        @param pImage2: pointer to second image to combine
        @param alpha: alpha level?

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_combine = library.cfuncproto(
            library.load_so_libflimage(), "flimage_combine",
            cty.POINTER(xfdata.FL_IMAGE), [cty.POINTER(xfdata.FL_IMAGE),
            cty.POINTER(xfdata.FL_IMAGE), cty.c_double],
            """FL_IMAGE * flimage_combine(FL_IMAGE * p1, FL_IMAGE * p2,
               double p3)
""")
    library.check_if_initialized()
    falpha = library.convert_to_double(alpha)
    library.keep_elem_refs(pImage1, pImage2, alpha, falpha)
    retval = _flimage_combine(pImage1, pImage2, falpha)
    return retval


def flimage_display_markers(pImage):
    """
        flimage_display_markers(pImage)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_display_markers = library.cfuncproto(
            library.load_so_libflimage(), "flimage_display_markers",
            None, [cty.POINTER(xfdata.FL_IMAGE)],
            """void flimage_display_markers(FL_IMAGE * p1)
""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    _flimage_display_markers(pImage)


def flimage_dup_(pImage, p2):
    """
        flimage_dup_(pImage, p2) -> pImage

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_dup_ = library.cfuncproto(
            library.load_so_libflimage(), "flimage_dup_",
            cty.POINTER(xfdata.FL_IMAGE), [cty.POINTER(xfdata.FL_IMAGE), cty.c_int],
            """FL_IMAGE * flimage_dup_(FL_IMAGE * p1, int p2)
""")
    library.check_if_initialized()
    ip2 = library.convert_to_int(p2)
    library.keep_elem_refs(pImage, p2, ip2)
    retval = _flimage_dup_(pImage, ip2)
    return retval


def flimage_enable_bmp():
    """
        flimage_enable_bmp()

        Enables use of BMP (Windows/OS2 Bitmap) image format.

        @example: flimage_enable_bmp()

        @status: Tested + Doc + NoDemo = OK
    """

    _flimage_enable_bmp = library.cfuncproto(
            library.load_so_libflimage(), "flimage_enable_bmp",
            None, [],
            """void flimage_enable_bmp()
""")
    library.check_if_initialized()
    _flimage_enable_bmp()


def flimage_enable_fits():
    """
        flimage_enable_fits()

        Enables use of NASA/NOTS standard FITS image format.

        @example: flimage_enable_fits()

        @status: Tested + Doc + NoDemo = OK
    """

    _flimage_enable_fits = library.cfuncproto(
            library.load_so_libflimage(), "flimage_enable_fits",
            None, [],
            """void flimage_enable_fits()
""")
    _flimage_enable_fits()


# TODO: try to understand what kind of images are these ones.
def flimage_enable_genesis():
    """
        flimage_enable_genesis()

        Enables use of Genesis image format.

        @example: flimage_enable_genesis()

        @status: Tested + Doc + NoDemo = OK
    """

    _flimage_enable_genesis = library.cfuncproto(
            library.load_so_libflimage(), "flimage_enable_genesis",
            None, [],
            """void flimage_enable_genesis()
""")
    library.check_if_initialized()
    _flimage_enable_genesis()


def flimage_enable_gif():
    """ flimage_enable_gif()

        Enables use of GIF (Compuserve Graphics Interchange format) image
        format.

        @example: flimage_enable_gif()

        @status: Tested + Doc + NoDemo = OK
    """

    _flimage_enable_gif = library.cfuncproto(
            library.load_so_libflimage(), "flimage_enable_gif",
            None, [],
            """void flimage_enable_gif()
""")
    library.check_if_initialized()
    _flimage_enable_gif()


def flimage_enable_gzip():
    """
        flimage_enable_gzip()

        Enables use of gzip compression filter for images.

        @example: flimage_enable_gzip()

        @status: Tested + Doc + NoDemo = OK
    """

    _flimage_enable_gzip = library.cfuncproto(
            library.load_so_libflimage(), "flimage_enable_gzip",
            None, [],
            """void flimage_enable_gzip()
""")
    library.check_if_initialized()
    _flimage_enable_gzip()


def flimage_enable_jpeg():
    """
        flimage_enable_jpeg()

        Enables use of JPEG/JFIF (Joint Photographic Experts Group) image
        format.

        @example: flimage_enable_jpeg()

        @status: Tested + Doc + NoDemo = OK
    """

    _flimage_enable_jpeg = library.cfuncproto(
            library.load_so_libflimage(), "flimage_enable_jpeg",
            None, [],
            """void flimage_enable_jpeg()
""")
    library.check_if_initialized()
    _flimage_enable_jpeg()


def flimage_enable_png():
    """
        flimage_enable_png()

        Enables use of PNG (Portable Network Graphics) image format. It
        requires netpbm library to be installed

        @example: flimage_enable_png()

        @status: Tested + Doc + NoDemo = OK
    """

    _flimage_enable_png = library.cfuncproto(
            library.load_so_libflimage(), "flimage_enable_png",
            None, [],
            """void flimage_enable_png()
""")
    library.check_if_initialized()
    _flimage_enable_png()


def flimage_enable_ps():
    """
        flimage_enable_ps()

        Enables use of PS (Adobe PostScript) image format. It needs gs
        for reading.

        @example: flimage_enable_ps()

        @status: Tested + Doc + NoDemo = OK
    """

    _flimage_enable_ps = library.cfuncproto(
            library.load_so_libflimage(), "flimage_enable_ps",
            None, [],
            """void flimage_enable_ps()
""")
    library.check_if_initialized()
    _flimage_enable_ps()


def flimage_enable_sgi():
    """
        flimage_enable_sgi()

        Enables use of SGI (Silicon Graphics-Iris) image format. It requires
        pbmplus/netpbm library to be installed

        @example: flimage_enable_sgi()

        @status: Tested + Doc + NoDemo = OK
    """

    _flimage_enable_sgi = library.cfuncproto(
            library.load_so_libflimage(), "flimage_enable_sgi",
            None, [],
            """void flimage_enable_sgi()
""")
    library.check_if_initialized()
    _flimage_enable_sgi()


def flimage_enable_tiff():
    """
        flimage_enable_tiff()

        Enables use of TIFF (Tagged Image file, with no compression) image
        format.

        @example: flimage_enable_tiff()

        @status: Tested + Doc + NoDemo = OK
    """

    _flimage_enable_tiff = library.cfuncproto(
            library.load_so_libflimage(), "flimage_enable_tiff",
            None, [],
            """void flimage_enable_tiff()
""")
    library.check_if_initialized()
    _flimage_enable_tiff()


def flimage_enable_xbm():
    """
        flimage_enable_xbm()

        Enables use of XBM (X Window Bitmap) image format.

        @example: flimage_enable_xbm()

        @status: Tested + Doc + NoDemo = OK
    """

    _flimage_enable_xbm = library.cfuncproto(
            library.load_so_libflimage(), "flimage_enable_xbm",
            None, [],
            """void flimage_enable_xbm()
""")
    library.check_if_initialized()
    _flimage_enable_xbm()


def flimage_enable_xpm():
    """
        flimage_enable_xpm()

        Enables use of XPM3 (X Window PixMap) image format.

        @example: flimage_enable_xpm()

        @status: Tested + Doc + NoDemo = OK
    """

    _flimage_enable_xpm = library.cfuncproto(
            library.load_so_libflimage(), "flimage_enable_xpm",
            None, [],
            """void flimage_enable_xpm()
""")
    library.check_if_initialized()
    _flimage_enable_xpm()


def flimage_enable_xwd():
    """
        flimage_enable_xwd()

        Enables use of XWD (X Window Dump) image format.

        @example: flimage_enable_xwd()

        @status: Tested + Doc + NoDemo = OK
    """

    _flimage_enable_xwd = library.cfuncproto(
            library.load_so_libflimage(), "flimage_enable_xwd",
            None, [],
            """void flimage_enable_xwd()
""")
    library.check_if_initialized()
    _flimage_enable_xwd()


def flimage_free_ci(pImage):
    """
        flimage_free_ci(pImage)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_free_ci = library.cfuncproto(
            library.load_so_libflimage(), "flimage_free_ci",
            None, [cty.POINTER(xfdata.FL_IMAGE)],
            """void flimage_free_ci(FL_IMAGE * p1)
""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    _flimage_free_ci(pImage)


def flimage_free_gray(pImage):
    """
        flimage_free_gray(pImage)

        @param pImage: image
                       (<pointer to xfdata.FL_IMAGE>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_free_gray = library.cfuncproto(
            library.load_so_libflimage(), "flimage_free_gray",
            None, [cty.POINTER(xfdata.FL_IMAGE)],
            """void flimage_free_gray(FL_IMAGE * p1)
""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    _flimage_free_gray(pImage)


def flimage_free_linearlut(pImage):
    """
        flimage_free_linearlut(pImage)

        @param pImage: image
                       (<pointer to xfdata.FL_IMAGE>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_free_linearlut = library.cfuncproto(
            library.load_so_libflimage(), "flimage_free_linearlut",
            None, [cty.POINTER(xfdata.FL_IMAGE)],
            """void flimage_free_linearlut(FL_IMAGE * p1)
""")
    library.keep_elem_refs(pImage)
    _flimage_free_linearlut(pImage)


def flimage_free_rgb(pImage):
    """
        flimage_free_rgb(pImage)

        @param pImage: image
                       (<pointer to xfdata.FL_IMAGE>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_free_rgb = library.cfuncproto(
            library.load_so_libflimage(), "flimage_free_rgb",
            None, [cty.POINTER(xfdata.FL_IMAGE)],
            """void flimage_free_rgb(FL_IMAGE * p1)
""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    _flimage_free_rgb(pImage)


def flimage_freemem(pImage):
    """
        flimage_freemem(pImage)

        @param pImage: image
                       (<pointer to xfdata.FL_IMAGE>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_freemem = library.cfuncproto(
            library.load_so_libflimage(), "flimage_freemem",
            None, [cty.POINTER(xfdata.FL_IMAGE)],
            """void flimage_freemem(FL_IMAGE * p1)
""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    _flimage_freemem(pImage)


def flimage_get_closest_color_from_map(pImage, p2):
    """
        flimage_get_closest_color_from_map(pImage, p2) -> num.

        @param pImage: image
                       (<pointer to xfdata.FL_IMAGE>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_get_closest_color_from_map = library.cfuncproto(
            library.load_so_libflimage(), "flimage_get_closest_color_from_map",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), cty.c_uint],
            """int flimage_get_closest_color_from_map(FL_IMAGE * p1,
               unsigned int p2)
""")
    library.check_if_initialized()
    uip2 = library.convert_to_uint(p2)
    library.keep_elem_refs(pImage, p2, uip2)
    retval = _flimage_get_closest_color_from_map(pImage, uip2)
    return retval


def flimage_get_linearlut(pImage):
    """
        flimage_get_linearlut(pImage) -> num.

        @param pImage: image
                       (<pointer to xfdata.FL_IMAGE>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_get_linearlut = library.cfuncproto(
            library.load_so_libflimage(), "flimage_get_linearlut",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE)],
            """int flimage_get_linearlut(FL_IMAGE * p1)
""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    retval = _flimage_get_linearlut(pImage)
    return retval


def flimage_invalidate_pixels(pImage):
    """
        flimage_invalidate_pixels(pImage)

        @param pImage: image
                       (<pointer to xfdata.FL_IMAGE>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_invalidate_pixels = library.cfuncproto(
            library.load_so_libflimage(), "flimage_invalidate_pixels",
            None, [cty.POINTER(xfdata.FL_IMAGE)],
            """void flimage_invalidate_pixels(FL_IMAGE * p1)
""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    _flimage_invalidate_pixels(pImage)


def flimage_open(filename):
    """
        flimage_open(filename) -> pImage

        @param filename: name of file to open

        @returns: image
                  (<pointer to xfdata.FL_IMAGE>)

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_open = library.cfuncproto(
            library.load_so_libflimage(), "flimage_open",
            cty.POINTER(xfdata.FL_IMAGE), [xfdata.STRING],
            """FL_IMAGE * flimage_open(const char * p1)
""")
    library.check_if_initialized()
    sfilename = library.convert_to_string(filename)
    library.keep_elem_refs(filename, sfilename)
    retval = _flimage_open(sfilename)
    return retval


def flimage_read_annotation(pImage):
    """
        flimage_read_annotation(pImage) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_read_annotation = library.cfuncproto(
            library.load_so_libflimage(), "flimage_read_annotation",
            cty.c_int, [cty.POINTER(xfdata.FL_IMAGE)],
            """int flimage_read_annotation(FL_IMAGE * p1)
""")
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    retval = _flimage_read_annotation(pImage)
    return retval


def flimage_replace_image(pImage, w, h, r, g, b):
    """
        flimage_replace_image(pImage, w, h, r, g, b)

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """

    _flimage_replace_image = library.cfuncproto(
            library.load_so_libflimage(), "flimage_replace_image",
            None, [cty.POINTER(xfdata.FL_IMAGE), cty.c_int, cty.c_int, cty.c_void_p,
            cty.c_void_p, cty.c_void_p],
            """void flimage_replace_image(FL_IMAGE * p1, int p2, int p3,
               void * p4, void * p5, void * p6)
""")
    library.check_if_initialized()
    iw = library.convert_to_int(w)
    ih = library.convert_to_int(h)
    pr = cty.cast(r, cty.c_void_p)
    pg = cty.cast(g, cty.c_void_p)
    pb = cty.cast(b, cty.c_void_p)
    library.keep_elem_refs(pImage, w, h, r, g, b, iw, ih, pr, pg, pb)
    _flimage_replace_image(pImage, iw, ih, pr, pg, pb)


def flimage_swapbuffer(pImage):
    """
        flimage_swapbuffer(pImage) -> num.

        @param pImage: pointer to image

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_swapbuffer = library.cfuncproto(
        library.load_so_libflimage(), "flimage_swapbuffer",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE)],
        """int flimage_swapbuffer(FL_IMAGE * p1) """)
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    retval = _flimage_swapbuffer(pImage)
    return retval


def flimage_to_ximage(pImage, win, pXWindowAttributes):
    """
        flimage_to_ximage(pImage, win, pXWindowAttributes) -> num.

        @param pImage: pointer to image
        @param win: window id
        @param pXWindowAttributes: pointer to XWindowAttributes
           class instance

        @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_to_ximage = library.cfuncproto(
        library.load_so_libflimage(), "flimage_to_ximage",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE), xfdata.FL_WINDOW,
        cty.POINTER(xfdata.XWindowAttributes)],
        """int flimage_to_ximage(FL_IMAGE * p1, FL_WINDOW p2,
           XWindowAttributes * p3) """)
    library.check_if_initialized()
    ulwin = library.convert_to_Window(win)
    library.keep_elem_refs(pImage, win, pXWindowAttributes, ulwin)
    retval = _flimage_to_ximage(pImage, ulwin, pXWindowAttributes)
    return retval


def flimage_write_annotation(pImage):
    """
    flimage_write_annotation(pImage) -> num.

    @param pImage: pointer to image

    @status: Untested + NoDoc + NoDemo = NOT OK
    """
    _flimage_write_annotation = library.cfuncproto(
        library.load_so_libflimage(), "flimage_write_annotation",
        cty.c_int, [cty.POINTER(xfdata.FL_IMAGE)],
        """int flimage_write_annotation(FL_IMAGE * p1) """)
    library.check_if_initialized()
    library.keep_elem_refs(pImage)
    retval = _flimage_write_annotation(pImage)
    return retval


