#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage xyplot objects.

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
    e-mail: <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library as libr
from xformslib import xfdata



#####################
# forms.h (xyplot.h)
#####################

# Others

# fl_create_xyplot function placeholder (internal)


def fl_add_xyplot(plottype, x, y, w, h, label):
    """Adds an xyplot object.

    --

    :Parameters:
      `plottype` : int
        type of xyplot to be added. Values (from xfdata.py)
        FL_NORMAL_XYPLOT, FL_SQUARE_XYPLOT, FL_CIRCLE_XYPLOT,
        FL_FILL_XYPLOT, FL_POINTS_XYPLOT, FL_DASHED_XYPLOT,
        FL_IMPULSE_XYPLOT, FL_ACTIVE_XYPLOT, FL_EMPTY_XYPLOT,
        FL_DOTTED_XYPLOT, FL_DOTDASHED_XYPLOT, FL_LONGDASHED_XYPLOT,
        FL_LINEPOINTS_XYPLOT
      `x` : int
        horizontal position (upper-left corner)
      `y` : int
        vertical position (upper-left corner)
      `w` : int
        width in coord units
      `h` : int
        height in coord units
      `label` : str
        text label of xyplot

    :return: xyplot object added (pFlObject)
    :rtype: pointer to xfdata.FL_OBJECT

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_add_xyplot = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_xyplot",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_xyplot(int t, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    libr.check_if_initialized()
    libr.check_admitted_value_in_list(plottype, xfdata.XYPLOTTYPE_list)
    iplottype = libr.convert_to_int(plottype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(plottype, x, y, w, h, label, iplottype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_xyplot(iplottype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_xyplot_data(pFlObject, xlist, ylist, n, title, xlabel, ylabel):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `xlist` : list_of_float
        list of horizontal values?
      `ylist` : list_of_float
        list of vertical values?
      `n` : int
        *todo*
      `title` : str
        title of xyplot
      `xlabel` : str
        label of horizontal values
      `ylabel` : str
        label of vertical values

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_data = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float), cty.c_int, xfdata.STRING, xfdata.STRING,
        xfdata.STRING],
        """void fl_set_xyplot_data(FL_OBJECT * ob, float * x, float * y,
           int n, const char * title, const char * xlabel,
           const char * ylabel)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    #px = cty.cast(x, cty.POINTER(cty.c_float))
    print xlist, xlist[0]
    fxlist = []
    for a in range(xlist):
        fxlist[a] = libr.convert_to_float(xlist[a])
    pxlist = cty.pointer(fxlist)
    print "xlist, fxlist, pxlist", xlist, fxlist, pxlist
    #py = cty.cast(y, cty.POINTER(cty.c_float))
    fylist = []
    for a in range(ylist):
        fylist[a] = libr.convert_to_float(ylist[a])
    pylist = cty.pointer(fylist)
    print "ylist, fylist, pylist", ylist, fylist, pylist
    inum = libr.convert_to_int(n)
    stitle = libr.convert_to_string(title)
    sxlabel = libr.convert_to_string(xlabel)
    sylabel = libr.convert_to_string(ylabel)
    libr.keep_elem_refs(pFlObject, xlist, ylist, n, fxlist, fylist, pxlist,
             pylist, title, xlabel, ylabel, inum, stitle, sxlabel, sylabel)
    _fl_set_xyplot_data(pFlObject, pxlist, pylist, inum, stitle, sxlabel,
                        sylabel)


def fl_set_xyplot_data_double(pFlObject, xlist, ylist, n, title, xlabel,
                              ylabel):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `xlist` : list_of_float
        list of horizontal values?
      `ylist` : list_of_float
        list of vertical values?
      `n` : int
        *todo*
      `title` : str
        title of xyplot
      `xlabel` : str
        label of horizontal values
      `ylabel` : str
        label of vertical values

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_data_double = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_data_double",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double), cty.c_int, xfdata.STRING, xfdata.STRING,
        xfdata.STRING],
        """void fl_set_xyplot_data_double(FL_OBJECT * ob, double * x,
           double * y, int n, const char * title, const char * xlabel,
           const char * ylabel)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    pxlist = cty.cast(xlist, cty.POINTER(cty.c_double))
    pylist = cty.cast(ylist, cty.POINTER(cty.c_double))
    inum = libr.convert_to_int(n)
    stitle = libr.convert_to_string(title)
    sxlabel = libr.convert_to_string(xlabel)
    sylabel = libr.convert_to_string(ylabel)
    libr.keep_elem_refs(pFlObject, xlist, ylist, n, title, xlabel, ylabel,
                    pxlist, pylist, inum, stitle, sxlabel, sylabel)
    _fl_set_xyplot_data_double(pFlObject, pxlist, pylist, n, title, \
                                        xlabel, ylabel, inum, stitle, \
                                        sxlabel, sylabel)


def fl_set_xyplot_file(pFlObject, fname, title, xlabel, ylabel):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `fname` : str
        name of file.
      `title` : str
        title of xyplot
      `xlabel` : str
        label for horizontal values
      `ylabel` : str
        label for vertical values

    :return: num.
    :rtype: int

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_file = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_file",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING,
        xfdata.STRING, xfdata.STRING, xfdata.STRING],
        """int fl_set_xyplot_file(FL_OBJECT * ob, const char * f,
           const char * title, const char * xl, const char * yl)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    sfname = libr.convert_to_string(fname)
    stitle = libr.convert_to_string(title)
    sxlabel = libr.convert_to_string(xlabel)
    sylabel = libr.convert_to_string(ylabel)
    libr.keep_elem_refs(pFlObject, fname, title, xlabel, ylabel, sfname,
                        stitle, sxlabel, sylabel)
    retval = _fl_set_xyplot_file(pFlObject, sfname, stitle, sxlabel, sylabel)
    return retval


def fl_insert_xyplot_data(pFlObject, idnum, n, valx, valy):
    """Inserts a point after n position in a xyplot object.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `idnum` : int
        *todo*
      `n` : int
        *todo*
      `valx` : float
        *todo*
      `valy` : float
        *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_insert_xyplot_data = libr.cfuncproto(
        libr.load_so_libforms(), "fl_insert_xyplot_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int,
        cty.c_double, cty.c_double],
        """void fl_insert_xyplot_data(FL_OBJECT * ob, int id, int n,
           double x, double y)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iidnum = libr.convert_to_int(idnum)
    inum = libr.convert_to_int(n)
    fvalx = libr.convert_to_double(valx)
    fvaly = libr.convert_to_double(valy)
    libr.keep_elem_refs(pFlObject, idnum, n, valx, valy, iidnum, inum, fvalx, fvaly)
    _fl_insert_xyplot_data(pFlObject, iidnum, inum, fvalx, fvaly)


def fl_add_xyplot_text(pFlObject, valx, valy, text, al, colr):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `valx` : float
        *todo*
      `valy` : float
        *todo*
      `text` : str
        text to be added to xyplot
      `al` : int
        *todo*
      `colr` : long_pos
        color value

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_add_xyplot_text = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_xyplot_text",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double,
        xfdata.STRING, cty.c_int, xfdata.FL_COLOR],
        """void fl_add_xyplot_text(FL_OBJECT * ob, double x, double y,
           const char * text, int al, FL_COLOR col)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.check_admitted_value_in_list(colr, xfdata.COLOR_list)
    fvalx = libr.convert_to_double(valx)
    fvaly = libr.convert_to_double(valy)
    stext = libr.convert_to_string(text)
    ial = libr.convert_to_int(al)
    ulcolr = libr.convert_to_FL_COLOR(colr)
    libr.keep_elem_refs(pFlObject, valx, valy, text, al, colr, fvalx, fvaly, \
                   stext, ial, ulcolr)
    _fl_add_xyplot_text(pFlObject, fvalx, fvaly, stext, ial, ulcolr)


def fl_delete_xyplot_text(pFlObject, text):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `text` : str
        text to be deleted from xyplot

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_delete_xyplot_text = libr.cfuncproto(
        libr.load_so_libforms(), "fl_delete_xyplot_text",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_delete_xyplot_text(FL_OBJECT * ob, const char * text)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    stext = libr.convert_to_string(text)
    libr.keep_elem_refs(pFlObject, text, stext)
    _fl_delete_xyplot_text(pFlObject, stext)


def fl_set_xyplot_maxoverlays(pFlObject, maxover):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `maxover` : int
        *todo*

    :return: num.
    :rtype: int

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_maxoverlays = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_maxoverlays",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_xyplot_maxoverlays(FL_OBJECT * ob, int maxover)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    imaxover = libr.convert_to_int(maxover)
    libr.keep_elem_refs(pFlObject, maxover, imaxover)
    retval = _fl_set_xyplot_maxoverlays(pFlObject, imaxover)
    return retval


def fl_add_xyplot_overlay(pFlObject, idnum, x, y, n, colr):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `idnum` : int
        *todo*
      `x` : float
        *todo*
      `y` : float
        *todo*
      `n` : int
        *todo*
      `colr` : long_pos
        color value

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_add_xyplot_overlay = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_xyplot_overlay",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_float), cty.c_int,
        xfdata.FL_COLOR],
        """void fl_add_xyplot_overlay(FL_OBJECT * ob, int id, float * x,
           float * y, int n, FL_COLOR col)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.check_admitted_value_in_list(colr, xfdata.COLOR_list)
    iidnum = libr.convert_to_int(idnum)
    px = cty.cast(x, cty.POINTER(cty.c_float))
    py = cty.cast(y, cty.POINTER(cty.c_float))
    inum = libr.convert_to_int(n)
    ulcolr = libr.convert_to_FL_COLOR(colr)
    libr.keep_elem_refs(pFlObject, idnum, x, y, n, colr, iidnum, px, py, inum, \
                   ulcolr)
    _fl_add_xyplot_overlay(pFlObject, iidnum, px, py, inum, ulcolr)


def fl_add_xyplot_overlay_file(pFlObject, idnum, fname, colr):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `idnum` : int
        *todo*
      `fname` : str
        name of file
      `colr` : long_pos
        color value

    :return: num.
    :rtype: int

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_add_xyplot_overlay_file = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_xyplot_overlay_file",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, xfdata.STRING,
        xfdata.FL_COLOR],
        """int fl_add_xyplot_overlay_file(FL_OBJECT * ob, int id,
        const char * f, FL_COLOR c)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.check_admitted_value_in_list(colr, xfdata.COLOR_list)
    iidnum = libr.convert_to_int(idnum)
    sfname = libr.convert_to_string(fname)
    ulcolr = libr.convert_to_FL_COLOR(colr)
    libr.keep_elem_refs(pFlObject, idnum, fname, colr, iidnum, sfname, ulcolr)
    retval = _fl_add_xyplot_overlay_file(pFlObject, iidnum, sfname, ulcolr)
    return retval


def fl_set_xyplot_return(pFlObject, when):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `when` : int_pos
        return type. Values (from xfdata.py) FL_RETURN_NONE,
        FL_RETURN_CHANGED, FL_RETURN_END, FL_RETURN_END_CHANGED,
        FL_RETURN_SELECTION, FL_RETURN_DESELECTION,
        FL_RETURN_TRIGGERED, FL_RETURN_ALWAYS

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_return = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_return",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint],
        """void fl_set_xyplot_return(FL_OBJECT * ob, unsigned
           int when)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.check_admitted_value_in_list(when, xfdata.RETURN_list)
    uiwhen = libr.convert_to_uint(when)
    libr.keep_elem_refs(pFlObject, when, uiwhen)
    _fl_set_xyplot_return(pFlObject, uiwhen)


def fl_set_xyplot_xtics(pFlObject, major, minor):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `major` : int
        *todo*
      `minor` : int
        *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_xtics = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_xtics",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_xtics(FL_OBJECT * ob, int major, int minor)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    imajor = libr.convert_to_int(major)
    iminor = libr.convert_to_int(minor)
    libr.keep_elem_refs(pFlObject, major, minor, imajor, iminor)
    _fl_set_xyplot_xtics(pFlObject, imajor, iminor)


def fl_set_xyplot_ytics(pFlObject, major, minor):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `major` : int
        *todo*
      `minor` : int
        *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_ytics = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_ytics",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_ytics(FL_OBJECT * ob, int major, int minor)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    imajor = libr.convert_to_int(major)
    iminor = libr.convert_to_int(minor)
    libr.keep_elem_refs(pFlObject, major, minor, imajor, iminor)
    _fl_set_xyplot_ytics(pFlObject, imajor, iminor)


def fl_set_xyplot_xbounds(pFlObject, minbound, maxbound):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `minbound` : float
        minimum bound to set
      `maxbound` : float
        maximum bound to set

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_xbounds = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_xbounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_xyplot_xbounds(FL_OBJECT * ob, double xmin,
           double xmax)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    fminbound = libr.convert_to_double(minbound)
    fmaxbound = libr.convert_to_double(maxbound)
    libr.keep_elem_refs(pFlObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_xyplot_xbounds(pFlObject, fminbound, fmaxbound)


def fl_set_xyplot_ybounds(pFlObject, minbound, maxbound):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `minbound` : float
        minimum bound to set
      `maxbound` : float
        maximum bound to set

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_ybounds = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_ybounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_xyplot_ybounds(FL_OBJECT * ob, double ymin,
           double ymax)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    fminbound = libr.convert_to_double(minbound)
    fmaxbound = libr.convert_to_double(maxbound)
    libr.keep_elem_refs(pFlObject, minbound, maxbound, fminbound, fmaxbound)
    _fl_set_xyplot_ybounds(pFlObject, fminbound, fmaxbound)


def fl_get_xyplot_xbounds(pFlObject):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object

    :return: minimum bound, maximum bound
    :rtype: float, float

    :note: e.g. *todo*

    :attention: API change from XForms - upstream was
        fl_get_xyplot_xbounds(pFlObject, minbound, maxbound)

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_xbounds = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_xyplot_xbounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_xbounds(FL_OBJECT * ob, float * xmin,
           float * xmax)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    minbound, pminbound = libr.make_float_and_pointer()
    maxbound, pmaxbound = libr.make_float_and_pointer()
    libr.keep_elem_refs(pFlObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_xyplot_xbounds(pFlObject, pminbound, pmaxbound)
    return minbound.value, maxbound.value


def fl_get_xyplot_ybounds(pFlObject):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object

    :return: minimum bound, maximum bound
    :rtype: float, float

    :note: e.g. *todo*

    :attention: API change from XForms - upstream was
        fl_get_xyplot_ybounds(pFlObject, minbound, maxbound)

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_ybounds = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_xyplot_ybounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_ybounds(FL_OBJECT * ob, float * ymin,
           float * ymax)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    minbound, pminbound = libr.make_float_and_pointer()
    maxbound, pmaxbound = libr.make_float_and_pointer()
    libr.keep_elem_refs(pFlObject, minbound, maxbound, pminbound, pmaxbound)
    _fl_get_xyplot_ybounds(pFlObject, pminbound, pmaxbound)
    return minbound.value, maxbound.value


def fl_get_xyplot(pFlObject):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object

    :return: *todo*
    :rtype: float, float, int

    :note: e.g. *todo*

    :attention: API change from XForms - upstream was
        fl_get_xyplot(pFlObject, x, y, i)

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_xyplot",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
        """void fl_get_xyplot(FL_OBJECT * ob, float * x, float * y,
           int * i)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    x, px = libr.make_float_and_pointer()
    y, py = libr.make_float_and_pointer()
    i, pi = libr.make_int_and_pointer()
    libr.keep_elem_refs(pFlObject, x, y, i, px, py, pi)
    _fl_get_xyplot(pFlObject, px, py, pi)
    return x.value, y.value, i.value


def fl_get_xyplot_data(pFlObject):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object

    :return: *todo*
    :rtype: float, float, int

    :note: e.g. *todo*

    :attention: API change from XForms - upstream was
        fl_get_xyplot_data(pFlObject, x, y, n)

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_data = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_xyplot_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
        """void fl_get_xyplot_data(FL_OBJECT * ob, float * x, float * y,
           int * n)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    x, px = libr.make_float_and_pointer()
    y, py = libr.make_float_and_pointer()
    n, pn = libr.make_int_and_pointer()
    libr.keep_elem_refs(pFlObject, x, y, n, px, py, pn)
    _fl_get_xyplot_data(pFlObject, px, py, pn)
    return x.value, y.value, n.value


def fl_get_xyplot_data_pointer(pFlObject, idnum):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `idnum` : int
        *todo*

    :return: *todo*
    :rtype: float, float, int

    :note: e.g. *todo*

    :attention: API change from XForms - upstream was
        fl_get_xyplot_data_pointer(pFlObject, idnum, x, y, n)

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_data_pointer = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_xyplot_data_pointer",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        cty.POINTER(cty.POINTER(cty.c_float)),
        cty.POINTER(cty.POINTER(cty.c_float)), cty.POINTER(cty.c_int)],
        """void fl_get_xyplot_data_cty.POINTER(FL_OBJECT * ob, int id,
           float * * x, float * * y, int * n)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iidnum = libr.convert_to_int(idnum)
    x, px = libr.make_float_and_pointer()
    y, py = libr.make_float_and_pointer()
    n, pn = libr.make_int_and_pointer()
    libr.keep_elem_refs(pFlObject, idnum, iidnum, x, y, n, px, py, pn)
    _fl_get_xyplot_data_pointer(pFlObject, iidnum, px, py, pn)
    return x.value, y.value, n.value


def fl_get_xyplot_overlay_data(pFlObject, idnum):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `idnum` : int
        *todo*

    :return: *todo*
    :rtype: float, float, int

    :note: e.g. *todo*

    :attention: API change from XForms - upstream was
        fl_get_xyplot_overlay_data(pFlObject, idnum, x, y, n)

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_overlay_data = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_xyplot_overlay_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
        """void fl_get_xyplot_overlay_data(FL_OBJECT * ob, int id,
           float * x, float * y, int * n)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iidnum = libr.convert_to_int(idnum)
    x, px = libr.make_float_and_pointer()
    y, py = libr.make_float_and_pointer()
    n, pn = libr.make_int_and_pointer()
    libr.keep_elem_refs(pFlObject, idnum, iidnum, x, y, n, px, py, pn)
    _fl_get_xyplot_overlay_data(pFlObject, iidnum, px, py, pn)
    return x.value, y.value, n.value


def fl_set_xyplot_overlay_type(pFlObject, idnum, plottype):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `idnum` : int
        *todo*
      `plottype` : int
        type of xyplot.  Values (from xfdata.py) FL_NORMAL_XYPLOT,
        FL_SQUARE_XYPLOT, FL_CIRCLE_XYPLOT, FL_FILL_XYPLOT,
        FL_POINTS_XYPLOT, FL_DASHED_XYPLOT, FL_IMPULSE_XYPLOT,
        FL_ACTIVE_XYPLOT, FL_EMPTY_XYPLOT, FL_DOTTED_XYPLOT,
        FL_DOTDASHED_XYPLOT, FL_LONGDASHED_XYPLOT, FL_LINEPOINTS_XYPLOT

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_overlay_type = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_overlay_type",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_overlay_type(FL_OBJECT * ob, int id,
           int type)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iidnum = libr.convert_to_int(idnum)
    libr.check_admitted_value_in_list(plottype, xfdata.XYPLOTTYPE_list)
    iplottype = libr.convert_to_int(plottype)
    libr.keep_elem_refs(pFlObject, idnum, plottype, iidnum, iplottype)
    _fl_set_xyplot_overlay_type(pFlObject, iidnum, iplottype)


def fl_delete_xyplot_overlay(pFlObject, idnum):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `idnum` : int
        *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_delete_xyplot_overlay = libr.cfuncproto(
        libr.load_so_libforms(), "fl_delete_xyplot_overlay",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_delete_xyplot_overlay(FL_OBJECT * ob, int id)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iidnum = libr.convert_to_int(idnum)
    libr.keep_elem_refs(pFlObject, idnum, iidnum)
    _fl_delete_xyplot_overlay(pFlObject, iidnum)


def fl_set_xyplot_interpolate(pFlObject, idnum, deg, grid):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `idnum` : int
        *todo*
      `deg` : int
        *todo*
      `grid` : float
        *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_interpolate = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_interpolate",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int,
        cty.c_double],
        """void fl_set_xyplot_interpolate(FL_OBJECT * ob, int id,
           int deg, double grid)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iidnum = libr.convert_to_int(idnum)
    ideg = libr.convert_to_int(deg)
    fgrid = libr.convert_to_double(grid)
    libr.keep_elem_refs(pFlObject, idnum, deg, grid, iidnum, ideg, fgrid)
    _fl_set_xyplot_interpolate(pFlObject, iidnum, ideg, fgrid)


def fl_set_xyplot_inspect(pFlObject, yes):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `yes` : int
        *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_inspect = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_inspect",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_inspect(FL_OBJECT * ob, int yes)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iyes = libr.convert_to_int(yes)
    libr.keep_elem_refs(pFlObject, yes, iyes)
    _fl_set_xyplot_inspect(pFlObject, iyes)


def fl_set_xyplot_symbolsize(pFlObject, n):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `n` : int
        *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_symbolsize = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_symbolsize",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_symbolsize(FL_OBJECT * ob, int n)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    inum = libr.convert_to_int(n)
    libr.keep_elem_refs(pFlObject, n, inum)
    _fl_set_xyplot_symbolsize(pFlObject, inum)


def fl_replace_xyplot_point(pFlObject, i, valx, valy):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `i` : int
        *todo*
      `valx` : float
        *todo*
      `valy` : float
        *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_replace_xyplot_point = libr.cfuncproto(
        libr.load_so_libforms(), "fl_replace_xyplot_point",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_double,
        cty.c_double],
        """void fl_replace_xyplot_point(FL_OBJECT * ob, int i,
           double x, double y)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    ii = libr.convert_to_int(i)
    fvalx = libr.convert_to_double(valx)
    fvaly = libr.convert_to_double(valy)
    libr.keep_elem_refs(pFlObject, i, valx, valy, ii, fvalx, fvaly)
    _fl_replace_xyplot_point(pFlObject, ii, fvalx, fvaly)


# Replace the value of a particular point in dataset setID,
# where setID=0 is the first data set.
# This routine is an extension of fl_replace_xyplot_point
# which acts on the first dataset only.

def fl_replace_xyplot_point_in_overlay(pFlObject, i, setID, valx, valy):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `i` : int
        *todo*
      `setID` : int
        *todo*
      `valx` : float
        *todo*
      `valy` : float
        *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_replace_xyplot_point_in_overlay = libr.cfuncproto(
        libr.load_so_libforms(), "fl_replace_xyplot_point_in_overlay",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int, \
        cty.c_double, cty.c_double],
        """void fl_replace_xyplot_point_in_overlay(FL_OBJECT * ob,
           int i, int setID, double x, double y)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    ii = libr.convert_to_int(i)
    isetID = libr.convert_to_int(setID)
    fvalx = libr.convert_to_double(valx)
    fvaly = libr.convert_to_double(valy)
    libr.keep_elem_refs(pFlObject, i, setID, valx, valy, ii, isetID, fvalx, fvaly)
    _fl_replace_xyplot_point_in_overlay(pFlObject, ii, isetID, fvalx, fvaly)


def fl_get_xyplot_xmapping(pFlObject):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object

    :return: *todo*
    :rtype: float, float

    :note: e.g. *todo*

    :attention: API change from XForms - upstream was
        fl_get_xyplot_xmapping(pFlObject, a, b)

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_xmapping = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_xyplot_xmapping",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_xmapping(FL_OBJECT * ob, float * a,
           float * b)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    a, pa = libr.make_float_and_pointer()
    b, pb = libr.make_float_and_pointer()
    libr.keep_elem_refs(pFlObject, a, b, pa, pb)
    _fl_get_xyplot_xmapping(pFlObject, pa, pb)
    return a.value, b.value


def fl_get_xyplot_ymapping(pFlObject):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object

    :return: *todo*
    :rtype: float, float

    :note: e.g. *todo*

    :attention: API change from XForms - upstream was
        fl_get_xyplot_ymapping(pFlObject, a, b)

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_ymapping = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_xyplot_ymapping",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_ymapping(FL_OBJECT * ob, float * a,
           float * b)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    a, pa = libr.make_float_and_pointer()
    b, pb = libr.make_float_and_pointer()
    libr.keep_elem_refs(pFlObject, a, b, pa, pb)
    _fl_get_xyplot_ymapping(pFlObject, pa, pb)
    return a.value, b.value


def fl_set_xyplot_keys(pFlObject, keys, valx, valy, align):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `keys` : str
        *todo*
      `valx` : float
        *todo*
      `valy` : float
        *todo*
      `align` : int
        alignment of xyplot keys. Values (from xfdata.py) FL_ALIGN_CENTER,
        FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
        FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP, FL_ALIGN_LEFT_BOTTOM,
        FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE, FL_ALIGN_VERT.
        Bitwise OR with FL_ALIGN_INSIDE is allowed.

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_keys = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_keys",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.STRING),
        cty.c_float, cty.c_float, cty.c_int],
        """void fl_set_xyplot_keys(FL_OBJECT * ob, char * * keys, float x,
           float y, int align)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    fvalx = libr.convert_to_float(valx)
    fvaly = libr.convert_to_float(valy)
    libr.check_admitted_value_in_list(align, xfdata.ALIGN_list)
    ialign = libr.convert_to_int(align)
    libr.keep_elem_refs(pFlObject, keys, valx, valy, align, fvalx, fvaly, ialign)
    _fl_set_xyplot_keys(pFlObject, keys, fvalx, fvaly, ialign)


def fl_set_xyplot_key(pFlObject, idnum, keytxt):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `idnum` : int
        *todo*
      `keytxt` : str
        *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_key = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_key",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, xfdata.STRING],
        """void fl_set_xyplot_key(FL_OBJECT * ob, int id,
           const char * key)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iidnum = libr.convert_to_int(idnum)
    skeytxt = libr.convert_to_string(keytxt)
    libr.keep_elem_refs(pFlObject, idnum, keytxt, iidnum, skeytxt)
    _fl_set_xyplot_key(pFlObject, iidnum, skeytxt)


def fl_set_xyplot_key_position(pFlObject, valx, valy, align):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `valx` : float
        *todo*
      `valy` : float
        *todo*
      `align` : int
        alignment of xyplot keys. Values (from xfdata.py) FL_ALIGN_CENTER,
        FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
        FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP, FL_ALIGN_LEFT_BOTTOM,
        FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE, FL_ALIGN_VERT
        Bitwise OR with FL_ALIGN_INSIDE is allowed.

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_key_position = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_key_position",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_float, cty.c_float,
        cty.c_int],
        """void fl_set_xyplot_key_position(FL_OBJECT * ob, float x,
           float y, int align)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    fvalx = libr.convert_to_float(valx)
    fvaly = libr.convert_to_float(valy)
    libr.check_admitted_value_in_list(align, xfdata.ALIGN_list)
    ialign = libr.convert_to_int(align)
    libr.keep_elem_refs(pFlObject, valx, valy, align, fvalx, fvaly, ialign)
    _fl_set_xyplot_key_position(pFlObject, fvalx, fvaly, ialign)


def fl_set_xyplot_key_font(pFlObject, style, size):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `style` : int
        label style. Values (from xfdata.py) FL_NORMAL_STYLE,
        FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
        FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
        FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
        FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
        FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
        FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
      `size` : int
        label size. Values (from xfdata.py) FL_TINY_SIZE, FL_SMALL_SIZE,
        FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE, FL_HUGE_SIZE,
        FL_DEFAULT_SIZE

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_key_font = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_key_font",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_key_font(FL_OBJECT * ob, int style,
           int size)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.check_admitted_value_in_list(style, xfdata.TEXTSTYLE_list)
    istyle = libr.convert_to_int(style)
    libr.check_admitted_value_in_list(size, xfdata.FONTSIZE_list)
    isize = libr.convert_to_int(size)
    libr.keep_elem_refs(pFlObject, style, size, istyle, isize)
    _fl_set_xyplot_key_font(pFlObject, istyle, isize)


def fl_get_xyplot_numdata(pFlObject, idnum):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `idnum` : int
        *todo*

    :return: num.
    :rtype: int

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_numdata = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_xyplot_numdata",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_get_xyplot_numdata(FL_OBJECT * ob, int id)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iidnum = libr.convert_to_int(idnum)
    libr.keep_elem_refs(pFlObject, idnum, iidnum)
    retval = _fl_get_xyplot_numdata(pFlObject, iidnum)
    return retval


# fl_set_xyplot_fontsize function placeholder (deprecated)
# fl_set_xyplot_fontstyle function placeholder (deprecated)


def fl_xyplot_s2w(pFlObject, sx, sy):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `sx` : float
        *todo*
      `sy` : float
        *todo*

    :return: wx, wy *todo*
    :rtype: float, float

    :note: e.g. *todo*

    :attention: API change from XForms - upstream was
        fl_xyplot_s2w(pFlObject, sx, sy, wx, wy)

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_xyplot_s2w = libr.cfuncproto(
        libr.load_so_libforms(), "fl_xyplot_s2w",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double,
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_float)],
        """void fl_xyplot_s2w(FL_OBJECT * ob, double sx, double sy,
           float * wx, float * wy)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    fsx = libr.convert_to_double(sx)
    fsy = libr.convert_to_double(sy)
    wx, pwx = libr.make_float_and_pointer()
    wy, pwy = libr.make_float_and_pointer()
    libr.keep_elem_refs(pFlObject, sx, sy, wx, pwx, wy, pwy, fsx, fsy)
    _fl_xyplot_s2w(pFlObject, fsx, fsy, pwx, pwy)
    return wx.value, wy.value


def fl_xyplot_w2s(pFlObject, wx, wy):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `wx` : float
        *todo*
      `wy` : float
        *todo*

    :return: sx, sy *todo*
    :rtype: float, float

    :note: e.g. *todo*

    :attention: API change from XForms - upstream was
        fl_xyplot_w2s(pFlObject, wx, wy)

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_xyplot_w2s = libr.cfuncproto(
        libr.load_so_libforms(), "fl_xyplot_w2s",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double,
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_float)],
        """void fl_xyplot_w2s(FL_OBJECT * ob, double wx, double wy,
           float * sx, float * sy)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    fwx = libr.convert_to_double(wx)
    fwy = libr.convert_to_double(wy)
    sx, psx = libr.make_float_and_pointer()
    sy, psy = libr.make_float_and_pointer()
    libr.keep_elem_refs(pFlObject, wx, wy, sx, psx, sy, psy, fwx, fwy)
    _fl_xyplot_w2s(pFlObject, fwx, fwy, psx, psy)
    return sx.value, sy.value


def fl_set_xyplot_xscale(pFlObject, scale, base):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `scale` : int
        *todo*
      `base` : float
        *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_xscale = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_xscale",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_double],
        """void fl_set_xyplot_xscale(FL_OBJECT * ob, int scale,
           double base)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iscale = libr.convert_to_int(scale)
    fbase = libr.convert_to_double(base)
    libr.keep_elem_refs(pFlObject, scale, base, iscale, fbase)
    _fl_set_xyplot_xscale(pFlObject, iscale, fbase)


def fl_set_xyplot_yscale(pFlObject, scale, base):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `scale` : int
        *todo*
      `base` : float
        *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_yscale = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_yscale",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_double],
        """void fl_set_xyplot_yscale(FL_OBJECT * ob, int scale,
           double base)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iscale = libr.convert_to_int(scale)
    fbase = libr.convert_to_double(base)
    libr.keep_elem_refs(pFlObject, scale, base, iscale, fbase)
    _fl_set_xyplot_yscale(pFlObject, iscale, fbase)


def fl_clear_xyplot(pFlObject):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_clear_xyplot = libr.cfuncproto(
        libr.load_so_libforms(), "fl_clear_xyplot",
        None, [cty.POINTER(xfdata.FL_OBJECT)],
        """void fl_clear_xyplot(FL_OBJECT * ob)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.keep_elem_refs(pFlObject)
    _fl_clear_xyplot(pFlObject)


def fl_set_xyplot_linewidth(pFlObject, idnum, lw):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `idnum` : int
        *todo*
      `lw` : int
        width of line

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """

    _fl_set_xyplot_linewidth = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_linewidth",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_linewidth(FL_OBJECT * ob, int id, int lw)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iidnum = libr.convert_to_int(idnum)
    ilw = libr.convert_to_int(lw)
    libr.keep_elem_refs(pFlObject, idnum, lw, iidnum, ilw)
    _fl_set_xyplot_linewidth(pFlObject, iidnum, ilw)


def fl_set_xyplot_xgrid(pFlObject, xgrid):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `xgrid` : int
        *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """

    _fl_set_xyplot_xgrid = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_xgrid",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_xgrid(FL_OBJECT * ob, int xgrid)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    ixgrid = libr.convert_to_int(xgrid)
    libr.keep_elem_refs(pFlObject, xgrid, ixgrid)
    _fl_set_xyplot_xgrid(pFlObject, ixgrid)


def fl_set_xyplot_ygrid(pFlObject, ygrid):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `ygrid` : int
        *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_ygrid = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_ygrid",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_ygrid(FL_OBJECT * ob, int ygrid)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iygrid = libr.convert_to_int(ygrid)
    libr.keep_elem_refs(pFlObject, ygrid, iygrid)
    _fl_set_xyplot_ygrid(pFlObject, iygrid)


def fl_set_xyplot_grid_linestyle(pFlObject, linestyle):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `linestyle` : int
        style of the line to draw. Values (from xfdata module.py) FL_SOLID,
        FL_USERDASH, FL_USERDOUBLEDASH, FL_DOT, FL_DOTDASH, FL_DASH,
        FL_LONGDASH

    :return: num.
    :rtype: int

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_grid_linestyle = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_grid_linestyle",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_xyplot_grid_linestyle(FL_OBJECT * ob, int style)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.check_admitted_value_in_list(linestyle, xfdata.LINESTYLE_list)
    ilinestyle = libr.convert_to_int(linestyle)
    libr.keep_elem_refs(pFlObject, linestyle, ilinestyle)
    retval = _fl_set_xyplot_grid_linestyle(pFlObject, ilinestyle)
    return retval


def fl_set_xyplot_alphaxtics(pFlObject, m, s):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `m` : str
        *todo*
      `s` : str
        unused *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_alphaxtics = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_alphaxtics",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING, xfdata.STRING],
        """void fl_set_xyplot_alphaxtics(FL_OBJECT * ob, const char * m,
            const char * s)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    sm = libr.convert_to_string(m)
    ss = libr.convert_to_string(s)
    libr.keep_elem_refs(pFlObject, m, s, sm, ss)
    _fl_set_xyplot_alphaxtics(pFlObject, sm, ss)


def fl_set_xyplot_alphaytics(pFlObject, m, s):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `m` : str
        *todo*
      `s` : str
        unused *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_alphaytics = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_alphaytics",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING, xfdata.STRING],
        """void fl_set_xyplot_alphaytics(FL_OBJECT * ob, const char * m,
            const char * s)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    sm = libr.convert_to_string(m)
    ss = libr.convert_to_string(s)
    libr.keep_elem_refs(pFlObject, m, s, sm, ss)
    _fl_set_xyplot_alphaytics(pFlObject, sm, ss)


def fl_set_xyplot_fixed_xaxis(pFlObject, lm, rm):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `lm` : str
        left? *todo*
      `rm` : str
        right? *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_fixed_xaxis = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_fixed_xaxis",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING, xfdata.STRING],
        """void fl_set_xyplot_fixed_xaxis(FL_OBJECT * ob, const char * lm,
            const char * rm)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    slm = libr.convert_to_string(lm)
    srm = libr.convert_to_string(rm)
    libr.keep_elem_refs(pFlObject, lm, rm, slm, srm)
    _fl_set_xyplot_fixed_xaxis(pFlObject, slm, srm)


def fl_set_xyplot_fixed_yaxis(pFlObject, bm, tm):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `bm` : str
        bottom? *todo*
      `tm` : str
        top? *todo*

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_fixed_yaxis = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_fixed_yaxis",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING, xfdata.STRING],
        """void fl_set_xyplot_fixed_yaxis(FL_OBJECT * ob, const char * bm,
            const char * tm)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    sbm = libr.convert_to_string(bm)
    stm = libr.convert_to_string(tm)
    libr.keep_elem_refs(pFlObject, bm, tm, sbm, stm)
    _fl_set_xyplot_fixed_yaxis(pFlObject, sbm, stm)


def fl_interpolate(wx, wy, nin, x, y, grid, ndeg):
    """*todo*

    --

    :Parameters:
      `wx` : float
        *todo*
      `wy` : float
        *todo*
      `nin` : int
        *todo*
      `x` : float
        *todo*
      `y` : float
        *todo*
      `grid` : float
        *todo*
      `ndeg` : int
        *todo*

    :return: num.
    :rtype: int

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_interpolate = libr.cfuncproto(
        libr.load_so_libforms(), "fl_interpolate",
        cty.c_int, [cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_int, cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_double, cty.c_int],
        """int fl_interpolate(const float * wx, const float * wy, int nin,
            float * x, float * y, double grid, int ndeg)""")
    libr.check_if_initialized()
    inin = libr.convert_to_int(nin)
    fgrid = libr.convert_to_double(grid)
    indeg = libr.convert_to_int(ndeg)
    libr.keep_elem_refs(wx, wy, nin, x, y, grid, ndeg, inin, fgrid, indeg)
    retval = _fl_interpolate(wx, wy, inin, x, y, fgrid, indeg)
    return retval


def fl_spline_interpolate(wx, wy, nin, x, y, grid):
    """*todo*

    --

    :Parameters:
      `wx` : float
        *todo*
      `wy` : float
        *todo*
      `nin` : int
        *todo*
      `x` : float
        *todo*
      `y` : float
        *todo*
      `grid` : float
        *todo*

    :return: num.
    :rtype: int

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_spline_interpolate = libr.cfuncproto(
        libr.load_so_libforms(), "fl_spline_interpolate",
        cty.c_int, [cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_int, cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_double],
        """int fl_spline_interpolate(const float * wx, const float * wy,
            int nin, float * x, float * y, double grid)""")
    libr.check_if_initialized()
    inin = libr.convert_to_int(nin)
    fgrid = libr.convert_to_double(grid)
    libr.keep_elem_refs(wx, wy, nin, x, y, grid, inin, fgrid)
    retval = _fl_spline_interpolate(wx, wy, inin, x, y, fgrid)
    return retval


def fl_set_xyplot_symbol(pFlObject, idnum, py_XyPlotSymbol):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `idnum` : int
        *todo*
      `py_XyPlotSymbol` : python function to set symbol, no return
        name referring to function(pFlObject, int, pPoint, int, int, int)

    :return: old xyplotsymbol function
    :rtype: pointer to xfdata.FL_XYPLOT_SYMBOL

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    #FL_XYPLOT_SYMBOL = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_OBJECT),
    #    cty.c_int, cty.POINTER(xfdata.FL_POINT), cty.c_int, cty.c_int,
    #    cty.c_int)
    _fl_set_xyplot_symbol = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_symbol",
        xfdata.FL_XYPLOT_SYMBOL, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        xfdata.FL_XYPLOT_SYMBOL],
        """FL_XYPLOT_SYMBOL fl_set_xyplot_symbol(FL_OBJECT * ob, int id,
           FL_XYPLOT_SYMBOL symbol)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iidnum = libr.convert_to_int(idnum)
    c_XyPlotSymbol = xfdata.FL_XYPLOT_SYMBOL(py_XyPlotSymbol)
    libr.keep_cfunc_refs(c_XyPlotSymbol, py_XyPlotSymbol)
    libr.keep_elem_refs(pFlObject, idnum, iidnum)
    retval = _fl_set_xyplot_symbol(pFlObject, iidnum, c_XyPlotSymbol)
    return retval


def fl_set_xyplot_mark_active(pFlObject, y):
    """*todo*

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        xyplot object
      `y` : int
        *todo*

    :return: num.
    :rtype: int

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_mark_active = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_xyplot_mark_active",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_xyplot_mark_active(FL_OBJECT * ob, int y)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iy = libr.convert_to_int(y)
    libr.keep_elem_refs(pFlObject, y, iy)
    retval = _fl_set_xyplot_mark_active(pFlObject, iy)
    return retval


