#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage xyplot flobjects.
"""

#    Copyright (C) 2009, 2010, 2011  Luca Lazzaroni "LukenShiro"
#    e-mail: <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared flobject libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata


#####################
# forms.h (xyplot.h)
#####################

# Others

# fl_create_xyplot function placeholder (internal)


def fl_add_xyplot(plottype, xpos, ypos, width, height, label):
    """fl_add_xyplot(plottype, xpos, ypos, width, height, label)
    -> ptr_flobject

    Adds an xyplot flobject. It gives an easy way to display a tabulated math
    function generated on the fly or from an existing data file. An active
    xyplot is also available to model and/or change such a function.

    Parameters
    ----------
        plottype : int
            type of xyplot to be added. Values (from xfdata.py)
            - FL_NORMAL_XYPLOT (xyplot type with solid line)
            - FL_SQUARE_XYPLOT (xyplot type has added square)
            - FL_CIRCLE_XYPLOT (xyplot type has added circle)
            - FL_FILL_XYPLOT (xyplot type is filled completely)
            - FL_POINTS_XYPLOT (xyplot type has only data points)
            - FL_DASHED_XYPLOT (xyplot type has dashed line)
            - FL_IMPULSE_XYPLOT (Data drawn by vertical lines)
            - FL_ACTIVE_XYPLOT (xyplot type accepts interactive manipulations)
            - FL_EMPTY_XYPLOT (Only the axes are drawn)
            - FL_DOTTED_XYPLOT (Data drawn as a dotted line)
            - FL_DOTDASHED_XYPLOT (Data drawn as a dash-dot-dash line)
            - FL_LONGDASHED_XYPLOT (xyplot type has long dashed line)
            - FL_LINEPOINTS_XYPLOT (xyplot type has lines and points).
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of xyplot

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject added

    Examples
    --------
        >>> pxyplobj = fl_add_xyplot(xfdata.FL_CIRCLE_XYPLOT,
                124, 145, 320, 230, "MyXyplot")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_xyplot = library.cfuncproto(
        library.load_so_libforms(), "fl_add_xyplot",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_xyplot(int t, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_flinitialized()
    library.checkfatal_allowed_value_in_list(plottype, xfdata.XYPLOTTYPE_list)
    i_plottype = library.convert_to_intc(plottype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_stringc(label)
    library.keep_elem_refs(plottype, xpos, ypos, width, height, label, \
            i_plottype, i_xpos, i_ypos, i_width, i_height, s_label)
    retval = _fl_add_xyplot(i_plottype, i_xpos, i_ypos, i_width, i_height, \
            s_label)
    return retval


def fl_set_xyplot_data(ptr_flobject, xposlist, yposlist, numpoints, title,
        xlabel, ylabel):
    """fl_set_xyplot_data(ptr_flobject, xposlist, yposlist, numpoints,
    title, xlabel, ylabel)

    Defines or replaces data for a xyplot flobject, using supplied values. If
    the xyplot flobject being set exists already, old data will be cleared.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        xposlist : list_of_float
            list of values for the tabulated function on the x-axis
        yposlist : list_of_float
            list of values for the tabulated function on the y-axis
        numpoints : int
            number of data points
        title : str
            title drawn above the xyplot
        xlabel : str
            label for values on x-axis
        ylabel : str
            label for values on y-axis

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_xyplot_data = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float), cty.c_int, xfdata.STRING, xfdata.STRING,
        xfdata.STRING],
        """void fl_set_xyplot_data(FL_OBJECT * ob, float * x, float * y,
           int n, const char * title, const char * xlabel,
           const char * ylabel)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    ptr_xposlist = library.convert_to_ptr_floatc(xposlist)
    ptr_yposlist = library.convert_to_ptr_floatc(yposlist)
    i_numpoints = library.convert_to_intc(numpoints)
    s_title = library.convert_to_stringc(title)
    s_xlabel = library.convert_to_stringc(xlabel)
    s_ylabel = library.convert_to_stringc(ylabel)
    library.keep_elem_refs(ptr_flobject, xposlist, yposlist, numpoints, \
                ptr_xposlist, ptr_yposlist, title, xlabel, ylabel, \
                i_numpoints, s_title, s_xlabel, s_ylabel)
    _fl_set_xyplot_data(ptr_flobject, ptr_xposlist, ptr_yposlist, \
                i_numpoints, s_title, s_xlabel, s_ylabel)


def fl_set_xyplot_data_double(ptr_flobject, xposlist, yposlist, numpoints,
        title, xlabel, ylabel):
    """fl_set_xyplot_data_double(ptr_flobject, xposlist, yposlist, numpoints,
    title, xlabel, ylabel)

    Set or replaces data for a xyplot flobject, using supplied values. If
    the xyplot flobject being set exists already, old data will be cleared.
    It's about the same as fl_set_xyplot_data(), but uses double type
    internally.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        xposlist : list_of_float
            list of values for the tabulated function on the x-axis
        yposlist : list_of_float
            list of values for the tabulated function on the y-axis
        npoints : int
            number of data points
        title : str
            title drawn above the xyplot
        xlabel : str
            label for values on x-axis
        ylabel : str
            label for values on y-axis

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_xyplot_data_double = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_data_double",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double), cty.c_int, xfdata.STRING, xfdata.STRING,
        xfdata.STRING],
        """void fl_set_xyplot_data_double(FL_OBJECT * ob, double * x,
           double * y, int n, const char * title, const char * xlabel,
           const char * ylabel)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    #ptr_xlist = cty.cast(xlist, cty.POINTER(cty.c_double))
    ptr_xposlist = library.convert_to_ptr_doublec(xposlist)
    #ptr_ylist = cty.cast(ylist, cty.POINTER(cty.c_double))
    ptr_yposlist = library.convert_to_ptr_doublec(yposlist)
    i_numpoints = library.convert_to_intc(numpoints)
    s_title = library.convert_to_stringc(title)
    s_xlabel = library.convert_to_stringc(xlabel)
    s_ylabel = library.convert_to_stringc(ylabel)
    library.keep_elem_refs(ptr_flobject, xposlist, yposlist, numpoints, \
            title, xlabel, ylabel, ptr_xposlist, ptr_yposlist, i_numpoints, \
            s_title, s_xlabel, s_ylabel)
    _fl_set_xyplot_data_double(ptr_flobject, ptr_xposlist, ptr_yposlist, \
            i_numpoints, s_title, s_xlabel, s_ylabel)


def fl_set_xyplot_file(ptr_flobject, fname, title, xlabel, ylabel):
    """fl_set_xyplot_file(ptr_flobject, fname, title, xlabel, ylabel)
    -> numpoints

    Defines or replaces data for a xyplot flobject, by loading a tabulated
    function from a file. The data file should be an ASCII file consisting of
    data lines. Each data line must have two columns, indicating the (x,y)
    pair with a space, tab or comma (,) separating the two columns. Lines that
    start with any of "!", ";" or "#" are considered to be comments and are
    ignored.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        fname : str
            name of file.
        title : str
            title of xyplot
        xlabel : str
            label for horizontal values
        ylabel : str
            label for vertical values

    Returns
    -------
        numpoints : int
            number of data points successfully read, or 0 (on failure, if
            the file cannot be opened)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_xyplot_file = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_file",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING,
        xfdata.STRING, xfdata.STRING, xfdata.STRING],
        """int fl_set_xyplot_file(FL_OBJECT * ob, const char * f,
           const char * title, const char * xl, const char * yl)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    s_fname = library.convert_to_stringc(fname)
    s_title = library.convert_to_stringc(title)
    s_xlabel = library.convert_to_stringc(xlabel)
    s_ylabel = library.convert_to_stringc(ylabel)
    library.keep_elem_refs(ptr_flobject, fname, title, xlabel, ylabel, \
            s_fname, s_title, s_xlabel, s_ylabel)
    retval = _fl_set_xyplot_file(ptr_flobject, s_fname, s_title, \
            s_xlabel, s_ylabel)
    return retval


def fl_insert_xyplot_data(ptr_flobject, ovlnum, indxpt, xpos, ypos):
    """fl_insert_xyplot_data(ptr_flobject, ovlnum, indxpt, xpos, ypos)

    Inserts a point after a supplied index position in a xyplot flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ovlnum : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays()
        indxpt : int
            the index of the point after which the data new point is to be
            inserted. If it is -1 inserts the point in front. To append to the
            data, set it to be equal or larger than the return value of
            fl_get_xyplot_numdata().
        xpos : float
            horizontal position of the point
        ypos : float
            vertical position of the point

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_insert_xyplot_data = library.cfuncproto(
        library.load_so_libforms(), "fl_insert_xyplot_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int,
        cty.c_double, cty.c_double],
        """void fl_insert_xyplot_data(FL_OBJECT * ob, int id, int n,
           double x, double y)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_ovlnum = library.convert_to_intc(ovlnum)
    i_indxpt = library.convert_to_intc(indxpt)
    f_xpos = library.convert_to_doublec(xpos)
    f_ypos = library.convert_to_doublec(ypos)
    library.keep_elem_refs(ptr_flobject, ovlnum, indxpt, xpos, ypos, \
            i_ovlnum, i_indxpt, f_xpos, f_ypos)
    _fl_insert_xyplot_data(ptr_flobject, i_ovlnum, i_indxpt, f_xpos, f_ypos)


def fl_add_xyplot_text(ptr_flobject, xpos, ypos, text, align, colr):
    """fl_add_xyplot_text(ptr_flobject, xpos, ypos, text, align, colr)

    Places an inset text on an xyplot flobject (up to
    xfdata.FL_MAX_XYPLOTOVERLAY or the value set via
    fl_set_xyplot_maxoverlays() of such insets can be accommodated).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        xpos : float
            horizontal coordinates where text is to be placed
        ypos : float
            vertical coordinates where text is to be placed
        text : str
            text to be added to xyplot. If it starts with '@', a symbol is
            drawn.
        align : int
            alignment of text. Values (from xfdata.py)
            - FL_ALIGN_CENTER (In the middle of the box, inside it),
            - FL_ALIGN_TOP (To the top of the box, outside it),
            - FL_ALIGN_BOTTOM (To the bottom of the box, outside it),
            - FL_ALIGN_LEFT (To the left of the box, outside it),
            - FL_ALIGN_RIGHT (To the right of the box, outside it),
            - FL_ALIGN_LEFT_TOP (To the left and top of the box, outside it),
            - FL_ALIGN_RIGHT_TOP (To the right and top of the box, outside it),
            - FL_ALIGN_LEFT_BOTTOM (To the left and bottom of box, outside),
            - FL_ALIGN_RIGHT_BOTTOM (To the right and bottom of box, outside),
            - FL_ALIGN_INSIDE (places the text inside the box),
            - FL_ALIGN_VERT (not functional yet).
            Bitwise OR with FL_ALIGN_INSIDE is allowed.
        colr : long_pos
            XForms colormap index as color

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_xyplot_text = library.cfuncproto(
        library.load_so_libforms(), "fl_add_xyplot_text",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double,
        xfdata.STRING, cty.c_int, xfdata.FL_COLOR],
        """void fl_add_xyplot_text(FL_OBJECT * ob, double x, double y,
           const char * text, int al, FL_COLOR col)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    #library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    f_xpos = library.convert_to_doublec(xpos)
    f_ypos = library.convert_to_doublec(ypos)
    s_text = library.convert_to_stringc(text)
    library.checkfatal_allowed_value_in_list(align, xfdata.ALIGN_list)
    i_align = library.convert_to_intc(align)
    ul_colr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(ptr_flobject, xpos, ypos, text, align, colr, \
            f_xpos, f_ypos, s_text, i_align, ul_colr)
    _fl_add_xyplot_text(ptr_flobject, f_xpos, f_ypos, s_text, i_align, ul_colr)


def fl_delete_xyplot_text(ptr_flobject, text):
    """fl_delete_xyplot_text(ptr_flobject, text)

    Removes an inset text from a xyplot flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        text : str
            text to be deleted from xyplot

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_delete_xyplot_text = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_xyplot_text",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_delete_xyplot_text(FL_OBJECT * ob, const char * text)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    s_text = library.convert_to_stringc(text)
    library.keep_elem_refs(ptr_flobject, text, s_text)
    _fl_delete_xyplot_text(ptr_flobject, s_text)


def fl_set_xyplot_maxoverlays(ptr_flobject, numovls):
    """fl_set_xyplot_maxoverlays(ptr_flobject, numovls) -> oldmaxovls

    Changes the maximum number of overlays a flobject can have. By default,
    it is 32.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        numovls : int
            new maximum number of overlays

    Returns
    -------
        oldmaxovls : int
            previous maximum number of overlays

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_xyplot_maxoverlays = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_maxoverlays",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_xyplot_maxoverlays(FL_OBJECT * ob, int maxover)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_numovls = library.convert_to_intc(numovls)
    library.keep_elem_refs(ptr_flobject, numovls, i_numovls)
    retval = _fl_set_xyplot_maxoverlays(ptr_flobject, i_numovls)
    return retval


def fl_add_xyplot_overlay(ptr_flobject, ovlnum, xposlist, yposlist,
        numpoints, colr):
    """fl_add_xyplot_overlay(ptr_flobject, ovlnum, xposlist, yposlist,
    numpoints, colr)

    Overlays several plots together.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ovlnum : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays()
        xposlist : list_of_float
            horizontal position values
        yposlist : list_of_float
            vertical position values
        numpoints : int
            number of data points
        colr : long_pos
            XForms colormap index as color

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_xyplot_overlay = library.cfuncproto(
        library.load_so_libforms(), "fl_add_xyplot_overlay",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_float), cty.c_int,
        xfdata.FL_COLOR],
        """void fl_add_xyplot_overlay(FL_OBJECT * ob, int id, float * x,
           float * y, int n, FL_COLOR col)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    #library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    i_ovlnum = library.convert_to_intc(ovlnum)
    ptr_xposlist = library.convert_to_ptr_floatc(xposlist)
    ptr_yposlist = library.convert_to_ptr_floatc(yposlist)
    i_numpoints = library.convert_to_intc(numpoints)
    ul_colr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(ptr_flobject, ovlnum, xposlist, yposlist, \
            numpoints, colr, i_ovlnum, ptr_xposlist, ptr_yposlist, \
            i_numpoints, ul_colr)
    _fl_add_xyplot_overlay(ptr_flobject, i_ovlnum, ptr_xposlist, \
            ptr_yposlist, i_numpoints, ul_colr)


def fl_add_xyplot_overlay_file(ptr_flobject, ovlnum, fname, colr):
    """fl_add_xyplot_overlay_file(ptr_flobject, ovlnum, fname, colr)
    -> numpoints

    Adds an overlay, using a data file to specify the (x,y) function for
    the base data.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ovlnum : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays()
        fname : str
            name of file
        colr : long_pos
            XForms colormap index as color

    Returns
    -------
        numpoints : int
            number of data points successfully read

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_add_xyplot_overlay_file = library.cfuncproto(
        library.load_so_libforms(), "fl_add_xyplot_overlay_file",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, xfdata.STRING,
        xfdata.FL_COLOR],
        """int fl_add_xyplot_overlay_file(FL_OBJECT * ob, int id,
        const char * f, FL_COLOR c)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_ovlnum = library.convert_to_intc(ovlnum)
    s_fname = library.convert_to_stringc(fname)
    #library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    ul_colr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(ptr_flobject, ovlnum, fname, colr, i_ovlnum, \
            s_fname, ul_colr)
    retval = _fl_add_xyplot_overlay_file(ptr_flobject, i_ovlnum, \
            s_fname, ul_colr)
    return retval


# fl_set_xyplot_return() function placeholder (internal)


def fl_set_xyplot_xtics(ptr_flobject, ticmajor, ticminor):
    """fl_set_xyplot_xtics(ptr_flobject, ticmajor, ticminor)

    Changes the number of tic marks of a xyplot flobject on x-axis. The actual
    scaling routine may choose a value other than that requested if it decides
    that this would make the plot look nicer, thus major and minor are only
    taken as a hint to the scaling routine. However, in almost all cases the
    scaling routine will not generate a major that differs from the requested
    value by more than 3. fl_set_xyplot_alphaxtics() cannot be active at the
    same time and the one that gets used is the one that was set last.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ticmajor : int
            number of tic marks to be placed on the plot. If it is -1
            suppresses the tic marks completely, if it is 0 restores the
            default settings.
        ticminor : int
            number of divisions between major tic marks. If it is -1
            suppresses the tic marks completely, if it is 0 restores the
            default settings.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_xyplot_xtics = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_xtics",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_xtics(FL_OBJECT * ob, int major, int minor)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_ticmajor = library.convert_to_intc(ticmajor)
    i_ticminor = library.convert_to_intc(ticminor)
    library.keep_elem_refs(ptr_flobject, ticmajor, ticminor, i_ticmajor, \
            i_ticminor)
    _fl_set_xyplot_xtics(ptr_flobject, i_ticmajor, i_ticminor)


def fl_set_xyplot_ytics(ptr_flobject, ticmajor, ticminor):
    """fl_set_xyplot_ytics(ptr_flobject, ticmajor, ticminor)

    Changes the number of tic marks of a xyplot flobject on y-axis. The actual
    scaling routine may choose a value other than that requested if it decides
    that this would make the plot look nicer, thus major and minor are only
    taken as a hint to the scaling routine. However, in almost all cases the
    scaling routine will not generate a major that differs from the requested
    value by more than 3. fl_set_xyplot_alphaytics() cannot be active at the
    same time and the one that gets used is the one that was set last.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ticmajor : int
            number of tic marks to be placed on the plot. If it is -1
            suppresses the tic marks completely, if it is 0 restores the
            default settings.
        ticminor : int
            number of divisions between major tic marks. If it is -1
            suppresses the tic marks completely, if it is 0 restores the
            default settings.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_xyplot_ytics = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_ytics",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_ytics(FL_OBJECT * ob, int major, int minor)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_ticmajor = library.convert_to_intc(ticmajor)
    i_ticminor = library.convert_to_intc(ticminor)
    library.keep_elem_refs(ptr_flobject, ticmajor, ticminor, i_ticmajor, \
            i_ticminor)
    _fl_set_xyplot_ytics(ptr_flobject, i_ticmajor, i_ticminor)


def fl_set_xyplot_xbounds(ptr_flobject, minbound, maxbound):
    """fl_set_xyplot_xbounds(ptr_flobject, minbound, maxbound)

    Defines and uses absolute value limits on x-axis of a xyplot flobject as
    opposed to actual bounds in data.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        minbound : float
            minimum value bound to set
        maxbound : float
            maximum value bound to set

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_xyplot_xbounds = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_xbounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_xyplot_xbounds(FL_OBJECT * ob, double xmin,
           double xmax)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_minbound = library.convert_to_doublec(minbound)
    f_maxbound = library.convert_to_doublec(maxbound)
    library.keep_elem_refs(ptr_flobject, minbound, maxbound, f_minbound, \
            f_maxbound)
    _fl_set_xyplot_xbounds(ptr_flobject, f_minbound, f_maxbound)


def fl_set_xyplot_ybounds(ptr_flobject, minbound, maxbound):
    """fl_set_xyplot_ybounds(ptr_flobject, minbound, maxbound)

    Defines and uses absolute value limits on y-axis of a xyplot flobject as
    opposed to actual bounds in data.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        minbound : float
            minimum value bound to set
        maxbound : float
            maximum value bound to set

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_xyplot_ybounds = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_ybounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_xyplot_ybounds(FL_OBJECT * ob, double ymin,
           double ymax)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_minbound = library.convert_to_doublec(minbound)
    f_maxbound = library.convert_to_doublec(maxbound)
    library.keep_elem_refs(ptr_flobject, minbound, maxbound, f_minbound, \
            f_maxbound)
    _fl_set_xyplot_ybounds(ptr_flobject, f_minbound, f_maxbound)


def fl_get_xyplot_xbounds(ptr_flobject):
    """fl_get_xyplot_xbounds(ptr_flobject) -> minbound, maxbound

    Finds out the current value limits for x-axis of a xyplot flobject. The
    bounds returned are those used in clipping the data, which are not
    necessarily the bounds used in computing the world/screen mapping due to
    tic rounding.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject

    Returns
    -------
        minbound : float
            minimum value bound
        maxbound : float
            maximum value bound

    Examples
    --------
        >>> *todo*

    API_diversion
    -------------
        API changed from XForms, upstream is
        fl_get_xyplot_xbounds(ptr_flobject, minbound, maxbound)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_xyplot_xbounds = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_xbounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_xbounds(FL_OBJECT * ob, float * xmin,
           float * xmax)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_minbound, ptr_minbound = library.make_floatc_and_pointer()
    f_maxbound, ptr_maxbound = library.make_floatc_and_pointer()
    library.keep_elem_refs(ptr_flobject, f_minbound, f_maxbound, \
            ptr_minbound, ptr_maxbound)
    _fl_get_xyplot_xbounds(ptr_flobject, ptr_minbound, ptr_maxbound)
    return f_minbound.value, f_maxbound.value


def fl_get_xyplot_ybounds(ptr_flobject):
    """fl_get_xyplot_ybounds(ptr_flobject) -> minbound, maxbound

    Finds out the current value limits for y-axis of a xyplot flobject. The
    bounds returned are those used in clipping the data, which are not
    necessarily the bounds used in computing the world/screen mapping due to
    tic rounding.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject

    Returns
    -------
        minbound : float
            minimum value bound
        maxbound : float
            maximum value bound

    Examples
    --------
        >>> *todo*

    API_diversion
    -------------
        API changed from XForms, upstream is
        fl_get_xyplot_ybounds(ptr_flobject, minbound, maxbound)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_xyplot_ybounds = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_ybounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_ybounds(FL_OBJECT * ob, float * ymin,
           float * ymax)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_minbound, ptr_minbound = library.make_floatc_and_pointer()
    f_maxbound, ptr_maxbound = library.make_floatc_and_pointer()
    library.keep_elem_refs(ptr_flobject, f_minbound, f_maxbound, \
            ptr_minbound, ptr_maxbound)
    _fl_get_xyplot_ybounds(ptr_flobject, ptr_minbound, ptr_maxbound)
    return f_minbound.value, f_maxbound.value


def fl_get_xyplot(ptr_flobject):
    """fl_get_xyplot(ptr_flobject) -> xpos, ypos, dataindx

    Finds out the current value of the point of a xyplot flobject that has
    changed.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject

    Returns
    -------
        xpos : float
            horizontal position of data point
        ypos : float
            vertical position of data point
        dataindx : int
            the data index starting from 0, or -1 (if no point is changed)

    Examples
    --------
        >>> *todo*

    API_diversion
    -------------
        API changed from XForms, upstream is
        fl_get_xyplot(ptr_flobject, xpos, ypos, i)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_get_xyplot = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
        """void fl_get_xyplot(FL_OBJECT * ob, float * x, float * y,
           int * i)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_xpos, ptr_xpos = library.make_floatc_and_pointer()
    f_ypos, ptr_ypos = library.make_floatc_and_pointer()
    i_dataindx, ptr_dataindx = library.make_intc_and_pointer()
    library.keep_elem_refs(ptr_flobject, f_xpos, f_ypos, i_dataindx, \
            ptr_xpos, ptr_ypos, ptr_dataindx)
    _fl_get_xyplot(ptr_flobject, ptr_xpos, ptr_ypos, ptr_dataindx)
    return f_xpos.value, f_ypos.value, i_dataindx.value


def fl_get_xyplot_data_size(ptr_flobject):
    """fl_get_xyplot_data_size(ptr_flobject) -> numpoints

    Finds out the number of points a call of fl_get_xyplot_data() will return.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject

    Returns
    -------
        numpoints : int
            number of points returned by fl_get_xyplot_data()

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_xyplot_data_size = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_data_size",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_xyplot_data_size(FL_OBJECT * obj)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_xyplot_data_size(ptr_flobject)
    return retval


def fl_get_xyplot_data(ptr_flobject):
    """fl_get_xyplot_data(ptr_flobject) -> xvalarray, yvalarray, numpoints

    Finds out a copy of the current xyplot data.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject

    Returns
    -------
        xvalarray : list of floats?
            array of x-axis values
        yvalarray : list of floats?
            array of y-axis values
        numpoints : int
            number of data points

    Examples
    --------
        >>> *todo*

    API_diversion
    -------------
        API changed from XForms, upstream is
        fl_get_xyplot_data(ptr_flobject, xpos, ypos, n)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_xyplot_data = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
        """void fl_get_xyplot_data(FL_OBJECT * ob, float * x, float * y,
           int * n)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_xpos, ptr_xpos = library.make_floatc_and_pointer()
    f_ypos, ptr_ypos = library.make_floatc_and_pointer()
    i_numpoints, ptr_numpoints = library.make_intc_and_pointer()
    library.keep_elem_refs(ptr_flobject, f_xpos, f_ypos, i_numpoints, \
            ptr_xpos, ptr_ypos, ptr_numpoints)
    _fl_get_xyplot_data(ptr_flobject, ptr_xpos, ptr_ypos, ptr_numpoints)
    return f_xpos.value, f_ypos.value, i_numpoints.value


# TODO: verify if it can be suppressed - problematic --LK
def fl_get_xyplot_data_pointer(ptr_flobject, ovlnum):
    """fl_get_xyplot_data_pointer(ptr_flobject, ovlnum)
    -> ptr_xposval, ptr_yposval, numpoints

    Finds out the pointer to the data of xyplot flobject rather (instead of a
    copy of the data).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ovlnum : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays()

    Returns
    -------
        ptr_xposval : list_of_floats?
            pointer to list of x-axis values?
        ptr_yposval : list_of_floats?
            pointer to list of y-axis values?
        numpoints : int
            number of data points

    Examples
    --------
        >>> *todo*

    API_diversion
    -------------
        API changed from XForms, upstream is
        fl_get_xyplot_data_pointer(ptr_flobject, ovlnum, xpos, ypos, n)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_xyplot_data_pointer = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_data_pointer",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        cty.POINTER(cty.POINTER(cty.c_float)),
        cty.POINTER(cty.POINTER(cty.c_float)), cty.POINTER(cty.c_int)],
        """void fl_get_xyplot_data_cty.POINTER(FL_OBJECT * ob, int id,
           float * * x, float * * y, int * n)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_ovlnum = library.convert_to_intc(ovlnum)
    f_xpos, ptr_xpos = library.make_floatc_and_pointer()
    f_ypos, ptr_ypos = library.make_floatc_and_pointer()
    i_numpoints, ptr_numpoints = library.make_intc_and_pointer()
    library.keep_elem_refs(ptr_flobject, ovlnum, i_ovlnum, f_xpos, f_ypos, \
            i_numpoints, ptr_xpos, ptr_ypos, ptr_numpoints)
    _fl_get_xyplot_data_pointer(ptr_flobject, i_ovlnum, ptr_xpos, ptr_ypos, \
            ptr_numpoints)
    return f_xpos.value, f_ypos.value, i_numpoints.value


def fl_get_xyplot_overlay_data(ptr_flobject, ovlnum):
    """fl_get_xyplot_overlay_data(ptr_flobject, ovlnum)
    -> xposval, yposval, numpoints

    Finds out the current data of an overlay of a xyplot flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ovlnum : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays(). If it is 0 uses
            the base dataset

    Returns
    -------
        xposval : float
            x-axis value
        yposval : float
            y-axis value
        numpoints : int
            number of data points

    Examples
    --------
        >>> *todo*

    API_diversion
    ----------
        API changed from XForms, upstream is
        fl_get_xyplot_overlay_data(ptr_flobject, ovlnum, xpos, ypos, n)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_xyplot_overlay_data = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_overlay_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_int)],
        """void fl_get_xyplot_overlay_data(FL_OBJECT * ob, int id,
           float * x, float * y, int * n)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_ovlnum = library.convert_to_intc(ovlnum)
    f_xpos, ptr_xpos = library.make_floatc_and_pointer()
    f_ypos, ptr_ypos = library.make_floatc_and_pointer()
    i_numpoints, ptr_numpoints = library.make_intc_and_pointer()
    library.keep_elem_refs(ptr_flobject, ovlnum, i_ovlnum, f_xpos, f_ypos, \
            i_numpoints, ptr_xpos, ptr_ypos, ptr_numpoints)
    _fl_get_xyplot_overlay_data(ptr_flobject, i_ovlnum, ptr_xpos, \
            ptr_ypos, ptr_numpoints)
    return f_xpos.value, f_ypos.value, i_numpoints.value


def fl_set_xyplot_overlay_type(ptr_flobject, ovlnum, plottype):
    """fl_set_xyplot_overlay_type(ptr_flobject, ovlnum, plottype)

    Changes the type for an overlay of a xyplot flobject. The type used in
    overlay plot is the same as the flobject itself. Note that although the
    API of adding an overlay is similar to adding a flobject, an xyplot
    overlay is not a separate object, it is simply a property of an already
    existing xyplot.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ovlnum : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays()
        plottype : int
            type of xyplot.  Values (from xfdata.py)
            - FL_NORMAL_XYPLOT (xyplot type with solid line),
            - FL_SQUARE_XYPLOT (xyplot type has added square),
            - FL_CIRCLE_XYPLOT (xyplot type has added circle),
            - FL_FILL_XYPLOT (xyplot type is filled completely),
            - FL_POINTS_XYPLOT (xyplot type has only data points),
            - FL_DASHED_XYPLOT (xyplot type has dashed line),
            - FL_IMPULSE_XYPLOT (Data drawn by vertical lines),
            - FL_ACTIVE_XYPLOT (xyplot type accepts interactive manipulations),
            - FL_EMPTY_XYPLOT (Only the axes are drawn),
            - FL_DOTTED_XYPLOT (Data drawn as a dotted line),
            - FL_DOTDASHED_XYPLOT (Data drawn as a dash-dot-dash line),
            - FL_LONGDASHED_XYPLOT (xyplot type has long dashed line),
            - FL_LINEPOINTS_XYPLOT (xyplot type has lines and points).

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_xyplot_overlay_type = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_overlay_type",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_overlay_type(FL_OBJECT * ob, int id,
           int type)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_ovlnum = library.convert_to_intc(ovlnum)
    library.checkfatal_allowed_value_in_list(plottype, \
            xfdata.XYPLOTTYPE_list)
    i_plottype = library.convert_to_intc(plottype)
    library.keep_elem_refs(ptr_flobject, ovlnum, plottype, i_ovlnum, \
            i_plottype)
    _fl_set_xyplot_overlay_type(ptr_flobject, i_ovlnum, i_plottype)


def fl_delete_xyplot_overlay(ptr_flobject, ovlnum):
    """fl_delete_xyplot_overlay(ptr_flobject, ovlnum)

    Deletes an overlay of a xyplot flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ovlnum : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays()

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_delete_xyplot_overlay = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_xyplot_overlay",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_delete_xyplot_overlay(FL_OBJECT * ob, int id)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_ovlnum = library.convert_to_intc(ovlnum)
    library.keep_elem_refs(ptr_flobject, ovlnum, i_ovlnum)
    _fl_delete_xyplot_overlay(ptr_flobject, i_ovlnum)


def fl_set_xyplot_interpolate(ptr_flobject, ovlnum, degree, grid):
    """fl_set_xyplot_interpolate(ptr_flobject, ovlnum, degree, grid)

    Interpolates xyplot data using an nth order Lagrangian polynomial.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ovlnum : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays(). If it is 0 uses
            the base data set
        degree : int
            the order of the polynomial to use. If it is 0 or 1, restores the
            default linear interpolation.
        grid : float
            the working grid onto which the data are to be interpolated.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_xyplot_interpolate = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_interpolate",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int,
        cty.c_double],
        """void fl_set_xyplot_interpolate(FL_OBJECT * ob, int id,
           int degree, double grid)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_ovlnum = library.convert_to_intc(ovlnum)
    i_degree = library.convert_to_intc(degree)
    f_grid = library.convert_to_doublec(grid)
    library.keep_elem_refs(ptr_flobject, ovlnum, degree, grid, i_ovlnum, \
            i_degree, f_grid)
    _fl_set_xyplot_interpolate(ptr_flobject, i_ovlnum, i_degree, f_grid)


def fl_set_xyplot_inspect(ptr_flobject, yesno):
    """fl_set_xyplot_inspect(ptr_flobject, yesno)

    Makes aware or not xyplot flobjects of mouse clicks. Once an xyplot is in
    inspect mode, whenever the mouse is released and the mouse position is on
    one of the data point, the flobject is returned to the caller or its
    callback is invoked. You can use fl_get_xyplot() to find out which point
    the mouse was clicked on.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        yesno : int
            flag to enable/disable inspect mode. Values 0 (disabled) or 1
            (enabled)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_xyplot_inspect = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_inspect",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_inspect(FL_OBJECT * ob, int yes)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_yesno = library.convert_to_intc(yesno)
    library.keep_elem_refs(ptr_flobject, yesno, i_yesno)
    _fl_set_xyplot_inspect(ptr_flobject, i_yesno)


def fl_set_xyplot_symbolsize(ptr_flobject, symsize):
    """fl_set_xyplot_symbolsize(ptr_flobject, symsize)

    Changes the size of the symbols drawn at data points of a xyplot flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        symsize : int
            size of symbol in pixel. By default it is 4.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_xyplot_symbolsize = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_symbolsize",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_symbolsize(FL_OBJECT * ob, int n)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_symsize = library.convert_to_intc(symsize)
    library.keep_elem_refs(ptr_flobject, symsize, i_symsize)
    _fl_set_xyplot_symbolsize(ptr_flobject, i_symsize)


def fl_replace_xyplot_point(ptr_flobject, indxpt, xpos, ypos):
    """fl_replace_xyplot_point(ptr_flobject, indxpt, xpos, ypos)

    Replaces the value of a particular point of a xyplot flobject. It acts
    on the first dataset only.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        indxpt : int
            index of the value to be replaced. The first value has index of 0
        xpos : float
            new horizontal position
        ypos : float
            new vertical position

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_replace_xyplot_point = library.cfuncproto(
        library.load_so_libforms(), "fl_replace_xyplot_point",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_double,
        cty.c_double],
        """void fl_replace_xyplot_point(FL_OBJECT * ob, int i,
           double x, double y)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_indxpt = library.convert_to_intc(indxpt)
    f_xpos = library.convert_to_doublec(xpos)
    f_ypos = library.convert_to_doublec(ypos)
    library.keep_elem_refs(ptr_flobject, indxpt, xpos, ypos, i_indxpt, \
            f_xpos, f_ypos)
    _fl_replace_xyplot_point(ptr_flobject, i_indxpt, f_xpos, f_ypos)


def fl_replace_xyplot_point_in_overlay(ptr_flobject, indxpt, dsetid, \
        xpos, ypos):
    """fl_replace_xyplot_point_in_overlay(ptr_flobject, indxpt, dsetid,
    xpos, ypos)

    Replaces the value of a particular point in specified dataset. This
    function is an extension of fl_replace_xyplot_point() for more than one
    dataset.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        indxpt : int
            index of the value to be replaced. The first value has index of 0
        dsetid : int
            dataset the points belongs to. The first data set is 0.
        xpos : float
            new horizontal position
        ypos : float
            new vertical position

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_replace_xyplot_point_in_overlay = library.cfuncproto(
        library.load_so_libforms(), "fl_replace_xyplot_point_in_overlay",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int, \
        cty.c_double, cty.c_double],
        """void fl_replace_xyplot_point_in_overlay(FL_OBJECT * ob,
           int i, int setID, double x, double y)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_indxpt = library.convert_to_intc(indxpt)
    i_dsetid = library.convert_to_intc(dsetid)
    f_xpos = library.convert_to_doublec(xpos)
    f_ypos = library.convert_to_doublec(ypos)
    library.keep_elem_refs(ptr_flobject, indxpt, dsetid, xpos, ypos, \
            i_indxpt, i_dsetid, f_xpos, f_ypos)
    _fl_replace_xyplot_point_in_overlay(ptr_flobject, i_indxpt, i_dsetid, \
            f_xpos, f_ypos)


def fl_get_xyplot_xmapping(ptr_flobject):
    """fl_get_xyplot_xmapping(ptr_flobject) -> mapcnst1, mapcnst2

    Finds out the mapping between the screen coordinates and data on x-axis.
    Mapping constants are used as follows
    screenCoord = a * data + b       (linear scale)
    screenCoord = a * math.log(data) / math.log(p) + b (log scale)
    where p is the base of the requested logarithm.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject

    Returns
    -------
        mapcnst1 : float
            first mapping constant
        mapcnst2 : float
            second mapping constant

    Examples
    --------
        >>> *todo*

    API_diversion
    -------------
        API changed from XForms, upstream is
        fl_get_xyplot_xmapping(ptr_flobject, a, b)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_xyplot_xmapping = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_xmapping",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_xmapping(FL_OBJECT * ob, float * a,
           float * b)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_mapcnst1, ptr_mapcnst1 = library.make_floatc_and_pointer()
    f_mapcnst2, ptr_mapcnst2 = library.make_floatc_and_pointer()
    library.keep_elem_refs(ptr_flobject, f_mapcnst1, ptr_mapcnst1, \
            f_mapcnst2, ptr_mapcnst2)
    _fl_get_xyplot_xmapping(ptr_flobject, ptr_mapcnst1, ptr_mapcnst2)
    return f_mapcnst1.value, f_mapcnst2.value


def fl_get_xyplot_ymapping(ptr_flobject):
    """fl_get_xyplot_ymapping(ptr_flobject) -> mapcnst1, mapcnst2

    Finds out the mapping between the screen coordinates and data on
    y-axis. Mapping constants are used as follows
    screenCoord = a * data + b ... (linear scale)
    screenCoord = a * math.log(data) / math.log(p) + b ... (log scale)
    where p is the base of the requested logarithm.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject

    Returns
    -------
        mapcnst1 : float
            first mapping constant
        mapcnst2 : float
            second mapping constant

    Examples
    --------
        >>> *todo*

    API_diversion
    ----------
        API changed from XForms, upstream is
        fl_get_xyplot_ymapping(ptr_flobject, a, b)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_xyplot_ymapping = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_ymapping",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_ymapping(FL_OBJECT * ob, float * a,
           float * b)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_mapcnst1, ptr_mapcnst1 = library.make_floatc_and_pointer()
    f_mapcnst2, ptr_mapcnst2 = library.make_floatc_and_pointer()
    library.keep_elem_refs(ptr_flobject, f_mapcnst1, f_mapcnst2, \
            ptr_mapcnst1, ptr_mapcnst2)
    _fl_get_xyplot_ymapping(ptr_flobject, ptr_mapcnst1, ptr_mapcnst2)
    return f_mapcnst1.value, f_mapcnst2.value


def fl_set_xyplot_keys(ptr_flobject, keystxtlist, xposlist, yposlist, align):
    """fl_set_xyplot_keys(ptr_flobject, keystxtlist, xposlist, yposlist, align)

    Adds a series of keys to a particular plot and sets the position for each
    key. A key is the combination of drawing a segment of the plot line style
    with a piece of text that describes what the corresponding line represents.
    Obviously, keys are most useful when you have more than one plot (i.e.
    overlays).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        keystxtlist : list_of_str
            series of keys for each plot. The last element of the array must
            be None to indicate the end. The array index is the plot id, i.e.
            key[0] is the key for the base plot, key[1] the key for the first
            overlay, etc.
        xposlist : list_of_float
            series of horizontal positions in world coordinate system
        yposlist : list_of_float
            series of horizontal positions in world coordinate system
        align : int
            alignment of the entire key box relative to the given position.
            Values (from xfdata.py)
            - FL_ALIGN_CENTER (In the middle of the box, inside it),
            - FL_ALIGN_TOP (To the top of the box, outside it),
            - FL_ALIGN_BOTTOM (To the bottom of the box, outside it),
            - FL_ALIGN_LEFT (To the left of the box, outside it),
            - FL_ALIGN_RIGHT (To the right of the box, outside it),
            - FL_ALIGN_LEFT_TOP (To the left and top of the box, outside it),
            - FL_ALIGN_RIGHT_TOP (To the right and top of the box, outside it),
            - FL_ALIGN_LEFT_BOTTOM (To the left and bottom of box, outside it),
            - FL_ALIGN_RIGHT_BOTTOM (To the right and bottom of box, outside),
            - FL_ALIGN_INSIDE (places the text inside the box),
            - FL_ALIGN_VERT (not functional yet).
            Bitwise OR with FL_ALIGN_INSIDE is allowed.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_xyplot_keys = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_keys",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.STRING),
        cty.c_float, cty.c_float, cty.c_int],
        """void fl_set_xyplot_keys(FL_OBJECT * ob, char * * keys, float x,
           float y, int align)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    ptr_keystxtlist = library.convert_to_ptr_stringc(keystxtlist)  # verify
    f_xposlist = library.convert_to_floatc(xposlist)
    f_yposlist = library.convert_to_floatc(yposlist)
    library.checkfatal_allowed_value_in_list(align, xfdata.ALIGN_list)
    i_align = library.convert_to_intc(align)
    library.keep_elem_refs(ptr_flobject, keystxtlist, xposlist, yposlist, \
            align, ptr_keystxtlist, f_xposlist, f_yposlist, i_align)
    _fl_set_xyplot_keys(ptr_flobject, ptr_keystxtlist, f_xposlist, \
            f_yposlist, i_align)


def fl_set_xyplot_key(ptr_flobject, ovlnum, keytxt):
    """fl_set_xyplot_key(ptr_flobject, ovlnum, keytxt)

    Adds or removes a key to a particular plot. A key is the combination of
    drawing a segment of the plot line style with a piece of text that
    describes what the corresponding line represents. Obviously, keys are most
    useful when you have more than one plot (i.e. overlays). All the keys will
    be drawn together inside a box.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ovlnum : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays()
        keytxt : str
            key for the plot. If it is empty (""), removes a key.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_xyplot_key = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_key",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, xfdata.STRING],
        """void fl_set_xyplot_key(FL_OBJECT * ob, int id,
           const char * key)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_ovlnum = library.convert_to_intc(ovlnum)
    s_keytxt = library.convert_to_stringc(keytxt)
    library.keep_elem_refs(ptr_flobject, ovlnum, keytxt, i_ovlnum, s_keytxt)
    _fl_set_xyplot_key(ptr_flobject, i_ovlnum, s_keytxt)


def fl_set_xyplot_key_position(ptr_flobject, xpos, ypos, align):
    """fl_set_xyplot_key_position(ptr_flobject, xpos, ypos, align)

    Defines the position of the keys in xyplot flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        xpos : float
            horizontal position in world coordinate system
        ypos : float
            horizontal position in world coordinate system
        align : int
            alignment of the entire key box relative to the given position.
            Values (from xfdata.py)
            - FL_ALIGN_CENTER (In the middle of the box, inside it),
            - FL_ALIGN_TOP (To the top of the box, outside it),
            - FL_ALIGN_BOTTOM (To the bottom of the box, outside it),
            - FL_ALIGN_LEFT (To the left of the box, outside it),
            - FL_ALIGN_RIGHT (To the right of the box, outside it),
            - FL_ALIGN_LEFT_TOP (To the left and top of the box, outside it),
            - FL_ALIGN_RIGHT_TOP (To the right and top of the box, outside it),
            - FL_ALIGN_LEFT_BOTTOM (To the left and bottom of box, outside it),
            - FL_ALIGN_RIGHT_BOTTOM (To the right and bottom of box, outside),
            - FL_ALIGN_INSIDE (places the text inside the box),
            - FL_ALIGN_VERT (not functional yet).
            Bitwise OR with FL_ALIGN_INSIDE is allowed.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_xyplot_key_position = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_key_position",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_float, cty.c_float,
        cty.c_int],
        """void fl_set_xyplot_key_position(FL_OBJECT * ob, float x,
           float y, int align)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_xpos = library.convert_to_floatc(xpos)
    f_ypos = library.convert_to_floatc(ypos)
    library.checkfatal_allowed_value_in_list(align, xfdata.ALIGN_list)
    i_align = library.convert_to_intc(align)
    library.keep_elem_refs(ptr_flobject, xpos, ypos, align, f_xpos, \
            f_ypos, i_align)
    _fl_set_xyplot_key_position(ptr_flobject, f_xpos, f_ypos, i_align)


def fl_set_xyplot_key_font(ptr_flobject, style, size):
    """fl_set_xyplot_key_font(ptr_flobject, style, size)

    Changes the font the key text uses in xyplot flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        style : int
            style for label. Values (from xfdata.py)
            - FL_NORMAL_STYLE (Helvetica normal text),
            - FL_BOLD_STYLE (Helvetica boldface text),
            - FL_ITALIC_STYLE (Helvetica italic text),
            - FL_BOLDITALIC_STYLE (Helvetica boldface and italic text),
            - FL_FIXED_STYLE (Courier fixed width, good for tables),
            - FL_FIXEDBOLD_STYLE (Courier bold fixed text),
            - FL_FIXEDITALIC_STYLE (Courier italic fixed text),
            - FL_FIXEDBOLDITALIC_STYLE (Courier boldface and italic fixed),
            - FL_TIMES_STYLE (Times-Roman like normal font),
            - FL_TIMESBOLD_STYLE (Times-Roman like boldface text),
            - FL_TIMESITALIC_STYLE (Times-Roman like italic text),
            - FL_TIMESBOLDITALIC_STYLE (Times-Roman like boldface and italic),
            - FL_MISC_STYLE (Charter normal text),
            - FL_MISCBOLD_STYLE (Charter boldface text),
            - FL_MISCITALIC_STYLE (Charter italic text),
            - FL_SYMBOL_STYLE (Symbol text),
            - FL_SHADOW_STYLE (Text casting a shadow, modifier mask),
            - FL_ENGRAVED_STYLE (Text engraved into the form, modifier mask),
            - FL_EMBOSSED_STYLE (Text standing out, modifier mask).
            Bitwise OR with any of modifiers is allowed.
        size : int
            font size for label. Values (from xfdata.py)
            - FL_TINY_SIZE (8 points font),
            - FL_SMALL_SIZE or FL_DEFAULT_SIZE (10 points font, default),
            - FL_NORMAL_SIZE (12 points font),
            - FL_MEDIUM_SIZE (14 points font),
            - FL_LARGE_SIZE (18 points font),
            - FL_HUGE_SIZE (24 points font),
            - or other numeric odd or even value

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_xyplot_key_font = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_key_font",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_key_font(FL_OBJECT * ob, int style,
           int size)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    i_style = library.convert_to_intc(style)
    i_size = library.convert_to_intc(size)
    library.keep_elem_refs(ptr_flobject, style, size, i_style, i_size)
    _fl_set_xyplot_key_font(ptr_flobject, i_style, i_size)


def fl_get_xyplot_numdata(ptr_flobject, ovlnum):
    """fl_get_xyplot_numdata(ptr_flobject, ovlnum) -> numpoints

    Finds out the number of data points of a xyplot flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ovlnum : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays(). If it is 0 uses
            the base dataset

    Returns
    -------
        numpoints : int
            number of data points

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_xyplot_numdata = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_numdata",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_get_xyplot_numdata(FL_OBJECT * ob, int id)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_ovlnum = library.convert_to_intc(ovlnum)
    library.keep_elem_refs(ptr_flobject, ovlnum, i_ovlnum)
    retval = _fl_get_xyplot_numdata(ptr_flobject, i_ovlnum)
    return retval


# fl_set_xyplot_fontsize() function placeholder (deprecated)
# fl_set_xyplot_fontstyle() function placeholder (deprecated)


def fl_xyplot_s2w(ptr_flobject, scrnxpos, scrnypos):
    """fl_xyplot_s2w(ptr_flobject, scrnxpos, scrnypos) -> wrldxpos, wrldypos

    Finds out, by conversion, the world coordinates from the screen
    coordinates of a xyplot flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        scrnxpos : float
            horizontal position in screen coordinates
        scrnypos : float
            vertical position in screen coordinates

    Returns
    -------
        wrldxpos : float
            horizontal position in world coordinates
        wrldypos : float
            vertical position in world coordinates

    Examples
    --------
        >>> *todo*

    API_diversion
    -------------
        API changed from XForms, upstream is
        fl_xyplot_s2w(ptr_flobject, sx, sy, wx, wy)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_xyplot_s2w = library.cfuncproto(
        library.load_so_libforms(), "fl_xyplot_s2w",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double,
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_float)],
        """void fl_xyplot_s2w(FL_OBJECT * ob, double sx, double sy,
           float * wx, float * wy)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_scrnxpos = library.convert_to_doublec(scrnxpos)
    f_scrnypos = library.convert_to_doublec(scrnypos)
    f_wrldxpos, ptr_wrldxpos = library.make_floatc_and_pointer()
    f_wrldypos, ptr_wrldypos = library.make_floatc_and_pointer()
    library.keep_elem_refs(ptr_flobject, scrnxpos, scrnypos, f_scrnxpos, \
            f_scrnypos, f_wrldxpos, f_wrldypos, ptr_wrldxpos, ptr_wrldypos)
    _fl_xyplot_s2w(ptr_flobject, f_scrnxpos, f_scrnypos, \
            ptr_wrldxpos, ptr_wrldypos)
    return f_wrldxpos.value, f_wrldypos.value


def fl_xyplot_w2s(ptr_flobject, wrldxpos, wrldypos):
    """fl_xyplot_w2s(ptr_flobject, wrldxpos, wrldypos) -> scrnxpos, scrnypos

    Finds out, by conversion, the screen coordinates from the world
    coordinates of a xyplot flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        wrldxpos : float
            horizontal position in world coordinates
        wrldypos : float
            vertical position in world coordinates

    Returns
    -------
        scrnxpos : float
            horizontal position in screen coordinates
        scrnypos : float
            vertical position in screen coordinates

    Examples
    --------
        >>> *todo*

    API_diversion
    ----------
        API changed from XForms, upstream is
        fl_xyplot_w2s(ptr_flobject, wx, wy)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_xyplot_w2s = library.cfuncproto(
        library.load_so_libforms(), "fl_xyplot_w2s",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double,
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_float)],
        """void fl_xyplot_w2s(FL_OBJECT * ob, double wx, double wy,
           float * sx, float * sy)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    f_wrldxpos = library.convert_to_doublec(wrldxpos)
    f_wrldypos = library.convert_to_doublec(wrldypos)
    f_scrnxpos, ptr_scrnxpos = library.make_floatc_and_pointer()
    f_scrnypos, ptr_scrnypos = library.make_floatc_and_pointer()
    library.keep_elem_refs(ptr_flobject, wrldxpos, wrldypos, f_wrldxpos, \
            f_wrldypos, f_scrnypos, f_scrnypos, ptr_scrnypos, ptr_scrnypos)
    _fl_xyplot_w2s(ptr_flobject, f_wrldxpos, f_wrldypos, ptr_scrnxpos, \
            ptr_scrnypos)
    return f_scrnxpos.value, f_scrnypos.value


def fl_set_xyplot_xscale(ptr_flobject, scale, logbase):
    """fl_set_xyplot_xscale(ptr_flobject, scale, logbase)

    Changes the scaling for a xyplot flobject. By default, a linear scale in
    x-direction is used.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        scale : int
            scaling to be used. Values (from xfdata.py)
            - FL_LINEAR (Uses linear scale for xyplot, default),
            - FL_LOG (Uses logarithmic scale for xyplot)
        logbase : float
            base of the logarithm to be used. Used only if scale is
            xfdata.FL_LOG

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_xyplot_xscale = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_xscale",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_double],
        """void fl_set_xyplot_xscale(FL_OBJECT * ob, int scale,
           double base)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.checkfatal_allowed_value_in_list(scale, xfdata.XYPLOTSCALE_list)
    i_scale = library.convert_to_intc(scale)
    f_logbase = library.convert_to_doublec(logbase)
    library.keep_elem_refs(ptr_flobject, scale, logbase, i_scale, f_logbase)
    _fl_set_xyplot_xscale(ptr_flobject, i_scale, f_logbase)


def fl_set_xyplot_yscale(ptr_flobject, scale, logbase):
    """fl_set_xyplot_yscale(ptr_flobject, scale, logbase)

    Changes the scaling for a xyplot flobject. By default, a linear scale in
    y-direction is used.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        scale : int
            scaling to be used. Values (from xfdata.py)
            - FL_LINEAR (Uses linear scale for xyplot, default),
            - FL_LOG (Uses logarithmic scale for xyplot)
        logbase : float
            base of the logarithm to be used. Used only if scale is
            xfdata.FL_LOG

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_xyplot_yscale = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_yscale",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_double],
        """void fl_set_xyplot_yscale(FL_OBJECT * ob, int scale,
           double base)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.checkfatal_allowed_value_in_list(scale, xfdata.XYPLOTSCALE_list)
    i_scale = library.convert_to_intc(scale)
    f_logbase = library.convert_to_doublec(logbase)
    library.keep_elem_refs(ptr_flobject, scale, logbase, i_scale, f_logbase)
    _fl_set_xyplot_yscale(ptr_flobject, i_scale, f_logbase)


def fl_clear_xyplot(ptr_flobject):
    """fl_clear_xyplot(ptr_flobject)

    Clears a xyplot flobject. It frees all data associated with an xyplot,
    including all overlays and all inset texts. It does not reset all
    plotting options, such as line thickness, major/minor divisions etc. nor
    does it free all memories associated with the xyplot, for this
    flbasic.fl_free_object() is needed.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_clear_xyplot = library.cfuncproto(
        library.load_so_libforms(), "fl_clear_xyplot",
        None, [cty.POINTER(xfdata.FL_OBJECT)],
        """void fl_clear_xyplot(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    _fl_clear_xyplot(ptr_flobject)


def fl_set_xyplot_linewidth(ptr_flobject, ovlnum, lnwidth):
    """fl_set_xyplot_linewidth(ptr_flobject, ovlnum, lnwidth)

    Changes the line thickness of an xyplot (base data or overlay).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ovlnum : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays(). If it is 0, uses
            the base dataset.
        lnwidth : int
            width of line. If it is 0, restores the server default and
            typically is the fastest

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """

    _fl_set_xyplot_linewidth = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_linewidth",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_linewidth(FL_OBJECT * ob, int id, int lw)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_ovlnum = library.convert_to_intc(ovlnum)
    i_lnwidth = library.convert_to_intc(lnwidth)
    library.keep_elem_refs(ptr_flobject, ovlnum, lnwidth, i_ovlnum, i_lnwidth)
    _fl_set_xyplot_linewidth(ptr_flobject, i_ovlnum, i_lnwidth)


def fl_set_xyplot_xgrid(ptr_flobject, grid):
    """fl_set_xyplot_xgrid(ptr_flobject, grid)

    Defines up the grid level for x-axis of a xyplot flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        grid : int
            level of grid to be set. Values (from xfdata.py)
            - FL_GRID_NONE (No grid for xyplot),
            - FL_GRID_MAJOR (Grid for the major divisions of xyplot),
            - FL_GRID_MINOR (Grid for the major and minor divisions of xyplot)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """

    _fl_set_xyplot_xgrid = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_xgrid",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_xgrid(FL_OBJECT * ob, int xgrid)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.checkfatal_allowed_value_in_list(grid, xfdata.XYPLOTGRID_list)
    i_grid = library.convert_to_intc(grid)
    library.keep_elem_refs(ptr_flobject, grid, i_grid)
    _fl_set_xyplot_xgrid(ptr_flobject, i_grid)


def fl_set_xyplot_ygrid(ptr_flobject, grid):
    """fl_set_xyplot_ygrid(ptr_flobject, grid)

    Defines up the grid level for y-axis of a xyplot flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        grid : int
            level of grid to be set. Values (from xfdata.py)
            - FL_GRID_NONE (No grid for xyplot),
            - FL_GRID_MAJOR (Grid for the major divisions of xyplot),
            - FL_GRID_MINOR (Grid for the major and minor divisions of xyplot)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_xyplot_ygrid = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_ygrid",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_ygrid(FL_OBJECT * ob, int ygrid)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.checkfatal_allowed_value_in_list(grid, xfdata.XYPLOTGRID_list)
    i_grid = library.convert_to_intc(grid)
    library.keep_elem_refs(ptr_flobject, grid, i_grid)
    _fl_set_xyplot_ygrid(ptr_flobject, i_grid)


def fl_set_xyplot_grid_linestyle(ptr_flobject, lnstyle):
    """fl_set_xyplot_grid_linestyle(ptr_flobject, lnstyle) -> oldlinestyle

    Changes the linestyle used for drawing  the grid line of xyplot. By
    default it uses a dotted line

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        lnstyle : int
            style of the line to draw. Values (from xfdata.py)
            - FL_SOLID (Solid line. Default and most efficient),
            - FL_USERDASH (Dashed line, but the dash pattern is definable by
              user via flxbasic.fl_dashedlinestyle(). Only the odd numbered
              segments are drawn with the foreground color),
            - FL_USERDOUBLEDASH (Similar to FL_LINE_USERDASH but both even and
              odd numbered segments are drawn, with the even numbered segments
              drawn in the background color, as set by flbasic.fl_bk_color()),
            - FL_DOT (Dotted line [....]),
            - FL_DOTDASH (Dash-dot-dash line [-.-.]),
            - FL_DASH (Dashed line [----]),
            - FL_LONGDASH (Long dashed line [_ _ _])

    Returns
    -------
        oldlinestyle = int
            old grid linestyle

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_xyplot_grid_linestyle = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_grid_linestyle",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_xyplot_grid_linestyle(FL_OBJECT * ob, int style)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.checkfatal_allowed_value_in_list(lnstyle, xfdata.LINESTYLE_list)
    i_lnstyle = library.convert_to_intc(lnstyle)
    library.keep_elem_refs(ptr_flobject, lnstyle, i_lnstyle)
    retval = _fl_set_xyplot_grid_linestyle(ptr_flobject, i_lnstyle)
    return retval


def fl_set_xyplot_alphaxtics(ptr_flobject, ticmajor, ticminor):
    """fl_set_xyplot_alphaxtics(ptr_flobject, ticmajor, ticminor)

    Labels the major tic marks on x-axis with alphanumerical characters
    (instead of numerical values). fl_set_xyplot_xtics cannot be active at the
    same time and the one that gets used is the one that was set last. It can
    be used to specify non-uniform and arbitrary major divisions; to achieve
    this, you should embed the major tic location information in the
    alphanumerical text; the location information is introduced by the symbol
    and followed by a float number specifying the coordinates in world
    coordinates; the entire location info should follow the label. E.g.
    "Begin@1.0|3/4@0.75|1.9@1.9" will produce three major tic marks at 0.75,
    1.0, and 1.9 and labeled "3/4", "begin", and "1.9".

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ticmajor : str
            text specifying the labels with the embedded character "|" that
            describes major divisions. E.g. to label a plot with Monday,
            Tuesday etc, major should be given as "Monday|Tuesday|..."
        ticminor : str
            currently unused. It is set to 1, i.e, no divisions between major
            tic marks.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_xyplot_alphaxtics = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_alphaxtics",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING, xfdata.STRING],
        """void fl_set_xyplot_alphaxtics(FL_OBJECT * ob, const char * m,
            const char * s)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    s_ticmajor = library.convert_to_stringc(ticmajor)
    s_ticminor = library.convert_to_stringc(ticminor)
    library.keep_elem_refs(ptr_flobject, ticmajor, ticminor, \
            s_ticmajor, s_ticminor)
    _fl_set_xyplot_alphaxtics(ptr_flobject, s_ticmajor, s_ticminor)


def fl_set_xyplot_alphaytics(ptr_flobject, ticmajor, ticminor):
    """fl_set_xyplot_alphaytics(ptr_flobject, ticmajor, ticminor)

    Labels the major tic marks on y-axis with alphanumerical characters
    (instead of numerical values). fl_set_xyplot_ytics cannot be active at the
    same time and the one that gets used is the one that was set last. It can
    be used to specify non-uniform and arbitary major divisions; to achieve
    this, you should embed the major tic location information in the
    alphanumerical text; the location information is introduced by the symbol
    and followed by a float number specifying the coordinates in world
    coordinates; the entire location info should follow the label. E.g.
    "Begin@1.0|3/4@0.75|1.9@1.9" will produce three major tic marks at 0.75,
    1.0, and 1.9 and labeled "3/4", "begin", and "1.9".

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ticmajor : str
            text specifying the labels with the embedded character "|" that
            describes major divisions. E.g. to label a plot with Monday,
            Tuesday etc, major should be given as "Monday|Tuesday|..."
        ticminor : str
            currently unused. It is set to 1, i.e, no divisions between major
            tic marks.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_xyplot_alphaytics = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_alphaytics",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING, xfdata.STRING],
        """void fl_set_xyplot_alphaytics(FL_OBJECT * ob, const char * m,
            const char * s)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    s_ticmajor = library.convert_to_stringc(ticmajor)
    s_ticminor = library.convert_to_stringc(ticminor)
    library.keep_elem_refs(ptr_flobject, ticmajor, ticminor, \
            s_ticmajor, s_ticminor)
    _fl_set_xyplot_alphaytics(ptr_flobject, s_ticmajor, s_ticminor)


def fl_set_xyplot_fixed_xaxis(ptr_flobject, leftmrg, rightmrg):
    """fl_set_xyplot_fixed_xaxis(ptr_flobject, leftmrg, rightmrg)

    Controls the plotting area for x-axis of xyplot flobject. By default, the
    plotting area is automatically adjusted for tic labels and titles so that
    a maximum plotting area results, but this can be undesirable in certain
    situations. The pixel amounts are computed using the current label font
    and size.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        leftmrg : str
            left margin to be set. If it is empty (""), restore automatic
            margin computation
        rightmrg : str
            right margin to be set. If it is empty (""), restores automatic
            margin computation.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_xyplot_fixed_xaxis = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_fixed_xaxis",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING, xfdata.STRING],
        """void fl_set_xyplot_fixed_xaxis(FL_OBJECT * ob, const char * lm,
            const char * rm)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    s_leftmrg = library.convert_to_stringc(leftmrg)
    s_rightmrg = library.convert_to_stringc(rightmrg)
    library.keep_elem_refs(ptr_flobject, leftmrg, rightmrg, \
            s_leftmrg, s_rightmrg)
    _fl_set_xyplot_fixed_xaxis(ptr_flobject, s_leftmrg, s_rightmrg)


def fl_set_xyplot_fixed_yaxis(ptr_flobject, bottommrg, topmrg):
    """fl_set_xyplot_fixed_yaxis(ptr_flobject, bottommrg, topmrg)

    Controls the plotting area for y-axis of xyplot flobject. By default, the
    plotting area is automatically adjusted for tic labels and titles so that
    a maximum plotting area results, but this can be undesirable in certain
    situations. The pixel amounts are computed using the current label font
    and size. Even for y-axis margins the length of the string, not the height,
    is used as the margin, thus to leave space for one line of text, a single
    character (say m) or two narrow characters (say ii) should be used.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        bottommrg : str
            bottom margin to be set. If it is empty (""), restore automatic
            margin computation
        topmrg : str
            top margin to be set. If it is empty (""), restores automatic
            margin computation

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_xyplot_fixed_yaxis = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_fixed_yaxis",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING, xfdata.STRING],
        """void fl_set_xyplot_fixed_yaxis(FL_OBJECT * ob, const char * bm,
            const char * tm)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    s_bottommrg = library.convert_to_stringc(bottommrg)
    s_topmrg = library.convert_to_stringc(topmrg)
    library.keep_elem_refs(ptr_flobject, bottommrg, topmrg, \
            s_bottommrg, s_topmrg)
    _fl_set_xyplot_fixed_yaxis(ptr_flobject, s_bottommrg, s_topmrg)


# TODO: verify if it is of any use in python.
def fl_interpolate(wrldxposlist, wrldyposlist, numpoints, grid, degree):
    """fl_interpolate(wrldxposlist, wrldyposlist, numpoints, grid, degree)
    -> numpoints, outxpos, outypos

    Manages polynomial interpolation function and obtains the number of points
    in interpolated function ((wx[num - 1] - wx[0]) / grid + 1.01) and the
    interpolate values.

    Parameters
    ----------
        wrldxposlist : list of float
            horizontal values in world coordinates
        wrldyposlist : list of float
            vertical values in world coordinates
        numpoints : int
            number of points to interpolate
        grid : float
            the working grid onto which the data are to be interpolated.
        degree : int
            the order of the polynomial to use. If it is 0 or 1, restores the
            default linear interpolation.

    Returns
    -------
        numpoints : int
            number of points in the interpolated function, or -1 (on failure)
        outxpos : float
            interpolated value for x-axis
        outypos : float
            interpolated value for y-axis

    Examples
    --------
        >>> *todo*

    API_diversion
    -------------
        API changed from XForms, upstream is
        fl_interpolate(inx, iny, num_in, outx, outy, grid, ndegree)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_interpolate = library.cfuncproto(
        library.load_so_libforms(), "fl_interpolate",
        cty.c_int, [cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_int, cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_double, cty.c_int],
        """int fl_interpolate(const float * wx, const float * wy, int nin,
            float * x, float * y, double grid, int ndegree)""")
    library.check_if_flinitialized()
    ptr_wrldxposlist = library.convert_to_ptr_floatc(wrldxposlist)  # unsure
    ptr_wrldyposlist = library.convert_to_ptr_floatc(wrldyposlist)  # unsure
    i_numpoints = library.convert_to_intc(numpoints)
    f_outxpos, ptr_outxpos = library.make_floatc_and_pointer()
    f_outypos, ptr_outypos = library.make_floatc_and_pointer()
    f_grid = library.convert_to_doublec(grid)
    i_degree = library.convert_to_intc(degree)
    library.keep_elem_refs(wrldxposlist, wrldyposlist, numpoints, f_outxpos, \
            f_outypos, ptr_outypos, ptr_outypos, grid, degree, i_numpoints, \
            f_grid, i_degree)
    retval = _fl_interpolate(ptr_wrldxposlist, ptr_wrldyposlist, \
            i_numpoints, ptr_outxpos, ptr_outypos, f_grid, i_degree)
    return retval, f_outxpos.value, f_outypos.value


def fl_spline_interpolate(wrldxposlist, wrldyposlist, numpoints, grid):
    """fl_spline_interpolate(wrldxposlist, wrldyposlist, numpoints, grid)
    -> numpoints, outxpos, outypos

    Manages spline interpolation function. Spline interpolation is a form of
    interpolation where the interpolant is a special type of piecewise
    polynomial called a spline. Obtain number of points in interpolate
    function and the interpolate values.

    Parameters
    ----------
        wrldxposlist : list of float
            horizontal values in world coordinates
        wrldyposlist : list of float
            vertical values in world coordinates
        numpoints : int
            number of points to interpolate
        grid : float
            the working grid onto which the data are to be interpolated.

    Returns
    -------
        numpoints : int
            number of points in the interpolated function, or -1 (on failure)
        outxpos : float
            interpolated value for x-axis
        outypos : float
            interpolated value for y-axis

    Examples
    --------
        >>> *todo*

    API_diversion
    -------------
        API changed from XForms, upstream is
        fl_spline_interpolate(inx, iny, num_in, outx, outy, grid)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_spline_interpolate = library.cfuncproto(
        library.load_so_libforms(), "fl_spline_interpolate",
        cty.c_int, [cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_int, cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_double],
        """int fl_spline_interpolate(const float * wx, const float * wy,
            int nin, float * x, float * y, double grid)""")
    library.check_if_flinitialized()
    ptr_wrldxposlist = library.convert_to_ptr_floatc(wrldxposlist)  # unsure
    ptr_wrldyposlist = library.convert_to_ptr_floatc(wrldyposlist)  # unsure
    i_numpoints = library.convert_to_intc(numpoints)
    f_outxpos, ptr_outxpos = library.make_floatc_and_pointer()
    f_outypos, ptr_outypos = library.make_floatc_and_pointer()
    f_grid = library.convert_to_doublec(grid)
    library.keep_elem_refs(wrldxposlist, wrldyposlist, numpoints, f_outxpos, \
            f_outypos, ptr_outypos, ptr_outypos, grid, i_numpoints, f_grid)
    retval = _fl_spline_interpolate(ptr_wrldxposlist, ptr_wrldyposlist, \
            i_numpoints, ptr_outxpos, ptr_outypos, f_grid)
    return retval, f_outxpos.value, f_outypos.value


def fl_set_xyplot_symbol(ptr_flobject, ovlnum, pyfn_XyPlotSymbol):
    """fl_set_xyplot_symbol(ptr_flobject, ovlnum, pyfn_XyPlotSymbol)
    -> XyPlotSymbol

    Defines a python function to change a symbol, to be invoked for
    xfdata.FL_POINTS_XYPLOT and xfdata.FL_LINEPOINTS_XYPLOT's xyplot types
    (main plot or overlay). If the type of xyplot corresponding to ovlnum is
    not one of them, the function will not be called.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        ovlnum : int
            overlay id (0 means the main plot, and you can use -1 to indicate
            all)
        pyfn_XyPlotSymbol : python function, no return
            It will be called to draw the symbols on the data point.
            Name referring to function(ptr_flobject, [int]ovlnum, ptr_flpoint,
            [int]numpoints, [int]width, [int]height).
            The parameters passed to this function are the flobject pointer,
            the overlay id, the center of the symbol (p.x, p.y), the number of
            data points and the preferred symbol size (width, height).

    Returns
    -------
        XyPlotSymbol : xfdata.FL_XYPLOT_SYMBOL
            old xyplotsymbol function

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    #FL_XYPLOT_SYMBOL = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_OBJECT),
    #    cty.c_int, cty.POINTER(xfdata.FL_POINT), cty.c_int, cty.c_int,
    #    cty.c_int)
    _fl_set_xyplot_symbol = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_symbol",
        xfdata.FL_XYPLOT_SYMBOL, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        xfdata.FL_XYPLOT_SYMBOL],
        """FL_XYPLOT_SYMBOL fl_set_xyplot_symbol(FL_OBJECT * ob, int id,
           FL_XYPLOT_SYMBOL symbol)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_ovlnum = library.convert_to_intc(ovlnum)
    library.verify_function_type(pyfn_XyPlotSymbol)
    cfn_XyPlotSymbol = xfdata.FL_XYPLOT_SYMBOL(pyfn_XyPlotSymbol)
    library.keep_cfunc_refs(cfn_XyPlotSymbol, pyfn_XyPlotSymbol)
    library.keep_elem_refs(ptr_flobject, ovlnum, i_ovlnum)
    retval = _fl_set_xyplot_symbol(ptr_flobject, i_ovlnum, cfn_XyPlotSymbol)
    return retval


def fl_set_xyplot_mark_active(ptr_flobject, yesno):
    """fl_set_xyplot_mark_active(ptr_flobject, yesno) -> oldmark

    Draws the squares that mark an active plot or not.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            xyplot flobject
        yesno : int
            flag to enable/disable drawing. Values 0 (disabled) or 1 (enabled)

    Returns
    -------
        oldmark : int
            old mark settings

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_xyplot_mark_active = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_mark_active",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_xyplot_mark_active(FL_OBJECT * ob, int y)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_yesno = library.convert_to_intc(yesno)
    library.keep_elem_refs(ptr_flobject, yesno, i_yesno)
    retval = _fl_set_xyplot_mark_active(ptr_flobject, i_yesno)
    return retval

