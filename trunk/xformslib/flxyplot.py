#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage xyplot objects.
"""

#    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
#    e-mail: <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata


#####################
# forms.h (xyplot.h)
#####################

# Others

# fl_create_xyplot function placeholder (internal)


def fl_add_xyplot(plottype, x, y, w, h, label):
    """fl_add_xyplot(plottype, x, y, w, h, label)
    
    Adds an xyplot object. It gives an easy way to display a tabulated
    function generated on the fly or from an existing data file.

    Parameters
    ----------
        plottype : int
            type of xyplot to be added. Values (from xfdata.py)
            FL_NORMAL_XYPLOT, FL_SQUARE_XYPLOT, FL_CIRCLE_XYPLOT,
            FL_FILL_XYPLOT, FL_POINTS_XYPLOT, FL_DASHED_XYPLOT,
            FL_IMPULSE_XYPLOT, FL_ACTIVE_XYPLOT, FL_EMPTY_XYPLOT,
            FL_DOTTED_XYPLOT, FL_DOTDASHED_XYPLOT, FL_LONGDASHED_XYPLOT,
            FL_LINEPOINTS_XYPLOT
        x : int
            horizontal position (upper-left corner)
        y : int
            vertical position (upper-left corner)
        w : int
            width in coord units
        h : int
            height in coord units
        label : str
            text label of xyplot

    Returns
    -------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object added
 
    Examples
    --------
        >>> xyplobj = fl_add_xyplot(xfdata.FL_CIRCLE_XYPLOT, \
                124, 145, 320, 230, "MyXyplot")

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_add_xyplot = library.cfuncproto(
        library.load_so_libforms(), "fl_add_xyplot",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_xyplot(int t, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(plottype, xfdata.XYPLOTTYPE_list)
    iplottype = library.convert_to_int(plottype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(plottype, x, y, w, h, label, iplottype, \
            ix, iy, iw, ih, slabel)
    retval = _fl_add_xyplot(iplottype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_xyplot_data(pFlObject, xlist, ylist, npoints, title,
                       xlabel, ylabel):
    """fl_set_xyplot_data(pFlObject, xlist, ylist, npoints, title,
    xlabel, ylabel)
    
    Set or replaces data for a xyplot object, using supplied values. If
    the xyplot object being set exists already, old data will be cleared.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        xlist : list_of_float
            list of values for the tabulated function on the x-axis
        ylist : list_of_float
            list of values for the tabulated function on the y-axis
        npoints : int
            number of data points
        title : str
            title drawn above the xyplot
        xlabel : str
            label for values on x-axis
        ylabel : str
            label for values on y-axis

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_data = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float), cty.c_int, xfdata.STRING, xfdata.STRING,
        xfdata.STRING],
        """void fl_set_xyplot_data(FL_OBJECT * ob, float * x, float * y,
           int n, const char * title, const char * xlabel,
           const char * ylabel)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    #px = cty.cast(x, cty.POINTER(cty.c_float))
    print xlist, xlist[0]
    fxlist = []
    for a in range(xlist):
        fxlist[a] = library.convert_to_float(xlist[a])
    pxlist = cty.pointer(fxlist)
    print "xlist, fxlist, pxlist", xlist, fxlist, pxlist
    #py = cty.cast(y, cty.POINTER(cty.c_float))
    fylist = []
    for a in range(ylist):
        fylist[a] = library.convert_to_float(ylist[a])
    pylist = cty.pointer(fylist)
    print "ylist, fylist, pylist", ylist, fylist, pylist
    inpoints = library.convert_to_int(npoints)
    stitle = library.convert_to_string(title)
    sxlabel = library.convert_to_string(xlabel)
    sylabel = library.convert_to_string(ylabel)
    library.keep_elem_refs(pFlObject, xlist, ylist, npoints, fxlist, fylist,
                pxlist, pylist, title, xlabel, ylabel, inpoints, stitle,
                sxlabel, sylabel)
    _fl_set_xyplot_data(pFlObject, pxlist, pylist, inpoints, stitle, sxlabel,
                        sylabel)


def fl_set_xyplot_data_double(pFlObject, xlist, ylist, npoints, title,
                              xlabel, ylabel):
    """fl_set_xyplot_data_double(pFlObject, xlist, ylist, npoints, title,
    xlabel, ylabel)
    
    Set or replaces data for a xyplot object, using supplied values. If
    the xyplot object being set exists already, old data will be cleared.
    It's about the same as fl_set_xyplot_data(), but uses double type
    internally.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        xlist : list_of_float
            list of values for the tabulated function on the x-axis
        ylist : list_of_float
            list of values for the tabulated function on the y-axis
        npoints : int
            number of data points
        title : str
            title drawn above the xyplot
        xlabel : str
            label for values on x-axis
        ylabel : str
            label for values on y-axis

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_data_double = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_data_double",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_double),
        cty.POINTER(cty.c_double), cty.c_int, xfdata.STRING, xfdata.STRING,
        xfdata.STRING],
        """void fl_set_xyplot_data_double(FL_OBJECT * ob, double * x,
           double * y, int n, const char * title, const char * xlabel,
           const char * ylabel)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    pxlist = cty.cast(xlist, cty.POINTER(cty.c_double))
    pylist = cty.cast(ylist, cty.POINTER(cty.c_double))
    inpoints = library.convert_to_int(npoints)
    stitle = library.convert_to_string(title)
    sxlabel = library.convert_to_string(xlabel)
    sylabel = library.convert_to_string(ylabel)
    library.keep_elem_refs(pFlObject, xlist, ylist, npoints, title, xlabel,
            ylabel, pxlist, pylist, inpoints, stitle, sxlabel, sylabel)
    _fl_set_xyplot_data_double(pFlObject, pxlist, pylist, npoints, title, \
            xlabel, ylabel, inpoints, stitle, sxlabel, sylabel)


def fl_set_xyplot_file(pFlObject, fname, title, xlabel, ylabel):
    """fl_set_xyplot_file(pFlObject, fname, title, xlabel, ylabel)
    
    Sets or replaces data for a xyplot object, by loading a tabulated
    function from a file. The data file should be an ASCII file consisting
    of data lines. Each data line must have two columns, indicating the (x,y)
    pair with a space, tab or comma (,) separating the two columns. Lines
    that start with any of !, ; or # are considered to be comments and are
    ignored.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        fname : str
            name of file.
        title : str
            title of xyplot
        xlabel : str
            label for horizontal values
        ylabel : str
            label for vertical values

    Returns
    -------
        points : int
            number of data points successfully read, or 0 (if the file
            cannot be opened)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_file = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_file",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING,
        xfdata.STRING, xfdata.STRING, xfdata.STRING],
        """int fl_set_xyplot_file(FL_OBJECT * ob, const char * f,
           const char * title, const char * xl, const char * yl)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    sfname = library.convert_to_string(fname)
    stitle = library.convert_to_string(title)
    sxlabel = library.convert_to_string(xlabel)
    sylabel = library.convert_to_string(ylabel)
    library.keep_elem_refs(pFlObject, fname, title, xlabel, ylabel, sfname,
            stitle, sxlabel, sylabel)
    retval = _fl_set_xyplot_file(pFlObject, sfname, stitle, sxlabel, sylabel)
    return retval


def fl_insert_xyplot_data(pFlObject, ovlid, idxpt, x, y):
    """fl_insert_xyplot_data(pFlObject, ovlid, idxpt, x, y)
    
    Inserts a point after a supplied index position in a xyplot object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        ovlid : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays()
        idxpt : int
            the index of the point after which the data new point is to be
            inserted. If it is -1 inserts the point in front. To append to
            the data, set it to be equal or larger than the return value of
            fl_get_xyplot_numdata().
        x : float
            horizontal position of the point
        y : float
            vertical position of the point

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_insert_xyplot_data = library.cfuncproto(
        library.load_so_libforms(), "fl_insert_xyplot_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int,
        cty.c_double, cty.c_double],
        """void fl_insert_xyplot_data(FL_OBJECT * ob, int id, int n,
           double x, double y)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iovlid = library.convert_to_int(ovlid)
    iidxpt = library.convert_to_int(idxpt)
    fx = library.convert_to_double(x)
    fy = library.convert_to_double(y)
    library.keep_elem_refs(pFlObject, ovlid, idxpt, x, y, iovlid, iidxpt, \
            fx, fy)
    _fl_insert_xyplot_data(pFlObject, iovlid, iidxpt, fx, fy)


def fl_add_xyplot_text(pFlObject, x, y, text, align, colr):
    """Places an inset text on an xyplot object (up to
    xfdata.FL_MAX_XYPLOTOVERLAY or the value set via
    fl_set_xyplot_maxoverlays() of such insets can be accommodated).


    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        x : float
            horizontal coordinates where text is to be placed
        y : float
            vertical coordinates where text is to be placed
        text : str
            text to be added to xyplot. If it starts with '@', a symbol
            is drawn.
        align : int
            alignment of text. Values (from xfdata.py) FL_ALIGN_CENTER,
            FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
            FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP, FL_ALIGN_LEFT_BOTTOM,
            FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE, FL_ALIGN_VERT. Bitwise
            OR with FL_ALIGN_INSIDE is allowed.
        colr : long_pos
            color value

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_add_xyplot_text = library.cfuncproto(
        library.load_so_libforms(), "fl_add_xyplot_text",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double,
        xfdata.STRING, cty.c_int, xfdata.FL_COLOR],
        """void fl_add_xyplot_text(FL_OBJECT * ob, double x, double y,
           const char * text, int al, FL_COLOR col)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    fx = library.convert_to_double(x)
    fy = library.convert_to_double(y)
    stext = library.convert_to_string(text)
    library.checkfatal_allowed_value_in_list(align, xfdata.ALIGN_list)
    ialign = library.convert_to_int(align)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(pFlObject, x, y, text, align, colr, fx, fy, \
            stext, ialign, ulcolr)
    _fl_add_xyplot_text(pFlObject, fx, fy, stext, ialign, ulcolr)


def fl_delete_xyplot_text(pFlObject, text):
    """fl_delete_xyplot_text(pFlObject, text)
    
    Removes an inset text from a xyplot object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        text : str
            text to be deleted from xyplot

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_delete_xyplot_text = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_xyplot_text",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_delete_xyplot_text(FL_OBJECT * ob, const char * text)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    stext = library.convert_to_string(text)
    library.keep_elem_refs(pFlObject, text, stext)
    _fl_delete_xyplot_text(pFlObject, stext)


def fl_set_xyplot_maxoverlays(pFlObject, numovl):
    """fl_set_xyplot_maxoverlays(pFlObject, numovl)

    Changes the maximum number of overlays an object can have. By default,
    it is 32.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        numovl : int
            maximum number of overlays.

    Returns
    -------
        oldmaxovl : int
            previous maximum number of overlays

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_maxoverlays = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_maxoverlays",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_xyplot_maxoverlays(FL_OBJECT * ob, int maxover)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    inumovl = library.convert_to_int(numovl)
    library.keep_elem_refs(pFlObject, numovl, inumovl)
    retval = _fl_set_xyplot_maxoverlays(pFlObject, inumovl)
    return retval


def fl_add_xyplot_overlay(pFlObject, ovlid, x, y, npoints, colr):
    """fl_add_xyplot_overlay(pFlObject, ovlid, x, y, npoints, colr)
    
    Overlays several plots together.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        ovlid : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY
            or the number set via fl_set_xyplot_maxoverlays()
        x : float
            horizontal position
        y : float
            vertical position
        npoints : int
            number of data points.
        colr : long_pos
            color value

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_add_xyplot_overlay = library.cfuncproto(
        library.load_so_libforms(), "fl_add_xyplot_overlay",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_float), cty.c_int,
        xfdata.FL_COLOR],
        """void fl_add_xyplot_overlay(FL_OBJECT * ob, int id, float * x,
           float * y, int n, FL_COLOR col)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    iovlid = library.convert_to_int(ovlid)
    px = cty.cast(x, cty.POINTER(cty.c_float))
    py = cty.cast(y, cty.POINTER(cty.c_float))
    inpoints = library.convert_to_int(npoints)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(pFlObject, ovlid, x, y, npoints, colr, iovlid,
            px, py, inpoints, ulcolr)
    _fl_add_xyplot_overlay(pFlObject, iovlid, px, py, inpoints, ulcolr)


def fl_add_xyplot_overlay_file(pFlObject, ovlid, fname, colr):
    """fl_add_xyplot_overlay_file(pFlObject, ovlid, fname, colr)
    
    Adds an overlay, using a data file to specify the (x,y) function for
    the base data.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        ovlid : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays()
        fname : str
            name of file
        colr : long_pos
            color value

    Returns
    -------
        points : int
            number of data points successfully read

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_add_xyplot_overlay_file = library.cfuncproto(
        library.load_so_libforms(), "fl_add_xyplot_overlay_file",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, xfdata.STRING,
        xfdata.FL_COLOR],
        """int fl_add_xyplot_overlay_file(FL_OBJECT * ob, int id,
        const char * f, FL_COLOR c)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    iovlid = library.convert_to_int(ovlid)
    sfname = library.convert_to_string(fname)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(pFlObject, ovlid, fname, colr, iovlid, \
            sfname, ulcolr)
    retval = _fl_add_xyplot_overlay_file(pFlObject, iovlid, sfname, ulcolr)
    return retval


# fl_set_xyplot_return(pFlObject, when) function placeholder (internal)


def fl_set_xyplot_xtics(pFlObject, major, minor):
    """fl_set_xyplot_xtics(pFlObject, major, minor)
    
    Changes the number of tic marks of a xyplot object on x-axis. The
    actual scaling routine may choose a value other than that requested if it
    decides that this would make the plot look nicer, thus major and minor
    are only taken as a hint to the scaling routine. However, in almost all
    cases the scaling routine will not generate a major that differs from the
    requested value by more than 3. fl_set_xyplot_alphaxtics can?t be active
    at the same time and the one that gets used is the one that was set last.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        major : int
            number of tic marks to be placed on the plot. If it is -1
            suppresses the tic marks completely, if it is 0 restores the
            default settings.
        minor : int
            number of divisions between major tic marks. If it is -1
            suppresses the tic marks completely, if it is 0 restores the
            default settings.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_xtics = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_xtics",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_xtics(FL_OBJECT * ob, int major, int minor)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    imajor = library.convert_to_int(major)
    iminor = library.convert_to_int(minor)
    library.keep_elem_refs(pFlObject, major, minor, imajor, iminor)
    _fl_set_xyplot_xtics(pFlObject, imajor, iminor)


def fl_set_xyplot_ytics(pFlObject, major, minor):
    """fl_set_xyplot_ytics(pFlObject, major, minor)
    
    Changes the number of tic marks of a xyplot object on y-axis. The
    actual scaling routine may choose a value other than that requested if it
    decides that this would make the plot look nicer, thus major and minor
    are only taken as a hint to the scaling routine. However, in almost all
    cases the scaling routine will not generate a major that differs from the
    requested value by more than 3. fl_set_xyplot_ytics can?t be active at the
    same time and the one that gets used is the one that was set last.


    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        major : int
            number of tic marks to be placed on the plot. If it is -1
            suppresses the tic marks completely, if it is 0 restores the
            default settings.
        minor : int
            number of divisions between major tic marks. If it is -1
            suppresses the tic marks completely, if it is 0 restores the
            default settings.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_ytics = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_ytics",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_ytics(FL_OBJECT * ob, int major, int minor)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    imajor = library.convert_to_int(major)
    iminor = library.convert_to_int(minor)
    library.keep_elem_refs(pFlObject, major, minor, imajor, iminor)
    _fl_set_xyplot_ytics(pFlObject, imajor, iminor)


def fl_set_xyplot_xbounds(pFlObject, minbound, maxbound):
    """fl_set_xyplot_xbounds(pFlObject, minbound, maxbound)
    
    Sets and uses absolute bounds/limits on x-axis of a xyplot object as
    opposed to actual bounds in data.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        minbound : float
            minimum bound to set
        maxbound : float
            maximum bound to set

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_xbounds = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_xbounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_xyplot_xbounds(FL_OBJECT * ob, double xmin,
           double xmax)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    fminbound = library.convert_to_double(minbound)
    fmaxbound = library.convert_to_double(maxbound)
    library.keep_elem_refs(pFlObject, minbound, maxbound, fminbound, \
            fmaxbound)
    _fl_set_xyplot_xbounds(pFlObject, fminbound, fmaxbound)


def fl_set_xyplot_ybounds(pFlObject, minbound, maxbound):
    """fl_set_xyplot_ybounds(pFlObject, minbound, maxbound)
    
    Sets and uses absolute bounds/limits on y-axis of a xyplot object as
    opposed to actual bounds in data.


    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        minbound : float
            minimum bound to set
        maxbound : float
            maximum bound to set

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_ybounds = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_ybounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],
        """void fl_set_xyplot_ybounds(FL_OBJECT * ob, double ymin,
           double ymax)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    fminbound = library.convert_to_double(minbound)
    fmaxbound = library.convert_to_double(maxbound)
    library.keep_elem_refs(pFlObject, minbound, maxbound, fminbound, \
            fmaxbound)
    _fl_set_xyplot_ybounds(pFlObject, fminbound, fmaxbound)


def fl_get_xyplot_xbounds(pFlObject):
    """fl_get_xyplot_xbounds(pFlObject)
    
    Obtains the current bounds/limits for x-axis of a xyplot object. The
    bounds returned are the bounds used in clipping the data, which are not
    necessarily the bounds used in computing the world/screen mapping due to
    tic rounding.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object

    Returns
    -------
        minbound : float
            minimum bound
        maxbound : float, float
            maximum bound

    Examples
    --------
        >>> *todo*

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_xyplot_xbounds(pFlObject, minbound, maxbound)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_xbounds = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_xbounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_xbounds(FL_OBJECT * ob, float * xmin,
           float * xmax)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    minbound, pminbound = library.make_float_and_pointer()
    maxbound, pmaxbound = library.make_float_and_pointer()
    library.keep_elem_refs(pFlObject, minbound, maxbound, pminbound, \
            pmaxbound)
    _fl_get_xyplot_xbounds(pFlObject, pminbound, pmaxbound)
    return minbound.value, maxbound.value


def fl_get_xyplot_ybounds(pFlObject):
    """fl_get_xyplot_ybounds(pFlObject)
    
    Obtains the current bounds/limits for y-axis of a xyplot object. The
    bounds returned are the bounds used in clipping the data, which are not
    necessarily the bounds used in computing the world/screen mapping due to
    tic rounding.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object

    Returns
    -------
        minbound : float
            minimum bound
        maxbound : float, float
            maximum bound

    Examples
    --------
        >>> *todo*

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_xyplot_ybounds(pFlObject, minbound, maxbound)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_ybounds = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_ybounds",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_ybounds(FL_OBJECT * ob, float * ymin,
           float * ymax)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    minbound, pminbound = library.make_float_and_pointer()
    maxbound, pmaxbound = library.make_float_and_pointer()
    library.keep_elem_refs(pFlObject, minbound, maxbound, pminbound, \
            pmaxbound)
    _fl_get_xyplot_ybounds(pFlObject, pminbound, pmaxbound)
    return minbound.value, maxbound.value


def fl_get_xyplot(pFlObject):
    """fl_get_xyplot(pFlObject)
    
    Obtains the current value of the point of a xyplot object that has
    changed.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object

    Returns
    -------
        x : float
            horizontal position of data point
        y : float
            vertical position of data point
        dataidx : int
            the data index starting from 0, or -1 (if no point is changed)

    Examples
    --------
        >>> *todo*

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_xyplot(pFlObject, x, y, i)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
        """void fl_get_xyplot(FL_OBJECT * ob, float * x, float * y,
           int * i)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    x, px = library.make_float_and_pointer()
    y, py = library.make_float_and_pointer()
    i, pi = library.make_int_and_pointer()
    library.keep_elem_refs(pFlObject, x, y, i, px, py, pi)
    _fl_get_xyplot(pFlObject, px, py, pi)
    return x.value, y.value, i.value


def fl_get_xyplot_data(pFlObject):
    """fl_get_xyplot_data(pFlObject)
    
    Obtains a copy of the current xyplot data.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object

    Returns
    -------
        xval : float
            list of x-axis values?
        yval : float
            list of y-axis values?
        points : int
            number of data points

    Examples
    --------
        >>> *todo*

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_xyplot_data(pFlObject, x, y, n)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_data = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_int)],
        """void fl_get_xyplot_data(FL_OBJECT * ob, float * x, float * y,
           int * n)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    x, px = library.make_float_and_pointer()
    y, py = library.make_float_and_pointer()
    n, pn = library.make_int_and_pointer()
    library.keep_elem_refs(pFlObject, x, y, n, px, py, pn)
    _fl_get_xyplot_data(pFlObject, px, py, pn)
    return x.value, y.value, n.value


# TODO: verify it it can be suppressed - problematic
def fl_get_xyplot_data_pointer(pFlObject, ovlid):
    """fl_get_xyplot_data_pointer(pFlObject, ovlid)
    
    Obtains the pointer to the data of xyplot object rather (instead of a
    copy of the data).

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        ovlid : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays()

    Returns
    -------
        pxval : list_of_floats?
            pointer to list of x-axis values?
        pyval : list_of_floats?
            pointer to list of y-axis values?
        points : int
            number of data points

    Examples
    --------
        >>> *todo*

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_xyplot_data_pointer(pFlObject, ovlid, x, y, n)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_data_pointer = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_data_pointer",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        cty.POINTER(cty.POINTER(cty.c_float)),
        cty.POINTER(cty.POINTER(cty.c_float)), cty.POINTER(cty.c_int)],
        """void fl_get_xyplot_data_cty.POINTER(FL_OBJECT * ob, int id,
           float * * x, float * * y, int * n)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iovlid = library.convert_to_int(ovlid)
    x, px = library.make_float_and_pointer()
    y, py = library.make_float_and_pointer()
    npoints, pnpoints = library.make_int_and_pointer()
    library.keep_elem_refs(pFlObject, ovlid, iovlid, x, y, npoints, \
            px, py, pnpoints)
    _fl_get_xyplot_data_pointer(pFlObject, iovlid, px, py, pnpoints)
    return x.value, y.value, npoints.value


def fl_get_xyplot_overlay_data(pFlObject, ovlid):
    """fl_get_xyplot_overlay_data(pFlObject, ovlid)
    
    Obtains the current data of an overlay of a xyplot object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        ovlid : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays(). If it is 0 uses
            the base dataset

    Returns
    -------
        xval : float
            x-axis value
        yval : float
            y-axis value
        npoints : int
            number of data points

    Examples
    --------
        >>> *todo*

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_xyplot_overlay_data(pFlObject, ovlid, x, y, n)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_overlay_data = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_overlay_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_int)],
        """void fl_get_xyplot_overlay_data(FL_OBJECT * ob, int id,
           float * x, float * y, int * n)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iovlid = library.convert_to_int(ovlid)
    x, px = library.make_float_and_pointer()
    y, py = library.make_float_and_pointer()
    npoints, pnpoints = library.make_int_and_pointer()
    library.keep_elem_refs(pFlObject, ovlid, iovlid, x, y, npoints, \
            px, py, pnpoints)
    _fl_get_xyplot_overlay_data(pFlObject, iovlid, px, py, pnpoints)
    return x.value, y.value, npoints.value


def fl_set_xyplot_overlay_type(pFlObject, ovlid, plottype):
    """fl_set_xyplot_overlay_type(pFlObject, ovlid, plottype)
    
    Changes the type for an overlay of a xyplot object. The type used in
    overlay plot is the same as the object itself. Note that although the API
    of adding an overlay is similar to adding an object, an xyplot overlay is
    not a separate object, it is simply a property of an already existing
    xyplot.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        ovlid : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays()
        plottype : int
            type of xyplot.  Values (from xfdata.py) FL_NORMAL_XYPLOT,
            FL_SQUARE_XYPLOT, FL_CIRCLE_XYPLOT, FL_FILL_XYPLOT,
            FL_POINTS_XYPLOT, FL_DASHED_XYPLOT, FL_IMPULSE_XYPLOT,
            FL_ACTIVE_XYPLOT, FL_EMPTY_XYPLOT, FL_DOTTED_XYPLOT,
            FL_DOTDASHED_XYPLOT, FL_LONGDASHED_XYPLOT, FL_LINEPOINTS_XYPLOT

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_overlay_type = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_overlay_type",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_overlay_type(FL_OBJECT * ob, int id,
           int type)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iovlid = library.convert_to_int(ovlid)
    library.checkfatal_allowed_value_in_list(plottype, xfdata.XYPLOTTYPE_list)
    iplottype = library.convert_to_int(plottype)
    library.keep_elem_refs(pFlObject, ovlid, plottype, iovlid, iplottype)
    _fl_set_xyplot_overlay_type(pFlObject, iovlid, iplottype)


def fl_delete_xyplot_overlay(pFlObject, ovlid):
    """fl_delete_xyplot_overlay(pFlObject, ovlid)
    
    Deletes an overlay of a xyplot object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        ovlid : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays()

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_delete_xyplot_overlay = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_xyplot_overlay",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_delete_xyplot_overlay(FL_OBJECT * ob, int id)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iovlid = library.convert_to_int(ovlid)
    library.keep_elem_refs(pFlObject, ovlid, iovlid)
    _fl_delete_xyplot_overlay(pFlObject, iovlid)


def fl_set_xyplot_interpolate(pFlObject, ovlid, deg, grid):
    """fl_set_xyplot_interpolate(pFlObject, ovlid, deg, grid)
    
    Interpolates xyplot data using an nth order Lagrangian polynomial.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        ovlid : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays(). If it is 0 uses
            the base data set
        deg : int
            the order of the polynomial to use. If it is 0 or 1, restores the
            default linear interpolation.
        grid : float
            the working grid onto which the data are to be interpolated.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_interpolate = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_interpolate",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int,
        cty.c_double],
        """void fl_set_xyplot_interpolate(FL_OBJECT * ob, int id,
           int deg, double grid)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iovlid = library.convert_to_int(ovlid)
    ideg = library.convert_to_int(deg)
    fgrid = library.convert_to_double(grid)
    library.keep_elem_refs(pFlObject, ovlid, deg, grid, iovlid, ideg, fgrid)
    _fl_set_xyplot_interpolate(pFlObject, iovlid, ideg, fgrid)


def fl_set_xyplot_inspect(pFlObject, yesno):
    """fl_set_xyplot_inspect(pFlObject, yesno)
    
    Makes aware or not xyplot objects of mouse clicks. Once an XYPlot is in
    inspect mode, whenever the mouse is released and the mouse position is on
    one of the data point, the object is returned to the caller or its
    callback is invoked. You can use fl_get_xyplot() to find out which point
    the mouse was clicked on.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        yesno : int
            flag to enable/disable inspect mode. Values 0 (disabled) or
            1 (enabled)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_inspect = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_inspect",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_inspect(FL_OBJECT * ob, int yes)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iyesno = library.convert_to_int(yesno)
    library.keep_elem_refs(pFlObject, yesno, iyesno)
    _fl_set_xyplot_inspect(pFlObject, iyesno)


def fl_set_xyplot_symbolsize(pFlObject, symsize):
    """fl_set_xyplot_symbolsize(pFlObject, symsize)
    
    Changes the size of the symbols drawn at data points of a xyplot
    object. By default it is 4.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        symsize : int
            size of symbol in pixel

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_symbolsize = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_symbolsize",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_symbolsize(FL_OBJECT * ob, int n)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    isymsize = library.convert_to_int(symsize)
    library.keep_elem_refs(pFlObject, symsize, isymsize)
    _fl_set_xyplot_symbolsize(pFlObject, isymsize)


def fl_replace_xyplot_point(pFlObject, idxpt, x, y):
    """fl_replace_xyplot_point(pFlObject, idxpt, x, y)
    
    Replaces the value of a particular point of a xyplot object. It acts
    on the first dataset only.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        idxpt : int
            index of the value to be replaced. The first value has an index
            of 0.
        x : float
            new horizontal position
        y : float
            new vertical position

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_replace_xyplot_point = library.cfuncproto(
        library.load_so_libforms(), "fl_replace_xyplot_point",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_double,
        cty.c_double],
        """void fl_replace_xyplot_point(FL_OBJECT * ob, int i,
           double x, double y)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iidxpt = library.convert_to_int(idxpt)
    fx = library.convert_to_double(x)
    fy = library.convert_to_double(y)
    library.keep_elem_refs(pFlObject, idxpt, x, y, iidxpt, fx, fy)
    _fl_replace_xyplot_point(pFlObject, iidxpt, fx, fy)


def fl_replace_xyplot_point_in_overlay(pFlObject, idxpt, setID, x, y):
    """fl_replace_xyplot_point_in_overlay(pFlObject, idxpt, setID, x, y)
    
    Replaces the value of a particular point in specified dataset. This
    routine is an extension of fl_replace_xyplot_point() for more than one
    dataset.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        idxpt : int
            index of the value to be replaced. The first value has an index
            of 0.
        setID : int
            dataset the points belongs to. The first data set is 0.
        x : float
            new horizontal position
        y : float
            new vertical position

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_replace_xyplot_point_in_overlay = library.cfuncproto(
        library.load_so_libforms(), "fl_replace_xyplot_point_in_overlay",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int, \
        cty.c_double, cty.c_double],
        """void fl_replace_xyplot_point_in_overlay(FL_OBJECT * ob,
           int i, int setID, double x, double y)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iidxpt = library.convert_to_int(idxpt)
    isetID = library.convert_to_int(setID)
    fx = library.convert_to_double(x)
    fy = library.convert_to_double(y)
    library.keep_elem_refs(pFlObject, idxpt, setID, x, y, iidxpt, \
            isetID, fx, fy)
    _fl_replace_xyplot_point_in_overlay(pFlObject, iidxpt, isetID, fx, fy)


def fl_get_xyplot_xmapping(pFlObject):
    """fl_get_xyplot_xmapping(pFlObject)
    
    Obtains the mapping between the screen coordinates and data on x-axis.
    Mapping constants are used as follows
    screenCoord = a * data + b       (linear scale)
    screenCoord = a * math.log(data) / math.log(p) + b (log scale)
    where p is the base of the requested logarithm.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object

    Returns
    -------
        mapcnst1 : float
            first mapping constant
        mapcnst2 : float
            second mapping constant

    Examples
    --------
        >>> *todo*

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_xyplot_xmapping(pFlObject, a, b)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_xmapping = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_xmapping",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_xmapping(FL_OBJECT * ob, float * a,
           float * b)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    a, pa = library.make_float_and_pointer()
    b, pb = library.make_float_and_pointer()
    library.keep_elem_refs(pFlObject, a, b, pa, pb)
    _fl_get_xyplot_xmapping(pFlObject, pa, pb)
    return a.value, b.value


def fl_get_xyplot_ymapping(pFlObject):
    """fl_get_xyplot_ymapping(pFlObject)
    
    Obtains the mapping between the screen coordinates and data on y-axis.
    Mapping constants are used as follows
    screenCoord = a * data + b       (linear scale)
    screenCoord = a * math.log(data) / math.log(p) + b (log scale)
    where p is the base of the requested logarithm.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object

    Returns
    -------
        mapcnst1 : float
            first mapping constant
        mapcnst2 : float
            second mapping constant

    Examples
    --------
        >>> *todo*

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_xyplot_ymapping(pFlObject, a, b)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_ymapping = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_ymapping",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_float),
        cty.POINTER(cty.c_float)],
        """void fl_get_xyplot_ymapping(FL_OBJECT * ob, float * a,
           float * b)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    a, pa = library.make_float_and_pointer()
    b, pb = library.make_float_and_pointer()
    library.keep_elem_refs(pFlObject, a, b, pa, pb)
    _fl_get_xyplot_ymapping(pFlObject, pa, pb)
    return a.value, b.value


def fl_set_xyplot_keys(pFlObject, keystxt, xx, yy, align):
    """fl_set_xyplot_keys(pFlObject, keystxt, xx, yy, align)
    
    Adds a series of keys to a particular plot and sets the position for
    each key. A key is the combination of drawing a segment of the plot line
    style with a piece of text that describes what the corresponding line
    represents. Obviously, keys are most useful when you have more than one
    plot (i.e. overlays).

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        keystxt : list_of_str
            series of keys for each plot. The last element of the array must
            be None to indicate the end. The array index is the plot id,
            i.e. key[0] is the key for the base plot, key[1] the key for the
            first overlay, etc.
        xx : list_of_float
            series of horizontal positions in world coordinate system
        yy : list_of_float
            series of horizontal positions in world coordinate system
        align : int
            alignment of the entire key box relative to the given position.
            Values (from xfdata.py) FL_ALIGN_CENTER, FL_ALIGN_TOP,
            FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT, FL_ALIGN_LEFT_TOP,
            FL_ALIGN_RIGHT_TOP, FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM,
            FL_ALIGN_INSIDE, FL_ALIGN_VERT. Bitwise OR with FL_ALIGN_INSIDE
            is allowed.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_keys = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_keys",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.STRING),
        cty.c_float, cty.c_float, cty.c_int],
        """void fl_set_xyplot_keys(FL_OBJECT * ob, char * * keys, float x,
           float y, int align)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    # keystxt to be handled
    fxx = library.convert_to_float(xx)
    fyy = library.convert_to_float(yy)
    library.checkfatal_allowed_value_in_list(align, xfdata.ALIGN_list)
    ialign = library.convert_to_int(align)
    library.keep_elem_refs(pFlObject, keystxt, xx, yy, align, fxx, fyy, \
            ialign)
    _fl_set_xyplot_keys(pFlObject, keystxt, fxx, fyy, ialign)


def fl_set_xyplot_key(pFlObject, ovlid, keytxt):
    """fl_set_xyplot_key(pFlObject, ovlid, keytxt)
    
    Adds or removes a key to a particular plot. A key is the combination
    of drawing a segment of the plot line style with a piece of text that
    describes what the corresponding line represents. Obviously, keys are
    most useful when you have more than one plot (i.e. overlays). All the
    keys will be drawn together inside a box.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        ovlid : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays()
        keytxt : str
            key for the plot. If it is 'None' removes a key.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_key = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_key",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_void_p],
        """void fl_set_xyplot_key(FL_OBJECT * ob, int id,
           const char * key)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iovlid = library.convert_to_int(ovlid)
    if not keytxt:          # it is None
        skeytxt = cty.cast(keytxt, cty.POINTER(cty.c_void_p))
    else:                   # real string
        skeytxt = library.convert_to_string(keytxt)
    library.keep_elem_refs(pFlObject, ovlid, keytxt, iovlid, skeytxt)
    _fl_set_xyplot_key(pFlObject, iovlid, skeytxt)


def fl_set_xyplot_key_position(pFlObject, x, y, align):
    """fl_set_xyplot_key_position(pFlObject, x, y, align)
    
    Sets the position of the keys in xyplot object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        x : float
            horizontal position in world coordinate system
        y : float
            horizontal position in world coordinate system
        align : int
            alignment of the entire key box relative to the given position.
            Values (from xfdata.py) FL_ALIGN_CENTER, FL_ALIGN_TOP,
            FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT, FL_ALIGN_LEFT_TOP,
            FL_ALIGN_RIGHT_TOP, FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM,
            FL_ALIGN_INSIDE, FL_ALIGN_VERT. Bitwise OR with FL_ALIGN_INSIDE
            is allowed.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_key_position = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_key_position",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_float, cty.c_float,
        cty.c_int],
        """void fl_set_xyplot_key_position(FL_OBJECT * ob, float x,
           float y, int align)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    fx = library.convert_to_float(x)
    fy = library.convert_to_float(y)
    library.checkfatal_allowed_value_in_list(align, xfdata.ALIGN_list)
    ialign = library.convert_to_int(align)
    library.keep_elem_refs(pFlObject, x, y, align, fx, fy, ialign)
    _fl_set_xyplot_key_position(pFlObject, fx, fy, ialign)


def fl_set_xyplot_key_font(pFlObject, style, size):
    """fl_set_xyplot_key_font(pFlObject, style, size)
    
    Changes the font the key text uses in xyplot object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        style : int
            label style. Values (from xfdata.py) FL_NORMAL_STYLE,
            FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE,
            FL_FIXED_STYLE, FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
            FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE, FL_TIMESBOLD_STYLE,
            FL_TIMESITALIC_STYLE, FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
            FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
            FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
          size : int
            label size. Values (from xfdata.py) FL_TINY_SIZE, FL_SMALL_SIZE,
            FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE, FL_HUGE_SIZE,
            FL_DEFAULT_SIZE

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_key_font = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_key_font",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_key_font(FL_OBJECT * ob, int style,
           int size)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    istyle = library.convert_to_int(style)
    library.checknonfatal_allowed_value_in_list(size, xfdata.FONTSIZE_list)
    isize = library.convert_to_int(size)
    library.keep_elem_refs(pFlObject, style, size, istyle, isize)
    _fl_set_xyplot_key_font(pFlObject, istyle, isize)


def fl_get_xyplot_numdata(pFlObject, ovlid):
    """fl_get_xyplot_numdata(pFlObject, ovlid)
    
    Obtains the number of data points of a xyplot object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        ovlid : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays(). If it is 0 uses
            the base dataset.

    Returns
    -------
        npoints : int
            number of data points

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_xyplot_numdata = library.cfuncproto(
        library.load_so_libforms(), "fl_get_xyplot_numdata",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_get_xyplot_numdata(FL_OBJECT * ob, int id)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iovlid = library.convert_to_int(ovlid)
    library.keep_elem_refs(pFlObject, ovlid, iovlid)
    retval = _fl_get_xyplot_numdata(pFlObject, iovlid)
    return retval


# fl_set_xyplot_fontsize function placeholder (deprecated)
# fl_set_xyplot_fontstyle function placeholder (deprecated)


def fl_xyplot_s2w(pFlObject, sx, sy):
    """fl_xyplot_s2w(pFlObject, sx, sy)
    
    Obtains, by conversion, the world coordinates from the screen
    coordinates of a xyplot object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        sx : float
            horizontal position in screen coordinates
        sy : float
            vertical position in screen coordinates

    Returns
    -------
        wx : float
            horizontal position in world coordinates
        wy : float
            vertical position in world coordinates

    Examples
    --------
        >>> *todo*

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_xyplot_s2w(pFlObject, sx, sy, wx, wy)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_xyplot_s2w = library.cfuncproto(
        library.load_so_libforms(), "fl_xyplot_s2w",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double,
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_float)],
        """void fl_xyplot_s2w(FL_OBJECT * ob, double sx, double sy,
           float * wx, float * wy)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    fsx = library.convert_to_double(sx)
    fsy = library.convert_to_double(sy)
    wx, pwx = library.make_float_and_pointer()
    wy, pwy = library.make_float_and_pointer()
    library.keep_elem_refs(pFlObject, sx, sy, wx, pwx, wy, pwy, fsx, fsy)
    _fl_xyplot_s2w(pFlObject, fsx, fsy, pwx, pwy)
    return wx.value, wy.value


def fl_xyplot_w2s(pFlObject, wx, wy):
    """fl_xyplot_w2s(pFlObject, wx, wy)
    
    Obtains, by conversion, the screen coordinates from the world
    coordinates of a xyplot object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        wx : float
            horizontal position in world coordinates
        wy : float
            vertical position in world coordinates

    Returns
    -------
        sx : float
            horizontal position in screen coordinates
        sy : float
            vertical position in screen coordinates

    Examples
    --------
        >>> *todo*

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_xyplot_w2s(pFlObject, wx, wy)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_xyplot_w2s = library.cfuncproto(
        library.load_so_libforms(), "fl_xyplot_w2s",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double,
        cty.POINTER(cty.c_float), cty.POINTER(cty.c_float)],
        """void fl_xyplot_w2s(FL_OBJECT * ob, double wx, double wy,
           float * sx, float * sy)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    fwx = library.convert_to_double(wx)
    fwy = library.convert_to_double(wy)
    sx, psx = library.make_float_and_pointer()
    sy, psy = library.make_float_and_pointer()
    library.keep_elem_refs(pFlObject, wx, wy, sx, psx, sy, psy, fwx, fwy)
    _fl_xyplot_w2s(pFlObject, fwx, fwy, psx, psy)
    return sx.value, sy.value


def fl_set_xyplot_xscale(pFlObject, scale, base):
    """fl_set_xyplot_xscale(pFlObject, scale, base)
    
    Changes the scaling for a xyplot object. By default, a linear scale in
    x-direction is used.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        scale : int
            scaling to be used. Values (from xfdata.py) FL_LINEAR (default)
            or FL_LOG
        base : float
            base of the logarithm to be used. Used only if scale is
            xfdata.FL_LOG

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_xscale = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_xscale",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_double],
        """void fl_set_xyplot_xscale(FL_OBJECT * ob, int scale,
           double base)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checkfatal_allowed_value_in_list(scale, xfdata.XYPLOTSCALE_list)
    iscale = library.convert_to_int(scale)
    fbase = library.convert_to_double(base)
    library.keep_elem_refs(pFlObject, scale, base, iscale, fbase)
    _fl_set_xyplot_xscale(pFlObject, iscale, fbase)


def fl_set_xyplot_yscale(pFlObject, scale, base):
    """fl_set_xyplot_yscale(pFlObject, scale, base)
    
    Changes the scaling for a xyplot object. By default, a linear scale in
    y-direction is used.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        scale : int
            scaling to be used. Values (from xfdata.py) FL_LINEAR (default)
            or FL_LOG
        base : float
            base of the logarithm to be used. Used only if scale is
            xfdata.FL_LOG

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_yscale = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_yscale",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_double],
        """void fl_set_xyplot_yscale(FL_OBJECT * ob, int scale,
           double base)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checkfatal_allowed_value_in_list(scale, xfdata.XYPLOTSCALE_list)
    iscale = library.convert_to_int(scale)
    fbase = library.convert_to_double(base)
    library.keep_elem_refs(pFlObject, scale, base, iscale, fbase)
    _fl_set_xyplot_yscale(pFlObject, iscale, fbase)


def fl_clear_xyplot(pFlObject):
    """fl_clear_xyplot(pFlObject)
    
    Clears a xyplot object. It frees all data associated with an xyplot,
    including all overlays and all inset texts. It does not reset all
    plotting options, such as line thickness, major/minor divisions etc. nor
    does it free all memories associated with the xyplot, for this
    fl_free_object() is needed.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_clear_xyplot = library.cfuncproto(
        library.load_so_libforms(), "fl_clear_xyplot",
        None, [cty.POINTER(xfdata.FL_OBJECT)],
        """void fl_clear_xyplot(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_clear_xyplot(pFlObject)


def fl_set_xyplot_linewidth(pFlObject, ovlid, lw):
    """fl_set_xyplot_linewidth(pFlObject, ovlid, lw)
    
    Changes the line thickness of an xyplot (base data or overlay).

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        ovlid : int
            overlay id. Values between 1 and xfdata.FL_MAX_XYPLOTOVERLAY or
            the number set via fl_set_xyplot_maxoverlays(). If it is 0, uses
            the base dataset.
        lw : int
            width of line. If it is 0, restores the server default and
            typically is the fastest

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """

    _fl_set_xyplot_linewidth = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_linewidth",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """void fl_set_xyplot_linewidth(FL_OBJECT * ob, int id, int lw)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iovlid = library.convert_to_int(ovlid)
    ilw = library.convert_to_int(lw)
    library.keep_elem_refs(pFlObject, ovlid, lw, iovlid, ilw)
    _fl_set_xyplot_linewidth(pFlObject, iovlid, ilw)


def fl_set_xyplot_xgrid(pFlObject, grid):
    """fl_set_xyplot_xgrid(pFlObject, grid)
    
    Sets up the grid level for x-axis of a xyplot object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        grid : int
            level of grid to be set. Values (from xfdata.py) FL_GRID_NONE,
            FL_GRID_MAJOR, FL_GRID_MINOR

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """

    _fl_set_xyplot_xgrid = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_xgrid",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_xgrid(FL_OBJECT * ob, int xgrid)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checkfatal_allowed_value_in_list(grid, xfdata.XYPLOTGRID_list)
    igrid = library.convert_to_int(grid)
    library.keep_elem_refs(pFlObject, grid, igrid)
    _fl_set_xyplot_xgrid(pFlObject, igrid)


def fl_set_xyplot_ygrid(pFlObject, grid):
    """fl_set_xyplot_ygrid(pFlObject, grid)
    
    Sets up the grid level for y-axis of a xyplot object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        grid : int
            level of grid to be set. Values (from xfdata.py) FL_GRID_NONE,
            FL_GRID_MAJOR, FL_GRID_MINOR

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_ygrid = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_ygrid",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_xyplot_ygrid(FL_OBJECT * ob, int ygrid)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checkfatal_allowed_value_in_list(grid, xfdata.XYPLOTGRID_list)
    igrid = library.convert_to_int(grid)
    library.keep_elem_refs(pFlObject, grid, igrid)
    _fl_set_xyplot_ygrid(pFlObject, igrid)


def fl_set_xyplot_grid_linestyle(pFlObject, linestyle):
    """fl_set_xyplot_grid_linestyle(pFlObject, linestyle)
    
    Changes the linestyle used for drawing  the grid line of xyplot. By
    default it uses a dotted line

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        linestyle : int
            style of the line to draw. Values (from xfdata module.py)
            FL_SOLID, FL_USERDASH, FL_USERDOUBLEDASH, FL_DOT, FL_DOTDASH,
            FL_DASH, FL_LONGDASH

    Returns
    -------
        oldlinestyle = int
            old grid linestyle

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_grid_linestyle = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_grid_linestyle",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_xyplot_grid_linestyle(FL_OBJECT * ob, int style)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checkfatal_allowed_value_in_list(linestyle, xfdata.LINESTYLE_list)
    ilinestyle = library.convert_to_int(linestyle)
    library.keep_elem_refs(pFlObject, linestyle, ilinestyle)
    retval = _fl_set_xyplot_grid_linestyle(pFlObject, ilinestyle)
    return retval


def fl_set_xyplot_alphaxtics(pFlObject, major, minor):
    """fl_set_xyplot_alphaxtics(pFlObject, major, minor)
    
    Labels the major tic marks on x-axis with alphanumerical characters
    (instead of numerical values). fl_set_xyplot_xtics cannot be active at the
    same time and the one that gets used is the one that was set last. It can
    be used to specify non-uniform and arbitrary major divisions; to achieve
    this, you should embed the major tic location information in the
    alphanumerical text; the location information is introduced by the symbol
    and followed by a float number specifying the coordinates in world
    coordinates; the entire location info should follow the label. E.g.
    "Begin@1.0|3/4@0.75|1.9@1.9" will produce three major tic marks at 0.75,
    1.0, and 1.9 and labeled "3/4", "begin", and "1.9".

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        major : str
            text specifying the labels with the embedded character | that
            describes major divisions. E.g. to label a plot with Monday,
            Tuesday etc, major should be given as Monday|Tuesday|...
        minor : str
            currently unused. It is set to 1, i.e, no divisions between major
            tic marks.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_alphaxtics = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_alphaxtics",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING, xfdata.STRING],
        """void fl_set_xyplot_alphaxtics(FL_OBJECT * ob, const char * m,
            const char * s)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    smajor = library.convert_to_string(major)
    sminor = library.convert_to_string(minor)
    library.keep_elem_refs(pFlObject, major, minor, smajor, sminor)
    _fl_set_xyplot_alphaxtics(pFlObject, smajor, sminor)


def fl_set_xyplot_alphaytics(pFlObject, major, minor):
    """fl_set_xyplot_alphaytics(pFlObject, major, minor)
    
    Labels the major tic marks on y-axis with alphanumerical characters
    (instead of numerical values). fl_set_xyplot_ytics cannot be active at the
    same time and the one that gets used is the one that was set last. It can
    be used to specify non-uniform and arbitary major divisions; to achieve
    this, you should embed the major tic location information in the
    alphanumerical text; the location information is introduced by the symbol
    and followed by a float number specifying the coordinates in world
    coordinates; the entire location info should follow the label. E.g.
    "Begin@1.0|3/4@0.75|1.9@1.9" will produce three major tic marks at 0.75,
    1.0, and 1.9 and labeled "3/4", "begin", and "1.9".

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        major : str
            text specifying the labels with the embedded character | that
            describes major divisions. E.g. to label a plot with Monday,
            Tuesday etc, major should be given as Monday|Tuesday|...
        minor : str
            currently unused. It is set to 1, i.e, no divisions between major
            tic marks.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_alphaytics = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_alphaytics",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING, xfdata.STRING],
        """void fl_set_xyplot_alphaytics(FL_OBJECT * ob, const char * m,
            const char * s)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    smajor = library.convert_to_string(major)
    sminor = library.convert_to_string(minor)
    library.keep_elem_refs(pFlObject, major, minor, smajor, sminor)
    _fl_set_xyplot_alphaytics(pFlObject, smajor, sminor)


def fl_set_xyplot_fixed_xaxis(pFlObject, leftmrg, rightmrg):
    """fl_set_xyplot_fixed_xaxis(pFlObject, leftmrg, rightmrg)
    
    Controls the plotting area for x-axis of xyplot object. By default,
    the plotting area is automatically adjusted for tic labels and titles so
    that a maximum plotting area results, but this can be undesirable in
    certain situations. The pixel amounts are computed using the current
    label font and size.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        leftmrg : str
            left margin to be set. If it is 'None' restore automatic margin
            computation
        rightmrg : str
            right margin to be set. If it is 'None', restores automatic margin
            computation.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_fixed_xaxis = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_fixed_xaxis",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING, xfdata.STRING],
        """void fl_set_xyplot_fixed_xaxis(FL_OBJECT * ob, const char * lm,
            const char * rm)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    if not leftmrg:             # if it is None
        sleftmrg = cty.cast(leftmrg, cty.POINTER(cty.c_void_p))
    else:                       # real string
        sleftmrg = library.convert_to_string(leftmrg)
    if not rightmrg:             # if it is None
        srightmrg = cty.cast(rightmrg, cty.POINTER(cty.c_void_p))
    else:                       # real string
        srightmrg = library.convert_to_string(rightmrg)
    library.keep_elem_refs(pFlObject, leftmrg, rightmrg, sleftmrg, srightmrg)
    _fl_set_xyplot_fixed_xaxis(pFlObject, sleftmrg, srightmrg)


def fl_set_xyplot_fixed_yaxis(pFlObject, bottommrg, topmrg):
    """fl_set_xyplot_fixed_yaxis(pFlObject, bottommrg, topmrg)
    
    Controls the plotting area for y-axis of xyplot object. By default,
    the plotting area is automatically adjusted for tic labels and titles so
    that a maximum plotting area results, but this can be undesirable in
    certain situations. The pixel amounts are computed using the current
    label font and size. Even for y-axis margins the length of the string,
    not the height, is used as the margin, thus to leave space for one line
    of text, a single character (say m) or two narrow characters (say ii)
    should be used.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        bottommrg : str
            bottom margin to be set. If it is 'None' restore automatic margin
            computation
        topmrg : str
            top margin to be set. If it is 'None', restores automatic margin
            computation.

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_fixed_yaxis = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_fixed_yaxis",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING, xfdata.STRING],
        """void fl_set_xyplot_fixed_yaxis(FL_OBJECT * ob, const char * bm,
            const char * tm)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    if not bottommrg:             # if it is None
        sbottommrg = cty.cast(bottommrg, cty.POINTER(cty.c_void_p))
    else:                       # real string
        sbottommrg = library.convert_to_string(bottommrg)
    if not topmrg:             # if it is None
        stopmrg = cty.cast(topmrg, cty.POINTER(cty.c_void_p))
    else:                       # real string
        stopmrg = library.convert_to_string(topmrg)
    library.keep_elem_refs(pFlObject, bottommrg, topmrg, sbottommrg, stopmrg)
    _fl_set_xyplot_fixed_yaxis(pFlObject, sbottommrg, stopmrg)


# TODO: verify if it is of any use in python.
def fl_interpolate(wx, wy, numin, grid, degree):
    """fl_interpolate(wx, wy, numin, grid, degree)
    
    Manages polynomial interpolation function and obtains the number of
    points in interpolated function ((wx[numin - 1] - wx[0]) / grid + 1.01)
    and the interpolate values.

    Parameters
    ----------
        wx : float
            horizontal value in world coordinates
        wy : float
            vertical value in world coordinates
        numin : int
            number of points to interpolate
        grid : float
            the working grid onto which the data are to be interpolated.
        degree : int
            the order of the polynomial to use. If it is 0 or 1, restores the
            default linear interpolation.

    Returns
    -------
        npoints : int
            number of points in the interpolated function or -1 (on failure)
        outx : float
            interpolated value for x-axis
        outy : float
            interpolated value for y-axis

    Examples
    --------
        >>> *todo*

    API_diversion
    -------------
        API changed from XForms, upstream was
        fl_interpolate(inx, iny, num_in, outx, outy, grid, ndeg)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_interpolate = library.cfuncproto(
        library.load_so_libforms(), "fl_interpolate",
        cty.c_int, [cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_int, cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_double, cty.c_int],
        """int fl_interpolate(const float * wx, const float * wy, int nin,
            float * x, float * y, double grid, int ndeg)""")
    library.check_if_initialized()
    inumin = library.convert_to_int(numin)
    outx, poutx = library.make_float_and_pointer()
    outy, pouty = library.make_float_and_pointer()
    fgrid = library.convert_to_double(grid)
    idegree = library.convert_to_int(degree)
    library.keep_elem_refs(wx, wy, numin, outx, poutx, outy, pouty, grid,
            degree, inumin, fgrid, idegree)
    retval = _fl_interpolate(wx, wy, inumin, poutx, pouty, fgrid, idegree)
    return retval, outx.value, outy.value


def fl_spline_interpolate(wx, wy, numin, grid):
    """fl_spline_interpolate(wx, wy, numin, grid)
    
    Manages spline interpolation function. Spline interpolation is a form
    of interpolation where the interpolant is a special type of piecewise
    polynomial called a spline. Obtain number of points in interpolate
    function and the interpolate values.

    Parameters
    ----------
        wx : float
            horizontal value in world coordinates
        wy : float
            vertical value in world coordinates
        numin : int
            number of points to interpolate
        grid : float
            the working grid onto which the data are to be interpolated.

    Returns
    -------
        npoints : int
            number of points in the interpolated function or -1 (on failure)
        outx : float
            interpolated value for x-axis
        outy : float
            interpolated value for y-axis

    Examples
    --------
        >>> *todo*

    API_diversion
    -------------
        API changed from XForms, upstream was
        fl_spline_interpolate(inx, iny, num_in, outx, outy, grid)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_spline_interpolate = library.cfuncproto(
        library.load_so_libforms(), "fl_spline_interpolate",
        cty.c_int, [cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_int, cty.POINTER(cty.c_float), cty.POINTER(cty.c_float),
        cty.c_double],
        """int fl_spline_interpolate(const float * wx, const float * wy,
            int nin, float * x, float * y, double grid)""")
    library.check_if_initialized()
    inumin = library.convert_to_int(numin)
    outx, poutx = library.make_float_and_pointer()
    outy, pouty = library.make_float_and_pointer()
    fgrid = library.convert_to_double(grid)
    library.keep_elem_refs(wx, wy, numin, outx, poutx, outy, pouty, grid,
                        inumin, fgrid)
    retval = _fl_spline_interpolate(wx, wy, inumin, poutx, pouty, fgrid)
    return retval, outx.value, outy.value


def fl_set_xyplot_symbol(pFlObject, ovlid, py_XyPlotSymbol):
    """fl_set_xyplot_symbol(pFlObject, ovlid, py_XyPlotSymbol)
    
    Sets a python function to change a symbol, to be invoked for
    xfdata.FL_POINTS_XYPLOT and xfdata.FL_LINEPOINTS_XYPLOT's xyplot types
    (main plot or overlay). If the type of xyplot corresponding to ovlid is
    not one of them, the function will not be called.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        ovlid : int
            overlay id (0 means the main plot, and you can use -1 to indicate
            all)
        py_XyPlotSymbol : python function, no return
            It will be called to draw the symbols on the data point.
            Name referring to function(pFlObject, int ovlid, pPoint, int
            npoints, int w, int h). The parameters passed to this function
            are the object pointer, the overlay id, the center of the symbol
            (p.x, p.y), the number of data points and the preferred symbol
            size (w, h).

    Returns
    -------
        XyPlotSymbol : xfdata.FL_XYPLOT_SYMBOL
            old xyplotsymbol function

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    #FL_XYPLOT_SYMBOL = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_OBJECT),
    #    cty.c_int, cty.POINTER(xfdata.FL_POINT), cty.c_int, cty.c_int,
    #    cty.c_int)
    _fl_set_xyplot_symbol = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_symbol",
        xfdata.FL_XYPLOT_SYMBOL, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        xfdata.FL_XYPLOT_SYMBOL],
        """FL_XYPLOT_SYMBOL fl_set_xyplot_symbol(FL_OBJECT * ob, int id,
           FL_XYPLOT_SYMBOL symbol)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iovlid = library.convert_to_int(ovlid)
    library.verify_function_type(py_XyPlotSymbol)
    c_XyPlotSymbol = xfdata.FL_XYPLOT_SYMBOL(py_XyPlotSymbol)
    library.keep_cfunc_refs(c_XyPlotSymbol, py_XyPlotSymbol)
    library.keep_elem_refs(pFlObject, ovlid, iovlid)
    retval = _fl_set_xyplot_symbol(pFlObject, iovlid, c_XyPlotSymbol)
    return retval


def fl_set_xyplot_mark_active(pFlObject, yesno):
    """fl_set_xyplot_mark_active(pFlObject, yesno)
    
    Draws the squares that mark an active plot or not.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            xyplot object
        yesno : int
            flag to enable/disable drawing. Values 0 (disabled) or 1 (enabled)

    Returns
    -------
        oldsetting : int
            old setting

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_set_xyplot_mark_active = library.cfuncproto(
        library.load_so_libforms(), "fl_set_xyplot_mark_active",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_xyplot_mark_active(FL_OBJECT * ob, int y)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iyesno = library.convert_to_int(yesno)
    library.keep_elem_refs(pFlObject, yesno, iyesno)
    retval = _fl_set_xyplot_mark_active(pFlObject, iyesno)
    return retval

