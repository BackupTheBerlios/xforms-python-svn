#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage popups.
"""

#    Copyright (C) 2009, 2010, 2011  Luca Lazzaroni "LukenShiro"
#    e-mail: <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared flobject libraries #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import flxbasic
from xformslib import xfdata


####################
# forms.h (popupfn.h)
####################

def fl_popup_add(win, title):
    """fl_popup_add(win, title) -> ptr_flpopup

    Defines a new popup. There is no built-in limit to the number of popups
    that can be created.

    Parameters
    ----------
        win : long_pos
            window of a parent flobject; use flxbasic.FL_ObjWin() to find out
            about it. You can also use either xfdata.fl_root or None for the
            root window.
        title : str
            text of title that gets shown at the top of the popup in a frame.
            If not wanted, pass an empty string. It may contain embedded
            newline characters, this allows to create titles that span more
            than one line.

    Returns
    -------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            new popup, or None (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_popup_add = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_add",
        cty.POINTER(xfdata.FL_POPUP), [xfdata.Window, xfdata.STRING],
        """FL_POPUP * fl_popup_add(Window p1, const char * p2)""")
    library.check_if_flinitialized()
    if not win:         # if it is None
        win = flxbasic.fl_root
    ul_win = library.convert_to_Window(win)
    s_title = library.convert_to_stringc(title)     # empty string handled
    library.keep_elem_refs(win, title, ul_win, s_title)
    retval = _fl_popup_add(ul_win, s_title)
    return retval


def fl_popup_add_entries(ptr_flpopup, entryitemstxt, x=None, u=None, \
        f=None, E=None, L=None, m=None, Rr=None, s=None):
    """fl_popup_add_entries(ptr_flpopup, entryitemstxt, x=None, u=None, \
    f=None, E=None, L=None, m=None, Rr=None, s=None)
    -> ptr_flpopupentry

    Adds one entry to a popup (it can be used several times). If additional
    separated arguments are required by in-text special sequences, user must
    respect the same sequences' order.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        entryitemstxt : str
            text of the entry to be added and in-text special sequences with
            or without not separated additional arguments (if required). Text
            may contain "|" for more than one entry and newline character
            which allows to create entries that span more than a single line.
            Special sequences who are allowed are %x, %u, %f, %E, %L, %m or
            %T or %t, %R or %r or %l, %d, %h, %S, %s, %%. Special sequences of
            same type cannot be repeated in xforms-python.
        x : long
            numeric data to be passed to callbacks for entry (separated
            additional argument corresponding to %x in-text special sequence)
        u : pointer to any type
            user data to be passed to callbacks for entry; invoked callback
            has to take care of type check and re-cast ptr_void to chosen type
            using appropriate xfstruct.fls_convert_ptrvoid_to_* function (separated
            additional argument corresponding to %u in-text special sequence)
        f : python callback function, returned value
            name referring to function(ptr_flpopupreturn) -> int
            function to be invoked on set (separated additional argument
            corresponding to %f in-text special sequence)
        E : python callback function, returned unused value
            name referring to function(ptr_flpopupreturn) -> int
            function to be invoked on enter (separated additional argument
            corresponding to %E in-text special sequence)
        L : python callback function, returned unused value
            name referring to function(ptr_flpopupreturn) -> int
            function to be invoked on leave (separated additional argument
            corresponding to %L in-text special sequence)
        m : pointer to xfdata.FL_POPUP
            popup class to be used as sub-popup (separated additional argument
            corresponding to %m in-text special sequence)
        Rr : int
            group number of a radio entry type (separated additional argument
            corresponding to %R or %r in-text special sequence)
        s : str
            shortcut text for the entry (separated additional argument
            corresponding to %s in-text special sequence)

    Returns
    -------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry, or None (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK
        See: Special sequences in entry text documentation in xfdata.py.

    """
    # managing additional separate parameters
    l_x = ptr_u = cfn_f = cfn_E = cfn_L = i_Rr = s_s = None
    cparam_argstypelist = []
    specseqargslist = []
    if x:       # long x additional arg
        l_x = library.convert_to_longc(x)
        cparam_argstypelist.append(cty.c_long)
        specseqargslist.append(l_x)
    if u:       # pointer to void u additional arg
        print "u", u
        ptr_u = library.convert_userdata_to_ptrvoid(u)
        print "ptr_u", ptr_u
        cparam_argstypelist.append(cty.c_void_p)
        specseqargslist.append(ptr_u)
    if f:       # xfdata.FL_POPUP_CB f additional arg
        library.verify_function_type(f)
        cfn_f = xfdata.FL_POPUP_CB(f)
        cparam_argstypelist.append(xfdata.FL_POPUP_CB)
        specseqargslist.append(cfn_f)
    if E:       # xfdata.FL_POPUP_CB E additional arg
        library.verify_function_type(E)
        cfn_E = xfdata.FL_POPUP_CB(E)
        cparam_argstypelist.append(xfdata.FL_POPUP_CB)
        specseqargslist.append(cfn_E)
    if L:       # xfdata.FL_POPUP_CB L additional arg
        library.verify_function_type(L)
        cfn_L = xfdata.FL_POPUP_CB(L)
        cparam_argstypelist.append(xfdata.FL_POPUP_CB)
        specseqargslist.append(cfn_L)
    if m:       # pointer to xfdata.FL_POPUP m additional arg
        library.verify_flpopupptr_type(m)
        # passed as is
        cparam_argstypelist.append(cty.POINTER(xfdata.FL_POPUP))
        specseqargslist.append(m)
    if Rr:      # int R or r additional arg
        i_Rr = library.convert_to_intc(Rr)
        cparam_argstypelist.append(cty.c_int)
        specseqargslist.append(i_Rr)
    if s:      # str s additional arg
        s_s = library.convert_to_stringc(s)
        cparam_argstypelist.append(cty.c_char_p)
        specseqargslist.append(s_s)

    if not cparam_argstypelist:     # no additional separate params
        cparam_argstypelist = [cty.c_char_p, cty.c_char_p]
        specseqargslist = ["", ""]
    elif len(cparam_argstypelist) < 2:  # just 1 param, add another
        cparam_argstypelist.append(cty.c_char_p)
        specseqargslist.append("")

    _fl_popup_add_entries = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_add_entries",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_POPUP),
        xfdata.STRING, cparam_argstypelist],
        """FL_POPUP_ENTRY * fl_popup_add_entries(FL_POPUP * p1,
           const char * p2, ...)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    s_entryitemstxt = library.convert_to_stringc(entryitemstxt)
    library.keep_cfunc_refs(f, E, L, cfn_f, cfn_E, cfn_L)
    library.keep_elem_refs(ptr_flpopup, entryitemstxt, s_entryitemstxt, \
            specseqargslist, cparam_argstypelist, x, u, Rr, m, s, l_x, \
            ptr_u, i_Rr, s_s)
    retval = _fl_popup_add_entries(ptr_flpopup, s_entryitemstxt, \
            *specseqargslist)
    return retval


def fl_popup_insert_entries(ptr_flpopup, ptr_flpopupentry, entryitemstxt, \
                            x=None, u=None, f=None, E=None, L=None, m=None, \
                            Rr=None, s=None):
    """fl_popup_insert_entries(ptr_flpopup, ptr_flpopupentry, entryitemstxt,
    x=None, u=None, f=None, E=None, L=None, m=None, Rr=None, s=None)
    -> ptr_flpopupentry

    Inserts one entry into a popup (it can be used several times). If
    additional separated arguments are required by in-text special sequences,
    user must respect the same sequences' order.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry after which entry is inserted. If it is None, it
            inserts items at the very start.
        entryitemstxt : str
            text of the entry to be added and in-text special sequences with
            or without not separated additional arguments (if required). Text
            may contain "|" for more than one entry and newline character
            which allows to create entries that span more than a single line.
            Special sequences who are allowed are: %x, %u, %f, %E, %L, %m or
            %T or %t, %R or %r or %l, %d, %h, %S, %s, %%. Special sequences of
            same type cannot be repeated in xforms-python.
        x : long
            numeric data to be passed to callbacks for entry (separated
            additional argument corresponding to %x in-text special sequence)
        u : pointer to any type
            user data to be passed to callbacks for entry; invoked callback
            has to take care of type check and re-cast ptr_void to chosen type
            using appropriate xfstruct.fls_convert_ptrvoid_to_* function (separated
            additional argument corresponding to %u in-text special sequence)
        f : python callback function, returned value
            name referring to function(ptr_flpopupreturn) -> int
            function to be invoked on set
            (separated additional argument corresponding to %f in-text
            special sequence)
        E : python callback function, returned unused value
            name referring to function(ptr_flpopupreturn) -> int
            function to be invoked on enter
            (separated additional argument corresponding to %E in-text
            special sequence)
        L : python callback function, returned unused value
            name referring to function(ptr_flpopupreturn) -> int
            function to be invoked on leave
            (separated additional argument corresponding to %L in-text
            special sequence)
        m : pointer to xfdata.FL_POPUP
            popup class to be used as sub-popup
            (separated additional argument corresponding to %m in-text
            special sequence)
        Rr : int
            group number of a radio entry type
            (separated additional argument corresponding to %R or %r
            in-text special sequence)
        s : str
            shortcut text for the entry
            (separated additional argument corresponding to %s in-text
            special sequence)

    Returns
    -------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry inserted, or None (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe
        See: Special sequences in entry text documentation in xfdata.py.

    """
    # managing additional separate parameters
    l_x = ptr_u = cfn_f = cfn_E = cfn_L = i_Rr = s_s = None
    cparam_argstypelist = []
    specseqargslist = []
    if x:       # long x additional arg
        l_x = library.convert_to_longc(x)
        cparam_argstypelist.append(cty.c_long)
        specseqargslist.append(l_x)
    if u:       # pointer to void u additional arg
        ptr_u = library.convert_userdata_to_ptrvoid(u)
        cparam_argstypelist.append(cty.c_void_p)
        specseqargslist.append(ptr_u)
    if f:       # xfdata.FL_POPUP_CB f additional arg
        library.verify_function_type(f)
        cfn_f = xfdata.FL_POPUP_CB(f)
        cparam_argstypelist.append(xfdata.FL_POPUP_CB)
        specseqargslist.append(cfn_f)
    if E:       # xfdata.FL_POPUP_CB E additional arg
        library.verify_function_type(E)
        cfn_E = xfdata.FL_POPUP_CB(E)
        cparam_argstypelist.append(xfdata.FL_POPUP_CB)
        specseqargslist.append(cfn_E)
    if L:       # xfdata.FL_POPUP_CB L additional arg
        library.verify_function_type(L)
        cfn_L = xfdata.FL_POPUP_CB(L)
        cparam_argstypelist.append(xfdata.FL_POPUP_CB)
        specseqargslist.append(cfn_L)
    if m:       # pointer to xfdata.FL_POPUP m additional arg
        library.verify_flpopupptr_type(m)
        # passed as is
        cparam_argstypelist.append(cty.POINTER(xfdata.FL_POPUP))
        specseqargslist.append(m)
    if Rr:      # int R or r additional arg
        i_Rr = library.convert_to_intc(Rr)
        cparam_argstypelist.append(cty.c_int)
        specseqargslist.append(i_Rr)
    if s:      # str s additional arg
        s_s = library.convert_to_stringc(s)
        cparam_argstypelist.append(cty.c_char_p)
        specseqargslist.append(s_s)

    if not cparam_argstypelist:     # no additional separate params
        cparam_argstypelist = [cty.c_char_p, cty.c_char_p]
        specseqargslist = ["", ""]
    elif len(cparam_argstypelist) < 2:  # just 1 param, add another
        cparam_argstypelist.append(cty.c_char_p)
        specseqargslist.append("")

    _fl_popup_insert_entries = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_insert_entries",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_POPUP),
        cty.c_void_p, xfdata.STRING, cparam_argstypelist],
        """FL_POPUP_ENTRY * fl_popup_insert_entries(FL_POPUP * p1,
           FL_POPUP_ENTRY * p2, const char * p3, ...)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    if not ptr_flpopupentry:         # it is None
        ptr_flpopupentry_alt = cty.cast(ptr_flpopupentry, \
                cty.c_void_p)
    else:                       # real FL_POPUP_ENTRY pointer
        ptr_flpopupentry_alt = ptr_flpopupentry
        library.verify_flpopupentryptr_type(ptr_flpopupentry_alt)
    s_entryitemstxt = library.convert_to_stringc(entryitemstxt)
    library.keep_elem_refs(ptr_flpopup, ptr_flpopupentry, \
            ptr_flpopupentry_alt, entryitemstxt, s_entryitemstxt, \
            specseqargslist, cparam_argstypelist, x, u, f, E, L, m, Rr, s, \
            l_x, ptr_u, cfn_f, cfn_E, cfn_L, i_Rr, s_s)
    retval = _fl_popup_insert_entries(ptr_flpopup, ptr_flpopupentry_alt, \
            s_entryitemstxt, *specseqargslist)
    return retval


def fl_popup_create(win, title, ptr_flpopupitem):
    """fl_popup_create(win, title, ptr_flpopupitem) -> ptr_flpopup

    Creates a popup. It does not allow to associate values or pointers to
    user data to individual entries, set titles for sub-popups, have radio
    entries belong to different groups or set enter or leave callback
    functions.

    Parameters
    ----------
        win : long_pos
            window of a parent flobject (use flxbasic.FL_ObjWin() to find out
            about it). You can also use either flxbasic.fl_root or None for
            the root window.
        title : str
            text of title that gets shown at the top of the popup in a frame.
            If not wanted, pass an empty string. It may contain embedded
            newline characters, this allows to create titles that span more
            than one line.
        ptr_flpopupitem : pointer to xfdata.FL_POPUP_ITEM
            new popup item to be created. It can be prepared passing a dict
            (whose keys are corresponding to xfdata.FL_POPUP_ITEM's members)
            to xfstruct.fls_make_ptr_flpopupitem function.

    Returns
    -------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup created, or None (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_create = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_create",
        cty.POINTER(xfdata.FL_POPUP), [xfdata.Window, xfdata.STRING,
        cty.POINTER(xfdata.FL_POPUP_ITEM)],
        """FL_POPUP * fl_popup_create(Window p1, const char * p2,
           FL_POPUP_ITEM * p3)""")
    library.check_if_flinitialized()
    if not win:         # if it is None
        win = flxbasic.fl_root
    ul_win = library.convert_to_Window(win)
    s_title = library.convert_to_stringc(title)
    library.verify_flpopupitemptr_type(ptr_flpopupitem)
    library.keep_elem_refs(win, title, ptr_flpopupitem, ul_win, s_title)
    retval = _fl_popup_create(ul_win, s_title, ptr_flpopupitem)
    return retval


def fl_popup_add_items(ptr_flpopup, ptr_flpopupitem):
    """fl_popup_add_items(ptr_flpopup, ptr_flpopupitem) -> ptr_flpopupentry

    Adds one or more items to a popup.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        ptr_flpopupitem : pointer to xfdata.FL_POPUP_ITEM
            new popup item to be added. It can be prepared passing a dict
            (whose keys are corresponding to xfdata.FL_POPUP_ITEM's members)
            to xfstruct.fls_make_ptr_flpopupitem function.

    Returns
    -------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry, or None

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_add_items = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_add_items",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_POPUP),
        cty.POINTER(xfdata.FL_POPUP_ITEM)],
        """FL_POPUP_ENTRY * fl_popup_add_items(FL_POPUP * p1,
           FL_POPUP_ITEM * p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    library.verify_flpopupitemptr_type(ptr_flpopupitem)
    library.keep_elem_refs(ptr_flpopup, ptr_flpopupitem)
    retval = _fl_popup_add_items(ptr_flpopup, ptr_flpopupitem)
    return retval


def fl_popup_insert_items(ptr_flpopup, ptr_flpopupentry, ptr_flpopupitem):
    """fl_popup_insert_items(ptr_flpopup, ptr_flpopupentry, ptr_flpopupitem)
     -> ptr_flpopupentry

    Inserts entries into a popup.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry after which items are inserted. If it is None, items
            are inserted at the very start.
        ptr_flpopupitem : pointer to xfdata.FL_POPUP_ITEM
            new popup item to be inserted. It can be prepared passing a dict
            (whose keys are corresponding to xfdata.FL_POPUP_ITEM's members)
            to xfstruct.fls_make_ptr_flpopupitem function.

    Returns
    -------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_insert_items = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_insert_items",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_POPUP),
        cty.POINTER(xfdata.FL_POPUP_ENTRY), cty.POINTER(xfdata.FL_POPUP_ITEM)],
        """FL_POPUP_ENTRY * fl_popup_insert_items(FL_POPUP * p1,
           FL_POPUP_ENTRY * p2, FL_POPUP_ITEM * p3)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    library.verify_flpopupitemptr_type(ptr_flpopupitem)
    library.keep_elem_refs(ptr_flpopup, ptr_flpopupentry, ptr_flpopupitem)
    retval = _fl_popup_insert_items(ptr_flpopup, ptr_flpopupentry, \
            ptr_flpopupitem)
    return retval


def fl_popup_delete(ptr_flpopup):
    """fl_popup_delete(ptr_flpopup) -> result

    Deletes a popup. It is not possible to call the function while the popup
    is still visible on the screen. Calling it from any callback function is
    problematic unless you know for sure that the popup to be deleted (and
    sub-popups of it) will not be used later and thus normally should be
    avoided.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance

    Returns
    -------
        result : int
            0, or -1 (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_delete = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_delete",
        cty.c_int, [cty.POINTER(xfdata.FL_POPUP)],
        """int fl_popup_delete(FL_POPUP * p1)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    library.keep_elem_refs(ptr_flpopup)
    retval = _fl_popup_delete(ptr_flpopup)
    return retval


def fl_popup_entry_delete(ptr_flpopupentry):
    """fl_popup_entry_delete(ptr_flpopupentry) -> result

    Removes an existing popup entry.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry to be removed.

    Returns
    -------
        result : int
            0, or -1 (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_entry_delete = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_delete",
        cty.c_int, [cty.POINTER(xfdata.FL_POPUP_ENTRY)],
        """int fl_popup_entry_delete(FL_POPUP_ENTRY * p1)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    library.keep_elem_refs(ptr_flpopupentry)
    retval = _fl_popup_entry_delete(ptr_flpopupentry)
    return retval


def fl_popup_do(ptr_flpopup):
    """fl_popup_do(ptr_flpopup) -> ptr_flpopupreturn

    Shows the created popup and returns when the the user is done with the
    popup and it has been removed from the screen. Only idle callbacks and
    timers etc. are executed in the background while a popup is being shown.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance

    Returns
    -------
        ptr_flpopupreturn : pointer to xfdata.FL_POPUP_RETURN
            popup return class instance

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_popup_do = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_do",
        cty.POINTER(xfdata.FL_POPUP_RETURN), [cty.POINTER(xfdata.FL_POPUP)],
        """FL_POPUP_RETURN * fl_popup_do(FL_POPUP * p1)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    library.keep_elem_refs(ptr_flpopup)
    retval = _fl_popup_do(ptr_flpopup)
    return retval


def fl_popup_set_position(ptr_flpopup, xpos, ypos):
    """fl_popup_set_position(ptr_flpopup, xpos, ypos)

    Defines position where the popup is supposed to appear (if never called,
    the popup appears at the mouse position).

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_set_position = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_set_position",
        None, [cty.POINTER(xfdata.FL_POPUP), cty.c_int, cty.c_int],
        """void fl_popup_set_position(FL_POPUP * p1, int p2, int p3)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    i_xpos = library.convert_to_intc(xpos)
    i_ypos = library.convert_to_intc(ypos)
    library.keep_elem_refs(ptr_flpopup, xpos, ypos, i_xpos, i_ypos)
    _fl_popup_set_position(ptr_flpopup, i_xpos, i_ypos)


def fl_popup_get_policy(ptr_flpopup):
    """fl_popup_get_policy(ptr_flpopup) -> policy

    Finds out current policy setting for handling the popups, or changes the
    default setting for new popup to be created.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance. If it is None, gives the default setting for
            the popups created afterwards

    Returns
    -------
        policy : int
            policy for supplied popup, or default policy used in creating new
            popups is returned (if None is supplied), or -1 (on errors).

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_get_policy = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_get_policy",
        cty.c_int, [cty.POINTER(xfdata.FL_POPUP)],
        """int fl_popup_get_policy(FL_POPUP * p1)""")
    library.check_if_flinitialized()
    if not ptr_flpopup:         # it is None
        ptr_flpopup_alt = cty.cast(ptr_flpopup, cty.POINTER(cty.c_void_p))
    else:                  # real pointer to FL_POPUP
        ptr_flpopup_alt = ptr_flpopup
        library.verify_flpopupptr_type(ptr_flpopup_alt)
    library.keep_elem_refs(ptr_flpopup, ptr_flpopup_alt)
    retval = _fl_popup_get_policy(ptr_flpopup_alt)
    return retval


def fl_popup_set_policy(ptr_flpopup, policy):
    """fl_popup_set_policy(ptr_flpopup, policy) -> oldpol

    Defines policy for handling the popup (i.e. does it get closed when the
    user releases the mouse button outside an active entry or not?) or changes
    the default setting of the policy, used in the creation of new popups.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance. If it is None, changes the default
            setting of the policy, used in the creation of new popups.
        policy : int
            policy to be set. Values (from xfdata.py)
            - FL_POPUP_NORMAL_SELECT (default, keeps the popup opened when the
              mouse is not released on one of the selectable items),
            - FL_POPUP_DRAG_SELECT (Closes the popup immediately when the
              mouse button is released).

    Returns
    -------
        oldpol : int
            previous policy value, or -1 (on errors).

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_popup_set_policy = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_set_policy",
        cty.c_int, [cty.POINTER(xfdata.FL_POPUP), cty.c_int],
        """int fl_popup_set_policy(FL_POPUP * p1, int p2)""")
    library.check_if_flinitialized()
    if not ptr_flpopup:         # it is None
        ptr_flpopup_alt = cty.cast(ptr_flpopup, cty.POINTER(cty.c_void_p))
    else:                  # real pointer to FL_POPUP
        ptr_flpopup_alt = ptr_flpopup
        library.verify_flpopupptr_type(ptr_flpopup_alt)
    library.checkfatal_allowed_value_in_list(policy, \
            xfdata.POPUPPOLICY_list)
    i_policy = library.convert_to_intc(policy)
    library.keep_elem_refs(ptr_flpopup, ptr_flpopup_alt, policy, i_policy)
    retval = _fl_popup_set_policy(ptr_flpopup_alt, i_policy)
    return retval


def fl_popup_set_callback(ptr_flpopup, pyfn_PopupCb):
    """fl_popup_set_callback(ptr_flpopup, pyfn_PopupCb) -> Popupcb

    Associates with a popup or changes a callback function to be invoked when
    an entry (or an entry of a sub-popup) is selected.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        pyfn_PopupCb : python function callback, returned value
            callback that is called after entry selection.
            name referring to function(ptr_flpopupreturn) -> [int]num.
            parameter ptr_flpopopreturn is of type xfdata.FL_POPUP_RETURN

    Returns
    -------
        PopupCb : pointer to xfdata.FL_POPUP_CB
            old popup callback, or None (on errors or if no callback was
            defined)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    #FL_POPUP_CB = cty.CFUNCTYPE(cty.c_int, \
    #        cty.POINTER(xfdata.FL_POPUP_RETURN))
    _fl_popup_set_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_set_callback",
        xfdata.FL_POPUP_CB, [cty.POINTER(xfdata.FL_POPUP), xfdata.FL_POPUP_CB],
        """FL_POPUP_CB fl_popup_set_callback(FL_POPUP * p1, FL_POPUP_CB p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    library.verify_function_type(pyfn_PopupCb)
    cfn_PopupCb = xfdata.FL_POPUP_CB(pyfn_PopupCb)
    library.keep_cfunc_refs(cfn_PopupCb, pyfn_PopupCb)
    library.keep_elem_refs(ptr_flpopup)
    retval = _fl_popup_set_callback(ptr_flpopup, cfn_PopupCb)
    return retval


def fl_popup_get_title_font(ptr_flpopup):
    """fl_popup_get_title_font(ptr_flpopup) -> style, size

    Finds out the font style and size of the popup's title.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance

    Returns
    -------
        style : int
            font style
        size : int
            font size

    Examples
    --------
        >>> *todo*

    API_diversion
    -------------
        API changed from XForms, upstream is
        fl_popup_get_title_font(ptr_flpopup, style, size)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_get_title_font = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_get_title_font",
        None, [cty.POINTER(xfdata.FL_POPUP), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """void fl_popup_get_title_font(FL_POPUP * p1, int * p2,
           int * p3)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    i_style, ptr_style = library.make_intc_and_pointer()
    i_size, ptr_size = library.make_intc_and_pointer()
    library.keep_elem_refs(ptr_flpopup, i_style, i_size, ptr_style, ptr_size)
    _fl_popup_get_title_font(ptr_flpopup, ptr_style, ptr_size)
    return i_style.value, i_size.value


def fl_popup_set_title_font(ptr_flpopup, style, size):
    """fl_popup_set_title_font(ptr_flpopup, style, size)

    Defines the font style and size of the popup's title. This setting also
    applies to sub-popups of the popup, thus setting a title font for
    sub-popups is useless. By default, size and style are (from xfdata.py)
    FL_NORMAL_SIZE and FL_EMBOSSED_STYLE.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        style : int
            title style. Values (from xfdata.py)
            - FL_NORMAL_STYLE (Helvetica normal text),
            - FL_BOLD_STYLE (Helvetica boldface text),
            - FL_ITALIC_STYLE (Helvetica italic text),
            - FL_BOLDITALIC_STYLE (Helvetica boldface and italic text),
            - FL_FIXED_STYLE (Courier fixed width, good for tables),
            - FL_FIXEDBOLD_STYLE (Courier bold fixed text),
            - FL_FIXEDITALIC_STYLE (Courier italic fixed text),
            - FL_FIXEDBOLDITALIC_STYLE (Courier boldface and italic fixed),
            - FL_TIMES_STYLE (Times-Roman like normal font),
            - FL_TIMESBOLD_STYLE (Times-Roman like boldface text),
            - FL_TIMESITALIC_STYLE (Times-Roman like italic text),
            - FL_TIMESBOLDITALIC_STYLE (Times-Roman like boldface and italic),
            - FL_MISC_STYLE (Charter normal text),
            - FL_MISCBOLD_STYLE (Charter boldface text),
            - FL_MISCITALIC_STYLE (Charter italic text),
            - FL_SYMBOL_STYLE (Symbol text),
            - FL_SHADOW_STYLE (Text casting a shadow, modifier mask),
            - FL_ENGRAVED_STYLE (Text engraved into the form, modifier mask),
            - FL_EMBOSSED_STYLE (Text standing out, modifier mask).
            Bitwise OR with any of modifiers is allowed.
        size : int
            title size. Values (from xfdata.py)
            - FL_TINY_SIZE (8 points font),
            - FL_SMALL_SIZE or FL_DEFAULT_SIZE (10 points font, default),
            - FL_NORMAL_SIZE (12 points font),
            - FL_MEDIUM_SIZE (14 points font),
            - FL_LARGE_SIZE (18 points font),
            - FL_HUGE_SIZE (24 points font),
            - or other numeric odd or even value

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_popup_set_title_font = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_set_title_font",
        None, [cty.POINTER(xfdata.FL_POPUP), cty.c_int, cty.c_int],
        """void fl_popup_set_title_font(FL_POPUP * p1, int p2, int p3)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    i_style = library.convert_to_intc(style)
    i_size = library.convert_to_intc(size)
    library.keep_elem_refs(ptr_flpopup, style, size, i_style, i_size)
    _fl_popup_set_title_font(ptr_flpopup, i_style, i_size)


def fl_popup_entry_get_font(ptr_flpopup):
    """fl_popup_entry_get_font(ptr_flpopup) -> style, size

    Finds out the font style and size of the popup entries.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance

    Returns
    -------
        style : int
            font style
        size : int
            font size

    Examples
    --------
        >>> *todo*

    API_diversion
    -------------
        API changed from XForms, upstream is
        fl_popup_entry_get_font(ptr_flpopup, style, size)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_popup_entry_get_font = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_get_font",
        None, [cty.POINTER(xfdata.FL_POPUP), cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],
        """void fl_popup_entry_get_font(FL_POPUP * p1, int * p2, int * p3)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    i_style, ptr_style = library.make_intc_and_pointer()
    i_size, ptr_size = library.make_intc_and_pointer()
    library.keep_elem_refs(ptr_flpopup, i_style, i_size, ptr_style, ptr_size)
    _fl_popup_entry_get_font(ptr_flpopup, ptr_style, ptr_size)
    return i_style.value, i_size.value


def fl_popup_entry_set_font(ptr_flpopup, style, size):
    """fl_popup_entry_set_font(ptr_flpopup, style, size)

    Defines the font style and size of the popup entries.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        style : int
            style of popup entries. Values (from xfdata.py)
            - FL_NORMAL_STYLE (Helvetica normal text),
            - FL_BOLD_STYLE (Helvetica boldface text),
            - FL_ITALIC_STYLE (Helvetica italic text),
            - FL_BOLDITALIC_STYLE (Helvetica boldface and italic text),
            - FL_FIXED_STYLE (Courier fixed width, good for tables),
            - FL_FIXEDBOLD_STYLE (Courier bold fixed text),
            - FL_FIXEDITALIC_STYLE (Courier italic fixed text),
            - FL_FIXEDBOLDITALIC_STYLE (Courier boldface and italic fixed),
            - FL_TIMES_STYLE (Times-Roman like normal font),
            - FL_TIMESBOLD_STYLE (Times-Roman like boldface text),
            - FL_TIMESITALIC_STYLE (Times-Roman like italic text),
            - FL_TIMESBOLDITALIC_STYLE (Times-Roman like boldface and italic),
            - FL_MISC_STYLE (Charter normal text),
            - FL_MISCBOLD_STYLE (Charter boldface text),
            - FL_MISCITALIC_STYLE (Charter italic text),
            - FL_SYMBOL_STYLE (Symbol text),
            - FL_SHADOW_STYLE (Text casting a shadow, modifier mask),
            - FL_ENGRAVED_STYLE (Text engraved into the form, modifier mask),
            - FL_EMBOSSED_STYLE (Text standing out, modifier mask).
            Bitwise OR with any of modifiers is allowed.
        size : int
            size of popup entries. Values (from xfdata.py)
            - FL_TINY_SIZE (8 points font),
            - FL_SMALL_SIZE or FL_DEFAULT_SIZE (10 points font, default),
            - FL_NORMAL_SIZE (12 points font),
            - FL_MEDIUM_SIZE (14 points font),
            - FL_LARGE_SIZE (18 points font),
            - FL_HUGE_SIZE (24 points font),
            - or other numeric odd or even value

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_popup_entry_set_font = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_set_font",
        None, [cty.POINTER(xfdata.FL_POPUP), cty.c_int, cty.c_int],
        """void fl_popup_entry_set_font(FL_POPUP * p1, int p2, int p3)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    #library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    i_style = library.convert_to_intc(style)
    i_size = library.convert_to_intc(size)
    library.keep_elem_refs(ptr_flpopup, style, size, i_style, i_size)
    _fl_popup_entry_set_font(ptr_flpopup, i_style, i_size)


def fl_popup_get_bw(ptr_flpopup):
    """fl_popup_get_bw(ptr_flpopup) -> borderwidth

    Finds out the border width of a popup.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance

    Returns
    -------
        borderwidth : int
            width of border's popup

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_get_bw = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_get_bw",
        cty.c_int, [cty.POINTER(xfdata.FL_POPUP)],
        """int fl_popup_get_bw(FL_POPUP * p1)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    library.keep_elem_refs(ptr_flpopup)
    retval = _fl_popup_get_bw(ptr_flpopup)
    return retval


def fl_popup_set_bw(ptr_flpopup, borderwidth):
    """fl_popup_set_bw(ptr_flpopup, borderwidth) -> oldborderwidth

    Defines the border width of a popup.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        borderwidth : int
            border width value to be set

    Returns
    -------
        oldborderwidth : int
            previous width of border

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_popup_set_bw = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_set_bw",
        cty.c_int, [cty.POINTER(xfdata.FL_POPUP), cty.c_int],
        """int fl_popup_set_bw(FL_POPUP * p1, int p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    i_borderwidth = library.convert_to_intc(borderwidth)
    library.keep_elem_refs(ptr_flpopup, borderwidth, i_borderwidth)
    retval = _fl_popup_set_bw(ptr_flpopup, i_borderwidth)
    return retval


def fl_popup_get_color(ptr_flpopup, colrpos):
    """fl_popup_get_color(ptr_flpopup, colrpos) -> colr

    Finds out several colors used in drawing a popup.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        colrpos : int
            color type position. Values (from xfdata.py)
            - FL_POPUP_BACKGROUND_COLOR (Background color of the popup,
              default is FL_MCOL),
            - FL_POPUP_HIGHLIGHT_COLOR (Backgroud color an entry is drawn with
              when it is selectable and the mouse is on top of it, default is
              FL_BOTTOM_BCOL),
            - FL_POPUP_TITLE_COLOR (Color used for the title text of a popup,
              default is FL_BLACK),
            - FL_POPUP_TEXT_COLOR (Color normal used for entry texts, default
              is FL_BLACK),
            - FL_POPUP_HIGHLIGHT_TEXT_COLOR (Color of the entry text when it is
              selectable and the mouse is on top of it, default is FL_WHITE),
            - FL_POPUP_DISABLED_TEXT_COLOR (Color for drawing the text of
              disabled entries, default is FL_INACTIVE_COL),
            - FL_POPUP_RADIO_COLOR (Color the circle drawn for radio entries
              in 'on' state is drawn in).

    Returns
    -------
        colr : long_pos
            XForms colormap index as color

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_get_color = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_get_color",
        xfdata.FL_COLOR, [cty.POINTER(xfdata.FL_POPUP), cty.c_int],
        """FL_COLOR fl_popup_get_color(FL_POPUP * p1, int p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    library.checkfatal_allowed_value_in_list(colrpos, xfdata.POPUPCOLOR_list)
    i_colrpos = library.convert_to_intc(colrpos)
    library.keep_elem_refs(ptr_flpopup, colrpos, i_colrpos)
    retval = _fl_popup_get_color(ptr_flpopup, i_colrpos)
    return retval


def fl_popup_set_color(ptr_flpopup, colrpos, colr):
    """fl_popup_set_color(ptr_flpopup, colrpos, colr) -> oldcolr

    Defines several colors used in drawing a popup.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        colrpos : int
            color type position. Values (from xfdata.py)
            - FL_POPUP_BACKGROUND_COLOR (Background color of the popup, default
              is FL_MCOL),
            - FL_POPUP_HIGHLIGHT_COLOR (Backgroud color an entry is drawn with
              when it is selectable and the mouse is on top of it, default is
              FL_BOTTOM_BCOL),
            - FL_POPUP_TITLE_COLOR (Color used for the title text of a popup,
              default is FL_BLACK),
            - FL_POPUP_TEXT_COLOR (Color normal used for entry texts, default
              is FL_BLACK),
            - FL_POPUP_HIGHLIGHT_TEXT_COLOR (Color of the entry text when it is
              selectable and the mouse is on top of it, default is FL_WHITE),
            - FL_POPUP_DISABLED_TEXT_COLOR (Color for drawing the text of
              disabled entries, default is FL_INACTIVE_COL),
            - FL_POPUP_RADIO_COLOR (Color the circle drawn for radio entries
              in 'on' state is drawn in).
        colr : long_pos
            color value to be set

    Returns
    -------
        oldcolr : long_pos
            XForms colormap index as old color, or xfdata.FL_MAX_COLORS
            (on errors)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_set_color = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_set_color",
        xfdata.FL_COLOR, [cty.POINTER(xfdata.FL_POPUP), cty.c_int,
        xfdata.FL_COLOR],
        """FL_COLOR fl_popup_set_color(FL_POPUP * p1, int p2, FL_COLOR p3)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    library.checkfatal_allowed_value_in_list(colrpos, \
            xfdata.POPUPCOLOR_list)
    i_colrpos = library.convert_to_intc(colrpos)
    #library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    ul_colr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(ptr_flpopup, colrpos, colr, i_colrpos, ul_colr)
    retval = _fl_popup_set_color(ptr_flpopup, i_colrpos, ul_colr)
    return retval


def fl_popup_set_cursor(ptr_flpopup, cursornum):
    """fl_popup_set_cursor(ptr_flpopup, cursornum)

    Changes the cursor displayed when a popup is shown.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        cursornum : int
            id of a symbolic cursor shape

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_set_cursor = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_set_cursor",
        None, [cty.POINTER(xfdata.FL_POPUP), cty.c_int],
        """void fl_popup_set_cursor(FL_POPUP * p1, int p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    i_cursornum = library.convert_to_intc(cursornum)
    library.keep_elem_refs(ptr_flpopup, cursornum, i_cursornum)
    _fl_popup_set_cursor(ptr_flpopup, i_cursornum)


def fl_popup_get_title(ptr_flpopup):
    """fl_popup_get_title(ptr_flpopup) -> title

    Finds out the title of a popup.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance

    Returns
    -------
        title : str
            title string

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_get_title = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_get_title",
        xfdata.STRING, [cty.POINTER(xfdata.FL_POPUP)],
        """const char * fl_popup_get_title(FL_POPUP * p1)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    library.keep_elem_refs(ptr_flpopup)
    retval = _fl_popup_get_title(ptr_flpopup)
    return retval


def fl_popup_set_title(ptr_flpopup, title):
    """fl_popup_set_title(ptr_flpopup, title) -> ptr_flpopup

    Defines the title of a popup. By default, the popup of a select flobject
    does not have a title drawn on top of it.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        title : str
            title of the popup

    Returns
    -------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_popup_set_title = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_set_title",
        cty.POINTER(xfdata.FL_POPUP), [cty.POINTER(xfdata.FL_POPUP),
        xfdata.STRING],
        """FL_POPUP * fl_popup_set_title(FL_POPUP * p1, const char * p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    s_title = library.convert_to_stringc(title)
    library.keep_elem_refs(ptr_flpopup, title, s_title)
    retval = _fl_popup_set_title(ptr_flpopup, s_title)
    return retval


def fl_popup_entry_set_callback(ptr_flpopupentry, pyfn_PopupCb):
    """fl_popup_entry_set_callback(ptr_flpopupentry, pyfn_PopupCb) -> PopupCb

    Defines the callback invoked when the entry of a popup is selected.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry
        pyfn_PopupCb : python callback function, returned value
            name referring to function(ptr_flpopupreturn) -> [int]num.

    Returns
    -------
        PopupCb : pointer to xfdata.FL_POPUP_CB
            old popup callback, or None (when was not set or an error occured)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    # FL_POPUP_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_POPUP_RETURN))
    _fl_popup_entry_set_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_set_callback",
        xfdata.FL_POPUP_CB, [cty.POINTER(xfdata.FL_POPUP_ENTRY),
        xfdata.FL_POPUP_CB],
        """FL_POPUP_CB fl_popup_entry_set_callback(FL_POPUP_ENTRY * p1,
           FL_POPUP_CB p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    library.verify_function_type(pyfn_PopupCb)
    cfn_PopupCb = xfdata.FL_POPUP_CB(pyfn_PopupCb)
    library.keep_cfunc_refs(cfn_PopupCb, pyfn_PopupCb)
    library.keep_elem_refs(ptr_flpopupentry)
    retval = _fl_popup_entry_set_callback(ptr_flpopupentry, cfn_PopupCb)
    return retval


def fl_popup_entry_set_enter_callback(ptr_flpopupentry, pyfn_PopupCb):
    """fl_popup_entry_set_enter_callback(ptr_flpopupentry, pyfn_PopupCb)
    -> PopupCb

    Defines the callback invoked when the mouse enters the area of the popup
    entry.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry
        pyfn_PopupCb : python callback function, returned value
            name referring to function(ptr_flpopupreturn) -> [int]num.

    Returns
    -------
        PopupCb : pointer to xfdata.FL_POPUP_CB
            old popup callback, or None (when was not set or an error occured)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    # FL_POPUP_CB = cty.CFUNCTYPE(cty.c_int, cty.POINTER(FL_POPUP_RETURN))
    _fl_popup_entry_set_enter_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_set_enter_callback",
        xfdata.FL_POPUP_CB, [cty.POINTER(xfdata.FL_POPUP_ENTRY),
        xfdata.FL_POPUP_CB],
        """FL_POPUP_CB fl_popup_entry_set_enter_callback(
           FL_POPUP_ENTRY * p1, FL_POPUP_CB p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    library.verify_function_type(pyfn_PopupCb)
    cfn_PopupCb = xfdata.FL_POPUP_CB(pyfn_PopupCb)
    library.keep_cfunc_refs(cfn_PopupCb, pyfn_PopupCb)
    library.keep_elem_refs(ptr_flpopupentry)
    retval = _fl_popup_entry_set_enter_callback(ptr_flpopupentry, \
            cfn_PopupCb)
    return retval


def fl_popup_entry_set_leave_callback(ptr_flpopupentry, pyfn_PopupCb):
    """fl_popup_entry_set_leave_callback(ptr_flpopupentry, pyfn_PopupCb)
    -> PopupCb

    Defines the callback invoked when leaves the area of the popup entry.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry
        pyfn_PopupCb : python callback function, returned value
            name referring to function(ptr_flpopupreturn) -> [int]num.

    Returns
    -------
        PopupCb : pointer to xfdata.FL_POPUP_CB
            old popup callback, or None (when was not set or an error occured)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_entry_set_leave_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_set_leave_callback",
        xfdata.FL_POPUP_CB, [cty.POINTER(xfdata.FL_POPUP_ENTRY),
        xfdata.FL_POPUP_CB],
        """FL_POPUP_CB fl_popup_entry_set_leave_callback(
           FL_POPUP_ENTRY * p1, FL_POPUP_CB p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    library.verify_function_type(pyfn_PopupCb)
    cfn_PopupCb = xfdata.FL_POPUP_CB(pyfn_PopupCb)
    library.keep_cfunc_refs(cfn_PopupCb, pyfn_PopupCb)
    library.keep_elem_refs(ptr_flpopupentry)
    retval = _fl_popup_entry_set_leave_callback(ptr_flpopupentry, cfn_PopupCb)
    return retval


def fl_popup_entry_get_state(ptr_flpopupentry):
    """fl_popup_entry_get_state(ptr_flpopupentry) -> state

    Finds out the state of a popup entry (e.g. from xfdata.py
    FL_POPUP_DISABLED, FL_POPUP_HIDDEN and FL_POPUP_CHECKED).

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry

    Returns
    -------
        state : int_pos
            current state, or xfdata.UINT_MAX (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_entry_get_state = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_get_state",
        cty.c_uint, [cty.POINTER(xfdata.FL_POPUP_ENTRY)],
        """unsigned int fl_popup_entry_get_state(FL_POPUP_ENTRY * p1)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    library.keep_elem_refs(ptr_flpopupentry)
    retval = _fl_popup_entry_get_state(ptr_flpopupentry)
    return retval


def fl_popup_entry_set_state(ptr_flpopupentry, state):
    """fl_popup_entry_set_state(ptr_flpopupentry, state) -> oldstate

    Defines the state of a popup entry.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry
        state : int_pos
            state to be set. Values (from xfdata.py)
            - FL_POPUP_DISABLED (The popup is disabled and cannot be selected),
            - FL_POPUP_HIDDEN (The popup is hidden, i.e. does not get shown,
              and thus cannot be selected),
            - FL_POPUP_CHECKED (Only relevant for toggle or radio popups,
              marks it as in "on" state).
            FL_POPUP_NONE should not be used here.

    Returns
    -------
        oldstate : int_pos
            old state, or xfdata.UINT_MAX (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_popup_entry_set_state = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_set_state",
        cty.c_uint, [cty.POINTER(xfdata.FL_POPUP_ENTRY), cty.c_uint],
        """unsigned int fl_popup_entry_set_state(FL_POPUP_ENTRY * p1,
           unsigned int p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    library.checkfatal_allowed_value_in_list(state, xfdata.POPUPSTATE_list)
    ui_state = library.convert_to_uintc(state)
    library.keep_elem_refs(ptr_flpopupentry, state, ui_state)
    retval = _fl_popup_entry_set_state(ptr_flpopupentry, ui_state)
    return retval


def fl_popup_entry_clear_state(ptr_flpopupentry, state):
    """fl_popup_entry_clear_state(ptr_flpopupentry, state) -> oldstate

    Clears state bits of a popup entry.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry
        state : int_pos
            state to be cleared. Values (from xfdata.py)
            - FL_POPUP_DISABLED (The popup is disabled and cannot be selected),
            - FL_POPUP_HIDDEN (The popup is hidden, i.e. does not get shown,
              and thus cannot be selected),
            - FL_POPUP_CHECKED (Only relevant for toggle or radio popups,
              marks it as in "on" state).
            A bitwise OR of them is allowed.

    Returns
    -------
        oldstate : int_pos
            original value of the state, or xfdata.UINT_MAX (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_popup_entry_clear_state = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_clear_state",
        cty.c_uint, [cty.POINTER(xfdata.FL_POPUP_ENTRY), cty.c_uint],
        """unsigned int fl_popup_entry_clear_state(FL_POPUP_ENTRY * p1,
           unsigned int p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    library.checkfatal_allowed_value_in_list(state, xfdata.POPUPSTATE_list)
    ui_state = library.convert_to_uintc(state)
    library.keep_elem_refs(ptr_flpopupentry, state, ui_state)
    retval = _fl_popup_entry_clear_state(ptr_flpopupentry, ui_state)
    return retval


def fl_popup_entry_raise_state(ptr_flpopupentry, state):
    """fl_popup_entry_raise_state(ptr_flpopupentry, state) -> oldstate

    Defines the state bits of a popup entry.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry
        state : int_pos
            state to be set. Values (from xfdata.py)
            - FL_POPUP_DISABLED (The popup is disabled and cannot be selected),
            - FL_POPUP_HIDDEN (The popup is hidden, i.e. does not get shown,
              and thus cannot be selected),
            - FL_POPUP_CHECKED (Only relevant for toggle or radio popups,
              marks it as in "on" state).
            A bitwise OR of them is allowed.

    Returns
    -------
        oldstate : int_pos
             original value of the state, or xfdata.UINT_MAX (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_entry_raise_state = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_raise_state",
        cty.c_uint, [cty.POINTER(xfdata.FL_POPUP_ENTRY), cty.c_uint],
        """unsigned int fl_popup_entry_raise_state(FL_POPUP_ENTRY * p1,
           unsigned int p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    library.checkfatal_allowed_value_in_list(state, xfdata.POPUPSTATE_list)
    ui_state = library.convert_to_uintc(state)
    library.keep_elem_refs(ptr_flpopupentry, state, ui_state)
    retval = _fl_popup_entry_raise_state(ptr_flpopupentry, ui_state)
    return retval


def fl_popup_entry_toggle_state(ptr_flpopupentry, state):
    """fl_popup_entry_toggle_state(ptr_flpopupentry, state) -> oldstate

    Toggles the state bits of a popup entry.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry
        state : int_pos
            state to be toggled. Values (from xfdata.py)
            - FL_POPUP_DISABLED (The popup is disabled and cannot be selected),
            - FL_POPUP_HIDDEN (The popup is hidden, i.e. does not get shown,
              and thus cannot be selected),
            - FL_POPUP_CHECKED (Only relevant for toggle or radio popups,
              marks it as in "on" state).

    Returns
    -------
        oldstate : int_pos
            original value of the state, or xfdata.UINT_MAX (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_entry_toggle_state = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_toggle_state",
        cty.c_uint, [cty.POINTER(xfdata.FL_POPUP_ENTRY), cty.c_uint],
        """unsigned int fl_popup_entry_toggle_state(FL_POPUP_ENTRY * p1,
           unsigned int p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    library.checkfatal_allowed_value_in_list(state, xfdata.POPUPSTATE_list)
    ui_state = library.convert_to_uintc(state)
    library.keep_elem_refs(ptr_flpopupentry, state, ui_state)
    retval = _fl_popup_entry_toggle_state(ptr_flpopupentry, ui_state)
    return retval


def fl_popup_entry_set_text(ptr_flpopupentry, text):
    """fl_popup_entry_set_text(ptr_flpopupentry, text) -> oldtext

    Changes the text of a popup entry.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry
        text : str
            text for the entry. No special sequence except "%S" (at which
            place the text is split to make up the left- and right-flushed
            part of the label drawn) is recognized.

    Returns
    -------
        oldtext : int
            previous text, or xfdata.UINT_MAX (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_entry_set_text = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_set_text",
        cty.c_int, [cty.POINTER(xfdata.FL_POPUP_ENTRY), xfdata.STRING],
        """int fl_popup_entry_set_text(FL_POPUP_ENTRY * p1,
           const char * p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    s_text = library.convert_to_stringc(text)
    library.keep_elem_refs(ptr_flpopupentry, text, s_text)
    retval = _fl_popup_entry_set_text(ptr_flpopupentry, s_text)
    return retval


def fl_popup_entry_set_shortcut(ptr_flpopupentry, sctext):
    """fl_popup_entry_set_shortcut(ptr_flpopupentry, sctext)

    Changes the shortcut keys for a popup label.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry
        sctext : str
            text for the shortcut

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_popup_entry_set_shortcut = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_set_shortcut",
        None, [cty.POINTER(xfdata.FL_POPUP_ENTRY), xfdata.STRING],
        """void fl_popup_entry_set_shortcut(FL_POPUP_ENTRY * p1,
           const char * p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    s_sctext = library.convert_to_stringc(sctext)
    library.keep_elem_refs(ptr_flpopupentry, sctext, s_sctext)
    _fl_popup_entry_set_shortcut(ptr_flpopupentry, s_sctext)


def fl_popup_entry_set_value(ptr_flpopupentry, entryval):
    """fl_popup_entry_set_value(ptr_flpopupentry, entryval) -> oldentryval

    Changes the value assigned to a popup entry.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry
        entryval : long
            value to be assigned to the entry

    Returns
    -------
        oldentryval : int
            previous value, or xfdata.INT_MIN (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_popup_entry_set_value = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_set_value",
        cty.c_long, [cty.POINTER(xfdata.FL_POPUP_ENTRY), cty.c_long],
        """long int fl_popup_entry_set_value(FL_POPUP_ENTRY * p1,
           long int p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    l_entryval = library.convert_to_longc(entryval)
    library.keep_elem_refs(ptr_flpopupentry, entryval, l_entryval)
    retval = _fl_popup_entry_set_value(ptr_flpopupentry, l_entryval)
    return retval


def fl_popup_entry_set_user_data(ptr_flpopupentry, userdata):
    """fl_popup_entry_set_user_data(ptr_flpopupentry, userdata) -> olduserdata

    Modifies user data associated with a popup entry.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry
        userdata : any type (e.g. None, int, str, etc..)
            user data to be passed to function; invoked callback has to take
            care of type check and re-cast from ptr_void to chosen type using
            appropriate xfstruct.fls_convert_ptrvoid_to_*() function

    Returns
    -------
        olduserdata : pointer to void
            previous user data, or None (on failure)

    Examples
    --------
        >>> fl_popup_entry_set_user_data(ppopupentr, "One data")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_popup_entry_set_user_data = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_set_user_data",
        cty.c_void_p, [cty.POINTER(xfdata.FL_POPUP_ENTRY), cty.c_void_p],
        """void * fl_popup_entry_set_user_data(FL_POPUP_ENTRY * p1,
           void * p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    ptr_vdata = library.convert_userdata_to_ptrvoid(userdata)
    library.keep_elem_refs(ptr_flpopupentry, userdata, ptr_vdata)
    retval = _fl_popup_entry_set_user_data(ptr_flpopupentry, ptr_vdata)
    return retval


def fl_popup_entry_get_by_position(ptr_flpopup, posnum):
    """fl_popup_entry_get_by_position(ptr_flpopup, posnum) -> ptr_flpopupentry

    Finds an entry by its current position in the popup. Sub-popups are not
    taken into consideration.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        posnum : int
            position number starting with 0 (e.g. when called with 0 the first
            entry will be returned, when called with 1 you get the second
            entry etc. Entries currently being hidden are counted (but
            separator lines are not).

    Returns
    -------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_entry_get_by_position = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_get_by_position",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_POPUP),
        cty.c_int],
        """FL_POPUP_ENTRY * fl_popup_entry_get_by_position(FL_POPUP * p1,
           int p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    i_posnum = library.convert_to_intc(posnum)
    library.keep_elem_refs(ptr_flpopup, posnum, i_posnum)
    retval = _fl_popup_entry_get_by_position(ptr_flpopup, i_posnum)
    return retval


def fl_popup_entry_get_by_value(ptr_flpopup, entryval):
    """fl_popup_entry_get_by_value(ptr_flpopup, entryval) -> ptr_flpopupentry

    Finds a popup entry by its assigned value.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        entryval : long
            value assigned to the entry

    Returns
    -------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_entry_get_by_value = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_get_by_value",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_POPUP),
        cty.c_long],
        """FL_POPUP_ENTRY * fl_popup_entry_get_by_value(FL_POPUP * p1,
           long int p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    l_entryval = library.convert_to_longc(entryval)
    library.keep_elem_refs(ptr_flpopup, entryval, l_entryval)
    retval = _fl_popup_entry_get_by_value(ptr_flpopup, l_entryval)
    return retval


def fl_popup_entry_get_by_user_data(ptr_flpopup, userdata):
    """fl_popup_entry_get_by_user_data(ptr_flpopup, userdata)
    -> ptr_flpopupentry

    Finds a popup entry by its assigned user data.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        userdata : any type (e.g. None, int, str, etc..)
            user data assigned to the popup entry; callback has to take
            care of type check and re-cast from ptr_void to chosen type
            using appropriate xfstruct.fls_convert_ptrvoid_to_*() function

    Returns
    -------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_entry_get_by_user_data = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_get_by_user_data",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_POPUP),
        cty.c_void_p],
        """FL_POPUP_ENTRY * fl_popup_entry_get_by_user_data(FL_POPUP * p1,
           void * p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    ptr_vdata = library.convert_userdata_to_ptrvoid(userdata)
    library.keep_elem_refs(ptr_flpopup, userdata, ptr_vdata)
    retval = _fl_popup_entry_get_by_user_data(ptr_flpopup, ptr_vdata)
    return retval


def fl_popup_entry_get_by_text(ptr_flpopup, text):
    """fl_popup_entry_get_by_text(ptr_flpopup, text) -> ptr_flpopupentry

    Finds a popup entry that had been created with a certain text, including
    all the special sequences.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        text : str
            text of the popup entry to be found.

    Returns
    -------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry, or None (on failure, if no entry with this text was
            found or the popup does not exist)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_entry_get_by_text = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_get_by_text",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_POPUP),
        xfdata.STRING],
        """FL_POPUP_ENTRY * fl_popup_entry_get_by_text(FL_POPUP * p1,
           const char * p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    s_text = library.convert_to_stringc(text)
    library.keep_elem_refs(ptr_flpopup, text, s_text)
    retval = _fl_popup_entry_get_by_text(ptr_flpopup, s_text)
    return retval


def fl_popup_entry_get_by_label(ptr_flpopup, label):
    """fl_popup_entry_get_by_label(ptr_flpopup, label) -> ptr_flpopupentry

    Finds a popup entry by its left-flushed label parts of the entry as shown
    on the screen. Note that tab characters (backslash-t) originally embedded
    in the text used when creating the label have been replaced by single
    spaces and backspace characters (backslash-b) were removed as well as all
    special sequences).

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        label : str
            label of the popup entry.

    Returns
    -------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_entry_get_by_label = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_get_by_label",
        cty.POINTER(xfdata.FL_POPUP_ENTRY), [cty.POINTER(xfdata.FL_POPUP),
        xfdata.STRING],
        """FL_POPUP_ENTRY * fl_popup_entry_get_by_label(FL_POPUP * p1,
           const char * p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    s_label = library.convert_to_stringc(label)
    library.keep_elem_refs(ptr_flpopup, label, s_label)
    retval = _fl_popup_entry_get_by_label(ptr_flpopup, s_label)
    return retval


def fl_popup_entry_get_group(ptr_flpopupentry):
    """fl_popup_entry_get_group(ptr_flpopupentry) -> groupnum

    Finds out which group a radio popup entry belongs. It makes much sense
    when applied to radio entries.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry

    Returns
    -------
        groupnum : int
            group number (on success), or xfdata.INT_MAX (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_entry_get_group = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_get_group",
        cty.c_int, [cty.POINTER(xfdata.FL_POPUP_ENTRY)],
        """int fl_popup_entry_get_group(FL_POPUP_ENTRY * p1)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    library.keep_elem_refs(ptr_flpopupentry)
    retval = _fl_popup_entry_get_group(ptr_flpopupentry)
    return retval


def fl_popup_entry_set_group(ptr_flpopupentry, groupnum):
    """fl_popup_entry_set_group(ptr_flpopupentry, groupnum) -> oldgroupnum

    Assigns a radio entry to a different group. It makes much sense when
    applied to radio entries. If one of the entries of the new group was in
    "on" state the entries state will be reset to "off" if necessary.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry
        groupnum : int
            group number to be assigned.

    Returns
    -------
        oldgroupnum : int
            previous group number, or xfdata.INT_MAX (on failure)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_entry_set_group = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_set_group",
        cty.c_int, [cty.POINTER(xfdata.FL_POPUP_ENTRY), cty.c_int],
        """int fl_popup_entry_set_group(FL_POPUP_ENTRY * p1, int p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    i_groupnum = library.convert_to_intc(groupnum)
    library.keep_elem_refs(ptr_flpopupentry, groupnum, i_groupnum)
    retval = _fl_popup_entry_set_group(ptr_flpopupentry, i_groupnum)
    return retval


def fl_popup_entry_get_subpopup(ptr_flpopupentry):
    """fl_popup_entry_get_subpopup(ptr_flpopupentry) -> ptr_flpopup

    Finds out the sub-popup associated with a sub-popup-entry. It only makes
    sense for sub-popup entries.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry

    Returns
    -------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_entry_get_subpopup = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_get_subpopup",
        cty.POINTER(xfdata.FL_POPUP), [cty.POINTER(xfdata.FL_POPUP_ENTRY)],
        """FL_POPUP * fl_popup_entry_get_subpopup(FL_POPUP_ENTRY * p1)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    library.keep_elem_refs(ptr_flpopupentry)
    retval = _fl_popup_entry_get_subpopup(ptr_flpopupentry)
    return retval


def fl_popup_entry_set_subpopup(ptr_flpopupentry, ptr_flpopup):
    """fl_popup_entry_set_subpopup(ptr_flpopupentry, ptr_flpopup)
    -> ptr_flpopup

    Defines the sub-popup associated with a sub-popup-entry. It only makes
    sense for sub-popup entries.

    Parameters
    ----------
        ptr_flpopupentry : pointer to xfdata.FL_POPUP_ENTRY
            popup entry
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance

    Returns
    -------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_entry_set_subpopup = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_entry_set_subpopup",
        cty.POINTER(xfdata.FL_POPUP), [cty.POINTER(xfdata.FL_POPUP_ENTRY),
        cty.POINTER(xfdata.FL_POPUP)],
        """FL_POPUP * fl_popup_entry_set_subpopup(FL_POPUP_ENTRY * p1,
           FL_POPUP * p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupentryptr_type(ptr_flpopupentry)
    library.verify_flpopupptr_type(ptr_flpopup)
    library.keep_elem_refs(ptr_flpopupentry, ptr_flpopup)
    retval = _fl_popup_entry_set_subpopup(ptr_flpopupentry, ptr_flpopup)
    return retval


def fl_popup_get_size(ptr_flpopup):
    """fl_popup_get_size(ptr_flpopup) -> result, width, height

    Finds out the exact sizes of its window. The reported values are only
    valid until the popup is changed, e.g. by adding, deleting or changing
    entries or changing the appearance of the popup.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance

    Returns
    -------
        result : int
            0 or -1 on error (if the supplied popup argument is not valid)
        width : int_pos
            width of popup
        height : int_pos
            height of popup

    Examples
    --------
        >>> *todo*

    API_diversion
    -------------
        API changed from XForms, upstream is
        fl_popup_get_size(ptr_flpopup, width, height)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_get_size = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_get_size",
        cty.c_int, [cty.POINTER(xfdata.FL_POPUP), cty.POINTER(cty.c_uint),
        cty.POINTER(cty.c_uint)],
        """int fl_popup_get_size(FL_POPUP * p1, unsigned int * p2,
           unsigned int * p3)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    i_width, ptr_width = library.make_uintc_and_pointer()
    i_height, ptr_height = library.make_uintc_and_pointer()
    library.keep_elem_refs(ptr_flpopup, i_width, i_height, ptr_width, \
            ptr_height)
    retval = _fl_popup_get_size(ptr_flpopup, ptr_width, ptr_height)
    return retval, i_width.value, i_height.value


def fl_popup_get_min_width(ptr_flpopup):
    """fl_popup_get_min_width(ptr_flpopup) -> width

    Finds out the currently set minimum width of popup.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance

    Returns
    -------
        width : int
            minimum width, or -1 (on errors)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_popup_get_min_width = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_get_min_width",
        cty.c_int, [cty.POINTER(xfdata.FL_POPUP)],
        """int fl_popup_get_min_width(FL_POPUP * p1)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    library.keep_elem_refs(ptr_flpopup)
    retval = _fl_popup_get_min_width(ptr_flpopup)
    return retval


def fl_popup_set_min_width(ptr_flpopup, width):
    """fl_popup_set_min_width(ptr_flpopup, width) -> oldwidth

    Defines a new minimum width of a popup. By default the width of a popup is
    calculated using the widths of the title and the entries.

    Parameters
    ----------
        ptr_flpopup : pointer to xfdata.FL_POPUP
            popup class instance
        width : int
            minimum width to be set. If it is 0 or negative switches the use
            of the minimum width off.

    Returns
    -------
        oldwidth : int
            previous width, or -1 (on errors)

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_popup_set_min_width = library.cfuncproto(
        library.load_so_libforms(), "fl_popup_set_min_width",
        cty.c_int, [cty.POINTER(xfdata.FL_POPUP), cty.c_int],
        """int fl_popup_set_min_width(FL_POPUP * p1, int p2)""")
    library.check_if_flinitialized()
    library.verify_flpopupptr_type(ptr_flpopup)
    i_width = library.convert_to_intc(width)
    library.keep_elem_refs(ptr_flpopup, width, i_width)
    retval = _fl_popup_set_min_width(ptr_flpopup, i_width)
    return retval

