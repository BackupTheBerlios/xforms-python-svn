#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage button flobjects.
"""

#    Copyright (C) 2009, 2010, 2011  Luca Lazzaroni "LukenShiro"
#    e-mail: <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared flobject libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library
from xformslib import xfdata
from xformslib import flbasic
from xformslib import flbitmap


#############################################################
# forms.h (button.h)
# All Buttons: regular button, light button and round button
#############################################################

# Routines

# fl_create_button() function placeholder (internal)
# fl_create_roundbutton() function placeholder (internal)
# fl_create_round3dbutton() function placeholder (internal)
# fl_create_lightbutton() function placeholder (internal)
# fl_create_checkbutton() function placeholder (internal)
# fl_create_bitmapbutton() function placeholder (internal)
# fl_create_pixmapbutton() function placeholder (internal)
# fl_create_scrollbutton() function placeholder (internal)
# fl_create_labelbutton() function placeholder (internal)


def fl_add_roundbutton(buttontype, xpos, ypos, width, height, label):
    """fl_add_roundbutton(buttontype, xpos, ypos, width, height, label)
    -> ptr_flobject

    Adds a roundbutton flobject.

    Parameters
    ----------
        buttontype : int
            type of button flobject to be added. Values (from xfdata.py)
            - FL_NORMAL_BUTTON (Returns value when released),
            - FL_PUSH_BUTTON or FL_TOGGLE_BUTTON (Stays pushed until user
              pushes it again),
            - FL_RADIO_BUTTON (Push button that switches off other radio
              buttons),
            - FL_HIDDEN_BUTTON (Invisible normal button),
            - FL_TOUCH_BUTTON (Returns value as long as the user pushes it),
            - FL_INOUT_BUTTON (Returns value both when pushed and when
              released),
            - FL_RETURN_BUTTON (Like a normal button but reacts on the
              <Return> key),
            - FL_HIDDEN_RET_BUTTON (Invisible return button),
            - FL_MENU_BUTTON (Returns value when pushed, useful e.g. for
              opening a popup when pushed).
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of button

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            created button flobject

    Examples
    --------
        >>> btnobj = fl_add_roundbutton(xfdata.FL_TOGGLE_BUTTON, 145,
                199, 120, 30, "MyButton")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_roundbutton = library.cfuncproto(
        library.load_so_libforms(), "fl_add_roundbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_roundbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_flinitialized()
    library.checkfatal_allowed_value_in_list(buttontype, \
            xfdata.BUTTONTYPE_list)
    i_buttontype = library.convert_to_intc(buttontype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_stringc(label)
    library.keep_elem_refs(buttontype, xpos, ypos, width, height, label, \
            i_buttontype, i_xpos, i_ypos, i_width, i_height, s_label)
    retval = _fl_add_roundbutton(i_buttontype, i_xpos, i_ypos, i_width, \
            i_height, s_label)
    return retval


def fl_add_round3dbutton(buttontype, xpos, ypos, width, height, label):
    """fl_add_round3dbutton(buttontype, xpos, ypos, width, height, label)
    -> ptr_flobject

    Adds a 3D roundbutton flobject.

    Parameters
    ----------
        buttontype : int
            type of button flobject to be added. Values (from xfdata.py)
            - FL_NORMAL_BUTTON (Returns value when released),
            - FL_PUSH_BUTTON or FL_TOGGLE_BUTTON (Stays pushed until user
              pushes it again),
            - FL_RADIO_BUTTON (Push button that switches off other radio
              buttons),
            - FL_HIDDEN_BUTTON (Invisible normal button),
            - FL_TOUCH_BUTTON (Returns value as long as the user pushes it),
            - FL_INOUT_BUTTON (Returns value both when pushed and when
              released),
            - FL_RETURN_BUTTON (Like a normal button but reacts on the
              <Return> key),
            - FL_HIDDEN_RET_BUTTON (Invisible return button),
            - FL_MENU_BUTTON (Returns value when pushed, useful e.g. for
              opening a popup when pushed).
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of button

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            created button flobject

    Examples
    --------
        >>> btnobj = fl_add_round3dbutton(xfdata.FL_TOGGLE_BUTTON, 145,
                199, 120, 30, "MyButton")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_round3dbutton = library.cfuncproto(
        library.load_so_libforms(), "fl_add_round3dbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_round3dbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_flinitialized()
    library.checkfatal_allowed_value_in_list(buttontype, \
            xfdata.BUTTONTYPE_list)
    i_buttontype = library.convert_to_intc(buttontype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_stringc(label)
    library.keep_elem_refs(buttontype, xpos, ypos, width, height, label, \
            i_buttontype, i_xpos, i_ypos, i_width, i_height, s_label)
    retval = _fl_add_round3dbutton(i_buttontype, i_xpos, i_ypos, i_width, \
            i_height, s_label)
    return retval


def fl_add_lightbutton(buttontype, xpos, ypos, width, height, label):
    """fl_add_lightbutton(buttontype, xpos, ypos, width, height, label)
    -> ptr_flobject

    Adds a lightbutton flobject (with an on/off light switch).

    Parameters
    ----------
        buttontype : int
            type of button to be added. Values (from xfdata.py)
            - FL_NORMAL_BUTTON (Returns value when released),
            - FL_PUSH_BUTTON or FL_TOGGLE_BUTTON (Stays pushed until user
              pushes it again),
            - FL_RADIO_BUTTON (Push button that switches off other radio
              buttons),
            - FL_HIDDEN_BUTTON (Invisible normal button),
            - FL_TOUCH_BUTTON (Returns value as long as the user pushes it),
            - FL_INOUT_BUTTON (Returns value both when pushed and when
              released),
            - FL_RETURN_BUTTON (Like a normal button but reacts on the
              <Return> key),
            - FL_HIDDEN_RET_BUTTON (Invisible return button),
            - FL_MENU_BUTTON (Returns value when pushed, useful e.g. for
              opening a popup when pushed).
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of button

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            created button flobject

    Examples
    --------
        >>> btnobj = fl_add_lightbutton(xfdata.FL_TOGGLE_BUTTON, 145,
                199, 120, 30, "MyButton")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_lightbutton = library.cfuncproto(
        library.load_so_libforms(), "fl_add_lightbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_lightbutton(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_flinitialized()
    library.checkfatal_allowed_value_in_list(buttontype, \
            xfdata.BUTTONTYPE_list)
    i_buttontype = library.convert_to_intc(buttontype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_stringc(label)
    library.keep_elem_refs(buttontype, xpos, ypos, width, height, label, \
            i_buttontype, i_xpos, i_ypos, i_width, i_height, s_label)
    retval = _fl_add_lightbutton(i_buttontype, i_xpos, i_ypos, i_width, \
            i_height, s_label)
    return retval


def fl_add_checkbutton(buttontype, xpos, ypos, width, height, label):
    """fl_add_checkbutton(buttontype, xpos, ypos, width, height, label)
    -> ptr_flobject

    Adds a checkbutton flobject.

    Parameters
    ----------
        buttontype : int
            type of button flobject to be added. Values (from xfdata.py)
            - FL_NORMAL_BUTTON (Returns value when released),
            - FL_PUSH_BUTTON or FL_TOGGLE_BUTTON (Stays pushed until user
              pushes it again),
            - FL_RADIO_BUTTON (Push button that switches off other radio
              buttons),
            - FL_HIDDEN_BUTTON (Invisible normal button),
            - FL_TOUCH_BUTTON (Returns value as long as the user pushes it),
            - FL_INOUT_BUTTON (Returns value both when pushed and when
              released),
            - FL_RETURN_BUTTON (Like a normal button but reacts on the
              <Return> key),
            - FL_HIDDEN_RET_BUTTON (Invisible return button),
            - FL_MENU_BUTTON (Returns value when pushed, useful e.g. for
              opening a popup when pushed).
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of button

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            created button flobject

    Examples
    --------
        >>> btnobj = fl_add_checkbutton(xfdata.FL_TOGGLE_BUTTON, 145,
                199, 120, 30, "MyButton")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_checkbutton = library.cfuncproto(
        library.load_so_libforms(), "fl_add_checkbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_checkbutton(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_flinitialized()
    library.checkfatal_allowed_value_in_list(buttontype, \
            xfdata.BUTTONTYPE_list)
    i_buttontype = library.convert_to_intc(buttontype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_stringc(label)
    library.keep_elem_refs(buttontype, xpos, ypos, width, height, label, \
            i_buttontype, i_xpos, i_ypos, i_width, i_height, s_label)
    retval = _fl_add_checkbutton(i_buttontype, i_xpos, i_ypos, i_width, \
            i_height, s_label)
    return retval


def fl_add_button(buttontype, xpos, ypos, width, height, label):
    """fl_add_button(buttontype, xpos, ypos, width, height, label)
    -> ptr_flobject

    Adds a button flobject to the current form.

    Parameters
    ----------
        buttontype : int
            type of button to be added. Values (from xfdata.py)
            - FL_NORMAL_BUTTON (Returns value when released),
            - FL_PUSH_BUTTON or FL_TOGGLE_BUTTON (Stays pushed until user
              pushes it again),
            - FL_RADIO_BUTTON (Push button that switches off other radio
              buttons),
            - FL_HIDDEN_BUTTON (Invisible normal button),
            - FL_TOUCH_BUTTON (Returns value as long as the user pushes it),
            - FL_INOUT_BUTTON (Returns value both when pushed and when
              released),
            - FL_RETURN_BUTTON (Like a normal button but reacts on the
              <Return> key),
            - FL_HIDDEN_RET_BUTTON (Invisible return button),
            - FL_MENU_BUTTON (Returns value when pushed, useful e.g. for
              opening a popup when pushed).
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of button

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            created button flobject

    Examples
    --------
        >>> btnobj = fl_add_button(xfdata.FL_TOGGLE_BUTTON, 145,
                199, 120, 30, "MyButton")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_button = library.cfuncproto(
        library.load_so_libforms(), "fl_add_button",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_button(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_flinitialized()
    library.checkfatal_allowed_value_in_list(buttontype, \
            xfdata.BUTTONTYPE_list)
    i_buttontype = library.convert_to_intc(buttontype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_stringc(label)
    library.keep_elem_refs(buttontype, xpos, ypos, width, height, label, \
            i_buttontype, i_xpos, i_ypos, i_width, i_height, s_label)
    retval = _fl_add_button(i_buttontype, i_xpos, i_ypos, i_width, \
            i_height, s_label)
    return retval


def fl_add_bitmapbutton(buttontype, xpos, ypos, width, height, label):
    """fl_add_bitmapbutton(buttontype, xpos, ypos, width, height, label)
    -> ptr_object

    Adds a bitmapbutton flobject.

    Parameters
    ----------
        buttontype : int
            type of button to be added. Values (from xfdata.py)
            - FL_NORMAL_BUTTON (Returns value when released),
            - FL_PUSH_BUTTON or FL_TOGGLE_BUTTON (Stays pushed until user
              pushes it again),
            - FL_RADIO_BUTTON (Push button that switches off other radio
              buttons),
            - FL_HIDDEN_BUTTON (Invisible normal button),
            - FL_TOUCH_BUTTON (Returns value as long as the user pushes it),
            - FL_INOUT_BUTTON (Returns value both when pushed and when
              released),
            - FL_RETURN_BUTTON (Like a normal button but reacts on the
              <Return> key),
            - FL_HIDDEN_RET_BUTTON (Invisible return button),
            - FL_MENU_BUTTON (Returns value when pushed, useful e.g. for
              opening a popup when pushed).
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of button

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            created button flobject

    Examples
    --------
        >>> btnobj = fl_add_bitmapbutton(xfdata.FL_TOGGLE_BUTTON, 145,
                199, 120, 30, "MyButton")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_bitmapbutton = library.cfuncproto(
        library.load_so_libforms(), "fl_add_bitmapbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord, \
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_bitmapbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_flinitialized()
    library.checkfatal_allowed_value_in_list(buttontype, \
            xfdata.BUTTONTYPE_list)
    i_buttontype = library.convert_to_intc(buttontype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_stringc(label)
    library.keep_elem_refs(buttontype, xpos, ypos, width, height, label, \
            i_buttontype, i_xpos, i_ypos, i_width, i_height, s_label)
    retval = _fl_add_bitmapbutton(i_buttontype, i_xpos, i_ypos, i_width, \
            i_height, s_label)
    return retval


def fl_add_scrollbutton(buttontype, xpos, ypos, width, height, label):
    """fl_add_scrollbutton(buttontype, xpos, ypos, width, height, label)
    -> ptr_flobject

    Adds a scrollbutton flobject.

    Parameters
    ----------
        buttontype : int
            type of button to be added. Values (from xfdata.py)
            - FL_NORMAL_BUTTON (Returns value when released),
            - FL_PUSH_BUTTON or FL_TOGGLE_BUTTON (Stays pushed until user
              pushes it again),
            - FL_RADIO_BUTTON (Push button that switches off other radio
              buttons),
            - FL_HIDDEN_BUTTON (Invisible normal button),
            - FL_TOUCH_BUTTON (Returns value as long as the user pushes it),
            - FL_INOUT_BUTTON (Returns value both when pushed and when
              released),
            - FL_RETURN_BUTTON (Like a normal button but reacts on the
              <Return> key),
            - FL_HIDDEN_RET_BUTTON (Invisible return button),
            - FL_MENU_BUTTON (Returns value when pushed, useful e.g. for
              opening a popup when pushed).
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of button

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            created button flobject

    Examples
    --------
        >>> btnobj = fl_add_scrollbutton(xfdata.FL_TOGGLE_BUTTON, 145,
                199, 120, 30, "MyButton")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_scrollbutton = library.cfuncproto(
        library.load_so_libforms(), "fl_add_scrollbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord, \
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_scrollbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_flinitialized()
    library.checkfatal_allowed_value_in_list(buttontype, \
            xfdata.BUTTONTYPE_list)
    i_buttontype = library.convert_to_intc(buttontype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_stringc(label)
    library.keep_elem_refs(buttontype, xpos, ypos, width, height, label, \
            i_buttontype, i_xpos, i_ypos, i_width, i_height, s_label)
    retval = _fl_add_scrollbutton(i_buttontype, i_xpos, i_ypos, i_width, \
            i_height, s_label)
    return retval


def fl_add_labelbutton(buttontype, xpos, ypos, width, height, label):
    """fl_add_labelbutton(buttontype, xpos, ypos, width, height, label)
    -> ptr_flobject

    Adds a labelbutton flobject.

    Parameters
    ----------
        buttontype : int
            type of button to be added. Values (from xfdata.py)
            - FL_NORMAL_BUTTON (Returns value when released),
            - FL_PUSH_BUTTON or FL_TOGGLE_BUTTON (Stays pushed until user
              pushes it again),
            - FL_RADIO_BUTTON (Push button that switches off other radio
              buttons),
            - FL_HIDDEN_BUTTON (Invisible normal button),
            - FL_TOUCH_BUTTON (Returns value as long as the user pushes it),
            - FL_INOUT_BUTTON (Returns value both when pushed and when
              released),
            - FL_RETURN_BUTTON (Like a normal button but reacts on the
              <Return> key),
            - FL_HIDDEN_RET_BUTTON (Invisible return button),
            - FL_MENU_BUTTON (Returns value when pushed, useful e.g. for
              opening a popup when pushed).
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of button

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            created button flobject

    Examples
    --------
        >>> btnobj = fl_add_labelbutton(xfdata.FL_TOGGLE_BUTTON, 145,
                199, 120, 30, "MyButton")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_labelbutton = library.cfuncproto(
        library.load_so_libforms(), "fl_add_labelbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord, \
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_labelbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_flinitialized()
    library.checkfatal_allowed_value_in_list(buttontype, \
            xfdata.BUTTONTYPE_list)
    i_buttontype = library.convert_to_intc(buttontype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_stringc(label)
    library.keep_elem_refs(buttontype, xpos, ypos, width, height, label, \
            i_buttontype, i_xpos, i_ypos, i_width, i_height, s_label)
    retval = _fl_add_labelbutton(i_buttontype, i_xpos, i_ypos, i_width, \
            i_height, s_label)
    return retval


def fl_set_bitmapbutton_data(ptr_flobject, width, height, xbmdatalist):
    """fl_set_bitmapbutton_data(ptr_flobject, width, height, xbmdatalist)

    Defines the bitmap to use for a bitmap button flobject, using
    some data.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            button flobject
        width : int
            width in coord units
        height : int
            height in coord units
        xbmdatalist : list of ubytes
            bitmap data

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_bitmapbutton_data = library.cfuncproto(
        library.load_so_libforms(), "fl_set_bitmapbutton_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int,
        cty.POINTER(cty.c_ubyte)],
        """void fl_set_bitmapbutton_data(FL_OBJECT * ob, int w, int h,
           unsigned char * bits)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_width = library.convert_to_intc(width)
    i_height = library.convert_to_intc(height)
    #ptr_bits = cty.cast(bits, cty.POINTER(cty.c_ubyte))
    ptr_xbmdatalist = library.convert_to_ubytec_array(xbmdatalist)
    library.keep_elem_refs(ptr_flobject, width, height, xbmdatalist, \
            i_width, i_height, ptr_xbmdatalist)
    _fl_set_bitmapbutton_data(ptr_flobject, i_width, i_height, \
            ptr_xbmdatalist)


def fl_add_pixmapbutton(buttontype, xpos, ypos, width, height, label):
    """fl_add_pixmapbutton(buttontype, xpos, ypos, width, height, label)
    -> ptr_flobject

    Adds a pixmapbutton flobject.

    Parameters
    ----------
        buttontype : int
            type of button to be added. Values (from xfdata.py)
            - FL_NORMAL_BUTTON (Returns value when released),
            - FL_PUSH_BUTTON or FL_TOGGLE_BUTTON (Stays pushed until user
              pushes it again),
            - FL_RADIO_BUTTON (Push button that switches off other radio
              buttons),
            - FL_HIDDEN_BUTTON (Invisible normal button),
            - FL_TOUCH_BUTTON (Returns value as long as the user pushes it),
            - FL_INOUT_BUTTON (Returns value both when pushed and when
              released),
            - FL_RETURN_BUTTON (Like a normal button but reacts on the
              <Return> key),
            - FL_HIDDEN_RET_BUTTON (Invisible return button),
            - FL_MENU_BUTTON (Returns value when pushed, useful e.g. for
              opening a popup when pushed).
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of button

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            created button flobject

    Examples
    --------
        >>> btnobj = fl_add_roundbutton(xfdata.FL_TOGGLE_BUTTON, 145,
                199, 120, 30, "MyButton")

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_add_pixmapbutton = library.cfuncproto(
        library.load_so_libforms(), "fl_add_pixmapbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord, \
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_pixmapbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)""")
    library.check_if_flinitialized()
    library.checkfatal_allowed_value_in_list(buttontype, \
            xfdata.BUTTONTYPE_list)
    i_buttontype = library.convert_to_intc(buttontype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_stringc(label)
    library.keep_elem_refs(buttontype, xpos, ypos, width, height, label, \
            i_buttontype, i_xpos, i_ypos, i_width, i_height, s_label)
    retval = _fl_add_pixmapbutton(i_buttontype, i_xpos, i_ypos, i_width, \
            i_height, s_label)
    return retval


def fl_set_pixmapbutton_focus_outline(ptr_flobject, yesno):
    """fl_set_pixmapbutton_focus_outline(ptr_flobject, yesno)

    Enables or disables the focus outline of the pixmap button.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            button flobject
        yesno : int
            flag to enable (1) or disable (0) the focus outline

    Examples
    --------
        >>> fl_set_pixmapbutton_focus_outline(pmapobj, 1)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_pixmapbutton_focus_outline = library.cfuncproto(
        library.load_so_libforms(), "fl_set_pixmapbutton_focus_outline",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_pixmapbutton_focus_outline(FL_OBJECT * ob, int yes)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_yesno = library.convert_to_intc(yesno)
    library.keep_elem_refs(ptr_flobject, yesno, i_yesno)
    _fl_set_pixmapbutton_focus_outline(ptr_flobject, i_yesno)


fl_set_pixmapbutton_data = flbitmap.fl_set_pixmap_data
fl_set_pixmapbutton_show_focus = fl_set_pixmapbutton_focus_outline


def fl_set_pixmapbutton_focus_data(ptr_flobject, xpmdata):
    """fl_set_pixmapbutton_focus_data(ptr_flobject, xpmdata)

    Defines a different pixmap to show, using data, when the mouse enters
    a pixmap button flobject, instead of an outline of the button.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            button flobject
        xpmdata : str of ubytes
            pixmap data

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_pixmapbutton_focus_data = library.cfuncproto(
        library.load_so_libforms(), "fl_set_pixmapbutton_focus_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.STRING)],
        """void fl_set_pixmapbutton_focus_data(FL_OBJECT * ob,
           char * * bits)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    #ptr_bits = cty.cast(bits, cty.POINTER(xfdata.STRING))
    ptr_xpmdata = library.convert_to_ptr_ubytec(xpmdata)
    library.keep_elem_refs(ptr_flobject, xpmdata, ptr_xpmdata)
    _fl_set_pixmapbutton_focus_data(ptr_flobject, ptr_xpmdata)


def fl_set_pixmapbutton_focus_file(ptr_flobject, fname):
    """fl_set_pixmapbutton_focus_file(ptr_flobject, fname)

    Defines a different pixmap to show, using a file, when the mouse enters
    a pixmap button flobject, instead of an outline of the button.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            button flobject
        fname : str
            name of file containing pixmap resource

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_pixmapbutton_focus_file = library.cfuncproto(
        library.load_so_libforms(), "fl_set_pixmapbutton_focus_file",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_set_pixmapbutton_focus_file(FL_OBJECT * ob,
           const char * fname)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    s_fname = library.convert_to_stringc(fname)
    library.keep_elem_refs(ptr_flobject, fname, s_fname)
    _fl_set_pixmapbutton_focus_file(ptr_flobject, s_fname)


def fl_set_pixmapbutton_focus_pixmap(ptr_flobject, pixmap, mask):
    """fl_set_pixmapbutton_focus_pixmap(ptr_flobject, pixmap, mask)

    Defines a different pixmap to show, using pixmap resource id, when
    the mouse enters a pixmap button flobject, instead of an outline of
    the button.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            button flobject
        pixmap : long_pos
            pixmap resource id
        mask : long_pos
            mask for pixmap

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_set_pixmapbutton_focus_pixmap = library.cfuncproto(
        library.load_so_libforms(), "fl_set_pixmapbutton_focus_pixmap",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.Pixmap, xfdata.Pixmap],
        """void fl_set_pixmapbutton_focus_pixmap(FL_OBJECT * ob,
           Pixmap id, Pixmap mask)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    ul_pixmap = library.convert_to_Pixmap(pixmap)
    ul_mask = library.convert_to_Pixmap(mask)
    library.keep_elem_refs(ptr_flobject, pixmap, mask, ul_pixmap, ul_mask)
    _fl_set_pixmapbutton_focus_pixmap(ptr_flobject, ul_pixmap, ul_mask)


def fl_get_button(ptr_flobject):
    """fl_get_button(ptr_flobject) -> btnstate

    Finds out the push state value of a button flobject.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            button flobject

    Returns
    -------
        btnstate : int
            push state. Values 0 (not pushed) or 1 (pushed)

    Examples
    --------
        >>> btnstate = fl_get_button(btnobj)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_get_button = library.cfuncproto(
        library.load_so_libforms(), "fl_get_button",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_button(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_button(ptr_flobject)
    return retval


def fl_set_button(ptr_flobject, yesno):
    """fl_set_button(ptr_flobject, yesno)

    Defines the button state (not pushed, or pushed).

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            button flobject
        yesno : int
            state of button to be set. Values 0 (if not pushed)
            or 1 (if pushed)

    Examples
    --------
        >>> fl_set_button(btnobj, 1)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_button = library.cfuncproto(
        library.load_so_libforms(), "fl_set_button",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_button(FL_OBJECT * ob, int pushed)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    i_yesno = library.convert_to_intc(yesno)
    library.keep_elem_refs(ptr_flobject, yesno, i_yesno)
    _fl_set_button(ptr_flobject, yesno)


def fl_get_button_numb(ptr_flobject):
    """fl_get_button_numb(ptr_flobject) -> mousebtn

    Finds out the number of the last used mouse button. fl_mouse_button()
    function will also return the mouse number.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            button flobject

    Returns
    -------
        mousebtn : int
            last used mouse button. Values (from xfdata.py)
            FL_MBUTTON1 or FL_LEFT_MOUSE (Left mouse button was pressed),
            FL_MBUTTON2 or FL_MIDDLE_MOUSE (Middle mouse button was pressed),
            FL_MBUTTON3 or FL_RIGHT_MOUSE (Right mouse button was pressed),
            FL_MBUTTON4 or FL_SCROLLUP_MOUSE (Mouse scroll wheel was rotated
            in up direction), FL_MBUTTON5 or FL_SCROLLDOWN_MOUSE (Mouse scroll
            wheel was rotated in down direction.

    Examples
    --------
        >>> lastused = fl_get_button_numb(pobj)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_button_numb = library.cfuncproto(
        library.load_so_libforms(), "fl_get_button_numb",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_button_numb(FL_OBJECT * ob)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    library.keep_elem_refs(ptr_flobject)
    retval = _fl_get_button_numb(ptr_flobject)
    return retval


fl_set_button_shortcut = flbasic.fl_set_object_shortcut


def fl_create_generic_button(btnclass, buttontype, xpos, ypos, width, height,
                             label):
    """fl_create_generic_button(btnclass, buttontype, xpos, ypos, width,
    height, label) -> ptr_flobject

    Creates a generic button flobject.

    Parameters
    ----------
        btnclass : int
            value of a new button class
        buttontype : int
            type of button to be created. Values (from xfdata.py)
            - FL_NORMAL_BUTTON (Returns value when released),
            - FL_PUSH_BUTTON or FL_TOGGLE_BUTTON (Stays pushed until user
              pushes it again),
            - FL_RADIO_BUTTON (Push button that switches off other radio
              buttons),
            - FL_HIDDEN_BUTTON (Invisible normal button),
            - FL_TOUCH_BUTTON (Returns value as long as the user pushes it),
            - FL_INOUT_BUTTON (Returns value both when pushed and when
              released),
            - FL_RETURN_BUTTON (Like a normal button but reacts on the
              <Return> key),
            - FL_HIDDEN_RET_BUTTON (Invisible return button),
            - FL_MENU_BUTTON (Returns value when pushed, useful e.g. for
              opening a popup when pushed).
        xpos : int
            horizontal position (upper-left corner)
        ypos : int
            vertical position (upper-left corner)
        width : int
            width in coord units
        height : int
            height in coord units
        label : str
            text label of button

    Returns
    -------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            created button flobject

    Examples
    --------
        >>> *todo*

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_create_generic_button = library.cfuncproto(
        library.load_so_libforms(), "fl_create_generic_button",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_create_generic_button(int objclass, int type,
           FL_Coord x, FL_Coord y, FL_Coord w, FL_Coord h,
           const char * label)""")
    library.check_if_flinitialized()
    library.checkfatal_allowed_value_in_list(buttontype, \
            xfdata.BUTTONTYPE_list)
    i_btnclass = library.convert_to_intc(btnclass)
    i_buttontype = library.convert_to_intc(buttontype)
    i_xpos = library.convert_to_FL_Coord(xpos)
    i_ypos = library.convert_to_FL_Coord(ypos)
    i_width = library.convert_to_FL_Coord(width)
    i_height = library.convert_to_FL_Coord(height)
    s_label = library.convert_to_stringc(label)
    library.keep_elem_refs(btnclass, buttontype, xpos, ypos, width, height, \
            label, i_btnclass, i_buttontype, i_xpos, i_ypos, i_width, \
            i_height, s_label)
    retval = _fl_create_generic_button(i_btnclass, i_buttontype, i_xpos, \
            i_ypos, i_width, i_height, s_label)
    return retval


def fl_add_button_class(btnclass, pyfn_DrawButton, pyfn_CleanupButton):
    """fl_add_button_class(btnclass, pyfn_DrawButton, pyfn_CleanupButton)

    Associates a button class with a drawing function.

    Parameters
    ----------
        btnclass : int
            value of a new button class
        pyfn_DrawButton : python function, no return
            name referring to function(ptr_flobject)
            function to handle drawing of button
        pyfn_CleanupButton : python function, no return
            name referring to function(ptr_buttonspec)
            function to cleanup button. The param is an instance of
            xfdata.FL_BUTTON_SPEC class

    Examples
    --------
        >>> def drawbtn(pobj):
        >>> ... <something>
        >>> def cleanbtn(pbuttonspec):
        >>> ... <something>
        >>> fl_add_button_class(1001, drawbtn, cleanbtn)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    #FL_DrawButton = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_OBJECT))
    #FL_CleanupButton = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_BUTTON_SPEC))
    _fl_add_button_class = library.cfuncproto(
        library.load_so_libforms(), "fl_add_button_class",
        None, [cty.c_int, xfdata.FL_DrawButton, xfdata.FL_CleanupButton],
        """void fl_add_button_class(int bclass, FL_DrawButton drawit,
           FL_CleanupButton cleanup)""")
    library.check_if_flinitialized()
    i_btnclass = library.convert_to_intc(btnclass)
    library.verify_function_type(pyfn_DrawButton)
    cfn_DrawButton = xfdata.FL_DrawButton(pyfn_DrawButton)
    library.verify_function_type(pyfn_CleanupButton)
    cfn_CleanupButton = xfdata.FL_CleanupButton(pyfn_CleanupButton)
    library.keep_cfunc_refs(cfn_DrawButton, pyfn_DrawButton, \
            cfn_CleanupButton, pyfn_CleanupButton)
    library.keep_elem_refs(btnclass, i_btnclass)
    _fl_add_button_class(i_btnclass, cfn_DrawButton, cfn_CleanupButton)


def fl_set_button_mouse_buttons(ptr_flobject, buttons):
    """fl_set_button_mouse_buttons(ptr_flobject, buttons)

    Defines up to which mouse buttons the button flobject will react.

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            button flobject
        buttons : int_pos
            value of mouse buttons to be set. Values bitwise 'OR' of the
            numbers 1 for the left mouse button, 2 for the middle, 4 for
            the right mouse button, 8 for moving the scroll wheel up
            "button" and 16 for scrolling down "button".

    Examples
    --------
        >>> fl_set_button_mouse_buttons(pbtnobj, 8|16)

    Notes
    -----
        Status: NA-UTest + Doc + Demo = OK

    """
    _fl_set_button_mouse_buttons = library.cfuncproto(
        library.load_so_libforms(), "fl_set_button_mouse_buttons",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint],
        """void fl_set_button_mouse_buttons(FL_OBJECT * ob,
           unsigned int buttons)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    ui_buttons = library.convert_to_uintc(buttons)
    library.keep_elem_refs(ptr_flobject, buttons, ui_buttons)
    _fl_set_button_mouse_buttons(ptr_flobject, ui_buttons)


def fl_get_button_mouse_buttons(ptr_flobject):
    """fl_get_button_mouse_buttons(ptr_flobject) -> buttons

    Finds out a value indicating which mouse buttons the button flobject
    will react to (bitwise OR of the numbers 1 for the left mouse button,
    2 for the middle, 4 for the right mouse button, 8 for moving the
    scroll wheel up "button" and 16 for scrolling down "button").

    Parameters
    ----------
        ptr_flobject : pointer to xfdata.FL_OBJECT
            button flobject

    Returns
    -------
        buttons : int_pos
            buttons value

    Examples
    --------
        >>> moubtn = fl_get_button_mouse_buttons(pbtnobj)

    API_diversion
    ----------
        API changed from XForms, upstream is
        fl_get_button_mouse_buttons(ptr_flobject, buttons)

    Notes
    -----
        Status: NA-UTest + Doc + NoDemo = Maybe

    """
    _fl_get_button_mouse_buttons = library.cfuncproto(
        library.load_so_libforms(), "fl_get_button_mouse_buttons",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_uint)],
        """void fl_get_button_mouse_buttons(FL_OBJECT * ob,
           unsigned int * buttons)""")
    library.check_if_flinitialized()
    library.verify_flobjectptr_type(ptr_flobject)
    ui_buttons, ptr_buttons = library.make_uintc_and_pointer()
    library.keep_elem_refs(ptr_flobject, ui_buttons, ptr_buttons)
    _fl_get_button_mouse_buttons(ptr_flobject, ptr_buttons)
    return ui_buttons.value

