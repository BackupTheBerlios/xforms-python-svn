#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    flbutton.py - xforms-python's functions to manage button objects.

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
    e-mail: <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #


import ctypes as cty
from xformslib import library as libr
from xformslib import xfdata
from xformslib import flbasic
from xformslib import flbitmap



#############################################################
# forms.h (button.h)
# All Buttons: regular button, light button and round button
#############################################################

# Routines

# fl_create_button function placeholder (internal)
# fl_create_roundbutton function placeholder (internal)
# fl_create_round3dbutton function placeholder (internal)
# fl_create_lightbutton function placeholder (internal)
# fl_create_checkbutton function placeholder (internal)
# fl_create_bitmapbutton function placeholder (internal)
# fl_create_pixmapbutton function placeholder (internal)
# fl_create_scrollbutton function placeholder (internal)
# fl_create_labelbutton function placeholder (internal)


def fl_add_roundbutton(buttontype, x, y, w, h, label):
    """Adds a roundbutton object.

    --

    :Parameters:
      `buttontype` : int
        type of button object to be added. Values (from xfdata.py)
        FL_NORMAL_BUTTON, FL_PUSH_BUTTON, FL_RADIO_BUTTON, FL_HIDDEN_BUTTON,
        FL_TOUCH_BUTTON, FL_INOUT_BUTTON, FL_RETURN_BUTTON,
        FL_HIDDEN_RET_BUTTON, FL_MENU_BUTTON, FL_TOGGLE_BUTTON
      `x` : int
        horizontal position (upper-left corner)
      `y` : int
        vertical position (upper-left corner)
      `w` : int
        width in coord units
      `h` : int
        height in coord units
      `label` : str
        text label of button

    :return: button object created (pFlObject)
    :rtype: pointer to xfdata.FL_OBJECT

    :note: e.g. btnobj = fl_add_roundbutton(xfdata.FL_TOGGLE_BUTTON, 145,
        199, 120, 30, "MyButton")

    :status: Tested + Doc + Demo = OK

    """
    _fl_add_roundbutton = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_roundbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_roundbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)""")
    libr.check_if_initialized()
    libr.check_admitted_value_in_list(buttontype, xfdata.BUTTONTYPE_list)
    ibuttontype = libr.convert_to_int(buttontype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, \
                           iy, iw, ih, slabel)
    retval = _fl_add_roundbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_round3dbutton(buttontype, x, y, w, h, label):
    """Adds a 3D roundbutton object.

    --

    :Parameters:
      `buttontype` : int
        type of button object to be added. Values (from xfdata.py)
        FL_NORMAL_BUTTON, FL_PUSH_BUTTON, FL_RADIO_BUTTON, FL_HIDDEN_BUTTON,
        FL_TOUCH_BUTTON, FL_INOUT_BUTTON, FL_RETURN_BUTTON,
        FL_HIDDEN_RET_BUTTON, FL_MENU_BUTTON, FL_TOGGLE_BUTTON
      `x` : int
        horizontal position (upper-left corner)
      `y` : int
        vertical position (upper-left corner)
      `w` : int
        width in coord units
      `h` : int
        height in coord units
      `label` : str
        text label of button

    :return: button object created (pFlObject)
    :rtype: pointer to xfdata.FL_OBJECT

    :note: e.g. btnobj = fl_add_round3dbutton(xfdata.FL_TOGGLE_BUTTON, 145,
        199, 120, 30, "MyButton")

    :status: Tested + Doc + Demo = OK

    """
    _fl_add_round3dbutton = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_round3dbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_round3dbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)""")
    libr.check_if_initialized()
    libr.check_admitted_value_in_list(buttontype, xfdata.BUTTONTYPE_list)
    ibuttontype = libr.convert_to_int(buttontype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, \
                           iy, iw, ih, slabel)
    retval = _fl_add_round3dbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_lightbutton(buttontype, x, y, w, h, label):
    """Adds a lightbutton object (with an on/off light switch).

    --

    :Parameters:
      `buttontype` : int
        type of button to be added. Values (from xfdata.py) FL_NORMAL_BUTTON,
        FL_PUSH_BUTTON, FL_RADIO_BUTTON, FL_HIDDEN_BUTTON, FL_TOUCH_BUTTON,
        FL_INOUT_BUTTON, FL_RETURN_BUTTON, FL_HIDDEN_RET_BUTTON,
        FL_MENU_BUTTON, FL_TOGGLE_BUTTON
      `x` : int
        horizontal position (upper-left corner)
      `y` : int
        vertical position (upper-left corner)
      `w` : int
        width in coord units
      `h` : int
        height in coord units
      `label` : str
        text label of button

    :return: button object created (pFlObject)
    :rtype: pointer to xfdata.FL_OBJECT

    :note: e.g. btnobj = fl_add_lightbutton(xfdata.FL_TOGGLE_BUTTON, 145,
        199, 120, 30, "MyButton")

    :status: Tested + Doc + Demo = OK

    """
    _fl_add_lightbutton = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_lightbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_lightbutton(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    libr.check_if_initialized()
    libr.check_admitted_value_in_list(buttontype, xfdata.BUTTONTYPE_list)
    ibuttontype = libr.convert_to_int(buttontype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, \
                        iy, iw, ih, slabel)
    retval = _fl_add_lightbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_checkbutton(buttontype, x, y, w, h, label):
    """Adds a checkbutton object.

    --

    :Parameters:
      `buttontype` : int
        type of button object to be added. Values (from xfdata.py)
        FL_NORMAL_BUTTON, FL_PUSH_BUTTON, FL_RADIO_BUTTON, FL_HIDDEN_BUTTON,
        FL_TOUCH_BUTTON, FL_INOUT_BUTTON, FL_RETURN_BUTTON,
        FL_HIDDEN_RET_BUTTON, FL_MENU_BUTTON, FL_TOGGLE_BUTTON
      `x` : int
        horizontal position (upper-left corner)
      `y` : int
        vertical position (upper-left corner)
      `w` : int
        width in coord units
      `h` : int
        height in coord units
      `label` : str
        text label of button

    :return: button object created (pFlObject)
    :rtype: pointer to xfdata.FL_OBJECT

    :note: e.g. btnobj = fl_add_checkbutton(xfdata.FL_TOGGLE_BUTTON, 145,
        199, 120, 30, "MyButton")

    :status: Tested + Doc + Demo = OK

    """
    _fl_add_checkbutton = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_checkbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_checkbutton(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    libr.check_if_initialized()
    libr.check_admitted_value_in_list(buttontype, xfdata.BUTTONTYPE_list)
    ibuttontype = libr.convert_to_int(buttontype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, \
                           iy, iw, ih, slabel)
    retval = _fl_add_checkbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_button(buttontype, x, y, w, h, label):
    """Adds a button object to the current form.

    --

    :Parameters:
      `buttontype` : int
        type of button to be added. Values (from xfdata.py) FL_NORMAL_BUTTON,
        FL_PUSH_BUTTON, FL_RADIO_BUTTON, FL_HIDDEN_BUTTON, FL_TOUCH_BUTTON,
        FL_INOUT_BUTTON, FL_RETURN_BUTTON, FL_HIDDEN_RET_BUTTON,
        FL_MENU_BUTTON, FL_TOGGLE_BUTTON
      `x` : int
        horizontal position (upper-left corner)
      `y` : int
        vertical position (upper-left corner)
      `w` : int
        width in coord units
      `h` : int
        height in coord units
      `label` : str
        text label of button

    :return: button object created (pFlObject)
    :rtype: pointer to xfdata.FL_OBJECT

    :note: e.g. btnobj = fl_add_button(xfdata.FL_TOGGLE_BUTTON, 145,
        199, 120, 30, "MyButton")

    :status: Tested + Doc + Demo = OK

    """
    _fl_add_button = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_button",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_button(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label)""")
    libr.check_if_initialized()
    libr.check_admitted_value_in_list(buttontype, xfdata.BUTTONTYPE_list)
    ibuttontype = libr.convert_to_int(buttontype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, \
                           iy, iw, ih, slabel)
    retval = _fl_add_button(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_bitmapbutton(buttontype, x, y, w, h, label):
    """Adds a bitmapbutton object.

    --

    :Parameters:
      `buttontype` : int
        type of button to be added. Values (from xfdata.py) FL_NORMAL_BUTTON,
        FL_PUSH_BUTTON, FL_RADIO_BUTTON, FL_HIDDEN_BUTTON, FL_TOUCH_BUTTON,
        FL_INOUT_BUTTON, FL_RETURN_BUTTON, FL_HIDDEN_RET_BUTTON,
        FL_MENU_BUTTON, FL_TOGGLE_BUTTON
      `x` : int
        horizontal position (upper-left corner)
      `y` : int
        vertical position (upper-left corner)
      `w` : int
        width in coord units
      `h` : int
        height in coord units
      `label` : str
        text label of button

    :return: button object created (pFlObject)
    :rtype: pointer to xfdata.FL_OBJECT

    :note: e.g. btnobj = fl_add_bitmapbutton(xfdata.FL_TOGGLE_BUTTON, 145,
        199, 120, 30, "MyButton")

    :status: Tested + Doc + Demo = OK

    """
    _fl_add_bitmapbutton = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_bitmapbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord, \
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_bitmapbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)""")
    libr.check_if_initialized()
    libr.check_admitted_value_in_list(buttontype, xfdata.BUTTONTYPE_list)
    ibuttontype = libr.convert_to_int(buttontype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, \
                           iy, iw, ih, slabel)
    retval = _fl_add_bitmapbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_scrollbutton(buttontype, x, y, w, h, label):
    """Adds a scrollbutton object.

    --

    :Parameters:
      `buttontype` : int
        type of button to be added. Values (from xfdata.py) FL_NORMAL_BUTTON,
        FL_PUSH_BUTTON, FL_RADIO_BUTTON, FL_HIDDEN_BUTTON, FL_TOUCH_BUTTON,
        FL_INOUT_BUTTON, FL_RETURN_BUTTON, FL_HIDDEN_RET_BUTTON,
        FL_MENU_BUTTON, FL_TOGGLE_BUTTON
      `x` : int
        horizontal position (upper-left corner)
      `y` : int
        vertical position (upper-left corner)
      `w` : int
        width in coord units
      `h` : int
        height in coord units
      `label` : str
        text label of button

    :return: button object created (pFlObject)
    :rtype: pointer to xfdata.FL_OBJECT

    :note: e.g. btnobj = fl_add_scrollbutton(xfdata.FL_TOGGLE_BUTTON, 145,
        199, 120, 30, "MyButton")

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_add_scrollbutton = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_scrollbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord, \
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_scrollbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)""")
    libr.check_if_initialized()
    libr.check_admitted_value_in_list(buttontype, xfdata.BUTTONTYPE_list)
    ibuttontype = libr.convert_to_int(buttontype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, iy, iw,
                   ih, slabel)
    retval = _fl_add_scrollbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_add_labelbutton(buttontype, x, y, w, h, label):
    """Adds a labelbutton object.

    --

    :Parameters:
      `buttontype` : int
         type of button to be added. Values (from xfdata.py) FL_NORMAL_BUTTON,
         FL_PUSH_BUTTON, FL_RADIO_BUTTON, FL_HIDDEN_BUTTON, FL_TOUCH_BUTTON,
         FL_INOUT_BUTTON, FL_RETURN_BUTTON, FL_HIDDEN_RET_BUTTON,
         FL_MENU_BUTTON, FL_TOGGLE_BUTTON
      `x` : int
        horizontal position (upper-left corner)
      `y` : int
        vertical position (upper-left corner)
      `w` : int
        width in coord units
      `h` : int
        height in coord units
      `label` : str
        text label of button

    :return: button object created (pFlObject)
    :rtype: pointer to xfdata.FL_OBJECT

    :note: e.g. btnobj = fl_add_labelbutton(xfdata.FL_TOGGLE_BUTTON, 145,
        199, 120, 30, "MyButton")

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_add_labelbutton = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_labelbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord, \
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_labelbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)""")
    libr.check_if_initialized()
    libr.check_admitted_value_in_list(buttontype, xfdata.BUTTONTYPE_list)
    ibuttontype = libr.convert_to_int(buttontype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, \
                           iy, iw, ih, slabel)
    retval = _fl_add_labelbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_bitmapbutton_data(pFlObject, w, h, bits):
    """Sets the bitmap to use for a bitmap button, using some data.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        button object
      `w` : int
        width in coord units
      `h` : int
        height in coord units
      `bits` : str of ubytes
        bitmap data

    :note: e.g. *todo*

    :status: Untested + Doc + NoDemo = NOT OK

    """
    _fl_set_bitmapbutton_data = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_bitmapbutton_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int,
        cty.POINTER(cty.c_ubyte)],
        """void fl_set_bitmapbutton_data(FL_OBJECT * ob, int w, int h,
           unsigned char * bits)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iw = libr.convert_to_int(w)
    ih = libr.convert_to_int(h)
    pbits = cty.cast(bits, cty.POINTER(cty.c_ubyte))
    libr.keep_elem_refs(pFlObject, w, h, bits, iw, ih, pbits)
    _fl_set_bitmapbutton_data(pFlObject, iw, ih, pbits)


def fl_add_pixmapbutton(buttontype, x, y, w, h, label):
    """Adds a pixmapbutton object.

    --

    :Parameters:
      `buttontype` : int
        type of button to be added. Values (from xfdata.py) FL_NORMAL_BUTTON,
        FL_PUSH_BUTTON, FL_RADIO_BUTTON, FL_HIDDEN_BUTTON, FL_TOUCH_BUTTON,
        FL_INOUT_BUTTON, FL_RETURN_BUTTON, FL_HIDDEN_RET_BUTTON,
        FL_MENU_BUTTON, FL_TOGGLE_BUTTON
      `x` : int
        horizontal position (upper-left corner)
      `y` : int
        vertical position (upper-left corner)
      `w` : int
        width in coord units
      `h` : int
        height in coord units
      `label` : str
        text label of button

    :return: button object created (pFlObject)
    :rtype: pointer to xfdata.FL_OBJECT

    :note: e.g. btnobj = fl_add_roundbutton(xfdata.FL_TOGGLE_BUTTON, 145,
        199, 120, 30, "MyButton")

    :status: Tested + Doc + Demo = OK

    """
    _fl_add_pixmapbutton = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_pixmapbutton",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord, \
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_pixmapbutton(int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label)""")
    libr.check_if_initialized()
    libr.check_admitted_value_in_list(buttontype, xfdata.BUTTONTYPE_list)
    ibuttontype = libr.convert_to_int(buttontype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(buttontype, x, y, w, h, label, ibuttontype, ix, \
                           iy, iw, ih, slabel)
    retval = _fl_add_pixmapbutton(ibuttontype, ix, iy, iw, ih, slabel)
    return retval


def fl_set_pixmapbutton_focus_outline(pFlObject, yesno):
    """Enables or disables the focus outline of the pixmap button.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        button object
      `yesno` : int
        flag to enable (1) or disable (0) the focus outline

    :note: e.g. fl_set_pixmapbutton_focus_outline(pmapobj, 1)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_set_pixmapbutton_focus_outline = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_pixmapbutton_focus_outline",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_pixmapbutton_focus_outline(FL_OBJECT * ob, int yes)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iyesno = libr.convert_to_int(yesno)
    libr.keep_elem_refs(pFlObject, yesno, iyesno)
    _fl_set_pixmapbutton_focus_outline(pFlObject, iyesno)


fl_set_pixmapbutton_data = flbitmap.fl_set_pixmap_data
fl_set_pixmapbutton_show_focus = fl_set_pixmapbutton_focus_outline


def fl_set_pixmapbutton_focus_data(pFlObject, bits):
    """Sets a different pixmap to show, using data, when the mouse enters
    a pixmap button, instead of an outline of the button.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        button object
      `bits` : str of ubytes ?
        pixmap data

    :status: Untested + Doc + NoDemo = NOT OK

    """
    _fl_set_pixmapbutton_focus_data = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_pixmapbutton_focus_data",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.STRING)],
        """void fl_set_pixmapbutton_focus_data(FL_OBJECT * ob,
           char * * bits)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    pbits = cty.cast(bits, cty.POINTER(xfdata.STRING))
    libr.keep_elem_refs(pFlObject, bits, pbits)
    _fl_set_pixmapbutton_focus_data(pFlObject, pbits)


def fl_set_pixmapbutton_focus_file(pFlObject, fname):
    """Sets a different pixmap to show, using a file, when the mouse enters
    a pixmap button, instead of an outline of the button.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        button object
      `fname` : str
        name of file containing pixmap resource

    :status: Untested + Doc + NoDemo = NOT OK

    """
    _fl_set_pixmapbutton_focus_file = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_pixmapbutton_focus_file",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_set_pixmapbutton_focus_file(FL_OBJECT * ob,
           const char * fname)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    sfname = libr.convert_to_string(fname)
    libr.keep_elem_refs(pFlObject, fname, sfname)
    _fl_set_pixmapbutton_focus_file(pFlObject, sfname)


def fl_set_pixmapbutton_focus_pixmap(pFlObject, pix, mask):
    """Sets a different pixmap to show, using pixmap id, when the mouse
    enters a pixmap button, instead of an outline of the button.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        button object
      `pix` : long_pos
        pixmap id
      `mask` : long_pos
        pixmap id

    :note: e.g. *todo*

    :status: Untested + Doc + NoDemo = NOT OK

    """
    _fl_set_pixmapbutton_focus_pixmap = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_pixmapbutton_focus_pixmap",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.Pixmap, xfdata.Pixmap],
        """void fl_set_pixmapbutton_focus_pixmap(FL_OBJECT * ob,
           Pixmap id, Pixmap mask)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    ulpix = libr.convert_to_Pixmap(pix)
    ulmask = libr.convert_to_Pixmap(mask)
    libr.keep_elem_refs(pFlObject, pix, mask, ulpix, ulmask)
    _fl_set_pixmapbutton_focus_pixmap(pFlObject, ulpix, ulmask)


def fl_get_button(pFlObject):
    """Returns the state value of the button.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        button object

    :return: 0 (not pushed) or 1 (pushed)
    :rtype: int

    :note: e.g. btnstate = fl_get_button(btnobj)

    :status: Tested + Doc + Demo = OK

    """
    _fl_get_button = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_button",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_button(FL_OBJECT * ob)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.keep_elem_refs(pFlObject)
    retval = _fl_get_button(pFlObject)
    return retval


def fl_set_button(pFlObject, yesno):
    """Sets the button state (not pushed/pushed).

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        button object
      `yesno` : int
        state of button to be set. Values 0 (if not pushed) or 1 (if pushed)

    :note: e.g. fl_set_button(btnobj, 1)

    :status: Tested + Doc + Demo = OK

    """
    _fl_set_button = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_button",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_button(FL_OBJECT * ob, int pushed)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    iyesno = libr.convert_to_int(yesno)
    libr.keep_elem_refs(pFlObject, yesno, iyesno)
    _fl_set_button(pFlObject, yesno)


def fl_get_button_numb(pFlObject):
    """Returns the number of the last used mouse button. fl_mouse_button()
    function will also return the mouse number.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        button object

    :return: num.
    :rtype: int

    :note: e.g. lastused = fl_get_button_numb(pobj)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_get_button_numb = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_button_numb",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_button_numb(FL_OBJECT * ob)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.keep_elem_refs(pFlObject)
    retval = _fl_get_button_numb(pFlObject)
    return retval


fl_set_button_shortcut = flbasic.fl_set_object_shortcut


def fl_create_generic_button(btnclass, buttontype, x, y, w, h, label):
    """Creates a generic button object.

    --

    :Parameters:
      `btnclass` : int
        value of a new button class
      `buttontype` : int
        type of button to be created. Values (from xfdata.py) FL_NORMAL_BUTTON,
        FL_PUSH_BUTTON, FL_RADIO_BUTTON, FL_HIDDEN_BUTTON, FL_TOUCH_BUTTON,
        FL_INOUT_BUTTON, FL_RETURN_BUTTON, FL_HIDDEN_RET_BUTTON,
        FL_MENU_BUTTON, FL_TOGGLE_BUTTON
      `x` : int
        horizontal position (upper-left corner)
      `y` : int
        vertical position (upper-left corner)
      `w` : int
        width in coord units
      `h` : int
        height in coord units
      `label` : str
        text label of button

    :return: button object created (pFlObject)
    :rtype: pointer to xfdata.FL_OBJECT

    :note: e.g. newbtnobj = fl_add_roundbutton(1001, xfdata.FL_TOGGLE_BUTTON,
        145, 199, 120, 30, "MyButton")

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_create_generic_button = libr.cfuncproto(
        libr.load_so_libforms(), "fl_create_generic_button",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_create_generic_button(int objclass, int type,
           FL_Coord x, FL_Coord y, FL_Coord w, FL_Coord h,
           const char * label)""")
    libr.check_if_initialized()
    libr.check_admitted_value_in_list(buttontype, xfdata.BUTTONTYPE_list)
    ibtnclass = libr.convert_to_int(btnclass)
    ibuttontype = libr.convert_to_int(buttontype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(btnclass, buttontype, x, y, w, h, label, ibtnclass,
                   ibuttontype, ix, iy, iw, ih, slabel)
    retval = _fl_create_generic_button(ibtnclass, ibuttontype, ix, iy,
                                       iw, ih, slabel)
    return retval


def fl_add_button_class(btnclass, py_DrawButton, py_CleanupButton):
    """Associates a button class with a drawing function.

    --

    :Parameters:
      `btnclass` : int
        value of a new button class
      `py_DrawButton` : python function to draw button, no return
        name referring to function(pFlObject)
      `py_CleanupButton` : python function to cleanup button, no return
        name referring to function(pButtonSpec)

    :note: e.g. def drawbtn(pobj): > ...
    :note: e.g. def cleanbtn(buttonspec): > ...
    :note: e.g. fl_add_button_class(1001, drawbtn, cleanbtn)

    :status: Tested + Doc + NoDemo = OK

    """
    #FL_DrawButton = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_OBJECT))
    #FL_CleanupButton = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_BUTTON_SPEC))
    _fl_add_button_class = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_button_class",
        None, [cty.c_int, xfdata.FL_DrawButton, xfdata.FL_CleanupButton],
        """void fl_add_button_class(int bclass, FL_DrawButton drawit,
           FL_CleanupButton cleanup)""")
    libr.check_if_initialized()
    ibtnclass = libr.convert_to_int(btnclass)
    c_DrawButton = xfdata.FL_DrawButton(py_DrawButton)
    c_CleanupButton = xfdata.FL_CleanupButton(py_CleanupButton)
    libr.keep_cfunc_refs(c_DrawButton, py_DrawButton, c_CleanupButton,
                            py_CleanupButton)
    libr.keep_elem_refs(btnclass, ibtnclass)
    _fl_add_button_class(ibtnclass, c_DrawButton, c_CleanupButton)


def fl_set_button_mouse_buttons(pFlObject, buttons):
    """Sets up to which mouse buttons the button object will react.

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        button object
      `buttons` : int_pos
        value of mouse buttons to be set. Values bitwise OR of the numbers 1
        for the left mouse button, 2 for the middle, 4 for the right mouse
        button, 8 for moving the scroll wheel up "button" and 16 for scrolling
        down "button".

    :note: e.g. fl_set_button_mouse_buttons(pobj, 8|16)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_set_button_mouse_buttons = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_button_mouse_buttons",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint],
        """void fl_set_button_mouse_buttons(FL_OBJECT * ob,
           unsigned int buttons)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    ibuttons = libr.convert_to_int(buttons)
    libr.keep_elem_refs(pFlObject, buttons, ibuttons)
    _fl_set_button_mouse_buttons(pFlObject, ibuttons)


def fl_get_button_mouse_buttons(pFlObject):
    """Returns a value indicating which mouse buttons the button object will
    react to (bitwise OR of the numbers 1 for the left mouse button, 2 for
    the middle, 4 for the right mouse button, 8 for moving the scroll wheel
    up "button" and 16 for scrolling down "button").

    --

    :Parameters:
      `pFlObject` : pointer to xfdata.FL_OBJECT
        button object

    :return: buttons value
    :rtype: int_pos

    :note: e.g. moubtn = fl_get_button_mouse_buttons(pobj)

    :attention: API change from XForms - upstream was
        fl_get_button_mouse_buttons(pFlObject, buttons)

    :status: Tested + Doc + NoDemo = OK

    """
    _fl_get_button_mouse_buttons = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_button_mouse_buttons",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_uint)],
        """void fl_get_button_mouse_buttons(FL_OBJECT * ob,
           unsigned int * buttons)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    buttons, pbuttons = libr.make_uint_and_pointer()
    libr.keep_elem_refs(pFlObject, buttons, pbuttons)
    _fl_get_button_mouse_buttons(pFlObject, pbuttons)
    return buttons.value

