#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

""" xforms-python's functions to manage basic generic objects.
"""

#    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
#    e-mail: <lukenshiro@ngi.it>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Lesser General Public License as
#    published by the Free Software Foundation, version 2.1 of the License.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
#    GNU Lesser General Public License for more details.
#
#    You should have received a copy of the GNU LGPL along with this
#    program. If not, see <http://www.gnu.org/licenses/>.
#
#    See CREDITS file to read acknowledgements and thanks to XForms,
#    ctypes and other developers.


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #

import ctypes as cty
from xformslib import library
from xformslib import xfdata


# exported variable
FL_EVENT = (cty.POINTER(xfdata.FL_OBJECT)).in_dll(library.load_so_libforms(), \
    'FL_EVENT')


########################################
# forms.h (Basic.h)
# Basic definitions and limits.
# Window system independent prototypes
# Modify with care
########################################


def FL_IS_UPBOX(boxtype):
    if (boxtype == xfdata.FL_UP_BOX) or \
        (boxtype == xfdata.FL_OVAL3D_UPBOX) or \
        (boxtype == xfdata.FL_ROUNDED3D_UPBOX):
        return True
    else:
        return False


def FL_IS_DOWNBOX(boxtype):
    if (boxtype == xfdata.FL_DOWN_BOX) or \
        (boxtype == xfdata.FL_OVAL3D_DOWNBOX) or \
        (boxtype == xfdata.FL_ROUNDED3D_DOWNBOX):
        return True
    else:
        return False


def FL_TO_DOWNBOX(boxtype):
    if boxtype == xfdata.FL_UP_BOX:
        t1 = xfdata.FL_DOWN_BOX
    elif boxtype == xfdata.FL_ROUNDED3D_UPBOX:
        t1 = xfdata.FL_ROUNDED3D_DOWNBOX
    elif boxtype == xfdata.FL_OVAL3D_UPBOX:
        t1 = xfdata.FL_OVAL3D_DOWNBOX
    else:
        t1 = boxtype
    return t1


def special_style(style):
    if (style >= xfdata.FL_SHADOW_STYLE) and \
     (style <= (xfdata.FL_EMBOSSED_STYLE + xfdata.FL_MAXFONTS)):
        return True
    else:
        return False


# IO other than XEvent Q

def fl_add_io_callback(fd, mask, py_IoCallback, vdata):
    """fl_add_io_callback(fd, mask, py_IoCallback, vdata)
    
    Registers an input callback function when input is available from fd.

    Parameters
    ----------
        fd : int
            a valid file descriptor in a unix system from an opened file
        mask : int
            under what circumstance the input callback should be invoked.
            Values (from xfdata.py) are FL_READ, FL_WRITE, FL_EXCEPT
        py_IoCallback : python function to be invoked, no return
            name referring to function(num, vdata)
        vdata : any type (e.g. 'None', int, str, etc..)
            user data to be passed to function; callback has to take care of
            type check.

    Examples
    --------
        >>> def iocb(num, vdata):
        >>> ...
        >>> fdesc = os.open(myfile, os.RD_ONLY)
        >>> fl_add_io_callback(fdesc, xfdata.FL_READ, iocb, None)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    #FL_IO_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
    _fl_add_io_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_add_io_callback", \
        None, [cty.c_int, cty.c_uint, xfdata.FL_IO_CALLBACK, cty.c_void_p],
        """void fl_add_io_callback(int fd, unsigned int mask,
           FL_IO_CALLBACK callback, void * data) """)
    library.check_if_initialized()
    ifd = library.convert_to_int(fd)
    library.checkfatal_allowed_value_in_list(mask, xfdata.ASYNCIO_list)
    uimask = library.convert_to_uint(mask)
    library.verify_function_type(py_IoCallback)
    c_IoCallback = xfdata.FL_IO_CALLBACK(py_IoCallback)
    pvdata = cty.cast(vdata, cty.c_void_p)
    library.keep_cfunc_refs(c_IoCallback, py_IoCallback)
    library.keep_elem_refs(fd, ifd, mask, uimask, vdata, pvdata)
    _fl_add_io_callback(ifd, uimask, c_IoCallback, pvdata)


def fl_remove_io_callback(fd, mask, py_IoCallback):
    """fl_remove_io_callback(fd, mask, py_IoCallback)
    
    Removes the registered callback function when input is available from fd.

    Parameters
    ----------
        fd : int
            a valid file descriptor in a unix system
        mask : int
            under what circumstance the input callback should be removed.
            Values (from xfdata.py) are FL_READ, FL_WRITE, FL_EXCEPT
        py_IoCallback : python function to be removed, no return
            name referring to function(num, vdata)

    Examples
    --------
        >>> def iocb(num, vdata):
        >>> ... <something>
        >>> fdesc = os.open(myfile, os.RD_ONLY)
        >>> fl_remove_io_callback(fdesc, xfdata.FL_READ, iocb)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    #FL_IO_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
    _fl_remove_io_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_remove_io_callback", \
        None, [cty.c_int, cty.c_uint, xfdata.FL_IO_CALLBACK], \
        """void fl_remove_io_callback(int fd, unsigned int mask,
           FL_IO_CALLBACK cb) """)
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(mask, xfdata.ASYNCIO_list)
    ifd = library.convert_to_int(fd)
    uimask = library.convert_to_uint(mask)
    library.verify_function_type(py_IoCallback)
    c_IoCallback = xfdata.FL_IO_CALLBACK(py_IoCallback)
    library.keep_cfunc_refs(c_IoCallback, py_IoCallback)
    library.keep_elem_refs(fd, ifd, mask, uimask)
    _fl_remove_io_callback(ifd, uimask, c_IoCallback)


# signals

def fl_add_signal_callback(sglnum, py_SignalHandler, vdata):
    """fl_add_signal_callback(sglnum, py_SignalHandler, vdata)

    Handles the receipt of a signal by registering a callback function that
    gets called when a signal is caught (only one function per signal).

    Parameters
    ----------
        sglnum : int
            signal number. Values (from external signal module)
            SIGALRM, SIGINT, ...
        py_SignalHandler : callback invoked after catching signal, no return
            name referring to function(num, vdata)
        vdata : any type (e.g. 'None', int, str, etc..)
            user data to be passed to function; callback has to take care of
            type check.

    Examples
    --------
        >>> def sglhandl(numsgl, vdata):
        >>> ... <something>
        >>> fl_add_signal_callback(signal.SIGALRM, sglhandl, None)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    #FL_SIGNAL_HANDLER = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
    _fl_add_signal_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_add_signal_callback", \
        None, [cty.c_int, xfdata.FL_SIGNAL_HANDLER, cty.c_void_p], \
        """void fl_add_signal_callback(int s, FL_SIGNAL_HANDLER cb,
           void * data) """)
    library.check_if_initialized()
    isglnum = library.convert_to_int(sglnum)
    library.verify_function_type(py_SignalHandler)
    c_SignalHandler = xfdata.FL_SIGNAL_HANDLER(py_SignalHandler)
    pvdata = cty.cast(vdata, cty.c_void_p)
    library.keep_cfunc_refs(c_SignalHandler, py_SignalHandler)
    library.keep_elem_refs(sglnum, isglnum, vdata, pvdata)
    _fl_add_signal_callback(isglnum, c_SignalHandler, pvdata)


def fl_remove_signal_callback(sglnum):
    """fl_remove_signal_callback(sglnum)
    
    Removes a previously registered callback function related to a signal.

    Parameters
    ----------
        sglnum : int
            signal number. Values (from external signal module)
            SIGALRM, SIGINT, ...

    Examples
    --------
        >>> fl_remove_signal_callback(signal.SIGALRM)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_remove_signal_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_remove_signal_callback", \
        None, [cty.c_int], \
        """void fl_remove_signal_callback(int s) """)
    library.check_if_initialized()
    isglnum = library.convert_to_int(sglnum)
    library.keep_elem_refs(sglnum, isglnum)
    _fl_remove_signal_callback(isglnum)


def fl_signal_caught(sglnum):
    """fl_signal_caught(sglnum)
    
    Informs the main loop of the delivery of the particular signal. The
    signal is received by the application program.

    Parameters
    ----------
        sglnum : int
            signal number. Values (from external signal module)
            SIGALRM, SIGINT, ...

    Examples
    --------
        >>> fl_signal_caught(signal.SIGALRM)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_signal_caught = library.cfuncproto(
        library.load_so_libforms(), "fl_signal_caught", \
        None, [cty.c_int], \
        """void fl_signal_caught(int s) """)
    library.check_if_initialized()
    isglnum = library.convert_to_int(sglnum)
    library.keep_elem_refs(sglnum, isglnum)
    _fl_signal_caught(isglnum)


def fl_app_signal_direct(yesno):
    """fl_app_signal_direct(yesno)
    
    Changes the default behavior of the built-in signal facilities (to be
    called with a true value for flag prior to any use of
    fl_add_signal_callback)

    Parameters
    ----------
        yesno : int
            flag to disable/enable signal. Values 0 (disabled) or
            1 (enabled)

    Examples
    --------
        >>> fl_app_signal_direct(1)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_app_signal_direct = library.cfuncproto(
        library.load_so_libforms(), "fl_app_signal_direct", \
        None, [cty.c_int], \
        """void fl_app_signal_direct(int y) """)
    library.check_if_initialized()
    iyesno = library.convert_to_int(yesno)
    library.keep_elem_refs(yesno, iyesno)
    _fl_app_signal_direct(iyesno)


def fl_input_end_return_handling(endtype):
    """fl_input_end_return_handling(endtype)
    
    Sets type of handling return of end events for input objects.

    Parameters
    ----------
        endtype : int
            how end return event for input is handled. Values (from
            xfdata.py) FL_INPUT_END_EVENT_ALWAYS (default) or
            FL_INPUT_END_EVENT_CLASSIC (old behavior)

    Returns
    -------
        endtype : int
            previous setting

    Examples
    --------
        >>> fl_input_end_return_handling(xfdata.FL_INPUT_END_EVENT_CLASSIC)

    Notes
    -----
        Status: Untested + Doc + NoDemo = OK

    """
    _fl_input_end_return_handling = library.cfuncproto(
        library.load_so_libforms(), "fl_input_end_return_handling", \
        cty.c_int, [cty.c_int], \
        """int fl_input_end_return_handling(int type)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(endtype, \
        xfdata.INPUTENDRETNEVENT_list)
    iendtype = library.convert_to_int(endtype)
    library.keep_elem_refs(endtype, iendtype)
    retval = _fl_input_end_return_handling(endtype)
    return retval


# timeouts

def fl_add_timeout(msec, py_TimeoutCallback, vdata):
    """fl_add_timeout(msec, py_TimeoutCallback, vdata)
    
    Adds a timeout callback after a specified elapsed time.

    Parameters
    ----------
        msec : long
            time elapsed in milliseconds
        py_TimeoutCallback : python function to be invoked, no return
            name referring to function(num, vdata)
        vdata : any type (e.g. 'None', int, str, etc..)
            user data to be passed to function; callback has to take care of
            type check.

    Returns
    -------
        timerid : int
            timeout number id

    Examples
    --------
        >>> def timeoutcb(num, vdata):
        >>> ... <something>
        >>> timnum = fl_add_timeout(100, timeoutcb, None)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    #FL_TIMEOUT_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
    _fl_add_timeout = library.cfuncproto(
        library.load_so_libforms(), "fl_add_timeout", \
        cty.c_int, [cty.c_long, xfdata.FL_TIMEOUT_CALLBACK, cty.c_void_p],
        """int fl_add_timeout(long int msec,
           FL_TIMEOUT_CALLBACK callback, void * data) """)
    library.check_if_initialized()
    lmsec = library.convert_to_long(msec)
    pvdata = cty.cast(vdata, cty.c_void_p)
    library.verify_function_type(py_TimeoutCallback)
    c_TimeoutCallback = xfdata.FL_TIMEOUT_CALLBACK(py_TimeoutCallback)
    library.keep_cfunc_refs(c_TimeoutCallback, py_TimeoutCallback)
    library.keep_elem_refs(msec, lmsec, vdata, pvdata)
    retval = _fl_add_timeout(lmsec, c_TimeoutCallback, pvdata)
    return retval


def fl_remove_timeout(timerid):
    """fl_remove_timeout(timerid)
    
    Removes a timeout callback function (created with fl_add_timeout).

    Parameters
    ----------
        timerid : int
            timeout number id

    Examples
    --------
        >>> fl_remove_timeout(timnum)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_remove_timeout = library.cfuncproto(
        library.load_so_libforms(), "fl_remove_timeout", \
        None, [cty.c_int], \
        """void fl_remove_timeout(int id) """)
    library.check_if_initialized()
    itimerid = library.convert_to_int(timerid)
    library.keep_elem_refs(timerid, itimerid)
    _fl_remove_timeout(itimerid)


# Basic public routine prototypes

def fl_library_version():
    """fl_library_version()
    
    Obtains consolidated, major and minor version informations.

    Returns
    -------
        version_rev : int
            consolidated version (computed as 1000 * version + revision)
        ver : int
            major version (e.g. 1 in 1.x.yy)
        rev : int
            revision (e.g. 0 in x.0.yy)

    Examples
    --------
        >>> compver, ver, rev = fl_library_version()

    API_diversion
    ----------
        API is changed from XForms, upstream was fl_library_version(ver, rev)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_library_version = library.cfuncproto(
        library.load_so_libforms(), "fl_library_version", \
        cty.c_int, [cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)], \
        """int fl_library_version(int * ver, int * rev) """)
    #library.check_if_initialized()
    ver, pver = library.make_int_and_pointer()
    rev, prev = library.make_int_and_pointer()
    library.keep_elem_refs(ver, rev, pver, prev)
    retval = _fl_library_version(pver, prev)
    return retval, ver.value, rev.value


# Generic routines that deal with FORMS

def fl_bgn_form(formtype, w, h):
    """fl_bgn_form(formtype, w, h)
    
    Starts the definition of a form call.

    Parameters
    ----------
        formtype : int
            type of box used as a background. Values (from xfdata.py)
            FL_NO_BOX, FL_UP_BOX, FL_DOWN_BOX, FL_BORDER_BOX, FL_SHADOW_BOX,
            FL_FRAME_BOX, FL_ROUNDED_BOX, FL_EMBOSSED_BOX, FL_FLAT_BOX,
            FL_RFLAT_BOX, FL_RSHADOW_BOX, FL_OVAL_BOX, FL_ROUNDED3D_UPBOX,
            FL_ROUNDED3D_DOWNBOX, FL_OVAL3D_UPBOX, FL_OVAL3D_DOWNBOX,
            FL_OVAL3D_FRAMEBOX, FL_OVAL3D_EMBOSSEDBOX
        w : int
            width of the new form in coord units
        h : int
            height of the new form in coord units

    Returns
    -------
        pFlForm : pointer to xfdata.FL_FORM
            form to define

    Examples
    --------
        >>> pform = fl_bgn_form(xfdata.FL_UP_BOX, 400, 500)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_bgn_form = library.cfuncproto(
        library.load_so_libforms(), "fl_bgn_form", \
        cty.POINTER(xfdata.FL_FORM), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord],
        """FL_FORM * fl_bgn_form(int type, FL_Coord w, FL_Coord h) """)
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(formtype, xfdata.BOXTYPE_list)
    iformtype = library.convert_to_int(formtype)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    library.keep_elem_refs(formtype, iformtype, w, iw, h, ih)
    retval = _fl_bgn_form(iformtype, iw, ih)
    return retval


def fl_end_form():
    """fl_end_form()
    
    Ends the definition for a form call, after all required objects have
    been added to a form call.

    Examples
    --------
        >>> fl_end_form()

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_end_form = library.cfuncproto(
        library.load_so_libforms(), "fl_end_form", \
        None, [], \
        """void fl_end_form() """)
    library.check_if_initialized()
    _fl_end_form()


def fl_do_forms():
    """fl_do_forms()
    
    Starts the main loop of the program and returns only when the state of
    a FL_OBJECT (that has no callback bound to it) changes.

    Returns
    -------
        pFlObject : pointer to xfdata.FL_OBJECT
            object changed

    Examples
    --------
        >>> while fl_do_forms():
        >>> ... pass

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_do_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_do_forms", \
        cty.POINTER(xfdata.FL_OBJECT), [], \
        """FL_OBJECT * fl_do_forms() """)
    library.check_if_initialized()
    retval = _fl_do_forms()
    return retval


def fl_check_forms():
    """fl_check_forms()
    
    Returns None immediately unless the state of one of xfdata.FL_OBJECT
    (without a callback bound to it) changed.

    Returns
    -------
        pFlObject : pointer to xfdata.FL_OBJECT
            object changed

    Examples
    --------
        >>> pobj = fl_check_forms()

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_check_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_check_forms", \
        cty.POINTER(xfdata.FL_OBJECT), [], \
        """FL_OBJECT * fl_check_forms() """)
    library.check_if_initialized()
    retval = _fl_check_forms()
    return retval


def fl_do_only_forms():
    """fl_do_only_forms()
    
    Starts the main loop of the program and returns only when the state of
    an object changes that has no callback bound to it. It does not handle
    user events generated by application windows opened via fl_winopen() or
    similar routines.

    Returns
    -------
        pFlObject : pointer to xfdata.FL_OBJECT
            object changed

    Examples
    --------
        >>> pobj = fl_do_only_forms()

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_do_only_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_do_only_forms", \
        cty.POINTER(xfdata.FL_OBJECT), [], \
        """FL_OBJECT * fl_do_only_forms() """)
    library.check_if_initialized()
    retval = _fl_do_only_forms()
    return retval


def fl_check_only_forms():
    """fl_check_only_forms()
    
    Returns None immediately unless the state of one of the object (without
    a callback bound to it) changed. It does not handle user events generated
    by application windows opened via fl_winopen() or similar routines.

    Returns
    -------
        pFlObject : pointer to xfdata.FL_OBJECT
            object changed

    Examples
    --------
        >>> pobj = fl_check_only_forms()

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_check_only_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_check_only_forms", \
        cty.POINTER(xfdata.FL_OBJECT), [], \
        """FL_OBJECT * fl_check_only_forms() """)
    library.check_if_initialized()
    retval = _fl_check_only_forms()
    return retval


def fl_freeze_form(pFlForm):
    """fl_freeze_form()
    
    Redraw of a form is temporarily suspended, while changes are being
    made, so all changes made are instead buffered internally.

    Parameters
    ----------
      pFlForm : pointer to xfdata.FL_FORM
        form not to be re-drawn temporarily

    Examples
    --------
        >>> fl_freeze_form(pform1)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_freeze_form = library.cfuncproto(
        library.load_so_libforms(), "fl_freeze_form", \
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_freeze_form(FL_FORM * form) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlForm)
    _fl_freeze_form(pFlForm)


def fl_set_focus_object(pFlForm, pFlObject):
    """fl_set_focus_object(pFlForm, pFlObject)
    
    Sets the input focus in form to object pFlObject.

    Parameters
    ----------
      pFlForm : pointer to xfdata.FL_FORM
        form whose object has to be focused
      pFlObject : pointer to xfdata.FL_OBJECT
        object to be focused

    Examples
    --------
        >>> fl_set_focus_object(pform, pobj)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_focus_object = library.cfuncproto(
        library.load_so_libforms(), "fl_set_focus_object", \
        None, [cty.POINTER(xfdata.FL_FORM), cty.POINTER(xfdata.FL_OBJECT)], \
        """void fl_set_focus_object(FL_FORM * form, FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlForm, pFlObject)
    _fl_set_focus_object(pFlForm, pFlObject)


fl_set_object_focus = fl_set_focus_object


def fl_get_focus_object(pFlForm):
    """fl_get_focus_object(pFlForm)

    Obtains the object that has the focus on a form.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form that has a focused object in

    Returns
    -------
        pFlObject : pointer to xfdata.FL_OBJECT
            focused object

    Examples
    --------
        >>> pobj2 = fl_get_focus_object(pform1)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_focus_object = library.cfuncproto(
        library.load_so_libforms(), "fl_get_focus_object", \
        cty.POINTER(xfdata.FL_OBJECT), [cty.POINTER(xfdata.FL_FORM)], \
        """FL_OBJECT * fl_get_focus_object(FL_FORM * form) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlForm)
    retval = _fl_get_focus_object(pFlForm)
    return retval


def fl_reset_focus_object(pFlObject):
    """fl_reset_focus_object(pFlObject)
    
    Resets focus on current object, overriding the xfdata.FL_UNFOCUS event.

    Parameters
    ----------
      pFlObject : pointer to xfdata.FL_OBJECT
        object towards applying event

    Examples
    --------
        >>> fl_reset_focus_object(pobj2)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_reset_focus_object = library.cfuncproto(
        library.load_so_libforms(), "fl_reset_focus_object", \
        None, [cty.POINTER(xfdata.FL_OBJECT)], \
        """void fl_reset_focus_object(FL_OBJECT * ob) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_reset_focus_object(pFlObject)


def fl_set_form_atclose(pFlForm, py_FormAtclose, vdata):
    """fl_set_form_atclose(pFlForm, py_FormAtclose, vdata)
    
    Calls a callback function before closing the form.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form that receives the message
        py_FormAtclose : python callback to be called, with returned value
            name referring to function(pFlForm, vdata) -> num
        vdata : any type (e.g. 'None', int, str, etc..)
            user data to be passed to function; callback has to take care of
            type check.

    Returns
    -------
        FormAtclose : xfdata.FL_FORM_ATCLOSE
            old form atclose function

    Examples
    --------
        >>> def atcolsecb(pform, vdata):
        >>> ... <something>
        >>> ... return 0
        >>> oldatclosecb = fl_set_form_atclose(pform1, None)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    # FL_FORM_ATCLOSE = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_FORM), \
    #                                 cty.c_void_p)
    _fl_set_form_atclose = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_atclose", \
        xfdata.FL_FORM_ATCLOSE, [cty.POINTER(xfdata.FL_FORM), \
        xfdata.FL_FORM_ATCLOSE, cty.c_void_p], \
        """FL_FORM_ATCLOSE fl_set_form_atclose(FL_FORM * form,
           FL_FORM_ATCLOSE fmclose, void * data) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.verify_function_type(py_FormAtclose)
    c_FormAtclose = xfdata.FL_FORM_ATCLOSE(py_FormAtclose)
    pvdata = cty.cast(vdata, cty.c_void_p)
    library.keep_cfunc_refs(c_FormAtclose, py_FormAtclose)
    library.keep_elem_refs(pFlForm, vdata, pvdata)
    retval = _fl_set_form_atclose(pFlForm, c_FormAtclose, pvdata)
    return retval


def fl_set_atclose(py_FormAtclose, vdata):
    """fl_set_atclose(py_FormAtclose, vdata)
    
    Calls a callback function before terminating the application.

    Parameters
    ----------
      py_FormAtclose : python callback to be called, with returned value
        name referring to function(pFlForm, vdata) -> num
      vdata : any type (e.g. 'None', int, str, etc..)
        user data to be passed to function; callback has to take care of
        type check.

    Returns
    -------
        FormAtclose : xfdata.FL_FORM_ATCLOSE
            old form atclose function

    Examples
    --------
        >>> def atclose(pform, vdata):
        >>> ... <something>
        >>> ... return 0
        >>> oldatclosefunc = fl_set_atclose(atclose, None)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    # FL_FORM_ATCLOSE = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_FORM), \
    #                                 cty.c_void_p)
    _fl_set_atclose = library.cfuncproto(
        library.load_so_libforms(), "fl_set_atclose", \
        xfdata.FL_FORM_ATCLOSE, [xfdata.FL_FORM_ATCLOSE, cty.c_void_p], \
        """FL_FORM_ATCLOSE fl_set_atclose(FL_FORM_ATCLOSE fmclose,
           void * data) """)
    library.check_if_initialized()
    library.verify_function_type(py_FormAtclose)
    c_FormAtclose = xfdata.FL_FORM_ATCLOSE(py_FormAtclose)
    pvdata = cty.cast(vdata, cty.c_void_p)
    library.keep_cfunc_refs(c_FormAtclose, py_FormAtclose)
    library.keep_elem_refs(vdata, pvdata)
    retval = _fl_set_atclose(c_FormAtclose, pvdata)
    return retval


def fl_set_form_atactivate(pFlForm, py_FormAtactivate, vdata):
    """fl_set_form_atactivate(pFlForm, py_FormAtactivate, vdata)
    
    Registers a callback that is called when activation status of a forms
    is enabled.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            activated form
        py_FormAtactivate : python callback function called, no return
            name referring to function(pFlForm, vdata)
        vdata : any type (e.g. 'None', int, str, etc..)
            user data to be passed to function; callback has to take care of
            type check.

    Return
    ------
        FormAtactivate : xfdata.FL_FORM_ATACTIVATE
            old form atactivate function

    Examples
    --------
        >>> def atactcb(pform, vdata):
        >>> ... <something>
        >>> oldactfunc = fl_set_form_atdeactivate(pform, atactcb, None)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    #FL_FORM_ATACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_FORM), \
    #                                   cty.c_void_p)
    _fl_set_form_atactivate = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_atactivate", \
        xfdata.FL_FORM_ATACTIVATE, [cty.POINTER(xfdata.FL_FORM),
        xfdata.FL_FORM_ATACTIVATE, cty.c_void_p], \
        """FL_FORM_ATACTIVATE fl_set_form_atactivate(FL_FORM * form,
           FL_FORM_ATACTIVATE cb, void * data) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.verify_function_type(py_FormAtactivate)
    c_FormAtactivate = xfdata.FL_FORM_ATACTIVATE(py_FormAtactivate)
    pvdata = cty.cast(vdata, cty.c_void_p)
    library.keep_cfunc_refs(c_FormAtactivate, py_FormAtactivate)
    library.keep_elem_refs(pFlForm, vdata, pvdata)
    retval = _fl_set_form_atactivate(pFlForm, c_FormAtactivate, pvdata)
    return retval


def fl_set_form_atdeactivate(pFlForm, py_FormAtdeactivate, vdata):
    """fl_set_form_atdeactivate(pFlForm, py_FormAtdeactivate, vdata)
    
    Registers a callback that is called when activation status of a forms
    is disabled.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            de-activated form
        py_FormAtdeactivate : python callback function called, no return
            name referring to function(pFlForm, vdata)
        vdata : any type (e.g. 'None', int, str, etc..)
            user data to be passed to function; callback has to take care of
            type check.

    Returns
    -------
        FormAtdeactivate : xfdata.FL_FORM_ATDEACTIVATE
            old FL_FORM_ATDEACTIVATE function

    Examples
    --------
        >>> def atdeactcb(pform, vdata):
        >>> ... <something>
        >>> oldatdeactfunc = xf.fl_set_form_atdeactivate(pform,
                atdeactcb, None)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    #FL_FORM_ATDEACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_FORM), \
    #                         cty.c_void_p)
    _fl_set_form_atdeactivate = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_atdeactivate", \
        xfdata.FL_FORM_ATDEACTIVATE, [cty.POINTER(xfdata.FL_FORM),
        xfdata.FL_FORM_ATDEACTIVATE, cty.c_void_p], \
        """FL_FORM_ATDEACTIVATE fl_set_form_atdeactivate(FL_FORM * form,
           FL_FORM_ATDEACTIVATE cb, void * data) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.verify_function_type(py_FormAtdeactivate)
    c_FormAtdeactivate = xfdata.FL_FORM_ATDEACTIVATE(py_FormAtdeactivate)
    pvdata = cty.cast(vdata, cty.c_void_p)
    library.keep_cfunc_refs(c_FormAtdeactivate, py_FormAtdeactivate)
    library.keep_elem_refs(pFlForm, vdata, pvdata)
    retval = _fl_set_form_atdeactivate(pFlForm, c_FormAtdeactivate, pvdata)
    return retval


def fl_unfreeze_form(pFlForm):
    """fl_unfreeze_form(pFlForm)
    
    Reverts previous freeze (set with fl_freeze_form function), all
    changes made in the meantime in a form are drawn at once.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form to be re-drawn after freezing

    Examples
    --------
        >>> fl_unfreeze_form(pform)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_unfreeze_form = library.cfuncproto(
        library.load_so_libforms(), "fl_unfreeze_form", \
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_unfreeze_form(FL_FORM * form) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlForm)
    _fl_unfreeze_form(pFlForm)


def fl_deactivate_form(pFlForm):
    """fl_deactivate_form(pFlForm)
    
    Deactivates form temporarily, without hiding it, but not allowing a
    user to interact with elements contained in form (buttons, etc.).

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form to be de-activated

    Examples
    --------
        >>> fl_deactivate_form(pform)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_deactivate_form = library.cfuncproto(
        library.load_so_libforms(), "fl_deactivate_form", \
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_deactivate_form(FL_FORM * form) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlForm)
    _fl_deactivate_form(pFlForm)


def fl_activate_form(pFlForm):
    """fl_activate_form(pFlForm)
    
    (Re)activates form (deactivated with fl_deactivate_form), allowing the
    user to interact again with elements contained in form (buttons, etc.).

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form to be re-activated

    Examples
    --------
        >>> fl_activate_form(pform)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_activate_form = library.cfuncproto(
        library.load_so_libforms(), "fl_activate_form", \
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_activate_form(FL_FORM * form) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlForm)
    _fl_activate_form(pFlForm)


def fl_deactivate_all_forms():
    """fl_deactivate_all_forms()
    
    De-activates all current forms, forbidding any event/user interaction.

    Examples
    --------
        >>> fl_deactivate_all_forms()

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_deactivate_all_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_deactivate_all_forms", \
        None, [], \
        """void fl_deactivate_all_forms() """)
    library.check_if_initialized()
    _fl_deactivate_all_forms()


def fl_activate_all_forms():
    """fl_activate_all_forms()
    
    (Re)activates all current forms, allowing event/user interaction.

    Examples
    --------
        >>> fl_activate_all_forms()

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_activate_all_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_activate_all_forms", \
        None, [], \
        """void fl_activate_all_forms() """)
    library.check_if_initialized()
    _fl_activate_all_forms()


def fl_freeze_all_forms():
    """fl_freeze_all_forms()
    
    All current forms are not temporarily redrawn, while changes are being
    made and are instead buffered internally.

    Examples
    --------
        >>> fl_freeze_all_forms()

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_freeze_all_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_freeze_all_forms", \
        None, [], \
        """void fl_freeze_all_forms() """)
    library.check_if_initialized()
    _fl_freeze_all_forms()


def fl_unfreeze_all_forms():
    """fl_unfreeze_all_forms()
    
    All changes made in the meantime in all current forms are drawn at
    once, reverting previous freeze.

    Examples
    --------
        >>> fl_unfreeze_all_forms()

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_unfreeze_all_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_unfreeze_all_forms", \
        None, [], \
        """void fl_unfreeze_all_forms() """)
    library.check_if_initialized()
    _fl_unfreeze_all_forms()


def fl_scale_form(pFlForm, xsc, ysc):
    """fl_scale_form(pFlForm, xsc, ysc)
    
    Scales a form and the objects on it in size and position, indicating
    a scaling factor in x- and y-direction (1.1 = 110 percent, 0.5 = 50,
    etc.) with respect to the current size, and reshapes the window.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form to be scaled
        xsc : float
            scaling factor in horizontal direction
        ysc : float
            scaling factor in vertical direction

    Examples
    --------
        >>> fl_scale_form(pform, 0.8, 1.2)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_scale_form = library.cfuncproto(
        library.load_so_libforms(), "fl_scale_form", \
        None, [cty.POINTER(xfdata.FL_FORM), cty.c_double, cty.c_double], \
        """void fl_scale_form(FL_FORM * form, double xsc, double ysc) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    fxsc = library.convert_to_double(xsc)
    fysc = library.convert_to_double(ysc)
    library.keep_elem_refs(pFlForm, xsc, fxsc, ysc, fysc)
    _fl_scale_form(pFlForm, fxsc, fysc)


def fl_set_form_position(pFlForm, x, y):
    """fl_set_form_position(pFlForm, x, y)
    
    Sets position of form, when placing a form on the screen with
    xfdata.FL_PLACE_GEOMETRY as place argument.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form whose position is to be set
        x : int
            horizontal position (upper-left corner)
        y : int
            vertical position (upper-left corner)

    Examples
    --------
        >>> fl_set_form_position(pform, 125, 250)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_form_position = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_position", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.FL_Coord, xfdata.FL_Coord],
        """void fl_set_form_position(FL_FORM * form, FL_Coord x,
           FL_Coord y) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    library.keep_elem_refs(pFlForm, x, ix, y, iy)
    _fl_set_form_position(pFlForm, ix, iy)


def fl_set_form_title(pFlForm, title):
    """fl_set_form_title(pFlForm, title)
    
    Changes the form title (and the icon name) after it is shown.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form whose title has to be changed
        title : str
            new title text for the form

    Examples
    --------
        >>> fl_set_form_title(pform, "My great form")

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_form_title = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_title", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.STRING], \
        """void fl_set_form_title(FL_FORM * form, const char * name) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    stitle = library.convert_to_string(title)
    library.keep_elem_refs(pFlForm, title, stitle)
    _fl_set_form_title(pFlForm, stitle)


def fl_set_app_mainform(pFlForm):
    """fl_set_app_mainform(pFlForm)
    
    Designates the main form. By default, the main form is set
    automatically by the library to the first full-bordered form shown.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form to be set as main one

    Examples
    --------
        >>> fl_set_app_mainform(pform2)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_app_mainform = library.cfuncproto(
        library.load_so_libforms(), "fl_set_app_mainform",
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_set_app_mainform(FL_FORM * form) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlForm)
    _fl_set_app_mainform(pFlForm)


def fl_get_app_mainform():
    """fl_get_app_mainform()
    
    Obtains the current mainform.

    Returns
    -------
        pFlForm : pointer to xfdata.FL_FORM
            main form

    Examples
    --------
        >>> fl_get_app_mainform()

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_app_mainform = library.cfuncproto(
        library.load_so_libforms(), "fl_get_app_mainform",
        cty.POINTER(xfdata.FL_FORM), [], \
        """FL_FORM * fl_get_app_mainform() """)
    library.check_if_initialized()
    retval = _fl_get_app_mainform()
    return retval


def fl_set_app_nomainform(yesno):
    """fl_set_app_nomainform(yesno)
    
    In some situations, either because the concept of an application
    main form does not apply (for example, an application might have
    multiple full-bordered windows), or under some (buggy) window managers,
    the designation of a main form may cause stacking order problems. To
    workaround these, it can disable the designation of a main form (must
    be called before any full-bordered form is shown).

    Parameters
    ----------
        yesno : int
            flag to disable/enable mainform designation. Values 1 (to disable)
            or 0 (to enable)

    Examples
    --------
        >>> fl_set_app_nomainform(1)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_app_nomainform = library.cfuncproto(
        library.load_so_libforms(), "fl_set_app_nomainform",
        None, [cty.c_int], \
        """void fl_set_app_nomainform(int flag) """)
    library.check_if_initialized()
    iyesno = library.convert_to_int(yesno)
    library.keep_elem_refs(yesno, iyesno)
    _fl_set_app_nomainform(iyesno)


def fl_set_form_callback(pFlForm, py_FormCallbackPtr, vdata):
    """fl_set_form_callback(pFlForm, py_FormCallbackPtr, vdata)
    
    Sets the callback function bound to an entire form. Whenever
    fl_do_forms() or fl_check_forms() would return an object in form they
    call the routine callback instead, with the object as an argument. So
    with each form you can associate its own callback routine. For objects
    that have their own callbacks, the object callbacks have priority over
    the form callback.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form whose callback has to be set
        py_FormCallbackPtr : python callback to be set, no return
            name referring to function(pFlObject, vdata)
        vdata : any type (e.g. 'None', int, str, etc..)
            user data to be passed to function; callback has to take care
            of type check

    Examples
    --------
        >>> def formcb(pobj, vdata):
        >>> ... <something>
        >>> fl_set_form_callback(pform, formcb, None)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    #FL_FORMCALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_OBJECT), \
    #                                   cty.c_void_p)
    _fl_set_form_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_callback", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.FL_FORMCALLBACKPTR, \
        cty.c_void_p], \
        """void fl_set_form_callback(FL_FORM * form,
           FL_FORMCALLBACKPTR callback, void * d) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.verify_function_type(py_FormCallbackPtr)
    c_FormCallbackPtr = xfdata.FL_FORMCALLBACKPTR(py_FormCallbackPtr)
    pvdata = cty.cast(vdata, cty.c_void_p)
    library.keep_cfunc_refs(c_FormCallbackPtr, py_FormCallbackPtr)
    library.keep_elem_refs(pFlForm, vdata, pvdata)
    _fl_set_form_callback(pFlForm, c_FormCallbackPtr, pvdata)


fl_set_form_call_back = fl_set_form_callback


def fl_set_form_size(pFlForm, w, h):
    """fl_set_form_size(pFlForm, w, h)
    
    Sets the size of form.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form whose size has to be set
        w : int
            width of form in coord units
        h : int
            height of form in coord units

    Examples
    --------
        >>> fl_set_form_size(pform, 200, 200)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_form_size = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_size", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.FL_Coord,
        xfdata.FL_Coord], \
        """void fl_set_form_size(FL_FORM * form, FL_Coord w, FL_Coord h)""")
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    library.keep_elem_refs(pFlForm, w, iw, h, ih)
    _fl_set_form_size(pFlForm, iw, ih)


def fl_set_form_hotspot(pFlForm, x, y):
    """fl_set_form_hotspot(pFlForm, x, y)
    
    Sets the position of the hotspot, for showing a form so that a
    particular point is under the mouse. You have to use
    xfdata.FL_PLACE_HOTSPOT as place argument in fl_show_form().

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form to be set
        x : int
            horizontal position (upper-left corner)
        y : int
            vertical position (upper-left corner)

    Examples
    --------
        >>> fl_set_form_hotspot(pform, 300, 50)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_form_hotspot = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_hotspot", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.FL_Coord,
        xfdata.FL_Coord], \
        """void fl_set_form_hotspot(FL_FORM * form, FL_Coord x,
           FL_Coord y) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    library.keep_elem_refs(pFlForm, x, ix, y, iy)
    _fl_set_form_hotspot(pFlForm, ix, iy)


def fl_set_form_hotobject(pFlForm, pFlObject):
    """fl_set_form_hotobject(pFlForm, pFlObject)
    
    Sets the hotspot for showing a form so that a particular object is
    under the mouse. You have to use xfdata.FL_PLACE_HOTSPOT as place
    argument in fl_show_form().

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form whose object has to be set
        pFlObject : pointer to xfdata.FL_OBJECT
            object

    Examples
    --------
        >>> fl_set_form_hotobject(pform, pobj)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_form_hotobject = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_hotobject", \
        None, [cty.POINTER(xfdata.FL_FORM), cty.POINTER(xfdata.FL_OBJECT)], \
        """void fl_set_form_hotobject(FL_FORM * form, FL_OBJECT * ob) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlForm, pFlObject)
    _fl_set_form_hotobject(pFlForm, pFlObject)


def fl_set_form_minsize(pFlForm, w, h):
    """fl_set_form_minsize(pFlForm, w, h)
    
    Sets the minimum size a form can have, if interactive resizing is
    allowed (e.g., by showing the form with xfdata.FL_PLACE_POSITION).

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form
        w : int
            width of form in coord units
        h : int
            height of form in coord units

    Examples
    --------
        >>> fl_set_form_minsize(pform, 200, 300)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_form_minsize = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_minsize", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.FL_Coord,
        xfdata.FL_Coord],
        """void fl_set_form_minsize(FL_FORM * form, FL_Coord w,
           FL_Coord h) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    library.keep_elem_refs(pFlForm, w, iw, h, ih)
    _fl_set_form_minsize(pFlForm, iw, ih)


def fl_set_form_maxsize(pFlForm, w, h):
    """fl_set_form_maxsize(pFlForm, w, h)
    
    Sets the maximum size a form can have, if interactive resizing is
    allowed (e.g. by showing the form with xfdata.FL_PLACE_POSITION).

    Parameters
    ----------
        pFlForm : pointer to xdata.FL_FORM
            form whose size has to be set
        w : int
            width of form in coord units
        h : int
            height of form in coord units

    Examples
    --------
        >>> fl_set_form_maxsize(pform, 400, 450)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_form_maxsize = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_maxsize", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.FL_Coord,
        xfdata.FL_Coord], \
        """void fl_set_form_maxsize(FL_FORM * form, FL_Coord w,
           FL_Coord h) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    library.keep_elem_refs(pFlForm, w, iw, h, ih)
    _fl_set_form_maxsize(pFlForm, iw, ih)


# TODO: find if key mask have to be included
def fl_set_form_event_cmask(pFlForm, cmask):
    """fl_set_form_event_cmask(pFlForm, cmask)
    
    Sets the event compress mask a form can react to.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form
        cmask : long_pos
            event compress mask for form. Values (from xfdata.py) one or
            more OR-ed between NoEventMask, KeyPressMask, KeyReleaseMask,
            ButtonPressMask, ButtonReleaseMask, EnterWindowMask,
            LeaveWindowMask, PointerMotionMask, PointerMotionHintMask,
            Button1MotionMask, Button2MotionMask, Button3MotionMask,
            Button4MotionMask, Button5MotionMask, ButtonMotionMask,
            KeymapStateMask, ExposureMask, VisibilityChangeMask,
            StructureNotifyMask, ResizeRedirectMask, SubstructureNotifyMask,
            SubstructureRedirectMask, FocusChangeMask, ColormapChangeMask,
            OwnerGrabButtonMask, FL_ALL_EVENT, ... ?

    Examples
    --------
        >>> fl_set_form_event_cmask(pform, xfdata.FL_ALL_EVENT)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_form_event_cmask = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_event_cmask", \
        None, [cty.POINTER(xfdata.FL_FORM), cty.c_ulong], \
        """void fl_set_form_event_cmask(FL_FORM * form,
           long unsigned int cmask) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    ulcmask = library.convert_to_ulong(cmask)
    library.keep_elem_refs(pFlForm, cmask, ulcmask)
    _fl_set_form_event_cmask(pFlForm, ulcmask)


def fl_get_form_event_cmask(pFlForm):
    """fl_get_form_event_cmask(pFlForm)
    
    Obtains event compress mask a form can react to.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form

    Returns
    -------
        cmask : long_pos
            event compress mask id

    Examples
    --------
        >>> cmaskid = fl_get_form_event_cmask(pform)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_form_event_cmask = library.cfuncproto(
        library.load_so_libforms(), "fl_get_form_event_cmask", \
        cty.c_ulong, [cty.POINTER(xfdata.FL_FORM)], \
        """long unsigned int fl_get_form_event_cmask(FL_FORM * form)""")
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlForm)
    retval = _fl_get_form_event_cmask(pFlForm)
    return retval


def fl_set_form_geometry(pFlForm, x, y, w, h):
    """fl_set_form_geometry(pFlForm, x, y, w, h)
    
    Sets the geometry (position and size) of a form.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            pointer to form to be set
        x : int
            horizontal position (upper-left corner)
        y : int
            vertical position (upper-left corner)
        w : int
            width of form in coord units
        h : int
            height of form in coord units

    Examples
    --------
        >>> fl_set_form_geometry(pform, 300, 400, 150, 150)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_form_geometry = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_geometry", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord], \
        """void fl_set_form_geometry(FL_FORM * form, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    library.keep_elem_refs(pFlForm, x, ix, y, iy, w, iw, h, ih)
    _fl_set_form_geometry(pFlForm, ix, iy, iw, ih)


fl_set_initial_placement = fl_set_form_geometry


def fl_show_form(pFlForm, place, border, title):
    """fl_show_form(pFlForm, place, border, title)
    
    Shows the form.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form to be shown
        place : int
            where form has to be placed. Values (from xfdata.py) FL_PLACE_FREE,
            FL_PLACE_MOUSE, FL_PLACE_CENTER, FL_PLACE_POSITION, FL_PLACE_SIZE,
            FL_PLACE_GEOMETRY, FL_PLACE_ASPECT, FL_PLACE_FULLSCREEN,
            FL_PLACE_HOTSPOT, FL_PLACE_ICONIC, FL_FREE_SIZE,
            FL_PLACE_FREE_CENTER, FL_PLACE_CENTERFREE,
            FL_PLACE_MOUSE|FL_FREE_SIZE, FL_PLACE_FULLSCREEN|FL_FREE_SIZE,
            FL_PLACE_HOTSPOT|FL_FREE_SIZE
        border : int
            window manager decoration. Values (from xfdata.py) FL_FULLBORDER,
            FL_TRANSIENT, FL_NOBORDER
        title : str
            title of form

    Returns
    -------
        win : long_pos
            window id

    Examples
    --------
        >>> wind = fl_show_form(pform0, FL_PLACE_FREE, FL_FULLBORDER,
                "MyForm")

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_show_form = library.cfuncproto(
        library.load_so_libforms(), "fl_show_form",
        xfdata.Window, [cty.POINTER(xfdata.FL_FORM), cty.c_int, cty.c_int,
        xfdata.STRING], \
        """Window fl_show_form(FL_FORM * form, int place, int border,
           const char * name) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.checkfatal_allowed_value_in_list(place, xfdata.PLACE_list)
    library.checkfatal_allowed_value_in_list(border, xfdata.DECORATION_list)
    iplace = library.convert_to_int(place)
    iborder = library.convert_to_int(border)
    stitle = library.convert_to_string(title)
    library.keep_elem_refs(pFlForm, place, iplace, border, iborder, title,
                           stitle)
    retval = _fl_show_form(pFlForm, iplace, iborder, stitle)
    return retval


def fl_hide_form(pFlForm):
    """fl_hide_form(pFlForm)
    
    Hides the form.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form to be hidden

    Examples
    --------
        >>> fl_hide_form(pform0)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_hide_form = library.cfuncproto(
        library.load_so_libforms(), "fl_hide_form",
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_hide_form(FL_FORM * form) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlForm)
    _fl_hide_form(pFlForm)


def fl_free_form(pFlForm):
    """fl_free_form(pFlForm)
    
    Frees the memory used by a form, hiding and deleting it together
    with all its objects.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form to be freed

    Examples
    --------
        >>> fl_free_form(pform0)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_free_form = library.cfuncproto(
        library.load_so_libforms(), "fl_free_form",
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_free_form(FL_FORM * form) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlForm)
    _fl_free_form(pFlForm)


def fl_redraw_form(pFlForm):
    """fl_redraw_form(pFlForm)
    
    (Re)draws an entire form.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form to redraw

    Examples
    --------
        >>> fl_redraw_form(pform0)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_redraw_form = library.cfuncproto(
        library.load_so_libforms(), "fl_redraw_form",
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_redraw_form(FL_FORM * form) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlForm)
    _fl_redraw_form(pFlForm)


def fl_set_form_dblbuffer(pFlForm, yesno):
    """fl_set_form_dblbuffer(pFlForm, yesno)
    
    Uses double buffering on a per-form basis. Since Xlib does not support
    double buffering, XForms library simulates this functionality with pixmap
    bit-bliting. In practice, the effect is hardly distinguishable from double
    buffering and performance is on par with multi-buffering extensions (it is
    slower than drawing into a window directly on most workstations however).
    Bear in mind that a pixmap can be resource hungry, so use this option with
    discretion.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form to set
        yesno : int
            flag to disable/enable doublebuffer. Values 0 (disabled) or 1
            (enabled)

    Examples
    --------
        >>> fl_set_form_dblbuffer(1)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_form_dblbuffer = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_dblbuffer", \
        None, [cty.POINTER(xfdata.FL_FORM), cty.c_int], \
        """void fl_set_form_dblbuffer(FL_FORM * form, int y) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    iyesno = library.convert_to_int(yesno)
    library.keep_elem_refs(pFlForm, yesno, iyesno)
    _fl_set_form_dblbuffer(pFlForm, iyesno)


def fl_prepare_form_window(pFlForm, place, border, title):
    """fl_prepare_form_window(pFlForm, place, border, title)
    
    Creates a window that obeys any and all constraints just as
    fl_show_form() does but remains unmapped (not shown), returning its
    window handle. You need fl_show_form_window() after to show it.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form to display
        place : int
            where has to be placed. Values (from xfdata.py) FL_PLACE_FREE,
            FL_PLACE_MOUSE, FL_PLACE_CENTER, FL_PLACE_POSITION, FL_PLACE_SIZE,
            FL_PLACE_GEOMETRY, FL_PLACE_ASPECT, FL_PLACE_FULLSCREEN,
            FL_PLACE_HOTSPOT, FL_PLACE_ICONIC, FL_FREE_SIZE,
            FL_PLACE_FREE_CENTER, FL_PLACE_CENTERFREE,
            FL_PLACE_MOUSE|FL_FREE_SIZE, FL_PLACE_FULLSCREEN|FL_FREE_SIZE,
            FL_PLACE_HOTSPOT|FL_FREE_SIZE
        border : int
            window manager decoration. Values (from xfdata.py) FL_FULLBORDER,
            FL_TRANSIENT, FL_NOBORDER
        title : str
            text title of form

    Returns
    -------
        win : long_pos
            window id

    Examples
    --------
        >>> wind = fl_prepare_form_window(pform2, FL_PLACE_FREE,
                FL_FULLBORDER, "MyForm")

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_prepare_form_window = library.cfuncproto(
        library.load_so_libforms(), "fl_prepare_form_window", \
        xfdata.Window, [cty.POINTER(xfdata.FL_FORM), cty.c_int, cty.c_int,
        xfdata.STRING], \
        """Window fl_prepare_form_window(FL_FORM * form, int place,
           int border, const char * name) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.checkfatal_allowed_value_in_list(place, xfdata.PLACE_list)
    library.checkfatal_allowed_value_in_list(border, xfdata.DECORATION_list)
    iplace = library.convert_to_int(place)
    iborder = library.convert_to_int(border)
    stitle = library.convert_to_string(title)
    library.keep_elem_refs(pFlForm, place, iplace, border, iborder, title, stitle)
    retval = _fl_prepare_form_window(pFlForm, iplace, iborder, stitle)
    return retval


def fl_show_form_window(pFlForm):
    """fl_show_form_window(pFlForm)
    
    Maps (shows) a window of form that has been created before with
    fl_prepare_form_window().

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form whose window has to be shown

    Returns
        win : long_pos
            window id (win)

    Examples
    --------
        >>> win1 = fl_show_form_window(pform2)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_show_form_window = library.cfuncproto(
        library.load_so_libforms(), "fl_show_form_window", \
        xfdata.Window, [cty.POINTER(xfdata.FL_FORM)], \
        """Window fl_show_form_window(FL_FORM * form) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlForm)
    retval = _fl_show_form_window(pFlForm)
    return retval


def fl_adjust_form_size(pFlForm):
    """fl_adjust_form_size(pFlForm)
    
    Similar to fl_fit_object_label, but will do it for all objects and has
    a smaller threshold. Mainly intended for compensation for font size
    variations.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form whose size has to be adjusted

    Returns
    -------
        maxfact : float
            max factor id

    Examples
    --------
        >>> mfactor = fl_adjust_form_size(pform)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_adjust_form_size = library.cfuncproto(
        library.load_so_libforms(), "fl_adjust_form_size", \
        cty.c_double, [cty.POINTER(xfdata.FL_FORM)], \
        """double fl_adjust_form_size(FL_FORM * form) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlForm)
    retval = _fl_adjust_form_size(pFlForm)
    return retval


def fl_form_is_visible(pFlForm):
    """fl_form_is_visible(pFlForm)
    
    Obtains if form is visible or not.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form to evaluate

    Returns
    -------
        vstate : int
            visibility state (0 invisible, non-zero visible)

    Examples
    --------
        >>> visib = fl_form_is_visible(pform)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_form_is_visible = library.cfuncproto(
        library.load_so_libforms(), "fl_form_is_visible", \
        cty.c_int, [cty.POINTER(xfdata.FL_FORM)], \
        """int fl_form_is_visible(FL_FORM * form) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlForm)
    retval = _fl_form_is_visible(pFlForm)
    return retval


def fl_form_is_iconified(pFlForm):
    """fl_form_is_iconified(pFlForm)
    
    Tells if a form's window is in iconified state or not.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form to evaluate

    Returns
    -------
        istate : int
            iconic state (0 not iconified, non-zero iconified)

    Examples
    --------
        >>> iconif = fl_form_is_iconified(pform)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_form_is_iconified = library.cfuncproto(
        library.load_so_libforms(), "fl_form_is_iconified", \
        cty.c_int, [cty.POINTER(xfdata.FL_FORM)], \
        """int fl_form_is_iconified(FL_FORM * form) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlForm)
    retval = _fl_form_is_iconified(pFlForm)
    return retval


def fl_register_raw_callback(pFlForm, mask, py_RawCallback):
    """fl_register_raw_callback(pFlForm, mask, py_RawCallback)
    
    Registers preemptive event handlers. Only one handler is allowed
    for each event pair.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form
          mask : long_pos
            key/button/window event mask (press, release, motion, enter, leave
            etc..). Values (from xfdata.py) i.e. KeyPressMask and
            KeyReleaseMask, ButtonPressMask and ButtonReleaseMask,
            EnterWindowMask and LeaveWindowMask, ButtonMotionMask and
            PointerMotionMask, FL_ALL_EVENT
        py_RawCallback : python callback function, with return value
            name referring to function(pFlForm, pXEvent) -> num

    Returns
    -------
        RawCallback : xfdata.FL_RAW_CALLBACK
            old xfdata.FL_RAW_CALLBACK function

    Examples
    --------
        >>> def rawcb(pform, xev):
        >>> ... <something>
        >>> ... return 0
        >>> oldrawcb = fl_register_callback(pform3, xfdata.KeyPressMask,
                rawcb)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    #FL_RAW_CALLBACK = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_FORM), \
    #                                 cty.POINTER(xfdata.XEvent))
    _fl_register_raw_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_register_raw_callback", \
        xfdata.FL_RAW_CALLBACK, [cty.POINTER(xfdata.FL_FORM), cty.c_ulong,
        xfdata.FL_RAW_CALLBACK], \
        """FL_RAW_CALLBACK fl_register_raw_callback(FL_FORM * form,
           long unsigned int mask, FL_RAW_CALLBACK rcb) """)
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    ulmask = library.convert_to_ulong(mask)
    library.verify_function_type(py_RawCallback)
    c_RawCallback = xfdata.FL_RAW_CALLBACK(py_RawCallback)
    library.keep_cfunc_refs(c_RawCallback, py_RawCallback)
    library.keep_elem_refs(pFlForm, mask, ulmask)
    retval = _fl_register_raw_callback(pFlForm, ulmask, c_RawCallback)
    return retval


fl_register_call_back = fl_register_raw_callback


def fl_bgn_group():
    """fl_bgn_group()
    
    Starts a group of objects definition. Its purpose can be e.g. to define
    a series of objects to be hidden or deactivated or to define a series of
    radio buttons.


    Returns
    -------
        pFlObject : pointer to xfdata.FL_OBJECT
            group started

    Examples
    --------
        >>> group0 = fl_bgn_group()

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_bgn_group = library.cfuncproto(
        library.load_so_libforms(), "fl_bgn_group", \
        cty.POINTER(xfdata.FL_OBJECT), [], \
        """FL_OBJECT * fl_bgn_group() """)
    library.check_if_initialized()
    retval = _fl_bgn_group()
    return retval


def fl_end_group():
    """fl_end_group()
    
    Ends a group definition (started with fl_bgn_group()).

    Examples
    --------
        >>> fl_end_group()

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_end_group = library.cfuncproto(
        library.load_so_libforms(), "fl_end_group", \
        None, [], \
        """void fl_end_group() """)
    library.check_if_initialized()
    _fl_end_group()


def fl_addto_group(pFlObject):
    """fl_addto_group(pFlObject)
    
    Reopens a group (after fl_end_group) to allow addition of further
    objects.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            group object to reopen

    Returns
    -------
        pFlForm : pointer to xfdata.FL_FORM
            form (pFlForm) or None (on failure)

    Examples
    --------
        >>> group1 = fl_addto_group(closedgroup)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_addto_group = library.cfuncproto(
        library.load_so_libforms(), "fl_addto_group", \
        cty.POINTER(xfdata.FL_OBJECT), [cty.POINTER(xfdata.FL_OBJECT)], \
        """FL_OBJECT * fl_addto_group(FL_OBJECT * group) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_addto_group(pFlObject)
    return retval


# Routines that deal with FL_OBJECTS

def fl_get_object_objclass(pFlObject):
    """fl_get_object_objclass(pFlObject)
    
    Return the object class of an object. (e.g. button, lightbutton, box,
    nmenu, counter, etc.)

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        objcls : int
            objclass id, or -1 (on failure)

    Examples
    --------
        >>> obcls = fl_get_object_objclass(pobj)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_objclass = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_objclass", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_get_object_objclass(FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_objclass(pFlObject)
    return retval


def fl_get_object_type(pFlObject):
    """fl_get_object_type(pFlObject)
    
    Return the type of an object (e.g. radio button, multiline input,
    normal browser, etc..).

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        typeid : int
            type id, or -1 (on failure)

    Examples
    --------
        >>> obtype = fl_get_object_type(pobj)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_type = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_type", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_get_object_type(FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_type(pFlObject)
    return retval


def fl_set_object_boxtype(pFlObject, boxtype):
    """fl_set_object_boxtype(pFlObject, boxtype)
    
    Sets the shape of box of an object. Not all possible boxtypes are
    suitable for all types of objects.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object whose boxtype has to be set
        boxtype : int
            type of the box to be set. Values (from xfdata.py) FL_NO_BOX,
            FL_UP_BOX, FL_DOWN_BOX, FL_BORDER_BOX, FL_SHADOW_BOX, FL_FRAME_BOX,
            FL_ROUNDED_BOX, FL_EMBOSSED_BOX, FL_FLAT_BOX, FL_RFLAT_BOX,
            FL_RSHADOW_BOX, FL_OVAL_BOX, FL_ROUNDED3D_UPBOX,
            FL_ROUNDED3D_DOWNBOX, FL_OVAL3D_UPBOX, FL_OVAL3D_DOWNBOX,
            FL_OVAL3D_FRAMEBOX, FL_OVAL3D_EMBOSSEDBOX

    Examples
    --------
        >>> fl_set_object_boxtype(ptextobj, xfdata.FL_BORDER_BOX)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_object_boxtype = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_boxtype", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_set_object_boxtype(FL_OBJECT * ob, int boxtype) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checkfatal_allowed_value_in_list(boxtype, xfdata.BOXTYPE_list)
    iboxtype = library.convert_to_int(boxtype)
    library.keep_elem_refs(pFlObject, boxtype, iboxtype)
    _fl_set_object_boxtype(pFlObject, iboxtype)


def fl_get_object_boxtype(pFlObject):
    """fl_get_object_boxtype(pFlObject)
    
    Obtains the current boxtype of an object (e.g. no box, up box,
    shadow box, etc..).

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        typeid : int
            boxtype id or -1 (on failure)

    Examples
    --------
        >>> boxtp = fl_get_object_boxtype(ptextobj)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_boxtype = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_boxtype", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_get_object_boxtype(FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_boxtype(pFlObject)
    return retval


def fl_set_object_bw(pFlObject, bw):
    """fl_set_object_bw(pFlObject, bw)
    
    Sets the borderwidth of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
        bw : int
            borderwidth of object to be set. If it is 0, -1 is used; if it is a
            negative number, all objects appear to have a softer appearance.

    Examples
    --------
        >>> fl_set_object_bw(pobj, 2)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_object_bw = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_bw", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_set_object_bw(FL_OBJECT * ob, int bw) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    ibw = library.convert_to_int(bw)
    library.keep_elem_refs(pFlObject, bw, ibw)
    _fl_set_object_bw(pFlObject, ibw)


def fl_get_object_bw(pFlObject):
    """fl_get_object_bw(pFlObject)
    
    Obtains the borderwidth of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        bw : int
            borderwidth (bw)

    Examples
    --------
        >>> currbw = fl_get_object_bw(pobj)

    API_diversion
    ----------
        API changed from XForms, upstream was fl_get_object_bw(pFlObject, bw)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_bw = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_bw", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_int)], \
        """void fl_get_object_bw(FL_OBJECT * ob, int * bw) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    bw, pbw = library.make_int_and_pointer()
    library.keep_elem_refs(pFlObject, bw, pbw)
    _fl_get_object_bw(pFlObject, pbw)
    return bw.value


def fl_set_object_resize(pFlObject, what):
    """fl_set_object_resize(pFlObject, what)
    
    Sets the resize property of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to set
        what : int_pos
            resize property. Values (from xfdata.py) FL_RESIZE_NONE,
            FL_RESIZE_X, FL_RESIZE_Y, FL_RESIZE_ALL

    Examples
    --------
        >>> fl_set_object_resize(pobj, xfdata.FL_RESIZE_ALL)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_object_resize = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_resize", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint], \
        """void fl_set_object_resize(FL_OBJECT * ob, unsigned int what) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checkfatal_allowed_value_in_list(what, xfdata.RESIZE_list)
    uiwhat = library.convert_to_uint(what)
    library.keep_elem_refs(pFlObject, what, uiwhat)
    _fl_set_object_resize(pFlObject, uiwhat)


def fl_get_object_resize(pFlObject):
    """fl_get_object_resize(pFlObject)
    
    Obtains the resize property of an object (e.g. resize all, resize
    none, etc..).

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        rprop : int_pos
            resize property

    Examples
    --------
        >>> reszprop = fl_get_object_resize(pobj)

    API_diversion
    ----------
        API changedfrom XForms, upstream was
        fl_get_object_resize(pFlObject, what)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_resize = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_resize", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_uint)], \
        """void fl_get_object_resize(FL_OBJECT * ob,
           unsigned int * what) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    what, pwhat = library.make_uint_and_pointer()
    library.keep_elem_refs(pFlObject, what, pwhat)
    _fl_get_object_resize(pFlObject, pwhat)
    return what.value


def fl_set_object_gravity(pFlObject, nw, se):
    """fl_set_object_gravity(pFlObject, nw, se)
    
    Sets the gravity properties of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to be set
        nw : int_pos
            gravity property for NorthWest. Values (from xfdata.py)
            FL_North, FL_NorthEast, FL_NorthWest, FL_South, FL_SouthEast,
            FL_SouthWest, FL_East, FL_West, FL_NoGravity, FL_ForgetGravity
        se : int_pos
            gravity property for SouthEast. Values (from xfdata.py)
            FL_North, FL_NorthEast, FL_NorthWest, FL_South, FL_SouthEast,
            FL_SouthWest, FL_East, FL_West, FL_NoGravity, FL_ForgetGravity

    Examples
    --------
        >>> fl_set_object_gravity(pobj, xfdata.FL_North, xfdata.FL_East)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_object_gravity = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_gravity", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint, cty.c_uint], \
        """void fl_set_object_gravity(FL_OBJECT * ob, unsigned int nw,
           unsigned int se) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checkfatal_allowed_value_in_list(nw, xfdata.GRAVITY_list)
    library.checkfatal_allowed_value_in_list(se, xfdata.GRAVITY_list)
    uinw = library.convert_to_uint(nw)
    uise = library.convert_to_uint(se)
    library.keep_elem_refs(pFlObject, nw, uinw, se, uise)
    _fl_set_object_gravity(pFlObject, uinw, uise)


def fl_get_object_gravity(pFlObject):
    """fl_get_object_gravity(pFlObject)
    
    Obtains the NorthWest and SouthEast gravity properties of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to set

    Returns
    -------
        nwgrav : int_pos
            NorthWest gravity
        segrav : int_pos
            SouthEast gravity


    Examples
    --------
        >>> nowe, soea = fl_get_object_gravity(pobj)

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_object_gravity(pFlObject, nw, se)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_gravity = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_gravity", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_uint),
        cty.POINTER(cty.c_uint)], \
        """void fl_get_object_gravity(FL_OBJECT * ob,
           unsigned int * nw, unsigned int * se) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    nw, pnw = library.make_uint_and_pointer()
    se, pse = library.make_uint_and_pointer()
    library.keep_elem_refs(pFlObject, nw, se, pnw, pse)
    _fl_get_object_gravity(pFlObject, pnw, pse)
    return nw.value, se.value


def fl_set_object_lsize(pFlObject, size):
    """fl_set_object_lsize(pFlObject, size)
    
    Sets the label size of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to be set
          size : int
            label size. Values (from xfdata.py) FL_TINY_SIZE, FL_SMALL_SIZE,
            FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE, FL_HUGE_SIZE,
            FL_DEFAULT_SIZE

    Examples
    --------
        >>> fl_set_object_lsize(pobj, xfdata.FL_MEDIUM_SIZE)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_object_lsize = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_lsize", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_set_object_lsize(FL_OBJECT * ob, int lsize) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checknonfatal_allowed_value_in_list(size, xfdata.FONTSIZE_list)
    isize = library.convert_to_int(size)
    library.keep_elem_refs(pFlObject, size, isize)
    _fl_set_object_lsize(pFlObject, isize)


def fl_get_object_lsize(pFlObject):
    """fl_get_object_lsize(pFlObject)
    
    Obtains the label size of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        lsize : int
            label size

    Examples
    --------
        >>> lsize = fl_get_object_lsize(pobj)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_get_object_lsize = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_lsize", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_get_object_lsize(FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_lsize(pFlObject)
    return retval


def fl_set_object_lstyle(pFlObject, style):
    """fl_set_object_lstyle(pFlObject, style)
    
    Sets the label style of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to be set
        style : int
            label style. Values (from xfdata.py) FL_NORMAL_STYLE,
            FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE,
            FL_FIXED_STYLE, FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE,
            FL_FIXEDBOLDITALIC_STYLE, FL_TIMES_STYLE, FL_TIMESBOLD_STYLE,
            FL_TIMESITALIC_STYLE, FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE,
            FL_MISCBOLD_STYLE, FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE,
            FL_SHADOW_STYLE, FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE

    Examples
    --------
        >>> fl_set_object_lstyle(pobj, xfdata.FL_TIMESITALIC_STYLE)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_object_lstyle = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_lstyle", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_set_object_lstyle(FL_OBJECT * ob, int lstyle) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    istyle = library.convert_to_int(style)
    library.keep_elem_refs(pFlObject, style, istyle)
    _fl_set_object_lstyle(pFlObject, istyle)


def fl_get_object_lstyle(pFlObject):
    """fl_get_object_lstyle(pFlObject)
    
    Obtains the label style of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        lstyle : int
            label style (e.g. xfdata.FL_BOLD_STYLE,
            xfdata.FL_NORMAL_STYLE, etc..)

    Examples
    --------
        >>> lstyle = fl_get_object_lstyle(pobj)

    Notes
    -----
        Status: Tested + NoDoc + Demo = OK

    """
    _fl_get_object_lstyle = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_lstyle", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_get_object_lstyle(FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_lstyle(pFlObject)
    return retval


def fl_set_object_lcol(pFlObject, colr):
    """fl_set_object_lcol(pFlObject, colr)
    
    Sets the label color of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to be set
        colr : long_pos
            label color. Values (from xfdata.py) one of defined colors
            FL_BLACK, ... FL_BLUE, ... FL_GREEN, ... FL_RED, ... etc..

    Examples
    --------
        >>> fl_set_object_lcol(pobj, xfdata.FL_BLUE)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_object_lcol = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_lcol", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_COLOR], \
        """void fl_set_object_lcol(FL_OBJECT * ob, FL_COLOR lcol) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(pFlObject, colr, ulcolr)
    _fl_set_object_lcol(pFlObject, ulcolr)


fl_set_object_lcolor = fl_set_object_lcol


def fl_get_object_lcol(pFlObject):
    """fl_get_object_lcol(pFlObject)
    
    Obtains the label color of an object (from xfdata, e.g. FL_WHITE,
    FL_LIME, etc..).

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        colr : long_pos
            color value

    Examples
    --------
        >>> obcolor = fl_get_object_lcol(pobj)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_lcol = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_lcol", \
        xfdata.FL_COLOR, [cty.POINTER(xfdata.FL_OBJECT)], \
        """FL_COLOR fl_set_object_lcol(FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_lcol(pFlObject)
    return retval


def fl_set_object_return(pFlObject, when):
    """fl_set_object_return(pFlObject, when)
    
    Sets the conditions under which an object gets returned (or its callback
    invoked). If the object has to do additional work on setting te condition
    (e.g. it has child objects that also need to be set) it has to set up it is
    own function that then will called in the end. This should only be called
    once an object has been created completely! Not all return types make
    sense for all objects.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
        when : int_pos
            return type (when it returns). Values (from xfdata.py)
            FL_RETURN_NONE, FL_RETURN_CHANGED, FL_RETURN_END,
            FL_RETURN_END_CHANGED, FL_RETURN_SELECTION, FL_RETURN_DESELECTION,
            FL_RETURN_TRIGGERED, FL_RETURN_ALWAYS

    Returns
    -------
        rtypeid : int
            old return type id

    Examples
    --------
        >>> fl_set_object_return(pobj, xfdata.FL_RETURN_CHANGED)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_object_return = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_return", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint], \
        """int fl_set_object_return(FL_OBJECT * ob, unsigned int when) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checkfatal_allowed_value_in_list(when, xfdata.RETURN_list)
    uiwhen = library.convert_to_uint(when)
    library.keep_elem_refs(pFlObject, when, uiwhen)
    retval = _fl_set_object_return(pFlObject, uiwhen)
    return retval


# TODO: verify what its purpose is.
def fl_notify_object(pFlObject, cause):
    """fl_notify_object(pFlObject, cause)
    
    *todo*

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
        cause : int
            cause for notification. Values (from xfdata.py) FL_ATTRIB,
            FL_RESIZED, FL_MOVEORIGIN

    Examples
    --------
        >>> fl_notify_object(pobj5, xfdata.FL_RESIZED)

    Notes
    -----
        Status: Tested + NoDoc + NoDemo = NOT OK (not clear purpose)

    """
    _fl_notify_object = library.cfuncproto(
        library.load_so_libforms(), "fl_notify_object", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_notify_object(FL_OBJECT * obj, int cause) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checkfatal_allowed_value_in_list(cause, xfdata.EVENTS_list)
    icause = library.convert_to_int(cause)
    library.keep_elem_refs(pFlObject, cause, icause)
    _fl_notify_object(pFlObject, icause)


def fl_set_object_lalign(pFlObject, align):
    """fl_set_object_lalign(pFlObject, align)
    
    Sets alignment of an object's label.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to be set
        align : int
            alignment of label. Values (from xfdata.py) FL_ALIGN_CENTER,
            FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
            FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP, FL_ALIGN_LEFT_BOTTOM,
            FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE, FL_ALIGN_VERT.
            Bitwise OR with FL_ALIGN_INSIDE is allowed.

    Examples
    --------
        >>> fl_set_object_lalign(pobj8, xfdata.FL_ALIGN_RIGHT)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_object_lalign = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_lalign", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_set_object_lalign(FL_OBJECT * ob, int align) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checkfatal_allowed_value_in_list(align, xfdata.ALIGN_list)
    ialign = library.convert_to_int(align)
    library.keep_elem_refs(pFlObject, align, ialign)
    _fl_set_object_lalign(pFlObject, ialign)


def fl_get_object_lalign(pFlObject):
    """fl_get_object_lalign(pFlObject)
    
    Obtains alignment of an object's label.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to be set

    Returns
    -------
        align : int
            alignment (from xfdata, e.g. FL_ALIGN_LEFT, FL_ALIGN_RIGHT_TOP,
            etc..)

    Examples
    --------
        >>> obalign = fl_get_object_lalign(pobj8)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_get_object_lalign = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_lalign", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_set_object_lalign(FL_OBJECT * ob) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_lalign(pFlObject)
    return retval


fl_set_object_align = fl_set_object_lalign


def fl_set_object_shortcut(pFlObject, shctxt, showit):
    """fl_set_object_shortcut(pFlObject, shctxt, showit)
    
    Sets a shortcut, binding a key or a series of keys to an object. It
    resets any previous defined shortcuts for the object. Using e.g. "acE#d^h"
    the keys 'a', 'c', 'E', <Alt>d and <Ctrl>h are associated with the object.
    The precise format is as follows: any character in the string is considered
    as a shortcut, except '^' and '#', which stand for combinations with the
    <Ctrl> and <Alt> keys; the case of the key following '#' or '^' is not
    important, i.e. no distinction is made between e.g. "^C" and "^c", both
    encode the key combination <Ctrl>C as well as <Ctrl>C.) The key '^' itself
    can be set as a shortcut key by using "^^" in the string defining the
    shortcut. The key '#' can be obtained as a shortcut by using the string
    "^#". So, e.g. "#^#" encodes <ALT>#. The <Esc> key can be given as "^[".
    Another special character not mentioned yet is '&', which indicates
    function and arrow keys. Use a sequence starting with '&' and directly
    followed by a number between 1 and 35 to represent one of the function
    keys. For example, "&2" stands for the <F2> function key. The four cursors
    keys (up, down, right, and left) can be given as "&A", "&B", "&C" and "&D",
    respectively. The key '&' itself can be obtained as a shortcut by
    prefixing it with '^'.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
        shctxt : str
            shortcut text to be set
        showit : int
            flag if shortcut letter has to be underlined or not if a match
            exists (only the 1st alphanumeric character is used). Values 0
            (underline not shown) or 1 (shown)

    Examples
    --------
        >>> fl_set_object_shortcut(pobj6, "aA#A^A", 1)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_object_shortcut = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_shortcut", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING, cty.c_int], \
        """void fl_set_object_shortcut(FL_OBJECT * obj,
           const char * sstr, int showit) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    sshctxt = library.convert_to_string(shctxt)
    ishowit = library.convert_to_int(showit)
    library.keep_elem_refs(pFlObject, shctxt, sshctxt, showit, ishowit)
    _fl_set_object_shortcut(pFlObject, sshctxt, ishowit)


def fl_set_object_shortcutkey(pFlObject, keysym):
    """fl_set_object_shortcutkey(pFlObject, keysym)
    
    Uses a special key as a shortcut. It always appends the specified key
    to the current shortcuts. Special keys cannot be underlined.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
        keysym : int_pos
            X key symbolic num. See xfdata.py for a (maybe) incomplete list

    Examples
    --------
        >>> fl_set_object_shortcutkey(pobj, xfdata.XK_Home)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_object_shortcutkey = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_shortcutkey",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint], \
        """void fl_set_object_shortcutkey(FL_OBJECT * obj,
           unsigned int keysym) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    uikeysym = library.convert_to_uint(keysym)
    library.keep_elem_refs(pFlObject, keysym, uikeysym)
    _fl_set_object_shortcutkey(pFlObject, uikeysym)


def fl_set_object_dblbuffer(pFlObject, yesno):
    """fl_set_object_dblbuffer(pFlObject, yesno)
    
    Uses double buffering on a per-object basis. Currently double buffering
    for objects having a non-rectangular box might not work well. A
    nonrectangular box means that there are regions within the bounding box
    that should not be painted, which is not easily done without complex and
    expensive clipping and unacceptable inefficiency. Since Xlib does not
    support double buffering, XForms library simulates this functionality with
    pixmap bit-bliting. In practice, the effect is hardly distinguishable from
    double buffering and performance is on par with multi-buffering extensions
    (it is slower than drawing into a window directly on most workstations
    however). Bear in mind that a pixmap can be resource hungry, so use this
    option with discretion.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
        yesno : int
            flag to disable/enable double buffer. Values 0 (disabled) or 1
            (enabled)

    Examples
    --------
        >>> fl_set_object_dblbuffer(pobj7, 1)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_object_dblbuffer = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_dblbuffer", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_set_object_dblbuffer(FL_OBJECT * ob, int y) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iyesno = library.convert_to_int(yesno)
    library.keep_elem_refs(pFlObject, yesno, iyesno)
    _fl_set_object_dblbuffer(pFlObject, iyesno)


def fl_set_object_color(pFlObject, fgcolr, bgcolr):
    """fl_set_object_color(pFlObject, fgcolr, bgcolr)
    
    Sets the color of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
        fgcolr : long_pos
            foreground color value
        bgcolr : long_pos
            background color value

    Examples
    --------
        >>> fl_set_object_color(pbutob7, xfdata.FL_AQUA, xfdata.FL_WHEAT)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_object_color = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_color", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_COLOR,
        xfdata.FL_COLOR],
        """void fl_set_object_color(FL_OBJECT * ob, FL_COLOR col1,
           FL_COLOR col2) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.checknonfatal_allowed_value_in_list(fgcolr, xfdata.COLOR_list)
    library.checknonfatal_allowed_value_in_list(bgcolr, xfdata.COLOR_list)
    ulfgcolr = library.convert_to_FL_COLOR(fgcolr)
    ulbgcolr = library.convert_to_FL_COLOR(bgcolr)
    library.keep_elem_refs(pFlObject, fgcolr, ulfgcolr, bgcolr, ulbgcolr)
    _fl_set_object_color(pFlObject, ulfgcolr, ulbgcolr)


def fl_get_object_color(pFlObject):
    """fl_get_object_color(pFlObject)
    
    Obtains the foreground and background colors of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object

    Returns
    -------
        fgcolr : long_pos
            foreground color value (colr)
        bgcolr : long_pos
            background color value (colr)

    Examples
    --------
        >>> primcol, secncol = fl_get_object_color(pobj)

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_set_object_color(pFlObject, fgcolr, bgcolr)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_get_object_color = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_color", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_COLOR), \
        cty.POINTER(xfdata.FL_COLOR)], \
        """void fl_get_object_color(FL_OBJECT * ob, FL_COLOR * col1,
           FL_COLOR * col2)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    fgcolr, pfgcolr = library.make_FL_COLOR_and_pointer()
    bgcolr, pbgcolr = library.make_FL_COLOR_and_pointer()
    library.keep_elem_refs(pFlObject, fgcolr, pfgcolr, bgcolr, pbgcolr)
    _fl_get_object_color(pFlObject, pfgcolr, pbgcolr)
    return fgcolr.value, bgcolr.value


def fl_set_object_label(pFlObject, label):
    """fl_set_object_label(pFlObject, label)
    
    Sets the label of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
        label : str
            text label of object

    Examples
    --------
        >>> fl_set_object_label(pobj, "My New Label")

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_object_label = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_label", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING], \
        """void fl_set_object_label(FL_OBJECT * ob, const char * label) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(pFlObject, label, slabel)
    _fl_set_object_label(pFlObject, slabel)


def fl_get_object_label(pFlObject):
    """fl_get_object_label(pFlObject)
    
    Obtains the label of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object

    Returns
    -------
        label : str
            text of label

    Examples
    --------
        >>> currlbl = fl_get_object_label(pobj)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_get_object_label = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_label", \
        xfdata.STRING, [cty.POINTER(xfdata.FL_OBJECT)], \
        """const char * fl_set_object_label(FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_label(pFlObject)
    return retval


def fl_set_object_helper(pFlObject, tip):
    """fl_set_object_helper(pFlObject, tip)
    
    Sets the tooltip of an object (with possible embedded newlines in it)
    that will be shown when the mouse hovers over the object for more than
    about 600 msec.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
          tip : str
            tooltip text for object

    Examples
    --------
        >>> fl_set_object_helper(pobj, "Button to exit the procedure.")

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_object_helper = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_helper", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING], \
        """void fl_set_object_helper(FL_OBJECT * ob, const char * tip)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    stip = library.convert_to_string(tip)
    library.keep_elem_refs(pFlObject, tip, stip)
    _fl_set_object_helper(pFlObject, stip)


def fl_set_object_position(pFlObject, x, y):
    """fl_set_object_position(pFlObject, x, y)
    
    Sets position of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
        x : int
            horizontal position (upper-left corner)
        y : int
            vertical position (upper-left corner)

    Examples
    --------
        >>> fl_set_object_position(pobj, 235, 123)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_object_position = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_position", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_Coord,
        xfdata.FL_Coord], \
        """void fl_set_object_position(FL_OBJECT * obj, FL_Coord x,
           FL_Coord y)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    library.keep_elem_refs(pFlObject, x, ix, y, iy)
    _fl_set_object_position(pFlObject, ix, iy)


def fl_get_object_size(pFlObject):
    """fl_get_object_size(pFlObject)
    
    Obtains the size of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        w : int
            width in coord units
        h : int
            height in coord units

    Examples
    --------
        >>> wid, hei = fl_get_object_size(pobj)

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_object_size(pFlObject, w, h)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_size = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_size", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_Coord),
        cty.POINTER(xfdata.FL_Coord)], \
        """void fl_get_object_size(FL_OBJECT * obj, FL_Coord * w,
           FL_Coord * h)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    w, pw = library.make_FL_Coord_and_pointer()
    h, ph = library.make_FL_Coord_and_pointer()
    library.keep_elem_refs(pFlObject, w, h, pw, ph)
    _fl_get_object_size(pFlObject, pw, ph)
    return w.value, h.value


def fl_set_object_size(pFlObject, w, h):
    """fl_set_object_size(pFlObject, w, h)
    
    Sets the size of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
        w : int
            width of object in coord units
        h : int
            height of object in coord units

    Examples
    --------
        >>> fl_set_object_size(pobj, 90, 35)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_object_size = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_size", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_Coord,
        xfdata.FL_Coord], \
        """void fl_set_object_size(FL_OBJECT * obj, FL_Coord w,
           FL_Coord h)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    library.keep_elem_refs(pFlObject, w, iw, h, ih)
    _fl_set_object_size(pFlObject, iw, ih)


def fl_set_object_automatic(pFlObject, yesno):
    """fl_set_object_automatic(pFlObject, yesno)
    
    Enables or disables an object to receive a xfdata.FL_STEP event. This
    should not be used with built-in objects. An object is automatic if it
    automatically (without user actions) has to change its contents. Automatic
    objects get a FL_STEP event about every 50 msec.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
        yesno : int
            flag if automatic or not. Values 0 (not automatic) or 1 (automatic)

    Examples
    --------
        >>> fl_set_object_automatic(pMyobj, 1)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_object_automatic = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_automatic",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_set_object_automatic(FL_OBJECT * ob, int flag)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iyesno = library.convert_to_int(yesno)
    library.keep_elem_refs(pFlObject, yesno, iyesno)
    _fl_set_object_automatic(pFlObject, iyesno)


def fl_object_is_automatic(pFlObject):
    """fl_object_is_automatic(pFlObject)
    
    Tells if an object receives xfdata.FL_STEP events. An object is automatic
    if it automatically (without user actions) has to change its contents.
    Automatic objects get a xfdata.FL_STEP event about every 50 msec.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        flag : int
            flag if it is automatic (1) or not (0)

    Examples
    --------
        >>> if fl_object_is_automatic(pMyobj):
        >>> ... <something>

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_object_is_automatic = library.cfuncproto(
        library.load_so_libforms(), "fl_object_is_automatic",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_object_is_automatic(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_object_is_automatic(pFlObject)
    return retval


def fl_draw_object_label(pFlObject):
    """fl_draw_object_label(pFlObject)
    
    Draws the label according to the alignment, which could be inside
    or outside of the bounding box.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object

    Examples
    --------
        >>> fl_draw_object_label(pobj3)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_draw_object_label = library.cfuncproto(
        library.load_so_libforms(), "fl_draw_object_label", \
        None, [cty.POINTER(xfdata.FL_OBJECT)], \
        """void fl_draw_object_label(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_draw_object_label(pFlObject)


def fl_draw_object_label_outside(pFlObject):
    """fl_draw_object_label_outside(pFlObject)
    
    Draws the label outside of the bounding box.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object

    Examples
    --------
        >>> fl_draw_object_label_outside(pobj3)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_draw_object_label_outside = library.cfuncproto(
        library.load_so_libforms(), "fl_draw_object_label_outside",
        None, [cty.POINTER(xfdata.FL_OBJECT)], \
        """void fl_draw_object_label_outside(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_draw_object_label_outside(pFlObject)


fl_draw_object_outside_label = fl_draw_object_label_outside


def fl_get_object_component(pFlObject, objclass, compontype, seqnum):
    """fl_get_object_component(pFlObject, objclass, compontype, seqnum)
    
    Obtains the object that is a component of a composite object. E.g. the
    scrollbar object is made of a slider and two scroll buttons.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            composite object
        objclass : int
            component object's class id
        compontype : int
            component object's type id
        seqnum : int
            the sequence number of the desired object in case the composite
            has more than one object of the same class and type. -1 to
            indicate any type of specified class

    Returns
    -------
        pFlObject : pointer to xfdata.FL_OBJECT
            component object or None (no object found)

    Examples
    --------
        >>> fl_get_object_component(browserobj, xfdata.FL_SCROLLBAR,
                xfdata.FL_HOR_THIN_SCROLLBAR, 0)

    Notes
    -----
        Status: Untested + Doc + NoDemo = NOT OK

    """
    _fl_get_object_component = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_component",
        cty.POINTER(xfdata.FL_OBJECT), [cty.POINTER(xfdata.FL_OBJECT),
        cty.c_int, cty.c_int, cty.c_int], \
        """FL_OBJECT * fl_get_object_component(FL_OBJECT * composite,
           int objclass, int type, int numb)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    iobjclass = library.convert_to_int(objclass)
    icompontype = library.convert_to_int(compontype)
    iseqnum = library.convert_to_int(seqnum)
    library.keep_elem_refs(pFlObject, objclass, iobjclass, compontype, \
                        icompontype, seqnum, iseqnum)
    retval = _fl_get_object_component(pFlObject, iobjclass, icompontype,
                                      iseqnum)
    return retval


def fl_for_all_objects(pFlForm, py_operatecb, vdata):
    """fl_for_all_objects(pFlForm, py_operatecb, vdata)
    
    Serves as an iterator to change an attribute for all objects on a
    particular form. Specified operating function is called for every object
    of the form form unless it returns nonzero, which terminates the iterator.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form
        py_operatecb : python callback function, returned value
            name referring to function(pFlObject, vdata) -> num
        vdata : any type (e.g. 'None', int, str, etc..)
            user data to be passed to function; callback has to take care of
            type check

    Examples
    --------
        >>> def operatecb(pobj, vdata):
        >>> ... <something>
        >>> return 0
        >>> fl_for_all_objects(pform5, operatecb, None)

    Notes
    -----
        Status: Untested + Doc + NoDemo = NOT OK

    """
    # cfunc_int_pobject_pvoid = cty.CFUNCTYPE(cty.c_int,
    #                  cty.POINTER(xfdata.FL_OBJECT), cty.c_void_p)
    _fl_for_all_objects = library.cfuncproto(
        library.load_so_libforms(), "fl_for_all_objects", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.cfunc_int_pobject_pvoid, \
        cty.c_void_p], \
        """void fl_for_all_objects(FL_FORM * form, int ( * cb ) \
           ( FL_OBJECT *, void * ), void * v)""")
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.verify_function_type(py_operatecb)
    c_operatecb = xfdata.cfunc_int_pobject_pvoid(py_operatecb)
    pvdata = cty.cast(vdata, cty.c_void_p)
    library.keep_cfunc_refs(c_operatecb, py_operatecb)
    library.keep_elem_refs(pFlForm, vdata, pvdata)
    _fl_for_all_objects(pFlForm, c_operatecb, pvdata)


def fl_set_object_dblclick(pFlObject, timeout):
    """fl_set_object_dblclick(pFlObject, timeout)
    
    Sets double click timeout value of an object, enabling or disabling it
    to receive the xfdata.FL_DBLCLICK event.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
        timeout : long_pos
            maximum time interval (in msec) between two clicks for them to be
            considered a double-click. If it is 0 disables double-click
            detection.

    Examples
    --------
        >>> fl_set_object_dblclick(pobj, 750)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_object_dblclick = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_dblclick", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_ulong], \
        """void fl_set_object_dblclick(FL_OBJECT *obj, unsigned \
           long timeout)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    ultimeout = library.convert_to_ulong(timeout)
    library.keep_elem_refs(pFlObject, timeout, ultimeout)
    _fl_set_object_dblclick(pFlObject, ultimeout)


def fl_get_object_dblclick(pFlObject):
    """fl_get_object_dblclick(pFlObject)
    
    Return double click timeout value of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        timeout : long_pos
            timeout value

    Examples
    --------
        >>> dctim = fl_get_object_dblclick(pobj0)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_dblclick = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_dblclick", \
        cty.c_ulong, [cty.POINTER(xfdata.FL_OBJECT)], \
        """unsigned long fl_get_object_dblclick(FL_OBJECT *obj)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_dblclick(pFlObject)
    return retval


def fl_set_object_geometry(pFlObject, x, y, w, h):
    """fl_set_object_geometry(pFlObject, x, y, w, h)
    
    Sets the geometry (position and size) of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to modify
        x : int
            horizontal position (upper-left corner)
        y : int
            vertical position (upper-left corner)
        w : int
            width in coord units
        h : int
            height in coord units

    Examples
    --------
        >>> fl_set_object_geometry(pobj, 200, 250, 120, 25)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_object_geometry = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_geometry", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord], \
        """void fl_set_object_geometry(FL_OBJECT * obj, FL_Coord x,
        FL_Coord y, FL_Coord w, FL_Coord h)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    library.keep_elem_refs(pFlObject, x, ix, y, iy, w, iw, h, ih)
    _fl_set_object_geometry(pFlObject, ix, iy, iw, ih)


def fl_move_object(pFlObject, x, y):
    """fl_move_object(pFlObject, x, y)
    
    Moves an object to a new position.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to be moved
        x : int
            new horizontal position (upper-left corner)
        y : int
            new vertical position (upper-left corner)

    Examples
    --------
        >>> fl_move_object(pobj0, 120, 380)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_move_object = library.cfuncproto(
        library.load_so_libforms(), "fl_move_object", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_Coord,
        xfdata.FL_Coord], \
        """void fl_move_object(FL_OBJECT * obj, FL_Coord dx,
           FL_Coord dy)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    ix = library.convert_to_int(x)
    iy = library.convert_to_int(y)
    library.keep_elem_refs(pFlObject, x, ix, y, iy)
    _fl_move_object(pFlObject, ix, iy)


def fl_fit_object_label(pFlObject, xmargin, ymargin):
    """fl_fit_object_label(pFlObject, xmargin, ymargin)
    
    Checks if the label of an object fits into it (after x- and y-margin
    have been added). If not, all objects and the form are enlarged by the
    necessary factor (but never by more than a factor of 1.5).

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
        xmargin : int
            horizontal margin of label in coord units
        ymargin : int
            vertical margin of label in coord units

    Examples
    --------
        >>> fl_fit_object_label(pobj2, 10, 10)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_fit_object_label = library.cfuncproto(
        library.load_so_libforms(), "fl_fit_object_label",\
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_Coord,
        xfdata.FL_Coord],\
        """void fl_fit_object_label(FL_OBJECT * obj, FL_Coord xmargin,
           FL_Coord ymargin)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    ixmargin = library.convert_to_int(xmargin)
    iymargin = library.convert_to_int(ymargin)
    library.keep_elem_refs(pFlObject, xmargin, ixmargin, ymargin, iymargin)
    _fl_fit_object_label(pFlObject, ixmargin, iymargin)


def fl_get_object_geometry(pFlObject):
    """fl_get_object_geometry(pFlObject)
    
    Obtains the geometry (position and size) of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object

    Returns
    -------
        x : int
            horizontal position
        y : int
            vertical position
        w : int
            width
        h : int
            height

    Examples
    --------
        >>> xpos, ypos, wid, hei = fl_get_object_geometry(pobj1)

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_object_geometry(pFlObject, x, y, w, h)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_get_object_geometry = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_geometry",\
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_Coord),\
        cty.POINTER(xfdata.FL_Coord), cty.POINTER(xfdata.FL_Coord), \
        cty.POINTER(xfdata.FL_Coord)],
        """void fl_get_object_geometry(FL_OBJECT * ob, FL_Coord * x,
           FL_Coord * y, FL_Coord * w, FL_Coord * h)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    x, px = library.make_FL_Coord_and_pointer()
    y, py = library.make_FL_Coord_and_pointer()
    w, pw = library.make_FL_Coord_and_pointer()
    h, ph = library.make_FL_Coord_and_pointer()
    library.keep_elem_refs(pFlObject, x, px, y, py, w, pw, h, ph)
    _fl_get_object_geometry(pFlObject, px, py, pw, ph)
    return x.value, y.value, w.value, h.value


def fl_get_object_position(pFlObject):
    """fl_get_object_position(pFlObject)

    Obtains the position of an object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        x : int
            horizontal position
        y : int
            vertical position

    Examples
    --------
        >>> xpos, ypos = fl_get_object_position(pobj2)

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_object_position(pFlObject, x, y)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_position = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_position",\
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_Coord),
        cty.POINTER(xfdata.FL_Coord)],\
        """void fl_get_object_position(FL_OBJECT * ob, FL_Coord * x,
           FL_Coord * y)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    x, px = library.make_FL_Coord_and_pointer()
    y, py = library.make_FL_Coord_and_pointer()
    library.keep_elem_refs(pFlObject, x, px, y, py)
    _fl_get_object_position(pFlObject, px, py)
    return x.value, y.value


# this one takes into account the label

def fl_get_object_bbox(pFlObject):
    """fl_get_object_bbox(pFlObject)
    
    Obtains the bounding box size that has the label, which could be drawn
    outside of the object figured in.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        x : int
            horizontal position
        y : int
            vertical position
        w : int
            width
        h : int
            height

    Examples
    --------
        >>> xpos, ypos, wid, hei = fl_get_object_bbox(pobj4)

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_object_bbox(pFlObject, x, y, w, h)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_bbox = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_bbox",\
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_Coord),\
        cty.POINTER(xfdata.FL_Coord), cty.POINTER(xfdata.FL_Coord),
        cty.POINTER(xfdata.FL_Coord)],\
        """void fl_get_object_bbox(FL_OBJECT * obj, FL_Coord * x,
           FL_Coord * y, FL_Coord * w, FL_Coord * h)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    x, px = library.make_FL_Coord_and_pointer()
    y, py = library.make_FL_Coord_and_pointer()
    w, pw = library.make_FL_Coord_and_pointer()
    h, ph = library.make_FL_Coord_and_pointer()
    library.keep_elem_refs(pFlObject, x, y, w, h, px, py, pw, ph)
    _fl_get_object_bbox(pFlObject, px, py, pw, ph)
    return x.value, y.value, w.value, h.value


fl_compute_object_geometry = fl_get_object_bbox


def fl_call_object_callback(pFlObject):
    """fl_call_object_callback(pFlObject)
    
    Invokes the callback manually (as opposed to invocation by the main
    loop). If the object does not have a callback associated with it, this
    call has not effect.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object

    Examples
    --------
        >>> fl_call_object_callback(pobj_with_cb)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_call_object_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_call_object_callback",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_call_object_callback(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_call_object_callback(pFlObject)


def fl_set_object_prehandler(pFlObject, py_HandlePtr):
    """fl_set_object_prehandler(pFlObject, py_HandlePtr)
    
    By-passes the internal event processing for a particular object. The
    pre-handler will be called before the built-in object handler. By electing
    to handle some of the events, a pre-handler can, in effect, replace part
    of the built-in handler.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
        py_HandlePtr : python callback function, returned value
            name referring to function(pFlObject, num, coord, coord, num,
            vdata) -> num

    Returns
    -------
        HandlePtr : xfdata.FL_HANDLEPTR
            old object prehandler function

    Examples
    --------
        >>> def prehandlecb(pobj, num, crd, crd, num2, vdata):
        >>> ... <something>
        >>> ... return 0
        >>> fl_set_object_prehandler(pobj2, prehandlecb)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    #FL_HANDLEPTR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_OBJECT),
    #    cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord, cty.c_int, cty.c_void_p)
    _fl_set_object_prehandler = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_prehandler",
        xfdata.FL_HANDLEPTR, [cty.POINTER(xfdata.FL_OBJECT),
        xfdata.FL_HANDLEPTR],\
        """FL_HANDLEPTR fl_set_object_prehandler(FL_OBJECT * ob,
           FL_HANDLEPTR phandler)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.verify_function_type(py_HandlePtr)
    c_HandlePtr = xfdata.FL_HANDLEPTR(py_HandlePtr)
    library.keep_cfunc_refs(c_HandlePtr, py_HandlePtr)
    library.keep_elem_refs(pFlObject)
    retval = _fl_set_object_prehandler(pFlObject, c_HandlePtr)
    return retval


def fl_set_object_posthandler(pFlObject, py_HandlePtr):
    """fl_set_object_posthandler(pFlObject, py_HandlePtr)
    
    By-passes the internal event processing for a particular object. The
    post-handler will be invoked after the built-in handler finishes. Whenever
    possible a post-handler should be used instead of a pre-handler.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object
          py_HandlePtr : python callback function, returned value
            name referring function(pFlObject, num, coord, coord, num,
            vdata) -> num

    Returns
    -------
        HandlePtr : xfdata.FL_HANDLEPTR
            old object posthandler function

    Examples
    --------
        >>> def posthandlecb(pobj, num, crd, crd, num2, vdata):
        >>> ... <something>
        >>> ... return 0
        >>> fl_set_object_posthandler(pobj2, posthandlecb)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    #FL_HANDLEPTR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_OBJECT),
    #    cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord, cty.c_int, cty.c_void_p)
    _fl_set_object_posthandler = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_posthandler",
        xfdata.FL_HANDLEPTR, [cty.POINTER(xfdata.FL_OBJECT),
        xfdata.FL_HANDLEPTR],\
        """FL_HANDLEPTR fl_set_object_posthandler(FL_OBJECT * ob,
           FL_HANDLEPTR post)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.verify_function_type(py_HandlePtr)
    c_HandlePtr = xfdata.FL_HANDLEPTR(py_HandlePtr)
    library.keep_cfunc_refs(c_HandlePtr, py_HandlePtr)
    library.keep_elem_refs(pFlObject)
    retval = _fl_set_object_posthandler(pFlObject, c_HandlePtr)
    return retval


def fl_set_object_callback(pFlObject, py_CallbackPtr, data):
    """fl_set_object_callback(pFlObject, py_CallbackPtr, data)
    
    Sets a callback function bound to an object and calls it if a condition
    is met.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object the callback is bound to
        py_CallbackPtr : python function to be used as callback, no return
            function with no () and no args referring to fn(pFlObject, longnum)
        data : long
            argument being passed to function

    Returns
    -------
        CallbackPtr : xfdata.FL_CALLBACKPTR
            old xfdata.FL_CALLBACKPTR function

    Examples
    --------
        >>> def myobcb(pobj, longdata):
        >>> ... <something>
        >>> oldcb = fl_set_object_callback(pobj3, myobjcb, 0)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    #FL_CALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_OBJECT),
    #                               cty.c_long)
    _fl_set_object_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_callback",\
        xfdata.FL_CALLBACKPTR, [cty.POINTER(xfdata.FL_OBJECT),
        xfdata.FL_CALLBACKPTR, cty.c_long],
        """FL_CALLBACKPTR fl_set_object_callback(FL_OBJECT * obj,\
           FL_CALLBACKPTR callback, long int argument)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    ldata = library.convert_to_long(data)
    library.verify_function_type(py_CallbackPtr)
    c_CallbackPtr = xfdata.FL_CALLBACKPTR(py_CallbackPtr)
    library.keep_cfunc_refs(c_CallbackPtr, py_CallbackPtr)
    library.keep_elem_refs(pFlObject, data, ldata)
    retval = _fl_set_object_callback(pFlObject, c_CallbackPtr, ldata)
    return retval


fl_set_call_back = fl_set_object_callback


def fl_redraw_object(pFlObject):
    """fl_redraw_object(pFlObject)
    
    Redraws the particular object. If it is a group it redraws the complete
    group. Normally you should never need this routine because all library
    routines take care of redrawing objects when necessary, but there might be
    situations in which an explicit redraw is required.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to redraw

    Examples
    --------
        >>> fl_redraw_object(pobj)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_redraw_object = library.cfuncproto(
        library.load_so_libforms(), "fl_redraw_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_redraw_object(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_redraw_object(pFlObject)


def fl_scale_object(pFlObject, xs, ys):
    """fl_scale_object(pFlObject, xs, ys)
    
    Scales (shrinking or enlarging) an object, indicating a scaling factor
    in x- and y-direction (1.1 = 110 percent, 0.5 = 50, etc.)

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to be scaled
        xs : float
            new horizontal factor
        ys : float
            new vertical factor

    Examples
    --------
        >>> fl_scale_object(pobj, 0.8, 1.1)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_scale_object = library.cfuncproto(
        library.load_so_libforms(), "fl_scale_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],\
        """void fl_scale_object(FL_OBJECT * ob, double xs, double ys)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    fxs = library.convert_to_double(xs)
    fys = library.convert_to_double(ys)
    library.keep_elem_refs(pFlObject, xs, fxs, ys, fys)
    _fl_scale_object(pFlObject, fxs, fys)


def fl_show_object(pFlObject):
    """fl_show_object(pFlObject)

    Shows an (hidden) object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to be shown

    Examples
    --------
        >>> fl_show_object(pobj8)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_show_object = library.cfuncproto(
        library.load_so_libforms(), "fl_show_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_show_object(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_show_object(pFlObject)


def fl_hide_object(pFlObject):
    """fl_hide_object(pFlObject)
    
    Hides a shown object.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to be hidden

    Examples
    --------
        >>> fl_hide_object(pobj8)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_hide_object = library.cfuncproto(
        library.load_so_libforms(), "fl_hide_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_hide_object(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_hide_object(pFlObject)


def fl_object_is_visible(pFlObject):
    """fl_object_is_visible(pFlObject)
    
    Tells if an object is visible or not.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        flag : int
            0 (invisible) or non-zero (visible)

    Examples
    --------
        >>> if not fl_object_is_visible(pobj2):
        >>> ... <something>

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_object_is_visible = library.cfuncproto(
        library.load_so_libforms(), "fl_object_is_visible",\
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],\
        """int fl_object_is_visible(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.keep_elem_refs(pFlObject)
    retval = _fl_object_is_visible(pFlObject)
    return retval


def fl_free_object(pFlObject):
    """fl_free_object(pFlObject)
    
    Frees the object and finally destroys it (if necessary, deletes the
    object first).

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to free

    Examples
    --------
        >>> fl_free_object(pobj)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_free_object = library.cfuncproto(
        library.load_so_libforms(), "fl_free_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_free_object(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_free_object(pFlObject)


def fl_delete_object(pFlObject):
    """fl_delete_object(pFlObject)
    
    Deletes an object, breaking its connection to the form, but not
    destroying it.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to delete

    Examples
    --------
        >>> fl_delete_object(pobj)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_delete_object = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_delete_object(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_delete_object(pFlObject)


def fl_get_object_return_state(pFlObject):
    """fl_get_object_return_state(pFlObject)
    
    Determines the reason an object was returned (or its callback invoked).
    The returned value is a logical 'OR' of the conditions that led to the
    object getting returned.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        rstate : int
            current return state

    Examples
    --------
        >>> currstate = fl_get_object_return_state(pobj5)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_return_state = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_return_state",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],\
        """int fl_get_object_return_state(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_return_state(pFlObject)
    return retval


def fl_trigger_object(pFlObject):
    """fl_trigger_object(pFlObject)
    
    Simulates the action of an object being triggered from within the
    program. Calling this routine on an object obj results in the object
    returned to the application program or its callback being called if it
    exists. Note, however, there is no visual feedback, i.e.
    fl_trigger_object(button) will not make the button object named button
    appearing to be pushed.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to trigger

    Examples
    --------
        >>> fl_trigger_object(pobj

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_trigger_object = library.cfuncproto(
        library.load_so_libforms(), "fl_trigger_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_trigger_object(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_trigger_object(pFlObject)


def fl_activate_object(pFlObject):
    """fl_activate_object(pFlObject)
    
    (Re)activates an object, (re)enabling user interaction (previously
    disabled with fl_deactivate_object()).

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to activate

    Examples
    --------
        >>> fl_activate_object(pobj)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_activate_object = library.cfuncproto(
        library.load_so_libforms(), "fl_activate_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_activate_object(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_activate_object(pFlObject)


def fl_deactivate_object(pFlObject):
    """fl_deactivate_object(pFlObject)
    
    Makes a particular object to be temporarily inactive, disabling user
    interaction, e.g., you want to make it impossible for the user to press a
    particular button or to type input in a particular field. When object is a
    group, the whole group is deactivate.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to deactivate

    Examples
    --------
        >>> fl_deactivate_object(pactobj)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_deactivate_object = library.cfuncproto(
        library.load_so_libforms(), "fl_deactivate_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_deactivate_object(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_deactivate_object(pFlObject)


def fl_object_is_active(pFlObject):
    """fl_object_is_active(pFlObject)
    
    Tells if object is active and reacting to events, or not.

    Parameters
    ----------
        pFlObject : pointer to xfdata.FL_OBJECT
            object to evaluate

    Returns
    -------
        flag : int
            0 (not active) or non-zero (active)

    Examples
    --------
        >>> if not fl_object_is_active(pobj):
        >>> ... <something>

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_object_is_active = library.cfuncproto(
        library.load_so_libforms(), "fl_object_is_active",\
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],\
        """int fl_object_is_active(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_object_is_active(pFlObject)
    return retval


def fl_enumerate_fonts(py_output, shortform):
    """fl_enumerate_fonts(py_output, shortform)
    
    Lists built-in fonts.

    Parameters
    ----------
        py_output : python callback function, no return
            function referring to fn(string)
        shortform : int
            flag to use short form (non-zero) or not (0 for long form)

    Returns
    -------
        numfonts : int
            number of listed fonts

    Examples
    --------
        >>> def pyoutput(strng):
        >>> ... print strng
        >>> nfonts = fl_enumerate(pyoutput, 0)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    # cfunc_none_string = cty.CFUNCTYPE(None, xfdata.STRING)
    _fl_enumerate_fonts = library.cfuncproto(
        library.load_so_libforms(), "fl_enumerate_fonts",\
        cty.c_int, [xfdata.cfunc_none_string, cty.c_int],\
        """int fl_enumerate_fonts(void ( * output )( const char *s ), \
           int shortform)""")
    library.check_if_initialized()
    library.verify_function_type(py_output)
    c_output = xfdata.cfunc_none_string(py_output)
    ishortform = library.convert_to_int(shortform)
    library.keep_cfunc_refs(c_output, py_output)
    library.keep_elem_refs(shortform, ishortform)
    retval = _fl_enumerate_fonts(c_output, ishortform)
    return retval


# TODO: verify if name must conform to other (built-in) font names
def fl_set_font_name(fontnum, name):
    """fl_set_font_name(fontnum, name)
    
    Add a new font (indexed by number) or change an existing font.
    Preferably the font name contains a '?' in the size position so different
    sizes can be used. Redraw of all forms is required to actually see the
    change for visible form.

    Parameters
    ----------
        fontnum : int
            font number. Values between 0 and xfdata.FL_MAXFONTS-1
        name : str
            font name

    Returns
    -------
        result : int
            0 or 1, or -1 (on errors)

    Examples
    --------
        >>> fl_set_font_name(40, "symbol-medium-whatever") ?

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_font_name = library.cfuncproto(
        library.load_so_libforms(), "fl_set_font_name",\
        cty.c_int, [cty.c_int, xfdata.STRING],\
        """int fl_set_font_name(int n, const char * name)""")
    library.check_if_initialized()
    ifontnum = library.convert_to_int(fontnum)
    sname = library.convert_to_string(name)
    library.keep_elem_refs(fontnum, ifontnum, name, sname)
    retval = _fl_set_font_name(ifontnum, sname)
    return retval


def fl_set_font(fontnum, size):
    """fl_set_font(fontnum, size)
    
    Makes the specified font as the current.

    Parameters
    ----------
        fontnum : int
            font number
        size : int
            font size. Values (from xfdata.py) FL_TINY_SIZE, FL_SMALL_SIZE,
            FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE, FL_HUGE_SIZE,
            FL_DEFAULT_SIZE

    Examples
    --------
        >>> fl_set_font(5, xfdata.FL_SMALL_SIZE)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_font = library.cfuncproto(
        library.load_so_libforms(), "fl_set_font",\
        None, [cty.c_int, cty.c_int],\
        """void fl_set_font(int numb, int size)""")
    library.check_if_initialized()
    library.checknonfatal_allowed_value_in_list(size, xfdata.FONTSIZE_list)
    ifontnum = library.convert_to_int(fontnum)
    isize = library.convert_to_int(size)
    library.keep_elem_refs(fontnum, ifontnum, size, isize)
    _fl_set_font(ifontnum, isize)


# routines that facilitate free object

def fl_get_char_height(style, size):
    """fl_get_char_height(style, size)
    
    Obtains the maximum height of the used font and the height above and
    below the baseline of the font.

    Parameters
    ----------
        style : int
            font style. Values (from xfdata.py) FL_NORMAL_STYLE, FL_BOLD_STYLE,
            FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
            FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
            FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
            FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
            FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
            FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        size : int
            font size. Values (from xfdata.py) FL_TINY_SIZE, FL_SMALL_SIZE,
            FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE, FL_HUGE_SIZE,
            FL_DEFAULT_SIZE

    Returns
    -------
        h : int
            height of font
        asc : int
            ascendent of font
        desc : int
            descendent of font

    Examples
    --------
        >>> hei, asc, desc = fl_get_char_height(xfdata.FL_BOLD_STYLE,
                xfdata.FL_TINY_SIZE)

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_char_height(style, size, asc, desc)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_char_height = library.cfuncproto(
        library.load_so_libforms(), "fl_get_char_height",\
        cty.c_int, [cty.c_int, cty.c_int, cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],\
        """int fl_get_char_height(int style, int size, int * asc,
           int * desc)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    library.checknonfatal_allowed_value_in_list(size, xfdata.FONTSIZE_list)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    asc, pasc = library.make_int_and_pointer()
    desc, pdesc = library.make_int_and_pointer()
    library.keep_elem_refs(style, istyle, size, isize, asc, desc, pasc, pdesc)
    retval = _fl_get_char_height(istyle, isize, pasc, pdesc)
    return retval, asc.value, desc.value


def fl_get_char_width(style, size):
    """fl_get_char_width(style, size)
    
    Obtains the maximum width of the used font.

    Parameters
    ----------
        style : int
            font style. Values (from xfdata.py) FL_NORMAL_STYLE, FL_BOLD_STYLE,
            FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
            FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
            FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
            FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
            FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
            FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        size : int
            font size. Values (from xfdata.py) FL_TINY_SIZE, FL_SMALL_SIZE,
            FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE, FL_HUGE_SIZE,
            FL_DEFAULT_SIZE

    Returns
    -------
        w : int
            width

    Examples
    --------
        >>> wid = fl_get_char_width(xfdata.FL_TIMES_STYLE,
                xfdata.FL_HUGE_SIZE)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_char_width = library.cfuncproto(
        library.load_so_libforms(), "fl_get_char_width",\
        cty.c_int, [cty.c_int, cty.c_int],\
        """int fl_get_char_width(int style, int size)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    library.checknonfatal_allowed_value_in_list(size, xfdata.FONTSIZE_list)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    library.keep_elem_refs(style, istyle, size, isize)
    retval = _fl_get_char_width(istyle, isize)
    return retval


def fl_get_string_height(style, size, txtstr, strlng):
    """fl_get_string_height(style, size, txtstr, strlng)
    
    Obtains the height information of a specific string and the height
    above and below the font's baseline.

    Parameters
    ----------
        style : int
            font style. Values (from xfdata.py) FL_NORMAL_STYLE, FL_BOLD_STYLE,
            FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
            FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
            FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
            FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
            FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
            FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        size : int
            font size. Values (from xfdata.py) FL_TINY_SIZE, FL_SMALL_SIZE,
            FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE, FL_HUGE_SIZE,
            FL_DEFAULT_SIZE
        txtstr : str
            text to evaluate
        strlng : int
            length of text

    Returns
    -------
        h : int
            height of font
        asc : int
            ascendent of font
        desc : int
            descendent of font

    Examples
    --------
        >>> hei, asc, desc = fl_get_string_height(xfdata.FL_MISC_STYLE,
                xfdata.FL_MEDIUM_SIZE, "Mystring", 8)

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_string_height(style, size, strng, strglen, asc, desc)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_get_string_height = library.cfuncproto(
        library.load_so_libforms(), "fl_get_string_height",\
        cty.c_int, [cty.c_int, cty.c_int, xfdata.STRING, cty.c_int,
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
        """int fl_get_string_height(int style, int size, const char * s,
           int len, int * asc, int * desc)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    library.checknonfatal_allowed_value_in_list(size, xfdata.FONTSIZE_list)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    stxtstr = library.convert_to_string(txtstr)
    istrlng = library.convert_to_int(strlng)
    asc, pasc = library.make_int_and_pointer()
    desc, pdesc = library.make_int_and_pointer()
    library.keep_elem_refs(style, istyle, size, isize, txtstr, stxtstr, strlng, \
                   istrlng, asc, desc, pasc, pdesc)
    retval = _fl_get_string_height(istyle, isize, stxtstr, istrlng, pasc,
                                   pdesc)
    return retval, asc.value, desc.value


def fl_get_string_width(style, size, txtstr, strlng):
    """fl_get_string_width(style, size, txtstr, strlng)
    
    Obtains the width information for a specific string.

    Parameters
    ----------
        style : int
            font style. Values (from xfdata.py) FL_NORMAL_STYLE, FL_BOLD_STYLE,
            FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
            FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
            FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
            FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
            FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
            FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        size : int
            font size. Values (from xfdata.py) FL_TINY_SIZE, FL_SMALL_SIZE,
            FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE, FL_HUGE_SIZE,
            FL_DEFAULT_SIZE
        txtstr : str
            text
        strlng : int
            length of text

    Returns
    -------
        w : int
            width

    Examples
    --------
        >>> wid = fl_get_string_width(xfdata.FL_MISC_STYLE,
                xfdata.FL_MEDIUM_SIZE, "Mystring", 8)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_get_string_width = library.cfuncproto(
        library.load_so_libforms(), "fl_get_string_width",\
        cty.c_int, [cty.c_int, cty.c_int, xfdata.STRING, cty.c_int],\
        """int fl_get_string_width(int style, int size, const char * s,
           int len)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    library.checknonfatal_allowed_value_in_list(size, xfdata.FONTSIZE_list)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    stxtstr = library.convert_to_string(txtstr)
    istrlng = library.convert_to_int(strlng)
    library.keep_elem_refs(style, istyle, size, isize, txtstr, stxtstr, strlng,
                   istrlng)
    retval = _fl_get_string_width(istyle, isize, stxtstr, istrlng)
    return retval


# TODO: what's its purpose?
def fl_get_string_widthTAB(style, size, txtstr, strlng):
    """fl_get_string_widthTAB(style, size, txtstr, strlng)
    
    *todo*

    Parameters
    ----------
        style : int
            font style. Values (from xfdata.py) FL_NORMAL_STYLE, FL_BOLD_STYLE,
            FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
            FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
            FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
            FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
            FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
            FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        size : int
            font size. Values (from xfdata.py) FL_TINY_SIZE, FL_SMALL_SIZE,
            FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE, FL_HUGE_SIZE,
            FL_DEFAULT_SIZE
        txtstr : str
            text
        strlng : int
            length of text

    Returns
    -------
        w : int
            width

    Examples
    --------
        >>> wid = fl_get_string_width(xfdata.FL_MISC_STYLE,
                xfdata.FL_MEDIUM_SIZE, "Mystring", 8)

    Notes
    -----
        Status: Untested + NoDoc + NoDemo = NOT OK (not clear purpose)

    """
    _fl_get_string_widthTAB = library.cfuncproto(
        library.load_so_libforms(), "fl_get_string_widthTAB",\
        cty.c_int, [cty.c_int, cty.c_int, xfdata.STRING, cty.c_int],\
        """int fl_get_string_widthTAB(int style, int size, const char * s,
           int len)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    library.checknonfatal_allowed_value_in_list(size, xfdata.FONTSIZE_list)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    stxtstr = library.convert_to_string(txtstr)
    istrlng = library.convert_to_int(strlng)
    library.keep_elem_refs(style, istyle, size, isize, txtstr, stxtstr, strlng,
                   istrlng)
    retval = _fl_get_string_widthTAB(istyle, isize, stxtstr, istrlng)
    return retval


def fl_get_string_dimension(style, size, txtstr, strlng):
    """fl_get_string_dimension(style, size, txtstr, strlng)
    
    Obtains the width and height of a string in one call. In addition, the
    string passed can contain embedded newline characters and the routine will
    make proper adjustment so the values returned are (just) large enough to
    contain the multiple lines of text.

    Parameters
    ----------
        style : int
            font style. Values (from xfdata.py) FL_NORMAL_STYLE, FL_BOLD_STYLE,
            FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
            FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
            FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
            FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
            FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
            FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        size : int
            font size. Values (from xfdata.py) FL_TINY_SIZE, FL_SMALL_SIZE,
            FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE, FL_HUGE_SIZE,
            FL_DEFAULT_SIZE
        txtstr : str
            text
        strlng : int
            length of text

    Returns
    -------
        w : int
            width
        h : int
            height

    Examples
    --------
        >>> fl_get_string_dimension(xfdata.FL_ENGRAVED_STYLE,
                xfdata.FL_DEFAULT_SIZE, "CustomString", 12)

    API_diversion
    ----------
        API changed from upstream
        fl_get_string_dimension(fntstyle, fntsize, strng, strglen, w, h)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_string_dimension = library.cfuncproto(
        library.load_so_libforms(), "fl_get_string_dimension",\
        None, [cty.c_int, cty.c_int, xfdata.STRING, cty.c_int,
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
        """void fl_get_string_dimension(int fntstyle, int fntsize,
           const char * s, int len, int * width, int * height)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    library.checknonfatal_allowed_value_in_list(size, xfdata.FONTSIZE_list)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    stxtstr = library.convert_to_string(txtstr)
    istrlng = library.convert_to_int(strlng)
    width, pwidth = library.make_int_and_pointer()
    height, pheight = library.make_int_and_pointer()
    library.keep_elem_refs(style, istyle, size, isize, txtstr, stxtstr,
                   strlng, istrlng, width, height, pwidth, pheight)
    _fl_get_string_dimension(istyle, isize, stxtstr, istrlng, pwidth,
                             pheight)
    return width.value, height.value


fl_get_string_size = fl_get_string_dimension


def fl_get_align_xy(align, x, y, w, h, xsize, ysize, xmargin, ymargin):
    """fl_get_align_xy(align, x, y, w, h, xsize, ysize, xmargin, ymargin)
    
    Obtains the position of where to draw the object with a certain
    alignment and including padding. It works regardless if it is to be drawn
    inside or outside of the bounding box

    Parameters
    ----------
        align : int
            alignment. Values (from xfdata.py) FL_ALIGN_CENTER, FL_ALIGN_TOP,
            FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT, FL_ALIGN_LEFT_TOP,
            FL_ALIGN_RIGHT_TOP, FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM,
            FL_ALIGN_INSIDE, FL_ALIGN_VERT. Bitwise OR with FL_ALIGN_INSIDE
            is allowed.
        x : int
            horizontal position of bounding box (upper-left corner)
        y : int
            vertical position of bounding box (upper-left corner)
        w : int
            width of bounding box in coord units
        h : int
            height of bounding box in coord units
        xsize : int
            width of the object to be drawn
        ysize : int
            height of the object to be drawn
        xmargin : int
            additional horizontal padding to use
        ymargin : int
            additional vertical padding to use

    Returns
    -------
        x : int
            horizontal position used for drawing object
        y : int
            vertical position used for drawing object

    Examples
    --------
        >>> xpos, ypos = fl_get_align_xy(xfdata.FL_ALIGN_CENTER, 200, 300,
                110, 30, 120, 40, 15, 15)

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_get_align_xy(align, x, y, w, h, xsize, ysize, xoff, yoff, xx, yy)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_align_xy = library.cfuncproto(
        library.load_so_libforms(), "fl_get_align_xy",\
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,\
        cty.c_int, cty.c_int, cty.c_int, cty.c_int,
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
        """void fl_get_align_xy(int align, int x, int y, int w, int h,
           int xsize, int ysize, int xoff, int yoff, int * xx, int * yy)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(align, xfdata.ALIGN_list)
    ialign = library.convert_to_int(align)
    ix = library.convert_to_int(x)
    iy = library.convert_to_int(y)
    iw = library.convert_to_int(w)
    ih = library.convert_to_int(h)
    ixsize = library.convert_to_int(xsize)
    iysize = library.convert_to_int(ysize)
    ixmargin = library.convert_to_int(xmargin)
    iymargin = library.convert_to_int(ymargin)
    xx, pxx = library.make_int_and_pointer()
    yy, pyy = library.make_int_and_pointer()
    library.keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, xsize, \
        ixsize, ysize, iysize, xmargin, ixmargin, ymargin, iymargin, xx, yy, \
        pxx, pyy)
    _fl_get_align_xy(ialign, ix, iy, iw, ih, ixsize, iysize, ixmargin,
                     iymargin, pxx, pyy)
    return xx.value, yy.value


def fl_drw_text(align, x, y, w, h, colr, style, size, txtstr):
    """fl_drw_text(align, x, y, w, h, colr, style, size, txtstr)
    
    Draws the text inside the bounding box according to the alignment
    requested. It puts a padding of 5 pixels in vertical direction and 4 in
    horizontal around the text. Thus the bounding box should be 10 pixels wider
    and 8 pixels higher than required for the text to be drawn. It interprets
    a text string starting with the character @ differently in drawing some
    symbols instead.

    Parameters
    ----------
        align : int
            alignment of text. Values (from xfdata.py) FL_ALIGN_CENTER,
            FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
            FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP, FL_ALIGN_LEFT_BOTTOM,
            FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE, FL_ALIGN_VERT. Bitwise
            'OR' with FL_ALIGN_INSIDE is allowed.
        x : int
            horizontal position (upper-left corner)
        y : int
            vertical position (upper-left corner)
        w : int
            width in coord units
        h : int
            height in coord units
        colr : long_pos
            color value
        style : int
            font style. Values (from xfdata.py) FL_NORMAL_STYLE, FL_BOLD_STYLE,
            FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
            FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
            FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
            FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
            FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
            FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        size : int
            font size. Values (from xfdata.py) FL_TINY_SIZE, FL_SMALL_SIZE,
            FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE, FL_HUGE_SIZE,
            FL_DEFAULT_SIZE
        txtstr : str
            text to draw

    Examples
    --------
        >>> fl_drw_text(xfdata.FL_ALIGN_BOTTOM, 400, 175, 150, 45,
                xfdata.FL_GREEN, xfdata.FL_ITALIC_STYLE, xfdata.FL_SMALL_SIZE,
                "A Good Old String")

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_drw_text = library.cfuncproto(
        library.load_so_libforms(), "fl_drw_text",\
        None, [cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_COLOR, cty.c_int, cty.c_int, xfdata.STRING],
        """void fl_drw_text(int align, FL_Coord x, FL_Coord y, FL_Coord w,
           FL_Coord h, FL_COLOR c, int style, int size, const char * istr)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(align, xfdata.ALIGN_list)
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    library.checknonfatal_allowed_value_in_list(size, xfdata.FONTSIZE_list)
    ialign = library.convert_to_int(align)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    ulcolr = library.convert_to_FL_COLOR(colr)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    stxtstr = library.convert_to_string(txtstr)
    library.keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, style, istyle, size, isize, txtstr, stxtstr)
    _fl_drw_text(ialign, ix, iy, iw, ih, ulcolr, istyle, isize,
                 stxtstr)


def fl_drw_text_beside(align, x, y, w, h, colr, style, size, txtstr):
    """fl_drw_text_beside(align, x, y, w, h, colr, style, size, txtstr)
    
    Draws the text aligned outside of the box. It interprets a text string
    starting with the character @ differently in drawing some symbols instead.

    Parameters
    ----------
        align : int
            alignment of text. Values (from xfdata.py) FL_ALIGN_CENTER,
            FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
            FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP, FL_ALIGN_LEFT_BOTTOM,
            FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE, FL_ALIGN_VERT. Bitwise
            'OR' with FL_ALIGN_INSIDE is allowed.
        x : int
            horizontal position (upper-left corner)
        y : int
            vertical position (upper-left corner)
        w : int
            width in coord units
        h : int
            height in coord units
        colr : long_pos
            color value
        style : int
            font style. Values (from xfdata.py) FL_NORMAL_STYLE, FL_BOLD_STYLE,
            FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
            FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
            FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
            FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
            FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
            FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        size : int
            font size. Values (from xfdata.py) FL_TINY_SIZE, FL_SMALL_SIZE,
            FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE, FL_HUGE_SIZE,
            FL_DEFAULT_SIZE
        txtstr : str
            text to draw

    Examples
    --------
        >>> fl_drw_text_beside(xfdata.FL_ALIGN_BOTTOM, 400, 175, 150, 45,
                xfdata.FL_GREEN, xfdata.FL_ITALIC_STYLE, xfdata.FL_SMALL_SIZE,
                "A Good Old String")

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_drw_text_beside = library.cfuncproto(
        library.load_so_libforms(), "fl_drw_text_beside",\
        None, [cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_COLOR, cty.c_int, cty.c_int, xfdata.STRING],
        """void fl_drw_text_beside(int align, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, FL_COLOR c, int style, int size,
           const char * str)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(align, xfdata.ALIGN_list)
    library.checknonfatal_allowed_value_in_list(align, xfdata.COLOR_list)
    library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    library.checknonfatal_allowed_value_in_list(size, xfdata.FONTSIZE_list)
    ialign = library.convert_to_int(align)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    ulcolr = library.convert_to_FL_COLOR(colr)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    stxtstr = library.convert_to_string(txtstr)
    library.keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, style, istyle, size, isize, txtstr, stxtstr)
    _fl_drw_text_beside(ialign, ix, iy, iw, ih, ulcolr, istyle,
                        isize, stxtstr)


def fl_drw_text_cursor(align, x, y, w, h, colr, style, size, txtstr, curscolr,
                       pos):
    """fl_drw_text_cursor(align, x, y, w, h, colr, style, size, txtstr,
    curscolr, pos)
    
    Draw text and, in addition, a cursor can optionally be drawn. It does
    no interpretation of the special character @ nor does it add padding
    around the text.

    Parameters
    ----------
        align : int
            alignment of text. Values (from xfdata.py) FL_ALIGN_CENTER,
            FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
            FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP, FL_ALIGN_LEFT_BOTTOM,
            FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE, FL_ALIGN_VERT. Bitwise
            'OR' with FL_ALIGN_INSIDE is allowed.
        x : int
            horizontal position (upper-left corner)
        y : int
            vertical position (upper-left corner)
        w : int
            width in coord units
        h : int
            height in coord units
        colr : long_pos
            color value
        style : int
            font style. Values (from xfdata.py) FL_NORMAL_STYLE, FL_BOLD_STYLE,
            FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
            FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
            FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
            FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
            FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
            FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
        size : int
            font size. Values (from xfdata.py) FL_TINY_SIZE, FL_SMALL_SIZE,
            FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE, FL_HUGE_SIZE,
            FL_DEFAULT_SIZE
        txtstr : str
            text to draw
        curscolr : int
            color of the cursor
        pos : int
            position which indicates the index of the character before which
            to draw the cursor (-1 for not showing it)

    Examples
    --------
        >>> fl_drw_text_cursor(xfdata.FL_ALIGN_BOTTOM, 400, 175, 150, 45,
                xfdata.FL_GREEN, xfdata.FL_ITALIC_STYLE, xfdata.FL_SMALL_SIZE,
                "A Good Old String", xfdata.FL_YELLOW, 7)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_drw_text_cursor = library.cfuncproto(
        library.load_so_libforms(), "fl_drw_text_cursor",\
        None, [cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_COLOR, cty.c_int, cty.c_int, xfdata.STRING,
        cty.c_int, cty.c_int],
        """void fl_drw_text_cursor(int align, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, FL_COLOR c, int style, int size,
           const char * str, int cc, int pos)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(align, xfdata.ALIGN_list)
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    library.checkfatal_allowed_value_in_list(style, xfdata.TEXTSTYLE_list)
    library.checknonfatal_allowed_value_in_list(size, xfdata.FONTSIZE_list)
    library.checknonfatal_allowed_value_in_list(curscolr, xfdata.COLOR_list)
    ialign = library.convert_to_int(align)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    ulcolr = library.convert_to_FL_COLOR(colr)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    stxtstr = library.convert_to_string(txtstr)
    icurscolr = library.convert_to_int(curscolr)
    ipos = library.convert_to_int(pos)
    library.keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, style, istyle, size, isize, txtstr, stxtstr,
                   curscolr, icurscolr, pos, ipos)
    _fl_drw_text_cursor(ialign, ix, iy, iw, ih, ulcolr, istyle,
                        isize, stxtstr, icurscolr, ipos)


def fl_drw_box(boxtype, x, y, w, h, colr, bw):
    """fl_drw_box(boxtype, x, y, w, h, colr, bw)
    
    Draws the bounding box of an object.

    Parameters
    ----------
        boxtype : int
            type of box to draw. Values (from xfdata.py) FL_NO_BOX, FL_UP_BOX,
            FL_DOWN_BOX, FL_BORDER_BOX, FL_SHADOW_BOX, FL_FRAME_BOX,
            FL_ROUNDED_BOX, FL_EMBOSSED_BOX, FL_FLAT_BOX, FL_RFLAT_BOX,
            FL_RSHADOW_BOX, FL_OVAL_BOX, FL_ROUNDED3D_UPBOX,
            FL_ROUNDED3D_DOWNBOX, FL_OVAL3D_UPBOX, FL_OVAL3D_DOWNBOX,
            FL_OVAL3D_FRAMEBOX, FL_OVAL3D_EMBOSSEDBOX
        x : int
            horizontal position (upper-left corner)
        y : int
            vertical position (upper-left corner)
        w : int
            width in coord units
        h : int
            height in coord units
        colr : long_pos
            color value
        bw : int
            width of the boundary

    Examples
    --------
        >>> fl_drw_box(xfdata.FL_DOWN_BOX, 700, 800, 600, 450,
                xfdata.FL_INDIGO, 3)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_drw_box = library.cfuncproto(
        library.load_so_libforms(), "fl_drw_box",\
        None, [cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_COLOR, cty.c_int],\
        """void fl_drw_box(int style, FL_Coord x, FL_Coord y, FL_Coord w,
           FL_Coord h, FL_COLOR c, int bw_in)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(boxtype, xfdata.BOXTYPE_list)
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    iboxtype = library.convert_to_int(boxtype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    ulcolr = library.convert_to_FL_COLOR(colr)
    ibw = library.convert_to_int(bw)
    library.keep_elem_refs(boxtype, iboxtype, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, bw, ibw)
    _fl_drw_box(boxtype, x, y, w, h, ulcolr, ibw)


def fl_add_symbol(symbname, py_DrawPtr, scalable):
    """fl_add_symbol(symbname, py_DrawPtr, scalable)
    
    Adds a customly drawn symbol to the system which it can then use to
    display symbols on objects that are not provided by XForms.

    Parameters
    ----------
        symbname : str
            name under which the symbol should be known (at most 15
            characters), without the leading @
        py_DrawPtr : python function to draw symbol, no return
            name referring to function(coord, coord, coord, coord,
            angle_degree_rotation, colr)
        scalable : int
            not used, a value of 0 will be fine

    Returns
    -------
        num : int
            *todo*

    Examples
    --------
        >>> def drawsymb(x, y, w, h, angle, col):
        >>> ... <something>
        >>> fl_add_symbol("MySymbol", drawsymb, 0)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    #FL_DRAWPTR = cty.CFUNCTYPE(None, xfdata.FL_Coord, xfdata.FL_Coord,
    #        xfdata.FL_Coord, FL_Coord, cty.c_int, FL_COLOR)
    _fl_add_symbol = library.cfuncproto(
        library.load_so_libforms(), "fl_add_symbol",\
        cty.c_int, [xfdata.STRING, xfdata.FL_DRAWPTR, cty.c_int],\
        """int fl_add_symbol(const char * name, FL_DRAWPTR drawit,
           int scalable)""")
    library.check_if_initialized()
    ssymbname = library.convert_to_string(symbname)
    iscalable = library.convert_to_int(scalable)
    library.verify_function_type(py_DrawPtr)
    c_DrawPtr = xfdata.FL_DRAWPTR(py_DrawPtr)
    library.keep_cfunc_refs(c_DrawPtr, py_DrawPtr)
    library.keep_elem_refs(symbname, ssymbname, scalable, iscalable)
    retval = _fl_add_symbol(ssymbname, c_DrawPtr, iscalable)
    return retval


def fl_draw_symbol(symbname, x, y, w, h, colr):
    """fl_draw_symbol(symbname, x, y, w, h, colr)
    
    Draws directly a symbol on the screen.

    Parameters
    ----------
        symbname : str
            name given to the symbol
        x : int
            horizontal position (upper-left corner)
        y : int
            vertical position (upper-left corner)
        w : int
            width in coord units
        h : int
            height in coord units
        colr : long_pos
            color value

    Returns
    -------
        result : int
            1 (on success) or 0 (on failure)

    Examples
    --------
        >>> fl_draw_symbol("willsym", 120, 120, 15, 20,
                xfdata.FL_LIGHTGRAY)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_draw_symbol = library.cfuncproto(
        library.load_so_libforms(), "fl_draw_symbol",\
        cty.c_int, [xfdata.STRING, xfdata.FL_Coord, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_COLOR],\
        """int fl_draw_symbol(const char * label, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, FL_COLOR col)""")
    library.check_if_initialized()
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    ssymbname = library.convert_to_string(symbname)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(symbname, ssymbname, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr)
    retval = _fl_draw_symbol(ssymbname, ix, iy, iw, ih, ulcolr)
    return retval


def fl_mapcolor(colr, r, g, b):
    """fl_mapcolor(colr, r, g, b)
    
    Changes the colormap and make a color index active so that it can be
    used in various drawing routines after initialization. It maps a new color
    using specific values for red, green and blue. In case a request fails, we
    substitute the closest color. It is recommended that you use an index
    larger than xfdata.FL_FREE_COL1 for your remap request to avoid
    accidentally free the colors you have not explicitly allocated. Indices
    larger than 224 are reserved and should not be used.

    Parameters
    ----------
        colr : long_pos
            new color value to be mapped
        r : int
            value for red
        g : int
            value for green
        b : int
            value for blue

    Returns
    -------
        colr : long_pos
            color value, or 0 (on failure)

    Examples
    --------
        >>> fl_mapcolor(xfdata.FL_FREE_COL1, 100, 200, 300)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_mapcolor = library.cfuncproto(
        library.load_so_libforms(), "fl_mapcolor",\
        cty.c_ulong, [xfdata.FL_COLOR, cty.c_int, cty.c_int, cty.c_int],
        """unsigned long fl_mapcolor(FL_COLOR col, int r, int g, int b)""")
    library.check_if_initialized()
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    ir = library.convert_to_int(r)
    ig = library.convert_to_int(g)
    ib = library.convert_to_int(b)
    library.keep_elem_refs(colr, ulcolr, r, ir, g, ig, b, ib)
    retval = _fl_mapcolor(ulcolr, ir, ig, ib)
    return retval


def fl_mapcolorname(colr, rgbcolrname):
    """fl_mapcolorname(colr, rgbcolrname)
    
    Sets the color in the colormap indexed by colr to the specified color
    name. It associates an index with a color name, which may have been
    obtained via resources.

    Parameters
    ----------
        colr : long_pos
            color value to be mapped
        rgbcolrname : str
            name of mapped color from the systems color database file
            "rgb.txt" (see that file for possible values)

    Returns
    -------
        pixl : long
            color pixel value, or -1 (on failure)

    Examples
    --------
        >>> pxl = fl_mapcolorname(xfdata.FL_FREE_COL3, "PowderBlue")

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_mapcolorname = library.cfuncproto(
        library.load_so_libforms(), "fl_mapcolorname",\
        cty.c_long, [xfdata.FL_COLOR, xfdata.STRING],\
        """long int fl_mapcolorname(FL_COLOR col, const char * name)""")
    library.check_if_initialized()
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    srgbcolrname = library.convert_to_string(rgbcolrname)
    library.keep_elem_refs(colr, ulcolr, rgbcolrname, srgbcolrname)
    retval = _fl_mapcolorname(ulcolr, srgbcolrname)
    return retval


fl_mapcolor_name = fl_mapcolorname


# commented as it gives a SegFault
#def fl_free_colors(colr, numcolr):
#    """Frees allocated array of colors from the default colormap, if index of
#    colors are known. You should not do that for the reserved colors (i.e.
#    colors with indices below xfdata.FL_FREE_COL1).
#
#    Parameters
#    ----------
#        colr : long_pos
#            color value
#        numcolr : int
#            number of colors stored in the array of colors
#
#    Examples
#    --------
#        >>> *todo*
#
#    Notes
#    -----
#        Status: Untested + Doc + NoDemo = NOT OK
#
#    """
#    _fl_free_colors = library.cfuncproto(
#        library.load_so_libforms(), "fl_free_colors",\
#        None, [cty.POINTER(xfdata.FL_COLOR), cty.c_int],\
#        """void fl_free_colors(FL_COLOR * c, int n)""")
#    library.check_if_initialized()
#    pcolr = cty.cast(colr, cty.POINTER(xfdata.FL_COLOR))
#    inumcolr = library.convert_to_int(numcolr)
#    library.keep_elem_refs(colr, pcolr, numcolr, inumcolr)
#    _fl_free_colors(pcolr, inumcolr)


# commented as it gives a SegFault
#def fl_free_pixels(pix, numcolr):
#    """Frees allocated colors from the default colormap, if pixel values are
#    known. You should not do that for the reserved colors (i.e. colors with
#    indices below xfdata.FL_FREE_COL1).
#
#    Parameters
#    ----------
#        pix : long_pos
#            pixel number
#        numcolr : int
#            number of colors stored
#
#    Examples
#    --------
#         >>> *todo*
#
#    Notes
#    -----
#        Status: Untested + Doc + NoDemo = NOT OK
#
#    """
#    _fl_free_pixels = library.cfuncproto(
#        library.load_so_libforms(), "fl_free_pixels",\
#        None, [cty.POINTER(cty.c_ulong), cty.c_int],\
#        """void fl_free_pixels(long unsigned int * pix, int n)""")
#    library.check_if_initialized()
#    ppix = cty.cast(pix, cty.POINTER(cty.c_ulong))
#    inumcolr = library.convert_to_int(numcolr)
#    library.keep_elem_refs(pix, ppix, numcolr, inumcolr)
#    _fl_free_pixels(ppix, inumcolr)


# TODO: figure out what is its purpose.
def fl_set_color_leak(yesno):
    """fl_set_color_leak(yesno)
    
    Enables or disables the leakage of color. ?

    Parameters
    ----------
        yesno : int
            flag to enable/disable leakage of color. Values 0 (to disable)
            or 1 (to enable)

    Examples
    --------
        >>> fl_set_color_leak(1)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_color_leak = library.cfuncproto(
        library.load_so_libforms(), "fl_set_color_leak",\
        None, [cty.c_int],\
        """void fl_set_color_leak(int y)""")
    library.check_if_initialized()
    iyesno = library.convert_to_int(yesno)
    library.keep_elem_refs(yesno, iyesno)
    _fl_set_color_leak(iyesno)


def fl_getmcolor(colr):
    """fl_getmcolor(colr)
    
    Obtains the RGB values of an index, returning the pixel value as known
    by the X server. If you are interested in the internal colormap of XForms
    fl_get_icm_color() is more efficient.

    Parameters
    ----------
        colr : long_pos
            color value

    Returns
    -------
        pixl : long_pos
            color pixel
        r : int
            red value
        g : int
            green value
        b : int
            blue value

    Examples
    --------
        >>> pixl, red, green, blue = fl_getmcolor(xfdata.FL_VIOLET)

    API_diversion
    ----------
        API changed from XForms, upstream was
        fl_getmcolor(colr, r, g, b)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_getmcolor = library.cfuncproto(
        library.load_so_libforms(), "fl_getmcolor",\
        cty.c_ulong, [xfdata.FL_COLOR, cty.POINTER(cty.c_int),\
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
        """long unsigned int fl_getmcolor(FL_COLOR i, int * r, int * g,
           int * b)""")
    library.check_if_initialized()
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    r, pr = library.make_int_and_pointer()
    g, pg = library.make_int_and_pointer()
    b, pb = library.make_int_and_pointer()
    library.keep_elem_refs(colr, ulcolr, r, g, b, pr, pg, pb)
    retval = _fl_getmcolor(ulcolr, pr, pg, pb)
    return retval, r.value, g.value, b.value


def fl_get_pixel(colr):
    """fl_get_pixel(colr)
    
    Obtains the actual pixel value the X server understands. XForms library
    keeps an internal colormap, initialized to predefined colors. The
    predefined colors do not correspond to pixel values the server understands
    but are indexes into the colormap. Therefore, they cannot be used in any of
    the Graphics Context (GC) altering or Xlib routines.

    Parameters
    ----------
        colr : long_pos
            color value

    Returns
    -------
        pixl : long_pos
            color pixel

    Examples
    --------
        >>> pixl = fl_get_pixel(xfdata.FL_PEACHPUFF)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_get_pixel = library.cfuncproto(
        library.load_so_libforms(), "fl_get_pixel",\
        cty.c_ulong, [xfdata.FL_COLOR],\
        """long unsigned int fl_get_pixel(FL_COLOR col)""")
    library.check_if_initialized()
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(colr, ulcolr)
    retval = _fl_get_pixel(ulcolr)
    return retval


fl_get_flcolor = fl_get_pixel


def fl_get_icm_color(colr):
    """fl_get_icm_color(colr)
    
    Queries the internal colormap handled by XForms, returning red, green
    and blue values corresponding to color index. Note that it does not
    communicate with the X server, it only return information about the
    internal colormap, which is made known to the X server by the
    initialization routine fl_initialize().

    Parameters
    ----------
        colr : long_pos
            color value

    Returns
    -------
        r : int
            red value
        g : int
            green value
        b : int
            blue value

    Examples
    --------
        >>> red, green, blue = fl_get_icm_color(xfdata.FL_OLIVE)

    API_diversion
    ----------
        API changed from XForms, upstream was fl_get_icm_color(colr, r, g, b)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_get_icm_color = library.cfuncproto(
        library.load_so_libforms(), "fl_get_icm_color",\
        None, [xfdata.FL_COLOR, cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
        """void fl_get_icm_color(FL_COLOR col, int * r, int * g, int * b)""")
    library.check_if_initialized()
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    r, pr = library.make_int_and_pointer()
    g, pg = library.make_int_and_pointer()
    b, pb = library.make_int_and_pointer()
    library.keep_elem_refs(colr, ulcolr, r, g, b, pr, pg, pb)
    _fl_get_icm_color(ulcolr, pr, pg, pb)
    return r.value, g.value, b.value


def fl_set_icm_color(colr, r, g, b):
    """fl_set_icm_color(colr, r, g, b)
    
    Changes the internal colormap handled by XForms, setting a color index
    using a red, green and blue values' combination. You have to call
    fl_set_icm_color() before fl_initialize() to change XForms's default
    colormap. Note that it does not communicate with the X server, it only
    populate the internal colormap, which is made known to the X server by
    the initialization routine fl_initialize().

    Parameters
    ----------
        colr : long_pos
            color value
        r : int
            value for red
        g : int
            value for green
        b : int
            value for blue

    Examples
    --------
        >>> fl_set_icm_color(xfdata.FL_FREE_COL8, 75, 150, 225)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK
        Precondition: to be called before fl_initialize() ?

    """
    _fl_set_icm_color = library.cfuncproto(
        library.load_so_libforms(), "fl_set_icm_color",\
        None, [xfdata.FL_COLOR, cty.c_int, cty.c_int, cty.c_int],\
        """void fl_set_icm_color(FL_COLOR col, int r, int g, int b)""")
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    ir = library.convert_to_int(r)
    ig = library.convert_to_int(g)
    ib = library.convert_to_int(b)
    library.keep_elem_refs(colr, ulcolr, r, g, b, ir, ig, ib)
    _fl_set_icm_color(ulcolr, ir, ig, ib)


def fl_color(colr):
    """fl_color(colr)
    
    Sets the foreground color in the XForms library's default Graphics
    Context (gc[0]).

    Parameters
    ----------
        colr : long_pos
            color value

    Examples
    --------
        >>> fl_color(xfdata.FL_ORANGE)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_color = library.cfuncproto(
        library.load_so_libforms(), "fl_color",\
        None, [xfdata.FL_COLOR],\
        """void fl_color(FL_COLOR col)""")
    library.check_if_initialized()
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(colr, ulcolr)
    _fl_color(ulcolr)


def fl_bk_color(colr):
    """fl_bk_color(colr)
    
    Sets the background color in the default Graphics Context (gc[0]).

    Parameters
    ----------
        colr : long_pos
            color value

    Examples
    --------
        >>> fl_bk_color(xfdata.FL_MEDIUMORCHID)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_bk_color = library.cfuncproto(
        library.load_so_libforms(), "fl_bk_color",\
        None, [xfdata.FL_COLOR],\
        """void fl_bk_color(FL_COLOR col)""")
    library.check_if_initialized()
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(colr, ulcolr)
    _fl_bk_color(ulcolr)


def fl_textcolor(colr):
    """fl_textcolor(colr)
    
    Sets the foreground color for text in the default Graphics Context (gc[0]).

    Parameters
    ----------
        colr : long_pos
            color value

    Examples
    --------
        >>> fl_textcolor(xfdata.FL_LIGHTCORAL)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_textcolor = library.cfuncproto(
        library.load_so_libforms(), "fl_textcolor",\
        None, [xfdata.FL_COLOR],\
        """void fl_textcolor(FL_COLOR col)""")
    library.check_if_initialized()
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(colr, ulcolr)
    _fl_textcolor(ulcolr)


def fl_bk_textcolor(colr):
    """fl_bk_textcolor(colr)

    Sets the background color for text in the default Graphics Context
    (gc[0]).

    Parameters
    ----------
        colr : long_pos
            color value

    Examples
    --------
        >>> fl_bk_textcolor(xfdata.FL_IVORY)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_bk_textcolor = library.cfuncproto(
        library.load_so_libforms(), "fl_bk_textcolor",\
        None, [xfdata.FL_COLOR],\
        """void fl_bk_textcolor(FL_COLOR col)""")
    library.check_if_initialized()
    library.checknonfatal_allowed_value_in_list(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(colr, ulcolr)
    _fl_bk_textcolor(ulcolr)


def fl_set_gamma(r, g, b):
    """fl_set_gamma(r, g, b)
    
    Adjusts the brightness of the builtin colors. Larger the value,
    brighter the colors.

    Parameters
    ----------
        r : float
            gamma value for red. By default gamma is 1.0
        g : float
            gamma value for green. By default gamma is 1.0
        b : float
            gamma value for blue. By default gamma is 1.0

    Examples
    --------
        >>> fl_set_gamma(2.0, 2.0, 2.0)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK
        Precondition: to be called before fl_initialize()

    """
    _fl_set_gamma = library.cfuncproto(
        library.load_so_libforms(), "fl_set_gamma",\
        None, [cty.c_double, cty.c_double, cty.c_double],\
        """void fl_set_gamma(double r, double g, double b)""")
    fr = library.convert_to_double(r)
    fg = library.convert_to_double(g)
    fb = library.convert_to_double(b)
    library.keep_elem_refs(r, fr, g, fg, b, fb)
    _fl_set_gamma(fr, fg, fb)


# fl_show_errors(y) function placeholder (backwards)


# TODO: verify if they are necessary in python
# Some macros

def FL_max(a, b):
    if (a > b):
        return a
    else:
        return b


def FL_min(a, b):
    if (a < b):
        return a
    else:
        return b


def FL_abs(a):
    if (a > 0):
        return a
    else:
        return (-a)


def FL_nint(a):
    if int(a) > 0:
        return (a + 0.5)
    else:
        return (a - 0.5)


def FL_clamp(a, amin, amax):
    if (a < amin):
        return amin
    elif (a > amax):
        return amax
    else:
        return a


def FL_crnd(a):
    if a > 0:             # FL_Coord(a)
        return (a + 0.5)
    else:
        return (a - 0.5)


# utilities for new objects

def fl_add_object(pFlForm, pFlObject):
    """fl_add_object(pFlForm, pFlObject)
    
    The object remains available (except if it is an object that marks the
    start or end of a group) and can be added again to the same or another
    form later. Normally, this function is used in object classes to add a
    newly created object to a form. It may not be used for objects
    representing the start or end of a group.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form which an object will be added to
        pFlObject : pointer to xfdata.FL_OBJECT
            object to be added

    Examples
    --------
        >>> fl_add_object(pform2, pobjnew2)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_add_object = library.cfuncproto(
        library.load_so_libforms(), "fl_add_object",\
        None, [cty.POINTER(xfdata.FL_FORM), cty.POINTER(xfdata.FL_OBJECT)],
        """void fl_add_object(FL_FORM * form, FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.verify_flobjectptr_type(pFlObject)
    library.keep_elem_refs(pFlForm, pFlObject)
    _fl_add_object(pFlForm, pFlObject)


def fl_addto_form(pFlForm):
    """fl_addto_form(pFlForm)
    
    Reopens a form (after fl_end_form) for adding further objects to it.

    Parameters
    ----------
        pFlForm : pointer to xfdata.FL_FORM
            form

    Returns
    -------
        pFlForm : pointer to xfdata.FL_FORM
            form, or None (on failure)

    Examples
    --------
        >>> form = fl_addto_form(closedform)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_addto_form = library.cfuncproto(
        library.load_so_libforms(), "fl_addto_form",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_FORM)],\
        """FL_FORM * fl_addto_form(FL_FORM * form)""")
    library.check_if_initialized()
    library.verify_flformptr_type(pFlForm)
    library.keep_elem_refs(pFlForm)
    retval = _fl_addto_form(pFlForm)
    return retval


def fl_make_object(objclass, objtype, x, y, w, h, label, py_HandlePtr):
    """fl_make_object(objclass, objtype, x, y, w, h, label, py_HandlePtr)
    
    Makes a custom object.

    Parameters
    ----------
        objclass : int
            class type of object to be made
        objtype : int
            type of the object to be made
        x : int
            horizontal position of object (upper-left corner)
        y : int
            vertical position of object (upper-left corner)
        w : int
            width in coord units
        h : int
            height coord units
        label : str
            text label of object
        py_HandlePtr : python function for handling object, returned value
            referring to fn(pFlObject, num, coord, coord, num, vdata) -> num

    Returns
    -------
        pFlObject : pointer to xfdata.FL_OBJECT
            object made

    Examples
    --------
        >>> def handlecb(pobj, num, w, h, num, vdata):
        >>> ... <something>
        >>> ... return 0
        >>> fl_make_object(...)

    Notes
    -----
        Status: Untested + Doc + NoDemo = NOT OK

    """
    #FL_HANDLEPTR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_OBJECT),
    #    cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord, cty.c_int, cty.c_void_p)
    _fl_make_object = library.cfuncproto(
        library.load_so_libforms(), "fl_make_object",\
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING,
        xfdata.FL_HANDLEPTR],
        """FL_OBJECT * fl_make_object(int objclass, int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label,
           FL_HANDLEPTR handle)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(objclass, xfdata.OBJCLASS_list)
    iobjclass = library.convert_to_int(objclass)
    iobjtype = library.convert_to_int(objtype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    library.verify_function_type(py_HandlePtr)
    c_HandlePtr = xfdata.FL_HANDLEPTR(py_HandlePtr)
    library.keep_cfunc_refs(c_HandlePtr, py_HandlePtr)
    library.keep_elem_refs(objclass, objtype, x, y, w, h, label, iobjclass,
                   iobjtype, ix, iy, iw, ih, slabel)
    retval = _fl_make_object(iobjclass, iobjtype, ix, iy, iw,
                             ih, slabel, c_HandlePtr)
    return retval


def fl_add_child(pFlObject1, pFlObject2):
    """fl_add_child(pFlObject1, pFlObject2)
    
    Makes an object a child of another object. An example is the scrollbar
    object. It has three child objects, a slider and two buttons, which all
    three are childs of the scrollbar object.

    Parameters
    ----------
        pFlObject1 : pointer to xfdata.FL_OBJECT
            father object
        pFlObject2 : pointer to xfdata.FL_OBJECT
            child object to add

    Examples
    --------
        >>> fl_add_child(pobjf, pobjs)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_add_child = library.cfuncproto(
        library.load_so_libforms(), "fl_add_child",\
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_OBJECT)],
        """void fl_add_child(FL_OBJECT * p1, FL_OBJECT * p2)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject1)
    library.verify_flobjectptr_type(pFlObject2)
    library.keep_elem_refs(pFlObject1, pFlObject2)
    _fl_add_child(pFlObject1, pFlObject2)


def fl_set_coordunit(unit):
    """fl_set_coordunit(unit)
    
    Sets the unit for screen coordinates, instead of default ones (pixels).

    Parameters
    ----------
        unit : int
            coord unit type to set. Values (from xfdata.py) FL_COORD_PIXEL,
            FL_COORD_MM, FL_COORD_POINT, FL_COORD_centiMM, FL_COORD_centiPOINT

    Examples
    --------
        >>> fl_set_coordunit(xfdata.FL_COORD_MM)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_coordunit = library.cfuncproto(
        library.load_so_libforms(), "fl_set_coordunit",\
        None, [cty.c_int],\
        """void fl_set_coordunit(int u)""")
    library.check_if_initialized()
    library.checkfatal_allowed_value_in_list(unit, xfdata.COORDUNIT_list)
    iunit = library.convert_to_int(unit)
    library.keep_elem_refs(unit, iunit)
    _fl_set_coordunit(iunit)


def fl_set_border_width(bw):
    """fl_set_border_width(bw)

    Sets the width of the border.

    Parameters
    ----------
        bw : int
            value of border width. If it is a negative number, all objects
            appear to have a softer appearance.

    Examples
    --------
        >>> fl_set_border_width(-3)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_set_border_width = library.cfuncproto(
        library.load_so_libforms(), "fl_set_border_width",\
        None, [cty.c_int],\
        """void fl_set_border_width(int bw)""")
    ibw = library.convert_to_int(bw)
    library.keep_elem_refs(bw, ibw)
    _fl_set_border_width(ibw)


def fl_set_scrollbar_type(sbtype):
    """fl_set_scrollbar_type(sbtype)
    
    Sets the type of a scrollbar.

    Parameters
    ----------
        sbtype : int
            type of scrollbar. Values (from xfdata.py) FL_VERT_SCROLLBAR,
            FL_HOR_SCROLLBAR, FL_VERT_THIN_SCROLLBAR, FL_HOR_THIN_SCROLLBAR,
            FL_VERT_NICE_SCROLLBAR, FL_HOR_NICE_SCROLLBAR,
            FL_VERT_PLAIN_SCROLLBAR, FL_HOR_PLAIN_SCROLLBAR,
            FL_HOR_BASIC_SCROLLBAR, FL_VERT_BASIC_SCROLLBAR,
            FL_NORMAL_SCROLLBAR, FL_THIN_SCROLLBAR, FL_NICE_SCROLLBAR,
            FL_PLAIN_SCROLLBAR

    Examples
    --------
        >>> fl_set_scrollbar_type(xfdata.FL_VERT_BASIC_SCROLLBAR)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_scrollbar_type = library.cfuncproto(
        library.load_so_libforms(), "fl_set_scrollbar_type",\
        None, [cty.c_int],\
        """void fl_set_scrollbar_type(int t)""")
    library.checkfatal_allowed_value_in_list(sbtype, xfdata.SCROLLTYPE_list)
    isbtype = library.convert_to_int(sbtype)
    library.keep_elem_refs(sbtype, isbtype)
    _fl_set_scrollbar_type(isbtype)


def fl_set_thinscrollbar(yesno):
    """fl_set_thinscrollbar(yesno)
    
    Sets if scrollbar's type is thin or normal.

    Parameters
    ----------
        yesno : int
            flag if thin scrollbar or not. Values 1 (for thin) or 0 (for
            normal)

    Examples
    --------
        >>> fl_set_thinscrollbar(1)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    if yesno:
        sbtype = xfdata.FL_THIN_SCROLLBAR
    else:
        sbtype = xfdata.FL_NORMAL_SCROLLBAR
    fl_set_scrollbar_type(sbtype)


def fl_flip_yorigin():
    """fl_flip_yorigin()
    
    Sets the origin of XForms coordinates at the lower-left corner of the
    form (instead of default upper-left corner).

    Examples
    --------
        >>> fl_flip_yorigin()

    Notes
    -----
        Status: Tested + Doc + Demo = OK
        Precondition: to be called before fl_initialize()

    """
    _fl_flip_yorigin = library.cfuncproto(
        library.load_so_libforms(), "fl_flip_yorigin",\
        None, [],\
        """void fl_flip_yorigin()""")
    _fl_flip_yorigin()


def fl_get_coordunit():
    """fl_get_coordunit()
    
    Obtains the unit used for screen coordinates.

    Returns
    -------
        cunit : int
            current coordinates unit (e.g. xfdata.FL_COORD_MM,
            xfdata.FL_COORD_centiPOINT, etc..)

    Examples
    --------
        >>> cunit = fl_get_coordunit()

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_get_coordunit = library.cfuncproto(
            library.load_so_libforms(), "fl_get_coordunit",\
            cty.c_int, [],\
            """int fl_get_coordunit()""")
    library.check_if_initialized()
    retval = _fl_get_coordunit()
    return retval


def fl_get_border_width():
    """fl_get_border_width()
    
    Obtains the width of border.

    Returns
    -------
        bw : int
            borderwidth

    Examples
    --------
        >>> bdw = fl_get_border_width()

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_get_border_width = library.cfuncproto(
        library.load_so_libforms(), "fl_get_border_width",\
        cty.c_int, [],\
        """int fl_get_border_width()""")
    library.check_if_initialized()
    retval = _fl_get_border_width()
    return retval


# misc. routines

def fl_ringbell(percent):
    """fl_ringbell(percent)
    
    Sounds the keyboard ringbell (if capable). Note that not all
    keyboards support volume variations.

    Parameters
    ----------
        percent : int
            volume value for the bell. Values from -100 (minimum, off), to
            100 (max), 0 is default.

    Examples
    --------
        >>> fl_ringbell(50)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_ringbell = library.cfuncproto(
        library.load_so_libforms(), "fl_ringbell",\
        None, [cty.c_int],\
        """void fl_ringbell(int percent)""")
    library.check_if_initialized()
    ipercent = library.convert_to_int(percent)
    library.keep_elem_refs(percent, ipercent)
    _fl_ringbell(ipercent)


def fl_gettime():
    """fl_gettime()
    
    Obtains the current time, expressed in seconds and microseconds since
    1st January 1970, 00:00 GMT. It is most useful for computing time
    differences.

    Returns
    -------
        secs : long
            seconds
        msecs : long
            microseconds

    Examples
    --------
        >>> secs, usecs = fl_gettime()

    API_diversion
    ----------
        API changed from XForms, upstream was fl_gettime(sec, usec)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_gettime = library.cfuncproto(
        library.load_so_libforms(), "fl_gettime",\
        None, [cty.POINTER(cty.c_long), cty.POINTER(cty.c_long)],\
        """void fl_gettime(long int * sec, long int * usec)""")
    library.check_if_initialized()
    sec, psec = library.make_long_and_pointer()
    usec, pusec = library.make_long_and_pointer()
    library.keep_elem_refs(sec, usec, psec, pusec)
    _fl_gettime(psec, pusec)
    return sec.value, usec.value


def fl_now():
    """fl_now()
    
    Obtains a string form of the current date and time. The format of the
    string is of the form "Wed Jun 30 21:49:08 1993"

    Returns
    -------
        datetimetxt : str
            current text of date and time

    Examples
    --------
        >>> curdattim = fl_now()

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_now = library.cfuncproto(
        library.load_so_libforms(), "fl_now",\
        xfdata.STRING, [],\
        """const char * fl_now()""")
    library.check_if_initialized()
    retval = _fl_now()
    return retval


def fl_whoami():
    """fl_whoami()
    
    Obtains the user name who is running the application.

    Returns
    -------
        username : str
            text of username

    Examples
    --------
        >>> usertxt = fl_whoami()

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_whoami = library.cfuncproto(
        library.load_so_libforms(), "fl_whoami",\
        xfdata.STRING, [],\
        """const char * fl_whoami()""")
    library.check_if_initialized()
    retval = _fl_whoami()
    return retval


def fl_mouse_button():
    """fl_mouse_button()
    
    Obtains which mouse button was pushed or released. Sometimes an
    application program might need to find out more information about the
    event that triggered a callback, e.g., to implement mouse button number
    sensitive functionalities. This function, if needed, should be called
    from within a callback. If the callback is triggered by a shortcut, the
    function returns the keysym (ascii value if ASCII) of the key plus
    FL_SHORTCUT. For example, if a button has a shortcut <Ctrl>C (ASCII value
    is 3), the button number returned upon activation of the shortcut would
    be xfdata.FL_SHORTCUT + 3. You can use xfdata.FL_SHORTCUT to determine
    if the callback is triggered by a shortcut or not.

    Returns
    -------
        mousebtn : long
            which mouse button was pushed or released (from xfdata, e.g.
            FL_RIGHT_MOUSE, FL_MIDDLE_MOUSE, etc..)

    Examples
    --------
        >>> mousebtn = fl_mouse_button()

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_mouse_button = library.cfuncproto(
        library.load_so_libforms(), "fl_mouse_button",\
        cty.c_long, [],\
        """long int fl_mouse_button()""")
    library.check_if_initialized()
    retval = _fl_mouse_button()
    return retval


fl_mousebutton = fl_mouse_button


# fl_strdup(strng) function placeholder (low-level)


def fl_set_err_logfp(pFile):
    """fl_set_err_logfp(pFile)
    
    Makes the default message handler to log the error to a file instead of
    printing to stderr.

    Parameters
    ----------
        pFile : pointer to FILE
            file opened in "w" mode by fl_popen()

    Examples
    --------
        >>> pfile = fl_popen("myerrlog", "w")
        >>> fl_set_err_logfp(pfile)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    _fl_set_err_logfp = library.cfuncproto(
        library.load_so_libforms(), "fl_set_err_logfp",\
        None, [cty.POINTER(xfdata.FILE)],\
        """void fl_set_err_logfp(FILE * fp)""")
    library.check_if_initialized()
    library.keep_elem_refs(pFile)
    _fl_set_err_logfp(pFile)


# fl_set_error_logfp placeholder (backwards)


def fl_set_error_handler(py_ErrorFunc):
    """fl_set_error_handler(py_ErrorFunc)
    
    Normally the Forms Library reports errors to stderr. This can be avoided
    or modified by registering an error handling function. The library will
    call the user handler function with a string indicating in which function
    an error occured and a formatting string, followed by zero or more
    arguments. To restore the default handler, call the function again with
    user handler set to None. You can call this function anytime and as many
    times as you wish.

    Parameters
    ----------
        py_ErrorFunc : python function for handling error, no return
            function referring to fn(strng, strng)

    Examples
    --------
        >>> def errhandler(funcnam, errmsg):
        >>> ... print "Error caught in %s: %s." % (funcnam, errmsg)
        >>> fl_set_error_handler(errhandler)

    Notes
    -----
        Status: Tested + Doc + NoDemo = OK

    """
    #FL_ERROR_FUNC = cty.CFUNCTYPE(None, xfdata.STRING, xfdata.STRING)
    _fl_set_error_handler = library.cfuncproto(
        library.load_so_libforms(), "fl_set_error_handler",\
        None, [xfdata.FL_ERROR_FUNC],\
        """void fl_set_error_handler(FL_ERROR_FUNC user_func)""")
    library.check_if_initialized()
    library.verify_function_type(py_ErrorFunc)
    c_ErrorFunc = xfdata.FL_ERROR_FUNC(py_ErrorFunc)
    library.keep_cfunc_refs(c_ErrorFunc, py_ErrorFunc)
    retval = _fl_set_error_handler(c_ErrorFunc)
    return retval


# maybe pointless as command line args are not supported in xforms-python's
# fl_initialize()
# commented as it gives a SegFault
#def fl_get_cmdline_args(argnum):
#    """fl_get_cmdline_args(argnum)
#    Obtains command line arguments.
#
#    Parameters
#    ----------
#        argnum : int
#            argument number
#
#    Returns
#    -------
#        argum : pointer to str
#            argument
#
#    Examples
#    --------
#        >>> fl_get_cmdline_args(1)
#
#    Notes
#    -----
#        Status: Untested + Doc + NoDemo = NOT OK
#
#    """
#    _fl_get_cmdline_args = library.cfuncproto(
#        library.load_so_libforms(), "fl_get_cmdline_args",\
#        cty.POINTER(xfdata.STRING), [cty.POINTER(cty.c_int)],\
#        """char * * fl_get_cmdline_args(int * p1)""")
#    library.check_if_initialized()
#    pargnum = cty.cast(argnum, cty.POINTER(cty.c_int))
#    library.keep_elem_refs(argnum, pargnum)
#    retval = _fl_get_cmdline_args(pargnum)
#    return retval


# fl_free function placeholder (low-level)
# fl_malloc function placeholder (low-level)
# fl_calloc function placeholder (low-level)
# fl_realloc function placeholder (low-level)


def fl_msleep(msec):
    """fl_msleep(msec)
    
    Waits for a number of milliseconds (with the best resolution possible
    on your system).

    Parameters
    ----------
        msec : long
            milliseconds to sleep

    Returns
    -------
        flag : int
            0 (on success)

    Examples
    --------
        >>> fl_msleep(200)

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_msleep = library.cfuncproto(
        library.load_so_libforms(), "fl_msleep",\
        cty.c_int, [cty.c_ulong],\
        """int fl_msleep(long unsigned int msec)""")
    library.check_if_initialized()
    ulmsec = library.convert_to_ulong(msec)
    library.keep_elem_refs(msec, ulmsec)
    retval = _fl_msleep(ulmsec)
    return retval


def fl_is_same_object(pFlObject1, pFlObject2):
    """fl_is_same_object(pFlObject1, pFlObject2)
    
    Does a comparison between two objects, if they are the same, or not.

    Parameters
    ----------
        pFlObject1 : pointer to xfdata.FL_OBJECT
            1st object to compare
        pFlObject2 : pointer to xfdata.FL_OBJECT
            2nd object to compare

    Returns
    -------
        flag : int
            0 (if they are different) or non-zero (if they are the same)

    Examples
    --------
        >>> if fl_is_same_object(pobj, pexitobj):
        >>> ... <something>

    Notes
    -----
        Status: Tested + Doc + Demo = OK

    """
    _fl_is_same_object = library.cfuncproto(
        library.load_so_libforms(), "fl_is_same_object", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_is_same_object(FL_OBJECT * obj1, FL_OBJECT * obj2)""")
    library.check_if_initialized()
    library.verify_flobjectptr_type(pFlObject1)
    library.verify_flobjectptr_type(pFlObject2)
    library.keep_elem_refs(pFlObject1, pFlObject2)
    retval = _fl_is_same_object(pFlObject1, pFlObject2)
    return retval

