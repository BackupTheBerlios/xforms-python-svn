#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
        <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""


__docformat__ = "epytext en"    # to be used with epydoc doc


# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked

# ############################################# #
# Interface to XForms shared object libraries   #
# ############################################# #

import ctypes as cty
from xformslib import library
from xformslib import xfdata


# exported variable 
FL_EVENT = (cty.POINTER(xfdata.FL_OBJECT)).in_dll(library.load_so_libforms(), 'FL_EVENT')



########################################
# forms.h (Basic.h)
#  Basic definitions and limits.
#  Window system independent prototypes
#  Modify with care
########################################


def FL_IS_UPBOX(boxtype):
    if (boxtype == xfdata.FL_UP_BOX) or \
        (boxtype == xfdata.FL_OVAL3D_UPBOX) or \
        (boxtype == xfdata.FL_ROUNDED3D_UPBOX):
        return True
    else:
        return False


def FL_IS_DOWNBOX(boxtype):
    if (boxtype == xfdata.FL_DOWN_BOX) or \
        (boxtype == xfdata.FL_OVAL3D_DOWNBOX) or \
        (boxtype == xfdata.FL_ROUNDED3D_DOWNBOX):
        return True
    else:
        return False


def FL_TO_DOWNBOX(boxtype):
    if boxtype == xfdata.FL_UP_BOX:
        t1 = xfdata.FL_DOWN_BOX
    elif boxtype == xfdata.FL_ROUNDED3D_UPBOX:
        t1 = xfdata.FL_ROUNDED3D_DOWNBOX
    elif boxtype == xfdata.FL_OVAL3D_UPBOX:
        t1 = xfdata.FL_OVAL3D_DOWNBOX
    else:
        t1 = boxtype
    return t1


def special_style(style):
    if (style >= xfdata.FL_SHADOW_STYLE) and \
     (style <= (xfdata.FL_EMBOSSED_STYLE + xfdata.FL_MAXFONTS)):
        return True
    else:
        return False



# Macro for getting at the object handlers return value

def fl_object_returned(pFlObject):
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    return pFlObject.contents.returned


# IO other than XEvent Q

# TODO: verify what function can open file
def fl_add_io_callback(fd, mask, py_IoCallback, vdata):
    """Registers an input callback function when input is available from fd.

    @param fd: a valid file descriptor in a unix system
    @type fd: int
    @param mask: under what circumstance the input callback
        should be invoked. Values (from xfdata module) i.e. FL_READ,
        FL_WRITE, FL_EXCEPT
    @type mask: int
    @param py_IoCallback: python function to be invoked, no return
    @type py_IoCallback: __ funcname (num, ptr_void) __
    @param vdata: user data argument to be passed to function
    @type vdata: None or long or pointer to xfdata.FL_OBJECT

    @example: def iocb(num, vdata):
    @example: |->| ...
    @example: fdesc = ... function to open file
    @example: fl_add_io_callback(fdesc, xfdata.FL_READ, iocb, None)

    @status: Tested + Doc + NoDemo = OK

    """
    #FL_IO_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
    _fl_add_io_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_add_io_callback", \
        None, [cty.c_int, cty.c_uint, xfdata.FL_IO_CALLBACK, cty.c_void_p],
        """void fl_add_io_callback(int fd, unsigned int mask,
           FL_IO_CALLBACK callback, void * data) """)
    library.check_if_initialized()
    ifd = library.convert_to_int(fd)
    uimask = library.convert_to_uint(mask)
    c_IoCallback = xfdata.FL_IO_CALLBACK(py_IoCallback)
    if vdata is None:
        pvdata = cty.cast(vdata, cty.c_void_p)
    elif isinstance(vdata, long):
        ldata = library.convert_to_long(vdata)
        pvdata = cty.cast(ldata, cty.POINTER(cty.c_long))
    else:
        pvdata = vdata          # it is pFlObject
    library.keep_cfunc_refs(c_IoCallback, py_IoCallback)
    library.keep_elem_refs(fd, ifd, mask, uimask, vdata, pvdata)
    _fl_add_io_callback(ifd, uimask, c_IoCallback, pvdata)


def fl_remove_io_callback(fd, mask, py_IoCallback):
    """Removes the registered callback function when input is available from
    fd.

    @param fd: a valid file descriptor in a unix system
    @type fd: int
    @param mask: under what circumstance the input callback should be removed.
        Values (from xfdata module) FL_READ, FL_WRITE, FL_EXCEPT
    @type mask: int
    @param py_IoCallback: python function to be removed, no return
    @type py_IoCallback: __ funcname (num, ptr_void) __

    @example: def iocb(num, vdata):
    @example: |->| ...
    @example: fdesc = ... function to open file
    @example: fl_remove_io_callback(fdesc, xfdata.FL_READ, iocb)

    @status: Tested + Doc + NoDemo = OK

    """
    #FL_IO_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
    _fl_remove_io_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_remove_io_callback", \
        None, [cty.c_int, cty.c_uint, xfdata.FL_IO_CALLBACK], \
        """void fl_remove_io_callback(int fd, unsigned int mask,
           FL_IO_CALLBACK cb) """)
    library.check_if_initialized()
    library.check_admitted_listvalues(mask, xfdata.ASYNCIO_list)
    ifd = library.convert_to_int(fd)
    uimask = library.convert_to_uint(mask)
    c_IoCallback = xfdata.FL_IO_CALLBACK(py_IoCallback)
    library.keep_cfunc_refs(c_IoCallback, py_IoCallback)
    library.keep_elem_refs(fd, ifd, mask, uimask)
    _fl_remove_io_callback(ifd, uimask, c_IoCallback)


# signals

def fl_add_signal_callback(sglnum, py_SignalHandler, vdata):
    """Handles the receipt of a signal by registering a callback function that
    gets called when a signal is caught (only 1 function per signal).

    @param sglnum: signal number. Values (from signal module) e.g. SIGALRM,
        SIGINT, ...
    @type sglnum: int
    @param py_SignalHandler: python function to be invoked after catching the
        signal, no return
    @type py_SignalHandler: __ funcname (num, ptr_void) __
    @param vdata: argument to be passed to function
    @type vdata: None or long or pointer to xfdata.FL_OBJECT

    @example: def sglhandl(numsgl, vdata):
    @example: |->| ...
    @example: fl_add_signal_callback(signal.SIGALRM, sglhandl, None)

    @status: Tested + Doc + NoDemo = OK

    """
    #FL_SIGNAL_HANDLER = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
    _fl_add_signal_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_add_signal_callback", \
        None, [cty.c_int, xfdata.FL_SIGNAL_HANDLER, cty.c_void_p], \
        """void fl_add_signal_callback(int s, FL_SIGNAL_HANDLER cb,
           void * data) """)
    library.check_if_initialized()
    isglnum = library.convert_to_int(sglnum)
    c_SignalHandler = xfdata.FL_SIGNAL_HANDLER(py_SignalHandler)
    if vdata is None:
        pvdata = cty.cast(vdata, cty.c_void_p)
    elif isinstance(vdata, long):
        ldata = library.convert_to_long(vdata)
        pvdata = cty.cast(ldata, cty.POINTER(cty.c_long))
    else:
        pvdata = vdata          # it is pFlObject
    library.keep_cfunc_refs(c_SignalHandler, py_SignalHandler)
    library.keep_elem_refs(sglnum, isglnum, vdata, pvdata)
    _fl_add_signal_callback(isglnum, c_SignalHandler, pvdata)


def fl_remove_signal_callback(sglnum):
    """Removes a previously registered callback function related to a signal.

    @param sglnum: signal number. Values (from signal module) e.g. SIGALRM,
        SIGINT, ...
    @type sglnum: int

    @example: fl_remove_signal_callback(signal.SIGALRM)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_remove_signal_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_remove_signal_callback", \
        None, [cty.c_int], \
        """void fl_remove_signal_callback(int s) """)
    library.check_if_initialized()
    isglnum = library.convert_to_int(sglnum)
    library.keep_elem_refs(sglnum, isglnum)
    _fl_remove_signal_callback(isglnum)


def fl_signal_caught(sglnum):
    """Informs the main loop of the delivery of the particular signal. The
    signal is received by the application program.

    @param sglnum: signal number. Values (from signal module) e.g. SIGALRM,
        SIGINT, ...
    @type sglnum: int

    @example: fl_signal_caught(signal.SIGALRM)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_signal_caught = library.cfuncproto(
        library.load_so_libforms(), "fl_signal_caught", \
        None, [cty.c_int], \
        """void fl_signal_caught(int s) """)
    library.check_if_initialized()
    isglnum = library.convert_to_int(sglnum)
    library.keep_elem_refs(sglnum, isglnum)
    _fl_signal_caught(isglnum)


def fl_app_signal_direct(flag):
    """Changes the default behavior of the built-in signal facilities (to
    be called with a true value for flag prior to any use of
    fl_add_signal_callback)

    @param flag: flag to disable/enable signal. Values 0 (disabled) or 1
        (enabled)
    @type flag: int

    @example: fl_app_signal_direct(1)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_app_signal_direct = library.cfuncproto(
        library.load_so_libforms(), "fl_app_signal_direct", \
        None, [cty.c_int], \
        """void fl_app_signal_direct(int y) """)
    library.check_if_initialized()
    iflag = library.convert_to_int(flag)
    library.keep_elem_refs(flag, iflag)
    _fl_app_signal_direct(iflag)


# timeouts

def fl_add_timeout(msec, py_TimeoutCallback, vdata):
    """Adds a timeout callback after a specified elapsed time.

    @param msec: time elapsed in milliseconds
    @type msec: long
    @param py_TimeoutCallback: python function to be invoked, no return
    @type py_TimeoutCallback: __ funcname (num, ptr_void) __
    @param vdata: user data to be passed to function
    @type vdata: None or long or pointer to xfdata.FL_OBJECT

    @return: timer number id
    @rtype: int

    @example: def timeoutcb(num, vdata):
    @example: |->| ...
    @example: timnum = fl_add_timeout(100, timeoutcb, None)

    @status: Tested + Doc + Demo = OK

    """
    #FL_TIMEOUT_CALLBACK = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
    _fl_add_timeout = library.cfuncproto(
        library.load_so_libforms(), "fl_add_timeout", \
        cty.c_int, [cty.c_long, xfdata.FL_TIMEOUT_CALLBACK, cty.c_void_p],
        """int fl_add_timeout(long int msec,
           FL_TIMEOUT_CALLBACK callback, void * data) """)
    library.check_if_initialized()
    lmsec = library.convert_to_long(msec)
    if vdata is None:
        pvdata = cty.cast(vdata, cty.c_void_p)
    elif isinstance(vdata, long):
        ldata = library.convert_to_long(vdata)
        pvdata = cty.cast(ldata, cty.POINTER(cty.c_long))
    else:
        pvdata = vdata          # it is pFlObject
    c_TimeoutCallback = xfdata.FL_TIMEOUT_CALLBACK(py_TimeoutCallback)
    library.keep_cfunc_refs(c_TimeoutCallback, py_TimeoutCallback)
    library.keep_elem_refs(msec, lmsec, vdata, pvdata)
    retval = _fl_add_timeout(lmsec, c_TimeoutCallback, pvdata)
    return retval


def fl_remove_timeout(idnum):
    """Removes a timeout callback function (created with fl_add_timeout).

    @param idnum: timeout number id
    @type idnum: int

    @example: fl_remove_timeout(timnum)

    @status: Tested + Doc + Demo = OK

    """
    _fl_remove_timeout = library.cfuncproto(
        library.load_so_libforms(), "fl_remove_timeout", \
        None, [cty.c_int], \
        """void fl_remove_timeout(int id) """)
    library.check_if_initialized()
    iidnum = library.convert_to_int(idnum)
    library.keep_elem_refs(idnum, iidnum)
    _fl_remove_timeout(iidnum)


# Basic public routine prototypes

def fl_library_version():
    """Returns consolidated, major and minor version informations.

    @return: version_rev (computed as 1000 * version + revision), version
        (e.g. 1 in 1.x.yy), revision (e.g. 0 in x.0.yy)
    @rtype: int, int, int

    @example: compver, ver, rev = fl_library_version()

    @attention: API change from XForms - upstream was fl_library_version(ver,
        rev)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_library_version = library.cfuncproto(
        library.load_so_libforms(), "fl_library_version", \
        cty.c_int, [cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)], \
        """int fl_library_version(int * ver, int * rev) """)
    library.check_if_initialized()
    ver, pver = library.make_int_and_pointer()
    rev, prev = library.make_int_and_pointer()
    library.keep_elem_refs(ver, rev, pver, prev)
    retval = _fl_library_version(pver, prev)
    return retval, ver.value, rev.value


# Generic routines that deal with FORMS

def fl_bgn_form(formtype, w, h):
    """Starts the definition of a form call.

    @param formtype: type of box that is used as a background. Values (from
        xfdata module) FL_NO_BOX, FL_UP_BOX, FL_DOWN_BOX, FL_BORDER_BOX,
        FL_SHADOW_BOX, FL_FRAME_BOX, FL_ROUNDED_BOX, FL_EMBOSSED_BOX,
        FL_FLAT_BOX, FL_RFLAT_BOX, FL_RSHADOW_BOX, FL_OVAL_BOX,
        FL_ROUNDED3D_UPBOX, FL_ROUNDED3D_DOWNBOX, FL_OVAL3D_UPBOX,
        FL_OVAL3D_DOWNBOX, FL_OVAL3D_FRAMEBOX, FL_OVAL3D_EMBOSSEDBOX
    @type formtype: int
    @param w: width of the new form in coord units
    @type w: int
    @param h: height of the new form in coord units
    @type h: int

    @return: form to define (pFlForm)
    @rtype: pointer to xfdata.FL_FORM

    @example: pform = fl_bgn_form(xfdata.FL_UP_BOX, 400, 500)

    @status: Tested + Doc + Demo = OK

    """
    _fl_bgn_form = library.cfuncproto(
        library.load_so_libforms(), "fl_bgn_form", \
        cty.POINTER(xfdata.FL_FORM), [cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord],
        """FL_FORM * fl_bgn_form(int type, FL_Coord w, FL_Coord h) """)
    library.check_if_initialized()
    library.check_admitted_listvalues(formtype, xfdata.BOXTYPE_list)
    iformtype = library.convert_to_int(formtype)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    library.keep_elem_refs(formtype, iformtype, w, iw, h, ih)
    retval = _fl_bgn_form(iformtype, iw, ih)
    return retval


def fl_end_form():
    """Ends the definition for a form call, after all required objects have
    been added to a form call.

    @example: fl_end_form()

    @status: Tested + Doc + Demo = OK

    """
    _fl_end_form = library.cfuncproto(
        library.load_so_libforms(), "fl_end_form", \
        None, [], \
        """void fl_end_form() """)
    library.check_if_initialized()
    _fl_end_form()


def fl_do_forms():
    """Starts the main loop of the program and returns only when the state of
    a FL_OBJECT (that has no callback bound to it) changes.

    @return: object changed (pFlObject)
    @rtype: pointer to xfdata.FL_OBJECT

    @example: while fl_do_forms(): pass

    @status: Tested + Doc + Demo = OK

    """
    _fl_do_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_do_forms", \
        cty.POINTER(xfdata.FL_OBJECT), [], \
        """FL_OBJECT * fl_do_forms() """)
    library.check_if_initialized()
    retval = _fl_do_forms()
    return retval


def fl_check_forms():
    """Returns None immediately unless the state of one of xfdata.FL_OBJECT
    (without a callback bound to it) changed.

    @return: object changed (pFlObject)
    @rtype: pointer to xfdata.FL_OBJECT

    @example: pobj = fl_check_forms()

    @status: Tested + Doc + Demo = OK

    """
    _fl_check_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_check_forms", \
        cty.POINTER(xfdata.FL_OBJECT), [], \
        """FL_OBJECT * fl_check_forms() """)
    library.check_if_initialized()
    retval = _fl_check_forms()
    return retval


def fl_do_only_forms():
    """Starts the main loop of the program and returns only when the state of
    an object changes that has no callback bound to it. It does not handle
    user events generated by application windows opened via fl_winopen() or
    similar routines.

    @return: object changed (pFlObject)
    @rtype: pointer to xfdata.FL_OBJECT

    @example: pobj = fl_do_only_forms()

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_do_only_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_do_only_forms", \
        cty.POINTER(xfdata.FL_OBJECT), [], \
        """FL_OBJECT * fl_do_only_forms() """)
    library.check_if_initialized()
    retval = _fl_do_only_forms()
    return retval


def fl_check_only_forms():
    """Returns None immediately unless the state of one of the object (without
    a callback bound to it) changed. It does not handle user events generated
    by application windows opened via fl_winopen() or similar routines.

    @return: object changed (pFlObject)
    @rtype: pointer to xfdata.FL_OBJECT

    @example: pobj = fl_check_only_forms()

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_check_only_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_check_only_forms", \
        cty.POINTER(xfdata.FL_OBJECT), [], \
        """FL_OBJECT * fl_check_only_forms() """)
    library.check_if_initialized()
    retval = _fl_check_only_forms()
    return retval


def fl_freeze_form(pFlForm):
    """Redraw of a form is temporarily suspended, while changes are being
    made, so all changes made are instead buffered internally.

    @param pFlForm: form not to be re-drawn temporarily
    @type pFlForm: pointer to xfdata.FL_FORM

    @example: fl_freeze_form(pform1)

    @status: Tested + Doc + Demo = OK

    """
    _fl_freeze_form = library.cfuncproto(
        library.load_so_libforms(), "fl_freeze_form", \
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_freeze_form(FL_FORM * form) """)
    library.check_if_initialized()
    library.keep_elem_refs(pFlForm)
    _fl_freeze_form(pFlForm)


def fl_set_focus_object(pFlForm, pFlObject):
    """Sets the input focus in form to object pFlObject.

    @param pFlForm: form whose object has to be focused
    @type pFlForm: pointer to xfdata.FL_FORM
    @param pFlObject: object to be focused
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: fl_set_focus_object(pform, pobj)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_focus_object = library.cfuncproto(
        library.load_so_libforms(), "fl_set_focus_object", \
        None, [cty.POINTER(xfdata.FL_FORM), cty.POINTER(xfdata.FL_OBJECT)], \
        """void fl_set_focus_object(FL_FORM * form, FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlForm, pFlObject)
    _fl_set_focus_object(pFlForm, pFlObject)


fl_set_object_focus = fl_set_focus_object


def fl_get_focus_object(pFlForm):
    """Obtains the object that has the focus on a form.

    @param pFlForm: form that has a focused object in
    @type pFlForm: pointer to xfdata.FL_FORM

    @return: focused object (pFlObject)
    @rtype: pointer to xfdata.FL_OBJECT

    @example: pobj2 = fl_get_focus_object(pform1)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_focus_object = library.cfuncproto(
        library.load_so_libforms(), "fl_get_focus_object", \
        cty.POINTER(xfdata.FL_OBJECT), [cty.POINTER(xfdata.FL_FORM)], \
        """FL_OBJECT * fl_get_focus_object(FL_FORM * form) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlForm)
    retval = _fl_get_focus_object(pFlForm)
    return retval


def fl_reset_focus_object(pFlObject):
    """Resets focus on current object, overriding the xfdata.FL_UNFOCUS
    event.

    @param pFlObject: object towards applying event
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: fl_reset_focus_object(pobj2)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_reset_focus_object = library.cfuncproto(
        library.load_so_libforms(), "fl_reset_focus_object", \
        None, [cty.POINTER(xfdata.FL_OBJECT)], \
        """void fl_reset_focus_object(FL_OBJECT * ob) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_reset_focus_object(pFlObject)


def fl_set_form_atclose(pFlForm, py_FormAtclose, vdata):
    """Calls a callback function before closing the form.

    @param pFlForm: form that receives the message
    @type pFlForm: pointer to xfdata.FL_FORM
    @param py_FormAtclose: python callback function to be called, with
        returning value
    @type py_FormAtclose: __ funcname (pFlForm, ptr_void) -> num __
    @param vdata: user data to be passed to function
    @type vdata: None or long or pointer to xfdata.FL_OBJECT

    @return: old FL_FORM_ATCLOSE function

    @example: def atcolsecb(pform, vdata):
    @example: |->| ...
    @example: |->| return 0
    @example: oldatclosecb = fl_set_form_atclose(pform1, None)

    @status: Tested + Doc + NoDemo = OK

    """
    # FL_FORM_ATCLOSE = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_FORM), \
    #                                 cty.c_void_p)
    _fl_set_form_atclose = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_atclose", \
        xfdata.FL_FORM_ATCLOSE, [cty.POINTER(xfdata.FL_FORM), xfdata.FL_FORM_ATCLOSE,
        cty.c_void_p], \
        """FL_FORM_ATCLOSE fl_set_form_atclose(FL_FORM * form,
           FL_FORM_ATCLOSE fmclose, void * data) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    c_FormAtclose = xfdata.FL_FORM_ATCLOSE(py_FormAtclose)
    if vdata is None:
        pvdata = cty.cast(vdata, cty.c_void_p)
    elif isinstance(vdata, long):
        ldata = library.convert_to_long(vdata)
        pvdata = cty.cast(ldata, cty.POINTER(cty.c_long))
    else:
        pvdata = vdata          # it is pFlObject
    library.keep_cfunc_refs(c_FormAtclose, py_FormAtclose)
    library.keep_elem_refs(pFlForm, vdata, pvdata)
    retval = _fl_set_form_atclose(pFlForm, c_FormAtclose, pvdata)
    return retval


def fl_set_atclose(py_FormAtclose, vdata):
    """Calls a callback function before terminating the application.

    @param py_FormAtclose: python callback function to be called, with
        returning value
    @type py_FormAtclose: __ funcname (pFlForm, ptr_void) -> num __
    @param vdata: user data to be passed to function
    @type vdata: None or long or pointer to xfdata.FL_OBJECT

    @return: old FL_FORM_ATCLOSE function

    @example: def atclose(pform, vdata):
    @example: |->| ...
    @example: |->| return 0
    @example: oldatclosefunc = fl_set_atclose(atclose, None)

    @status: Tested + Doc + NoDemo = OK

    """
    # FL_FORM_ATCLOSE = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_FORM), \
    #                                 cty.c_void_p)
    _fl_set_atclose = library.cfuncproto(
        library.load_so_libforms(), "fl_set_atclose", \
        xfdata.FL_FORM_ATCLOSE, [xfdata.FL_FORM_ATCLOSE, cty.c_void_p], \
        """FL_FORM_ATCLOSE fl_set_atclose(FL_FORM_ATCLOSE fmclose,
           void * data) """)
    library.check_if_initialized()
    c_FormAtclose = xfdata.FL_FORM_ATCLOSE(py_FormAtclose)
    if vdata is None:
        pvdata = cty.cast(vdata, cty.c_void_p)
    elif isinstance(vdata, long):
        ldata = library.convert_to_long(vdata)
        pvdata = cty.cast(ldata, cty.POINTER(cty.c_long))
    else:
        pvdata = vdata          # it is pFlObject
    library.keep_cfunc_refs(c_FormAtclose, py_FormAtclose)
    library.keep_elem_refs(vdata, pvdata)
    retval = _fl_set_atclose(c_FormAtclose, pvdata)
    return retval


def fl_set_form_atactivate(pFlForm, py_FormAtactivate, vdata):
    """Register a callback that is called when activation status of a forms
    is enabled.

    @param pFlForm: activated form
    @type pFlForm: pointer to xfdata.FL_FORM
    @param py_FormAtactivate: python callback function called, no return
    @type py_FormAtactivate: __ funcname (pFlForm, ptr_void) __
    @param vdata: user data to be passed to function
    @type vdata: None or long or pointer to xfdata.FL_OBJECT

    @return: old FL_FORM_ATACTIVATE function

    @example: def atactcb(pform, vdata):
    @example: |->| ...
    @example: oldactfunc = xf.fl_set_form_atdeactivate(pform, atactcb, None)

    @status: Tested + Doc + NoDemo = OK

    """
    #FL_FORM_ATACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_FORM), \
    #                                   cty.c_void_p)
    _fl_set_form_atactivate = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_atactivate", \
        xfdata.FL_FORM_ATACTIVATE, [cty.POINTER(xfdata.FL_FORM),
        xfdata.FL_FORM_ATACTIVATE, cty.c_void_p], \
        """FL_FORM_ATACTIVATE fl_set_form_atactivate(FL_FORM * form,
           FL_FORM_ATACTIVATE cb, void * data) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    c_FormAtactivate = xfdata.FL_FORM_ATACTIVATE(py_FormAtactivate)
    if vdata is None:
        pvdata = cty.cast(vdata, cty.c_void_p)
    elif isinstance(vdata, long):
        ldata = library.convert_to_long(vdata)
        pvdata = cty.cast(ldata, cty.POINTER(cty.c_long))
    else:
        pvdata = vdata          # it is pFlObject
    library.keep_cfunc_refs(c_FormAtactivate, py_FormAtactivate)
    library.keep_elem_refs(pFlForm, vdata, pvdata)
    retval = _fl_set_form_atactivate(pFlForm, c_FormAtactivate, pvdata)
    return retval


def fl_set_form_atdeactivate(pFlForm, py_FormAtdeactivate, vdata):
    """Register a callback that is called when activation status of a forms
    is disabled.

    @param pFlForm: de-activated form
    @type pFlForm: pointer to xfdata.FL_FORM
    @param py_FormAtdeactivate: python callback function called, no return
    @type py_FormAtdeactivate: __ funcname (pFlForm, ptr_void) __
    @param vdata: user data to be passed to function
    @type vdata: None or long or pointer to xfdata.FL_OBJECT

    @return: old FL_FORM_ATDEACTIVATE function

    @example: def atdeactcb(pform, vdata):
    @example: |->| ...
    @example: oldatdeactfunc = xf.fl_set_form_atdeactivate(pform,
        atdeactcb, None)

    @status: Tested + Doc + NoDemo = OK

    """
    #FL_FORM_ATDEACTIVATE = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_FORM), \
    #                                     cty.c_void_p)
    _fl_set_form_atdeactivate = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_atdeactivate", \
        xfdata.FL_FORM_ATDEACTIVATE, [cty.POINTER(xfdata.FL_FORM),
        xfdata.FL_FORM_ATDEACTIVATE, cty.c_void_p], \
        """FL_FORM_ATDEACTIVATE fl_set_form_atdeactivate(FL_FORM * form,
           FL_FORM_ATDEACTIVATE cb, void * data) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    c_FormAtdeactivate = xfdata.FL_FORM_ATDEACTIVATE(py_FormAtdeactivate)
    if vdata is None:
        pvdata = cty.cast(vdata, cty.c_void_p)
    elif isinstance(vdata, long):
        ldata = library.convert_to_long(vdata)
        pvdata = cty.cast(ldata, cty.POINTER(cty.c_long))
    else:
        pvdata = vdata          # it is pFlObject
    library.keep_cfunc_refs(c_FormAtdeactivate, py_FormAtdeactivate)
    library.keep_elem_refs(pFlForm, vdata, pvdata)
    retval = _fl_set_form_atdeactivate(pFlForm, c_FormAtdeactivate, pvdata)
    return retval


def fl_unfreeze_form(pFlForm):
    """Reverts previous freeze (set with fl_freeze_form function), all
    changes made in the meantime in a form are drawn at once.

    @param pFlForm: form to be re-drawn after freezing
    @type pFlForm: pointer to xfdata.FL_FORM

    @example: fl_unfreeze_form(pform)

    @status: Tested + Doc + Demo = OK

    """
    _fl_unfreeze_form = library.cfuncproto(
        library.load_so_libforms(), "fl_unfreeze_form", \
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_unfreeze_form(FL_FORM * form) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlForm)
    _fl_unfreeze_form(pFlForm)


def fl_deactivate_form(pFlForm):
    """
    fl_deactivate_form(pFlForm)

    Deactivates form temporarily, without hiding it, but not allowing a user
    to interact with elements contained in form (buttons, etc.).

    @param pFlForm: form to be de-activated
    @type pFlForm: pointer to xfdata.FL_FORM

    @example: fl_deactivate_form(pform)

    @status: Tested + Doc + Demo = OK

    """
    _fl_deactivate_form = library.cfuncproto(
        library.load_so_libforms(), "fl_deactivate_form", \
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_deactivate_form(FL_FORM * form) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlForm)
    _fl_deactivate_form(pFlForm)


def fl_activate_form(pFlForm):
    """(Re)activates form (deactivated with fl_deactivate_form), allowing the
    user to interact again with elements contained in form (buttons, etc.).

    @param pFlForm: form to be re-activated
    @type pFlForm: pointer to xfdata.FL_FORM

    @example: fl_activate_form(pform)

    @status: Tested + Doc + Demo = OK

    """
    _fl_activate_form = library.cfuncproto(
        library.load_so_libforms(), "fl_activate_form", \
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_activate_form(FL_FORM * form) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlForm)
    _fl_activate_form(pFlForm)


def fl_deactivate_all_forms():
    """De-activates all current forms, forbidding any event/user interaction.

    @example: fl_deactivate_all_forms()

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_deactivate_all_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_deactivate_all_forms", \
        None, [], \
        """void fl_deactivate_all_forms() """)
    library.check_if_initialized()
    _fl_deactivate_all_forms()


def fl_activate_all_forms():
    """(Re)activates all current forms, allowing event/user interaction.

    @example: fl_activate_all_forms()

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_activate_all_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_activate_all_forms", \
        None, [], \
        """void fl_activate_all_forms() """)
    library.check_if_initialized()
    _fl_activate_all_forms()


def fl_freeze_all_forms():
    """All current forms are not temporarily redrawn, while changes are being
    made and are instead buffered internally.

    @example: fl_freeze_all_forms()

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_freeze_all_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_freeze_all_forms", \
        None, [], \
        """void fl_freeze_all_forms() """)
    library.check_if_initialized()
    _fl_freeze_all_forms()


def fl_unfreeze_all_forms():
    """All changes made in the meantime in all current forms are drawn at
    once, reverting previous freeze.

    @example: fl_unfreeze_all_forms()

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_unfreeze_all_forms = library.cfuncproto(
        library.load_so_libforms(), "fl_unfreeze_all_forms", \
        None, [], \
        """void fl_unfreeze_all_forms() """)
    library.check_if_initialized()
    _fl_unfreeze_all_forms()


def fl_scale_form(pFlForm, xsc, ysc):
    """Scales a form and the objects on it in size and position, indicating
    a scaling factor in x- and y-direction (1.1 = 110 percent, 0.5 = 50,
    etc.) with respect to the current size, and reshapes the window.

    @param pFlForm: form to be scaled
    @type pFlForm: pointer to xfdata.FL_FORM
    @param xsc: scaling factor in horizontal direction
    @type xsc: float
    @param ysc: scaling factor in vertical direction
    @type ysc: float

    @example: fl_scale_form(pform, 0.8, 1.2)

    @status: Tested + Doc + Demo = OK

    """
    _fl_scale_form = library.cfuncproto(
        library.load_so_libforms(), "fl_scale_form", \
        None, [cty.POINTER(xfdata.FL_FORM), cty.c_double, cty.c_double], \
        """void fl_scale_form(FL_FORM * form, double xsc, double ysc) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    fxsc = library.convert_to_double(xsc)
    fysc = library.convert_to_double(ysc)
    library.keep_elem_refs(pFlForm, xsc, fxsc, ysc, fysc)
    _fl_scale_form(pFlForm, fxsc, fysc)


def fl_set_form_position(pFlForm, x, y):
    """Sets position of form, when placing a form on the screen with
    xfdata.FL_PLACE_GEOMETRY as place argument.

    @param pFlForm: form whose position is to be set
    @type pFlForm: pointer to xfdata.FL_FORM
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int

    @example: fl_set_form_position(pform, 125, 250)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_form_position = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_position", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.FL_Coord, xfdata.FL_Coord], \
        """void fl_set_form_position(FL_FORM * form, FL_Coord x,
           FL_Coord y) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    library.keep_elem_refs(pFlForm, x, ix, y, iy)
    _fl_set_form_position(pFlForm, ix, iy)


def fl_set_form_title(pFlForm, title):
    """Changes the form title (and the icon name) after it is shown.

    @param pFlForm: form whose title has to be changed
    @type pFlForm: pointer to xfdata.FL_FORM
    @param title: new title text for the form
    @type title: str

    @example: fl_set_form_title(pform, "My great form")

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_form_title = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_title", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.STRING], \
        """void fl_set_form_title(FL_FORM * form, const char * name) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    stitle = library.convert_to_string(title)
    library.keep_elem_refs(pFlForm, title, stitle)
    _fl_set_form_title(pFlForm, stitle)


def fl_set_app_mainform(pFlForm):
    """Designates the main form. By default, the main form is set
    automatically by the library to the first full-bordered form shown.

    @param pFlForm: form to be set as main one
    @type pFlForm: pointer to xfdata.FL_FORM

    @example: fl_set_app_mainform(pform2)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_app_mainform = library.cfuncproto(
        library.load_so_libforms(), "fl_set_app_mainform",
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_set_app_mainform(FL_FORM * form) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlForm)
    _fl_set_app_mainform(pFlForm)


def fl_get_app_mainform():
    """Returns the current mainform.

    @return: main form (pFlForm)
    @rtype: pointer to xfdata.FL_FORM

    @example: fl_get_app_mainform()

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_app_mainform = library.cfuncproto(
        library.load_so_libforms(), "fl_get_app_mainform",
        cty.POINTER(xfdata.FL_FORM), [], \
        """FL_FORM * fl_get_app_mainform() """)
    library.check_if_initialized()
    retval = _fl_get_app_mainform()
    return retval


def fl_set_app_nomainform(flag):
    """In some situations, either because the concept of an application
    main form does not apply (for example, an application might have
    multiple full-bordered windows), or under some (buggy) window managers,
    the designation of a main form may cause stacking order problems. To
    workaround these, it can disable the designation of a main form (must
    be called before any full-bordered form is shown)

    @param flag: flag to disable/enable mainform designation. Values 1 (to
        disable) or 0 (to enable)
    @type flag: int

    @example: fl_set_app_nomainform(1)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_app_nomainform = library.cfuncproto(
        library.load_so_libforms(), "fl_set_app_nomainform",
        None, [cty.c_int], \
        """void fl_set_app_nomainform(int flag) """)
    library.check_if_initialized()
    iflag = library.convert_to_int(flag)
    library.keep_elem_refs(flag, iflag)
    _fl_set_app_nomainform(iflag)


def fl_set_form_callback(pFlForm, py_FormCallbackPtr, vdata):
    """Sets the callback function bound to an entire form. Whenever
    fl_do_forms() or fl_check_forms() would return an object in form they
    call the routine callback instead, with the object as an argument. So
    with each form you can associate its own callback routine. For objects
    that have their own callbacks, the object callbacks have priority over
    the form callback.

    @param pFlForm: form whose callback has to be set
    @type pFlForm: pointer to xfdata.FL_FORM
    @param py_FormCallbackPtr: python callback to be set, no return
    @type py_FormCallbackPtr: __ funcname (pFlObject, ptr_void) __
    @param vdata: user data to be passed to function
    @type vdata: None or long or pointer to xfdata.FL_OBJECT

    @example: def formcb(pobj, vdata):
    @example: |->| ...
    @example: fl_set_form_callback(pform, formcb, None)

    @status: Tested + Doc + Demo = OK

    """
    #FL_FORMCALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_OBJECT), \
    #                                   cty.c_void_p)
    _fl_set_form_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_callback", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.FL_FORMCALLBACKPTR, \
        cty.c_void_p], \
        """void fl_set_form_callback(FL_FORM * form,
           FL_FORMCALLBACKPTR callback, void * d) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    c_FormCallbackPtr = xfdata.FL_FORMCALLBACKPTR(py_FormCallbackPtr)
    if vdata is None:
        pvdata = cty.cast(vdata, cty.c_void_p)
    elif isinstance(vdata, long):
        ldata = library.convert_to_long(vdata)
        pvdata = cty.cast(ldata, cty.POINTER(cty.c_long))
    else:
        pvdata = vdata          # it is pFlObject
    library.keep_cfunc_refs(c_FormCallbackPtr, py_FormCallbackPtr)
    library.keep_elem_refs(pFlForm, vdata, pvdata)
    _fl_set_form_callback(pFlForm, c_FormCallbackPtr, pvdata)


fl_set_form_call_back = fl_set_form_callback


def fl_set_form_size(pFlForm, w, h):
    """Sets the size of form.

    @param pFlForm: form whose size has to be set
    @type pFlForm: pointer to xfdata.FL_FORM
    @param w: width of form in coord units
    @type w: int
    @param h: height of form in coord units
    @type h: int

    @example: fl_set_form_size(pform, 200, 200)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_form_size = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_size", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.FL_Coord,
        xfdata.FL_Coord], \
        """void fl_set_form_size(FL_FORM * form, FL_Coord w, FL_Coord h)""")
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    library.keep_elem_refs(pFlForm, w, iw, h, ih)
    _fl_set_form_size(pFlForm, iw, ih)


def fl_set_form_hotspot(pFlForm, x, y):
    """Sets the position of the hotspot, for showing a form so that a
    particular point is under the mouse. You have to use
    xfdata.FL_PLACE_HOTSPOT as place argument in fl_show_form().

    @param pFlForm: form to be set
    @type pFlForm: pointer to xfdata.FL_FORM
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int

    @example: fl_set_form_hotspot(pform, 300, 50)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_form_hotspot = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_hotspot", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.FL_Coord,
        xfdata.FL_Coord], \
        """void fl_set_form_hotspot(FL_FORM * form, FL_Coord x,
           FL_Coord y) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    library.keep_elem_refs(pFlForm, x, ix, y, iy)
    _fl_set_form_hotspot(pFlForm, ix, iy)


def fl_set_form_hotobject(pFlForm, pFlObject):
    """Sets the hotspot for showing a form so that a particular object is
    under the mouse. You have to use xfdata.FL_PLACE_HOTSPOT as place
    argument in fl_show_form().

    @param pFlForm: form whose object has to be set
    @type pFlForm: pointer to xfdata.FL_FORM
    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: fl_set_form_hotobject(pform, pobj)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_form_hotobject = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_hotobject", \
        None, [cty.POINTER(xfdata.FL_FORM), cty.POINTER(xfdata.FL_OBJECT)], \
        """void fl_set_form_hotobject(FL_FORM * form, FL_OBJECT * ob) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlForm, pFlObject)
    _fl_set_form_hotobject(pFlForm, pFlObject)


def fl_set_form_minsize(pFlForm, w, h):
    """Sets the minimum size a form can have, if interactive resizing is
    allowed (e.g., by showing the form with xfdata.FL_PLACE_POSITION).

    @param pFlForm: form
    @type pFlForm: pointer to xfdata.FL_FORM
    @param w: width of form in coord units
    @type w: int
    @param h: height of form in coord units
    @type h: int

    @example: fl_set_form_minsize(pform, 200, 300)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_form_minsize = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_minsize", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.FL_Coord, xfdata.FL_Coord], \
        """void fl_set_form_minsize(FL_FORM * form, FL_Coord w, FL_Coord h) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    library.keep_elem_refs(pFlForm, w, iw, h, ih)
    _fl_set_form_minsize(pFlForm, iw, ih)


def fl_set_form_maxsize(pFlForm, w, h):
    """Sets the maximum size a form can have, if interactive resizing is
    allowed (e.g. by showing the form with xfdata.FL_PLACE_POSITION).

    @param pFlForm: form whose size has to be set
    @type pFlForm: pointer to xdata.FL_FORM
    @param w: width of form in coord units
    @type w: int
    @param h: height of form in coord units
    @type h: int

    @example: fl_set_form_maxsize(pform, 400, 450)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_form_maxsize = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_maxsize", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.FL_Coord,
        xfdata.FL_Coord], \
        """void fl_set_form_maxsize(FL_FORM * form, FL_Coord w,
           FL_Coord h) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    library.keep_elem_refs(pFlForm, w, iw, h, ih)
    _fl_set_form_maxsize(pFlForm, iw, ih)


# TODO: find if key mask have to be included
def fl_set_form_event_cmask(pFlForm, cmask):
    """Sets the event compress mask a form can react to.

    @param pFlForm: form
    @type pFlForm: pointer to xfdata.FL_FORM
    @param cmask: event compress mask for form. Values (from xfdata module)
        one or more OR-ed between NoEventMask, KeyPressMask, KeyReleaseMask,
        ButtonPressMask, ButtonReleaseMask, EnterWindowMask, LeaveWindowMask,
        PointerMotionMask, PointerMotionHintMask, Button1MotionMask,
        Button2MotionMask, Button3MotionMask, Button4MotionMask,
        Button5MotionMask, ButtonMotionMask, KeymapStateMask, ExposureMask,
        VisibilityChangeMask, StructureNotifyMask, ResizeRedirectMask,
        SubstructureNotifyMask, SubstructureRedirectMask, FocusChangeMask,
        ColormapChangeMask, OwnerGrabButtonMask, FL_ALL_EVENT, ... ?
    @type cmask: long_pos

    @example: fl_set_form_event_cmask(pform, xfdata.FL_ALL_EVENT)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_form_event_cmask = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_event_cmask", \
        None, [cty.POINTER(xfdata.FL_FORM), cty.c_ulong], \
        """void fl_set_form_event_cmask(FL_FORM * form,
           long unsigned int cmask) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    ulcmask = library.convert_to_ulong(cmask)
    library.keep_elem_refs(pFlForm, cmask, ulcmask)
    _fl_set_form_event_cmask(pFlForm, ulcmask)


def fl_get_form_event_cmask(pFlForm):
    """Returns event compress mask a form can react to.

    @param pFlForm: form
    @type pFlForm: pointer to xfdata.FL_FORM

    @return: event compress mask id
    @rtype: long_pos

    @example: cmaskid = fl_get_form_event_cmask(pform)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_form_event_cmask = library.cfuncproto(
        library.load_so_libforms(), "fl_get_form_event_cmask", \
        cty.c_ulong, [cty.POINTER(xfdata.FL_FORM)], \
        """long unsigned int fl_get_form_event_cmask(FL_FORM * form)""")
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlForm)
    retval = _fl_get_form_event_cmask(pFlForm)
    return retval


def fl_set_form_geometry(pFlForm, x, y, w, h):
    """Sets the geometry (position and size) of a form.

    @param pFlForm: pointer to form to be set
    @type pFlForm: pointer to xfdata.FL_FORM
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int
    @param w: width of form in coord units
    @type w: int
    @param h: height of form in coord units
    @type h: int

    @example: fl_set_form_geometry(pform, 300, 400, 150, 150)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_form_geometry = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_geometry", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord], \
        """void fl_set_form_geometry(FL_FORM * form, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    library.keep_elem_refs(pFlForm, x, ix, y, iy, w, iw, h, ih)
    _fl_set_form_geometry(pFlForm, ix, iy, iw, ih)


fl_set_initial_placement = fl_set_form_geometry


def fl_show_form(pFlForm, place, border, title):
    """Shows the form.

    @param pFlForm: form to be shown
    @type pFlForm: pointer to xfdata.FL_FORM
    @param place: where form has to be placed. Values (from xfdata module)
        FL_PLACE_FREE, FL_PLACE_MOUSE, FL_PLACE_CENTER, FL_PLACE_POSITION,
        FL_PLACE_SIZE, FL_PLACE_GEOMETRY, FL_PLACE_ASPECT, FL_PLACE_FULLSCREEN,
        FL_PLACE_HOTSPOT, FL_PLACE_ICONIC, FL_FREE_SIZE, FL_PLACE_FREE_CENTER,
        FL_PLACE_CENTERFREE
    @type place: int
    @param border: window manager decoration. Values (from xfdata module)
        FL_FULLBORDER, FL_TRANSIENT, FL_NOBORDER
    @type border: int
    @param title: title of form
    @type title: str

    @returns: window id (win)
    @rtype: long_pos

    @example: wind = fl_show_form(pform0, FL_PLACE_FREE, FL_FULLBORDER,
        "MyForm")

    @status: Tested + Doc + Demo = OK

    """
    _fl_show_form = library.cfuncproto(
        library.load_so_libforms(), "fl_show_form",
        xfdata.Window, [cty.POINTER(xfdata.FL_FORM), cty.c_int, cty.c_int,
        xfdata.STRING], \
        """Window fl_show_form(FL_FORM * form, int place, int border,
           const char * name) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.check_admitted_listvalues(place, xfdata.PLACE_list)
    library.check_admitted_listvalues(border, xfdata.DECORATION_list)
    iplace = library.convert_to_int(place)
    iborder = library.convert_to_int(border)
    stitle = library.convert_to_string(title)
    library.keep_elem_refs(pFlForm, place, iplace, border, iborder, title,
                           stitle)
    retval = _fl_show_form(pFlForm, iplace, iborder, stitle)
    return retval


def fl_hide_form(pFlForm):
    """Hides the form.

    @param pFlForm: form to be hidden
    @type pFlForm: pointer to xfdata.FL_FORM

    @example: fl_hide_form(pform0)

    @status: Tested + Doc + Demo = OK

    """
    _fl_hide_form = library.cfuncproto(
        library.load_so_libforms(), "fl_hide_form",
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_hide_form(FL_FORM * form) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlForm)
    _fl_hide_form(pFlForm)


def fl_free_form(pFlForm):
    """Frees the memory used by a form, hiding and deleting it together
    with all its objects.

    @param pFlForm: form to be freed
    @type pFlForm: pointer to xfdata.FL_FORM

    @example: fl_free_form(pform0)

    @status: Tested + Doc + Demo = OK

    """
    _fl_free_form = library.cfuncproto(
        library.load_so_libforms(), "fl_free_form",
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_free_form(FL_FORM * form) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlForm)
    _fl_free_form(pFlForm)


def fl_redraw_form(pFlForm):
    """(Re)draws an entire form.

    @param pFlForm: form to redraw
    @type pFlForm: pointer to xfdata.FL_FORM

    @example: fl_redraw_form(pform0)

    @status: Tested + Doc + Demo = OK

    """
    _fl_redraw_form = library.cfuncproto(
        library.load_so_libforms(), "fl_redraw_form",
        None, [cty.POINTER(xfdata.FL_FORM)], \
        """void fl_redraw_form(FL_FORM * form) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlForm)
    _fl_redraw_form(pFlForm)


def fl_set_form_dblbuffer(pFlForm, flag):
    """Uses double buffering on a per-form basis. Since Xlib doesn't support
    double buffering, XForms library simulates this functionality with pixmap
    bit-bliting. In practice, the effect is hardly distinguishable from double
    buffering and performance is on par with multi-buffering extensions (it is
    slower than drawing into a window directly on most workstations however).
    Bear in mind that a pixmap can be resource hungry, so use this option with
    discretion.

    @param pFlForm: form to set
    @type pFlForm: pointer to xfdata.FL_FORM
    @param flag: flag to disable/enable doublebuffer. Values 0 (disabled) or
        1 (enabled)
    @type flag: int

    @example: fl_set_form_dblbuffer(1)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_form_dblbuffer = library.cfuncproto(
        library.load_so_libforms(), "fl_set_form_dblbuffer", \
        None, [cty.POINTER(xfdata.FL_FORM), cty.c_int], \
        """void fl_set_form_dblbuffer(FL_FORM * form, int y) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    iflag = library.convert_to_int(flag)
    library.keep_elem_refs(pFlForm, flag, iflag)
    _fl_set_form_dblbuffer(pFlForm, iflag)


def fl_prepare_form_window(pFlForm, place, border, title):
    """Creates a window that obeys any and all constraints just as
    fl_show_form() does but remains unmapped (not shown), returning its
    window handle. You need fl_show_form_window() after to show it.

    @param pFlForm: form to display
    @type pFlForm: pointer to xfdata.FL_FORM
    @param place: where has to be placed. Values (from xfdata module)
        FL_PLACE_FREE, FL_PLACE_MOUSE, FL_PLACE_CENTER, FL_PLACE_POSITION,
        FL_PLACE_SIZE, FL_PLACE_GEOMETRY, FL_PLACE_ASPECT, FL_PLACE_FULLSCREEN,
        FL_PLACE_HOTSPOT, FL_PLACE_ICONIC, FL_FREE_SIZE, FL_PLACE_FREE_CENTER,
        FL_PLACE_CENTERFREE
    @type place: int
    @param border: window manager decoration. Values (from xfdata module)
        FL_FULLBORDER, FL_TRANSIENT, FL_NOBORDER
    @type border: int
    @param title: text title of form
    @type title: str

    @returns: window id (win)
    @rtype: long_pos

    @example: wind = fl_prepare_form_window(pform2, FL_PLACE_FREE,
        FL_FULLBORDER, "MyForm")

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_prepare_form_window = library.cfuncproto(
        library.load_so_libforms(), "fl_prepare_form_window", \
        xfdata.Window, [cty.POINTER(xfdata.FL_FORM), cty.c_int, cty.c_int,
        xfdata.STRING], \
        """Window fl_prepare_form_window(FL_FORM * form, int place,
           int border, const char * name) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.check_admitted_listvalues(place, xfdata.PLACE_list)
    library.check_admitted_listvalues(border, xfdata.DECORATION_list)
    iplace = library.convert_to_int(place)
    iborder = library.convert_to_int(border)
    stitle = library.convert_to_string(title)
    library.keep_elem_refs(pFlForm, place, iplace, border, iborder, title, stitle)
    retval = _fl_prepare_form_window(pFlForm, iplace, iborder, stitle)
    return retval


def fl_show_form_window(pFlForm):
    """Maps (shows) a window of form that has been created before with
    fl_prepare_form_window().

    @param pFlForm: form whose window has to be shown
    @type pFlForm: pointer to xfdata.FL_FORM

    @returns: window id (win)
    @rtype: long_pos

    @example: win1 = fl_show_form_window(pform2)

    @status: Tested + Doc + Demo = OK

    """
    _fl_show_form_window = library.cfuncproto(
        library.load_so_libforms(), "fl_show_form_window", \
        xfdata.Window, [cty.POINTER(xfdata.FL_FORM)], \
        """Window fl_show_form_window(FL_FORM * form) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlForm)
    retval = _fl_show_form_window(pFlForm)
    return retval


def fl_adjust_form_size(pFlForm):
    """Similar to fl_fit_object_label, but will do it for all objects and
    has a smaller threshold. Mainly intended for compensation for font size
    variations.

    @param pFlForm: form whose size has to be adjusted
    @type pFlForm: pointer to xfdata.FL_FORM

    @returns: max factor id
    @rtype: float

    @example: mfactor = fl_adjust_form_size(pform)

    @status: Tested + Doc + Demo = OK

    """
    _fl_adjust_form_size = library.cfuncproto(
        library.load_so_libforms(), "fl_adjust_form_size", \
        cty.c_double, [cty.POINTER(xfdata.FL_FORM)], \
        """double fl_adjust_form_size(FL_FORM * form) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlForm)
    retval = _fl_adjust_form_size(pFlForm)
    return retval


def fl_form_is_visible(pFlForm):
    """Returns if form is visible or not.

    @param pFlForm: form to evaluate
    @type pFlForm: pointer to xfdata.FL_FORM

    @returns: visibility state (0 invisible, non-zero visible)
    @rtype: int

    @example: visib = fl_form_is_visible(pform)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_form_is_visible = library.cfuncproto(
        library.load_so_libforms(), "fl_form_is_visible", \
        cty.c_int, [cty.POINTER(xfdata.FL_FORM)], \
        """int fl_form_is_visible(FL_FORM * form) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlForm)
    retval = _fl_form_is_visible(pFlForm)
    return retval


def fl_form_is_iconified(pFlForm):
    """Returns if a form's window is in iconified state or not.

    @param pFlForm: form to evaluate
    @type pFlForm: pointer to xfdata.FL_FORM

    @returns: iconic state (0 not iconified, non-zero iconified)
    @rtype: int

    @example: iconif = fl_form_is_iconified(pform)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_form_is_iconified = library.cfuncproto(
        library.load_so_libforms(), "fl_form_is_iconified", \
        cty.c_int, [cty.POINTER(xfdata.FL_FORM)], \
        """int fl_form_is_iconified(FL_FORM * form) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlForm)
    retval = _fl_form_is_iconified(pFlForm)
    return retval


def fl_register_raw_callback(pFlForm, mask, py_RawCallback):
    """Registers preemptive event handlers. Only one handler is allowed
    for each event pair.

    @param pFlForm: form
    @type pFlForm: pointer to xfdata.FL_FORM
    @param mask: key/button/window event mask (press, release, motion,
        enter, leave etc..). Values (from xfdata module) i.e. KeyPressMask
        and KeyReleaseMask, ButtonPressMask and ButtonReleaseMask,
        EnterWindowMask and LeaveWindowMask, ButtonMotionMask and
        PointerMotionMask, FL_ALL_EVENT
    @type mask: long_pos
    @param py_RawCallback: python callback function, with return value
    @type py_RawCallback: __ funcname (pFlForm, pXEvent) -> num __

    @return: xfdata.FL_RAW_CALLBACK old function

    @example: def rawcb(pform, xev):
    @example: |->| ...
    @example: |->| return 0
    @example: oldrawcb = fl_register_callback(pform3, xfdata.KeyPressMask,
        rawcb)

    @status: Tested + Doc + Demo = OK

    """
    #FL_RAW_CALLBACK = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_FORM), \
    #                                 cty.POINTER(xfdata.XEvent))
    _fl_register_raw_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_register_raw_callback", \
        xfdata.FL_RAW_CALLBACK, [cty.POINTER(xfdata.FL_FORM), cty.c_ulong,
        xfdata.FL_RAW_CALLBACK], \
        """FL_RAW_CALLBACK fl_register_raw_callback(FL_FORM * form,
           long unsigned int mask, FL_RAW_CALLBACK rcb) """)
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    ulmask = library.convert_to_ulong(mask)
    c_RawCallback = xfdata.FL_RAW_CALLBACK(py_RawCallback)
    library.keep_cfunc_refs(c_RawCallback, py_RawCallback)
    library.keep_elem_refs(pFlForm, mask, ulmask)
    retval = _fl_register_raw_callback(pFlForm, ulmask, c_RawCallback)
    return retval


fl_register_call_back = fl_register_raw_callback


def fl_bgn_group():
    """Starts a group of objects definition. It purpose can be e.g. to define
    a series of objects to be hidden or deactivated or to define a series of
    radio buttons.

    @returns: group started (pFlObject)
    @rtype: pointer to xfdata.FL_OBJECT

    @example: group0 = fl_bgn_group()

    @status: Tested + Doc + Demo = OK

    """
    _fl_bgn_group = library.cfuncproto(
        library.load_so_libforms(), "fl_bgn_group", \
        cty.POINTER(xfdata.FL_OBJECT), [], \
        """FL_OBJECT * fl_bgn_group() """)
    library.check_if_initialized()
    retval = _fl_bgn_group()
    return retval


def fl_end_group():
    """Ends a group definition.

    @example: fl_end_group()

    @status: Tested + Doc + Demo = OK

    """
    _fl_end_group = library.cfuncproto(
        library.load_so_libforms(), "fl_end_group", \
        None, [], \
        """void fl_end_group() """)
    library.check_if_initialized()
    _fl_end_group()


def fl_addto_group(pFlObject):
    """Reopens a group (after fl_end_group) to allow addition of further
    objects.

    @param pFlObject: group object to reopen
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: form (pFlForm) or None (on failure)
    @rtype: pointer to xfdata.FL_FORM

    @example: group1 = fl_addto_group(closedgroup)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_addto_group = library.cfuncproto(
        library.load_so_libforms(), "fl_addto_group", \
        cty.POINTER(xfdata.FL_OBJECT), [cty.POINTER(xfdata.FL_OBJECT)], \
        """FL_OBJECT * fl_addto_group(FL_OBJECT * group) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_addto_group(pFlObject)
    return retval


# Routines that deal with FL_OBJECTS

def fl_get_object_objclass(pFlObject):
    """Return the object class of an object. (e.g. button, lightbutton, box,
    nmenu, counter, etc.)

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: objclass id, or -1 (on failure)
    @rtype: int

    @example: obcls = fl_get_object_objclass(pobj)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_objclass = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_objclass", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_get_object_objclass(FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_objclass(pFlObject)
    return retval


def fl_get_object_type(pFlObject):
    """Return the type of an object (e.g. radio button, multiline input,
    normal browser, etc..).

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: type id, or -1 (on failure)
    @rtype: int

    @example: obtype = fl_get_object_type(pobj)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_type = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_type", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_get_object_type(FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_type(pFlObject)
    return retval


def fl_set_object_boxtype(pFlObject, boxtype):
    """Sets the shape of box of an object. Not all possible boxtypes are
    suitable for all types of objects.

    @param pFlObject: object whose boxtype has to be set
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param boxtype: type of the box to be set. Values (from xfdata module)
        FL_NO_BOX, FL_UP_BOX, FL_DOWN_BOX, FL_BORDER_BOX, FL_SHADOW_BOX,
        FL_FRAME_BOX, FL_ROUNDED_BOX, FL_EMBOSSED_BOX, FL_FLAT_BOX,
        FL_RFLAT_BOX, FL_RSHADOW_BOX, FL_OVAL_BOX, FL_ROUNDED3D_UPBOX,
        FL_ROUNDED3D_DOWNBOX, FL_OVAL3D_UPBOX, FL_OVAL3D_DOWNBOX,
        FL_OVAL3D_FRAMEBOX, FL_OVAL3D_EMBOSSEDBOX
    @type boxtype: int

    @example: fl_set_object_boxtype(ptextobj, xfdata.FL_BORDER_BOX)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_object_boxtype = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_boxtype", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_set_object_boxtype(FL_OBJECT * ob, int boxtype) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(boxtype, xfdata.BOXTYPE_list)
    iboxtype = library.convert_to_int(boxtype)
    library.keep_elem_refs(pFlObject, boxtype, iboxtype)
    _fl_set_object_boxtype(pFlObject, iboxtype)


def fl_get_object_boxtype(pFlObject):
    """Returns the current boxtype of an object (e.g. no box, up box,
    shadow box, etc..).

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: boxtype id or -1 (on failure)
    @rtype: int

    @example: boxtp = fl_get_object_boxtype(ptextobj)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_boxtype = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_boxtype", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_get_object_boxtype(FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_boxtype(pFlObject)
    return retval


def fl_set_object_bw(pFlObject, bw):
    """Sets the borderwidth of an object. If requested borderwidth is 0, -1
    is used. If set to a negative number, all objects appear to have a softer
    appearance.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param bw: borderwidth of object to be set
    @type bw: int

    @example: fl_set_object_bw(pobj, 2)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_object_bw = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_bw", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_set_object_bw(FL_OBJECT * ob, int bw) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ibw = library.convert_to_int(bw)
    library.keep_elem_refs(pFlObject, bw, ibw)
    _fl_set_object_bw(pFlObject, ibw)


def fl_get_object_bw(pFlObject):
    """Returns the borderwidth of an object.

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: borderwidth (bw)
    @rtype: int

    @example: currbw = fl_get_object_bw(pobj)

    @attention: API change from XForms - upstream was
        fl_get_object_bw(pFlObject, bw)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_bw = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_bw", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_int)], \
        """void fl_get_object_bw(FL_OBJECT * ob, int * bw) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    bw, pbw = library.make_int_and_pointer()
    library.keep_elem_refs(pFlObject, bw, pbw)
    _fl_get_object_bw(pFlObject, pbw)
    return bw.value


def fl_set_object_resize(pFlObject, what):
    """Sets the resize property of an object.

    @param pFlObject: object to set
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param what: resize property. Values (from xfdata module) i.e.
        FL_RESIZE_NONE, FL_RESIZE_X, FL_RESIZE_Y, FL_RESIZE_ALL
    @type what: int_pos

    @example: fl_set_object_resize(pobj, xfdata.FL_RESIZE_ALL)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_object_resize = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_resize", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint], \
        """void fl_set_object_resize(FL_OBJECT * ob, unsigned int what) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(what, xfdata.RESIZE_list)
    uiwhat = library.convert_to_uint(what)
    library.keep_elem_refs(pFlObject, what, uiwhat)
    _fl_set_object_resize(pFlObject, uiwhat)


def fl_get_object_resize(pFlObject):
    """Returns the resize property of an object (e.g. resize all, resize
    none, etc..).

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: resize property
    @rtype: int_pos

    @attention: API change from XForms - upstream was
        fl_get_object_resize(pFlObject, what)

    @example: reszprop = fl_get_object_resize(pobj)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_resize = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_resize", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_uint)], \
        """void fl_get_object_resize(FL_OBJECT * ob,
           unsigned int * what) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    what, pwhat = library.make_uint_and_pointer()
    library.keep_elem_refs(pFlObject, what, pwhat)
    _fl_get_object_resize(pFlObject, pwhat)
    return what.value


def fl_set_object_gravity(pFlObject, nw, se):
    """Sets the gravity properties of an object.

    @param pFlObject: object to be set
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param nw: gravity property for NorthWest. Values (from xfdata module)
        FL_North, FL_NorthEast, FL_NorthWest, FL_South, FL_SouthEast,
        FL_SouthWest, FL_East, FL_West, FL_NoGravity, FL_ForgetGravity
    @type nw: int_pos
    @param se: gravity property for SouthEast. Values (from xfdata module)
        FL_North, FL_NorthEast, FL_NorthWest, FL_South, FL_SouthEast,
        FL_SouthWest, FL_East, FL_West, FL_NoGravity, FL_ForgetGravity
    @type se: int_pos

    @example: fl_set_object_gravity(pobj, xfdata.FL_North, xfdata.FL_East)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_object_gravity = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_gravity", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint, cty.c_uint], \
        """void fl_set_object_gravity(FL_OBJECT * ob, unsigned int nw,
           unsigned int se) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(nw, xfdata.GRAVITY_list)
    library.check_admitted_listvalues(se, xfdata.GRAVITY_list)
    uinw = library.convert_to_uint(nw)
    uise = library.convert_to_uint(se)
    library.keep_elem_refs(pFlObject, nw, uinw, se, uise)
    _fl_set_object_gravity(pFlObject, uinw, uise)


def fl_get_object_gravity(pFlObject):
    """Returns the gravity properties of an object (e.g. North, SouthWest,
    etc..).

    @param pFlObject: object to set
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: NorthWest and SouthEast gravity
    @rtype: int_pos, int_pos

    @attention: API change from XForms - upstream was
        fl_get_object_gravity(pFlObject, nw, se)

    @example: nowe, soea = fl_get_object_gravity(pobj)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_gravity = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_gravity", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(cty.c_uint),
        cty.POINTER(cty.c_uint)], \
        """void fl_get_object_gravity(FL_OBJECT * ob,
           unsigned int * nw, unsigned int * se) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    nw, pnw = library.make_uint_and_pointer()
    se, pse = library.make_uint_and_pointer()
    library.keep_elem_refs(pFlObject, nw, se, pnw, pse)
    _fl_get_object_gravity(pFlObject, pnw, pse)
    return nw.value, se.value


def fl_set_object_lsize(pFlObject, size):
    """Sets the label size of an object.

    @param pFlObject: object to be set
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param size: label size. Values (from xfdata module) FL_TINY_SIZE,
        FL_SMALL_SIZE, FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
        FL_HUGE_SIZE, FL_DEFAULT_SIZE
    @type size: int

    @example: fl_set_object_lsize(pobj, xfdata.FL_MEDIUM_SIZE)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_object_lsize = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_lsize", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_set_object_lsize(FL_OBJECT * ob, int lsize) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(size, xfdata.FONTSIZE_list)
    isize = library.convert_to_int(size)
    library.keep_elem_refs(pFlObject, size, isize)
    _fl_set_object_lsize(pFlObject, isize)


def fl_get_object_lsize(pFlObject):
    """Returns the label size of an object.

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: label size
    @rtype: int

    @example: lsize = fl_get_object_lsize(pobj)

    @status: Tested + Doc + Demo = OK

    """
    _fl_get_object_lsize = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_lsize", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_get_object_lsize(FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_lsize(pFlObject)
    return retval


def fl_set_object_lstyle(pFlObject, style):
    """Sets the label style of an object.

    @param pFlObject: object to be set
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param style: label style. Values (from xfdata module) FL_NORMAL_STYLE,
        FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
        FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
        FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
        FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
        FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
        FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
    @type style: int

    @example: fl_set_object_lstyle(pobj, xfdata.FL_TIMESITALIC_STYLE)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_object_lstyle = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_lstyle", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_set_object_lstyle(FL_OBJECT * ob, int lstyle) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(style, xfdata.TEXTSTYLE_list)
    istyle = library.convert_to_int(style)
    library.keep_elem_refs(pFlObject, style, istyle)
    _fl_set_object_lstyle(pFlObject, istyle)


def fl_get_object_lstyle(pFlObject):
    """Returns the label style of an object (e.g. xfdata.FL_BOLD_STYLE,
    xfdata.FL_NORMAL_STYLE, etc..).

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: label style
    @rtype: int

    @example: lstyle = fl_get_object_lstyle(pobj)

    @status: Tested + NoDoc + Demo = OK

    """
    _fl_get_object_lstyle = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_lstyle", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_get_object_lstyle(FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_lstyle(pFlObject)
    return retval


def fl_set_object_lcol(pFlObject, colr):
    """Sets the label color of an object.

    @param pFlObject: object to be set
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param colr: label color. Values (from xfdata module) one of defined
        colors FL_BLACK, ... FL_BLUE, ... FL_GREEN, ... FL_RED, ... etc..
    @type colr: long_pos

    @example: fl_set_object_lcol(pobj, xfdata.FL_BLUE)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_object_lcol = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_lcol", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_COLOR], \
        """void fl_set_object_lcol(FL_OBJECT * ob, FL_COLOR lcol) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(pFlObject, colr, ulcolr)
    _fl_set_object_lcol(pFlObject, ulcolr)


fl_set_object_lcolor = fl_set_object_lcol


def fl_get_object_lcol(pFlObject):
    """Returns the label color of an object (from xfdata, e.g. FL_WHITE,
    FL_LIME, etc..).

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: color value
    @rtype: long_pos

    @example: obcolor = fl_get_object_lcol(pobj)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_lcol = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_lcol", \
        xfdata.FL_COLOR, [cty.POINTER(xfdata.FL_OBJECT)], \
        """FL_COLOR fl_set_object_lcol(FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_lcol(pFlObject)
    return retval


def fl_set_object_return(pFlObject, when):
    """Sets the conditions under which an object gets returned (or its callback
    invoked). If the object has to do additional work on setting te condition
    (e.g. it has child objects that also need to be set) it has to set up it's
    own function that then will called in the end. This should only be called
    once an object has been created completely! Not all return types make
    sense for all objects.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param when: return type (when it returns). Values (from xfdata module)
        FL_RETURN_NONE, FL_RETURN_CHANGED, FL_RETURN_END,
        FL_RETURN_END_CHANGED, FL_RETURN_SELECTION, FL_RETURN_DESELECTION,
        FL_RETURN_TRIGGERED, FL_RETURN_ALWAYS
    @type when: int_pos

    @returns: old return type id
    @rtype: int

    @example: fl_set_object_return(pobj, xfdata.FL_RETURN_CHANGED)

    @status: Tested + Doc + Demo = OK
    """

    _fl_set_object_return = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_return", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint], \
        """int fl_set_object_return(FL_OBJECT * ob, unsigned int when) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(when, xfdata.RETURN_list)
    uiwhen = library.convert_to_uint(when)
    library.keep_elem_refs(pFlObject, when, uiwhen)
    retval = _fl_set_object_return(pFlObject, uiwhen)
    return retval


# TODO: verify what its purpose is.
def fl_notify_object(pFlObject, cause):
    """ ???

    @param pFlObject: pointer to object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param cause: cause for notification. Values (from xfdata module)
        FL_ATTRIB, FL_RESIZED, FL_MOVEORIGIN
    @type cause: int

    @example: fl_notify_object(pobj5, xfdata.FL_RESIZED)

    @status: Tested + NoDoc + NoDemo = NOT OK (not clear purpose)
    """
    _fl_notify_object = library.cfuncproto(
        library.load_so_libforms(), "fl_notify_object", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_notify_object(FL_OBJECT * obj, int cause) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(cause, xfdata.EVENTS_list)
    icause = library.convert_to_int(cause)
    library.keep_elem_refs(pFlObject, cause, icause)
    _fl_notify_object(pFlObject, icause)


def fl_set_object_lalign(pFlObject, align):
    """Sets alignment of an object's label.

    @param pFlObject: object to be set
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param align: alignment of label. Values (from xfdata module)
        FL_ALIGN_CENTER, FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT,
        FL_ALIGN_RIGHT, FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP,
        FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE,
        FL_ALIGN_VERT
    @type align: int

    @example: fl_set_object_lalign(pobj8, xfdata.FL_ALIGN_RIGHT)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_object_lalign = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_lalign", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_set_object_lalign(FL_OBJECT * ob, int align) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(align, xfdata.ALIGN_list)
    ialign = library.convert_to_int(align)
    library.keep_elem_refs(pFlObject, align, ialign)
    _fl_set_object_lalign(pFlObject, ialign)


def fl_get_object_lalign(pFlObject):
    """Returns alignment of an object's label (from xfdata, e.g.
    FL_ALIGN_LEFT, FL_ALIGN_RIGHT_TOP, etc..).

    @param pFlObject: object to be set
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: align num.
    @rtype: int

    @example: obalign = fl_get_object_lalign(pobj8)

    @status: Tested + Doc + Demo = OK

    """
    _fl_get_object_lalign = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_lalign", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_set_object_lalign(FL_OBJECT * ob) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_lalign(pFlObject)
    return retval


fl_set_object_align = fl_set_object_lalign


def fl_set_object_shortcut(pFlObject, shctxt, showit):
    """Sets a shortcut, binding a key or a series of keys to an object. It
    resets any previous defined shortcuts for the object. Using e.g. "acE#d^h"
    the keys 'a', 'c', 'E', <Alt>d and <Ctrl>h are associated with the object.
    The precise format is as follows: any character in the string is considered
    as a shortcut, except '^' and '#', which stand for combinations with the
    <Ctrl> and <Alt> keys; the case of the key following '#' or '^' is not
    important, i.e. no distinction is made between e.g. "^C" and "^c", both
    encode the key combination <Ctrl>C as well as <Ctrl>C.) The key '^' itself
    can be set as a shortcut key by using "^^" in the string defining the
    shortcut. The key '#' can be obtained as a shortcut by using the string
    "^#". So, e.g. "#^#" encodes <ALT>#. The <Esc> key can be given as "^[".
    Another special character not mentioned yet is '&', which indicates
    function and arrow keys. Use a sequence starting with '&' and directly
    followed by a number between 1 and 35 to represent one of the function
    keys. For example, "&2" stands for the <F2> function key. The four cursors
    keys (up, down, right, and left) can be given as "&A", "&B", "&C" and "&D",
    respectively. The key '&' itself can be obtained as a shortcut by
    prefixing it with '^'.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param shctxt: shortcut text to be set
    @type shctxt: str
    @param showit: flag if shortcut letter has to be underlined or not if
        a match exists (only the 1st alphanumeric character is used). Values
        0 (underline not shown) or 1 (shown)
    @type showit: int

    @example: fl_set_object_shortcut(pobj6, "aA#A^A", 1)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_object_shortcut = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_shortcut", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING, cty.c_int], \
        """void fl_set_object_shortcut(FL_OBJECT * obj,
           const char * sstr, int showit) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    sshctxt = library.convert_to_string(shctxt)
    ishowit = library.convert_to_int(showit)
    library.keep_elem_refs(pFlObject, shctxt, sshctxt, showit, ishowit)
    _fl_set_object_shortcut(pFlObject, sshctxt, ishowit)


def fl_set_object_shortcutkey(pFlObject, keysym):
    """Uses a special key as a shortcut. It always appends the specified key
    to the current shortcuts. Special keys can't be underlined.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param keysym: X key symbolic num. See xfdata module for a (maybe)
        incomplete list
    @type keysym: int_pos

    @example: fl_set_object_shortcutkey(pobj, xfdata.XK_Home)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_object_shortcutkey = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_shortcutkey",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint], \
        """void fl_set_object_shortcutkey(FL_OBJECT * obj,
           unsigned int keysym) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    uikeysym = library.convert_to_uint(keysym)
    library.keep_elem_refs(pFlObject, keysym, uikeysym)
    _fl_set_object_shortcutkey(pFlObject, uikeysym)


def fl_set_object_dblbuffer(pFlObject, flag):
    """ Uses double buffering on a per-object basis. Currently double buffering
    for objects having a non-rectangular box might not work well. A
    nonrectangular box means that there are regions within the bounding box
    that should not be painted, which is not easily done without complex and
    expensive clipping and unacceptable inefficiency. Since Xlib doesn't
    support double buffering, XForms library simulates this functionality with
    pixmap bit-bliting. In practice, the effect is hardly distinguishable from
    double buffering and performance is on par with multi-buffering extensions
    (it is slower than drawing into a window directly on most workstations
    however). Bear in mind that a pixmap can be resource hungry, so use this
    option with discretion.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param flag: flag to disable/enable double buffer. Values 0 (disabled) or
        1 (enabled)

    @example: fl_set_object_dblbuffer(pobj7, 1)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_object_dblbuffer = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_dblbuffer", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_set_object_dblbuffer(FL_OBJECT * ob, int y) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iflag = library.convert_to_int(flag)
    library.keep_elem_refs(pFlObject, flag, iflag)
    _fl_set_object_dblbuffer(pFlObject, iflag)


def fl_set_object_color(pFlObject, fgcolr, bgcolr):
    """Sets the color of an object.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param fgcolr: foreground color value
    @type fgcolr: long_pos
    @param bgcolr: background color value
    @type bgcolr: long_pos

    @example: fl_set_object_color(pbutob7, xfdata.FL_AQUA, xfdata.FL_WHEAT)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_object_color = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_color", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_COLOR, xfdata.FL_COLOR], \
        """void fl_set_object_color(FL_OBJECT * ob, FL_COLOR col1,
           FL_COLOR col2) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.check_admitted_listvalues(fgcolr, xfdata.COLOR_list)
    library.check_admitted_listvalues(bgcolr, xfdata.COLOR_list)
    ulfgcolr = library.convert_to_FL_COLOR(fgcolr)
    ulbgcolr = library.convert_to_FL_COLOR(bgcolr)
    library.keep_elem_refs(pFlObject, fgcolr, ulfgcolr, bgcolr, ulbgcolr)
    _fl_set_object_color(pFlObject, ulfgcolr, ulbgcolr)


def fl_get_object_color(pFlObject):
    """Returns the foreground and background colors of an object.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: foreground and background color values (colr, colr)
    @rtype: long_pos, long_pos

    @example: primcol, secncol = fl_get_object_color(pobj)

    @attention: API change from XForms - upstream was
        fl_set_object_color(pFlObject, fgcolr, bgcolr)

    @status: Tested + Doc + Demo = OK

    """
    _fl_get_object_color = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_color", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_COLOR), \
        cty.POINTER(xfdata.FL_COLOR)], \
        """void fl_get_object_color(FL_OBJECT * ob, FL_COLOR * col1,
           FL_COLOR * col2)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fgcolr, pfgcolr = library.make_FL_COLOR_and_pointer()
    bgcolr, pbgcolr = library.make_FL_COLOR_and_pointer()
    library.keep_elem_refs(pFlObject, fgcolr, pfgcolr, bgcolr, pbgcolr)
    _fl_get_object_color(pFlObject, pfgcolr, pbgcolr)
    return fgcolr.value, bgcolr.value


def fl_set_object_label(pFlObject, label):
    """Sets the label of an object.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @param label: text label of object
    @type label: str

    @example: fl_set_object_label(pobj, "My New Label")

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_object_label = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_label", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING], \
        """void fl_set_object_label(FL_OBJECT * ob, const char * label) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    slabel = library.convert_to_string(label)
    library.keep_elem_refs(pFlObject, label, slabel)
    _fl_set_object_label(pFlObject, slabel)


def fl_get_object_label(pFlObject):
    """Returns the label of an object.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: text of label
    @rtype: str

    @example: currlbl = fl_get_object_label(pobj)

    @status: Tested + Doc + Demo = OK

    """
    _fl_get_object_label = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_label", \
        xfdata.STRING, [cty.POINTER(xfdata.FL_OBJECT)], \
        """const char * fl_set_object_label(FL_OBJECT * obj) """)
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_label(pFlObject)
    return retval


def fl_set_object_helper(pFlObject, tip):
    """Sets the tooltip of an object (with possible embedded newlines in it)
    that will be shown when the mouse hovers over the object for more than
    about 600 msec.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param tip: tooltip text for object
    @type tip: str

    @example: fl_set_object_helper(pobj, "Button to exit the procedure.")

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_object_helper = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_helper", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING], \
        """void fl_set_object_helper(FL_OBJECT * ob, const char * tip)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    stip = library.convert_to_string(tip)
    library.keep_elem_refs(pFlObject, tip, stip)
    _fl_set_object_helper(pFlObject, stip)


def fl_set_object_position(pFlObject, x, y):
    """Sets position of an object.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int

    @example: fl_set_object_position(pobj, 235, 123)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_object_position = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_position", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_Coord, xfdata.FL_Coord], \
        """void fl_set_object_position(FL_OBJECT * obj, FL_Coord x,
           FL_Coord y)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    library.keep_elem_refs(pFlObject, x, ix, y, iy)
    _fl_set_object_position(pFlObject, ix, iy)


def fl_get_object_size(pFlObject):
    """Returns the size of an object.

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: width (w) and height (h) in coord units
    @rtype: int, int

    @example: wid, hei = fl_get_object_size(pobj)

    @attention: API change from XForms - upstream was
        fl_get_object_size(pFlObject, w, h)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_size = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_size", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_Coord),
        cty.POINTER(xfdata.FL_Coord)], \
        """void fl_get_object_size(FL_OBJECT * obj, FL_Coord * w,
           FL_Coord * h)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    w, pw = library.make_FL_Coord_and_pointer()
    h, ph = library.make_FL_Coord_and_pointer()
    library.keep_elem_refs(pFlObject, w, h, pw, ph)
    _fl_get_object_size(pFlObject, pw, ph)
    return w.value, h.value


def fl_set_object_size(pFlObject, w, h):
    """Sets the size of an object.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param w: width of object in coord units
    @type w: int
    @param h: height of object in coord units
    @type h: int

    @example: fl_set_object_size(pobj, 90, 35)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_object_size = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_size", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_Coord, xfdata.FL_Coord], \
        """void fl_set_object_size(FL_OBJECT * obj, FL_Coord w,
           FL_Coord h)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    library.keep_elem_refs(pFlObject, w, iw, h, ih)
    _fl_set_object_size(pFlObject, iw, ih)


def fl_set_object_automatic(pFlObject, flag):
    """Enables or disables an object to receive a xfdata.FL_STEP event. This
    should not be used with built-in objects. An object is automatic if it
    automatically (without user actions) has to change its contents. Automatic
    objects get a FL_STEP event about every 50 msec.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param flag: flag if automatic or not. Values 0 (not automatic) or 1
        (automatic)
    @type flag: int

    @example: fl_set_object_automatic(pMyobj, 1)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_object_automatic = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_automatic",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int], \
        """void fl_set_object_automatic(FL_OBJECT * ob, int flag)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iflag = library.convert_to_int(flag)
    library.keep_elem_refs(pFlObject, flag, iflag)
    _fl_set_object_automatic(pFlObject, iflag)


def fl_object_is_automatic(pFlObject):
    """Returns if an object receives xfdata.FL_STEP events. An object is
    automatic if it automatically (without user actions) has to change its
    contents. Automatic objects get a FL_STEP event about every 50 msec.

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: flag if it's automatic (1) or not (0)
    @rtype: int

    @example: if xf.fl_object_is_automatic(pMyobj): ...

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_object_is_automatic = library.cfuncproto(
        library.load_so_libforms(), "fl_object_is_automatic",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_object_is_automatic(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_object_is_automatic(pFlObject)
    return retval


def fl_draw_object_label(pFlObject):
    """Draws the label according to the alignment, which could be inside
    or outside of the bounding box.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: fl_draw_object_label(pobj3)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_draw_object_label = library.cfuncproto(
        library.load_so_libforms(), "fl_draw_object_label", \
        None, [cty.POINTER(xfdata.FL_OBJECT)], \
        """void fl_draw_object_label(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_draw_object_label(pFlObject)


def fl_draw_object_label_outside(pFlObject):
    """Draws the label outside of the bounding box.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: fl_draw_object_label_outside(pobj3)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_draw_object_label_outside = library.cfuncproto(
        library.load_so_libforms(), "fl_draw_object_label_outside",
        None, [cty.POINTER(xfdata.FL_OBJECT)], \
        """void fl_draw_object_label_outside(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_draw_object_label_outside(pFlObject)


fl_draw_object_outside_label = fl_draw_object_label_outside


def fl_get_object_component(pFlObject, objclass, compontype, seqnum):
    """Returns the object that is a component of a composite object. E.g. the
    scrollbar object is made of a slider and two scroll buttons.

    @param pFlObject: composite object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param objclass: component object's class id
    @type objclass: int
    @param compontype: component object's type id
    @type compontype: int
    @param seqnum: the sequence number of the desired object in case the
        composite has more than one object of the same class and type. You
        can use -1 to indicate any type of specified class
    @type seqnum: int

    @returns: component object (pFlObject) or None (no object found)
    @rtype: pointer to xfdata.FL_OBJECT

    @example: fl_get_object_component(browserobj, xfdata.FL_SCROLLBAR,
        xfdata.FL_HOR_THIN_SCROLLBAR, 0)

    @status: Untested + Doc + NoDemo = NOT OK

    """
    _fl_get_object_component = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_component",
        cty.POINTER(xfdata.FL_OBJECT), [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        cty.c_int, cty.c_int], \
        """FL_OBJECT * fl_get_object_component(FL_OBJECT * composite,
           int objclass, int type, int numb)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    iobjclass = library.convert_to_int(objclass)
    icompontype = library.convert_to_int(compontype)
    iseqnum = library.convert_to_int(seqnum)
    library.keep_elem_refs(pFlObject, objclass, iobjclass, compontype, icompontype, \
                   seqnum, iseqnum)
    retval = _fl_get_object_component(pFlObject, iobjclass, icompontype,
                                      iseqnum)
    return retval


def fl_for_all_objects(pFlForm, py_operatecb, vdata):
    """Serves as an iterator to change an attribute for all objects on a
    particular form. Specified operating function is called for every object
    of the form form unless it returns nonzero, which terminates the iterator.

    @param pFlForm: form
    @type pFlForm: pointer to xfdata.FL_FORM
    @param py_operatecb: python callback function, returning value
    @type py_operatecb: __ funcname (pFlObject, ptr_void) -> num __
    @param vdata: user data to be passed to function
    @type vdata: None or long or pointer to xfdata.FL_OBJECT

    @example: def operatecb(pobj, vdata):
    @example: |->| ...
    @example: |->| return 0
    @example: fl_for_all_objects(pform5, operatecb, None)

    @status: Untested + Doc + NoDemo = NOT OK

    """
    # cfunc_int_pobject_pvoid = cty.CFUNCTYPE(cty.c_int,
    #                  cty.POINTER(xfdata.FL_OBJECT), cty.c_void_p)
    _fl_for_all_objects = library.cfuncproto(
        library.load_so_libforms(), "fl_for_all_objects", \
        None, [cty.POINTER(xfdata.FL_FORM), xfdata.cfunc_int_pobject_pvoid, \
        cty.c_void_p], \
        """void fl_for_all_objects(FL_FORM * form, int ( * cb ) \
           ( FL_OBJECT *, void * ), void * v)""")
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    c_operatecb = xfdata.cfunc_int_pobject_pvoid(py_operatecb)
    if vdata is None:
        pvdata = cty.cast(vdata, cty.c_void_p)
    elif isinstance(vdata, long):
        ldata = library.convert_to_long(vdata)
        pvdata = cty.cast(ldata, cty.POINTER(cty.c_long))
    else:
        pvdata = vdata          # it is pFlObject
    library.keep_cfunc_refs(c_operatecb, py_operatecb)
    library.keep_elem_refs(pFlForm, vdata, pvdata)
    _fl_for_all_objects(pFlForm, c_operatecb, pvdata)


def fl_set_object_dblclick(pFlObject, timeout):
    """Sets double click timeout value of an object, enabling or disabling it
    to receive the xfdata.FL_DBLCLICK event.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param timeout: maximum time interval (in msec) between two clicks for
        them to be considered a double-click (using 0 disables double-click
        detection)
    @type timeout: long_pos

    @example: fl_set_object_dblclick(pobj, 750)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_object_dblclick = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_dblclick", \
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_ulong], \
        """void fl_set_object_dblclick(FL_OBJECT *obj, unsigned \
           long timeout)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ultimeout = library.convert_to_ulong(timeout)
    library.keep_elem_refs(pFlObject, timeout, ultimeout)
    _fl_set_object_dblclick(pFlObject, ultimeout)


def fl_get_object_dblclick(pFlObject):
    """Return double click timeout value of an object.

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: timeout value
    @rtype: long_pos

    @example: dctim = fl_get_object_dblclick(pobj0)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_dblclick = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_dblclick", \
        cty.c_ulong, [cty.POINTER(xfdata.FL_OBJECT)], \
        """unsigned long fl_get_object_dblclick(FL_OBJECT *obj)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_dblclick(pFlObject)
    return retval


def fl_set_object_geometry(pFlObject, x, y, w, h):
    """Sets the geometry (position and size) of an object.

    @param pFlObject: object to modify
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int
    @param w: width in coord units
    @type w: int
    @param h: height in coord units
    @type h: int

    @example: fl_set_object_geometry(pobj, 200, 250, 120, 25)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_object_geometry = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_geometry", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_Coord, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord], \
        """void fl_set_object_geometry(FL_OBJECT * obj, FL_Coord x,
        FL_Coord y, FL_Coord w, FL_Coord h)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    library.keep_elem_refs(pFlObject, x, ix, y, iy, w, iw, h, ih)
    _fl_set_object_geometry(pFlObject, ix, iy, iw, ih)


def fl_move_object(pFlObject, x, y):
    """Moves an object to a new position.

    @param pFlObject: object to be moved
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param x: new horizontal position (upper-left corner)
    @type x: int
    @param y: new vertical position (upper-left corner)
    @type y: int

    @example: fl_move_object(pobj0, 120, 380)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_move_object = library.cfuncproto(
        library.load_so_libforms(), "fl_move_object", \
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_Coord, xfdata.FL_Coord], \
        """void fl_move_object(FL_OBJECT * obj, FL_Coord dx,
           FL_Coord dy)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ix = library.convert_to_int(x)
    iy = library.convert_to_int(y)
    library.keep_elem_refs(pFlObject, x, ix, y, iy)
    _fl_move_object(pFlObject, ix, iy)


def fl_fit_object_label(pFlObject, xmargin, ymargin):
    """Checks if the label of an object fits into it (after x- and y-margin
    have been added). If not, all objects and the form are enlarged by the
    necessary factor (but never by more than a factor of 1.5).

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param xmargin: horizontal margin of label in coord units
    @type xmargin: int
    @param ymargin: vertical margin of label in coord units
    @type ymargin: int

    @example: fl_fit_object_label(pobj2, 10, 10)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_fit_object_label = library.cfuncproto(
        library.load_so_libforms(), "fl_fit_object_label",\
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_Coord, xfdata.FL_Coord],\
        """void fl_fit_object_label(FL_OBJECT * obj, FL_Coord xmargin,
           FL_Coord ymargin)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ixmargin = library.convert_to_int(xmargin)
    iymargin = library.convert_to_int(ymargin)
    library.keep_elem_refs(pFlObject, xmargin, ixmargin, ymargin, iymargin)
    _fl_fit_object_label(pFlObject, ixmargin, iymargin)


def fl_get_object_geometry(pFlObject):
    """Returns the geometry (position and size) of an object.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: horizontal (x), vertical position (y), width (w), height (h)
    @rtype: int, int, int, int

    @example: xpos, ypos, wid, hei = fl_get_object_geometry(pobj1)

    @attention: API change from XForms - upstream was
        fl_get_object_geometry(pFlObject, x, y, w, h)

    @status: Tested + Doc + Demo = OK

    """
    _fl_get_object_geometry = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_geometry",\
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_Coord),\
        cty.POINTER(xfdata.FL_Coord), cty.POINTER(xfdata.FL_Coord), \
        cty.POINTER(xfdata.FL_Coord)],
        """void fl_get_object_geometry(FL_OBJECT * ob, FL_Coord * x,
           FL_Coord * y, FL_Coord * w, FL_Coord * h)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    x, px = library.make_FL_Coord_and_pointer()
    y, py = library.make_FL_Coord_and_pointer()
    w, pw = library.make_FL_Coord_and_pointer()
    h, ph = library.make_FL_Coord_and_pointer()
    library.keep_elem_refs(pFlObject, x, px, y, py, w, pw, h, ph)
    _fl_get_object_geometry(pFlObject, px, py, pw, ph)
    return x.value, y.value, w.value, h.value


def fl_get_object_position(pFlObject):
    """Returns the position of an object.

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: horizontal (x) and vertical position (y)
    @rtype: int, int

    @example: xpos, ypos = fl_get_object_position(pobj2)

    @attention: API change from XForms - upstream was
        fl_get_object_position(pFlObject, x, y)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_position = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_position",\
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_Coord),
        cty.POINTER(xfdata.FL_Coord)],\
        """void fl_get_object_position(FL_OBJECT * ob, FL_Coord * x,
           FL_Coord * y)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    x, px = library.make_FL_Coord_and_pointer()
    y, py = library.make_FL_Coord_and_pointer()
    library.keep_elem_refs(pFlObject, x, px, y, py)
    _fl_get_object_position(pFlObject, px, py)
    return x.value, y.value


# this one takes into account the label

def fl_get_object_bbox(pFlObject):
    """Returns the bounding box size that has the label, which could be drawn
    outside of the object figured in.

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: horizontal (x), vertical position (y), width (w), height (h)
    @rtype: int, int, int, int

    @example: xpos, ypos, wid, hei = fl_get_object_bbox(pobj4)

    @attention: API change from XForms - upstream was
        fl_get_object_bbox(pFlObject, x, y, w, h)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_bbox = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_bbox",\
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_Coord),\
        cty.POINTER(xfdata.FL_Coord), cty.POINTER(xfdata.FL_Coord),
        cty.POINTER(xfdata.FL_Coord)],\
        """void fl_get_object_bbox(FL_OBJECT * obj, FL_Coord * x,
           FL_Coord * y, FL_Coord * w, FL_Coord * h)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    x, px = library.make_FL_Coord_and_pointer()
    y, py = library.make_FL_Coord_and_pointer()
    w, pw = library.make_FL_Coord_and_pointer()
    h, ph = library.make_FL_Coord_and_pointer()
    library.keep_elem_refs(pFlObject, x, y, w, h, px, py, pw, ph)
    _fl_get_object_bbox(pFlObject, px, py, pw, ph)
    return x.value, y.value, w.value, h.value


fl_compute_object_geometry = fl_get_object_bbox


def fl_call_object_callback(pFlObject):
    """Invokes the callback manually (as opposed to invocation by the main
    loop). If the object does not have a callback associated with it, this
    call has not effect.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: fl_call_object_callback(pobj_with_cb)

    @status: Tested + Doc + Demo = OK

    """
    _fl_call_object_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_call_object_callback",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_call_object_callback(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_call_object_callback(pFlObject)


def fl_set_object_prehandler(pFlObject, py_HandlerPtr):
    """By-passes the internal event processing for a particular object. The
    pre-handler will be called before the built-in object handler. By electing
    to handle some of the events, a pre-handler can, in effect, replace part
    of the built-in handler.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param py_HandlerPtr: python callback function, returning value
    @type py_HandlerPtr: __ funcname (pFlObject, num, coord, coord, num,
        ptr_void) -> num __

    @returns: old xfdata.FL_HANDLEPTR function

    @example: def prehandlecb(pobj, num, crd, crd, num2, vdata):
    @example: |->| ...
    @example: |->| return 0
    @example: fl_set_object_prehandler(pobj2, prehandlecb)

    @status: Tested + Doc + Demo = OK

    """
    #FL_HANDLEPTR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_OBJECT),
    #                cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord, cty.c_int, cty.c_void_p)
    _fl_set_object_prehandler = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_prehandler",
        xfdata.FL_HANDLEPTR, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_HANDLEPTR],\
        """FL_HANDLEPTR fl_set_object_prehandler(FL_OBJECT * ob,
           FL_HANDLEPTR phandler)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    c_HandlerPtr = xfdata.FL_HANDLEPTR(py_HandlerPtr)
    library.keep_cfunc_refs(c_HandlerPtr, py_HandlerPtr)
    library.keep_elem_refs(pFlObject)
    retval = _fl_set_object_prehandler(pFlObject, c_HandlerPtr)
    return retval


def fl_set_object_posthandler(pFlObject, py_HandlerPtr):
    """By-passes the internal event processing for a particular object. The
    post-handler will be invoked after the built-in handler finishes. Whenever
    possible a post-handler should be used instead of a pre-handler.

    @param pFlObject: object
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param py_HandlerPtr: python callback function, returning value
    @type py_HandlerPtr: __ funcname (pFlObject, num, coord, coord, num,
        ptr_void) -> num __

    @returns: old xfdata.FL_HANDLEPTR function

    @example: def posthandlecb(pobj, num, crd, crd, num2, vdata):
    @example: |->| ...
    @example: |->| return 0
    @example: fl_set_object_posthandler(pobj2, posthandlecb)

    @status: Tested + Doc + Demo = OK

    """
    #FL_HANDLEPTR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_OBJECT),
    #                cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord, cty.c_int, cty.c_void_p)
    _fl_set_object_posthandler = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_posthandler",
        xfdata.FL_HANDLEPTR, [cty.POINTER(xfdata.FL_OBJECT), xfdata.FL_HANDLEPTR],\
        """FL_HANDLEPTR fl_set_object_posthandler(FL_OBJECT * ob,
           FL_HANDLEPTR post)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    c_HandlerPtr = xfdata.FL_HANDLEPTR(py_HandlerPtr)
    library.keep_cfunc_refs(c_HandlerPtr, py_HandlerPtr)
    library.keep_elem_refs(pFlObject)
    retval = _fl_set_object_posthandler(pFlObject, c_HandlerPtr)
    return retval


def fl_set_object_callback(pFlObject, py_CallbackPtr, data):
    """Calls a callback function bound to an object, if a condition is met.

    @param pFlObject: object the callback is bound to
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param py_CallbackPtr: a python function with no () and no args to
        be used as callback, no return
    @type py_CallbackPtr: __ funcname (pFlObject, longnum) __
    @param data: argument being passed to function
    @type data: long

    @returns: old xfdata.FL_CALLBACKPTR function

    @example: def myobcb(pobj, longdata):
    @example: |->| ...
    @example: oldcb = fl_set_object_callback(pobj3, myobjcb, 0)

    @status: Tested + Doc + Demo = OK

    """
    #FL_CALLBACKPTR = cty.CFUNCTYPE(None, cty.POINTER(xfdata.FL_OBJECT),
    #                               cty.c_long)
    _fl_set_object_callback = library.cfuncproto(
        library.load_so_libforms(), "fl_set_object_callback",\
        xfdata.FL_CALLBACKPTR, [cty.POINTER(xfdata.FL_OBJECT),
        xfdata.FL_CALLBACKPTR, cty.c_long],
        """FL_CALLBACKPTR fl_set_object_callback(FL_OBJECT * obj,\
           FL_CALLBACKPTR callback, long int argument)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    ldata = library.convert_to_long(data)
    c_CallbackPtr = xfdata.FL_CALLBACKPTR(py_CallbackPtr)
    library.keep_cfunc_refs(c_CallbackPtr, py_CallbackPtr)
    library.keep_elem_refs(pFlObject, data, ldata)
    retval = _fl_set_object_callback(pFlObject, c_CallbackPtr, ldata)
    return retval


fl_set_call_back = fl_set_object_callback


def fl_redraw_object(pFlObject):
    """Redraws the particular object. If it is a group it redraws the complete
    group. Normally you should never need this routine because all library
    routines take care of redrawing objects when necessary, but there might be
    situations in which an explicit redraw is required.

    @param pFlObject: object to redraw
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: fl_redraw_object(pobj)

    @status: Tested + Doc + Demo = OK

    """
    _fl_redraw_object = library.cfuncproto(
        library.load_so_libforms(), "fl_redraw_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_redraw_object(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_redraw_object(pFlObject)


def fl_scale_object(pFlObject, xs, ys):
    """Scales (shrinking or enlarging) an object, indicating a scaling factor
    in x- and y-direction (1.1 = 110 percent, 0.5 = 50, etc.)

    @param pFlObject: object to be scaled
    @type pFlObject: pointer to xfdata.FL_OBJECT
    @param xs: new horizontal factor
    @type xs: float
    @param ys: new vertical factor
    @type ys: float

    @example: fl_scale_object(pobj, 0.8, 1.1)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_scale_object = library.cfuncproto(
        library.load_so_libforms(), "fl_scale_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_double, cty.c_double],\
        """void fl_scale_object(FL_OBJECT * ob, double xs, double ys)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    fxs = library.convert_to_double(xs)
    fys = library.convert_to_double(ys)
    library.keep_elem_refs(pFlObject, xs, fxs, ys, fys)
    _fl_scale_object(pFlObject, fxs, fys)


def fl_show_object(pFlObject):
    """Shows an (hidden) object.

    @param pFlObject: object to be shown
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: fl_show_object(pobj8)

    @status: Tested + Doc + Demo = OK

    """
    _fl_show_object = library.cfuncproto(
        library.load_so_libforms(), "fl_show_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_show_object(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_show_object(pFlObject)


def fl_hide_object(pFlObject):
    """Hides a shown object.

    @param pFlObject: object to be hidden
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: fl_hide_object(pobj8)

    @status: Tested + Doc + Demo = OK

    """
    _fl_hide_object = library.cfuncproto(
        library.load_so_libforms(), "fl_hide_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_hide_object(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_hide_object(pFlObject)


def fl_object_is_visible(pFlObject):
    """Returns if an object is visible or not.

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: flag 0 (invisible) or non-zero (visible)
    @rtype: int

    @example: if not fl_object_is_visible(pobj2): ...

    @status: Tested + Doc + Demo = OK

    """
    _fl_object_is_visible = library.cfuncproto(
        library.load_so_libforms(), "fl_object_is_visible",\
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],\
        """int fl_object_is_visible(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.keep_elem_refs(pFlObject)
    retval = _fl_object_is_visible(pFlObject)
    return retval


def fl_free_object(pFlObject):
    """Frees the object and finally destroys it (if necessary deletes the
    object first).

    @param pFlObject: object to free
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: fl_free_object(pobj)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_free_object = library.cfuncproto(
        library.load_so_libforms(), "fl_free_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_free_object(FL_OBJECT * obj)""")
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_free_object(pFlObject)


def fl_delete_object(pFlObject):
    """Deletes an object, breaking its connection to the form, but not
    destroying it.

    @param pFlObject: object to delete
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: fl_delete_object(pobj)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_delete_object = library.cfuncproto(
        library.load_so_libforms(), "fl_delete_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_delete_object(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_delete_object(pFlObject)


def fl_get_object_return_state(pFlObject):
    """Determines the reason an object was returned (or its callback invoked)
    you. The returned value is logical OR of the conditions that led to the
    object getting returned.

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: current return state
    @rtype: int

    @example: currstate = fl_get_object_return_state(pobj5)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_object_return_state = library.cfuncproto(
        library.load_so_libforms(), "fl_get_object_return_state",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],\
        """int fl_get_object_return_state(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_get_object_return_state(pFlObject)
    return retval


def fl_trigger_object(pFlObject):
    """Simulates the action of an object being triggered from within the
    program. Calling this routine on an object obj results in the object
    returned to the application program or its callback being called if it
    exists. Note however, there is no visual feedback, i.e.
    fl_trigger_object(button) will not make the button object named button
    appearing to be pushed.

    @param pFlObject: object to trigger
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: fl_trigger_object(pobj

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_trigger_object = library.cfuncproto(
        library.load_so_libforms(), "fl_trigger_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_trigger_object(FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_trigger_object(pFlObject)


def fl_activate_object(pFlObject):
    """(Re)activates an object, (re)enabling user interaction.

    @param pFlObject: object to activate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: fl_activate_object(pobj)

    @status: Tested + Doc + Demo = OK

    """
    _fl_activate_object = library.cfuncproto(
        library.load_so_libforms(), "fl_activate_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_activate_object(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_activate_object(pFlObject)


def fl_deactivate_object(pFlObject):
    """Makes a particular object to be temporarily inactive, disabling user
    interaction, e.g., you want to make it impossible for the user to press a
    particular button or to type input in a particular field. When object is a
    group, the whole group is deactivate.

    @param pFlObject: object to deactivate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: fl_deactivate_object(pactobj)

    @status: Tested + Doc + Demo = OK

    """
    _fl_deactivate_object = library.cfuncproto(
        library.load_so_libforms(), "fl_deactivate_object",\
        None, [cty.POINTER(xfdata.FL_OBJECT)],\
        """void fl_deactivate_object(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    _fl_deactivate_object(pFlObject)


def fl_object_is_active(pFlObject):
    """Returns if object is active and reacting to events, or not.

    @param pFlObject: object to evaluate
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @returns: flag 0 (not active) or non-zero (active)
    @rtype: int

    @example: if not fl_object_is_active(pobj): ...

    @status: Tested + Doc + Demo = OK

    """
    _fl_object_is_active = library.cfuncproto(
        library.load_so_libforms(), "fl_object_is_active",\
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],\
        """int fl_object_is_active(FL_OBJECT * ob)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlObject)
    retval = _fl_object_is_active(pFlObject)
    return retval


def fl_enumerate_fonts(py_output, shortform):
    """Lists built-in fonts.

    @param py_output: python callback function, no return
    @type py_output: __ funcname (string) __
    @param shortform: flag to use short form or not (<int>)
    @type shortform: 0 (long form used) or non-zero (short form used)

    @returns: number of listed fonts
    @rtype: int

    @example: def pyoutput(strng):
    @example: |->| print strng
    @example: numfonts = fl_enumerate(pyoutput, 0)

    @status: Tested + Doc + Demo = OK

    """
    # cfunc_none_string = cty.CFUNCTYPE(None, xfdata.STRING)
    _fl_enumerate_fonts = library.cfuncproto(
        library.load_so_libforms(), "fl_enumerate_fonts",\
        cty.c_int, [xfdata.cfunc_none_string, cty.c_int],\
        """int fl_enumerate_fonts(void ( * output )( const char *s ), \
           int shortform)""")
    library.check_if_initialized()
    ishortform = library.convert_to_int(shortform)
    c_output = xfdata.cfunc_none_string(py_output)
    library.keep_cfunc_refs(c_output, py_output)
    library.keep_elem_refs(shortform, ishortform)
    retval = _fl_enumerate_fonts(c_output, ishortform)
    return retval


# TODO: verify if name must conform to other (built-in) font names
def fl_set_font_name(fontnum, name):
    """Add a new font (indexed by number) or change an existing font.
    Preferably the font name contains a '?' in the size position so different
    sizes can be used. Redraw of all forms is required to actually see the
    change for visible form.

    @param fontnum: font number. Values between 0 and xfdata.FL_MAXFONTS-1
    @type fontnum: int
    @param name: font name
    @type name: str

    @returns: -1 (on errors) or 0 or 1
    @rtype: int

    @example: fl_set_font_name(40, "symbol-medium-whatever") ?

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_font_name = library.cfuncproto(
        library.load_so_libforms(), "fl_set_font_name",\
        cty.c_int, [cty.c_int, xfdata.STRING],\
        """int fl_set_font_name(int n, const char * name)""")
    library.check_if_initialized()
    ifontnum = library.convert_to_int(fontnum)
    sname = library.convert_to_string(name)
    library.keep_elem_refs(fontnum, ifontnum, name, sname)
    retval = _fl_set_font_name(ifontnum, sname)
    return retval


def fl_set_font(fontnum, size):
    """Makes the specified font as the current.

    @param fontnum: font number
    @type fontnum: int
    @param size: font size. Values (from xfdata module) FL_TINY_SIZE,
        FL_SMALL_SIZE, FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
        FL_HUGE_SIZE, FL_DEFAULT_SIZE
    @type size: int

    @example: fl_set_font(5, xfdata.FL_SMALL_SIZE)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_font = library.cfuncproto(
        library.load_so_libforms(), "fl_set_font",\
        None, [cty.c_int, cty.c_int],\
        """void fl_set_font(int numb, int size)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(size, xfdata.FONTSIZE_list)
    ifontnum = library.convert_to_int(fontnum)
    isize = library.convert_to_int(size)
    library.keep_elem_refs(fontnum, ifontnum, size, isize)
    _fl_set_font(ifontnum, isize)


# routines that facilitate free object

def fl_get_char_height(style, size):
    """Returns the maximum height of the used font and the height above and
    below the baseline of the font.

    @param style: font style. Values (from xfdata module) FL_NORMAL_STYLE,
        FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
        FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
        FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
        FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
        FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
        FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
    @type style: int
    @param size: font size. Values (from xfdata module) FL_TINY_SIZE,
        FL_SMALL_SIZE, FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
        FL_HUGE_SIZE, FL_DEFAULT_SIZE
    @type size: int

    @returns: height (h), ascendent (asc) and descendent (desc)
    @rtype: int, int, int

    @example: hei, asc, desc = fl_get_char_height(xfdata.FL_BOLD_STYLE,
        xfdata.FL_TINY_SIZE)

    @attention: API change from XForms - upstream was
        fl_get_char_height(style, size, asc, desc)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_char_height = library.cfuncproto(
        library.load_so_libforms(), "fl_get_char_height",\
        cty.c_int, [cty.c_int, cty.c_int, cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int)],\
        """int fl_get_char_height(int style, int size, int * asc,
           int * desc)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(style, xfdata.TEXTSTYLE_list)
    library.check_admitted_listvalues(size, xfdata.FONTSIZE_list)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    asc, pasc = library.make_int_and_pointer()
    desc, pdesc = library.make_int_and_pointer()
    library.keep_elem_refs(style, istyle, size, isize, asc, desc, pasc, pdesc)
    retval = _fl_get_char_height(istyle, isize, pasc, pdesc)
    return retval, asc.value, desc.value


def fl_get_char_width(style, size):
    """Returns the maximum width of the used font.

    @param style: font style. Values (from xfdata module) FL_NORMAL_STYLE,
        FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
        FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
        FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
        FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
        FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
        FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
    @type style: int
    @param size: font size. Values (from xfdata module) FL_TINY_SIZE,
        FL_SMALL_SIZE, FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
        FL_HUGE_SIZE, FL_DEFAULT_SIZE
    @type size: int

    @returns: width (w)
    @rtype: int

    @example: wid = fl_get_char_width(xfdata.FL_TIMES_STYLE,
        xfdata.FL_HUGE_SIZE)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_char_width = library.cfuncproto(
        library.load_so_libforms(), "fl_get_char_width",\
        cty.c_int, [cty.c_int, cty.c_int],\
        """int fl_get_char_width(int style, int size)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(style, xfdata.TEXTSTYLE_list)
    library.check_admitted_listvalues(size, xfdata.FONTSIZE_list)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    library.keep_elem_refs(style, istyle, size, isize)
    retval = _fl_get_char_width(istyle, isize)
    return retval


def fl_get_string_height(style, size, txtstr, strlng):
    """Obtains the height information of a specific string and the height
    above and below the font's baseline.

    @param style: font style. Values (from xfdata module) FL_NORMAL_STYLE,
        FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
        FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
        FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
        FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
        FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
        FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
    @type style: int
    @param size: font size. Values (from xfdata module) i.e. FL_TINY_SIZE,
        FL_SMALL_SIZE, FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
        FL_HUGE_SIZE, FL_DEFAULT_SIZE
    @type size: int
    @param txtstr: text
    @type txtstr: str
    @param strlng: length of text
    @type strlng: int

    @returns: height (h), ascendent (asc) and descendent (desc)
    @rtype: int, int, int

    @example: hei, asc, desc = fl_get_string_height(xfdata.FL_MISC_STYLE,
        xfdata.FL_MEDIUM_SIZE, "Mystring", 8)

    @attention: API change from XForms - upstream was
        fl_get_string_height(style, size, strng, strglen, asc, desc)

    @status: Tested + Doc + Demo = OK

    """
    _fl_get_string_height = library.cfuncproto(
        library.load_so_libforms(), "fl_get_string_height",\
        cty.c_int, [cty.c_int, cty.c_int, xfdata.STRING, cty.c_int,
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
        """int fl_get_string_height(int style, int size, const char * s,
           int len, int * asc, int * desc)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(style, xfdata.TEXTSTYLE_list)
    library.check_admitted_listvalues(size, xfdata.FONTSIZE_list)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    stxtstr = library.convert_to_string(txtstr)
    istrlng = library.convert_to_int(strlng)
    asc, pasc = library.make_int_and_pointer()
    desc, pdesc = library.make_int_and_pointer()
    library.keep_elem_refs(style, istyle, size, isize, txtstr, stxtstr, strlng, \
                   istrlng, asc, desc, pasc, pdesc)
    retval = _fl_get_string_height(istyle, isize, stxtstr, istrlng, pasc,
                                   pdesc)
    return retval, asc.value, desc.value


def fl_get_string_width(style, size, txtstr, strlng):
    """Obtains the width information for a specific string.

    @param style: font style. Values (from xfdata module) FL_NORMAL_STYLE,
        FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
        FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
        FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
        FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
        FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
        FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
    @type style: int
    @param size: font size. Values (from xfdata module) FL_TINY_SIZE,
        FL_SMALL_SIZE, FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
        FL_HUGE_SIZE, FL_DEFAULT_SIZE
    @type size: int
    @param txtstr: text
    @type txtstr: str
    @param strlng: length of text
    @type strlng: int

    @returns: width (w)
    @rtype: int

    @example: wid = fl_get_string_width(xfdata.FL_MISC_STYLE,
        xfdata.FL_MEDIUM_SIZE, "Mystring", 8)

    @status: Tested + Doc + Demo = OK

    """
    _fl_get_string_width = library.cfuncproto(
        library.load_so_libforms(), "fl_get_string_width",\
        cty.c_int, [cty.c_int, cty.c_int, xfdata.STRING, cty.c_int],\
        """int fl_get_string_width(int style, int size, const char * s,
           int len)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(style, xfdata.TEXTSTYLE_list)
    library.check_admitted_listvalues(size, xfdata.FONTSIZE_list)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    stxtstr = library.convert_to_string(txtstr)
    istrlng = library.convert_to_int(strlng)
    library.keep_elem_refs(style, istyle, size, isize, txtstr, stxtstr, strlng,
                   istrlng)
    retval = _fl_get_string_width(istyle, isize, stxtstr, istrlng)
    return retval


def fl_get_string_widthTAB(style, size, txtstr, strlng):
    """ ???

    @param style: font style. Values (from xfdata module) i.e. FL_NORMAL_STYLE,
        FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
        FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
        FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
        FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
        FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
        FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
    @type style: int
    @param size: font size. Values (from xfdata module) i.e. FL_TINY_SIZE,
        FL_SMALL_SIZE, FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
        FL_HUGE_SIZE, FL_DEFAULT_SIZE
    @param txtstr: text
    @type txtstr: str
    @param strlng: length of text
    @type strlng: str

    @returns: width (w)
    @rtype: int

    @example: wid = fl_get_string_width(xfdata.FL_MISC_STYLE,
        xfdata.FL_MEDIUM_SIZE, "Mystring", 8)

    @status: Untested + NoDoc + NoDemo = NOT OK

    """
    _fl_get_string_widthTAB = library.cfuncproto(
        library.load_so_libforms(), "fl_get_string_widthTAB",\
        cty.c_int, [cty.c_int, cty.c_int, xfdata.STRING, cty.c_int],\
        """int fl_get_string_widthTAB(int style, int size, const char * s,
           int len)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(style, xfdata.TEXTSTYLE_list)
    library.check_admitted_listvalues(size, xfdata.FONTSIZE_list)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    stxtstr = library.convert_to_string(txtstr)
    istrlng = library.convert_to_int(strlng)
    library.keep_elem_refs(style, istyle, size, isize, txtstr, stxtstr, strlng,
                   istrlng)
    retval = _fl_get_string_widthTAB(istyle, isize, stxtstr, istrlng)
    return retval


def fl_get_string_dimension(style, size, txtstr, strlng):
    """Returns the width and height of a string in one call. In addition, the
    string passed can contain embedded newline characters and the routine will
    make proper adjustment so the values returned are (just) large enough to
    contain the multiple lines of text.

    @param style: font style. Values (from xfdata module) FL_NORMAL_STYLE,
        FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
        FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
        FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
        FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
        FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
        FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
    @type style: int
    @param size: font size. Values (from xfdata module) FL_TINY_SIZE,
        FL_SMALL_SIZE, FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
        FL_HUGE_SIZE, FL_DEFAULT_SIZE
    @type size: int
    @param txtstr: text
    @type txtstr: str
    @param strlng: length of text
    @type strlng: int

    @returns: width (w) and height (h)
    @rtype: int, int

    @example: fl_get_string_dimension(xfdata.FL_ENGRAVED_STYLE,
        xfdata.FL_DEFAULT_SIZE, "CustomString", 12)

    @attention: API change from upstream
        fl_get_string_dimension(fntstyle, fntsize, strng, strglen, w, h)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_string_dimension = library.cfuncproto(
        library.load_so_libforms(), "fl_get_string_dimension",\
        None, [cty.c_int, cty.c_int, xfdata.STRING, cty.c_int,
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
        """void fl_get_string_dimension(int fntstyle, int fntsize,
           const char * s, int len, int * width, int * height)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(style, xfdata.TEXTSTYLE_list)
    library.check_admitted_listvalues(size, xfdata.FONTSIZE_list)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    stxtstr = library.convert_to_string(txtstr)
    istrlng = library.convert_to_int(strlng)
    width, pwidth = library.make_int_and_pointer()
    height, pheight = library.make_int_and_pointer()
    library.keep_elem_refs(style, istyle, size, isize, txtstr, stxtstr,
                   strlng, istrlng, width, height, pwidth, pheight)
    _fl_get_string_dimension(istyle, isize, stxtstr, istrlng, pwidth,
                             pheight)
    return width.value, height.value


fl_get_string_size = fl_get_string_dimension


def fl_get_align_xy(align, x, y, w, h, xsize, ysize, xoff, yoff):
    """Obtains the position of where to draw the object with a certain
    alignment and including padding. It works regardless if it is to be drawn
    inside or outside of the bounding box

    @param align: alignment. Values (from xfdata module) FL_ALIGN_CENTER,
        FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT, FL_ALIGN_RIGHT,
        FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP, FL_ALIGN_LEFT_BOTTOM,
        FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE, FL_ALIGN_VERT
    @type align: int
    @param x: horizontal position of bounding box (upper-left corner)
    @type x: int
    @param y: vertical position of bounding box (upper-left corner)
    @type y: int
    @param w: width of bounding box in coord units
    @type w: int
    @param h: height of bounding box in coord units
    @type h: int
    @param xsize: width of the object to be drawn
    @type xsize: int
    @param ysize: height of the object to be drawn
    @type ysize: int
    @param xoff: additional horizontal padding to use
    @type xmargin: int
    @param yoff: additional vertical padding to use
    @type ymargin: int

    @returns: horizontal (x) and vertical position (y) used for drawing object
    @rtype: int, int

    @example: xpos, ypos = fl_get_align_xy(xfdata.FL_ALIGN_CENTER, 200, 300,
        110, 30, 120, 40, 15, 15)

    @attention: API change from XForms - upstream was
        fl_get_align_xy(align, x, y, w, h, xsize, ysize, xoff, yoff, xx, yy)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_align_xy = library.cfuncproto(
        library.load_so_libforms(), "fl_get_align_xy",\
        None, [cty.c_int, cty.c_int, cty.c_int, cty.c_int, cty.c_int,\
        cty.c_int, cty.c_int, cty.c_int, cty.c_int,
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
        """void fl_get_align_xy(int align, int x, int y, int w, int h,
           int xsize, int ysize, int xoff, int yoff, int * xx, int * yy)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(align, xfdata.ALIGN_list)
    ialign = library.convert_to_int(align)
    ix = library.convert_to_int(x)
    iy = library.convert_to_int(y)
    iw = library.convert_to_int(w)
    ih = library.convert_to_int(h)
    ixsize = library.convert_to_int(xsize)
    iysize = library.convert_to_int(ysize)
    ixoff = library.convert_to_int(xoff)
    iyoff = library.convert_to_int(yoff)
    xx, pxx = library.make_int_and_pointer()
    yy, pyy = library.make_int_and_pointer()
    library.keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, xsize, ixsize,
                   ysize, iysize, xoff, ixoff, yoff, iyoff, xx, yy, pxx, pyy)
    _fl_get_align_xy(ialign, ix, iy, iw, ih, ixsize, iysize, ixoff,
                     iyoff, pxx, pyy)
    return xx.value, yy.value


def fl_drw_text(align, x, y, w, h, colr, style, size, txtstr):
    """Draws the text inside the bounding box according to the alignment
    requested. It puts a padding of 5 pixels in vertical direction and 4 in
    horizontal around the text. Thus the bounding box should be 10 pixels wider
    and 8 pixels higher than required for the text to be drawn. It interprets
    a text string starting with the character @ differently in drawing some
    symbols instead.

    @param align: alignment of text. Values (from xfdata module)
        FL_ALIGN_CENTER, FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT,
        FL_ALIGN_RIGHT, FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP,
        FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE,
        FL_ALIGN_VERT
    @type align: int
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int
    @param w: width in coord units
    @type w: int
    @param h: height in coord units
    @type h: int
    @param colr: color value
    @type colr: long_pos
    @param style: font style. Values (from xfdata module) FL_NORMAL_STYLE,
        FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
        FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
        FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
        FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
        FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
        FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
    @type style: int
    @param size: font size. Values (from xfdata module) FL_TINY_SIZE,
        FL_SMALL_SIZE, FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
        FL_HUGE_SIZE, FL_DEFAULT_SIZE
    @type size: int
    @param txtstr: text to draw
    @type txtstr: str

    @example: fl_drw_text(xfdata.FL_ALIGN_BOTTOM, 400, 175, 150, 45,
        xfdata.FL_GREEN, xfdata.FL_ITALIC_STYLE, xfdata.FL_SMALL_SIZE,
        "A Good Old String")

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_drw_text = library.cfuncproto(
        library.load_so_libforms(), "fl_drw_text",\
        None, [cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_COLOR, cty.c_int, cty.c_int, xfdata.STRING],
        """void fl_drw_text(int align, FL_Coord x, FL_Coord y, FL_Coord w,
           FL_Coord h, FL_COLOR c, int style, int size, const char * istr)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(align, xfdata.ALIGN_list)
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    library.check_admitted_listvalues(style, xfdata.TEXTSTYLE_list)
    library.check_admitted_listvalues(size, xfdata.FONTSIZE_list)
    ialign = library.convert_to_int(align)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    ulcolr = library.convert_to_FL_COLOR(colr)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    stxtstr = library.convert_to_string(txtstr)
    library.keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, style, istyle, size, isize, txtstr, stxtstr)
    _fl_drw_text(ialign, ix, iy, iw, ih, ulcolr, istyle, isize,
                 stxtstr)


def fl_drw_text_beside(align, x, y, w, h, colr, style, size, txtstr):
    """Draws the text aligned outside of the box. It interprets a text string
    starting with the character @ differently in drawing some symbols instead.

    @param align: alignment of text. Values (from xfdata module)
        FL_ALIGN_CENTER, FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT,
        FL_ALIGN_RIGHT, FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP,
        FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE,
        FL_ALIGN_VERT
    @type align: int
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int
    @param w: width in coord units
    @type w: int
    @param h: height in coord units
    @type h: int
    @param colr: color value
    @type colr: long_pos
    @param style: font style. Values (from xfdata module) FL_NORMAL_STYLE,
        FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
        FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
        FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
        FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
        FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
        FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
    @type style: int
    @param size: font size. Values (from xfdata module) FL_TINY_SIZE,
        FL_SMALL_SIZE, FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
        FL_HUGE_SIZE, FL_DEFAULT_SIZE
    @type size: int
    @param txtstr: text to draw
    @type txtstr: str

    @example: fl_drw_text_beside(xfdata.FL_ALIGN_BOTTOM, 400, 175, 150, 45,
        xfdata.FL_GREEN, xfdata.FL_ITALIC_STYLE, xfdata.FL_SMALL_SIZE,
        "A Good Old String")

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_drw_text_beside = library.cfuncproto(
        library.load_so_libforms(), "fl_drw_text_beside",\
        None, [cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_COLOR, cty.c_int, cty.c_int, xfdata.STRING],
        """void fl_drw_text_beside(int align, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, FL_COLOR c, int style, int size,
           const char * str)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(align, xfdata.ALIGN_list)
    library.check_admitted_listvalues(align, xfdata.COLOR_list)
    library.check_admitted_listvalues(style, xfdata.TEXTSTYLE_list)
    library.check_admitted_listvalues(size, xfdata.FONTSIZE_list)
    ialign = library.convert_to_int(align)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    ulcolr = library.convert_to_FL_COLOR(colr)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    stxtstr = library.convert_to_string(txtstr)
    library.keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, style, istyle, size, isize, txtstr, stxtstr)
    _fl_drw_text_beside(ialign, ix, iy, iw, ih, ulcolr, istyle,
                        isize, stxtstr)


def fl_drw_text_cursor(align, x, y, w, h, colr, style, size, txtstr, curscolr, pos):
    """Draw text and, in addition, a cursor can optionally be drawn. It does no
    interpretation of the special character @ nor does it add padding around
    the text.

    @param align: alignment of text. Values (from xfdata module)
        FL_ALIGN_CENTER, FL_ALIGN_TOP, FL_ALIGN_BOTTOM, FL_ALIGN_LEFT,
        FL_ALIGN_RIGHT, FL_ALIGN_LEFT_TOP, FL_ALIGN_RIGHT_TOP,
        FL_ALIGN_LEFT_BOTTOM, FL_ALIGN_RIGHT_BOTTOM, FL_ALIGN_INSIDE,
        FL_ALIGN_VERT
    @type align: int
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int
    @param w: width in coord units
    @type w: int
    @param h: height in coord units
    @type h: int
    @param colr: color value
    @type colr: long_pos
    @param style: font style. Values (from xfdata module) FL_NORMAL_STYLE,
        FL_BOLD_STYLE, FL_ITALIC_STYLE, FL_BOLDITALIC_STYLE, FL_FIXED_STYLE,
        FL_FIXEDBOLD_STYLE, FL_FIXEDITALIC_STYLE, FL_FIXEDBOLDITALIC_STYLE,
        FL_TIMES_STYLE, FL_TIMESBOLD_STYLE, FL_TIMESITALIC_STYLE,
        FL_TIMESBOLDITALIC_STYLE, FL_MISC_STYLE, FL_MISCBOLD_STYLE,
        FL_MISCITALIC_STYLE, FL_SYMBOL_STYLE, FL_SHADOW_STYLE,
        FL_ENGRAVED_STYLE, FL_EMBOSSED_STYLE
    @type style: int
    @param size: font size. Values (from xfdata module) i.e. FL_TINY_SIZE,
        FL_SMALL_SIZE, FL_NORMAL_SIZE, FL_MEDIUM_SIZE, FL_LARGE_SIZE,
        FL_HUGE_SIZE, FL_DEFAULT_SIZE
    @type size: int
    @param txtstr: text to draw
    @type txtstr: str
    @param curscolr: color of the cursor
    @type curscolr: int
    @param pos: position which indicates the index of the character
        before which to draw the cursor (-1 for not showing it)
    @type pos: int

    @example: fl_drw_text_cursor(xfdata.FL_ALIGN_BOTTOM, 400, 175, 150, 45,
        xfdata.FL_GREEN, xfdata.FL_ITALIC_STYLE, xfdata.FL_SMALL_SIZE,
        "A Good Old String", xfdata.FL_YELLOW, 7)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_drw_text_cursor = library.cfuncproto(
        library.load_so_libforms(), "fl_drw_text_cursor",\
        None, [cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_COLOR, cty.c_int, cty.c_int, xfdata.STRING,
        cty.c_int, cty.c_int],
        """void fl_drw_text_cursor(int align, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, FL_COLOR c, int style, int size,
           const char * str, int cc, int pos)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(align, xfdata.ALIGN_list)
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    library.check_admitted_listvalues(style, xfdata.TEXTSTYLE_list)
    library.check_admitted_listvalues(size, xfdata.FONTSIZE_list)
    library.check_admitted_listvalues(curscolr, xfdata.COLOR_list)
    ialign = library.convert_to_int(align)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    ulcolr = library.convert_to_FL_COLOR(colr)
    istyle = library.convert_to_int(style)
    isize = library.convert_to_int(size)
    stxtstr = library.convert_to_string(txtstr)
    icurscolr = library.convert_to_int(curscolr)
    ipos = library.convert_to_int(pos)
    library.keep_elem_refs(align, ialign, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, style, istyle, size, isize, txtstr, stxtstr,
                   curscolr, icurscolr, pos, ipos)
    _fl_drw_text_cursor(ialign, ix, iy, iw, ih, ulcolr, istyle,
                        isize, stxtstr, icurscolr, ipos)


def fl_drw_box(boxtype, x, y, w, h, colr, bw):
    """Draws the bounding box of an object.

    @param boxtype: type of box to draw. Values (from xfdata module)
        FL_NO_BOX, FL_UP_BOX, FL_DOWN_BOX, FL_BORDER_BOX, FL_SHADOW_BOX,
        FL_FRAME_BOX, FL_ROUNDED_BOX, FL_EMBOSSED_BOX, FL_FLAT_BOX,
        FL_RFLAT_BOX, FL_RSHADOW_BOX, FL_OVAL_BOX, FL_ROUNDED3D_UPBOX,
        FL_ROUNDED3D_DOWNBOX, FL_OVAL3D_UPBOX, FL_OVAL3D_DOWNBOX,
        FL_OVAL3D_FRAMEBOX, FL_OVAL3D_EMBOSSEDBOX
    @type boxtype: int
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int
    @param w: width in coord units
    @type w: int
    @param h: height in coord units
    @type h: int
    @param colr: color value
    @type colr: long_pos
    @param bw: width of the boundary
    @type bw: int

    @example: fl_drw_box(xfdata.FL_DOWN_BOX, 700, 800, 600, 450,
        xfdata.FL_INDIGO, 3)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_drw_box = library.cfuncproto(
        library.load_so_libforms(), "fl_drw_box",\
        None, [cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_COLOR, cty.c_int],\
        """void fl_drw_box(int style, FL_Coord x, FL_Coord y, FL_Coord w,
           FL_Coord h, FL_COLOR c, int bw_in)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(boxtype, xfdata.BOXTYPE_list)
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    iboxtype = library.convert_to_int(boxtype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    ulcolr = library.convert_to_FL_COLOR(colr)
    ibw = library.convert_to_int(bw)
    library.keep_elem_refs(boxtype, iboxtype, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr, bw, ibw)
    _fl_drw_box(boxtype, x, y, w, h, ulcolr, ibw)


def fl_add_symbol(symbname, py_DrawPtr, scalable):
    """Adds a customly drawn symbol to the system which it can then use to
    display symbols on objects that are not provided by the library.

    @param symbname: name under which the symbol should be known (at most
        15 characters), without the leading @
    @type symbname: str
    @param py_DrawPtr: python function to draw symbol, no return
    @type py_DrawPtr: __ funcname (coord, coord, coord, coord,
        angle_degree_rotation, colr) __
    @param scalable: not used, a value of 0 will be fine
    @type scalable: int

    @returns: num.
    @rtype: int

    @example: def drawsymb(x, y, w, h, angle, col):
    @example: |->| ...
    @example: xf.fl_add_symbol("MySymbol", drawsymb, 0)

    @status: Tested + Doc + NoDemo = OK

    """
    #FL_DRAWPTR = cty.CFUNCTYPE(None, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord,
    #                           FL_Coord, cty.c_int, FL_COLOR)
    _fl_add_symbol = library.cfuncproto(
        library.load_so_libforms(), "fl_add_symbol",\
        cty.c_int, [xfdata.STRING, xfdata.FL_DRAWPTR, cty.c_int],\
        """int fl_add_symbol(const char * name, FL_DRAWPTR drawit,
           int scalable)""")
    library.check_if_initialized()
    ssymbname = library.convert_to_string(symbname)
    iscalable = library.convert_to_int(scalable)
    c_DrawPtr = xfdata.FL_DRAWPTR(py_DrawPtr)
    library.keep_cfunc_refs(c_DrawPtr, py_DrawPtr)
    library.keep_elem_refs(symbname, ssymbname, scalable, iscalable)
    retval = _fl_add_symbol(ssymbname, c_DrawPtr, iscalable)
    return retval


def fl_draw_symbol(symbname, x, y, w, h, colr):
    """Draws directly a symbol on the screen.

    @param symbname: name given to the symbol
    @type symbname: str
    @param x: horizontal position (upper-left corner)
    @type x: int
    @param y: vertical position (upper-left corner)
    @type y: int
    @param w: width in coord units
    @type w: int
    @param h: height in coord units
    @type h: int
    @param colr: color value
    @type colr: long_pos

    @returns: 1 (on success) or 0 (on failure)
    @rtype: int

    @example: fl_draw_symbol("willsym", 120, 120, 15, 20, xfdata.FL_LIGHTGRAY)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_draw_symbol = library.cfuncproto(
        library.load_so_libforms(), "fl_draw_symbol",\
        cty.c_int, [xfdata.STRING, xfdata.FL_Coord, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_COLOR],\
        """int fl_draw_symbol(const char * label, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, FL_COLOR col)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    ssymbname = library.convert_to_string(symbname)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(symbname, ssymbname, x, ix, y, iy, w, iw, h, ih, colr,
                   ulcolr)
    retval = _fl_draw_symbol(ssymbname, ix, iy, iw, ih, ulcolr)
    return retval


def fl_mapcolor(colr, r, g, b):
    """Changes the colormap and make a color index active so that it can be
    used in various drawing routines after initialization. It maps a new color
    using specific values for red, green and blue. In case a request fails, we
    substitute the closest color. It is recommended that you use an index
    larger than xfdata.FL_FREE_COL1 for your remap request to avoid
    accidentally free the colors you have not explicitly allocated. Indices
    larger than 224 are reserved and should not be used.

    @param colr: new color value to be mapped
    @type colr: long_pos
    @param r: value for red
    @type r: int
    @param g: value for green
    @type g: int
    @param b: value for blue
    @type b: int

    @returns: color value, or 0 (on failure)
    @rtype: long_pos

    @example: fl_mapcolor(xfdata.FL_FREE_COL1, 100, 200, 300)

    @status: Tested + Doc + Demo = OK

    """
    _fl_mapcolor = library.cfuncproto(
        library.load_so_libforms(), "fl_mapcolor",\
        cty.c_ulong, [xfdata.FL_COLOR, cty.c_int, cty.c_int, cty.c_int],
        """unsigned long fl_mapcolor(FL_COLOR col, int r, int g, int b)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    ir = library.convert_to_int(r)
    ig = library.convert_to_int(g)
    ib = library.convert_to_int(b)
    library.keep_elem_refs(colr, ulcolr, r, ir, g, ig, b, ib)
    retval = _fl_mapcolor(ulcolr, ir, ig, ib)
    return retval


def fl_mapcolorname(colr, rgbcolrname):
    """Sets the color in the colormap indexed by colr to the specified color
    name. It associates an index with a color name, which may have been
    obtained via resources.

    @param colr: color value to be mapped
    @type colr: long_pos
    @param rgbcolrname: name of mapped color from the systems color
        database file "rgb.txt" (see that file for possible values)
    @type rgbcolrname: str

    @returns: color pixel value, or -1 (on failure)
    @rtype: long

    @example: fl_mapcolorname(xfdata.FL_FREE_COL3, "PowderBlue")

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_mapcolorname = library.cfuncproto(
        library.load_so_libforms(), "fl_mapcolorname",\
        cty.c_long, [xfdata.FL_COLOR, xfdata.STRING],\
        """long int fl_mapcolorname(FL_COLOR col, const char * name)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    srgbcolrname = library.convert_to_string(rgbcolrname)
    library.keep_elem_refs(colr, ulcolr, rgbcolrname, srgbcolrname)
    retval = _fl_mapcolorname(ulcolr, srgbcolrname)
    return retval


fl_mapcolor_name = fl_mapcolorname


# commented as it gives a SegFault
#def fl_free_colors(colr, numcolr):
#    """Frees allocated array of colors from the default colormap, if index of
#    colors are known. You shouldn't do that for the reserved colors (i.e.
#    colors with indices below xfdata.FL_FREE_COL1).
#
#    @param colr: color value
#    @type colr: long_pos
#    @param numcolr: number of colors stored in the array of colors
#    @type numcolr: int
#
#    @example: ?
#
#    @status: Untested + NoDoc + NoDemo = NOT OK
#
#    """
#    _fl_free_colors = library.cfuncproto(
#        library.load_so_libforms(), "fl_free_colors",\
#        None, [cty.POINTER(xfdata.FL_COLOR), cty.c_int],\
#        """void fl_free_colors(FL_COLOR * c, int n)""")
#    library.check_if_initialized()
#    pcolr = cty.cast(colr, cty.POINTER(xfdata.FL_COLOR))
#    inumcolr = library.convert_to_int(numcolr)
#    library.keep_elem_refs(colr, pcolr, numcolr, inumcolr)
#    _fl_free_colors(pcolr, inumcolr)


# commented as it gives a SegFault
#def fl_free_pixels(pix, numcolr):
#    """Frees allocated colors from the default colormap, if pixel values are
#    known. You shouldn't do that for the reserved colors (i.e. colors with
#    indices below xfdata.FL_FREE_COL1).
#
#    @param pix: pixel number
#    @type pix: long_pos
#    @param numcolr: number of colors stored
#    @type numcolr: int
#
#    @example: ?
#
#    @status: Untested + NoDoc + NoDemo = NOT OK
#
#    """
#    _fl_free_pixels = library.cfuncproto(
#        library.load_so_libforms(), "fl_free_pixels",\
#        None, [cty.POINTER(cty.c_ulong), cty.c_int],\
#        """void fl_free_pixels(long unsigned int * pix, int n)""")
#    library.check_if_initialized()
#    ppix = cty.cast(pix, cty.POINTER(cty.c_ulong))
#    inumcolr = library.convert_to_int(numcolr)
#    library.keep_elem_refs(pix, ppix, numcolr, inumcolr)
#    _fl_free_pixels(ppix, inumcolr)


# TODO: figure out what is its purpose.
def fl_set_color_leak(flag):
    """ Enables or disables the leakage of color. ?

    @param flag: flag to enable/disable leakage of color. Values 0 (to
        disable) or 1 (to enable)
    @type flag: int

    @example: fl_set_color_leak(1)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_color_leak = library.cfuncproto(
        library.load_so_libforms(), "fl_set_color_leak",\
        None, [cty.c_int],\
        """void fl_set_color_leak(int y)""")
    library.check_if_initialized()
    iflag = library.convert_to_int(flag)
    library.keep_elem_refs(flag, iflag)
    _fl_set_color_leak(iflag)


def fl_getmcolor(colr):
    """Obtains the RGB values of an index, returning the pixel value as known
    by the X server. If you are interested in the internal colormap of XForms
    fl_get_icm_color() is more efficient.

    @param colr: color value
    @type colr: long_pos

    @returns: color pixel, red (r), green (r), blue (b)
    @rtype: long_pos, int, int, int

    @example: pixl, red, green, blue = fl_getmcolor(xfdata.FL_VIOLET)

    @attention: API change from XForms - upstream was
        fl_getmcolor(colr, r, g, b)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_getmcolor = library.cfuncproto(
        library.load_so_libforms(), "fl_getmcolor",\
        cty.c_ulong, [xfdata.FL_COLOR, cty.POINTER(cty.c_int),\
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
        """long unsigned int fl_getmcolor(FL_COLOR i, int * r, int * g,
           int * b)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    r, pr = library.make_int_and_pointer()
    g, pg = library.make_int_and_pointer()
    b, pb = library.make_int_and_pointer()
    library.keep_elem_refs(colr, ulcolr, r, g, b, pr, pg, pb)
    retval = _fl_getmcolor(ulcolr, pr, pg, pb)
    return retval, r.value, g.value, b.value


def fl_get_pixel(colr):
    """Obtains the actual pixel value the X server understands. XForms library
    keeps an internal colormap, initialized to predefined colors. The
    predefined colors do not correspond to pixel values the server understands
    but are indexes into the colormap. Therefore, they can't be used in any of
    the Graphics Context (GC) altering or Xlib routines.

    @param colr: color value
    @type colr: long_pos

    @returns: color pixel
    @rtype: long_pos

    @example: pixl = fl_get_pixel(xfdata.FL_PEACHPUFF)

    @status: Tested + Doc + Demo = OK

    """
    _fl_get_pixel = library.cfuncproto(
        library.load_so_libforms(), "fl_get_pixel",\
        cty.c_ulong, [xfdata.FL_COLOR],\
        """long unsigned int fl_get_pixel(FL_COLOR col)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(colr, ulcolr)
    retval = _fl_get_pixel(ulcolr)
    return retval


fl_get_flcolor = fl_get_pixel


def fl_get_icm_color(colr):
    """Queries the internal colormap handled by XForms, returning red, green
    and blue values corresponding to color index. Note that it does not
    communicate with the X server, it only return information about the
    internal colormap, which is made known to the X server by the
    initialization routine fl_initialize().

    @param colr: color value
    @type colr: long_pos

    @returns: red (r), green (g), blue (b)
    @rtype: int, int, int

    @example: red, green, blue = fl_get_icm_color(xfdata.FL_OLIVE)

    @attention: API change from XForms - upstream was
        fl_get_icm_color(colr, r, g, b)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_get_icm_color = library.cfuncproto(
        library.load_so_libforms(), "fl_get_icm_color",\
        None, [xfdata.FL_COLOR, cty.POINTER(cty.c_int),
        cty.POINTER(cty.c_int), cty.POINTER(cty.c_int)],\
        """void fl_get_icm_color(FL_COLOR col, int * r, int * g, int * b)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    r, pr = library.make_int_and_pointer()
    g, pg = library.make_int_and_pointer()
    b, pb = library.make_int_and_pointer()
    library.keep_elem_refs(colr, ulcolr, r, g, b, pr, pg, pb)
    _fl_get_icm_color(ulcolr, pr, pg, pb)
    return r.value, g.value, b.value


def fl_set_icm_color(colr, r, g, b):
    """Changes the internal colormap handled by XForms, setting a color index
    using a red, green and blue values' combination. You have to call
    fl_set_icm_color() before fl_initialize() to change XForms's default
    colormap. Note that it does not communicate with the X server, it only
    populate the internal colormap, which is made known to the X server by
    the initialization routine fl_initialize().

    @param colr: color value
    @type colr: long_pos
    @param r: value for red
    @type r: int
    @param g: value for green
    @type g: int
    @param b: value for blue
    @type b: int

    @example: fl_set_icm_color(xfdata.FL_FREE_COL8, 75, 150, 225)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_icm_color = library.cfuncproto(
        library.load_so_libforms(), "fl_set_icm_color",\
        None, [xfdata.FL_COLOR, cty.c_int, cty.c_int, cty.c_int],\
        """void fl_set_icm_color(FL_COLOR col, int r, int g, int b)""")
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    ir = library.convert_to_int(r)
    ig = library.convert_to_int(g)
    ib = library.convert_to_int(b)
    library.keep_elem_refs(colr, ulcolr, r, g, b, ir, ig, ib)
    _fl_set_icm_color(ulcolr, ir, ig, ib)


def fl_color(colr):
    """Sets the foreground color in the XForms library's default Graphics
    Context (gc[0]).

    @param colr: color value
    @type colr: long_pos

    @example: fl_color(xfdata.FL_ORANGE)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_color = library.cfuncproto(
        library.load_so_libforms(), "fl_color",\
        None, [xfdata.FL_COLOR],\
        """void fl_color(FL_COLOR col)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(colr, ulcolr)
    _fl_color(ulcolr)


def fl_bk_color(colr):
    """Sets the background color in the default Graphics Context (gc[0]).

    @param colr: color value
    @type colr: long_pos

    @example: fl_bk_color(xfdata.FL_MEDIUMORCHID)

    @status: Tested + Doc + NoDemo = OK
    """
    _fl_bk_color = library.cfuncproto(
        library.load_so_libforms(), "fl_bk_color",\
        None, [xfdata.FL_COLOR],\
        """void fl_bk_color(FL_COLOR col)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(colr, ulcolr)
    _fl_bk_color(ulcolr)


def fl_textcolor(colr):
    """Sets the foreground color for text in the default Graphics Context
    (gc[0]).

    @param colr: color value
    @type colr: long_pos

    @example: fl_textcolor(xfdata.FL_LIGHTCORAL)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_textcolor = library.cfuncproto(
        library.load_so_libforms(), "fl_textcolor",\
        None, [xfdata.FL_COLOR],\
        """void fl_textcolor(FL_COLOR col)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(colr, ulcolr)
    _fl_textcolor(ulcolr)


def fl_bk_textcolor(colr):
    """Sets the background color for text in the default Graphics Context
    (gc[0]).

    @param colr: color value
    @type colr: long_pos

    @example: fl_bk_textcolor(xfdata.FL_IVORY)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_bk_textcolor = library.cfuncproto(
        library.load_so_libforms(), "fl_bk_textcolor",\
        None, [xfdata.FL_COLOR],\
        """void fl_bk_textcolor(FL_COLOR col)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(colr, xfdata.COLOR_list)
    ulcolr = library.convert_to_FL_COLOR(colr)
    library.keep_elem_refs(colr, ulcolr)
    _fl_bk_textcolor(ulcolr)


def fl_set_gamma(r, g, b):
    """Adjusts the brightness of the builtin colors. Larger the value,
    brighter the colors. The default gamma is 1.

    @param r: gamma value for red
    @type r: float
    @param g: gamma value for green
    @type g: float
    @param b: gamma value for blue
    @type b: float

    @example: fl_set_gamma(2.0, 2.0, 2.0)

    @precondition: to be called before fl_initialize()
    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_gamma = library.cfuncproto(
        library.load_so_libforms(), "fl_set_gamma",\
        None, [cty.c_double, cty.c_double, cty.c_double],\
        """void fl_set_gamma(double r, double g, double b)""")
    fr = library.convert_to_double(r)
    fg = library.convert_to_double(g)
    fb = library.convert_to_double(b)
    library.keep_elem_refs(r, fr, g, fg, b, fb)
    _fl_set_gamma(fr, fg, fb)


# fl_show_errors(y) function placeholder (backwards)


# Some macros

def FL_max(a, b):
    if (a > b):
        return a
    else:
        return b


def FL_min(a, b):
    if (a < b):
        return a
    else:
        return b


def FL_abs(a):
    if (a > 0):
        return a
    else:
        return (-a)


def FL_nint(a):
    if int(a) > 0:
        return (a + 0.5)
    else:
        return (a - 0.5)


def FL_clamp(a, amin, amax):
    if (a < amin):
        return amin
    elif (a > amax):
        return amax
    else:
        return a


def FL_crnd(a):
    if a > 0:             # FL_Coord(a)
        return (a + 0.5)
    else:
        return (a - 0.5)


# utilities for new objects

def fl_add_object(pFlForm, pFlObject):
    """The object remains available (except if it's an object that marks the
    start or end of a group) and can be added again to the same or another form
    later. Normally, this function is used in object classes to add a newly
    created object to a form. It may not be used for objects representing the
    start or end of a group.

    @param pFlForm: form which an object will be added to
    @type pFlForm: pointer to xfdata.FL_FORM
    @param pFlObject: object to be added
    @type pFlObject: pointer to xfdata.FL_OBJECT

    @example: fl_add_object(pform2, pobjnew2)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_add_object = library.cfuncproto(
        library.load_so_libforms(), "fl_add_object",\
        None, [cty.POINTER(xfdata.FL_FORM), cty.POINTER(xfdata.FL_OBJECT)],
        """void fl_add_object(FL_FORM * form, FL_OBJECT * obj)""")
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.check_if_FL_OBJECT_ptr(pFlObject)
    library.keep_elem_refs(pFlForm, pFlObject)
    _fl_add_object(pFlForm, pFlObject)


def fl_addto_form(pFlForm):
    """Reopens a form (after fl_end_form) for adding further objects to it.

    @param pFlForm: form
    @type pFlForm: pointer to xfdata.FL_FORM

    @returns: form (pFlForm), or None (on failure)
    @rtype: pointer to xfdata.FL_FORM

    @example: form = fl_addto_form(closedform)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_addto_form = library.cfuncproto(
        library.load_so_libforms(), "fl_addto_form",
        cty.POINTER(xfdata.FL_FORM), [cty.POINTER(xfdata.FL_FORM)],\
        """FL_FORM * fl_addto_form(FL_FORM * form)""")
    library.check_if_initialized()
    library.check_if_FL_FORM_ptr(pFlForm)
    library.keep_elem_refs(pFlForm)
    retval = _fl_addto_form(pFlForm)
    return retval


def fl_make_object(objclass, objtype, x, y, w, h, label, py_HandlePtr):
    """Makes a custom object.

    @param objclass: class type of object to be made
    @type objclass: int
    @param objtype: type of the object to be made
    @type objtype: int
    @param x: horizontal position of object (upper-left corner)
    @type x: int
    @param y: vertical position of object (upper-left corner)
    @type y: int
    @param w: width in coord units
    @type w: int
    @param h: height coord units
    @type h: int
    @param label: text label of object
    @type label: str
    @param py_HandlePtr: python function for handling object, returning value
    @type py_HandlePtr: __ funcname (pFlObject, num, coord, coord, num,
        ptr_void) -> num __

    @returns: object made (pFlObject)
    @rtype: pointer to xfdata.FL_OBJECT

    @example: def handlecb(pobj, num, w, h, num, vdata):
    @example: |->| ...
    @example: |->| return 0
    @example: fl_make_object(...)

    @status: Untested + Doc + NoDemo = NOT OK

    """
    #FL_HANDLEPTR = cty.CFUNCTYPE(cty.c_int, cty.POINTER(xfdata.FL_OBJECT),
    #                cty.c_int, xfdata.FL_Coord, xfdata.FL_Coord, cty.c_int, cty.c_void_p)
    _fl_make_object = library.cfuncproto(
        library.load_so_libforms(), "fl_make_object",\
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING,
        xfdata.FL_HANDLEPTR],
        """FL_OBJECT * fl_make_object(int objclass, int type, FL_Coord x,
           FL_Coord y, FL_Coord w, FL_Coord h, const char * label,
           FL_HANDLEPTR handle)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(objclass, xfdata.OBJCLASS_list)
    iobjclass = library.convert_to_int(objclass)
    iobjtype = library.convert_to_int(objtype)
    ix = library.convert_to_FL_Coord(x)
    iy = library.convert_to_FL_Coord(y)
    iw = library.convert_to_FL_Coord(w)
    ih = library.convert_to_FL_Coord(h)
    slabel = library.convert_to_string(label)
    c_HandlePtr = xfdata.FL_HANDLEPTR(py_HandlePtr)
    library.keep_cfunc_refs(c_HandlePtr, py_HandlePtr)
    library.keep_elem_refs(objclass, objtype, x, y, w, h, label, iobjclass,
                   iobjtype, ix, iy, iw, ih, slabel)
    retval = _fl_make_object(iobjclass, iobjtype, ix, iy, iw,
                             ih, slabel, c_HandlePtr)
    return retval


def fl_add_child(pFlObject1, pFlObject2):
    """Makes an object a child of another object. An example is the scrollbar
    object. It has three child objects, a slider and two buttons, which all
    three are childs of the scrollbar object.

    @param pFlObject1: father object
    @type pFlObject1: pointer to xfdata.FL_OBJECT
    @param pFlObject2: child object to add
    @type pFlObject2: pointer to xfdata.FL_OBJECT

    @example: fl_add_child(pobjf, pobjs)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_add_child = library.cfuncproto(
        library.load_so_libforms(), "fl_add_child",\
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.POINTER(xfdata.FL_OBJECT)],
        """void fl_add_child(FL_OBJECT * p1, FL_OBJECT * p2)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject1)
    library.check_if_FL_OBJECT_ptr(pFlObject2)
    library.keep_elem_refs(pFlObject1, pFlObject2)
    _fl_add_child(pFlObject1, pFlObject2)


def fl_set_coordunit(unit):
    """Sets the unit for screen coordinates, instead of default ones (pixels).

    @param unit: coord unit type to set. Values (from xfdata module)
        FL_COORD_PIXEL, FL_COORD_MM, FL_COORD_POINT, FL_COORD_centiMM,
        FL_COORD_centiPOINT

    @example: fl_set_coordunit(xfdata.FL_COORD_MM)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_coordunit = library.cfuncproto(
        library.load_so_libforms(), "fl_set_coordunit",\
        None, [cty.c_int],\
        """void fl_set_coordunit(int u)""")
    library.check_if_initialized()
    library.check_admitted_listvalues(unit, xfdata.COORDUNIT_list)
    iunit = library.convert_to_int(unit)
    library.keep_elem_refs(unit, iunit)
    _fl_set_coordunit(iunit)


def fl_set_border_width(bw):
    """Sets the width of the border. If set to a negative number, all objects
    appear to have a softer appearance.

    @param bw: value of border width
    @type bw: int

    @example: fl_set_border_width(-3)

    @status: Tested + Doc + Demo = OK

    """
    _fl_set_border_width = library.cfuncproto(
        library.load_so_libforms(), "fl_set_border_width",\
        None, [cty.c_int],\
        """void fl_set_border_width(int bw)""")
    ibw = library.convert_to_int(bw)
    library.keep_elem_refs(bw, ibw)
    _fl_set_border_width(ibw)


def fl_set_scrollbar_type(sbtype):
    """Sets the type of a scrollbar.

    @param sbtype: type of scrollbar_var. Values (from xfdata module)
        FL_VERT_SCROLLBAR, FL_HOR_SCROLLBAR, FL_VERT_THIN_SCROLLBAR,
        FL_HOR_THIN_SCROLLBAR, FL_VERT_NICE_SCROLLBAR, FL_HOR_NICE_SCROLLBAR,
        FL_VERT_PLAIN_SCROLLBAR, FL_HOR_PLAIN_SCROLLBAR,
        FL_HOR_BASIC_SCROLLBAR, FL_VERT_BASIC_SCROLLBAR, FL_NORMAL_SCROLLBAR,
        FL_THIN_SCROLLBAR, FL_NICE_SCROLLBAR, FL_PLAIN_SCROLLBAR
    @type sbtype: int

    @example: fl_set_scrollbar_type(xfdata.FL_VERT_BASIC_SCROLLBAR)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_scrollbar_type = library.cfuncproto(
        library.load_so_libforms(), "fl_set_scrollbar_type",\
        None, [cty.c_int],\
        """void fl_set_scrollbar_type(int t)""")
    library.check_admitted_listvalues(sbtype, xfdata.SCROLLTYPE_list)
    isbtype = library.convert_to_int(sbtype)
    library.keep_elem_refs(sbtype, isbtype)
    _fl_set_scrollbar_type(isbtype)


def fl_set_thinscrollbar(flag):
    """Sets if scrollbar type is thin or normal.

    @param flag: flag if thin scrollbar or not. Values 1 (for thin) or 0
        (for normal)
    @type flag: int

    @example: fl_set_thinscrollbar(1)

    @status: Tested + Doc + NoDemo = OK

    """
    if flag:
        sbtype = xfdata.FL_THIN_SCROLLBAR
    else:
        sbtype = xfdata.FL_NORMAL_SCROLLBAR
    fl_set_scrollbar_type(sbtype)


def fl_flip_yorigin():
    """Sets the origin of XForms coordinates at the lower-left corner of the
    form (instead of default upper-left corner).

    @example: fl_flip_yorigin()

    @precondition: to be called before fl_initialize()
    @status: Tested + Doc + Demo = OK

    """
    _fl_flip_yorigin = library.cfuncproto(
        library.load_so_libforms(), "fl_flip_yorigin",\
        None, [],\
        """void fl_flip_yorigin()""")
    _fl_flip_yorigin()


def fl_get_coordunit():
    """Returns the unit used for screen coordinates (e.g. xfdata.FL_COORD_MM,
    xfdata.FL_COORD_centiPOINT, etc..).

    @returns: current coordinates unit
    @rtype: int

    @example: cunit = fl_get_coordunit()

    @status: Tested + Doc + Demo = OK

    """
    _fl_get_coordunit = library.cfuncproto(
            library.load_so_libforms(), "fl_get_coordunit",\
            cty.c_int, [],\
            """int fl_get_coordunit()""")
    library.check_if_initialized()
    retval = _fl_get_coordunit()
    return retval


def fl_get_border_width():
    """Returns the width of border.

    @returns: borderwidth (bw)
    @rtype: int

    @status: Tested + Doc + Demo = OK

    """
    _fl_get_border_width = library.cfuncproto(
        library.load_so_libforms(), "fl_get_border_width",\
        cty.c_int, [],\
        """int fl_get_border_width()""")
    library.check_if_initialized()
    retval = _fl_get_border_width()
    return retval


# misc. routines

def fl_ringbell(percent):
    """Sounds the keyboard ringbell (if capable). Note that not all
    keyboards support volume variations.

    @param percent: volume value for the bell. Values from -100 (minimum,
        off), to 100 (max), 0 is default.
    @type percent: int

    @example: fl_ringbell(50)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_ringbell = library.cfuncproto(
        library.load_so_libforms(), "fl_ringbell",\
        None, [cty.c_int],\
        """void fl_ringbell(int percent)""")
    library.check_if_initialized()
    ipercent = library.convert_to_int(percent)
    library.keep_elem_refs(percent, ipercent)
    _fl_ringbell(ipercent)


def fl_gettime():
    """Returns the current time, expressed in seconds and microseconds since
    1st January 1970, 00:00 GMT. It is most useful for computing time
    differences.

    @returns: seconds and microseconds (secs, msecs)
    @rtype: long, long

    @example: secs, usecs = fl_gettime()

    @attention: API change from XForms - upstream was fl_gettime(sec, usec)

    @status: Tested + Doc + Demo = OK

    """
    _fl_gettime = library.cfuncproto(
        library.load_so_libforms(), "fl_gettime",\
        None, [cty.POINTER(cty.c_long), cty.POINTER(cty.c_long)],\
        """void fl_gettime(long int * sec, long int * usec)""")
    library.check_if_initialized()
    sec, psec = library.make_long_and_pointer()
    usec, pusec = library.make_long_and_pointer()
    library.keep_elem_refs(sec, usec, psec, pusec)
    _fl_gettime(psec, pusec)
    return sec.value, usec.value


def fl_now():
    """Returns a string form of the current date and time. The format of the
    string is of the form "Wed Jun 30 21:49:08 1993"

    @returns: current date and time (text)
    @rtype: str

    @example: curdattim = fl_now()

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_now = library.cfuncproto(
        library.load_so_libforms(), "fl_now",\
        xfdata.STRING, [],\
        """const char * fl_now()""")
    library.check_if_initialized()
    retval = _fl_now()
    return retval


def fl_whoami():
    """Returns the user name who is running the application.

    @returns: text of username
    @rtype: str

    @example: usertxt = fl_whoami()

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_whoami = library.cfuncproto(
        library.load_so_libforms(), "fl_whoami",\
        xfdata.STRING, [],\
        """const char * fl_whoami()""")
    library.check_if_initialized()
    retval = _fl_whoami()
    return retval


def fl_mouse_button():
    """Returns which mouse button was pushed or released (from xfdata, e.g.
    FL_RIGHT_MOUSE, FL_MIDDLE_MOUSE, etc..). Sometimes an application program
    might need to find out more information about the event that triggered a
    callback, e.g., to implement mouse button number sensitive functionalities.
    This function, if needed, should be called from within a callback. If the
    callback is triggered by a shortcut, the function returns the keysym
    (ascii value if ASCII) of the key plus FL_SHORTCUT. For example, if a
    button has a shortcut <Ctrl>C (ASCII value is 3), the button number
    returned upon activation of the shortcut would be xfdata.FL_SHORTCUT + 3.
    You can use xfdata.FL_SHORTCUT to determine if the callback is triggered
    by a shortcut or not.

    @returns: which mouse button was pushed or released
    @rtype: long

    @example: mousebtn = fl_mouse_button()

    @status: Tested + Doc + Demo = OK

    """
    _fl_mouse_button = library.cfuncproto(
        library.load_so_libforms(), "fl_mouse_button",\
        cty.c_long, [],\
        """long int fl_mouse_button()""")
    library.check_if_initialized()
    retval = _fl_mouse_button()
    return retval


fl_mousebutton = fl_mouse_button


# fl_strdup(strng) function placeholder (low-level)


def fl_set_err_logfp(pFile):
    """Makes the default message handler to log the error to a file instead of
    printing to stderr.

    @param pFile: file opened in "w" mode by fl_popen()
    @type pFile: pointer to FILE

    @example: pfile = fl_popen("myerrlog", "w")
    @example: fl_set_err_logfp(pfile)

    @status: Tested + Doc + NoDemo = OK

    """
    _fl_set_err_logfp = library.cfuncproto(
        library.load_so_libforms(), "fl_set_err_logfp",\
        None, [cty.POINTER(xfdata.FILE)],\
        """void fl_set_err_logfp(FILE * fp)""")
    library.check_if_initialized()
    library.keep_elem_refs(pFile)
    _fl_set_err_logfp(pFile)


# fl_set_error_logfp placeholder (backwards)


def fl_set_error_handler(py_ErrorFunc):
    """Normally the Forms Library reports errors to stderr. This can be avoided
    or modified by registering an error handling function. The library will
    call the user handler function with a string indicating in which function
    an error occured and a formatting string, followed by zero or more
    arguments. To restore the default handler, call the function again with
    user handler set to None. You can call this function anytime and as many
    times as you wish.

    @param py_ErrorFunc: python function for handling error, no return
    @type py_ErrorFunc: __ funcname (strng, strng) __

    @example: def errhandler(funcnam, errmsg):
    @example: |->| print "Error caught in %s: %s." % (funcnam, errmsg)
    @example: fl_set_error_handler(errhandler)

    @status: Tested + Doc + NoDemo = OK

    """
    #FL_ERROR_FUNC = cty.CFUNCTYPE(None, xfdata.STRING, xfdata.STRING)
    _fl_set_error_handler = library.cfuncproto(
        library.load_so_libforms(), "fl_set_error_handler",\
        None, [xfdata.FL_ERROR_FUNC],\
        """void fl_set_error_handler(FL_ERROR_FUNC user_func)""")
    library.check_if_initialized()
    c_ErrorFunc = xfdata.FL_ERROR_FUNC(py_ErrorFunc)
    library.keep_cfunc_refs(c_ErrorFunc, py_ErrorFunc)
    retval = _fl_set_error_handler(c_ErrorFunc)
    return retval


# maybe pointless as command line args are not supported in python's fl_initialize()
# commented as it gives a SegFault
#def fl_get_cmdline_args(numargs):
#    """Returns command line arguments.
#
#    @param argnum: argument number
#    @type: argnum: int
#
#    @returns: argument
#    @rtype: pointer to str
#
#    @example: fl_get_cmdline_args(1)
#
#    @status: Untested + Doc + NoDemo = NOT OK

#    """
#    _fl_get_cmdline_args = library.cfuncproto(
#        library.load_so_libforms(), "fl_get_cmdline_args",\
#        cty.POINTER(xfdata.STRING), [cty.POINTER(cty.c_int)],\
#        """char * * fl_get_cmdline_args(int * p1)""")
#    library.check_if_initialized()
#    pnumargs = cty.cast(numargs, cty.POINTER(cty.c_int))
#    library.keep_elem_refs(numargs, pnumargs)
#    retval = _fl_get_cmdline_args(pnumargs)
#    return retval


# fl_free function placeholder (low-level)
# fl_malloc function placeholder (low-level)
# fl_calloc function placeholder (low-level)
# fl_realloc function placeholder (low-level)


def fl_msleep(msec):
    """Waits for a number of milliseconds (with the best resolution possible
    on your system).

    @param msec: milliseconds to sleep
    @type msec: long

    @returns: 0 (on success)
    @rtype: int

    @example: fl_msleep(200)

    @status: Tested + Doc + Demo = OK

    """
    _fl_msleep = library.cfuncproto(
        library.load_so_libforms(), "fl_msleep",\
        cty.c_int, [cty.c_ulong],\
        """int fl_msleep(long unsigned int msec)""")
    library.check_if_initialized()
    ulmsec = library.convert_to_ulong(msec)
    library.keep_elem_refs(msec, ulmsec)
    retval = _fl_msleep(ulmsec)
    return retval


def fl_is_same_object(pFlObject1, pFlObject2):
    """Does a comparison between two objects, if they are the same, or not.

    @param pFlObject1: 1st object to compare
    @type pFlObject1: pointer to xfdata.FL_OBJECT
    @param pFlObject2: 2nd object to compare
    @type pFlObject2: pointer to xfdata.FL_OBJECT

    @returns: 0 (if they are not the same) or non-zero (if they are)
    @rtype: int

    @example: if fl_is_same_object(pobj, pexitobj): ...

    @status: Tested + Doc + Demo = OK

    """
    _fl_is_same_object = library.cfuncproto(
        library.load_so_libforms(), "fl_is_same_object", \
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(xfdata.FL_OBJECT)], \
        """int fl_is_same_object(FL_OBJECT * obj1, FL_OBJECT * obj2)""")
    library.check_if_initialized()
    library.check_if_FL_OBJECT_ptr(pFlObject1)
    library.check_if_FL_OBJECT_ptr(pFlObject2)
    library.keep_elem_refs(pFlObject1, pFlObject2)
    retval = _fl_is_same_object(pFlObject1, pFlObject2)
    return retval

