#!/usr/bin/env python
# -*- coding: iso8859-1 -*-

"""
    xforms-python - Python wrapper for XForms (X11) GUI C toolkit library
    using ctypes

    Copyright (C) 2009, 2010  Luca Lazzaroni "LukenShiro"
    e-mail: <lukenshiro@ngi.it>

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation, version 2.1 of the License.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU LGPL along with this
    program. If not, see <http://www.gnu.org/licenses/>.

    See CREDITS file to read acknowledgements and thanks to XForms,
    ctypes and other developers.
"""

# originally generated by 'h2xml+gccxml' and 'xml2py'
# then heavily reordered and reworked


import ctypes as cty
import sys
import warnings
from xformslib import library as libr
from xformslib import xfdata




def warn_deprecated_function(altfunc=""):
    """ Warns the user when a function is deprecated and should not be used
        anymore. If a param is provided it may advide the user about an
        alternative function.
    """

    funcname = sys._getframe(1).f_code.co_name
    if altfunc:
        newaltfunc = "Use %s instead." % altfunc
    else:
        newaltfunc = ""
    warningmsg = "Function %s is deprecated and might be removed in future" \
                 " releases. %s" % (funcname, newaltfunc)
    warnings.warn(warningmsg, DeprecationWarning, 3)




#########################################################################
# Old variables used by some functions (deprecated from XForms upstream)
#########################################################################


# Pop-up menu item attributes. NOTE if more than 8, need to change
# choice and menu class where mode is kept by a single byte
# values for unnamed enumeration
FL_PUP_NONE = 0
"""No special display characteristic (default)"""
FL_PUP_GREY = 1
"""To be OR-ed with one of NONE, BOX, or RADIO to make that item appear
greyed-out and disable it (i.e. not selectable anymore)."""
FL_PUP_BOX = 2
"""Binary entry, i.e. an entry that stands for a choice that can be switched
on and off. Displayed with an unchecked box to the left."""
FL_PUP_CHECK = 4
"""To be OR-ed with one of BOX or RADIO to make the box to the left appear
checked or pushed."""
FL_PUP_RADIO = 8
"""Radio item belonging to a group, so that gets automatically switched off
when another item of the group is selected. Displayed with a diamonded-shaped
box at the left"""

FL_PUP_GRAY = FL_PUP_GREY
"""To be OR-ed with one of NONE, BOX, or RADIO to make that item appear
greyed-out and disable it (i.e. not selectable anymore)."""

#FL_PUP_TOGGLE placeholder (backwards)

FL_PUP_INACTIVE = FL_PUP_GREY
"""To be OR-ed with one of NONE, BOX, or RADIO to make that item appear
greyed-out and disable it (i.e. not selectable anymore)."""

# my add, list of possible values --LK
PUP_list = [FL_PUP_NONE, FL_PUP_GREY, FL_PUP_BOX, FL_PUP_CHECK, FL_PUP_RADIO,
            FL_PUP_GRAY, FL_PUP_INACTIVE]


# Popup and menu entries

FL_PUP_CB = cty.CFUNCTYPE(cty.c_int, cty.c_int)   # callback prototype



class FL_PUP_ENTRY(cty.Structure):
    pass
FL_PUP_ENTRY._fields_ = [
    ('text', xfdata.STRING),        # label of a popup/menu item
    ('callback', FL_PUP_CB),       # the callback function
    ('shortcut', xfdata.STRING),    # hotkeys
    ('mode', cty.c_int),           # FL_PUP_GRAY, FL_PUP_CHECK, etc.
]

FL_MENU_ENTRY = FL_PUP_ENTRY


#####################
# forms.h (menu.h)
# Object Class: Menu
#####################

# values for enumeration 'FL_MENU_TYPE'
FL_MENU_TYPE = cty.c_int # enum
FL_TOUCH_MENU = 0
""""""
FL_PUSH_MENU = 1
""""""
FL_PULLDOWN_MENU = 2
""""""

# my add - list of possibile values --LK
MENUTYPE_list = [FL_TOUCH_MENU, FL_PUSH_MENU, FL_PULLDOWN_MENU]


# Defaults
FL_MENU_BOXTYPE = xfdata.FL_BORDER_BOX
FL_MENU_COL1 = xfdata.FL_COL1
FL_MENU_COL2 = xfdata.FL_MCOL
FL_MENU_LCOL = xfdata.FL_LCOL
FL_MENU_ALIGN = xfdata.FL_ALIGN_CENTER

# Others
FL_MENU_MAXITEMS = 128


###############################
# forms.h (xpopupfn.h)
# Prototypes for xpop-up menus
###############################

FL_MAXPUPI = 128    # max item each pup
FL_PUP_PADH = 4     # space between each items


#####################
# forms.h (choice.h)
#####################

# values for enumeration 'FL_CHOICE_TYPE'
FL_CHOICE_TYPE = cty.c_int # enum
FL_NORMAL_CHOICE = 0
"""Middle/right mouse button shortcut."""
FL_NORMAL_CHOICE2 = 1
"""Same as FL_NORMAL_CHOICE except drawn differently."""
FL_DROPLIST_CHOICE = 2
"""Menu is activated only by pressing and releasing the mouse on the arrow."""
FL_BROWSER_CHOICE = 3
""""""

FL_SIMPLE_CHOICE = FL_NORMAL_CHOICE
"""Middle/right mouse button shortcut."""

# list of possible values - my add --LK
CHOICETYPE_list = [FL_NORMAL_CHOICE, FL_NORMAL_CHOICE2, FL_DROPLIST_CHOICE, \
                   FL_BROWSER_CHOICE, FL_SIMPLE_CHOICE]

# Defaults
FL_CHOICE_BOXTYPE = xfdata.FL_ROUNDED_BOX
FL_CHOICE_COL1 = xfdata.FL_COL1
FL_CHOICE_COL2 = xfdata.FL_LCOL
FL_CHOICE_LCOL = xfdata.FL_LCOL
FL_CHOICE_ALIGN = xfdata.FL_ALIGN_LEFT

# Others
FL_CHOICE_MCOL = xfdata.FL_MCOL
FL_CHOICE_MAXITEMS = 128


FL_PUP_ENTERCB = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)


FL_PUP_LEAVECB = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)



#################################################
# Old functions (deprecated from XForms upstream)
##################################################


#######################
# forms.h (browser.h)
# Object class Browser
#######################


def fl_set_default_browser_maxlinelength(num):
    """ fl_set_default_browser_maxlinelength(num) -> length num.

        Inactive function. Returns always 0

        @param num: unused parameter

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: do not use!
    """

    _fl_set_default_browser_maxlinelength = libr.cfuncproto(
            libr.load_so_libforms(), "fl_set_default_browser_maxlinelength",
            cty.c_int, [cty.c_int],
            """int fl_set_default_browser_maxlinelength(int n):
            """)
    warn_deprecated_function()
    inum = libr.convert_to_int(num)
    libr.keep_elem_refs(num, inum)
    retval = _fl_set_default_browser_maxlinelength(inum)
    return retval


#####################
# forms.h (choice.h)
#####################

# Routines

# fl_create_choice function placeholder (internal)


def fl_add_choice(choicetype, x, y, w, h, label):
    """ fl_add_choice(choicetype, x, y, w, h, label) -> pObject

        Adds a choice object.

        @param choicetype: type of choice to be added
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of choice

        :status: Tested + NoDoc + Example = OK
        @deprecated: Use corresponding fl_*select* function
    """


    _fl_add_choice = libr.cfuncproto(
            libr.load_so_libforms(), "fl_add_choice",
            cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
            xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
            """FL_OBJECT * fl_add_choice(int type, FL_Coord x, FL_Coord y,
               FL_Coord w, FL_Coord h, const char * label)
            """)
    warn_deprecated_function("fl_*select*")
    libr.check_admitted_value_in_list(choicetype, CHOICETYPE_list)
    ichoicetype = libr.convert_to_int(choicetype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(choicetype, x, y, w, h, label, ichoicetype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_choice(ichoicetype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_choice(pObject):
    """ fl_clear_choice(pObject)

        Clears the choice object.

        @param pObject: pointer to chioce object

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_clear_choice = libr.cfuncproto(
            libr.load_so_libforms(), "fl_clear_choice",
            None, [cty.POINTER(xfdata.FL_OBJECT)],
            """void fl_clear_choice(FL_OBJECT * ob)
            """)
    warn_deprecated_function("fl_*select*")
    libr.keep_elem_refs(pObject)
    _fl_clear_choice(pObject)


def fl_addto_choice(pObject, choicetxt):
    """ fl_addto_choice(pObject, choicetxt) -> num.

        Adds a single or multiple (delimited by '|') item(s) to a choice.

        @param pObject: pointer to choice object
        @param choicetxt: text of item(s) to be added

        :status: HalfTested + NoDoc + Example = NOT OK (sequence param.)
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_addto_choice = libr.cfuncproto(
            libr.load_so_libforms(), "fl_addto_choice",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
            """int fl_addto_choice(FL_OBJECT * ob, const char * str)
            """)
    warn_deprecated_function("fl_*select*")
    schoicetxt = libr.convert_to_string(choicetxt)
    libr.keep_elem_refs(pObject, choicetxt, schoicetxt)
    retval = _fl_addto_choice(pObject, schoicetxt)
    return retval


def fl_replace_choice(pObject, itemnum, choicetxt):
    """ fl_replace_choice(pObject, itemnum, choicetxt)

        Replaces a line to the choice item.

        @param pObject: pointer to choice object
        @param itemnum: item number to be replaced
        @param choicetxt: text of item to replace

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_replace_choice = libr.cfuncproto(
            libr.load_so_libforms(), "fl_replace_choice",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, xfdata.STRING],
            """void fl_replace_choice(FL_OBJECT * ob, int numb,
               const char * str)
            """)
    warn_deprecated_function("fl_*select*")
    iitemnum = libr.convert_to_int(itemnum)
    schoicetxt = libr.convert_to_string(choicetxt)
    libr.keep_elem_refs(pObject, itemnum, choicetxt, iitemnum, schoicetxt)
    _fl_replace_choice(pObject, iitemnum, schoicetxt)


def fl_delete_choice(pObject, itemnum):
    """ fl_delete_choice(pObject, itemnum)

        Removes a line from the choice item.

        @param pObject: pointer to choice object
        @param itemnum: item number

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_delete_choice = libr.cfuncproto(
            libr.load_so_libforms(), "fl_delete_choice",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_delete_choice(FL_OBJECT * ob, int numb)
            """)
    warn_deprecated_function("fl_*select*")
    iitemnum = libr.convert_to_int(itemnum)
    libr.keep_elem_refs(pObject, itemnum, iitemnum)
    _fl_delete_choice(pObject, iitemnum)


def fl_set_choice(pObject, choice):
    """ fl_set_choice(pObject, choice)

        Sets the number of the choice.

        @param pObject: pointer to choice object
        @param choice: choice number

        :status: Tested + NoDoc + Example = OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_set_choice = libr.cfuncproto(
            libr.load_so_libforms(), "fl_set_choice",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_choice(FL_OBJECT * ob, int choice)
            """)
    warn_deprecated_function("fl_*select*")
    ichoice = libr.convert_to_int(choice)
    libr.keep_elem_refs(pObject, choice, ichoice)
    _fl_set_choice(pObject, ichoice)


def fl_set_choice_text(pObject, choicetxt):
    """ fl_set_choice_text(pObject, choicetxt)

        Sets the choice using choice text.

        @param pObject: pointer to choice object
        @param choicetxt: text of choice

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_set_choice_text = libr.cfuncproto(
            libr.load_so_libforms(), "fl_set_choice_text",
            None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
            """void fl_set_choice_text(FL_OBJECT * ob, const char * txt)
            """)
    warn_deprecated_function("fl_*select*")
    schoicetxt = libr.convert_to_string(choicetxt)
    libr.keep_elem_refs(pObject, choicetxt, schoicetxt)
    _fl_set_choice_text(pObject, schoicetxt)


def fl_get_choice(pObject):
    """ fl_get_choice(pObject) -> num.

        Returns the number of the choice.

        @param pObject: pointer to choice object

        :status: Tested + NoDoc + Example = OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_get_choice = libr.cfuncproto(
            libr.load_so_libforms(), "fl_get_choice",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_choice(FL_OBJECT * ob)
            """)
    warn_deprecated_function("fl_*select*")
    libr.keep_elem_refs(pObject)
    retval = _fl_get_choice(pObject)
    return retval


def fl_get_choice_item_text(pObject, itemnum):
    """ fl_get_choice_item_text(pObject, itemnum) -> text string

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_get_choice_item_text = libr.cfuncproto(
            libr.load_so_libforms(), "fl_get_choice_item_text",
            xfdata.STRING, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """const char * fl_get_choice_item_text(FL_OBJECT * ob, int n)
            """)
    warn_deprecated_function("fl_*select*")
    iitemnum = libr.convert_to_int(itemnum)
    libr.keep_elem_refs(pObject, itemnum, iitemnum)
    retval = _fl_get_choice_item_text(pObject, iitemnum)
    return retval


def fl_get_choice_maxitems(pObject):
    """ fl_get_choice_maxitems(pObject) -> items num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_get_choice_maxitems = libr.cfuncproto(
            libr.load_so_libforms(), "fl_get_choice_maxitems",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
            """int fl_get_choice_maxitems(FL_OBJECT * ob)
            """)
    warn_deprecated_function("fl_*select*")
    libr.keep_elem_refs(pObject)
    retval = _fl_get_choice_maxitems(pObject)
    return retval


def fl_get_choice_text(pObject):
    """ fl_get_choice_text(pObject) -> text string

        Returns the text of the choice.

        @param pObject: pointer to choice object

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_get_choice_text = libr.cfuncproto(
            libr.load_so_libforms(), "fl_get_choice_text",
            xfdata.STRING, [cty.POINTER(xfdata.FL_OBJECT)],
            """const char * fl_get_choice_text(FL_OBJECT * ob)
            """)
    warn_deprecated_function("fl_*select*")
    libr.keep_elem_refs(pObject)
    retval = _fl_get_choice_text(pObject)
    return retval


def fl_set_choice_fontsize(pObject, size):
    """ fl_set_choice_fontsize(pObject, size)

        Sets the font size inside the choice.

        @param pObject: pointer to choice object
        @param size: font size of choice to be set

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_set_choice_fontsize = libr.cfuncproto(
            libr.load_so_libforms(), "fl_set_choice_fontsize",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_choice_fontsize(FL_OBJECT * ob, int size)
            """)
    warn_deprecated_function("fl_*select*")
    isize = libr.convert_to_int(size)
    libr.keep_elem_refs(pObject, size, isize)
    _fl_set_choice_fontsize(pObject, isize)


def fl_set_choice_fontstyle(pObject, style):
    """ fl_set_choice_fontstyle(pObject, style)

        Sets the font style inside the choice.

        @param pObject: pointer to choice object
        @param style: font style of choice to be set

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_set_choice_fontstyle = libr.cfuncproto(
            libr.load_so_libforms(), "fl_set_choice_fontstyle",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_choice_fontstyle(FL_OBJECT * ob, int style)
            """)
    warn_deprecated_function("fl_*select*")
    istyle = libr.convert_to_int(style)
    libr.keep_elem_refs(pObject, style, istyle)
    _fl_set_choice_fontstyle(pObject, istyle)


def fl_set_choice_align(pObject, align):
    """ fl_set_choice_align(pObject, align)

        Sets alignment of text inside the choice.

        @param pObject: pointer to choice object
        @param align: alignment of choice text to be set

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_set_choice_align = libr.cfuncproto(
            libr.load_so_libforms(), "fl_set_choice_align",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_choice_align(FL_OBJECT * ob, int align)
            """)
    warn_deprecated_function("fl_*select*")
    libr.check_admitted_value_in_list(align, xfdata.ALIGN_list)
    ialign = libr.convert_to_int(align)
    libr.keep_elem_refs(pObject, align, ialign)
    _fl_set_choice_align(pObject, ialign)


def fl_get_choice_item_mode(pObject, itemnum):
    """ fl_get_choice_item_mode(pObject, itemnum) -> mode num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_get_choice_item_mode = libr.cfuncproto(
            libr.load_so_libforms(), "fl_get_choice_item_mode",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """int fl_get_choice_item_mode(FL_OBJECT * ob, int item)
            """)
    warn_deprecated_function("fl_*select*")
    iitemnum = libr.convert_to_int(itemnum)
    libr.keep_elem_refs(pObject, itemnum, iitemnum)
    retval = _fl_get_choice_item_mode(pObject, iitemnum)
    return retval


def fl_set_choice_item_mode(pObject, itemnum, mode):
    """ fl_set_choice_item_mode(pObject, itemnum, mode)

        Sets the mode of an item in a choice object.

        @param pObject: pointer to choice object
        @param itemnum: item number whose mode is to be set
        @param mode: mode of item

        :status: Tested + NoDoc + Example = OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_set_choice_item_mode = libr.cfuncproto(
            libr.load_so_libforms(), "fl_set_choice_item_mode",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_uint],
            """void fl_set_choice_item_mode(FL_OBJECT * ob, int item,
               unsigned int mode)
            """)
    warn_deprecated_function("fl_*select*")
    iitemnum = libr.convert_to_int(itemnum)
    uimode = libr.convert_to_uint(mode)
    libr.keep_elem_refs(pObject, itemnum, mode, iitemnum, uimode)
    _fl_set_choice_item_mode(pObject, iitemnum, uimode)


def fl_set_choice_item_shortcut(pObject, itemnum, sctext):
    """ fl_set_choice_item_shortcut(pObject, itemnum, sstext)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated
    """

    _fl_set_choice_item_shortcut = libr.cfuncproto(
            libr.load_so_libforms(), "fl_set_choice_item_shortcut",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, xfdata.STRING],
            """void fl_set_choice_item_shortcut(FL_OBJECT * ob, int item,
               const char * sc)
            """)
    warn_deprecated_function("fl_*select*")
    iitemnum = libr.convert_to_int(itemnum)
    ssctext = libr.convert_to_string(sctext)
    libr.keep_elem_refs(pObject, itemnum, sctext, iitemnum, ssctext)
    _fl_set_choice_item_shortcut(pObject, iitemnum, ssctext)


def fl_set_choice_entries(pObject, pPupEntry):
    """ fl_set_choice_entries(pObject, pPupEntry) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_set_choice_entries = libr.cfuncproto(
            libr.load_so_libforms(), "fl_set_choice_entries",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT),
            cty.POINTER(FL_PUP_ENTRY)],
            """int fl_set_choice_entries(FL_OBJECT * ob, FL_PUP_ENTRY * ent)
            """)
    warn_deprecated_function("fl_*select*")
    libr.keep_elem_refs(pObject, pPupEntry)
    retval = _fl_set_choice_entries(pObject, pPupEntry)
    return retval


def fl_set_choice_notitle(pObject, num):
    """ fl_set_choice_notitle(pObject, num) -> num.

        :status: Tested + NoDoc + Example = OK
        @deprecated: Use corresponding fl_*select* function
    """

    _fl_set_choice_notitle = libr.cfuncproto(
            libr.load_so_libforms(), "fl_set_choice_notitle",
            cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """int fl_set_choice_notitle(FL_OBJECT * ob, int n)
            """)
    warn_deprecated_function("fl_*select*")
    inum = libr.convert_to_int(num)
    libr.keep_elem_refs(pObject, num, inum)
    retval = _fl_set_choice_notitle(pObject, inum)
    return retval


######################
# forms.h (countervar.h)
######################


def fl_set_counter_return(pObject, when):
    """ fl_set_counter_return(pObject, when)

        @param when: return type (when it returns)

        :status: Tested + NoDoc + Example = OK
        @deprecated: Use fl_set_object_return function
    """
    _fl_set_counter_return = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_counter_return",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint],
        """void fl_set_counter_return(FL_OBJECT * ob, unsigned
           int how)""")
    warn_deprecated_function("fl_set_object_return")
    libr.check_admitted_value_in_list(when, xfdata.RETURN_list)
    uiwhen = libr.convert_to_uint(when)
    libr.keep_elem_refs(pObject, when, uiwhen)
    _fl_set_counter_return(pObject, uiwhen)


#####################
# forms.h (menu.h)
# Object Class: Menu
#####################

def fl_add_menu(menutype, x, y, w, h, label):
    """
        fl_add_menu(menutype, x, y, w, h, label) -> pObject

        Adds a menu object.

        @param menutype: type of menu to be added
        @param x: horizontal position (upper-left corner)
        @param x: vertical position (upper-left corner)
        @param w: width in coord units
        @param h: height in coord units
        @param label: text label of menu

        :status: Tested + NoDoc + Example = OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_add_menu = libr.cfuncproto(
        libr.load_so_libforms(), "fl_add_menu",
        cty.POINTER(xfdata.FL_OBJECT), [cty.c_int, xfdata.FL_Coord,
        xfdata.FL_Coord, xfdata.FL_Coord, xfdata.FL_Coord, xfdata.STRING],
        """FL_OBJECT * fl_add_menu(int type, FL_Coord x, FL_Coord y,
           FL_Coord w, FL_Coord h, const char * label) """)
    warn_deprecated_function("fl_*nmenu*")
    libr.check_admitted_value_in_list(menutype, MENUTYPE_list)
    imenutype = libr.convert_to_int(menutype)
    ix = libr.convert_to_FL_Coord(x)
    iy = libr.convert_to_FL_Coord(y)
    iw = libr.convert_to_FL_Coord(w)
    ih = libr.convert_to_FL_Coord(h)
    slabel = libr.convert_to_string(label)
    libr.keep_elem_refs(menutype, x, y, w, h, label, imenutype, ix, iy,
                   iw, ih, slabel)
    retval = _fl_add_menu(imenutype, ix, iy, iw, ih, slabel)
    return retval


def fl_clear_menu(pObject):
    """
        fl_clear_menu(pObject)

        :status: Untested + NoDoc + NoExample = NOT OK

        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_clear_menu = libr.cfuncproto(
        libr.load_so_libforms(), "fl_clear_menu",
        None, [cty.POINTER(xfdata.FL_OBJECT)],
        """void fl_clear_menu(FL_OBJECT * ob) """)
    warn_deprecated_function("fl_*nmenu*")
    libr.keep_elem_refs(pObject)
    _fl_clear_menu(pObject)


def fl_set_menu(pObject, menustr):
    """
        fl_set_menu(pObject, menustr)

        Sets the menu to a particular menu string.

        @param pObject: pointer to menu object
        @param menustr: text string of menu

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_set_menu = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_menu",
        None, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """void fl_set_menu(FL_OBJECT * ob, const char * menustr) """)
    warn_deprecated_function("fl_*nmenu*")
    smenustr = libr.convert_to_string(menustr)
    libr.keep_elem_refs(pObject, menustr, smenustr)
    _fl_set_menu(pObject, smenustr)


def fl_addto_menu(pObject, menustr):
    """
        fl_addto_menu(pObject, menustr) -> num.

        :status: HalfTested + NoDoc + Example = NOT OK (sequence param.)
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_addto_menu = libr.cfuncproto(
        libr.load_so_libforms(), "fl_addto_menu",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), xfdata.STRING],
        """int fl_addto_menu(FL_OBJECT * ob, const char * menustr) """)
    warn_deprecated_function("fl_*nmenu*")
    smenustr = libr.convert_to_string(menustr)
    libr.keep_elem_refs(pObject, menustr, smenustr)
    retval = _fl_addto_menu(pObject, smenustr)
    return retval


def fl_replace_menu_item(pObject, itemnum, itemstr):
    """
        fl_replace_menu_item(pObject, itemnum, itemstr)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_replace_menu_item = libr.cfuncproto(
        libr.load_so_libforms(), "fl_replace_menu_item",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, xfdata.STRING],
        """void fl_replace_menu_item(FL_OBJECT * ob, int numb,
           const char * str) """)
    warn_deprecated_function("fl_*nmenu*")
    iitemnum = libr.convert_to_int(itemnum)
    sitemstr = libr.convert_to_string(itemstr)
    libr.keep_elem_refs(pObject, itemnum, itemstr, iitemnum, sitemstr)
    _fl_replace_menu_item(pObject, iitemnum, sitemstr)


def fl_delete_menu_item(pObject, itemnum):
    """
        fl_delete_menu_item(pObject, itemnum)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_delete_menu_item = libr.cfuncproto(
        libr.load_so_libforms(), "fl_delete_menu_item",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_delete_menu_item(FL_OBJECT * ob, int numb) """)
    warn_deprecated_function("fl_*nmenu*")
    iitemnum = libr.convert_to_int(itemnum)
    libr.keep_elem_refs(pObject, itemnum, iitemnum)
    _fl_delete_menu_item(pObject, iitemnum)


def fl_set_menu_item_callback(pObject, itemnum, py_PupCb):
    """
        fl_set_menu_item_callback(pObject, itemnum, py_PupCb) -> callback

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_set_menu_item_callback = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_menu_item_callback",
        FL_PUP_CB, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int,
        FL_PUP_CB],
        """FL_PUP_CB fl_set_menu_item_callback(FL_OBJECT * ob, int numb,
           FL_PUP_CB cb)""")
    warn_deprecated_function("fl_*nmenu*")
    iitemnum = libr.convert_to_int(itemnum)
    c_PupCb = FL_PUP_CB(py_PupCb)
    libr.keep_cfunc_refs(c_PupCb, py_PupCb)
    libr.keep_elem_refs(pObject, itemnum, iitemnum)
    retval = _fl_set_menu_item_callback(pObject, iitemnum, c_PupCb)
    return retval


def fl_set_menu_item_shortcut(pObject, itemnum, textsc):
    """
        fl_set_menu_item_shortcut(pObject, itemnum, textsc)

        Sets the shortcut of a menu item.

        @param pObject: pointer to menu object
        @param itemnum: item number to be operated on
        @param textsc: text of shortcut to be set

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_set_menu_item_shortcut = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_menu_item_shortcut",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, xfdata.STRING],
        """void fl_set_menu_item_shortcut(FL_OBJECT * ob, int numb,
           const char * str) """)
    warn_deprecated_function("fl_*nmenu*")
    iitemnum = libr.convert_to_int(itemnum)
    stextsc = libr.convert_to_string(textsc)
    libr.keep_elem_refs(pObject, itemnum, stextsc, iitemnum, stextsc)
    _fl_set_menu_item_shortcut(pObject, iitemnum, stextsc)


def fl_set_menu_item_mode(pObject, itemnum, mode):
    """
        fl_set_menu_item_mode(pObject, itemnum, mode)

        Sets the mode of a menu item.

        @param pObject: pointer to menu object
        @param itemnum: id of an item to be operated on
        @param mode: mode to be set

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_set_menu_item_mode = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_menu_item_mode",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_uint],
        """void fl_set_menu_item_mode(FL_OBJECT * ob, int numb,
           unsigned int mode)""")
    warn_deprecated_function("fl_*nmenu*")
    iitemnum = libr.convert_to_int(itemnum)
    uimode = libr.convert_to_uint(mode)
    libr.keep_elem_refs(pObject, itemnum, mode, iitemnum, uimode)
    _fl_set_menu_item_mode(pObject, iitemnum, uimode)


def fl_show_menu_symbol(pObject, flag):
    """
        fl_show_menu_symbol(pObject, flag)

        Makes the menu symbol visible or not.

        @param pObject: pointer to menu object
        @param flag: flag to show menu or not (1|0)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_show_menu_symbol = libr.cfuncproto(
        libr.load_so_libforms(), "fl_show_menu_symbol",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_show_menu_symbol(FL_OBJECT * ob, int show) """)
    warn_deprecated_function("fl_*nmenu*")
    iflag = libr.convert_to_int(flag)
    libr.keep_elem_refs(pObject, flag, iflag)
    _fl_show_menu_symbol(pObject, iflag)


def fl_set_menu_popup(pObject, pup):
    """
        fl_set_menu_popup(pObject, pup)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_set_menu_popup = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_menu_popup",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """void fl_set_menu_popup(FL_OBJECT * ob, int pup)""")
    warn_deprecated_function("fl_*nmenu*")
    ipup = libr.convert_to_int(pup)
    libr.keep_elem_refs(pObject, pup, ipup)
    _fl_set_menu_popup(pObject, ipup)


def fl_get_menu_popup(pObject):
    """
        fl_get_menu_popup(pObject) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_get_menu_popup = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_menu_popup",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_menu_popup(FL_OBJECT * ob) """)
    warn_deprecated_function("fl_*nmenu*")
    libr.keep_elem_refs(pObject)
    retval = _fl_get_menu_popup(pObject)
    return retval


def fl_get_menu(pObject):
    """
        fl_get_menu(pObject) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_get_menu = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_menu",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_menu(FL_OBJECT * ob) """)
    warn_deprecated_function("fl_*nmenu*")
    libr.keep_elem_refs(pObject)
    retval = _fl_get_menu(pObject)
    return retval


def fl_get_menu_item_text(pObject, numb):
    """
        fl_get_menu_item_text(pObject, numb) -> text string

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_get_menu_item_text = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_menu_item_text",
        xfdata.STRING, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """const char * fl_get_menu_item_text(FL_OBJECT * ob, int numb) """)
    warn_deprecated_function("fl_*nmenu*")
    inumb = libr.convert_to_int(numb)
    libr.keep_elem_refs(pObject, numb, inumb)
    retval = _fl_get_menu_item_text(pObject, inumb)
    return retval


def fl_get_menu_maxitems(pObject):
    """
        fl_get_menu_maxitems(pObject) -> items num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_get_menu_maxitems = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_menu_maxitems",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT)],
        """int fl_get_menu_maxitems(FL_OBJECT * ob) """)
    warn_deprecated_function("fl_*nmenu*")
    libr.keep_elem_refs(pObject)
    retval = _fl_get_menu_maxitems(pObject)
    return retval


def fl_get_menu_item_mode(pObject, itemnum):
    """
        fl_get_menu_item_mode(pObject, itemnum) -> mode num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_get_menu_item_mode = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_menu_item_mode",
        cty.c_uint, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """unsigned int fl_get_menu_item_mode(FL_OBJECT * ob, int numb) """)
    warn_deprecated_function("fl_*nmenu*")
    iitemnum = libr.convert_to_int(itemnum)
    libr.keep_elem_refs(pObject, itemnum, iitemnum)
    retval = _fl_get_menu_item_mode(pObject, iitemnum)
    return retval


def fl_get_menu_text(pObject):
    """
        fl_get_menu_text(pObject) -> text string

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_get_menu_text = libr.cfuncproto(
        libr.load_so_libforms(), "fl_get_menu_text",
        xfdata.STRING, [cty.POINTER(xfdata.FL_OBJECT)],
        """const char * fl_get_menu_text(FL_OBJECT * ob) """)
    warn_deprecated_function("fl_*nmenu*")
    libr.keep_elem_refs(pObject)
    retval = _fl_get_menu_text(pObject)
    return retval


def fl_set_menu_entries(pObject, pPupEntry):
    """
        fl_set_menu_entries(pObject, pPupEntry) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_set_menu_entries = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_menu_entries",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT),
        cty.POINTER(FL_PUP_ENTRY)],
        """int fl_set_menu_entries(FL_OBJECT * ob, FL_PUP_ENTRY * ent) """)
    warn_deprecated_function("fl_*nmenu*")
    libr.keep_elem_refs(pObject, pPupEntry)
    retval = _fl_set_menu_entries(pObject, pPupEntry)
    return retval


def fl_set_menu_notitle(pObject, off):
    """
        fl_set_menu_notitle(pObject, off) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_set_menu_notitle = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_menu_notitle",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
        """int fl_set_menu_notitle(FL_OBJECT * ob, int off) """)
    warn_deprecated_function("fl_*nmenu*")
    ioff = libr.convert_to_int(off)
    libr.keep_elem_refs(pObject, off, ioff)
    retval = _fl_set_menu_notitle(pObject, ioff)
    return retval


def fl_set_menu_item_id(pObject, itemnum, idnum):
    """
        fl_set_menu_item_id(pObject, itemnum, idnum) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*nmenu* function
    """
    _fl_set_menu_item_id = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_menu_item_id",
        cty.c_int, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int, cty.c_int],
        """int fl_set_menu_item_id(FL_OBJECT * ob, int item, int id) """)
    warn_deprecated_function("fl_*nmenu*")
    iitemnum = libr.convert_to_int(itemnum)
    iidnum = libr.convert_to_int(idnum)
    libr.keep_elem_refs(pObject, itemnum, idnum, iitemnum, iidnum)
    retval = _fl_set_menu_item_id(pObject, iitemnum, iidnum)
    return retval


###############################
# forms.h (xpopupfn.h)
# Prototypes for xpop-up menus
###############################

def fl_setpup_entries(popupid, pPupEntry):
    """
        fl_setpup_entries(popupid, pPupEntry) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_entries = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_entries",
        cty.c_int, [cty.c_int, cty.POINTER(FL_PUP_ENTRY)],
        """int fl_setpup_entries(int nm, FL_PUP_ENTRY * entries) """)
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    libr.keep_elem_refs(popupid, pPupEntry, ipopupid)
    retval = _fl_setpup_entries(ipopupid, pPupEntry)
    return retval


def fl_newpup(win):
    """
        fl_newpup(win) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_newpup = libr.cfuncproto(
        libr.load_so_libforms(), "fl_newpup",
        cty.c_int, [xfdata.Window],
        """int fl_newpup(Window win) """)
    warn_deprecated_function("fl_*popup*")
    ulwin = libr.convert_to_Window(win)
    libr.keep_elem_refs(win, ulwin)
    retval = _fl_newpup(ulwin)
    return retval


def fl_defpup(win, pupstr):
    """
        fl_defpup(win, pupstr) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_defpup = libr.cfuncproto(
        libr.load_so_libforms(), "fl_defpup",
        cty.c_int, [xfdata.Window, xfdata.STRING],
        """int fl_defpup(Window win, const char * str)""")
    warn_deprecated_function("fl_*popup*")
    ulwin = libr.convert_to_Window(win)
    spupstr = libr.convert_to_string(pupstr)
    libr.keep_elem_refs(win, pupstr, ulwin, spupstr)
    retval = _fl_defpup(ulwin, spupstr)
    return retval


def fl_addtopup(popupid, pupstr):
    """
        fl_addtopup(popupid, pupstr) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_addtopup = libr.cfuncproto(
        libr.load_so_libforms(), "fl_addtopup",
        cty.c_int, [cty.c_int, xfdata.STRING],
        """int fl_addtopup(int n, const char * str)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    spupstr = libr.convert_to_string(pupstr)
    libr.keep_elem_refs(popupid, pupstr, ipopupid, spupstr)
    retval = _fl_addtopup(ipopupid, spupstr)
    return retval


def fl_setpup_mode(popupid, itemval, mode):
    """
        fl_setpup_mode(popupid, itemval, mode) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_mode = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_mode",
        cty.c_int, [cty.c_int, cty.c_int, cty.c_uint],
        """int fl_setpup_mode(int nm, int ni, unsigned int mode)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    iitemval = libr.convert_to_int(itemval)
    uimode = libr.convert_to_uint(mode)
    libr.keep_elem_refs(popupid, itemval, mode, ipopupid, iitemval, uimode)
    retval = _fl_setpup_mode(ipopupid, iitemval, uimode)
    return retval


def fl_freepup(popupid):
    """
        fl_freepup(popupid)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_freepup = libr.cfuncproto(
        libr.load_so_libforms(), "fl_freepup",
        None, [cty.c_int],
        """void fl_freepup(int n)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    libr.keep_elem_refs(popupid, ipopupid)
    _fl_freepup(ipopupid)


def fl_dopup(popupid):
    """
        fl_dopup(popupid) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_dopup = libr.cfuncproto(
        libr.load_so_libforms(), "fl_dopup",
        cty.c_int, [cty.c_int],
        """int fl_dopup(int n) """)
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    libr.keep_elem_refs(popupid, ipopupid)
    retval = _fl_dopup(ipopupid)
    return retval


def fl_setpup_default_cursor(cursor):
    """
        fl_setpup_default_cursor(cursor) -> cursor

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_default_cursor = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_default_cursor",
        cursor.Cursor, [cty.c_int],
        """Cursor fl_setpup_default_cursor(int cursor)""")
    warn_deprecated_function("fl_*popup*")
    icursor = libr.convert_to_int(cursor)
    libr.keep_elem_refs(cursor, icursor)
    retval = _fl_setpup_default_cursor(icursor)
    return retval


def fl_setpup_default_color(fgcolr, bgcolr):
    """
        fl_setpup_default_color(fgcolr, bgcolr)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """

    _fl_setpup_default_color = libr.cfuncproto(
            libr.load_so_libforms(), "fl_setpup_default_color",
            None, [xfdata.FL_COLOR, xfdata.FL_COLOR],
            """void fl_setpup_default_color(FL_COLOR fg, FL_COLOR bg)
            """)
    warn_deprecated_function("fl_*popup*")
    libr.check_admitted_value_in_list(fgcolr, xfdata.COLOR_list)
    libr.check_admitted_value_in_list(bgcolr, xfdata.COLOR_list)
    ulfgcolr = libr.convert_to_FL_COLOR(fgcolr)
    ulbgcolr = libr.convert_to_FL_COLOR(bgcolr)
    libr.keep_elem_refs(fgcolr, bgcolr, ulfgcolr, ulbgcolr)
    _fl_setpup_default_color(ulfgcolr, ulbgcolr)


def fl_setpup_default_pup_checked_color(colr):
    """
        fl_setpup_default_pup_checked_color(colr):

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_default_pup_checked_color = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_default_pup_checked_color",
        None, [xfdata.FL_COLOR],
        """void fl_setpup_default_pup_checked_color(FL_COLOR col)""")
    warn_deprecated_function("fl_*popup*")
    libr.check_admitted_value_in_list(colr, xfdata.COLOR_list)
    ulcolr = libr.convert_to_FL_COLOR(colr)
    libr.keep_elem_refs(colr, ulcolr)
    _fl_setpup_default_pup_checked_color(ulcolr)


def fl_setpup_default_fontsize(size):
    """
        fl_setpup_default_fontsize(size) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_default_fontsize = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_default_fontsize",
        cty.c_int, [cty.c_int],
        """int fl_setpup_default_fontsize(int size)""")
    warn_deprecated_function("fl_*popup*")
    isize = libr.convert_to_int(size)
    libr.keep_elem_refs(size, isize)
    retval = _fl_setpup_default_fontsize(isize)
    return retval


def fl_setpup_default_fontstyle(style):
    """
        fl_setpup_default_fontstyle(style) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_default_fontstyle = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_default_fontstyle",
        cty.c_int, [cty.c_int],
        """int fl_setpup_default_fontstyle(int style)""")
    warn_deprecated_function("fl_*popup*")
    istyle = libr.convert_to_int(style)
    libr.keep_elem_refs(style, istyle)
    retval = _fl_setpup_default_fontstyle(istyle)
    return retval


fl_setpup_fontsize = fl_setpup_default_fontsize
fl_setpup_fontstyle = fl_setpup_default_fontstyle
fl_setpup_color = fl_setpup_default_color
fl_setpup_default_checkcolor = fl_setpup_default_pup_checked_color
fl_setpup_checkcolor = fl_setpup_default_pup_checked_color


def fl_setpup_default_bw(bw):
    """
        fl_setpup_default_bw(bw) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_default_bw = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_default_bw",
        cty.c_int, [cty.c_int],
        """int fl_setpup_default_bw(int bw)""")
    warn_deprecated_function("fl_*popup*")
    ibw = libr.convert_to_int(bw)
    libr.keep_elem_refs(bw, ibw)
    retval = _fl_setpup_default_bw(ibw)
    return retval


def fl_setpup_shortcut(popupid, itemval, hotkeystxt):
    """
        fl_setpup_shortcut(popupid, itemval, hotkeystxt)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_shortcut = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_shortcut",
        None, [cty.c_int, cty.c_int, xfdata.STRING],
        """void fl_setpup_shortcut(int nm, int ni, const char * sc)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    iitemval = libr.convert_to_int(itemval)
    shotkeystxt = libr.convert_to_string(hotkeystxt)
    libr.keep_elem_refs(popupid, itemval, hotkeystxt, ipopupid, iitemval, \
                   shotkeystxt)
    _fl_setpup_shortcut(ipopupid, iitemval, shotkeystxt)


def fl_setpup_position(x, y):
    """ fl_setpup_position(x, y)

        :status: Untested + NoDoc + NoExample = NOT OK

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_position = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_position",
        None, [cty.c_int, cty.c_int],
        """void fl_setpup_position(int x, int y)""")
    warn_deprecated_function("fl_*popup*")
    ix = libr.convert_to_int(x)
    iy = libr.convert_to_int(y)
    libr.keep_elem_refs(x, y, ix, iy)
    _fl_setpup_position(ix, iy)


def fl_setpup_selection(popupid, itemval):
    """
        fl_setpup_selection(popupid, itemval)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """

    _fl_setpup_selection = libr.cfuncproto(
            libr.load_so_libforms(), "fl_setpup_selection",
            None, [cty.c_int, cty.c_int],
            """void fl_setpup_selection(int nm, int ni)
            """)
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    iitemval = libr.convert_to_int(itemval)
    libr.keep_elem_refs(popupid, itemval, ipopupid, iitemval)
    _fl_setpup_selection(ipopupid, iitemval)


def fl_setpup_shadow(popupid, flag):
    """
        fl_setpup_shadow(popupid, flag)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_shadow = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_shadow",
        None, [cty.c_int, cty.c_int],
        """void fl_setpup_shadow(int n, int y)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    iflag = libr.convert_to_int(flag)
    libr.keep_elem_refs(popupid, flag, ipopupid, iflag)
    _fl_setpup_shadow(ipopupid, iflag)


def fl_setpup_softedge(popupid, flag):
    """
        fl_setpup_softedge(popupid, flag)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_softedge = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_softedge",
        None, [cty.c_int, cty.c_int],
        """void fl_setpup_softedge(int n, int y)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    iflag = libr.convert_to_int(flag)
    libr.keep_elem_refs(popupid, flag, ipopupid, iflag)
    _fl_setpup_softedge(ipopupid, iflag)


def fl_setpup_bw(popupid, bw):
    """
        fl_setpup_bw(popupid, bw)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_bw = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_bw",
        None, [cty.c_int, cty.c_int],
        """void fl_setpup_bw(int n, int bw)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    ibw = libr.convert_to_int(bw)
    libr.keep_elem_refs(popupid, bw, ipopupid, ibw)
    _fl_setpup_bw(ipopupid, ibw)


def fl_setpup_title(popupid, title):
    """
        fl_setpup_title(popupid, title)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_title = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_title",
        None, [cty.c_int, xfdata.STRING],
        """void fl_setpup_title(int nm, const char * title)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    stitle = libr.convert_to_string(title)
    libr.keep_elem_refs(popupid, title, ipopupid, stitle)
    _fl_setpup_title(ipopupid, stitle)


def fl_setpup_entercb(popupid, py_PupEnterCb, vdata):
    """
        fl_setpup_entercb(popupid, py_PupEnterCb, vdata) -> pup_entercb

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    #FL_PUP_ENTERCB = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
    _fl_setpup_entercb = libr.cfuncproto(
            libr.load_so_libforms(), "fl_setpup_entercb",
            FL_PUP_ENTERCB, [cty.c_int, FL_PUP_ENTERCB, cty.c_void_p],
            """FL_PUP_ENTERCB fl_setpup_entercb(int nm, FL_PUP_ENTERCB cb,
               void * data)
            """)
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    c_PupEnterCb = FL_PUP_ENTERCB(py_PupEnterCb)
    pvdata = cty.cast(vdata, cty.c_void_p)
    libr.keep_cfunc_refs(c_PupEnterCb, py_PupEnterCb)
    libr.keep_elem_refs(popupid, vdata, ipopupid, pvdata)
    retval = _fl_setpup_entercb(ipopupid, c_PupEnterCb, pvdata)
    return retval


def fl_setpup_leavecb(popupid, py_LeaveCb, data):
    """
        fl_setpup_leavecb(popupid, py_LeaveCb, data) -> pup_leavecb

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    #FL_PUP_LEAVECB = cty.CFUNCTYPE(None, cty.c_int, cty.c_void_p)
    _fl_setpup_leavecb = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_leavecb",
        FL_PUP_LEAVECB, [cty.c_int, FL_PUP_LEAVECB, cty.c_void_p],
        """FL_PUP_LEAVECB fl_setpup_leavecb(int nm, FL_PUP_LEAVECB cb,
           void * data)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    c_LeaveCb = FL_PUP_LEAVECB(py_LeaveCb)
    pdata = cty.cast(data, cty.c_void_p)
    libr.keep_cfunc_refs(c_LeaveCb, py_LeaveCb)
    libr.keep_elem_refs(popupid, data, ipopupid, pdata)
    retval = _fl_setpup_leavecb(ipopupid, c_LeaveCb, pdata)
    return retval


def fl_setpup_pad(popupid, padw, padh):
    """
        fl_setpup_pad(popupid, padw, padh)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_pad = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_pad",
        None, [cty.c_int, cty.c_int, cty.c_int],
        """void fl_setpup_pad(int n, int padw, int padh)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    ipadw = libr.convert_to_int(padw)
    ipadh = libr.convert_to_int(padh)
    libr.keep_elem_refs(popupid, padw, padh, ipopupid, ipadw, ipadh)
    _fl_setpup_pad(ipopupid, ipadw, ipadh)


def fl_setpup_cursor(popupid, cursor):
    """
        fl_setpup_cursor(popupid, cursor) -> cursor

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_cursor = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_cursor",
        cursor.Cursor, [cty.c_int, cty.c_int],
        """Cursor fl_setpup_cursor(int nm, int cursor)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    icursor = libr.convert_to_int(cursor)
    libr.keep_elem_refs(popupid, cursor, ipopupid, icursor)
    retval = _fl_setpup_cursor(ipopupid, icursor)
    return retval


def fl_setpup_maxpup(newmaxnum):
    """
        fl_setpup_maxpup(newmaxnum) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_setpup_maxpup = libr.cfuncproto(
        libr.load_so_libforms(), "fl_setpup_maxpup",
        cty.c_int, [cty.c_int],
        """int fl_setpup_maxpup(int n)""")
    warn_deprecated_function("fl_*popup*")
    inewmaxnum = libr.convert_to_int(newmaxnum)
    libr.keep_elem_refs(newmaxnum, inewmaxnum)
    retval = _fl_setpup_maxpup(inewmaxnum)
    return retval


def fl_getpup_mode(popupid, itemval):
    """
        fl_getpup_mode(popupid, itemval) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_getpup_mode = libr.cfuncproto(
        libr.load_so_libforms(), "fl_getpup_mode",
        cty.c_uint, [cty.c_int, cty.c_int],
        """unsigned int fl_getpup_mode(int nm, int ni)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    iitemval = libr.convert_to_int(itemval)
    libr.keep_elem_refs(popupid, itemval, ipopupid, iitemval)
    retval = _fl_getpup_mode(ipopupid, iitemval)
    return retval


def fl_getpup_text(popupid, itemval):
    """
        fl_getpup_text(popupid, itemval) -> text string

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_getpup_text = libr.cfuncproto(
        libr.load_so_libforms(), "fl_getpup_text",
        xfdata.STRING, [cty.c_int, cty.c_int],
        """const char * fl_getpup_text(int nm, int ni)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    iitemval = libr.convert_to_int(itemval)
    libr.keep_elem_refs(popupid, itemval, ipopupid, iitemval)
    retval = _fl_getpup_text(ipopupid, iitemval)
    return retval


def fl_showpup(popupid):
    """
        fl_showpup(popupid)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_showpup = libr.cfuncproto(
        libr.load_so_libforms(), "fl_showpup",
        None, [cty.c_int],
        """void fl_showpup(int n)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    libr.keep_elem_refs(popupid, ipopupid)
    _fl_showpup(ipopupid)


def fl_hidepup(popupid):
    """
        fl_hidepup(popupid)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_hidepup = libr.cfuncproto(
        libr.load_so_libforms(), "fl_hidepup",
        None, [cty.c_int],
        """void fl_hidepup(int n)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    libr.keep_elem_refs(popupid, ipopupid)
    _fl_hidepup(ipopupid)


def fl_getpup_items(popupid):
    """
        fl_getpup_items(popupid) -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """
    _fl_getpup_items = libr.cfuncproto(
        libr.load_so_libforms(), "fl_getpup_items",
        cty.c_int, [cty.c_int],
        """int fl_getpup_items(int n)""")
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    libr.keep_elem_refs(popupid, ipopupid)
    retval = _fl_getpup_items(ipopupid)
    return retval

def fl_current_pup():
    """
        fl_current_pup() -> num.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """

    _fl_current_pup = libr.cfuncproto(
            libr.load_so_libforms(), "fl_current_pup",
            cty.c_int, [],
            """int fl_current_pup()
            """)
    warn_deprecated_function("fl_*popup*")
    retval = _fl_current_pup()
    return retval


def fl_setpup_itemcb(popupid, itemval, py_PupCb):
    """
        fl_setpup_itemcb(popupid, itemval, py_PupCb) -> pup_cb

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """

    _fl_setpup_itemcb = libr.cfuncproto(
            libr.load_so_libforms(), "fl_setpup_itemcb",
            FL_PUP_CB, [cty.c_int, cty.c_int, FL_PUP_CB],
            """FL_PUP_CB fl_setpup_itemcb(int nm, int ni, FL_PUP_CB cb)
            """)
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    iitemval = libr.convert_to_int(itemval)
    c_PupCb = FL_PUP_CB(py_PupCb)
    libr.keep_cfunc_refs(c_PupCb, py_PupCb)
    libr.keep_elem_refs(popupid, itemval, ipopupid, iitemval)
    retval = _fl_setpup_itemcb(ipopupid, iitemval, c_PupCb)
    return retval


def fl_setpup_menucb(popupid, py_PupCb):
    """
        fl_setpup_menucb(popupid, py_PupCb) -> pup_cb func.

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """

    _fl_setpup_menucb = libr.cfuncproto(
            libr.load_so_libforms(), "fl_setpup_menucb",
            FL_PUP_CB, [cty.c_int, FL_PUP_CB],
            """FL_PUP_CB fl_setpup_menucb(int nm, FL_PUP_CB cb)
            """)
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    c_PupCb = FL_PUP_CB(py_PupCb)
    libr.keep_cfunc_refs(c_PupCb, py_PupCb)
    libr.keep_elem_refs(popupid, ipopupid)
    retval = _fl_setpup_menucb(ipopupid, c_PupCb)
    return retval


def fl_setpup_submenu(popupid, itemval, subpopupid):
    """
        fl_setpup_submenu(popupid, itemval, subpopupid)

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use corresponding fl_*popup* function
    """

    _fl_setpup_submenu = libr.cfuncproto(
            libr.load_so_libforms(), "fl_setpup_submenu",
            None, [cty.c_int, cty.c_int, cty.c_int],
            """void fl_setpup_submenu(int m, int i, int subm)
            """)
    warn_deprecated_function("fl_*popup*")
    ipopupid = libr.convert_to_int(popupid)
    iitemval = libr.convert_to_int(itemval)
    isubpopupid = libr.convert_to_int(subpopupid)
    libr.keep_elem_refs(popupid, itemval, subpopupid, ipopupid, iitemval, \
                   isubpopupid)
    _fl_setpup_submenu(ipopupid, iitemval, isubpopupid)


fl_setpup = fl_setpup_mode


#####################
# forms.h (xyplot.h)
#####################


# The following two functions will be removed.
# Use fl_set_object_l[size|style] for the functionalities

def fl_set_xyplot_fontsize(pObject, size):
    """
        fl_set_xyplot_fontsize(pObject, size)

        @param pObject: pointer to object

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use fl_set_object_lsize function
    """

    _fl_set_xyplot_fontsize = libr.cfuncproto(
            libr.load_so_libforms(), "fl_set_xyplot_fontsize",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_xyplot_fontsize(FL_OBJECT * ob, int size)
            """)
    warn_deprecated_function("fl_set_object_lsize")
    isize = libr.convert_to_int(size)
    libr.keep_elem_refs(pObject, size, isize)
    _fl_set_xyplot_fontsize(pObject, isize)


def fl_set_xyplot_fontstyle(pObject, style):
    """
        fl_set_xyplot_fontstyle(pObject, style)

        @param pObject: pointer to object

        :status: Untested + NoDoc + NoExample = NOT OK
        @deprecated: Use fl_set_object_lstyle function
    """

    _fl_set_xyplot_fontstyle = libr.cfuncproto(
            libr.load_so_libforms(), "fl_set_xyplot_fontstyle",
            None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_int],
            """void fl_set_xyplot_fontstyle(FL_OBJECT * ob, int style)
            """)
    warn_deprecated_function("fl_set_object_lstyle")
    istyle = libr.convert_to_int(style)
    libr.keep_elem_refs(pObject, style, istyle)
    _fl_set_xyplot_fontstyle(pObject, istyle)


#####################
# forms.h (slider.h)
#####################

def fl_set_slider_return(pObject, when):
    """
        fl_set_slider_return(pObject, when)

        Sets the return value of a slider.

        @param pObject: pointer to object
        @param when: return type (when it returns)

        :status: Tested + NoDoc + Example = OK
        @deprecated: Use fl_set_object_return function
    """
    _fl_set_slider_return = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_slider_return",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint],
        """void fl_set_slider_return(FL_OBJECT * ob, unsigned
           int value)""")
    warn_deprecated_function("fl_set_object_return")
    libr.check_admitted_value_in_list(when, xfdata.RETURN_list)
    uiwhen = libr.convert_to_uint(when)
    libr.keep_elem_refs(pObject, when, uiwhen)
    _fl_set_slider_return(pObject, uiwhen)


def fl_set_positioner_return(pFlObject, when):
    """
    fl_set_positioner_return(pFlObject, when)

--
:Parameters:

      `pFlObject: positioner object
    @type pFlObject: pointer to xfdata.FL_OBJECT
      `when: return type (when it returns)
    @type when: int_pos

    :return:
    :rtype:

    :note: e.g. *todo*

    :status: Untested + NoDoc + NoDemo = NOT OK

    :deprecated: use flbasic.fl_set_object_return(..)
    """
    _fl_set_positioner_return = libr.cfuncproto(
        libr.load_so_libforms(), "fl_set_positioner_return",
        None, [cty.POINTER(xfdata.FL_OBJECT), cty.c_uint],
        """void fl_set_positioner_return(FL_OBJECT * ob, unsigned
           int value)""")
    libr.check_if_initialized()
    libr.verify_flobjectptr_type(pFlObject)
    libr.check_admitted_value_in_list(when, xfdata.RETURN_list)
    uiwhen = libr.convert_to_uint(when)
    libr.keep_elem_refs(pFlObject, when, uiwhen)
    _fl_set_positioner_return(pFlObject, uiwhen)

